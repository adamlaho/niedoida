/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdsd_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1202_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C90098 = 0 * ae;
    const double C90097 = ae * be;
    const double C90096 = 0 * be;
    const double C90095 = ae + be;
    const double C90094 = 0 * be;
    const double C90093 = xA - xB;
    const double C90155 = yA - yB;
    const double C90158 = zA - zB;
    const double C90173 = 0 * be;
    const double C90199 = 0 * be;
    const double C90280 = 0 * ae;
    const double C90276 = 0 * be;
    const double C90351 = 0 * ae;
    const double C90347 = 0 * be;
    const double C90399 = p + q;
    const double C90398 = p * q;
    const double C90404 = xP - xQ;
    const double C90403 = bs[2];
    const double C90409 = bs[3];
    const double C90420 = bs[4];
    const double C90441 = bs[5];
    const double C90477 = bs[6];
    const double C90526 = yP - yQ;
    const double C90570 = zP - zQ;
    const double C108 = bs[0];
    const double C92119 = ce + de;
    const double C92118 = ce * de;
    const double C92117 = xC - xD;
    const double C92131 = yC - yD;
    const double C92145 = zC - zD;
    const double C90127 = 2 * C90097;
    const double C90125 = -2 * C90096;
    const double C90103 = C90098 / C90095;
    const double C90100 = 2 * C90095;
    const double C90099 = std::pow(C90095, 2);
    const double C90102 = C90097 * C90093;
    const double C90101 = C90093 * C90096;
    const double C92093 = C90093 * be;
    const double C92092 = C90093 * ae;
    const double C92091 = std::pow(C90093, 2);
    const double C90174 = C90097 * C90155;
    const double C92173 = std::pow(C90155, 2);
    const double C92222 = C90155 * be;
    const double C92221 = C90155 * ae;
    const double C90200 = C90097 * C90158;
    const double C92184 = std::pow(C90158, 2);
    const double C92248 = C90158 * be;
    const double C92247 = C90158 * ae;
    const double C90277 = C90155 * C90173;
    const double C90301 = -2 * C90173;
    const double C90348 = C90158 * C90199;
    const double C90372 = -2 * C90199;
    const double C90285 = C90280 / C90095;
    const double C90356 = C90351 / C90095;
    const double C90400 = 2 * C90398;
    const double C90412 = C90404 * ae;
    const double C90411 = C90404 * be;
    const double C90408 = std::pow(C90404, 2);
    const double C90529 = C90526 * be;
    const double C90528 = C90404 * C90526;
    const double C90616 = C90526 * ae;
    const double C90615 = C90526 * C90404;
    const double C90658 = std::pow(C90526, 2);
    const double C90573 = C90570 * be;
    const double C90572 = C90404 * C90570;
    const double C90679 = C90526 * C90570;
    const double C90697 = C90570 * ae;
    const double C90696 = C90570 * C90404;
    const double C90739 = C90570 * C90526;
    const double C90756 = std::pow(C90570, 2);
    const double C92327 = 2 * C92119;
    const double C92326 = std::pow(C92119, 2);
    const double C92120 = std::pow(C92117, 2);
    const double C92325 = C92117 * ce;
    const double C92132 = std::pow(C92131, 2);
    const double C92328 = C92131 * ce;
    const double C92146 = std::pow(C92145, 2);
    const double C92329 = C92145 * ce;
    const double C90128 = ae * C90125;
    const double C92101 = std::pow(C90100, -1);
    const double C92331 = std::pow(C90100, -2);
    const double C90104 = 2 * C90099;
    const double C90124 = C90099 * C90100;
    const double C92324 = 4 * C90099;
    const double C90105 = C90101 / C90095;
    const double C92094 = C92091 * C90097;
    const double C92174 = C92173 * C90097;
    const double C92185 = C92184 * C90097;
    const double C90282 = C90277 / C90095;
    const double C90304 = ae * C90301;
    const double C90353 = C90348 / C90095;
    const double C90375 = ae * C90372;
    const double C90402 = C90400 / C90399;
    const double C126 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C90400 / C90399, 2) -
          (bs[1] * C90400) / C90399) *
         C90097) /
        C90099;
    const double C109 = -(C90404 * bs[1] * C90400) / C90399;
    const double C797 = -(C90526 * bs[1] * C90400) / C90399;
    const double C1378 = -(C90570 * bs[1] * C90400) / C90399;
    const double C90415 = C90409 * C90412;
    const double C90426 = C90420 * C90412;
    const double C90449 = C90441 * C90412;
    const double C90489 = C90477 * C90412;
    const double C115 = (-(bs[1] * C90412 * C90400) / C90399) / C90095;
    const double C90414 = C90409 * C90411;
    const double C90423 = C90420 * C90411;
    const double C90445 = C90441 * C90411;
    const double C90485 = C90477 * C90411;
    const double C114 = (-(bs[1] * C90411 * C90400) / C90399) / C90095;
    const double C90422 = C90408 * C90420;
    const double C90444 = C90408 * C90441;
    const double C90484 = C90408 * C90477;
    const double C90531 = C90409 * C90529;
    const double C90536 = C90420 * C90529;
    const double C90543 = C90441 * C90529;
    const double C90554 = C90477 * C90529;
    const double C183 = (-(bs[1] * C90529 * C90400) / C90399) / C90095;
    const double C90530 = C90528 * ae;
    const double C90618 = C90409 * C90616;
    const double C90623 = C90420 * C90616;
    const double C90630 = C90441 * C90616;
    const double C90641 = C90477 * C90616;
    const double C348 = (-(bs[1] * C90616 * C90400) / C90399) / C90095;
    const double C90617 = C90615 * ae;
    const double C90660 = C90658 * C90420;
    const double C90665 = C90658 * C90441;
    const double C90670 = C90658 * C90477;
    const double C90575 = C90409 * C90573;
    const double C90580 = C90420 * C90573;
    const double C90587 = C90441 * C90573;
    const double C90598 = C90477 * C90573;
    const double C266 = (-(bs[1] * C90573 * C90400) / C90399) / C90095;
    const double C90574 = C90572 * ae;
    const double C90680 = C90679 * ae;
    const double C90699 = C90409 * C90697;
    const double C90704 = C90420 * C90697;
    const double C90711 = C90441 * C90697;
    const double C90722 = C90477 * C90697;
    const double C567 = (-(bs[1] * C90697 * C90400) / C90399) / C90095;
    const double C90698 = C90696 * ae;
    const double C90740 = C90739 * ae;
    const double C90758 = C90756 * C90420;
    const double C90763 = C90756 * C90441;
    const double C90768 = C90756 * C90477;
    const double C92348 = std::pow(C92327, -2);
    const double C92346 = std::pow(C92327, -1);
    const double C92121 = C92120 * C92118;
    const double C92133 = C92132 * C92118;
    const double C92147 = C92146 * C92118;
    const double C90110 = C90096 / C90104;
    const double C90108 = C90094 / C90104;
    const double C90279 = C90173 / C90104;
    const double C90283 = C90276 / C90104;
    const double C90350 = C90199 / C90104;
    const double C90354 = C90347 / C90104;
    const double C90107 = 0 - C90105;
    const double C92095 = C92094 / C90095;
    const double C92175 = C92174 / C90095;
    const double C92186 = C92185 / C90095;
    const double C90286 = 0 - C90282;
    const double C90357 = 0 - C90353;
    const double C90405 = std::pow(C90402, 2);
    const double C90410 = -C90402;
    const double C90421 = std::pow(C90402, 4);
    const double C90478 = std::pow(C90402, 6);
    const double C90532 = C90530 * be;
    const double C90619 = C90617 * be;
    const double C90576 = C90574 * be;
    const double C90681 = C90680 * be;
    const double C90700 = C90698 * be;
    const double C90741 = C90740 * be;
    const double C92122 = C92121 / C92119;
    const double C92134 = C92133 / C92119;
    const double C92148 = C92147 / C92119;
    const double C90112 = C90107 * ae;
    const double C92096 = -C92095;
    const double C92176 = -C92175;
    const double C92187 = -C92186;
    const double C90289 = C90286 * ae;
    const double C90360 = C90357 * ae;
    const double C90407 = C90403 * C90405;
    const double C127 = (ae * C90405 * C90403 * C90404 * be +
                         be * C90405 * C90403 * C90404 * ae +
                         C90404 *
                             (C90403 * C90405 + std::pow(C90404, 2) * bs[3] *
                                                    std::pow(-C90402, 3)) *
                             C90097) /
                        C90099;
    const double C189 =
        (C90405 * C90403 * C90404 * (yP - yQ) * ae * be) / C90099;
    const double C272 =
        (C90405 * C90403 * C90404 * (zP - zQ) * ae * be) / C90099;
    const double C354 = (C90405 * C90403 * C90526 * C90404 * ae * be) / C90099;
    const double C411 =
        ((std::pow(C90526, 2) * C90403 * C90405 - (bs[1] * C90400) / C90399) *
         C90097) /
        C90099;
    const double C495 = (C90405 * C90403 * C90526 * C90570 * ae * be) / C90099;
    const double C573 = (C90405 * C90403 * C90570 * C90404 * ae * be) / C90099;
    const double C629 = (C90405 * C90403 * C90570 * C90526 * ae * be) / C90099;
    const double C702 =
        ((std::pow(C90570, 2) * C90403 * C90405 - (bs[1] * C90400) / C90399) *
         C90097) /
        C90099;
    const double C116 = (C90404 * C90405 * C90403 * C90411) / C90095 -
                        (be * bs[1] * C90400) / (C90399 * C90095);
    const double C117 = (C90404 * C90405 * C90403 * C90412) / C90095 -
                        (ae * bs[1] * C90400) / (C90399 * C90095);
    const double C184 = (C90404 * C90405 * C90403 * C90529) / C90095;
    const double C267 = (C90404 * C90405 * C90403 * C90573) / C90095;
    const double C349 = (C90404 * C90405 * C90403 * C90616) / C90095;
    const double C568 = (C90404 * C90405 * C90403 * C90697) / C90095;
    const double C808 = (C90526 * C90405 * C90403 * C90411) / C90095;
    const double C809 = (C90526 * C90405 * C90403 * C90412) / C90095;
    const double C876 = (C90526 * C90405 * C90403 * C90529) / C90095 -
                        (be * bs[1] * C90400) / (C90399 * C90095);
    const double C942 = (C90526 * C90405 * C90403 * C90573) / C90095;
    const double C1008 = (C90526 * C90405 * C90403 * C90616) / C90095 -
                         (ae * bs[1] * C90400) / (C90399 * C90095);
    const double C1190 = (C90526 * C90405 * C90403 * C90697) / C90095;
    const double C1389 = (C90570 * C90405 * C90403 * C90411) / C90095;
    const double C1390 = (C90570 * C90405 * C90403 * C90412) / C90095;
    const double C1457 = (C90570 * C90405 * C90403 * C90529) / C90095;
    const double C1523 = (C90570 * C90405 * C90403 * C90573) / C90095 -
                         (be * bs[1] * C90400) / (C90399 * C90095);
    const double C1589 = (C90570 * C90405 * C90403 * C90616) / C90095;
    const double C1771 = (C90570 * C90405 * C90403 * C90697) / C90095 -
                         (ae * bs[1] * C90400) / (C90399 * C90095);
    const double C90413 = std::pow(C90410, 3);
    const double C90442 = std::pow(C90410, 5);
    const double C90430 = C90421 * C90426;
    const double C90429 = C90421 * C90423;
    const double C90428 = C90422 * C90421;
    const double C90440 = C90420 * C90421;
    const double C90538 = C90421 * C90536;
    const double C90582 = C90421 * C90580;
    const double C90625 = C90421 * C90623;
    const double C90661 = C90660 * C90421;
    const double C90706 = C90421 * C90704;
    const double C90759 = C90758 * C90421;
    const double C90496 = C90478 * C90489;
    const double C90493 = C90478 * C90485;
    const double C90492 = C90484 * C90478;
    const double C90558 = C90478 * C90554;
    const double C90602 = C90478 * C90598;
    const double C90645 = C90478 * C90641;
    const double C90671 = C90670 * C90478;
    const double C90726 = C90478 * C90722;
    const double C90769 = C90768 * C90478;
    const double C90535 = C90420 * C90532;
    const double C90542 = C90441 * C90532;
    const double C90553 = C90477 * C90532;
    const double C90622 = C90420 * C90619;
    const double C90629 = C90441 * C90619;
    const double C90640 = C90477 * C90619;
    const double C90579 = C90420 * C90576;
    const double C90586 = C90441 * C90576;
    const double C90597 = C90477 * C90576;
    const double C90683 = C90420 * C90681;
    const double C90686 = C90441 * C90681;
    const double C90689 = C90477 * C90681;
    const double C90703 = C90420 * C90700;
    const double C90710 = C90441 * C90700;
    const double C90721 = C90477 * C90700;
    const double C90743 = C90420 * C90741;
    const double C90746 = C90441 * C90741;
    const double C90749 = C90477 * C90741;
    const double C92123 = -C92122;
    const double C92135 = -C92134;
    const double C92149 = -C92148;
    const double C90115 = C90112 / C90095;
    const double C92097 = std::exp(C92096);
    const double C92177 = std::exp(C92176);
    const double C92188 = std::exp(C92187);
    const double C90290 = C90289 / C90095;
    const double C90361 = C90360 / C90095;
    const double C110 = C90407 * C90408 - (bs[1] * C90400) / C90399;
    const double C796 = C90526 * C90404 * C90407;
    const double C798 = C90407 * C90658 - (bs[1] * C90400) / C90399;
    const double C1377 = C90570 * C90404 * C90407;
    const double C1379 = C90407 * C90756 - (bs[1] * C90400) / C90399;
    const double C3357 = C90570 * C90526 * C90407;
    const double C90417 = C90413 * C90415;
    const double C90416 = C90413 * C90414;
    const double C90419 = C90409 * C90413;
    const double C90533 = C90413 * C90531;
    const double C90577 = C90413 * C90575;
    const double C90620 = C90413 * C90618;
    const double C90701 = C90413 * C90699;
    const double C190 = (ae * C90405 * C90403 * C90526 * be +
                         C90404 * C90413 * C90409 * C90404 * C90526 * ae * be) /
                        C90099;
    const double C273 = (ae * C90405 * C90403 * C90570 * be +
                         C90404 * C90413 * C90409 * C90404 * C90570 * ae * be) /
                        C90099;
    const double C355 = (be * C90405 * C90403 * C90526 * ae +
                         C90404 * C90413 * C90409 * C90526 * C90404 * ae * be) /
                        C90099;
    const double C412 =
        (C90404 * (C90407 + std::pow(C90526, 2) * C90409 * C90413) * C90097) /
        C90099;
    const double C496 =
        (C90404 * C90413 * C90409 * C90526 * C90570 * ae * be) / C90099;
    const double C497 =
        (C90413 * C90409 * C90681 + C90421 * C90420 * C90681 * C90408) / C90099;
    const double C574 = (be * C90405 * C90403 * C90570 * ae +
                         C90404 * C90413 * C90409 * C90570 * C90404 * ae * be) /
                        C90099;
    const double C630 =
        (C90404 * C90413 * C90409 * C90570 * C90526 * ae * be) / C90099;
    const double C631 =
        (C90413 * C90409 * C90741 + C90421 * C90420 * C90741 * C90408) / C90099;
    const double C703 =
        (C90404 * (C90407 + std::pow(C90570, 2) * C90409 * C90413) * C90097) /
        C90099;
    const double C821 =
        (C90526 * (C90407 + C90408 * C90409 * C90413) * C90097) / C90099;
    const double C884 =
        (be * C90405 * C90403 * C90412 + C90526 * C90413 * C90409 * C90532) /
        C90099;
    const double C950 = (C90526 * C90413 * C90409 * C90576) / C90099;
    const double C1016 =
        (ae * C90405 * C90403 * C90411 + C90526 * C90413 * C90409 * C90619) /
        C90099;
    const double C1077 =
        (ae * C90405 * C90403 * C90529 + be * C90405 * C90403 * C90616 +
         C90526 * (C90407 + C90658 * C90409 * C90413) * C90097) /
        C90099;
    const double C1132 =
        (ae * C90405 * C90403 * C90573 + C90526 * C90413 * C90409 * C90681) /
        C90099;
    const double C1198 = (C90526 * C90413 * C90409 * C90700) / C90099;
    const double C1256 =
        (be * C90405 * C90403 * C90697 + C90526 * C90413 * C90409 * C90741) /
        C90099;
    const double C1317 =
        (C90526 * (C90407 + C90756 * C90409 * C90413) * C90097) / C90099;
    const double C1402 =
        (C90570 * (C90407 + C90408 * C90409 * C90413) * C90097) / C90099;
    const double C1465 = (C90570 * C90413 * C90409 * C90532) / C90099;
    const double C1531 =
        (be * C90405 * C90403 * C90412 + C90570 * C90413 * C90409 * C90576) /
        C90099;
    const double C1597 = (C90570 * C90413 * C90409 * C90619) / C90099;
    const double C1658 =
        (C90570 * (C90407 + C90658 * C90409 * C90413) * C90097) / C90099;
    const double C1713 =
        (be * C90405 * C90403 * C90616 + C90570 * C90413 * C90409 * C90681) /
        C90099;
    const double C1779 =
        (ae * C90405 * C90403 * C90411 + C90570 * C90413 * C90409 * C90700) /
        C90099;
    const double C1837 =
        (ae * C90405 * C90403 * C90529 + C90570 * C90413 * C90409 * C90741) /
        C90099;
    const double C1898 =
        (ae * C90405 * C90403 * C90573 + be * C90405 * C90403 * C90697 +
         C90570 * (C90407 + C90756 * C90409 * C90413) * C90097) /
        C90099;
    const double C90455 = C90442 * C90449;
    const double C90452 = C90442 * C90445;
    const double C90451 = C90444 * C90442;
    const double C90476 = C90441 * C90442;
    const double C90545 = C90442 * C90543;
    const double C90589 = C90442 * C90587;
    const double C90632 = C90442 * C90630;
    const double C90666 = C90665 * C90442;
    const double C90713 = C90442 * C90711;
    const double C90764 = C90763 * C90442;
    const double C90433 = C90404 * C90430;
    const double C90439 = be * C90430;
    const double C91002 = C90526 * C90430;
    const double C91243 = C90570 * C90430;
    const double C90432 = C90404 * C90429;
    const double C90438 = ae * C90429;
    const double C91020 = C90526 * C90429;
    const double C91275 = C90570 * C90429;
    const double C90450 = C90440 * ae;
    const double C90448 = C90440 * C90408;
    const double C90447 = C90404 * C90440;
    const double C90446 = C90440 * be;
    const double C91049 = C90440 * C90658;
    const double C91048 = C90526 * C90440;
    const double C91317 = C90440 * C90756;
    const double C91316 = C90570 * C90440;
    const double C90541 = ae * C90538;
    const double C90540 = C90404 * C90538;
    const double C91039 = C90526 * C90538;
    const double C91289 = C90570 * C90538;
    const double C90585 = ae * C90582;
    const double C90584 = C90404 * C90582;
    const double C91089 = C90526 * C90582;
    const double C91307 = C90570 * C90582;
    const double C90628 = be * C90625;
    const double C90627 = C90404 * C90625;
    const double C91041 = C90526 * C90625;
    const double C91265 = C90570 * C90625;
    const double C90709 = be * C90706;
    const double C90708 = C90404 * C90706;
    const double C91110 = C90526 * C90706;
    const double C91309 = C90570 * C90706;
    const double C90502 = C90404 * C90496;
    const double C91422 = C90496 * C90658;
    const double C91557 = C90526 * C90496;
    const double C91627 = C90496 * C90756;
    const double C90499 = C90404 * C90493;
    const double C91436 = C90493 * C90658;
    const double C91572 = C90526 * C90493;
    const double C91644 = C90493 * C90756;
    const double C90561 = C90558 * C90408;
    const double C91066 = C90404 * C90558;
    const double C91449 = C90526 * C90558;
    const double C91655 = C90558 * C90756;
    const double C90605 = C90602 * C90408;
    const double C91097 = C90404 * C90602;
    const double C91485 = C90602 * C90658;
    const double C91586 = C90526 * C90602;
    const double C91668 = C90570 * C90602;
    const double C90648 = C90645 * C90408;
    const double C91069 = C90404 * C90645;
    const double C91454 = C90526 * C90645;
    const double C91566 = C90645 * C90756;
    const double C90729 = C90726 * C90408;
    const double C91118 = C90404 * C90726;
    const double C91500 = C90726 * C90658;
    const double C91589 = C90526 * C90726;
    const double C91674 = C90570 * C90726;
    const double C90537 = C90421 * C90535;
    const double C90544 = C90442 * C90542;
    const double C90556 = C90478 * C90553;
    const double C90624 = C90421 * C90622;
    const double C90631 = C90442 * C90629;
    const double C90643 = C90478 * C90640;
    const double C90581 = C90421 * C90579;
    const double C90588 = C90442 * C90586;
    const double C90600 = C90478 * C90597;
    const double C90684 = C90421 * C90683;
    const double C90687 = C90442 * C90686;
    const double C90690 = C90478 * C90689;
    const double C90705 = C90421 * C90703;
    const double C90712 = C90442 * C90710;
    const double C90724 = C90478 * C90721;
    const double C90744 = C90421 * C90743;
    const double C90747 = C90442 * C90746;
    const double C90750 = C90478 * C90749;
    const double C92124 = std::exp(C92123);
    const double C92136 = std::exp(C92135);
    const double C92150 = std::exp(C92149);
    const double C90117 = C90115 - C90108;
    const double C36927 = C92097 * C808;
    const double C41399 = C92097 * C1389;
    const double C90106 = C90102 * C92097;
    const double C92098 = C92097 * C92092;
    const double C92102 = C92101 * C92097;
    const double C92321 = C92097 * C92093;
    const double C92318 = C92097 / C90100;
    const double C31251 = C92331 * C92097;
    const double C196 = C92177 * C184;
    const double C11009 = C92177 * C1457;
    const double C90175 = C90174 * C92177;
    const double C182 = -(2 * C90097 * (yA - yB) * C92177) / C90095;
    const double C410 =
        -((C92177 - (C90155 * 2 * C90097 * C90155 * C92177) / C90095) *
          C90127) /
        C90095;
    const double C92223 = C92177 * C92221;
    const double C92226 = C92101 * C92177;
    const double C92335 = C92177 * C92222;
    const double C92330 = C92177 / C90100;
    const double C4027 = C92331 * C92177;
    const double C279 = C92188 * C267;
    const double C5039 = C92188 * C942;
    const double C90201 = C90200 * C92188;
    const double C265 = -(2 * C90097 * (zA - zB) * C92188) / C90095;
    const double C701 =
        -((C92188 - (C90158 * 2 * C90097 * C90158 * C92188) / C90095) *
          C90127) /
        C90095;
    const double C92249 = C92188 * C92247;
    const double C92252 = C92101 * C92188;
    const double C92339 = C92188 * C92248;
    const double C92332 = C92188 / C90100;
    const double C9424 = C92331 * C92188;
    const double C90291 = C90290 - C90283;
    const double C90362 = C90361 - C90354;
    const double C119 =
        (C90405 * C90403 * C90412 + C90404 * (C90404 * C90417 + C90407 * ae) +
         C90404 * C90407 * ae) /
        C90095;
    const double C807 = (C90526 * (C90404 * C90417 + C90407 * ae)) / C90095;
    const double C811 = (C90405 * C90403 * C90412 + C90417 * C90658) / C90095;
    const double C1388 = (C90570 * (C90404 * C90417 + C90407 * ae)) / C90095;
    const double C1392 = (C90405 * C90403 * C90412 + C90417 * C90756) / C90095;
    const double C3362 = (C90570 * C90526 * C90417) / C90095;
    const double C4821 =
        (2 * C90526 * C90417 + C90526 * (C90417 + C90430 * C90658)) / C90095;
    const double C5710 = (C90570 * (C90417 + C90430 * C90658)) / C90095;
    const double C10874 =
        (2 * C90570 * C90417 + C90570 * (C90417 + C90430 * C90756)) / C90095;
    const double C128 =
        ((C90407 + C90408 * C90409 * C90413) * C90097 +
         ae * (C90404 * C90416 + C90407 * be) +
         be * (C90404 * C90417 + C90407 * ae) +
         C90404 *
             (ae * C90416 + be * C90417 +
              C90404 *
                  (C90409 * C90413 + C90408 * bs[4] * std::pow(C90402, 4)) *
                  C90097)) /
        C90099;
    const double C118 =
        (C90405 * C90403 * C90411 + C90404 * (C90404 * C90416 + C90407 * be) +
         C90404 * C90407 * be) /
        C90095;
    const double C806 = (C90526 * (C90404 * C90416 + C90407 * be)) / C90095;
    const double C810 = (C90405 * C90403 * C90411 + C90416 * C90658) / C90095;
    const double C1387 = (C90570 * (C90404 * C90416 + C90407 * be)) / C90095;
    const double C1391 = (C90405 * C90403 * C90411 + C90416 * C90756) / C90095;
    const double C3361 = (C90570 * C90526 * C90416) / C90095;
    const double C4820 =
        (2 * C90526 * C90416 + C90526 * (C90416 + C90429 * C90658)) / C90095;
    const double C5709 = (C90570 * (C90416 + C90429 * C90658)) / C90095;
    const double C10873 =
        (2 * C90570 * C90416 + C90570 * (C90416 + C90429 * C90756)) / C90095;
    const double C90427 = C90419 * ae;
    const double C90425 = C90404 * C90419;
    const double C90424 = C90419 * be;
    const double C90431 = C90419 + C90428;
    const double C90662 = C90419 + C90661;
    const double C90760 = C90419 + C90759;
    const double C91040 = C90526 * C90419;
    const double C91308 = C90570 * C90419;
    const double C413 =
        ((C90407 + C90658 * C90409 * C90413) * C90097 +
         (C90419 + C90658 * C90420 * C90421) * C90097 * C90408) /
        C90099;
    const double C704 =
        ((C90407 + C90756 * C90409 * C90413) * C90097 +
         (C90419 + C90756 * C90420 * C90421) * C90097 * C90408) /
        C90099;
    const double C111 =
        2 * C90404 * C90407 + C90404 * (C90407 + C90419 * C90408);
    const double C795 = C90526 * (C90407 + C90419 * C90408);
    const double C1376 = C90570 * (C90407 + C90419 * C90408);
    const double C4815 =
        2 * C90526 * C90407 + C90526 * (C90407 + C90419 * C90658);
    const double C5702 = C90570 * (C90407 + C90419 * C90658);
    const double C10868 =
        2 * C90570 * C90407 + C90570 * (C90407 + C90419 * C90756);
    const double C191 =
        (C90413 * C90409 * C90532 + ae * C90404 * C90533 +
         C90404 * (ae * C90533 + C90404 * C90421 * C90420 * C90532)) /
        C90099;
    const double C185 = (C90405 * C90403 * C90529 + C90533 * C90408) / C90095;
    const double C186 =
        (2 * C90404 * C90533 + C90404 * (C90533 + C90538 * C90408)) / C90095;
    const double C877 =
        (C90526 * C90404 * C90533 + C90404 * C90407 * be) / C90095;
    const double C878 = (C90526 * (C90533 + C90538 * C90408) +
                         (C90407 + C90419 * C90408) * be) /
                        C90095;
    const double C880 =
        (C90405 * C90403 * C90529 + C90526 * (C90526 * C90533 + C90407 * be) +
         C90526 * C90407 * be) /
        C90095;
    const double C1458 = (C90570 * C90404 * C90533) / C90095;
    const double C1459 = (C90570 * (C90533 + C90538 * C90408)) / C90095;
    const double C1461 = (C90405 * C90403 * C90529 + C90533 * C90756) / C90095;
    const double C3439 = (C90570 * (C90526 * C90533 + C90407 * be)) / C90095;
    const double C11000 =
        (2 * C90570 * C90533 + C90570 * (C90533 + C90538 * C90756)) / C90095;
    const double C274 =
        (C90413 * C90409 * C90576 + ae * C90404 * C90577 +
         C90404 * (ae * C90577 + C90404 * C90421 * C90420 * C90576)) /
        C90099;
    const double C268 = (C90405 * C90403 * C90573 + C90577 * C90408) / C90095;
    const double C269 =
        (2 * C90404 * C90577 + C90404 * (C90577 + C90582 * C90408)) / C90095;
    const double C943 = (C90526 * C90404 * C90577) / C90095;
    const double C944 = (C90526 * (C90577 + C90582 * C90408)) / C90095;
    const double C946 = (C90405 * C90403 * C90573 + C90577 * C90658) / C90095;
    const double C1524 =
        (C90570 * C90404 * C90577 + C90404 * C90407 * be) / C90095;
    const double C1525 = (C90570 * (C90577 + C90582 * C90408) +
                          (C90407 + C90419 * C90408) * be) /
                         C90095;
    const double C1527 =
        (C90405 * C90403 * C90573 + C90570 * (C90570 * C90577 + C90407 * be) +
         C90570 * C90407 * be) /
        C90095;
    const double C3513 =
        (C90570 * C90526 * C90577 + C90526 * C90407 * be) / C90095;
    const double C5030 =
        (2 * C90526 * C90577 + C90526 * (C90577 + C90582 * C90658)) / C90095;
    const double C5885 = (C90570 * (C90577 + C90582 * C90658) +
                          (C90407 + C90419 * C90658) * be) /
                         C90095;
    const double C356 =
        (C90413 * C90409 * C90619 + be * C90404 * C90620 +
         C90404 * (be * C90620 + C90404 * C90421 * C90420 * C90619)) /
        C90099;
    const double C350 = (C90405 * C90403 * C90616 + C90620 * C90408) / C90095;
    const double C351 =
        (2 * C90404 * C90620 + C90404 * (C90620 + C90625 * C90408)) / C90095;
    const double C1009 =
        (C90526 * C90404 * C90620 + C90404 * C90407 * ae) / C90095;
    const double C1010 = (C90526 * (C90620 + C90625 * C90408) +
                          (C90407 + C90419 * C90408) * ae) /
                         C90095;
    const double C1012 =
        (C90405 * C90403 * C90616 + C90526 * (C90526 * C90620 + C90407 * ae) +
         C90526 * C90407 * ae) /
        C90095;
    const double C1590 = (C90570 * C90404 * C90620) / C90095;
    const double C1591 = (C90570 * (C90620 + C90625 * C90408)) / C90095;
    const double C1593 = (C90405 * C90403 * C90616 + C90620 * C90756) / C90095;
    const double C3587 = (C90570 * (C90526 * C90620 + C90407 * ae)) / C90095;
    const double C11191 =
        (2 * C90570 * C90620 + C90570 * (C90620 + C90625 * C90756)) / C90095;
    const double C575 =
        (C90413 * C90409 * C90700 + be * C90404 * C90701 +
         C90404 * (be * C90701 + C90404 * C90421 * C90420 * C90700)) /
        C90099;
    const double C569 = (C90405 * C90403 * C90697 + C90701 * C90408) / C90095;
    const double C570 =
        (2 * C90404 * C90701 + C90404 * (C90701 + C90706 * C90408)) / C90095;
    const double C1191 = (C90526 * C90404 * C90701) / C90095;
    const double C1192 = (C90526 * (C90701 + C90706 * C90408)) / C90095;
    const double C1194 = (C90405 * C90403 * C90697 + C90701 * C90658) / C90095;
    const double C1772 =
        (C90570 * C90404 * C90701 + C90404 * C90407 * ae) / C90095;
    const double C1773 = (C90570 * (C90701 + C90706 * C90408) +
                          (C90407 + C90419 * C90408) * ae) /
                         C90095;
    const double C1775 =
        (C90405 * C90403 * C90697 + C90570 * (C90570 * C90701 + C90407 * ae) +
         C90570 * C90407 * ae) /
        C90095;
    const double C3801 =
        (C90570 * C90526 * C90701 + C90526 * C90407 * ae) / C90095;
    const double C5417 =
        (2 * C90526 * C90701 + C90526 * (C90701 + C90706 * C90658)) / C90095;
    const double C6217 = (C90570 * (C90701 + C90706 * C90658) +
                          (C90407 + C90419 * C90658) * ae) /
                         C90095;
    const double C198 = C92177 * C190;
    const double C281 = C92188 * C273;
    const double C421 = C92177 * C412;
    const double C502 = C92188 * C496;
    const double C505 = C92188 * C497;
    const double C636 = C92177 * C630;
    const double C639 = C92177 * C631;
    const double C712 = C92188 * C703;
    const double C36730 = C92097 * C821;
    const double C5041 = C92188 * C950;
    const double C36929 = C92097 * C1016;
    const double C5334 = C92188 * C1132;
    const double C37104 = C92097 * C1198;
    const double C5603 = C92188 * C1317;
    const double C41113 = C92097 * C1402;
    const double C11011 = C92177 * C1465;
    const double C41401 = C92097 * C1597;
    const double C11314 = C92177 * C1658;
    const double C41696 = C92097 * C1779;
    const double C11599 = C92177 * C1837;
    const double C90459 = C90404 * C90455;
    const double C90475 = be * C90455;
    const double C90926 = C90526 * C90455;
    const double C90943 = C90570 * C90455;
    const double C91004 = C90455 * C90658;
    const double C91245 = C90455 * C90756;
    const double C90458 = C90404 * C90452;
    const double C90474 = ae * C90452;
    const double C90925 = C90526 * C90452;
    const double C90942 = C90570 * C90452;
    const double C91022 = C90452 * C90658;
    const double C91277 = C90452 * C90756;
    const double C90457 = C90440 + C90451;
    const double C90490 = C90476 * ae;
    const double C90488 = C90476 * C90408;
    const double C90487 = C90404 * C90476;
    const double C90486 = C90476 * be;
    const double C90498 = C90476 + C90492;
    const double C90672 = C90476 + C90671;
    const double C90770 = C90476 + C90769;
    const double C91451 = C90476 * C90658;
    const double C91450 = C90526 * C90476;
    const double C91565 = C90476 * C90756;
    const double C91669 = C90570 * C90476;
    const double C90547 = C90545 * C90408;
    const double C90552 = ae * C90545;
    const double C90551 = C90404 * C90545;
    const double C91047 = C90526 * C90545;
    const double C91291 = C90545 * C90756;
    const double C91539 = C90570 * C90545;
    const double C90591 = C90589 * C90408;
    const double C90596 = ae * C90589;
    const double C90595 = C90404 * C90589;
    const double C91091 = C90589 * C90658;
    const double C91315 = C90570 * C90589;
    const double C91401 = C90526 * C90589;
    const double C90634 = C90632 * C90408;
    const double C90639 = be * C90632;
    const double C90638 = C90404 * C90632;
    const double C91050 = C90526 * C90632;
    const double C91266 = C90632 * C90756;
    const double C91521 = C90570 * C90632;
    const double C90667 = C90440 + C90666;
    const double C90715 = C90713 * C90408;
    const double C90720 = be * C90713;
    const double C90719 = C90404 * C90713;
    const double C91112 = C90713 * C90658;
    const double C91318 = C90570 * C90713;
    const double C91403 = C90526 * C90713;
    const double C90765 = C90440 + C90764;
    const double C5712 = (C90526 * C90417 + C91002 * C90756) / C90095;
    const double C90443 = C90438 + C90439;
    const double C5711 = (C90526 * C90416 + C91020 * C90756) / C90095;
    const double C90454 = C90419 + C90448;
    const double C90456 = C90447 * ae;
    const double C90453 = C90447 * be;
    const double C90480 = 2 * C90447;
    const double C91034 = C90526 * C90447;
    const double C91302 = C90570 * C90447;
    const double C91054 = C90419 + C91049;
    const double C91056 = C91048 * ae;
    const double C91053 = C91048 * be;
    const double C91402 = C90570 * C91048;
    const double C91452 = 2 * C91048;
    const double C91322 = C90419 + C91317;
    const double C91324 = C91316 * ae;
    const double C91321 = C91316 * be;
    const double C91671 = 2 * C91316;
    const double C1462 = (C90404 * C90533 + C90540 * C90756) / C90095;
    const double C947 = (C90404 * C90577 + C90584 * C90658) / C90095;
    const double C91045 = C90541 + C90628;
    const double C1594 = (C90404 * C90620 + C90627 * C90756) / C90095;
    const double C91313 = C90585 + C90709;
    const double C1195 = (C90404 * C90701 + C90708 * C90658) / C90095;
    const double C91424 = C90455 + C91422;
    const double C91559 = C91557 * C90756;
    const double C91629 = C90455 + C91627;
    const double C91438 = C90452 + C91436;
    const double C91574 = C91572 * C90756;
    const double C91646 = C90452 + C91644;
    const double C90563 = C90545 + C90561;
    const double C91071 = C90526 * C91066;
    const double C91297 = C91066 * C90756;
    const double C91657 = C90545 + C91655;
    const double C90607 = C90589 + C90605;
    const double C91099 = C91097 * C90658;
    const double C91334 = C90570 * C91097;
    const double C91410 = C90526 * C91097;
    const double C91488 = C90589 + C91485;
    const double C91591 = C90570 * C91586;
    const double C90650 = C90632 + C90648;
    const double C91074 = C90526 * C91069;
    const double C91270 = C91069 * C90756;
    const double C91568 = C90632 + C91566;
    const double C90731 = C90713 + C90729;
    const double C91120 = C91118 * C90658;
    const double C91337 = C90570 * C91118;
    const double C91412 = C90526 * C91118;
    const double C91503 = C90713 + C91500;
    const double C91594 = C90570 * C91589;
    const double C192 =
        (2 * (ae * C90533 + C90404 * C90537) + ae * (C90533 + C90538 * C90408) +
         C90404 *
             (C90537 + ae * C90404 * C90538 +
              C90404 * (ae * C90538 + C90404 * C90442 * C90441 * C90532))) /
        C90099;
    const double C885 = (be * (C90404 * C90417 + C90407 * ae) +
                         C90526 * (ae * C90533 + C90404 * C90537)) /
                        C90099;
    const double C888 = (C90413 * C90409 * C90532 + be * C90526 * C90417 +
                         C90526 * (be * C90417 + C90526 * C90537)) /
                        C90099;
    const double C1466 = (C90570 * (ae * C90533 + C90404 * C90537)) / C90099;
    const double C1469 = (C90413 * C90409 * C90532 + C90537 * C90756) / C90099;
    const double C3443 = (C90570 * (be * C90417 + C90526 * C90537)) / C90099;
    const double C90546 = C90404 * C90544;
    const double C91003 = C90526 * C90544;
    const double C4952 =
        (2 * (be * C90417 + C90526 * C90537) + be * (C90417 + C90430 * C90658) +
         C90526 * (C90537 + be * C90526 * C90430 +
                   C90526 * (C90439 + C90526 * C90544))) /
        C90099;
    const double C11004 =
        (2 * C90570 * C90537 + C90570 * (C90537 + C90544 * C90756)) / C90099;
    const double C90560 = C90404 * C90556;
    const double C91420 = C90526 * C90556;
    const double C91621 = C90556 * C90756;
    const double C11006 =
        (3 * (C90537 + C90544 * C90756) +
         C90570 * (2 * C90570 * C90544 + C90570 * (C90544 + C90556 * C90756))) /
        C90099;
    const double C357 =
        (2 * (be * C90620 + C90404 * C90624) + be * (C90620 + C90625 * C90408) +
         C90404 *
             (C90624 + be * C90404 * C90625 +
              C90404 * (be * C90625 + C90404 * C90442 * C90441 * C90619))) /
        C90099;
    const double C1017 = (ae * (C90404 * C90416 + C90407 * be) +
                          C90526 * (be * C90620 + C90404 * C90624)) /
                         C90099;
    const double C1020 = (C90413 * C90409 * C90619 + ae * C90526 * C90416 +
                          C90526 * (ae * C90416 + C90526 * C90624)) /
                         C90099;
    const double C1598 = (C90570 * (be * C90620 + C90404 * C90624)) / C90099;
    const double C1601 = (C90413 * C90409 * C90619 + C90624 * C90756) / C90099;
    const double C3591 =
        (ae * C90570 * C90416 + C90526 * C90570 * C90624) / C90099;
    const double C90633 = C90404 * C90631;
    const double C91021 = C90526 * C90631;
    const double C91213 = C90570 * C90631;
    const double C5143 =
        (2 * (ae * C90416 + C90526 * C90624) + ae * (C90416 + C90429 * C90658) +
         C90526 * (C90624 + ae * C90526 * C90429 +
                   C90526 * (C90438 + C90526 * C90631))) /
        C90099;
    const double C5977 =
        (C90570 * C90624 + ae * C90570 * C91020 +
         C90526 * (ae * C90570 * C90429 + C90526 * C90570 * C90631)) /
        C90099;
    const double C5979 = (ae * (C90416 + C90429 * C90756) +
                          C90526 * (C90624 + C90631 * C90756)) /
                         C90099;
    const double C11195 =
        (2 * C90570 * C90624 + C90570 * (C90624 + C90631 * C90756)) / C90099;
    const double C90647 = C90404 * C90643;
    const double C91434 = C90526 * C90643;
    const double C91515 = C90643 * C90756;
    const double C91535 = C90570 * C90643;
    const double C275 =
        (2 * (ae * C90577 + C90404 * C90581) + ae * (C90577 + C90582 * C90408) +
         C90404 *
             (C90581 + ae * C90404 * C90582 +
              C90404 * (ae * C90582 + C90404 * C90442 * C90441 * C90576))) /
        C90099;
    const double C951 = (C90526 * (ae * C90577 + C90404 * C90581)) / C90099;
    const double C954 = (C90413 * C90409 * C90576 + C90581 * C90658) / C90099;
    const double C1532 = (be * (C90404 * C90417 + C90407 * ae) +
                          C90570 * (ae * C90577 + C90404 * C90581)) /
                         C90099;
    const double C1535 = (C90413 * C90409 * C90576 + be * C90570 * C90417 +
                          C90570 * (be * C90417 + C90570 * C90581)) /
                         C90099;
    const double C3517 =
        (be * C90526 * C90417 + C90570 * C90526 * C90581) / C90099;
    const double C90590 = C90404 * C90588;
    const double C91244 = C90570 * C90588;
    const double C91382 = C90526 * C90588;
    const double C5034 =
        (2 * C90526 * C90581 + C90526 * (C90581 + C90588 * C90658)) / C90099;
    const double C5891 = (be * (C90417 + C90430 * C90658) +
                          C90570 * (C90581 + C90588 * C90658)) /
                         C90099;
    const double C5893 = (C90526 * C90581 + be * C90570 * C91002 +
                          C90570 * (be * C91002 + C90570 * C90526 * C90588)) /
                         C90099;
    const double C11113 =
        (2 * (be * C90417 + C90570 * C90581) + be * (C90417 + C90430 * C90756) +
         C90570 * (C90581 + be * C90570 * C90430 +
                   C90570 * (C90439 + C90570 * C90588))) /
        C90099;
    const double C90604 = C90404 * C90600;
    const double C91430 = C90600 * C90658;
    const double C91556 = C90526 * C90600;
    const double C91625 = C90570 * C90600;
    const double C5036 =
        (3 * (C90581 + C90588 * C90658) +
         C90526 * (2 * C90526 * C90588 + C90526 * (C90588 + C90600 * C90658))) /
        C90099;
    const double C498 =
        (2 * C90404 * C90684 +
         C90404 * (C90684 + C90442 * C90441 * C90681 * C90408)) /
        C90099;
    const double C1133 =
        (ae * C90404 * C90577 + C90526 * C90404 * C90684) / C90099;
    const double C1136 = (C90413 * C90409 * C90681 + ae * C90526 * C90577 +
                          C90526 * (ae * C90577 + C90526 * C90684)) /
                         C90099;
    const double C1714 =
        (be * C90404 * C90620 + C90570 * C90404 * C90684) / C90099;
    const double C1717 = (C90413 * C90409 * C90681 + be * C90570 * C90620 +
                          C90570 * (be * C90620 + C90570 * C90684)) /
                         C90099;
    const double C3731 = (ae * (C90570 * C90577 + C90407 * be) +
                          C90526 * (be * C90620 + C90570 * C90684)) /
                         C90099;
    const double C91087 = C90404 * C90687;
    const double C91090 = C90526 * C90687;
    const double C91221 = C90570 * C90687;
    const double C499 =
        (3 * (C90684 + C90687 * C90408) +
         C90404 * (2 * C90404 * C90687 +
                   C90404 * (C90687 + C90478 * C90477 * C90681 * C90408))) /
        C90099;
    const double C1134 = (ae * (C90577 + C90582 * C90408) +
                          C90526 * (C90684 + C90687 * C90408)) /
                         C90099;
    const double C1137 = (C90404 * C90684 + ae * C90526 * C90584 +
                          C90526 * (ae * C90584 + C90526 * C90404 * C90687)) /
                         C90099;
    const double C1715 = (be * (C90620 + C90625 * C90408) +
                          C90570 * (C90684 + C90687 * C90408)) /
                         C90099;
    const double C1718 = (C90404 * C90684 + be * C90570 * C90627 +
                          C90570 * (be * C90627 + C90570 * C90404 * C90687)) /
                         C90099;
    const double C5329 =
        (2 * (ae * C90577 + C90526 * C90684) + ae * (C90577 + C90582 * C90658) +
         C90526 * (C90684 + ae * C90526 * C90582 +
                   C90526 * (C90585 + C90526 * C90687))) /
        C90099;
    const double C90691 = C90690 * C90408;
    const double C91096 = C90404 * C90690;
    const double C91483 = C90526 * C90690;
    const double C91522 = C90570 * C90690;
    const double C576 =
        (2 * (be * C90701 + C90404 * C90705) + be * (C90701 + C90706 * C90408) +
         C90404 *
             (C90705 + be * C90404 * C90706 +
              C90404 * (be * C90706 + C90404 * C90442 * C90441 * C90700))) /
        C90099;
    const double C1199 = (C90526 * (be * C90701 + C90404 * C90705)) / C90099;
    const double C1202 = (C90413 * C90409 * C90700 + C90705 * C90658) / C90099;
    const double C1780 = (ae * (C90404 * C90416 + C90407 * be) +
                          C90570 * (be * C90701 + C90404 * C90705)) /
                         C90099;
    const double C1783 = (C90413 * C90409 * C90700 + ae * C90570 * C90416 +
                          C90570 * (ae * C90416 + C90570 * C90705)) /
                         C90099;
    const double C3805 =
        (ae * C90526 * C90416 + C90570 * C90526 * C90705) / C90099;
    const double C90714 = C90404 * C90712;
    const double C91276 = C90570 * C90712;
    const double C91393 = C90526 * C90712;
    const double C5421 =
        (2 * C90526 * C90705 + C90526 * (C90705 + C90712 * C90658)) / C90099;
    const double C6223 = (ae * (C90416 + C90429 * C90658) +
                          C90570 * (C90705 + C90712 * C90658)) /
                         C90099;
    const double C6225 = (C90526 * C90705 + ae * C90570 * C91020 +
                          C90570 * (ae * C91020 + C90570 * C90526 * C90712)) /
                         C90099;
    const double C11501 =
        (2 * (ae * C90416 + C90570 * C90705) + ae * (C90416 + C90429 * C90756) +
         C90570 * (C90705 + ae * C90570 * C90429 +
                   C90570 * (C90438 + C90570 * C90712))) /
        C90099;
    const double C90728 = C90404 * C90724;
    const double C91494 = C90724 * C90658;
    const double C91571 = C90526 * C90724;
    const double C91642 = C90570 * C90724;
    const double C5423 =
        (3 * (C90705 + C90712 * C90658) +
         C90526 * (2 * C90526 * C90712 + C90526 * (C90712 + C90724 * C90658))) /
        C90099;
    const double C632 =
        (2 * C90404 * C90744 +
         C90404 * (C90744 + C90442 * C90441 * C90741 * C90408)) /
        C90099;
    const double C1257 =
        (be * C90404 * C90701 + C90526 * C90404 * C90744) / C90099;
    const double C1260 = (C90413 * C90409 * C90741 + be * C90526 * C90701 +
                          C90526 * (be * C90701 + C90526 * C90744)) /
                         C90099;
    const double C1838 =
        (ae * C90404 * C90533 + C90570 * C90404 * C90744) / C90099;
    const double C1841 = (C90413 * C90409 * C90741 + ae * C90570 * C90533 +
                          C90570 * (ae * C90533 + C90570 * C90744)) /
                         C90099;
    const double C3875 = (ae * (C90526 * C90533 + C90407 * be) +
                          C90570 * (be * C90701 + C90526 * C90744)) /
                         C90099;
    const double C91108 = C90404 * C90747;
    const double C91111 = C90526 * C90747;
    const double C91290 = C90570 * C90747;
    const double C633 =
        (3 * (C90744 + C90747 * C90408) +
         C90404 * (2 * C90404 * C90747 +
                   C90404 * (C90747 + C90478 * C90477 * C90741 * C90408))) /
        C90099;
    const double C1258 = (be * (C90701 + C90706 * C90408) +
                          C90526 * (C90744 + C90747 * C90408)) /
                         C90099;
    const double C1261 = (C90404 * C90744 + be * C90526 * C90708 +
                          C90526 * (be * C90708 + C90526 * C90404 * C90747)) /
                         C90099;
    const double C1839 = (ae * (C90533 + C90538 * C90408) +
                          C90570 * (C90744 + C90747 * C90408)) /
                         C90099;
    const double C1842 = (C90404 * C90744 + ae * C90570 * C90540 +
                          C90570 * (ae * C90540 + C90570 * C90404 * C90747)) /
                         C90099;
    const double C5517 =
        (2 * (be * C90701 + C90526 * C90744) + be * (C90701 + C90706 * C90658) +
         C90526 * (C90744 + be * C90526 * C90706 +
                   C90526 * (C90709 + C90526 * C90747))) /
        C90099;
    const double C11594 =
        (2 * (ae * C90533 + C90570 * C90744) + ae * (C90533 + C90538 * C90756) +
         C90570 * (C90744 + ae * C90570 * C90538 +
                   C90570 * (C90541 + C90570 * C90747))) /
        C90099;
    const double C90751 = C90750 * C90408;
    const double C91117 = C90404 * C90750;
    const double C91498 = C90526 * C90750;
    const double C91653 = C90570 * C90750;
    const double C92347 = C92124 * C92325;
    const double C97 =
        (C92124 * std::pow(C92325, 2)) / C92326 + C92124 / C92327;
    const double C99 = C92348 * C92124;
    const double C1972 = C92346 * C92124;
    const double C92349 = C92136 * C92328;
    const double C790 =
        (C92136 * std::pow(C92328, 2)) / C92326 + C92136 / C92327;
    const double C792 = C92348 * C92136;
    const double C1970 = C92346 * C92136;
    const double C92350 = C92150 * C92329;
    const double C1372 =
        (C92150 * std::pow(C92329, 2)) / C92326 + C92150 / C92327;
    const double C1374 = C92348 * C92150;
    const double C2665 = C92346 * C92150;
    const double C90111 = C90106 / C90099;
    const double C90109 = 2 * C90106;
    const double C90126 = -4 * C90106;
    const double C92322 = C92098 / C90104;
    const double C92320 = C92098 / C90095;
    const double C92319 = C92098 * C92093;
    const double C31250 = (2 * C92101 * C92098) / C90095;
    const double C92323 = C92102 * C92093;
    const double C92 = C92102 / C92324;
    const double C14697 = C92102 / C90100;
    const double C92344 = C92321 / C90095;
    const double C31249 = (C92097 * std::pow(C92092, 2)) / C90099 + C92318;
    const double C90183 = 2 * C90175;
    const double C90281 = C90175 / C90099;
    const double C90302 = -4 * C90175;
    const double C4108 =
        ((0 * ae) / C90095 - C90175 / C90099) / C90100 + (0 * ae) / C90095;
    const double C14781 = (0 * ae) / C90095 - C90175 / C90099;
    const double C201 = C182 * C110;
    const double C199 = C182 * C117;
    const double C197 = C182 * C109;
    const double C420 = C182 * C349;
    const double C418 = C182 * C184;
    const double C637 = C182 * C568;
    const double C2046 = C182 * C796;
    const double C2739 = C182 * C1377;
    const double C11014 = C182 * C1379;
    const double C11012 = C182 * C1390;
    const double C11010 = C182 * C1378;
    const double C11313 = C182 * C1589;
    const double C11311 = C182 * C1457;
    const double C11600 = C182 * C1771;
    const double C13874 = C182 * C3357;
    const double C423 = C410 * C110;
    const double C419 = C410 * C109;
    const double C2282 = C410 * C796;
    const double C2975 = C410 * C1377;
    const double C11317 = C410 * C1379;
    const double C11312 = C410 * C1378;
    const double C14195 = C410 * C3357;
    const double C92337 = C92223 / C90104;
    const double C92336 = C92223 * C92222;
    const double C92333 = C92223 / C90095;
    const double C4026 = (2 * C92101 * C92223) / C90095;
    const double C4107 =
        (((C92177 - (C90155 * 2 * C90175) / C90095) * ae) / C90095 -
         C90173 / C90104) /
            C90100 +
        ((C90155 * ((0 * ae) / C90095 - C90175 / C90099) + C92226) * ae) /
            C90095;
    const double C92338 = C92226 * C92222;
    const double C36261 = C92226 / C92324;
    const double C44794 = C92226 / C90100;
    const double C92351 = C92335 / C90095;
    const double C4025 = (C92177 * std::pow(C92221, 2)) / C90099 + C92330;
    const double C90209 = 2 * C90201;
    const double C90352 = C90201 / C90099;
    const double C90373 = -4 * C90201;
    const double C9583 =
        ((0 * ae) / C90095 - C90201 / C90099) / C90100 + (0 * ae) / C90095;
    const double C19899 = (0 * ae) / C90095 - C90201 / C90099;
    const double C284 = C265 * C110;
    const double C282 = C265 * C117;
    const double C280 = C265 * C109;
    const double C503 = C265 * C349;
    const double C711 = C265 * C568;
    const double C709 = C265 * C267;
    const double C2126 = C265 * C796;
    const double C2819 = C265 * C1377;
    const double C5044 = C265 * C798;
    const double C5042 = C265 * C809;
    const double C5040 = C265 * C797;
    const double C5335 = C265 * C1008;
    const double C5602 = C265 * C1190;
    const double C5600 = C265 * C942;
    const double C8695 = C265 * C3357;
    const double C714 = C701 * C110;
    const double C710 = C701 * C109;
    const double C2584 = C701 * C796;
    const double C3277 = C701 * C1377;
    const double C5605 = C701 * C798;
    const double C5601 = C701 * C797;
    const double C9340 = C701 * C3357;
    const double C92341 = C92249 / C90104;
    const double C92340 = C92249 * C92248;
    const double C92334 = C92249 / C90095;
    const double C9423 = (2 * C92101 * C92249) / C90095;
    const double C9582 =
        (((C92188 - (C90158 * 2 * C90201) / C90095) * ae) / C90095 -
         C90199 / C90104) /
            C90100 +
        ((C90158 * ((0 * ae) / C90095 - C90201 / C90099) + C92252) * ae) /
            C90095;
    const double C92342 = C92252 * C92248;
    const double C70952 = C92252 / C92324;
    const double C80417 = C92252 / C90100;
    const double C92354 = C92339 / C90095;
    const double C9422 = (C92188 * std::pow(C92247, 2)) / C90099 + C92332;
    const double C203 = C182 * C119;
    const double C286 = C265 * C119;
    const double C2048 = C182 * C807;
    const double C2128 = C265 * C807;
    const double C5046 = C265 * C811;
    const double C2741 = C182 * C1388;
    const double C2821 = C265 * C1388;
    const double C11016 = C182 * C1392;
    const double C8697 = C265 * C3362;
    const double C13876 = C182 * C3362;
    const double C5051 = C265 * C4821;
    const double C8701 = C265 * C5710;
    const double C11021 = C182 * C10874;
    const double C5150 = C92102 * C806;
    const double C37984 = C92097 * C806;
    const double C45831 = C92102 * C806;
    const double C36931 = C92097 * C810;
    const double C11202 = C92102 * C1387;
    const double C43197 = C92097 * C1387;
    const double C51947 = C92102 * C1387;
    const double C41403 = C92097 * C1391;
    const double C39228 = C92097 * C3361;
    const double C36935 = C92097 * C4820;
    const double C39232 = C92097 * C5709;
    const double C41410 = C92097 * C10873;
    const double C90436 = C90433 + C90427;
    const double C91043 = C91041 + C90427;
    const double C91311 = C91309 + C90427;
    const double C3732 = (ae * (C90570 * C90584 + C90425 * be) +
                          C90526 * (be * C90627 + C90570 * C90404 * C90687)) /
                         C90099;
    const double C3876 = (ae * (C90526 * C90540 + C90425 * be) +
                          C90570 * (be * C90708 + C90526 * C90404 * C90747)) /
                         C90099;
    const double C881 =
        (C90404 * C90533 + C90526 * (C90526 * C90540 + C90425 * be) +
         C90526 * C90425 * be) /
        C90095;
    const double C1013 =
        (C90404 * C90620 + C90526 * (C90526 * C90627 + C90425 * ae) +
         C90526 * C90425 * ae) /
        C90095;
    const double C1528 =
        (C90404 * C90577 + C90570 * (C90570 * C90584 + C90425 * be) +
         C90570 * C90425 * be) /
        C90095;
    const double C1776 =
        (C90404 * C90701 + C90570 * (C90570 * C90708 + C90425 * ae) +
         C90570 * C90425 * ae) /
        C90095;
    const double C3440 = (C90570 * (C90526 * C90540 + C90425 * be)) / C90095;
    const double C3514 =
        (C90570 * C90526 * C90584 + C90526 * C90425 * be) / C90095;
    const double C3588 = (C90570 * (C90526 * C90627 + C90425 * ae)) / C90095;
    const double C3802 =
        (C90570 * C90526 * C90708 + C90526 * C90425 * ae) / C90095;
    const double C799 = C90404 * C90407 + C90425 * C90658;
    const double C1380 = C90404 * C90407 + C90425 * C90756;
    const double C3358 = C90570 * C90526 * C90425;
    const double C4814 =
        2 * C90526 * C90425 + C90526 * (C90425 + C90447 * C90658);
    const double C5701 = C90570 * (C90425 + C90447 * C90658);
    const double C10867 =
        2 * C90570 * C90425 + C90570 * (C90425 + C90447 * C90756);
    const double C90435 = C90432 + C90424;
    const double C91042 = C91039 + C90424;
    const double C91310 = C91307 + C90424;
    const double C6139 = (ae * (C90577 + C90570 * (C90570 * C90582 + C90424) +
                                C90570 * C90419 * be) +
                          C90526 * (C90684 + be * C90570 * C90625 +
                                    C90570 * (C90628 + C90570 * C90687))) /
                         C90099;
    const double C90434 = C90431 * C90097;
    const double C90663 = C90662 * C90097;
    const double C90761 = C90760 * C90097;
    const double C6137 =
        (be * C90620 + C90570 * C90684 + ae * (C90570 * C91089 + C91040 * be) +
         C90526 * (ae * (C90570 * C90582 + C90424) +
                   C90526 * (C90628 + C90570 * C90687))) /
        C90099;
    const double C5887 =
        (C90526 * C90577 + C90570 * (C90570 * C91089 + C91040 * be) +
         C90570 * C91040 * be) /
        C90095;
    const double C6219 =
        (C90526 * C90701 + C90570 * (C90570 * C91110 + C91040 * ae) +
         C90570 * C91040 * ae) /
        C90095;
    const double C5703 = C90526 * C90407 + C91040 * C90756;
    const double C13749 =
        2 * C90570 * C91040 + C90570 * (C91040 + C91048 * C90756);
    const double C425 = C92177 * C413;
    const double C716 = C92188 * C704;
    const double C205 = C182 * C111;
    const double C288 = C265 * C111;
    const double C427 = C410 * C111;
    const double C718 = C701 * C111;
    const double C2050 = C182 * C795;
    const double C2130 = C265 * C795;
    const double C2278 = C410 * C795;
    const double C2580 = C701 * C795;
    const double C2743 = C182 * C1376;
    const double C2823 = C265 * C1376;
    const double C2971 = C410 * C1376;
    const double C3273 = C701 * C1376;
    const double C5049 = C265 * C4815;
    const double C5613 = C701 * C4815;
    const double C8699 = C265 * C5702;
    const double C9336 = C701 * C5702;
    const double C11019 = C182 * C10868;
    const double C11326 = C410 * C10868;
    const double C202 = C92177 * C191;
    const double C200 = C92177 * C185;
    const double C422 = C182 * C185;
    const double C204 = C92177 * C186;
    const double C426 = C182 * C186;
    const double C2047 = C92177 * C877;
    const double C2281 = C182 * C877;
    const double C14785 = C92226 * C877;
    const double C31339 = C92226 * C877;
    const double C2051 = C92177 * C878;
    const double C2277 = C182 * C878;
    const double C14793 = C92226 * C878;
    const double C31347 = C92226 * C878;
    const double C2740 = C92177 * C1458;
    const double C2974 = C182 * C1458;
    const double C2744 = C92177 * C1459;
    const double C2970 = C182 * C1459;
    const double C11013 = C92177 * C1461;
    const double C11316 = C182 * C1461;
    const double C13875 = C92177 * C3439;
    const double C14194 = C182 * C3439;
    const double C26714 = C92226 * C3439;
    const double C41216 = C92226 * C3439;
    const double C11020 = C92177 * C11000;
    const double C11325 = C182 * C11000;
    const double C285 = C92188 * C274;
    const double C283 = C92188 * C268;
    const double C713 = C265 * C268;
    const double C287 = C92188 * C269;
    const double C717 = C265 * C269;
    const double C2127 = C92188 * C943;
    const double C2583 = C265 * C943;
    const double C2131 = C92188 * C944;
    const double C2579 = C265 * C944;
    const double C5043 = C92188 * C946;
    const double C5604 = C265 * C946;
    const double C2820 = C92188 * C1524;
    const double C3276 = C265 * C1524;
    const double C19903 = C92252 * C1524;
    const double C61194 = C92252 * C1524;
    const double C2824 = C92188 * C1525;
    const double C3272 = C265 * C1525;
    const double C19911 = C92252 * C1525;
    const double C61202 = C92252 * C1525;
    const double C8696 = C92188 * C3513;
    const double C9339 = C265 * C3513;
    const double C25852 = C92252 * C3513;
    const double C66845 = C92252 * C3513;
    const double C5050 = C92188 * C5030;
    const double C5612 = C265 * C5030;
    const double C8700 = C92188 * C5885;
    const double C9335 = C265 * C5885;
    const double C25861 = C92252 * C5885;
    const double C66853 = C92252 * C5885;
    const double C424 = C182 * C350;
    const double C506 = C265 * C350;
    const double C428 = C182 * C351;
    const double C509 = C265 * C351;
    const double C2283 = C182 * C1009;
    const double C2361 = C265 * C1009;
    const double C2279 = C182 * C1010;
    const double C2363 = C265 * C1010;
    const double C5337 = C265 * C1012;
    const double C2976 = C182 * C1590;
    const double C3054 = C265 * C1590;
    const double C2972 = C182 * C1591;
    const double C3056 = C265 * C1591;
    const double C11318 = C182 * C1593;
    const double C9021 = C265 * C3587;
    const double C14196 = C182 * C3587;
    const double C11327 = C182 * C11191;
    const double C640 = C182 * C569;
    const double C715 = C265 * C569;
    const double C643 = C182 * C570;
    const double C719 = C265 * C570;
    const double C2502 = C182 * C1191;
    const double C2585 = C265 * C1191;
    const double C2504 = C182 * C1192;
    const double C2581 = C265 * C1192;
    const double C5606 = C265 * C1194;
    const double C3195 = C182 * C1772;
    const double C3278 = C265 * C1772;
    const double C3197 = C182 * C1773;
    const double C3274 = C265 * C1773;
    const double C11602 = C182 * C1775;
    const double C9341 = C265 * C3801;
    const double C14518 = C182 * C3801;
    const double C5614 = C265 * C5417;
    const double C9337 = C265 * C6217;
    const double C90462 = C90459 + C90450;
    const double C90929 = be * C90926;
    const double C91421 = 2 * C90926;
    const double C91555 = C90570 * C90926;
    const double C13752 =
        (2 * C90570 * C91002 + C90570 * (C91002 + C90926 * C90756)) / C90095;
    const double C90946 = be * C90943;
    const double C91626 = 2 * C90943;
    const double C91006 = C90430 + C91004;
    const double C91247 = C90430 + C91245;
    const double C90461 = C90458 + C90446;
    const double C90483 = C90474 + C90475;
    const double C90928 = ae * C90925;
    const double C91435 = 2 * C90925;
    const double C91570 = C90570 * C90925;
    const double C5981 =
        (C90624 + C90631 * C90756 + ae * (C91020 + C90925 * C90756) +
         C90526 * (ae * (C90429 + C90452 * C90756) +
                   C90526 * (C90631 + C90643 * C90756))) /
        C90099;
    const double C13751 =
        (2 * C90570 * C91020 + C90570 * (C91020 + C90925 * C90756)) / C90095;
    const double C90945 = ae * C90942;
    const double C91643 = 2 * C90942;
    const double C91024 = C90429 + C91022;
    const double C91279 = C90429 + C91277;
    const double C90460 = C90457 * C90097;
    const double C90507 = C90502 + C90490;
    const double C91460 = C91454 + C90490;
    const double C91681 = C91674 + C90490;
    const double C90495 = C90440 + C90488;
    const double C90497 = C90487 * ae;
    const double C90494 = C90487 * be;
    const double C91068 = C90487 * C90658;
    const double C91067 = C90526 * C90487;
    const double C91336 = C90487 * C90756;
    const double C91335 = C90570 * C90487;
    const double C90505 = C90499 + C90486;
    const double C91457 = C91449 + C90486;
    const double C91678 = C91668 + C90486;
    const double C90504 = C90498 * C90097;
    const double C90673 = C90672 * C90097;
    const double C90771 = C90770 * C90097;
    const double C91459 = C90440 + C91451;
    const double C91461 = C91450 * ae;
    const double C91458 = C91450 * be;
    const double C91588 = C91450 * C90756;
    const double C91587 = C90570 * C91450;
    const double C91567 = C90440 + C91565;
    const double C91682 = C91669 * ae;
    const double C91679 = C91669 * be;
    const double C90549 = C90538 + C90547;
    const double C90557 = 2 * C90551;
    const double C90555 = ae * C90551;
    const double C91033 = C90526 * C90551;
    const double C91295 = C90570 * C90551;
    const double C11001 =
        (2 * C90570 * C90540 + C90570 * (C90540 + C90551 * C90756)) / C90095;
    const double C91052 = C91047 + C90446;
    const double C91293 = C90538 + C91291;
    const double C91541 = ae * C91539;
    const double C91654 = 2 * C91539;
    const double C90593 = C90582 + C90591;
    const double C90601 = 2 * C90595;
    const double C90599 = ae * C90595;
    const double C91095 = C90526 * C90595;
    const double C91301 = C90570 * C90595;
    const double C5031 =
        (2 * C90526 * C90584 + C90526 * (C90584 + C90595 * C90658)) / C90095;
    const double C5886 = (C90570 * (C90584 + C90595 * C90658) +
                          (C90425 + C90447 * C90658) * be) /
                         C90095;
    const double C91093 = C90582 + C91091;
    const double C91320 = C91315 + C90446;
    const double C91404 = C90570 * C91401;
    const double C91484 = 2 * C91401;
    const double C91482 = ae * C91401;
    const double C90636 = C90625 + C90634;
    const double C91446 = C90552 + C90639;
    const double C90644 = 2 * C90638;
    const double C90642 = be * C90638;
    const double C91035 = C90526 * C90638;
    const double C91269 = C90570 * C90638;
    const double C11192 =
        (2 * C90570 * C90627 + C90570 * (C90627 + C90638 * C90756)) / C90095;
    const double C91055 = C91050 + C90450;
    const double C91267 = C90625 + C91266;
    const double C91523 = be * C91521;
    const double C91637 = 2 * C91521;
    const double C90668 = C90667 * C90097;
    const double C90717 = C90706 + C90715;
    const double C91665 = C90596 + C90720;
    const double C90725 = 2 * C90719;
    const double C90723 = be * C90719;
    const double C91116 = C90526 * C90719;
    const double C91303 = C90570 * C90719;
    const double C5418 =
        (2 * C90526 * C90708 + C90526 * (C90708 + C90719 * C90658)) / C90095;
    const double C6218 = (C90570 * (C90708 + C90719 * C90658) +
                          (C90425 + C90447 * C90658) * ae) /
                         C90095;
    const double C91114 = C90706 + C91112;
    const double C91323 = C91318 + C90450;
    const double C91405 = C90570 * C91403;
    const double C91499 = 2 * C91403;
    const double C91497 = be * C91403;
    const double C90766 = C90765 * C90097;
    const double C13880 = C182 * C5712;
    const double C40596 = C92097 * C5711;
    const double C112 = 3 * (C90407 + C90419 * C90408) +
                        C90404 * (2 * C90425 + C90404 * C90454);
    const double C794 = C90526 * (2 * C90425 + C90404 * C90454);
    const double C800 = C90407 + C90419 * C90408 + C90454 * C90658;
    const double C1375 = C90570 * (2 * C90425 + C90404 * C90454);
    const double C1381 = C90407 + C90419 * C90408 + C90454 * C90756;
    const double C3359 = C90570 * C90526 * C90454;
    const double C5704 = C90526 * C90425 + C91034 * C90756;
    const double C4816 = 3 * (C90407 + C90419 * C90658) +
                         C90526 * (2 * C91040 + C90526 * C91054);
    const double C5705 = C90407 + C90419 * C90658 + C91054 * C90756;
    const double C8454 = C90570 * (2 * C91040 + C90526 * C91054);
    const double C6140 =
        (C90684 + be * C90570 * C90625 + C90570 * (C90628 + C90570 * C90687) +
         ae * (C91089 + C90570 * (C90570 * C90526 * C90589 + C91053) +
               C90570 * C91048 * be) +
         C90526 * (ae * (C90582 + C90570 * (C90570 * C90589 + C90446) +
                         C90570 * C90440 * be) +
                   C90526 * (C90687 + be * C90570 * C90632 +
                             C90570 * (C90639 + C90570 * C90690)))) /
        C90099;
    const double C10869 = 3 * (C90407 + C90419 * C90756) +
                          C90570 * (2 * C91308 + C90570 * C91322);
    const double C9500 = C92177 * C1462;
    const double C9757 = C182 * C1462;
    const double C4208 = C92188 * C947;
    const double C4723 = C265 * C947;
    const double C9759 = C182 * C1594;
    const double C4725 = C265 * C1195;
    const double C91426 = C90526 * C91424;
    const double C91561 = C90926 + C91559;
    const double C91631 = C90570 * C91629;
    const double C91440 = C90526 * C91438;
    const double C91576 = C90925 + C91574;
    const double C91648 = C90570 * C91646;
    const double C90565 = C90404 * C90563;
    const double C91188 = C90526 * C90563;
    const double C91299 = C90551 + C91297;
    const double C91659 = C90570 * C91657;
    const double C90609 = C90404 * C90607;
    const double C91361 = C90526 * C90607;
    const double C91372 = C90570 * C90607;
    const double C91101 = C90595 + C91099;
    const double C91413 = C90570 * C91410;
    const double C91490 = C90526 * C91488;
    const double C91614 = C90570 * C91488;
    const double C90652 = C90404 * C90650;
    const double C91190 = C90526 * C90650;
    const double C91271 = C90638 + C91270;
    const double C91638 = C90570 * C91568;
    const double C90733 = C90404 * C90731;
    const double C91362 = C90526 * C90731;
    const double C91374 = C90570 * C90731;
    const double C91122 = C90719 + C91120;
    const double C91414 = C90570 * C91412;
    const double C91505 = C90526 * C91503;
    const double C91616 = C90570 * C91503;
    const double C206 = C92177 * C192;
    const double C2049 = C92177 * C885;
    const double C14789 = C92226 * C885;
    const double C31343 = C92226 * C885;
    const double C2742 = C92177 * C1466;
    const double C11015 = C92177 * C1469;
    const double C13877 = C92177 * C3443;
    const double C26718 = C92226 * C3443;
    const double C41220 = C92226 * C3443;
    const double C90548 = C90541 + C90546;
    const double C91005 = C90439 + C91003;
    const double C11022 = C92177 * C11004;
    const double C90562 = C90552 + C90560;
    const double C91423 = C90475 + C91420;
    const double C91622 = C90544 + C91621;
    const double C71932 = C92177 * C11006;
    const double C5154 = C92102 * C1017;
    const double C37986 = C92097 * C1017;
    const double C45835 = C92102 * C1017;
    const double C36933 = C92097 * C1020;
    const double C11206 = C92102 * C1598;
    const double C43199 = C92097 * C1598;
    const double C51951 = C92102 * C1598;
    const double C41405 = C92097 * C1601;
    const double C39230 = C92097 * C3591;
    const double C90635 = C90628 + C90633;
    const double C91023 = C90438 + C91021;
    const double C11197 =
        (3 * (C90624 + C90631 * C90756) +
         C90570 * (2 * C91213 + C90570 * (C90631 + C90643 * C90756))) /
        C90099;
    const double C36937 = C92097 * C5143;
    const double C39234 = C92097 * C5977;
    const double C40598 = C92097 * C5979;
    const double C41412 = C92097 * C11195;
    const double C90649 = C90639 + C90647;
    const double C91437 = C90474 + C91434;
    const double C91516 = C90631 + C91515;
    const double C91536 = C90526 * C91535;
    const double C289 = C92188 * C275;
    const double C2129 = C92188 * C951;
    const double C5045 = C92188 * C954;
    const double C2822 = C92188 * C1532;
    const double C19907 = C92252 * C1532;
    const double C61198 = C92252 * C1532;
    const double C8698 = C92188 * C3517;
    const double C25856 = C92252 * C3517;
    const double C66849 = C92252 * C3517;
    const double C90592 = C90585 + C90590;
    const double C91246 = C90439 + C91244;
    const double C5052 = C92188 * C5034;
    const double C8702 = C92188 * C5891;
    const double C25865 = C92252 * C5891;
    const double C66857 = C92252 * C5891;
    const double C30341 = C92252 * C5893;
    const double C40508 = C9424 * C5893;
    const double C70240 = C92252 * C5893;
    const double C90606 = C90596 + C90604;
    const double C91431 = C90588 + C91430;
    const double C91558 = C90570 * C91556;
    const double C91628 = C90475 + C91625;
    const double C36870 = C92188 * C5036;
    const double C508 = C92188 * C498;
    const double C2362 = C92188 * C1133;
    const double C5336 = C92188 * C1136;
    const double C3055 = C92188 * C1714;
    const double C20155 = C92252 * C1714;
    const double C61446 = C92252 * C1714;
    const double C9022 = C92188 * C3731;
    const double C26170 = C92252 * C3731;
    const double C67100 = C92252 * C3731;
    const double C91092 = C90585 + C91090;
    const double C91222 = C90628 + C91221;
    const double C511 = C92188 * C499;
    const double C2364 = C92188 * C1134;
    const double C4483 = C92188 * C1137;
    const double C3057 = C92188 * C1715;
    const double C20160 = C92252 * C1715;
    const double C61451 = C92252 * C1715;
    const double C9849 = C9424 * C1718;
    const double C23455 = C92252 * C1718;
    const double C64730 = C92252 * C1718;
    const double C5340 = C92188 * C5329;
    const double C90692 = C90687 + C90691;
    const double C91098 = C90526 * C91096;
    const double C91224 = C90570 * C91096;
    const double C91487 = C90596 + C91483;
    const double C91524 = C90639 + C91522;
    const double C5428 = C92102 * C1199;
    const double C38194 = C92097 * C1199;
    const double C46083 = C92102 * C1199;
    const double C37107 = C92097 * C1202;
    const double C11508 = C92102 * C1780;
    const double C43513 = C92097 * C1780;
    const double C52265 = C92102 * C1780;
    const double C41698 = C92097 * C1783;
    const double C39444 = C92097 * C3805;
    const double C90716 = C90709 + C90714;
    const double C91278 = C90438 + C91276;
    const double C37110 = C92097 * C5421;
    const double C39446 = C92097 * C6223;
    const double C40838 = C92097 * C6225;
    const double C41702 = C92097 * C11501;
    const double C90730 = C90720 + C90728;
    const double C91495 = C90712 + C91494;
    const double C91573 = C90570 * C91571;
    const double C91645 = C90474 + C91642;
    const double C37113 = C92097 * C5423;
    const double C642 = C92177 * C632;
    const double C2503 = C92177 * C1257;
    const double C15314 = C92226 * C1257;
    const double C31865 = C92226 * C1257;
    const double C3196 = C92177 * C1838;
    const double C11601 = C92177 * C1841;
    const double C14519 = C92177 * C3875;
    const double C27368 = C92226 * C3875;
    const double C41783 = C92226 * C3875;
    const double C91113 = C90709 + C91111;
    const double C91292 = C90541 + C91290;
    const double C645 = C92177 * C633;
    const double C2505 = C92177 * C1258;
    const double C15319 = C92226 * C1258;
    const double C31870 = C92226 * C1258;
    const double C4639 = C4027 * C1261;
    const double C17694 = C92226 * C1261;
    const double C34242 = C92226 * C1261;
    const double C3198 = C92177 * C1839;
    const double C10005 = C92177 * C1842;
    const double C11605 = C92177 * C11594;
    const double C90752 = C90747 + C90751;
    const double C91119 = C90526 * C91117;
    const double C91296 = C90570 * C91117;
    const double C91502 = C90720 + C91498;
    const double C91656 = C90552 + C91653;
    const double C98 = (2 * C92346 * C92347) / C92119;
    const double C1971 = C92347 / C92119;
    const double C791 = (2 * C92346 * C92349) / C92119;
    const double C1969 = C92349 / C92119;
    const double C1373 = (2 * C92346 * C92350) / C92119;
    const double C2664 = C92350 / C92119;
    const double C90114 = C90103 - C90111;
    const double C90113 = C90093 * C90109;
    const double C4030 = (-C90109 / C90095) / C90100 - (0 * be) / C90095;
    const double C36262 = -C90109 / C90095;
    const double C90129 = C90126 / C90095;
    const double C45559 = C92320 * C821;
    const double C45850 = C92320 * C5143;
    const double C45846 = C92320 * C4820;
    const double C45841 = C92320 * C1020;
    const double C45837 = C92320 * C810;
    const double C45833 = C92320 * C1016;
    const double C45829 = C92320 * C808;
    const double C46091 = C92320 * C5421;
    const double C46086 = C92320 * C1202;
    const double C46081 = C92320 * C1198;
    const double C47350 = C92320 * C1017;
    const double C47346 = C92320 * C806;
    const double C47677 = C92320 * C1199;
    const double C49246 = C92320 * C5977;
    const double C49242 = C92320 * C5709;
    const double C49238 = C92320 * C3591;
    const double C49234 = C92320 * C3361;
    const double C49548 = C92320 * C6223;
    const double C49544 = C92320 * C3805;
    const double C51612 = C92320 * C1402;
    const double C51966 = C92320 * C5979;
    const double C51962 = C92320 * C5711;
    const double C51958 = C92320 * C1601;
    const double C51954 = C92320 * C1391;
    const double C51949 = C92320 * C1597;
    const double C51945 = C92320 * C1389;
    const double C52272 = C92320 * C6225;
    const double C52268 = C92320 * C1783;
    const double C52263 = C92320 * C1779;
    const double C54244 = C92320 * C1598;
    const double C54240 = C92320 * C1387;
    const double C54640 = C92320 * C1780;
    const double C82088 = C92320 * C11195;
    const double C82084 = C92320 * C10873;
    const double C82328 = C92320 * C11501;
    const double C92343 = C92319 / C90099;
    const double C32308 = C31250 * C1017;
    const double C32302 = C31250 * C806;
    const double C32548 = C31250 * C1199;
    const double C62749 = C31250 * C1598;
    const double C62743 = C31250 * C1387;
    const double C62995 = C31250 * C1780;
    const double C92345 = C92323 / C90095;
    const double C4023 = -C92344;
    const double C32039 = C31249 * C821;
    const double C32319 = C31249 * C1020;
    const double C32313 = C31249 * C810;
    const double C32306 = C31249 * C1016;
    const double C32300 = C31249 * C808;
    const double C32553 = C31249 * C1202;
    const double C32546 = C31249 * C1198;
    const double C33808 = C31249 * C1017;
    const double C33802 = C31249 * C806;
    const double C34136 = C31249 * C1199;
    const double C35707 = C31249 * C3591;
    const double C35701 = C31249 * C3361;
    const double C36007 = C31249 * C3805;
    const double C62480 = C31249 * C1402;
    const double C62760 = C31249 * C1601;
    const double C62754 = C31249 * C1391;
    const double C62747 = C31249 * C1597;
    const double C62741 = C31249 * C1389;
    const double C63000 = C31249 * C1783;
    const double C62993 = C31249 * C1779;
    const double C64523 = C31249 * C1598;
    const double C64517 = C31249 * C1387;
    const double C64834 = C31249 * C1780;
    const double C90184 = C90155 * C90183;
    const double C31335 = (-C90183 / C90095) / C90100 - (0 * be) / C90095;
    const double C90288 = C90285 - C90281;
    const double C90305 = C90302 / C90095;
    const double C4640 = C4108 * C1195;
    const double C67544 = C4108 * C5710;
    const double C67538 = C4108 * C5702;
    const double C68048 = C4108 * C6217;
    const double C14794 = C14781 * C795;
    const double C14790 = C14781 * C807;
    const double C14786 = C14781 * C796;
    const double C15053 = C14781 * C1010;
    const double C15051 = C14781 * C878;
    const double C15045 = C14781 * C1009;
    const double C15043 = C14781 * C877;
    const double C15320 = C14781 * C1192;
    const double C15315 = C14781 * C1191;
    const double C17693 = C14781 * C1195;
    const double C26726 = C14781 * C5712;
    const double C26719 = C14781 * C3362;
    const double C26715 = C14781 * C3357;
    const double C27036 = C14781 * C3587;
    const double C27034 = C14781 * C3439;
    const double C27369 = C14781 * C3801;
    const double C30202 = C14781 * C5710;
    const double C30198 = C14781 * C5702;
    const double C31030 = C14781 * C6217;
    const double C434 = C418 - C419;
    const double C11329 = C11311 - C11312;
    const double C92352 = C92336 / C90099;
    const double C14804 = C92333 * C192;
    const double C14800 = C92333 * C186;
    const double C14795 = C92333 * C191;
    const double C14791 = C92333 * C185;
    const double C14787 = C92333 * C190;
    const double C14783 = C92333 * C184;
    const double C15050 = C92333 * C413;
    const double C15042 = C92333 * C412;
    const double C15322 = C92333 * C632;
    const double C15317 = C92333 * C631;
    const double C15312 = C92333 * C630;
    const double C17047 = C92333 * C878;
    const double C17043 = C92333 * C885;
    const double C17039 = C92333 * C877;
    const double C17696 = C92333 * C1258;
    const double C17692 = C92333 * C1257;
    const double C18006 = C92333 * C1459;
    const double C18002 = C92333 * C1466;
    const double C17998 = C92333 * C1458;
    const double C18640 = C92333 * C1839;
    const double C18636 = C92333 * C1838;
    const double C26729 = C92333 * C1462;
    const double C26725 = C92333 * C1469;
    const double C26721 = C92333 * C1461;
    const double C26716 = C92333 * C1465;
    const double C26712 = C92333 * C1457;
    const double C27033 = C92333 * C1658;
    const double C27375 = C92333 * C1842;
    const double C27371 = C92333 * C1841;
    const double C27366 = C92333 * C1837;
    const double C30201 = C92333 * C3443;
    const double C30197 = C92333 * C3439;
    const double C31029 = C92333 * C3875;
    const double C86811 = C92333 * C11004;
    const double C86807 = C92333 * C11000;
    const double C87289 = C92333 * C11594;
    const double C4106 =
        (((0 - (C90155 * C90173) / C90095) * ae) / C90095 - (0 * be) / C90104) /
            C90100 +
        ((C90155 * (((C92177 - (C90155 * 2 * C90175) / C90095) * ae) / C90095 -
                    C90173 / C90104) +
          C92333) *
         ae) /
            C90095 +
        (0 * ae) / C90095 - C90175 / C90099;
    const double C4125 = C4026 * C878;
    const double C4118 = C4026 * C885;
    const double C4112 = C4026 * C877;
    const double C4644 = C4026 * C1258;
    const double C4637 = C4026 * C1257;
    const double C7286 = C4026 * C1261;
    const double C67541 = C4026 * C3443;
    const double C67535 = C4026 * C3439;
    const double C68045 = C4026 * C3875;
    const double C4124 = C4107 * C795;
    const double C4119 = C4107 * C807;
    const double C4113 = C4107 * C796;
    const double C4385 = C4107 * C1010;
    const double C4383 = C4107 * C878;
    const double C4373 = C4107 * C1009;
    const double C4371 = C4107 * C877;
    const double C4643 = C4107 * C1192;
    const double C4638 = C4107 * C1191;
    const double C7285 = C4107 * C1195;
    const double C67553 = C4107 * C5712;
    const double C67542 = C4107 * C3362;
    const double C67536 = C4107 * C3357;
    const double C67785 = C4107 * C3587;
    const double C67783 = C4107 * C3439;
    const double C68046 = C4107 * C3801;
    const double C70131 = C4107 * C5710;
    const double C70125 = C4107 * C5702;
    const double C70770 = C4107 * C6217;
    const double C92353 = C92338 / C90095;
    const double C45394 = C44794 * C1261;
    const double C31252 = -C92351;
    const double C4129 = C4025 * C191;
    const double C4123 = C4025 * C185;
    const double C4116 = C4025 * C190;
    const double C4110 = C4025 * C184;
    const double C4390 = C4025 * C413;
    const double C4370 = C4025 * C412;
    const double C4642 = C4025 * C631;
    const double C4635 = C4025 * C630;
    const double C6627 = C4025 * C885;
    const double C6621 = C4025 * C877;
    const double C7284 = C4025 * C1257;
    const double C7600 = C4025 * C1466;
    const double C7594 = C4025 * C1458;
    const double C8236 = C4025 * C1838;
    const double C67552 = C4025 * C1469;
    const double C67546 = C4025 * C1461;
    const double C67539 = C4025 * C1465;
    const double C67533 = C4025 * C1457;
    const double C67782 = C4025 * C1658;
    const double C68050 = C4025 * C1841;
    const double C68043 = C4025 * C1837;
    const double C70130 = C4025 * C3443;
    const double C70124 = C4025 * C3439;
    const double C70769 = C4025 * C3875;
    const double C90210 = C90158 * C90209;
    const double C61190 = (-C90209 / C90095) / C90100 - (0 * be) / C90095;
    const double C90359 = C90356 - C90352;
    const double C90376 = C90373 / C90095;
    const double C9850 = C9583 * C1594;
    const double C40509 = C9583 * C5712;
    const double C19912 = C19899 * C1376;
    const double C19908 = C19899 * C1388;
    const double C19904 = C19899 * C1377;
    const double C20161 = C19899 * C1591;
    const double C20156 = C19899 * C1590;
    const double C20417 = C19899 * C1773;
    const double C20415 = C19899 * C1525;
    const double C20409 = C19899 * C1772;
    const double C20407 = C19899 * C1524;
    const double C23454 = C19899 * C1594;
    const double C25864 = C19899 * C5710;
    const double C25860 = C19899 * C5702;
    const double C25857 = C19899 * C3362;
    const double C25853 = C19899 * C3357;
    const double C26171 = C19899 * C3587;
    const double C26492 = C19899 * C6217;
    const double C26490 = C19899 * C5885;
    const double C26480 = C19899 * C3801;
    const double C26478 = C19899 * C3513;
    const double C30340 = C19899 * C5712;
    const double C725 = C709 - C710;
    const double C5616 = C5600 - C5601;
    const double C92355 = C92340 / C90099;
    const double C19922 = C92334 * C275;
    const double C19918 = C92334 * C269;
    const double C19913 = C92334 * C274;
    const double C19909 = C92334 * C268;
    const double C19905 = C92334 * C273;
    const double C19901 = C92334 * C267;
    const double C20163 = C92334 * C498;
    const double C20158 = C92334 * C497;
    const double C20153 = C92334 * C496;
    const double C20414 = C92334 * C704;
    const double C20406 = C92334 * C703;
    const double C22170 = C92334 * C944;
    const double C22166 = C92334 * C951;
    const double C22162 = C92334 * C943;
    const double C22483 = C92334 * C1134;
    const double C22479 = C92334 * C1133;
    const double C23136 = C92334 * C1525;
    const double C23132 = C92334 * C1532;
    const double C23128 = C92334 * C1524;
    const double C23457 = C92334 * C1715;
    const double C23453 = C92334 * C1714;
    const double C25867 = C92334 * C947;
    const double C25863 = C92334 * C954;
    const double C25859 = C92334 * C946;
    const double C25854 = C92334 * C950;
    const double C25850 = C92334 * C942;
    const double C26177 = C92334 * C1137;
    const double C26173 = C92334 * C1136;
    const double C26168 = C92334 * C1132;
    const double C26477 = C92334 * C1317;
    const double C30339 = C92334 * C3517;
    const double C30335 = C92334 * C3513;
    const double C30759 = C92334 * C3731;
    const double C57003 = C92334 * C5034;
    const double C56999 = C92334 * C5030;
    const double C57238 = C92334 * C5329;
    const double C60327 = C92334 * C5891;
    const double C60323 = C92334 * C5885;
    const double C9581 =
        (((0 - (C90158 * C90199) / C90095) * ae) / C90095 - (0 * be) / C90104) /
            C90100 +
        ((C90158 * (((C92188 - (C90158 * 2 * C90201) / C90095) * ae) / C90095 -
                    C90199 / C90104) +
          C92334) *
         ae) /
            C90095 +
        (0 * ae) / C90095 - C90201 / C90099;
    const double C9600 = C9423 * C1525;
    const double C9593 = C9423 * C1532;
    const double C9587 = C9423 * C1524;
    const double C9854 = C9423 * C1715;
    const double C9847 = C9423 * C1714;
    const double C13319 = C9423 * C1718;
    const double C40519 = C9423 * C5891;
    const double C40513 = C9423 * C5885;
    const double C40506 = C9423 * C3517;
    const double C40500 = C9423 * C3513;
    const double C40754 = C9423 * C3731;
    const double C44046 = C9423 * C5893;
    const double C9599 = C9582 * C1376;
    const double C9594 = C9582 * C1388;
    const double C9588 = C9582 * C1377;
    const double C9853 = C9582 * C1591;
    const double C9848 = C9582 * C1590;
    const double C10104 = C9582 * C1773;
    const double C10102 = C9582 * C1525;
    const double C10092 = C9582 * C1772;
    const double C10090 = C9582 * C1524;
    const double C13318 = C9582 * C1594;
    const double C40518 = C9582 * C5710;
    const double C40512 = C9582 * C5702;
    const double C40507 = C9582 * C3362;
    const double C40501 = C9582 * C3357;
    const double C40755 = C9582 * C3587;
    const double C41008 = C9582 * C6217;
    const double C41006 = C9582 * C5885;
    const double C40996 = C9582 * C3801;
    const double C40994 = C9582 * C3513;
    const double C44045 = C9582 * C5712;
    const double C92356 = C92342 / C90095;
    const double C80820 = C80417 * C1718;
    const double C86142 = C80417 * C5893;
    const double C61039 = -C92354;
    const double C9604 = C9422 * C274;
    const double C9598 = C9422 * C268;
    const double C9591 = C9422 * C273;
    const double C9585 = C9422 * C267;
    const double C9852 = C9422 * C497;
    const double C9845 = C9422 * C496;
    const double C10109 = C9422 * C704;
    const double C10089 = C9422 * C703;
    const double C12004 = C9422 * C951;
    const double C11998 = C9422 * C943;
    const double C12322 = C9422 * C1133;
    const double C12993 = C9422 * C1532;
    const double C12987 = C9422 * C1524;
    const double C13317 = C9422 * C1714;
    const double C40517 = C9422 * C954;
    const double C40511 = C9422 * C946;
    const double C40504 = C9422 * C950;
    const double C40498 = C9422 * C942;
    const double C40759 = C9422 * C1136;
    const double C40752 = C9422 * C1132;
    const double C40993 = C9422 * C1317;
    const double C44044 = C9422 * C3517;
    const double C44038 = C9422 * C3513;
    const double C44382 = C9422 * C3731;
    const double C121 = (2 * (C90404 * C90417 + C90407 * ae) +
                         C90404 * (C90417 + C90404 * C90436 + C90425 * ae) +
                         (C90407 + C90419 * C90408) * ae) /
                        C90095;
    const double C805 =
        (C90526 * (C90417 + C90404 * C90436 + C90425 * ae)) / C90095;
    const double C813 =
        (C90404 * C90417 + C90407 * ae + C90436 * C90658) / C90095;
    const double C1386 =
        (C90570 * (C90417 + C90404 * C90436 + C90425 * ae)) / C90095;
    const double C1394 =
        (C90404 * C90417 + C90407 * ae + C90436 * C90756) / C90095;
    const double C3364 = (C90570 * C90526 * C90436) / C90095;
    const double C5139 = (2 * (C90526 * C90620 + C90407 * ae) +
                          C90526 * (C90620 + C90526 * C91043 + C91040 * ae) +
                          (C90407 + C90419 * C90658) * ae) /
                         C90095;
    const double C5971 =
        (C90570 * (C90620 + C90526 * C91043 + C91040 * ae)) / C90095;
    const double C5973 =
        (C90526 * C90620 + C90407 * ae + C91043 * C90756) / C90095;
    const double C11497 = (2 * (C90570 * C90701 + C90407 * ae) +
                           C90570 * (C90701 + C90570 * C91311 + C91308 * ae) +
                           (C90407 + C90419 * C90756) * ae) /
                          C90095;
    const double C8033 = C92188 * C3732;
    const double C12324 = C9423 * C3732;
    const double C22481 = C92252 * C3732;
    const double C29521 = C92334 * C3732;
    const double C63760 = C92252 * C3732;
    const double C8238 = C4026 * C3876;
    const double C12527 = C92177 * C3876;
    const double C18638 = C92226 * C3876;
    const double C28583 = C92333 * C3876;
    const double C35180 = C92226 * C3876;
    const double C4114 = C4027 * C881;
    const double C4375 = C4108 * C881;
    const double C6623 = C4026 * C881;
    const double C6957 = C4107 * C881;
    const double C17041 = C92226 * C881;
    const double C17370 = C14781 * C881;
    const double C33592 = C92226 * C881;
    const double C44881 = C44794 * C881;
    const double C4377 = C4108 * C1013;
    const double C4484 = C265 * C1013;
    const double C6959 = C4107 * C1013;
    const double C17372 = C14781 * C1013;
    const double C9589 = C9424 * C1528;
    const double C10094 = C9583 * C1528;
    const double C12989 = C9423 * C1528;
    const double C13635 = C9582 * C1528;
    const double C23130 = C92252 * C1528;
    const double C23769 = C19899 * C1528;
    const double C64405 = C92252 * C1528;
    const double C80574 = C80417 * C1528;
    const double C10006 = C182 * C1776;
    const double C10096 = C9583 * C1776;
    const double C13637 = C9582 * C1776;
    const double C23771 = C19899 * C1776;
    const double C7596 = C4026 * C3440;
    const double C7916 = C4107 * C3440;
    const double C11890 = C92177 * C3440;
    const double C12212 = C182 * C3440;
    const double C18000 = C92226 * C3440;
    const double C18319 = C14781 * C3440;
    const double C27751 = C92333 * C3440;
    const double C34548 = C92226 * C3440;
    const double C7706 = C92188 * C3514;
    const double C8344 = C265 * C3514;
    const double C12000 = C9423 * C3514;
    const double C12633 = C9582 * C3514;
    const double C22164 = C92252 * C3514;
    const double C22790 = C19899 * C3514;
    const double C29121 = C92334 * C3514;
    const double C63450 = C92252 * C3514;
    const double C7918 = C4107 * C3588;
    const double C8032 = C265 * C3588;
    const double C12214 = C182 * C3588;
    const double C12323 = C9582 * C3588;
    const double C18321 = C14781 * C3588;
    const double C22480 = C19899 * C3588;
    const double C8237 = C4107 * C3802;
    const double C8346 = C265 * C3802;
    const double C12526 = C182 * C3802;
    const double C12635 = C9582 * C3802;
    const double C18637 = C14781 * C3802;
    const double C22792 = C19899 * C3802;
    const double C4115 = C4108 * C799;
    const double C4209 = C265 * C799;
    const double C4724 = C701 * C799;
    const double C6622 = C4107 * C799;
    const double C17040 = C14781 * C799;
    const double C9501 = C182 * C1380;
    const double C9590 = C9583 * C1380;
    const double C9758 = C410 * C1380;
    const double C12988 = C9582 * C1380;
    const double C23129 = C19899 * C1380;
    const double C7595 = C4107 * C3358;
    const double C7705 = C265 * C3358;
    const double C8345 = C701 * C3358;
    const double C11889 = C182 * C3358;
    const double C11999 = C9582 * C3358;
    const double C12213 = C410 * C3358;
    const double C17999 = C14781 * C3358;
    const double C22163 = C19899 * C3358;
    const double C5053 = C265 * C4814;
    const double C5609 = C701 * C4814;
    const double C6624 = C4108 * C4814;
    const double C7597 = C4108 * C5701;
    const double C7709 = C265 * C5701;
    const double C8341 = C701 * C5701;
    const double C25868 = C19899 * C5701;
    const double C27752 = C14781 * C5701;
    const double C11023 = C182 * C10867;
    const double C11322 = C410 * C10867;
    const double C12990 = C9583 * C10867;
    const double C120 = (2 * (C90404 * C90416 + C90407 * be) +
                         C90404 * (C90416 + C90404 * C90435 + C90425 * be) +
                         (C90407 + C90419 * C90408) * be) /
                        C90095;
    const double C804 =
        (C90526 * (C90416 + C90404 * C90435 + C90425 * be)) / C90095;
    const double C812 =
        (C90404 * C90416 + C90407 * be + C90435 * C90658) / C90095;
    const double C1385 =
        (C90570 * (C90416 + C90404 * C90435 + C90425 * be)) / C90095;
    const double C1393 =
        (C90404 * C90416 + C90407 * be + C90435 * C90756) / C90095;
    const double C3363 = (C90570 * C90526 * C90435) / C90095;
    const double C4948 = (2 * (C90526 * C90533 + C90407 * be) +
                          C90526 * (C90533 + C90526 * C91042 + C91040 * be) +
                          (C90407 + C90419 * C90658) * be) /
                         C90095;
    const double C5799 =
        (C90570 * (C90533 + C90526 * C91042 + C91040 * be)) / C90095;
    const double C5801 =
        (C90526 * C90533 + C90407 * be + C91042 * C90756) / C90095;
    const double C11109 = (2 * (C90570 * C90577 + C90407 * be) +
                           C90570 * (C90577 + C90570 * C91310 + C91308 * be) +
                           (C90407 + C90419 * C90756) * be) /
                          C90095;
    const double C30761 = C92252 * C6139;
    const double C40756 = C9424 * C6139;
    const double C44384 = C9423 * C6139;
    const double C70567 = C92252 * C6139;
    const double C86382 = C80417 * C6139;
    const double C129 =
        (2 * (ae * C90416 + be * C90417 + C90404 * C90434) +
         ae * (C90416 + C90404 * C90435 + C90425 * be) +
         be * (C90417 + C90404 * C90436 + C90425 * ae) +
         C90404 * (C90434 + ae * C90435 + be * C90436 +
                   C90404 * (ae * C90429 + be * C90430 +
                             C90404 *
                                 (C90420 * C90421 +
                                  C90408 * bs[5] * std::pow(C90410, 5)) *
                                 C90097))) /
        C90099;
    const double C820 = (ae * C90526 * C90416 + be * C90526 * C90417 +
                         C90404 * C90526 * C90434) /
                        C90099;
    const double C822 =
        ((C90407 + C90408 * C90409 * C90413) * C90097 + C90434 * C90658) /
        C90099;
    const double C1401 = (ae * C90570 * C90416 + be * C90570 * C90417 +
                          C90404 * C90570 * C90434) /
                         C90099;
    const double C1403 =
        ((C90407 + C90408 * C90409 * C90413) * C90097 + C90434 * C90756) /
        C90099;
    const double C3369 = (C90570 * C90526 * C90434) / C90099;
    const double C414 =
        (2 * C90404 * C90663 +
         C90404 *
             (C90663 + (C90440 + C90658 * C90441 * C90442) * C90097 * C90408)) /
        C90099;
    const double C1076 = (ae * C90404 * C90533 + be * C90404 * C90620 +
                          C90526 * C90404 * C90663) /
                         C90099;
    const double C1078 =
        ((C90407 + C90658 * C90409 * C90413) * C90097 +
         ae * (C90526 * C90533 + C90407 * be) +
         be * (C90526 * C90620 + C90407 * ae) +
         C90526 * (ae * C90533 + be * C90620 + C90526 * C90663)) /
        C90099;
    const double C1657 = (C90570 * C90404 * C90663) / C90099;
    const double C1659 =
        ((C90407 + C90658 * C90409 * C90413) * C90097 + C90663 * C90756) /
        C90099;
    const double C3661 = (ae * C90570 * C90533 + be * C90570 * C90620 +
                          C90526 * C90570 * C90663) /
                         C90099;
    const double C705 =
        (2 * C90404 * C90761 +
         C90404 *
             (C90761 + (C90440 + C90756 * C90441 * C90442) * C90097 * C90408)) /
        C90099;
    const double C1316 = (C90526 * C90404 * C90761) / C90099;
    const double C1318 =
        ((C90407 + C90756 * C90409 * C90413) * C90097 + C90761 * C90658) /
        C90099;
    const double C1897 = (ae * C90404 * C90577 + be * C90404 * C90701 +
                          C90570 * C90404 * C90761) /
                         C90099;
    const double C1899 =
        ((C90407 + C90756 * C90409 * C90413) * C90097 +
         ae * (C90570 * C90577 + C90407 * be) +
         be * (C90570 * C90701 + C90407 * ae) +
         C90570 * (ae * C90577 + be * C90701 + C90570 * C90761)) /
        C90099;
    const double C3945 = (ae * C90526 * C90577 + be * C90526 * C90701 +
                          C90570 * C90526 * C90761) /
                         C90099;
    const double C9024 = C92188 * C6137;
    const double C26175 = C92252 * C6137;
    const double C40761 = C9423 * C6137;
    const double C60648 = C92334 * C6137;
    const double C67104 = C92252 * C6137;
    const double C30337 = C92252 * C5887;
    const double C31162 = C19899 * C5887;
    const double C40502 = C9424 * C5887;
    const double C40998 = C9583 * C5887;
    const double C44040 = C9423 * C5887;
    const double C44700 = C9582 * C5887;
    const double C70236 = C92252 * C5887;
    const double C86136 = C80417 * C5887;
    const double C14520 = C182 * C6219;
    const double C27372 = C14781 * C6219;
    const double C31164 = C19899 * C6219;
    const double C41000 = C9583 * C6219;
    const double C44702 = C9582 * C6219;
    const double C68051 = C4107 * C6219;
    const double C13878 = C182 * C5703;
    const double C14200 = C410 * C5703;
    const double C26722 = C14781 * C5703;
    const double C30336 = C19899 * C5703;
    const double C40503 = C9583 * C5703;
    const double C44039 = C9582 * C5703;
    const double C67547 = C4107 * C5703;
    const double C44041 = C9583 * C13749;
    const double C73662 = C182 * C13749;
    const double C73867 = C410 * C13749;
    const double C86808 = C14781 * C13749;
    const double C213 = C202 - C203;
    const double C212 = C200 - C201;
    const double C435 = C422 - C423;
    const double C214 = C204 - C205;
    const double C436 = C426 - C427;
    const double C2287 = C2281 - C2282;
    const double C2286 = C2277 - C2278;
    const double C12882 = C2739 - C2740;
    const double C12880 = C2740 - C2739;
    const double C2980 = C2974 - C2975;
    const double C19823 = C2744 - C2743;
    const double C23027 = C2743 - C2744;
    const double C2979 = C2970 - C2971;
    const double C11027 = C11013 - C11014;
    const double C11330 = C11316 - C11317;
    const double C14204 = C14194 - C14195;
    const double C71927 = C11020 - C11019;
    const double C11332 = C11325 - C11326;
    const double C296 = C285 - C286;
    const double C295 = C283 - C284;
    const double C726 = C713 - C714;
    const double C297 = C287 - C288;
    const double C727 = C717 - C718;
    const double C6734 = C2126 - C2127;
    const double C6732 = C2127 - C2126;
    const double C2589 = C2583 - C2584;
    const double C14887 = C2131 - C2130;
    const double C17152 = C2130 - C2131;
    const double C2588 = C2579 - C2580;
    const double C5057 = C5043 - C5044;
    const double C5617 = C5604 - C5605;
    const double C3282 = C3276 - C3277;
    const double C3281 = C3272 - C3273;
    const double C9344 = C9339 - C9340;
    const double C36865 = C5050 - C5049;
    const double C5619 = C5612 - C5613;
    const double C9343 = C9335 - C9336;
    const double C512 = C505 - C506;
    const double C646 = C639 - C640;
    const double C90465 = C90404 * C90462;
    const double C90481 = 2 * C90462;
    const double C90473 = be * C90462;
    const double C91008 = C90526 * C90462;
    const double C91249 = C90570 * C90462;
    const double C4819 =
        (2 * C90526 * C90436 + C90526 * (C90436 + C90462 * C90658)) / C90095;
    const double C5708 = (C90570 * (C90436 + C90462 * C90658)) / C90095;
    const double C10872 =
        (2 * C90570 * C90436 + C90570 * (C90436 + C90462 * C90756)) / C90095;
    const double C91419 = C90544 + C90929;
    const double C13981 =
        (2 * (be * C91002 + C90570 * C91382) + be * (C91002 + C90926 * C90756) +
         C90570 * (C91382 + be * C90570 * C90926 +
                   C90570 * (C90929 + C90570 * C90526 * C90600))) /
        C90099;
    const double C44047 = C9583 * C13752;
    const double C73664 = C182 * C13752;
    const double C86812 = C14781 * C13752;
    const double C91624 = C90588 + C90946;
    const double C5895 =
        (C90581 + C90588 * C90658 + be * C90570 * C91006 +
         C90570 * (be * C91006 + C90570 * (C90588 + C90600 * C90658))) /
        C90099;
    const double C8692 =
        (be * (2 * C91002 + C90526 * C91006) +
         C90570 * (2 * C90526 * C90588 + C90526 * (C90588 + C90600 * C90658))) /
        C90099;
    const double C4823 = (3 * (C90417 + C90430 * C90658) +
                          C90526 * (2 * C91002 + C90526 * C91006)) /
                         C90095;
    const double C5716 = (C90417 + C90430 * C90658 + C91006 * C90756) / C90095;
    const double C8457 = (C90570 * (2 * C91002 + C90526 * C91006)) / C90095;
    const double C43815 =
        (2 * C90570 * C91006 + C90570 * (C91006 + C91424 * C90756)) / C90095;
    const double C10876 = (3 * (C90417 + C90430 * C90756) +
                           C90570 * (2 * C91243 + C90570 * C91247)) /
                          C90095;
    const double C90464 = C90404 * C90461;
    const double C90479 = 2 * C90461;
    const double C90472 = ae * C90461;
    const double C91026 = C90526 * C90461;
    const double C91281 = C90570 * C90461;
    const double C4818 =
        (2 * C90526 * C90435 + C90526 * (C90435 + C90461 * C90658)) / C90095;
    const double C5707 = (C90570 * (C90435 + C90461 * C90658)) / C90095;
    const double C10871 =
        (2 * C90570 * C90435 + C90570 * (C90435 + C90461 * C90756)) / C90095;
    const double C90931 = C90928 + C90929;
    const double C91433 = C90631 + C90928;
    const double C14411 =
        (2 * (ae * C91020 + C90570 * C91393) + ae * (C91020 + C90925 * C90756) +
         C90570 * (C91393 + ae * C90570 * C90925 +
                   C90570 * (C90928 + C90570 * C90526 * C90724))) /
        C90099;
    const double C40603 = C92097 * C5981;
    const double C41414 = C92097 * C13751;
    const double C90948 = C90945 + C90946;
    const double C91641 = C90712 + C90945;
    const double C6227 =
        (C90705 + C90712 * C90658 + ae * C90570 * C91024 +
         C90570 * (ae * C91024 + C90570 * (C90712 + C90724 * C90658))) /
        C90099;
    const double C8802 =
        (2 * (ae * C90570 * C90429 + C90526 * C91213) + ae * C90570 * C91024 +
         C90526 * (C91213 + ae * C90570 * C90925 +
                   C90526 * (C90945 + C90526 * C90570 * C90643))) /
        C90099;
    const double C9124 =
        (ae * (2 * C91020 + C90526 * C91024) +
         C90570 * (2 * C90526 * C90712 + C90526 * (C90712 + C90724 * C90658))) /
        C90099;
    const double C4822 = (3 * (C90416 + C90429 * C90658) +
                          C90526 * (2 * C91020 + C90526 * C91024)) /
                         C90095;
    const double C5715 = (C90416 + C90429 * C90658 + C91024 * C90756) / C90095;
    const double C8456 = (C90570 * (2 * C91020 + C90526 * C91024)) / C90095;
    const double C43814 =
        (2 * C90570 * C91024 + C90570 * (C91024 + C91438 * C90756)) / C90095;
    const double C14083 =
        (ae * (2 * C91275 + C90570 * C91279) +
         C90526 * (2 * C91213 + C90570 * (C90631 + C90643 * C90756))) /
        C90099;
    const double C10875 = (3 * (C90416 + C90429 * C90756) +
                           C90570 * (2 * C91275 + C90570 * C91279)) /
                          C90095;
    const double C90463 = C90404 * C90460;
    const double C90775 = C90526 * C90460;
    const double C90850 = C90570 * C90460;
    const double C823 =
        (ae * (C90416 + C90429 * C90658) + be * (C90417 + C90430 * C90658) +
         C90404 * (C90434 + C90460 * C90658)) /
        C90099;
    const double C1404 =
        (ae * (C90416 + C90429 * C90756) + be * (C90417 + C90430 * C90756) +
         C90404 * (C90434 + C90460 * C90756)) /
        C90099;
    const double C4827 =
        (2 * C90526 * C90434 + C90526 * (C90434 + C90460 * C90658)) / C90099;
    const double C5720 = (C90570 * (C90434 + C90460 * C90658)) / C90099;
    const double C10880 =
        (2 * C90570 * C90434 + C90570 * (C90434 + C90460 * C90756)) / C90099;
    const double C90510 = C90404 * C90507;
    const double C91010 = C90507 * C90658;
    const double C91251 = C90507 * C90756;
    const double C91385 = C90526 * C90507;
    const double C91467 = C90526 * C91460;
    const double C91685 = C90570 * C91681;
    const double C90503 = C90495 * ae;
    const double C90501 = C90404 * C90495;
    const double C90500 = C90495 * be;
    const double C91189 = C90526 * C90495;
    const double C91373 = C90570 * C90495;
    const double C6487 =
        2 * C90526 * C90454 + C90526 * (C90454 + C90495 * C90658);
    const double C7488 = C90570 * (C90454 + C90495 * C90658);
    const double C12747 =
        2 * C90570 * C90454 + C90570 * (C90454 + C90495 * C90756);
    const double C91078 = C91074 + C90497;
    const double C91342 = C91337 + C90497;
    const double C91077 = C91071 + C90494;
    const double C91339 = C91334 + C90494;
    const double C91073 = C90447 + C91068;
    const double C91075 = C91067 * ae;
    const double C91072 = C91067 * be;
    const double C91411 = C90570 * C91067;
    const double C13750 =
        2 * C90570 * C91034 + C90570 * (C91034 + C91067 * C90756);
    const double C91341 = C90447 + C91336;
    const double C91343 = C91335 * ae;
    const double C91340 = C91335 * be;
    const double C90509 = C90404 * C90505;
    const double C91028 = C90505 * C90658;
    const double C91283 = C90505 * C90756;
    const double C91396 = C90526 * C90505;
    const double C91464 = C90526 * C91457;
    const double C91580 = C91457 * C90756;
    const double C91684 = C90570 * C91678;
    const double C90508 = C90404 * C90504;
    const double C90783 = C90504 * C90658;
    const double C90858 = C90504 * C90756;
    const double C90927 = C90526 * C90504;
    const double C90944 = C90570 * C90504;
    const double C824 =
        (C90434 + C90460 * C90658 + ae * (C90435 + C90461 * C90658) +
         be * (C90436 + C90462 * C90658) +
         C90404 * (ae * (C90429 + C90452 * C90658) +
                   be * (C90430 + C90455 * C90658) +
                   C90404 * (C90460 + C90504 * C90658))) /
        C90099;
    const double C1405 =
        (C90434 + C90460 * C90756 + ae * (C90435 + C90461 * C90756) +
         be * (C90436 + C90462 * C90756) +
         C90404 * (ae * (C90429 + C90452 * C90756) +
                   be * (C90430 + C90455 * C90756) +
                   C90404 * (C90460 + C90504 * C90756))) /
        C90099;
    const double C90674 = C90673 * C90408;
    const double C91065 = C90404 * C90673;
    const double C91447 = C90526 * C90673;
    const double C91518 = C90673 * C90756;
    const double C91540 = C90570 * C90673;
    const double C90772 = C90771 * C90408;
    const double C91128 = C90404 * C90771;
    const double C91509 = C90771 * C90658;
    const double C91585 = C90526 * C90771;
    const double C91666 = C90570 * C90771;
    const double C91468 = C91459 * ae;
    const double C91466 = C90526 * C91459;
    const double C91465 = C91459 * be;
    const double C91615 = C90570 * C91459;
    const double C43813 =
        2 * C90570 * C91054 + C90570 * (C91054 + C91459 * C90756);
    const double C91598 = C91594 + C91461;
    const double C91597 = C91591 + C91458;
    const double C91593 = C91048 + C91588;
    const double C91595 = C91587 * ae;
    const double C91592 = C91587 * be;
    const double C91675 = C91567 * ae;
    const double C91672 = C90570 * C91567;
    const double C91670 = C91567 * be;
    const double C187 = (3 * (C90533 + C90538 * C90408) +
                         C90404 * (2 * C90540 + C90404 * C90549)) /
                        C90095;
    const double C879 = (C90526 * (2 * C90540 + C90404 * C90549) +
                         (2 * C90425 + C90404 * C90454) * be) /
                        C90095;
    const double C882 =
        (C90533 + C90538 * C90408 + C90526 * (C90526 * C90549 + C90454 * be) +
         C90526 * C90454 * be) /
        C90095;
    const double C1460 = (C90570 * (2 * C90540 + C90404 * C90549)) / C90095;
    const double C1463 = (C90533 + C90538 * C90408 + C90549 * C90756) / C90095;
    const double C3441 = (C90570 * (C90526 * C90549 + C90454 * be)) / C90095;
    const double C12877 =
        (2 * C90570 * C90549 + C90570 * (C90549 + C90563 * C90756)) / C90095;
    const double C90559 = C90544 + C90555;
    const double C11595 =
        (2 * (ae * C90540 + C90570 * C91108) + ae * (C90540 + C90551 * C90756) +
         C90570 * (C91108 + ae * C90570 * C90551 +
                   C90570 * (C90555 + C90570 * C91117))) /
        C90099;
    const double C91036 = C91033 + C90453;
    const double C11024 = C92177 * C11001;
    const double C11321 = C182 * C11001;
    const double C91057 = C90526 * C91052;
    const double C91448 = 2 * C91052;
    const double C91444 = ae * C91052;
    const double C91578 = C90570 * C91052;
    const double C13869 =
        (2 * C90570 * C91042 + C90570 * (C91042 + C91052 * C90756)) / C90095;
    const double C11002 = (3 * (C90533 + C90538 * C90756) +
                           C90570 * (2 * C91289 + C90570 * C91293)) /
                          C90095;
    const double C91652 = C90747 + C91541;
    const double C270 = (3 * (C90577 + C90582 * C90408) +
                         C90404 * (2 * C90584 + C90404 * C90593)) /
                        C90095;
    const double C945 = (C90526 * (2 * C90584 + C90404 * C90593)) / C90095;
    const double C948 = (C90577 + C90582 * C90408 + C90593 * C90658) / C90095;
    const double C1526 = (C90570 * (2 * C90584 + C90404 * C90593) +
                          (2 * C90425 + C90404 * C90454) * be) /
                         C90095;
    const double C1529 =
        (C90577 + C90582 * C90408 + C90570 * (C90570 * C90593 + C90454 * be) +
         C90570 * C90454 * be) /
        C90095;
    const double C3515 =
        (C90570 * C90526 * C90593 + C90526 * C90454 * be) / C90095;
    const double C6729 =
        (2 * C90526 * C90593 + C90526 * (C90593 + C90607 * C90658)) / C90095;
    const double C7702 = (C90570 * (C90593 + C90607 * C90658) +
                          (C90454 + C90495 * C90658) * be) /
                         C90095;
    const double C90603 = C90588 + C90599;
    const double C5330 =
        (2 * (ae * C90584 + C90526 * C91087) + ae * (C90584 + C90595 * C90658) +
         C90526 * (C91087 + ae * C90526 * C90595 +
                   C90526 * (C90599 + C90526 * C90404 * C90690))) /
        C90099;
    const double C5888 =
        (C90526 * C90584 + C90570 * (C90570 * C91095 + C91034 * be) +
         C90570 * C91034 * be) /
        C90095;
    const double C91304 = C91301 + C90453;
    const double C5054 = C92188 * C5031;
    const double C5608 = C265 * C5031;
    const double C7710 = C92188 * C5886;
    const double C8340 = C265 * C5886;
    const double C25869 = C92252 * C5886;
    const double C26482 = C19899 * C5886;
    const double C68430 = C92252 * C5886;
    const double C5032 = (3 * (C90577 + C90582 * C90658) +
                          C90526 * (2 * C91089 + C90526 * C91093)) /
                         C90095;
    const double C5889 =
        (C90577 + C90582 * C90658 + C90570 * (C90570 * C91093 + C91054 * be) +
         C90570 * C91054 * be) /
        C90095;
    const double C8690 = (C90570 * (2 * C91089 + C90526 * C91093) +
                          (2 * C91040 + C90526 * C91054) * be) /
                         C90095;
    const double C91325 = C90570 * C91320;
    const double C91546 = ae * C91320;
    const double C91667 = 2 * C91320;
    const double C91406 = C91404 + C91053;
    const double C91486 = C90687 + C91482;
    const double C352 = (3 * (C90620 + C90625 * C90408) +
                         C90404 * (2 * C90627 + C90404 * C90636)) /
                        C90095;
    const double C1011 = (C90526 * (2 * C90627 + C90404 * C90636) +
                          (2 * C90425 + C90404 * C90454) * ae) /
                         C90095;
    const double C1014 =
        (C90620 + C90625 * C90408 + C90526 * (C90526 * C90636 + C90454 * ae) +
         C90526 * C90454 * ae) /
        C90095;
    const double C1592 = (C90570 * (2 * C90627 + C90404 * C90636)) / C90095;
    const double C1595 = (C90620 + C90625 * C90408 + C90636 * C90756) / C90095;
    const double C3589 = (C90570 * (C90526 * C90636 + C90454 * ae)) / C90095;
    const double C13095 =
        (2 * C90570 * C90636 + C90570 * (C90636 + C90650 * C90756)) / C90095;
    const double C90646 = C90631 + C90642;
    const double C91064 = C90555 + C90642;
    const double C6138 =
        (be * C90627 + C90570 * C91087 + ae * (C90570 * C91095 + C91034 * be) +
         C90526 * (ae * (C90570 * C90595 + C90453) +
                   C90526 * (C90642 + C90570 * C91096))) /
        C90099;
    const double C6141 = (ae * (C90584 + C90570 * (C90570 * C90595 + C90453) +
                                C90570 * C90447 * be) +
                          C90526 * (C91087 + be * C90570 * C90638 +
                                    C90570 * (C90642 + C90570 * C91096))) /
                         C90099;
    const double C91037 = C91035 + C90456;
    const double C11323 = C182 * C11192;
    const double C13320 = C9583 * C11192;
    const double C91058 = C90526 * C91055;
    const double C91453 = 2 * C91055;
    const double C91445 = be * C91055;
    const double C14081 =
        (2 * C90570 * C91043 + C90570 * (C91043 + C91055 * C90756)) / C90095;
    const double C41396 =
        (3 * (C91043 + C91055 * C90756) +
         C90570 * (2 * C90570 * C91055 + C90570 * (C91055 + C91460 * C90756))) /
        C90095;
    const double C11193 = (3 * (C90620 + C90625 * C90756) +
                           C90570 * (2 * C91265 + C90570 * C91267)) /
                          C90095;
    const double C91525 = C90687 + C91523;
    const double C91543 = C91541 + C91523;
    const double C91032 = C90404 * C90668;
    const double C91046 = C90526 * C90668;
    const double C91217 = C90570 * C90668;
    const double C415 =
        (3 * (C90663 + C90668 * C90408) +
         C90404 * (2 * C90404 * C90668 +
                   C90404 * (C90668 + (C90476 + C90658 * C90477 * C90478) *
                                          C90097 * C90408))) /
        C90099;
    const double C1075 =
        (ae * (C90533 + C90538 * C90408) + be * (C90620 + C90625 * C90408) +
         C90526 * (C90663 + C90668 * C90408)) /
        C90099;
    const double C1079 =
        (C90404 * C90663 + ae * (C90526 * C90540 + C90425 * be) +
         be * (C90526 * C90627 + C90425 * ae) +
         C90526 * (ae * C90540 + be * C90627 + C90526 * C90404 * C90668)) /
        C90099;
    const double C1656 = (C90570 * (C90663 + C90668 * C90408)) / C90099;
    const double C1660 = (C90404 * C90663 + C90404 * C90668 * C90756) / C90099;
    const double C3662 = (ae * C90570 * C90540 + be * C90570 * C90627 +
                          C90526 * C90570 * C90404 * C90668) /
                         C90099;
    const double C5252 =
        (2 * (ae * C90533 + be * C90620 + C90526 * C90663) +
         ae * (C90533 + C90526 * C91042 + C91040 * be) +
         be * (C90620 + C90526 * C91043 + C91040 * ae) +
         C90526 * (C90663 + ae * C91042 + be * C91043 +
                   C90526 * (C90541 + C90628 + C90526 * C90668))) /
        C90099;
    const double C6058 =
        (C90570 * C90663 + ae * C90570 * C91042 + be * C90570 * C91043 +
         C90526 * (ae * C90570 * C90538 + be * C90570 * C90625 +
                   C90526 * C90570 * C90668)) /
        C90099;
    const double C6059 =
        (ae * (C90533 + C90538 * C90756) + be * (C90620 + C90625 * C90756) +
         C90526 * (C90663 + C90668 * C90756)) /
        C90099;
    const double C6060 =
        (C90663 + C90668 * C90756 + ae * (C91042 + C91052 * C90756) +
         be * (C91043 + C91055 * C90756) +
         C90526 * (ae * (C90538 + C90545 * C90756) +
                   be * (C90625 + C90632 * C90756) +
                   C90526 * (C90668 + C90673 * C90756))) /
        C90099;
    const double C11307 =
        (2 * C90570 * C90663 + C90570 * (C90663 + C90668 * C90756)) / C90099;
    const double C571 = (3 * (C90701 + C90706 * C90408) +
                         C90404 * (2 * C90708 + C90404 * C90717)) /
                        C90095;
    const double C1193 = (C90526 * (2 * C90708 + C90404 * C90717)) / C90095;
    const double C1196 = (C90701 + C90706 * C90408 + C90717 * C90658) / C90095;
    const double C1774 = (C90570 * (2 * C90708 + C90404 * C90717) +
                          (2 * C90425 + C90404 * C90454) * ae) /
                         C90095;
    const double C1777 =
        (C90701 + C90706 * C90408 + C90570 * (C90570 * C90717 + C90454 * ae) +
         C90570 * C90454 * ae) /
        C90095;
    const double C3803 =
        (C90570 * C90526 * C90717 + C90526 * C90454 * ae) / C90095;
    const double C7173 =
        (2 * C90526 * C90717 + C90526 * (C90717 + C90731 * C90658)) / C90095;
    const double C8133 = (C90570 * (C90717 + C90731 * C90658) +
                          (C90454 + C90495 * C90658) * ae) /
                         C90095;
    const double C90727 = C90712 + C90723;
    const double C91332 = C90599 + C90723;
    const double C5518 =
        (2 * (be * C90708 + C90526 * C91108) + be * (C90708 + C90719 * C90658) +
         C90526 * (C91108 + be * C90526 * C90719 +
                   C90526 * (C90723 + C90526 * C90404 * C90750))) /
        C90099;
    const double C6220 =
        (C90526 * C90708 + C90570 * (C90570 * C91116 + C91034 * ae) +
         C90570 * C91034 * ae) /
        C90095;
    const double C91305 = C91303 + C90456;
    const double C5610 = C265 * C5418;
    const double C7287 = C4108 * C5418;
    const double C8239 = C4108 * C6218;
    const double C8342 = C265 * C6218;
    const double C26484 = C19899 * C6218;
    const double C28584 = C14781 * C6218;
    const double C5419 = (3 * (C90701 + C90706 * C90658) +
                          C90526 * (2 * C91110 + C90526 * C91114)) /
                         C90095;
    const double C6221 =
        (C90701 + C90706 * C90658 + C90570 * (C90570 * C91114 + C91054 * ae) +
         C90570 * C91054 * ae) /
        C90095;
    const double C9122 = (C90570 * (2 * C91110 + C90526 * C91114) +
                          (2 * C91040 + C90526 * C91054) * ae) /
                         C90095;
    const double C91326 = C90570 * C91323;
    const double C91673 = 2 * C91323;
    const double C91664 = be * C91323;
    const double C91407 = C91405 + C91056;
    const double C91501 = C90747 + C91497;
    const double C91584 = C91482 + C91497;
    const double C91124 = C90404 * C90766;
    const double C91314 = C90570 * C90766;
    const double C91400 = C90526 * C90766;
    const double C706 =
        (3 * (C90761 + C90766 * C90408) +
         C90404 * (2 * C90404 * C90766 +
                   C90404 * (C90766 + (C90476 + C90756 * C90477 * C90478) *
                                          C90097 * C90408))) /
        C90099;
    const double C1315 = (C90526 * (C90761 + C90766 * C90408)) / C90099;
    const double C1319 = (C90404 * C90761 + C90404 * C90766 * C90658) / C90099;
    const double C1896 =
        (ae * (C90577 + C90582 * C90408) + be * (C90701 + C90706 * C90408) +
         C90570 * (C90761 + C90766 * C90408)) /
        C90099;
    const double C1900 =
        (C90404 * C90761 + ae * (C90570 * C90584 + C90425 * be) +
         be * (C90570 * C90708 + C90425 * ae) +
         C90570 * (ae * C90584 + be * C90708 + C90570 * C90404 * C90766)) /
        C90099;
    const double C3946 = (ae * C90526 * C90584 + be * C90526 * C90708 +
                          C90570 * C90526 * C90404 * C90766) /
                         C90099;
    const double C5596 =
        (2 * C90526 * C90761 + C90526 * (C90761 + C90766 * C90658)) / C90099;
    const double C5597 =
        (3 * (C90761 + C90766 * C90658) +
         C90526 * (2 * C90526 * C90766 + C90526 * (C90766 + C90771 * C90658))) /
        C90099;
    const double C6384 =
        (ae * (C90577 + C90582 * C90658) + be * (C90701 + C90706 * C90658) +
         C90570 * (C90761 + C90766 * C90658)) /
        C90099;
    const double C6385 =
        (C90526 * C90761 + ae * (C90570 * C91089 + C91040 * be) +
         be * (C90570 * C91110 + C91040 * ae) +
         C90570 * (ae * C91089 + be * C91110 + C90570 * C90526 * C90766)) /
        C90099;
    const double C6386 =
        (C90761 + C90766 * C90658 + ae * (C90570 * C91093 + C91054 * be) +
         be * (C90570 * C91114 + C91054 * ae) +
         C90570 * (ae * C91093 + be * C91114 +
                   C90570 * (C90766 + C90771 * C90658))) /
        C90099;
    const double C9332 =
        (ae * (2 * C91089 + C90526 * C91093) +
         be * (2 * C91110 + C90526 * C91114) +
         C90570 * (2 * C90526 * C90766 + C90526 * (C90766 + C90771 * C90658))) /
        C90099;
    const double C11683 =
        (2 * (ae * C90577 + be * C90701 + C90570 * C90761) +
         ae * (C90577 + C90570 * C91310 + C91308 * be) +
         be * (C90701 + C90570 * C91311 + C91308 * ae) +
         C90570 * (C90761 + ae * C91310 + be * C91311 +
                   C90570 * (C90585 + C90709 + C90570 * C90766))) /
        C90099;
    const double C208 = C182 * C112;
    const double C291 = C265 * C112;
    const double C431 = C410 * C112;
    const double C722 = C701 * C112;
    const double C2054 = C182 * C794;
    const double C2134 = C265 * C794;
    const double C2274 = C410 * C794;
    const double C2576 = C701 * C794;
    const double C14801 = C14781 * C794;
    const double C4126 = C4108 * C800;
    const double C4212 = C265 * C800;
    const double C4728 = C701 * C800;
    const double C17048 = C14781 * C800;
    const double C2747 = C182 * C1375;
    const double C2827 = C265 * C1375;
    const double C2967 = C410 * C1375;
    const double C3269 = C701 * C1375;
    const double C19919 = C19899 * C1375;
    const double C9504 = C182 * C1381;
    const double C9601 = C9583 * C1381;
    const double C9762 = C410 * C1381;
    const double C23137 = C19899 * C1381;
    const double C18007 = C14781 * C3359;
    const double C18111 = C265 * C3359;
    const double C18742 = C701 * C3359;
    const double C22059 = C182 * C3359;
    const double C22171 = C19899 * C3359;
    const double C22374 = C410 * C3359;
    const double C11893 = C182 * C5704;
    const double C12001 = C9583 * C5704;
    const double C12209 = C410 * C5704;
    const double C26730 = C14781 * C5704;
    const double C29122 = C19899 * C5704;
    const double C36867 = C265 * C4816;
    const double C37223 = C701 * C4816;
    const double C40514 = C9583 * C5705;
    const double C60324 = C19899 * C5705;
    const double C67549 = C4108 * C5705;
    const double C89335 = C14781 * C5705;
    const double C39155 = C265 * C8454;
    const double C39584 = C701 * C8454;
    const double C57000 = C19899 * C8454;
    const double C70127 = C4108 * C8454;
    const double C40763 = C9424 * C6140;
    const double C60650 = C92252 * C6140;
    const double C70571 = C92252 * C6140;
    const double C86389 = C80417 * C6140;
    const double C71929 = C182 * C10869;
    const double C72108 = C410 * C10869;
    const double C91428 = C91421 + C91426;
    const double C41107 = (3 * (C91002 + C90926 * C90756) +
                           C90570 * (2 * C91555 + C90570 * C91561)) /
                          C90095;
    const double C91633 = C91626 + C91631;
    const double C91442 = C91435 + C91440;
    const double C41106 = (3 * (C91020 + C90925 * C90756) +
                           C90570 * (2 * C91570 + C90570 * C91576)) /
                          C90095;
    const double C91650 = C91643 + C91648;
    const double C90567 = C90557 + C90565;
    const double C11003 = (3 * (C90540 + C90551 * C90756) +
                           C90570 * (2 * C91295 + C90570 * C91299)) /
                          C90095;
    const double C91661 = C91654 + C91659;
    const double C90611 = C90601 + C90609;
    const double C5033 = (3 * (C90584 + C90595 * C90658) +
                          C90526 * (2 * C91095 + C90526 * C91101)) /
                         C90095;
    const double C91492 = C91484 + C91490;
    const double C90654 = C90644 + C90652;
    const double C11194 = (3 * (C90627 + C90638 * C90756) +
                           C90570 * (2 * C91269 + C90570 * C91271)) /
                          C90095;
    const double C91639 = C91637 + C91638;
    const double C90735 = C90725 + C90733;
    const double C5420 = (3 * (C90708 + C90719 * C90658) +
                          C90526 * (2 * C91116 + C90526 * C91122)) /
                         C90095;
    const double C91507 = C91499 + C91505;
    const double C12883 = C2741 - C2742;
    const double C12881 = C2742 - C2741;
    const double C11028 = C11015 - C11016;
    const double C193 =
        (3 * (C90537 + ae * C90540 + C90404 * C90548) +
         ae * (2 * C90540 + C90404 * C90549) +
         C90404 * (2 * C90548 + ae * C90549 +
                   C90404 * (C90544 + ae * C90404 * C90545 +
                             C90404 * (ae * C90545 +
                                       C90404 * C90478 * C90477 * C90532)))) /
        C90099;
    const double C886 = (be * (C90417 + C90404 * C90436 + C90425 * ae) +
                         C90526 * (C90537 + ae * C90540 + C90404 * C90548)) /
                        C90099;
    const double C889 = (ae * C90533 + C90404 * C90537 + be * C90526 * C90436 +
                         C90526 * (be * C90436 + C90526 * C90548)) /
                        C90099;
    const double C1467 =
        (C90570 * (C90537 + ae * C90540 + C90404 * C90548)) / C90099;
    const double C1470 =
        (ae * C90533 + C90404 * C90537 + C90548 * C90756) / C90099;
    const double C3444 = (C90570 * (be * C90436 + C90526 * C90548)) / C90099;
    const double C4954 =
        (3 * (C90537 + be * C91002 + C90526 * C91005) +
         be * (2 * C91002 + C90526 * C91006) +
         C90526 * (2 * C91005 + be * C91006 +
                   C90526 * (C90544 + C90929 +
                             C90526 * (C90475 + C90526 * C90556)))) /
        C90099;
    const double C5805 =
        (C90570 * (C90537 + be * C91002 + C90526 * C91005)) / C90099;
    const double C5807 =
        (be * C90417 + C90526 * C90537 + C91005 * C90756) / C90099;
    const double C5808 =
        (C90537 + be * C91002 + C90526 * C91005 +
         (C90544 + C90929 + C90526 * (C90475 + C90526 * C90556)) * C90756) /
        C90099;
    const double C8590 =
        (C90570 *
         (2 * C91005 + be * C91006 +
          C90526 * (C90544 + C90929 + C90526 * (C90475 + C90526 * C90556)))) /
        C90099;
    const double C13871 =
        (2 * C90570 * C91005 +
         C90570 * (C91005 + (C90475 + C90526 * C90556) * C90756)) /
        C90099;
    const double C71928 = C11022 - C11021;
    const double C90564 = C90404 * C90562;
    const double C91009 = C90526 * C90562;
    const double C11005 =
        (2 * C90570 * C90548 + C90570 * (C90548 + C90562 * C90756)) / C90099;
    const double C11007 =
        (3 * (C90548 + C90562 * C90756) +
         C90570 *
             (2 * C90570 * C90562 +
              C90570 * (C90562 + (ae * C90558 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90532) *
                                     C90756))) /
        C90099;
    const double C91425 = C90526 * C91423;
    const double C41212 =
        (3 * (C91005 + C91423 * C90756) +
         C90570 *
             (2 * C90570 * C91423 +
              C90570 * (C91423 + (be * C90496 + C90526 * std::pow(C90410, 7) *
                                                    bs[7] * C90532) *
                                     C90756))) /
        C90099;
    const double C71923 =
        (4 * (2 * C90570 * C90544 + C90570 * C91622) +
         C90570 * (3 * C91622 +
                   C90570 * (2 * C90570 * C90556 +
                             C90570 * (C90556 + std::pow(C90410, 7) * bs[7] *
                                                    C90532 * C90756)))) /
        C90099;
    const double C358 =
        (3 * (C90624 + be * C90627 + C90404 * C90635) +
         be * (2 * C90627 + C90404 * C90636) +
         C90404 * (2 * C90635 + be * C90636 +
                   C90404 * (C90631 + be * C90404 * C90632 +
                             C90404 * (be * C90632 +
                                       C90404 * C90478 * C90477 * C90619)))) /
        C90099;
    const double C1018 = (ae * (C90416 + C90404 * C90435 + C90425 * be) +
                          C90526 * (C90624 + be * C90627 + C90404 * C90635)) /
                         C90099;
    const double C1021 = (be * C90620 + C90404 * C90624 + ae * C90526 * C90435 +
                          C90526 * (ae * C90435 + C90526 * C90635)) /
                         C90099;
    const double C1599 =
        (C90570 * (C90624 + be * C90627 + C90404 * C90635)) / C90099;
    const double C1602 =
        (be * C90620 + C90404 * C90624 + C90635 * C90756) / C90099;
    const double C3592 =
        (ae * C90570 * C90435 + C90526 * C90570 * C90635) / C90099;
    const double C5145 =
        (3 * (C90624 + ae * C91020 + C90526 * C91023) +
         ae * (2 * C91020 + C90526 * C91024) +
         C90526 * (2 * C91023 + ae * C91024 +
                   C90526 * (C90631 + C90928 +
                             C90526 * (C90474 + C90526 * C90643)))) /
        C90099;
    const double C72048 = C92097 * C11197;
    const double C90651 = C90404 * C90649;
    const double C91027 = C90526 * C90649;
    const double C91215 = C90570 * C90649;
    const double C5980 = (ae * (C90435 + C90461 * C90756) +
                          C90526 * (C90635 + C90649 * C90756)) /
                         C90099;
    const double C11196 =
        (2 * C90570 * C90635 + C90570 * (C90635 + C90649 * C90756)) / C90099;
    const double C91439 = C90526 * C91437;
    const double C37437 =
        (2 * (ae * C91279 + C90526 * C91516) + ae * (C91024 + C91438 * C90756) +
         C90526 * (C91516 + ae * (C90925 + C90526 * C90493 * C90756) +
                   C90526 * (ae * (C90452 + C90493 * C90756) +
                             C90526 * (C90643 + std::pow(C90410, 7) * bs[7] *
                                                    C90619 * C90756)))) /
        C90099;
    const double C41397 =
        (ae * (3 * C91279 +
               C90570 * (2 * C90942 + C90570 * (C90452 + C90493 * C90756))) +
         C90526 * (3 * C91516 +
                   C90570 * (2 * C91535 +
                             C90570 * (C90643 + std::pow(C90410, 7) * bs[7] *
                                                    C90619 * C90756)))) /
        C90099;
    const double C44147 =
        (2 * C91213 + C90570 * C91516 + ae * (2 * C91570 + C90570 * C91576) +
         C90526 * (ae * (2 * C90942 + C90570 * (C90452 + C90493 * C90756)) +
                   C90526 * (2 * C91535 +
                             C90570 * (C90643 + std::pow(C90410, 7) * bs[7] *
                                                    C90619 * C90756)))) /
        C90099;
    const double C72039 =
        (4 * (2 * C91213 + C90570 * C91516) +
         C90570 * (3 * C91516 +
                   C90570 * (2 * C91535 +
                             C90570 * (C90643 + std::pow(C90410, 7) * bs[7] *
                                                    C90619 * C90756)))) /
        C90099;
    const double C91537 = C90945 + C91536;
    const double C6735 = C2128 - C2129;
    const double C6733 = C2129 - C2128;
    const double C5058 = C5045 - C5046;
    const double C276 =
        (3 * (C90581 + ae * C90584 + C90404 * C90592) +
         ae * (2 * C90584 + C90404 * C90593) +
         C90404 * (2 * C90592 + ae * C90593 +
                   C90404 * (C90588 + ae * C90404 * C90589 +
                             C90404 * (ae * C90589 +
                                       C90404 * C90478 * C90477 * C90576)))) /
        C90099;
    const double C952 =
        (C90526 * (C90581 + ae * C90584 + C90404 * C90592)) / C90099;
    const double C955 =
        (ae * C90577 + C90404 * C90581 + C90592 * C90658) / C90099;
    const double C1533 = (be * (C90417 + C90404 * C90436 + C90425 * ae) +
                          C90570 * (C90581 + ae * C90584 + C90404 * C90592)) /
                         C90099;
    const double C1536 = (ae * C90577 + C90404 * C90581 + be * C90570 * C90436 +
                          C90570 * (be * C90436 + C90570 * C90592)) /
                         C90099;
    const double C3518 =
        (be * C90526 * C90436 + C90570 * C90526 * C90592) / C90099;
    const double C11115 =
        (3 * (C90581 + be * C91243 + C90570 * C91246) +
         be * (2 * C91243 + C90570 * C91247) +
         C90570 * (2 * C91246 + be * C91247 +
                   C90570 * (C90588 + C90946 +
                             C90570 * (C90475 + C90570 * C90600)))) /
        C90099;
    const double C36866 = C5052 - C5051;
    const double C90608 = C90404 * C90606;
    const double C91250 = C90570 * C90606;
    const double C91384 = C90526 * C90606;
    const double C5035 =
        (2 * C90526 * C90592 + C90526 * (C90592 + C90606 * C90658)) / C90099;
    const double C5037 =
        (3 * (C90592 + C90606 * C90658) +
         C90526 *
             (2 * C90526 * C90606 +
              C90526 * (C90606 + (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576) *
                                     C90658))) /
        C90099;
    const double C5892 = (be * (C90436 + C90462 * C90658) +
                          C90570 * (C90592 + C90606 * C90658)) /
                         C90099;
    const double C36861 =
        (4 * (2 * C91382 + C90526 * C91431) +
         C90526 * (3 * C91431 +
                   C90526 * (2 * C90526 * C90600 +
                             C90526 * (C90600 + std::pow(C90410, 7) * bs[7] *
                                                    C90576 * C90658)))) /
        C90099;
    const double C44035 =
        (2 * (be * C91006 + C90570 * C91431) + be * (C91006 + C91424 * C90756) +
         C90570 * (C91431 + be * C90570 * C91424 +
                   C90570 * (be * C91424 +
                             C90570 * (C90600 + std::pow(C90410, 7) * bs[7] *
                                                    C90576 * C90658)))) /
        C90099;
    const double C91560 = C90929 + C91558;
    const double C91630 = C90570 * C91628;
    const double C513 = C508 - C509;
    const double C7074 = C2361 - C2362;
    const double C7073 = C2362 - C2361;
    const double C5343 = C5336 - C5337;
    const double C5331 =
        (3 * (C90684 + ae * C91089 + C90526 * C91092) +
         ae * (2 * C91089 + C90526 * C91093) +
         C90526 * (2 * C91092 + ae * C91093 +
                   C90526 * (C90687 + ae * C90526 * C90589 +
                             C90526 * (C90596 + C90526 * C90690)))) /
        C90099;
    const double C9018 =
        (2 * (ae * (C90570 * C90582 + C90424) + C90526 * C91222) +
         ae * (C90570 * C91093 + C91054 * be) +
         C90526 * (C91222 + ae * (C90570 * C90526 * C90589 + C91053) +
                   C90526 * (ae * (C90570 * C90589 + C90446) +
                             C90526 * (C90639 + C90570 * C90690)))) /
        C90099;
    const double C11419 =
        (2 * (be * C90620 + C90570 * C90684) + be * (C90620 + C90625 * C90756) +
         C90570 * (C90684 + be * C90570 * C90625 + C90570 * C91222)) /
        C90099;
    const double C11421 =
        (3 * (C90684 + be * C91265 + C90570 * C91222) +
         be * (2 * C91265 + C90570 * C91267) +
         C90570 * (2 * C91222 + be * C91267 +
                   C90570 * (C90687 + be * C90570 * C90632 +
                             C90570 * (C90639 + C90570 * C90690)))) /
        C90099;
    const double C15159 = C2364 - C2363;
    const double C17488 = C2363 - C2364;
    const double C500 =
        (4 * (2 * C90404 * C90687 + C90404 * C90692) +
         C90404 * (3 * C90692 +
                   C90404 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C1135 = (ae * (2 * C90584 + C90404 * C90593) +
                          C90526 * (2 * C90404 * C90687 + C90404 * C90692)) /
                         C90099;
    const double C1138 = (C90684 + C90687 * C90408 + ae * C90526 * C90593 +
                          C90526 * (ae * C90593 + C90526 * C90692)) /
                         C90099;
    const double C1716 = (be * (2 * C90627 + C90404 * C90636) +
                          C90570 * (2 * C90404 * C90687 + C90404 * C90692)) /
                         C90099;
    const double C1719 = (C90684 + C90687 * C90408 + be * C90570 * C90636 +
                          C90570 * (be * C90636 + C90570 * C90692)) /
                         C90099;
    const double C3733 = (ae * (C90570 * C90593 + C90454 * be) +
                          C90526 * (be * C90636 + C90570 * C90692)) /
                         C90099;
    const double C7071 =
        (2 * (ae * C90593 + C90526 * C90692) + ae * (C90593 + C90607 * C90658) +
         C90526 * (C90692 + ae * C90526 * C90607 +
                   C90526 * (ae * C90607 +
                             C90526 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C13314 =
        (2 * (be * C90636 + C90570 * C90692) + be * (C90636 + C90650 * C90756) +
         C90570 * (C90692 + be * C90570 * C90650 +
                   C90570 * (be * C90650 +
                             C90570 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C91100 = C90599 + C91098;
    const double C91225 = C90642 + C91224;
    const double C91489 = C90526 * C91487;
    const double C91526 = C90570 * C91524;
    const double C91547 = C90526 * C91524;
    const double C577 =
        (3 * (C90705 + be * C90708 + C90404 * C90716) +
         be * (2 * C90708 + C90404 * C90717) +
         C90404 * (2 * C90716 + be * C90717 +
                   C90404 * (C90712 + be * C90404 * C90713 +
                             C90404 * (be * C90713 +
                                       C90404 * C90478 * C90477 * C90700)))) /
        C90099;
    const double C1200 =
        (C90526 * (C90705 + be * C90708 + C90404 * C90716)) / C90099;
    const double C1203 =
        (be * C90701 + C90404 * C90705 + C90716 * C90658) / C90099;
    const double C1781 = (ae * (C90416 + C90404 * C90435 + C90425 * be) +
                          C90570 * (C90705 + be * C90708 + C90404 * C90716)) /
                         C90099;
    const double C1784 = (be * C90701 + C90404 * C90705 + ae * C90570 * C90435 +
                          C90570 * (ae * C90435 + C90570 * C90716)) /
                         C90099;
    const double C3806 =
        (ae * C90526 * C90435 + C90570 * C90526 * C90716) / C90099;
    const double C11503 =
        (3 * (C90705 + ae * C91275 + C90570 * C91278) +
         ae * (2 * C91275 + C90570 * C91279) +
         C90570 * (2 * C91278 + ae * C91279 +
                   C90570 * (C90712 + C90945 +
                             C90570 * (C90474 + C90570 * C90724)))) /
        C90099;
    const double C90732 = C90404 * C90730;
    const double C91282 = C90570 * C90730;
    const double C91395 = C90526 * C90730;
    const double C5422 =
        (2 * C90526 * C90716 + C90526 * (C90716 + C90730 * C90658)) / C90099;
    const double C5424 =
        (3 * (C90716 + C90730 * C90658) +
         C90526 *
             (2 * C90526 * C90730 +
              C90526 * (C90730 + (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700) *
                                     C90658))) /
        C90099;
    const double C6224 = (ae * (C90435 + C90461 * C90658) +
                          C90570 * (C90716 + C90730 * C90658)) /
                         C90099;
    const double C37102 =
        (4 * (2 * C91393 + C90526 * C91495) +
         C90526 * (3 * C91495 +
                   C90526 * (2 * C90526 * C90724 +
                             C90526 * (C90724 + std::pow(C90410, 7) * bs[7] *
                                                    C90700 * C90658)))) /
        C90099;
    const double C44485 =
        (2 * (ae * C91024 + C90570 * C91495) + ae * (C91024 + C91438 * C90756) +
         C90570 * (C91495 + ae * C90570 * C91438 +
                   C90570 * (ae * C91438 +
                             C90570 * (C90724 + std::pow(C90410, 7) * bs[7] *
                                                    C90700 * C90658)))) /
        C90099;
    const double C91575 = C90928 + C91573;
    const double C91647 = C90570 * C91645;
    const double C647 = C642 - C643;
    const double C13530 = C3195 - C3196;
    const double C13529 = C3196 - C3195;
    const double C11608 = C11601 - C11602;
    const double C5519 =
        (3 * (C90744 + be * C91110 + C90526 * C91113) +
         be * (2 * C91110 + C90526 * C91114) +
         C90526 * (2 * C91113 + be * C91114 +
                   C90526 * (C90747 + be * C90526 * C90713 +
                             C90526 * (C90720 + C90526 * C90750)))) /
        C90099;
    const double C6303 = (ae * (C90533 + C90526 * C91042 + C91040 * be) +
                          C90570 * (C90744 + be * C91110 + C90526 * C91113)) /
                         C90099;
    const double C6305 = (be * C90701 + C90526 * C90744 + ae * C90570 * C91042 +
                          C90570 * (ae * C91042 + C90570 * C91113)) /
                         C90099;
    const double C14515 =
        (2 * (ae * C91042 + C90570 * C91113) + ae * (C91042 + C91052 * C90756) +
         C90570 *
             (C91113 + ae * C90570 * C91052 +
              C90570 * (ae * C91052 + C90570 * (C90720 + C90526 * C90750)))) /
        C90099;
    const double C11596 =
        (3 * (C90744 + ae * C91289 + C90570 * C91292) +
         ae * (2 * C91289 + C90570 * C91293) +
         C90570 * (2 * C91292 + ae * C91293 +
                   C90570 * (C90747 + ae * C90570 * C90545 +
                             C90570 * (C90552 + C90570 * C90750)))) /
        C90099;
    const double C20322 = C3198 - C3197;
    const double C23662 = C3197 - C3198;
    const double C634 =
        (4 * (2 * C90404 * C90747 + C90404 * C90752) +
         C90404 * (3 * C90752 +
                   C90404 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C1259 = (be * (2 * C90708 + C90404 * C90717) +
                          C90526 * (2 * C90404 * C90747 + C90404 * C90752)) /
                         C90099;
    const double C1262 = (C90744 + C90747 * C90408 + be * C90526 * C90717 +
                          C90526 * (be * C90717 + C90526 * C90752)) /
                         C90099;
    const double C1840 = (ae * (2 * C90540 + C90404 * C90549) +
                          C90570 * (2 * C90404 * C90747 + C90404 * C90752)) /
                         C90099;
    const double C1843 = (C90744 + C90747 * C90408 + ae * C90570 * C90549 +
                          C90570 * (ae * C90549 + C90570 * C90752)) /
                         C90099;
    const double C3877 = (ae * (C90526 * C90549 + C90454 * be) +
                          C90570 * (be * C90717 + C90526 * C90752)) /
                         C90099;
    const double C7281 =
        (2 * (be * C90717 + C90526 * C90752) + be * (C90717 + C90731 * C90658) +
         C90526 * (C90752 + be * C90526 * C90731 +
                   C90526 * (be * C90731 +
                             C90526 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C13527 =
        (2 * (ae * C90549 + C90570 * C90752) + ae * (C90549 + C90563 * C90756) +
         C90570 * (C90752 + ae * C90570 * C90563 +
                   C90570 * (ae * C90563 +
                             C90570 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C91121 = C90723 + C91119;
    const double C91298 = C90555 + C91296;
    const double C91504 = C90526 * C91502;
    const double C91579 = C90570 * C91502;
    const double C91658 = C90570 * C91656;
    const double C45562 = C90114 * C807;
    const double C45560 = C90114 * C806;
    const double C45847 = C90114 * C4814;
    const double C45844 = C90114 * C1013;
    const double C45840 = C90114 * C799;
    const double C45836 = C90114 * C1009;
    const double C45832 = C90114 * C796;
    const double C46092 = C90114 * C5418;
    const double C46089 = C90114 * C1195;
    const double C46084 = C90114 * C1191;
    const double C47355 = C90114 * C800;
    const double C47351 = C90114 * C1010;
    const double C47347 = C90114 * C795;
    const double C47678 = C90114 * C1192;
    const double C49243 = C90114 * C5701;
    const double C49239 = C90114 * C3588;
    const double C49235 = C90114 * C3358;
    const double C49549 = C90114 * C6218;
    const double C49545 = C90114 * C3802;
    const double C51615 = C90114 * C1388;
    const double C51613 = C90114 * C1387;
    const double C51963 = C90114 * C5704;
    const double C51959 = C90114 * C1594;
    const double C51955 = C90114 * C1380;
    const double C51952 = C90114 * C1590;
    const double C51948 = C90114 * C1377;
    const double C52269 = C90114 * C1776;
    const double C52266 = C90114 * C1772;
    const double C53015 = C90114 * C3359;
    const double C54245 = C90114 * C1591;
    const double C54241 = C90114 * C1376;
    const double C54641 = C90114 * C1773;
    const double C82089 = C90114 * C11192;
    const double C82085 = C90114 * C10867;
    const double C83821 = C90114 * C1381;
    const double C106 =
        (C90114 / C90100 - (0 * be) / C90095) / C90100 + (0 * ae) / C90095;
    const double C14704 = C90114 / C90100 - (0 * be) / C90095;
    const double C31258 = C90114 / C90100 + (0 * ae) / C90095;
    const double C90116 = C90113 / C90095;
    const double C4837 = C4030 * C807;
    const double C4835 = C4030 * C806;
    const double C5166 = C4030 * C4814;
    const double C5163 = C4030 * C1013;
    const double C5159 = C4030 * C799;
    const double C5155 = C4030 * C1009;
    const double C5151 = C4030 * C796;
    const double C5437 = C4030 * C5418;
    const double C5434 = C4030 * C1195;
    const double C5429 = C4030 * C1191;
    const double C6848 = C4030 * C800;
    const double C6844 = C4030 * C1010;
    const double C6840 = C4030 * C795;
    const double C7178 = C4030 * C1192;
    const double C8815 = C4030 * C5701;
    const double C8811 = C4030 * C3588;
    const double C8807 = C4030 * C3358;
    const double C9133 = C4030 * C6218;
    const double C9129 = C4030 * C3802;
    const double C10890 = C4030 * C1388;
    const double C10888 = C4030 * C1387;
    const double C11222 = C4030 * C11192;
    const double C11218 = C4030 * C10867;
    const double C11215 = C4030 * C1594;
    const double C11211 = C4030 * C1380;
    const double C11207 = C4030 * C1590;
    const double C11203 = C4030 * C1377;
    const double C11513 = C4030 * C1776;
    const double C11509 = C4030 * C1772;
    const double C13108 = C4030 * C1381;
    const double C13104 = C4030 * C1591;
    const double C13100 = C4030 * C1376;
    const double C13424 = C4030 * C1773;
    const double C14088 = C4030 * C5704;
    const double C28032 = C4030 * C3359;
    const double C36737 = C36262 * C4821;
    const double C36735 = C36262 * C4820;
    const double C36733 = C36262 * C811;
    const double C36731 = C36262 * C810;
    const double C36729 = C36262 * C809;
    const double C36727 = C36262 * C808;
    const double C36939 = C36262 * C4816;
    const double C36936 = C36262 * C4815;
    const double C36934 = C36262 * C1012;
    const double C36932 = C36262 * C798;
    const double C36930 = C36262 * C1008;
    const double C36928 = C36262 * C797;
    const double C37111 = C36262 * C5417;
    const double C37108 = C36262 * C1194;
    const double C37105 = C36262 * C1190;
    const double C37763 = C36262 * C807;
    const double C37761 = C36262 * C806;
    const double C37991 = C36262 * C4814;
    const double C37989 = C36262 * C1013;
    const double C37987 = C36262 * C799;
    const double C37985 = C36262 * C1009;
    const double C37983 = C36262 * C796;
    const double C38197 = C36262 * C5418;
    const double C38195 = C36262 * C1195;
    const double C38193 = C36262 * C1191;
    const double C39005 = C36262 * C3362;
    const double C39003 = C36262 * C3361;
    const double C39001 = C36262 * C5710;
    const double C38999 = C36262 * C5709;
    const double C39235 = C36262 * C8454;
    const double C39231 = C36262 * C5702;
    const double C39229 = C36262 * C3587;
    const double C39227 = C36262 * C3357;
    const double C39445 = C36262 * C6217;
    const double C39443 = C36262 * C3801;
    const double C40334 = C36262 * C5712;
    const double C40332 = C36262 * C5711;
    const double C40600 = C36262 * C5705;
    const double C40597 = C36262 * C5703;
    const double C40839 = C36262 * C6219;
    const double C41124 = C36262 * C10874;
    const double C41122 = C36262 * C10873;
    const double C41120 = C36262 * C13752;
    const double C41118 = C36262 * C13751;
    const double C41116 = C36262 * C1392;
    const double C41114 = C36262 * C1391;
    const double C41112 = C36262 * C1390;
    const double C41110 = C36262 * C1389;
    const double C41413 = C36262 * C13749;
    const double C41411 = C36262 * C11191;
    const double C41409 = C36262 * C10868;
    const double C41406 = C36262 * C1593;
    const double C41404 = C36262 * C1379;
    const double C41402 = C36262 * C1589;
    const double C41400 = C36262 * C1378;
    const double C41699 = C36262 * C1775;
    const double C41697 = C36262 * C1771;
    const double C42284 = C36262 * C5704;
    const double C42282 = C36262 * C3588;
    const double C42280 = C36262 * C3358;
    const double C42582 = C36262 * C3802;
    const double C42882 = C36262 * C1388;
    const double C42880 = C36262 * C1387;
    const double C43202 = C36262 * C1594;
    const double C43200 = C36262 * C1380;
    const double C43198 = C36262 * C1590;
    const double C43196 = C36262 * C1377;
    const double C43514 = C36262 * C1776;
    const double C43512 = C36262 * C1772;
    const double C58634 = C36262 * C5701;
    const double C58932 = C36262 * C6218;
    const double C72045 = C36262 * C10869;
    const double C73193 = C36262 * C11192;
    const double C73191 = C36262 * C10867;
    const double C92357 = C92318 - C92343;
    const double C92358 = C92322 - C92345;
    const double C4834 = C4023 * C821;
    const double C5169 = C4023 * C5143;
    const double C5165 = C4023 * C4820;
    const double C5160 = C4023 * C1020;
    const double C5156 = C4023 * C810;
    const double C5152 = C4023 * C1016;
    const double C5148 = C4023 * C808;
    const double C5436 = C4023 * C5421;
    const double C5431 = C4023 * C1202;
    const double C5426 = C4023 * C1198;
    const double C6843 = C4023 * C1017;
    const double C6839 = C4023 * C806;
    const double C7177 = C4023 * C1199;
    const double C8818 = C4023 * C5977;
    const double C8814 = C4023 * C5709;
    const double C8810 = C4023 * C3591;
    const double C8806 = C4023 * C3361;
    const double C9132 = C4023 * C6223;
    const double C9128 = C4023 * C3805;
    const double C10887 = C4023 * C1402;
    const double C11221 = C4023 * C11195;
    const double C11217 = C4023 * C10873;
    const double C11212 = C4023 * C1601;
    const double C11208 = C4023 * C1391;
    const double C11204 = C4023 * C1597;
    const double C11200 = C4023 * C1389;
    const double C11515 = C4023 * C11501;
    const double C11510 = C4023 * C1783;
    const double C11506 = C4023 * C1779;
    const double C13103 = C4023 * C1598;
    const double C13099 = C4023 * C1387;
    const double C13423 = C4023 * C1780;
    const double C14091 = C4023 * C5979;
    const double C14087 = C4023 * C5711;
    const double C14415 = C4023 * C6225;
    const double C90185 = C90184 / C90095;
    const double C31355 = C31335 * C794;
    const double C31348 = C31335 * C795;
    const double C31344 = C31335 * C807;
    const double C31340 = C31335 * C796;
    const double C31605 = C31335 * C1010;
    const double C31603 = C31335 * C878;
    const double C31597 = C31335 * C1009;
    const double C31595 = C31335 * C877;
    const double C31871 = C31335 * C1192;
    const double C31866 = C31335 * C1191;
    const double C33599 = C31335 * C800;
    const double C33591 = C31335 * C799;
    const double C33921 = C31335 * C1013;
    const double C33919 = C31335 * C881;
    const double C34241 = C31335 * C1195;
    const double C34555 = C31335 * C3359;
    const double C34547 = C31335 * C3358;
    const double C34865 = C31335 * C3588;
    const double C34863 = C31335 * C3440;
    const double C35179 = C31335 * C3802;
    const double C41236 = C31335 * C13752;
    const double C41232 = C31335 * C13749;
    const double C41229 = C31335 * C5712;
    const double C41225 = C31335 * C5703;
    const double C41221 = C31335 * C3362;
    const double C41217 = C31335 * C3357;
    const double C41507 = C31335 * C3587;
    const double C41505 = C31335 * C3439;
    const double C41788 = C31335 * C6219;
    const double C41784 = C31335 * C3801;
    const double C42994 = C31335 * C5704;
    const double C43931 = C31335 * C5705;
    const double C43927 = C31335 * C5710;
    const double C43923 = C31335 * C5702;
    const double C44591 = C31335 * C6217;
    const double C52747 = C31335 * C5701;
    const double C53561 = C31335 * C6218;
    const double C36317 =
        (C90288 / C90100 - (0 * be) / C90095) / C90100 + (0 * ae) / C90095;
    const double C44875 = C90288 / C90100 - (0 * be) / C90095;
    const double C14808 = C14793 - C14794;
    const double C15326 = C15319 - C15320;
    const double C438 = C434 - C420;
    const double C11333 = C11329 - C11313;
    const double C92359 = C92330 - C92352;
    const double C4128 = C4106 * C119;
    const double C4122 = C4106 * C110;
    const double C4117 = C4106 * C117;
    const double C4111 = C4106 * C109;
    const double C4389 = C4106 * C350;
    const double C4387 = C4106 * C185;
    const double C4369 = C4106 * C349;
    const double C4367 = C4106 * C184;
    const double C4641 = C4106 * C569;
    const double C4636 = C4106 * C568;
    const double C6626 = C4106 * C807;
    const double C6620 = C4106 * C796;
    const double C6963 = C4106 * C1009;
    const double C6961 = C4106 * C877;
    const double C7283 = C4106 * C1191;
    const double C7599 = C4106 * C1388;
    const double C7593 = C4106 * C1377;
    const double C7922 = C4106 * C1590;
    const double C7920 = C4106 * C1458;
    const double C8235 = C4106 * C1772;
    const double C67551 = C4106 * C1392;
    const double C67545 = C4106 * C1379;
    const double C67540 = C4106 * C1390;
    const double C67534 = C4106 * C1378;
    const double C67801 = C4106 * C1593;
    const double C67799 = C4106 * C1461;
    const double C67781 = C4106 * C1589;
    const double C67779 = C4106 * C1457;
    const double C68049 = C4106 * C1775;
    const double C68044 = C4106 * C1771;
    const double C70129 = C4106 * C3362;
    const double C70123 = C4106 * C3357;
    const double C70447 = C4106 * C3587;
    const double C70445 = C4106 * C3439;
    const double C70768 = C4106 * C3801;
    const double C92360 = C92337 - C92353;
    const double C31358 = C31252 * C192;
    const double C31354 = C31252 * C186;
    const double C31349 = C31252 * C191;
    const double C31345 = C31252 * C185;
    const double C31341 = C31252 * C190;
    const double C31337 = C31252 * C184;
    const double C31602 = C31252 * C413;
    const double C31594 = C31252 * C412;
    const double C31873 = C31252 * C632;
    const double C31868 = C31252 * C631;
    const double C31863 = C31252 * C630;
    const double C33598 = C31252 * C878;
    const double C33594 = C31252 * C885;
    const double C33590 = C31252 * C877;
    const double C34244 = C31252 * C1258;
    const double C34240 = C31252 * C1257;
    const double C34554 = C31252 * C1459;
    const double C34550 = C31252 * C1466;
    const double C34546 = C31252 * C1458;
    const double C35182 = C31252 * C1839;
    const double C35178 = C31252 * C1838;
    const double C41235 = C31252 * C11004;
    const double C41231 = C31252 * C11000;
    const double C41226 = C31252 * C1469;
    const double C41222 = C31252 * C1461;
    const double C41218 = C31252 * C1465;
    const double C41214 = C31252 * C1457;
    const double C41504 = C31252 * C1658;
    const double C41790 = C31252 * C11594;
    const double C41785 = C31252 * C1841;
    const double C41781 = C31252 * C1837;
    const double C42993 = C31252 * C1462;
    const double C43615 = C31252 * C1842;
    const double C43926 = C31252 * C3443;
    const double C43922 = C31252 * C3439;
    const double C44590 = C31252 * C3875;
    const double C52746 = C31252 * C3440;
    const double C53560 = C31252 * C3876;
    const double C90211 = C90210 / C90095;
    const double C61210 = C61190 * C1375;
    const double C61203 = C61190 * C1376;
    const double C61199 = C61190 * C1388;
    const double C61195 = C61190 * C1377;
    const double C61452 = C61190 * C1591;
    const double C61447 = C61190 * C1590;
    const double C61707 = C61190 * C1773;
    const double C61705 = C61190 * C1525;
    const double C61699 = C61190 * C1772;
    const double C61697 = C61190 * C1524;
    const double C63457 = C61190 * C3359;
    const double C63449 = C61190 * C3358;
    const double C63759 = C61190 * C3588;
    const double C64069 = C61190 * C3802;
    const double C64067 = C61190 * C3514;
    const double C64412 = C61190 * C1381;
    const double C64404 = C61190 * C1380;
    const double C64729 = C61190 * C1594;
    const double C65045 = C61190 * C1776;
    const double C65043 = C61190 * C1528;
    const double C66861 = C61190 * C8454;
    const double C66858 = C61190 * C5710;
    const double C66854 = C61190 * C5702;
    const double C66850 = C61190 * C3362;
    const double C66846 = C61190 * C3357;
    const double C67101 = C61190 * C3587;
    const double C67356 = C61190 * C6217;
    const double C67354 = C61190 * C5885;
    const double C67348 = C61190 * C3801;
    const double C67346 = C61190 * C3513;
    const double C68429 = C61190 * C5701;
    const double C69033 = C61190 * C6218;
    const double C69031 = C61190 * C5886;
    const double C70243 = C61190 * C5705;
    const double C70239 = C61190 * C5712;
    const double C70235 = C61190 * C5703;
    const double C70882 = C61190 * C6219;
    const double C70880 = C61190 * C5887;
    const double C78368 = C61190 * C5704;
    const double C71056 =
        (C90359 / C90100 - (0 * be) / C90095) / C90100 + (0 * ae) / C90095;
    const double C80568 = C90359 / C90100 - (0 * be) / C90095;
    const double C19926 = C19911 - C19912;
    const double C20167 = C20160 - C20161;
    const double C56997 = C25865 - C25864;
    const double C56995 = C25861 - C25860;
    const double C729 = C725 - C711;
    const double C5620 = C5616 - C5602;
    const double C92361 = C92332 - C92355;
    const double C9603 = C9581 * C119;
    const double C9597 = C9581 * C110;
    const double C9592 = C9581 * C117;
    const double C9586 = C9581 * C109;
    const double C9851 = C9581 * C350;
    const double C9846 = C9581 * C349;
    const double C10108 = C9581 * C569;
    const double C10106 = C9581 * C268;
    const double C10088 = C9581 * C568;
    const double C10086 = C9581 * C267;
    const double C12003 = C9581 * C807;
    const double C11997 = C9581 * C796;
    const double C12321 = C9581 * C1009;
    const double C12639 = C9581 * C1191;
    const double C12637 = C9581 * C943;
    const double C12992 = C9581 * C1388;
    const double C12986 = C9581 * C1377;
    const double C13316 = C9581 * C1590;
    const double C13641 = C9581 * C1772;
    const double C13639 = C9581 * C1524;
    const double C40516 = C9581 * C811;
    const double C40510 = C9581 * C798;
    const double C40505 = C9581 * C809;
    const double C40499 = C9581 * C797;
    const double C40758 = C9581 * C1012;
    const double C40753 = C9581 * C1008;
    const double C41012 = C9581 * C1194;
    const double C41010 = C9581 * C946;
    const double C40992 = C9581 * C1190;
    const double C40990 = C9581 * C942;
    const double C44043 = C9581 * C3362;
    const double C44037 = C9581 * C3357;
    const double C44381 = C9581 * C3587;
    const double C44706 = C9581 * C3801;
    const double C44704 = C9581 * C3513;
    const double C92362 = C92341 - C92356;
    const double C61213 = C61039 * C275;
    const double C61209 = C61039 * C269;
    const double C61204 = C61039 * C274;
    const double C61200 = C61039 * C268;
    const double C61196 = C61039 * C273;
    const double C61192 = C61039 * C267;
    const double C61454 = C61039 * C498;
    const double C61449 = C61039 * C497;
    const double C61444 = C61039 * C496;
    const double C61704 = C61039 * C704;
    const double C61696 = C61039 * C703;
    const double C63456 = C61039 * C944;
    const double C63452 = C61039 * C951;
    const double C63448 = C61039 * C943;
    const double C63762 = C61039 * C1134;
    const double C63758 = C61039 * C1133;
    const double C64411 = C61039 * C1525;
    const double C64407 = C61039 * C1532;
    const double C64403 = C61039 * C1524;
    const double C64732 = C61039 * C1715;
    const double C64728 = C61039 * C1714;
    const double C66864 = C61039 * C5034;
    const double C66860 = C61039 * C5030;
    const double C66855 = C61039 * C954;
    const double C66851 = C61039 * C946;
    const double C66847 = C61039 * C950;
    const double C66843 = C61039 * C942;
    const double C67107 = C61039 * C5329;
    const double C67102 = C61039 * C1136;
    const double C67098 = C61039 * C1132;
    const double C67345 = C61039 * C1317;
    const double C68428 = C61039 * C947;
    const double C68730 = C61039 * C1137;
    const double C70246 = C61039 * C5891;
    const double C70242 = C61039 * C5885;
    const double C70238 = C61039 * C3517;
    const double C70234 = C61039 * C3513;
    const double C70569 = C61039 * C6137;
    const double C70565 = C61039 * C3731;
    const double C78367 = C61039 * C3514;
    const double C78765 = C61039 * C3732;
    const double C207 = C182 * C121;
    const double C290 = C265 * C121;
    const double C2052 = C182 * C805;
    const double C2132 = C265 * C805;
    const double C4130 = C4107 * C805;
    const double C6498 = C4030 * C805;
    const double C14798 = C14781 * C805;
    const double C31352 = C31335 * C805;
    const double C47017 = C90114 * C805;
    const double C4121 = C4108 * C813;
    const double C4211 = C265 * C813;
    const double C4845 = C4030 * C813;
    const double C6628 = C4107 * C813;
    const double C17044 = C14781 * C813;
    const double C33595 = C31335 * C813;
    const double C37767 = C36262 * C813;
    const double C45570 = C90114 * C813;
    const double C2745 = C182 * C1386;
    const double C2825 = C265 * C1386;
    const double C9605 = C9582 * C1386;
    const double C12758 = C4030 * C1386;
    const double C19916 = C19899 * C1386;
    const double C53829 = C90114 * C1386;
    const double C61207 = C61190 * C1386;
    const double C9503 = C182 * C1394;
    const double C9596 = C9583 * C1394;
    const double C10898 = C4030 * C1394;
    const double C12994 = C9582 * C1394;
    const double C23133 = C19899 * C1394;
    const double C42886 = C36262 * C1394;
    const double C51627 = C90114 * C1394;
    const double C64408 = C61190 * C1394;
    const double C7601 = C4107 * C3364;
    const double C7707 = C265 * C3364;
    const double C8473 = C4030 * C3364;
    const double C11891 = C182 * C3364;
    const double C12005 = C9582 * C3364;
    const double C18003 = C14781 * C3364;
    const double C22167 = C19899 * C3364;
    const double C34551 = C31335 * C3364;
    const double C41972 = C36262 * C3364;
    const double C48921 = C90114 * C3364;
    const double C63453 = C61190 * C3364;
    const double C5339 = C265 * C5139;
    const double C36938 = C36262 * C5139;
    const double C9023 = C265 * C5971;
    const double C26174 = C19899 * C5971;
    const double C30620 = C14781 * C5971;
    const double C39233 = C36262 * C5971;
    const double C40760 = C9582 * C5971;
    const double C44260 = C31335 * C5971;
    const double C67105 = C61190 * C5971;
    const double C67789 = C4108 * C5971;
    const double C70451 = C4107 * C5971;
    const double C14201 = C182 * C5973;
    const double C27048 = C14781 * C5973;
    const double C30760 = C19899 * C5973;
    const double C40599 = C36262 * C5973;
    const double C40757 = C9583 * C5973;
    const double C41515 = C31335 * C5973;
    const double C44383 = C9582 * C5973;
    const double C67797 = C4107 * C5973;
    const double C70566 = C61190 * C5973;
    const double C11604 = C182 * C11497;
    const double C41701 = C36262 * C11497;
    const double C5338 = C4483 - C4484;
    const double C7075 = C4484 - C4483;
    const double C11603 = C10005 - C10006;
    const double C13531 = C10006 - C10005;
    const double C28315 = C22480 - C22481;
    const double C28313 = C22481 - C22480;
    const double C29787 = C18637 - C18638;
    const double C29785 = C18638 - C18637;
    const double C5047 = C4208 - C4209;
    const double C6736 = C4209 - C4208;
    const double C4733 = C4723 - C4724;
    const double C11017 = C9500 - C9501;
    const double C12884 = C9501 - C9500;
    const double C9765 = C9757 - C9758;
    const double C8350 = C8344 - C8345;
    const double C12217 = C12212 - C12213;
    const double C28983 = C17999 - C18000;
    const double C28979 = C18000 - C17999;
    const double C27893 = C22163 - C22164;
    const double C27889 = C22164 - C22163;
    const double C6496 = C4030 * C804;
    const double C6841 = C92102 * C804;
    const double C15753 = C14697 * C804;
    const double C32304 = C31251 * C804;
    const double C33804 = C31250 * C804;
    const double C47015 = C90114 * C804;
    const double C47348 = C92102 * C804;
    const double C4843 = C4030 * C812;
    const double C5158 = C92102 * C812;
    const double C6847 = C4023 * C812;
    const double C32315 = C31250 * C812;
    const double C37765 = C36262 * C812;
    const double C37988 = C92097 * C812;
    const double C45568 = C90114 * C812;
    const double C45839 = C92102 * C812;
    const double C47354 = C92320 * C812;
    const double C12756 = C4030 * C1385;
    const double C13101 = C92102 * C1385;
    const double C21455 = C14697 * C1385;
    const double C53827 = C90114 * C1385;
    const double C54242 = C92102 * C1385;
    const double C62745 = C31251 * C1385;
    const double C64519 = C31250 * C1385;
    const double C10896 = C4030 * C1393;
    const double C11210 = C92102 * C1393;
    const double C13107 = C4023 * C1393;
    const double C42884 = C36262 * C1393;
    const double C43201 = C92097 * C1393;
    const double C51625 = C90114 * C1393;
    const double C51956 = C92102 * C1393;
    const double C62756 = C31250 * C1393;
    const double C83820 = C92320 * C1393;
    const double C8471 = C4030 * C3363;
    const double C8808 = C92102 * C3363;
    const double C28031 = C4023 * C3363;
    const double C35703 = C31250 * C3363;
    const double C41970 = C36262 * C3363;
    const double C42281 = C92097 * C3363;
    const double C48919 = C90114 * C3363;
    const double C49236 = C92102 * C3363;
    const double C53014 = C92320 * C3363;
    const double C30199 = C92226 * C5799;
    const double C30618 = C14781 * C5799;
    const double C43924 = C92226 * C5799;
    const double C44258 = C31335 * C5799;
    const double C57639 = C44794 * C5799;
    const double C67537 = C4027 * C5799;
    const double C67787 = C4108 * C5799;
    const double C70126 = C4026 * C5799;
    const double C70449 = C4107 * C5799;
    const double C13879 = C92177 * C5801;
    const double C14199 = C182 * C5801;
    const double C26723 = C92226 * C5801;
    const double C27046 = C14781 * C5801;
    const double C41224 = C92226 * C5801;
    const double C41513 = C31335 * C5801;
    const double C43930 = C31252 * C5801;
    const double C67548 = C4026 * C5801;
    const double C67795 = C4107 * C5801;
    const double C89334 = C92333 * C5801;
    const double C4838 = C92102 * C820;
    const double C6495 = C4023 * C820;
    const double C32043 = C31250 * C820;
    const double C33473 = C31249 * C820;
    const double C37764 = C92097 * C820;
    const double C45563 = C92102 * C820;
    const double C47014 = C92320 * C820;
    const double C4842 = C4023 * C822;
    const double C32059 = C31249 * C822;
    const double C36734 = C92097 * C822;
    const double C45567 = C92320 * C822;
    const double C10891 = C92102 * C1401;
    const double C12755 = C4023 * C1401;
    const double C42883 = C92097 * C1401;
    const double C51616 = C92102 * C1401;
    const double C53826 = C92320 * C1401;
    const double C62484 = C31250 * C1401;
    const double C64188 = C31249 * C1401;
    const double C10895 = C4023 * C1403;
    const double C41117 = C92097 * C1403;
    const double C51632 = C92320 * C1403;
    const double C62500 = C31249 * C1403;
    const double C8478 = C4023 * C3369;
    const double C35396 = C31249 * C3369;
    const double C39006 = C92097 * C3369;
    const double C48926 = C92320 * C3369;
    const double C429 = C92177 * C414;
    const double C15062 = C92333 * C414;
    const double C31614 = C31252 * C414;
    const double C2284 = C92177 * C1076;
    const double C4374 = C4026 * C1076;
    const double C6964 = C4025 * C1076;
    const double C15046 = C92226 * C1076;
    const double C17377 = C92333 * C1076;
    const double C31598 = C92226 * C1076;
    const double C33926 = C31252 * C1076;
    const double C2977 = C92177 * C1657;
    const double C7923 = C4025 * C1657;
    const double C18326 = C92333 * C1657;
    const double C34870 = C31252 * C1657;
    const double C11319 = C92177 * C1659;
    const double C27053 = C92333 * C1659;
    const double C41512 = C31252 * C1659;
    const double C67802 = C4025 * C1659;
    const double C14197 = C92177 * C3661;
    const double C27037 = C92226 * C3661;
    const double C30617 = C92333 * C3661;
    const double C41508 = C92226 * C3661;
    const double C44257 = C31252 * C3661;
    const double C67786 = C4026 * C3661;
    const double C70448 = C4025 * C3661;
    const double C720 = C92188 * C705;
    const double C20426 = C92334 * C705;
    const double C61716 = C61039 * C705;
    const double C2586 = C92188 * C1316;
    const double C12640 = C9422 * C1316;
    const double C22797 = C92334 * C1316;
    const double C64074 = C61039 * C1316;
    const double C5607 = C92188 * C1318;
    const double C26497 = C92334 * C1318;
    const double C41013 = C9422 * C1318;
    const double C67353 = C61039 * C1318;
    const double C3279 = C92188 * C1897;
    const double C10093 = C9423 * C1897;
    const double C13642 = C9422 * C1897;
    const double C20410 = C92252 * C1897;
    const double C23776 = C92334 * C1897;
    const double C61700 = C92252 * C1897;
    const double C65050 = C61039 * C1897;
    const double C9342 = C92188 * C3945;
    const double C26481 = C92252 * C3945;
    const double C31169 = C92334 * C3945;
    const double C40997 = C9423 * C3945;
    const double C44707 = C9422 * C3945;
    const double C67349 = C92252 * C3945;
    const double C70887 = C61039 * C3945;
    const double C638 = C212 * C265;
    const double C439 = C435 - C424;
    const double C641 = C214 * C265;
    const double C440 = C436 - C428;
    const double C2290 = C2287 - C2283;
    const double C2289 = C2286 - C2279;
    const double C2983 = C2980 - C2976;
    const double C20321 = C19823 * C19899;
    const double C61612 = C19823 * C61190;
    const double C2982 = C2979 - C2972;
    const double C71925 = C11027 * C36262;
    const double C11334 = C11330 - C11318;
    const double C14206 = C14204 - C14196;
    const double C71934 = C71927 * C36262;
    const double C11336 = C11332 - C11327;
    const double C504 = C295 * C182;
    const double C730 = C726 - C715;
    const double C507 = C297 * C182;
    const double C731 = C727 - C719;
    const double C2592 = C2589 - C2585;
    const double C15158 = C14887 * C14781;
    const double C31710 = C14887 * C31335;
    const double C2591 = C2588 - C2581;
    const double C36863 = C5057 * C36262;
    const double C5621 = C5617 - C5606;
    const double C3285 = C3282 - C3278;
    const double C3284 = C3281 - C3274;
    const double C9346 = C9344 - C9341;
    const double C36872 = C36865 * C36262;
    const double C5623 = C5619 - C5614;
    const double C9345 = C9343 - C9337;
    const double C514 = C512 * C92177;
    const double C15157 = C512 * C92333;
    const double C31709 = C512 * C31252;
    const double C648 = C646 * C92188;
    const double C20320 = C646 * C92334;
    const double C61611 = C646 * C61039;
    const double C90468 = C90430 + C90465;
    const double C4953 =
        (2 * (be * C90436 + C90526 * C90548) + be * (C90436 + C90462 * C90658) +
         C90526 * (C90548 + be * C90526 * C90462 +
                   C90526 * (C90473 + C90526 * C90562))) /
        C90099;
    const double C11114 =
        (2 * (be * C90436 + C90570 * C90592) + be * (C90436 + C90462 * C90756) +
         C90570 * (C90592 + be * C90570 * C90462 +
                   C90570 * (C90473 + C90570 * C90606))) /
        C90099;
    const double C5894 = (C90526 * C90592 + be * C90570 * C91008 +
                          C90570 * (be * C91008 + C90570 * C90526 * C90606)) /
                         C90099;
    const double C5714 = (C90526 * C90436 + C91008 * C90756) / C90095;
    const double C4849 = C4030 * C4819;
    const double C5055 = C265 * C4819;
    const double C6630 = C4108 * C4819;
    const double C37771 = C36262 * C4819;
    const double C45574 = C90114 * C4819;
    const double C7603 = C4108 * C5708;
    const double C7711 = C265 * C5708;
    const double C8465 = C4030 * C5708;
    const double C25872 = C19899 * C5708;
    const double C27756 = C14781 * C5708;
    const double C48913 = C90114 * C5708;
    const double C52751 = C31335 * C5708;
    const double C58334 = C36262 * C5708;
    const double C68433 = C61190 * C5708;
    const double C10902 = C4030 * C10872;
    const double C11025 = C182 * C10872;
    const double C12996 = C9583 * C10872;
    const double C72988 = C36262 * C10872;
    const double C81838 = C90114 * C10872;
    const double C44048 = C9424 * C13981;
    const double C89450 = C80417 * C13981;
    const double C40521 = C9424 * C5895;
    const double C60329 = C92252 * C5895;
    const double C70248 = C92252 * C5895;
    const double C86155 = C80417 * C5895;
    const double C39158 = C92188 * C8692;
    const double C57005 = C92252 * C8692;
    const double C66866 = C92252 * C8692;
    const double C36741 = C36262 * C4823;
    const double C36869 = C265 * C4823;
    const double C40338 = C36262 * C5716;
    const double C40520 = C9583 * C5716;
    const double C43935 = C31335 * C5716;
    const double C60328 = C19899 * C5716;
    const double C67555 = C4108 * C5716;
    const double C70247 = C61190 * C5716;
    const double C89339 = C14781 * C5716;
    const double C38997 = C36262 * C8457;
    const double C39157 = C265 * C8457;
    const double C57004 = C19899 * C8457;
    const double C66865 = C61190 * C8457;
    const double C70133 = C4108 * C8457;
    const double C71868 = C36262 * C10876;
    const double C71931 = C182 * C10876;
    const double C90467 = C90429 + C90464;
    const double C90482 = C90460 + C90472;
    const double C5144 =
        (2 * (ae * C90435 + C90526 * C90635) + ae * (C90435 + C90461 * C90658) +
         C90526 * (C90635 + ae * C90526 * C90461 +
                   C90526 * (C90472 + C90526 * C90649))) /
        C90099;
    const double C11502 =
        (2 * (ae * C90435 + C90570 * C90716) + ae * (C90435 + C90461 * C90756) +
         C90570 * (C90716 + ae * C90570 * C90461 +
                   C90570 * (C90472 + C90570 * C90730))) /
        C90099;
    const double C5978 =
        (C90570 * C90635 + ae * C90570 * C91026 +
         C90526 * (ae * C90570 * C90461 + C90526 * C90570 * C90649)) /
        C90099;
    const double C5982 =
        (C90635 + C90649 * C90756 + ae * (C91026 + C90526 * C90505 * C90756) +
         C90526 *
             (ae * (C90461 + C90505 * C90756) +
              C90526 * (C90649 + (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619) *
                                     C90756))) /
        C90099;
    const double C6226 = (C90526 * C90716 + ae * C90570 * C91026 +
                          C90570 * (ae * C91026 + C90570 * C90526 * C90730)) /
                         C90099;
    const double C5713 = (C90526 * C90435 + C91026 * C90756) / C90095;
    const double C4847 = C4030 * C4818;
    const double C5167 = C92102 * C4818;
    const double C37769 = C36262 * C4818;
    const double C37992 = C92097 * C4818;
    const double C45572 = C90114 * C4818;
    const double C45848 = C92102 * C4818;
    const double C8463 = C4030 * C5707;
    const double C8816 = C92102 * C5707;
    const double C48911 = C90114 * C5707;
    const double C49244 = C92102 * C5707;
    const double C58332 = C36262 * C5707;
    const double C58635 = C92097 * C5707;
    const double C10900 = C4030 * C10871;
    const double C11219 = C92102 * C10871;
    const double C72986 = C36262 * C10871;
    const double C73192 = C92097 * C10871;
    const double C81836 = C90114 * C10871;
    const double C82086 = C92102 * C10871;
    const double C41704 = C92097 * C14411;
    const double C40841 = C92097 * C6227;
    const double C39238 = C92097 * C8802;
    const double C39448 = C92097 * C9124;
    const double C36739 = C36262 * C4822;
    const double C36940 = C92097 * C4822;
    const double C40336 = C36262 * C5715;
    const double C40601 = C92097 * C5715;
    const double C38995 = C36262 * C8456;
    const double C39236 = C92097 * C8456;
    const double C41416 = C92097 * C14083;
    const double C71866 = C36262 * C10875;
    const double C72046 = C92097 * C10875;
    const double C90466 = C90443 + C90463;
    const double C819 =
        (C90526 * C90434 + ae * C90526 * C90435 + be * C90526 * C90436 +
         C90404 *
             (ae * C90526 * C90429 + be * C90526 * C90430 + C90404 * C90775)) /
        C90099;
    const double C3370 =
        (ae * C90570 * C90526 * C90429 + be * C90570 * C90526 * C90430 +
         C90404 * C90570 * C90775) /
        C90099;
    const double C5721 = (C90526 * C90434 + C90775 * C90756) / C90099;
    const double C1400 =
        (C90570 * C90434 + ae * C90570 * C90435 + be * C90570 * C90436 +
         C90404 *
             (ae * C90570 * C90429 + be * C90570 * C90430 + C90404 * C90850)) /
        C90099;
    const double C4846 = C92102 * C823;
    const double C6503 = C4023 * C823;
    const double C32055 = C31250 * C823;
    const double C37768 = C92097 * C823;
    const double C45571 = C92102 * C823;
    const double C47022 = C92320 * C823;
    const double C10899 = C92102 * C1404;
    const double C12763 = C4023 * C1404;
    const double C42887 = C92097 * C1404;
    const double C51628 = C92102 * C1404;
    const double C62496 = C31250 * C1404;
    const double C83502 = C92320 * C1404;
    const double C4854 = C4023 * C4827;
    const double C36738 = C92097 * C4827;
    const double C45579 = C92320 * C4827;
    const double C8470 = C4023 * C5720;
    const double C39002 = C92097 * C5720;
    const double C48918 = C92320 * C5720;
    const double C10907 = C4023 * C10880;
    const double C41125 = C92097 * C10880;
    const double C81843 = C92320 * C10880;
    const double C90513 = C90455 + C90510;
    const double C91012 = C90462 + C91010;
    const double C91253 = C90462 + C91251;
    const double C13754 =
        (2 * C90570 * C91008 + C90570 * (C91008 + C91385 * C90756)) / C90095;
    const double C91472 = C90632 + C91467;
    const double C91688 = C90713 + C91685;
    const double C91192 = C91190 + C90503;
    const double C91376 = C91374 + C90503;
    const double C90506 = C90480 + C90501;
    const double C91191 = C91188 + C90500;
    const double C91375 = C91372 + C90500;
    const double C12319 =
        (ae * (C90593 + C90570 * (C90570 * C90607 + C90500) +
               C90570 * C90495 * be) +
         C90526 * (C90692 + be * C90570 * C90650 +
                   C90570 * (be * C90650 +
                             C90570 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C8030 =
        (be * C90636 + C90570 * C90692 +
         ae * (C90570 * C90526 * C90607 + C91189 * be) +
         C90526 * (ae * (C90570 * C90607 + C90500) +
                   C90526 * (be * C90650 +
                             C90570 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C11994 =
        (C90526 * C90593 + C90570 * (C90570 * C91361 + C91189 * be) +
         C90570 * C91189 * be) /
        C90095;
    const double C12424 =
        (C90526 * C90717 + C90570 * (C90570 * C91362 + C91189 * ae) +
         C90570 * C91189 * ae) /
        C90095;
    const double C11784 = C90526 * C90454 + C91189 * C90756;
    const double C91080 = C90526 * C91078;
    const double C91345 = C90570 * C91342;
    const double C91079 = C90526 * C91077;
    const double C91344 = C90570 * C91339;
    const double C5890 =
        (C90584 + C90595 * C90658 + C90570 * (C90570 * C91101 + C91073 * be) +
         C90570 * C91073 * be) /
        C90095;
    const double C6222 =
        (C90708 + C90719 * C90658 + C90570 * (C90570 * C91122 + C91073 * ae) +
         C90570 * C91073 * ae) /
        C90095;
    const double C8691 = (C90570 * (2 * C91095 + C90526 * C91101) +
                          (2 * C91034 + C90526 * C91073) * be) /
                         C90095;
    const double C9123 = (C90570 * (2 * C91116 + C90526 * C91122) +
                          (2 * C91034 + C90526 * C91073) * ae) /
                         C90095;
    const double C4817 = 3 * (C90425 + C90447 * C90658) +
                         C90526 * (2 * C91034 + C90526 * C91073);
    const double C5706 = C90425 + C90447 * C90658 + C91073 * C90756;
    const double C8455 = C90570 * (2 * C91034 + C90526 * C91073);
    const double C91416 = C91414 + C91075;
    const double C91415 = C91413 + C91072;
    const double C6142 =
        (C91087 + be * C90570 * C90638 + C90570 * (C90642 + C90570 * C91096) +
         ae * (C91095 + C90570 * (C90570 * C90526 * C91097 + C91072) +
               C90570 * C91067 * be) +
         C90526 * (ae * (C90595 + C90570 * (C90570 * C91097 + C90494) +
                         C90570 * C90487 * be) +
                   C90526 * (C91096 + be * C90570 * C91069 +
                             C90570 * (be * C91069 + C90570 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90681)))) /
        C90099;
    const double C10870 = 3 * (C90425 + C90447 * C90756) +
                          C90570 * (2 * C91302 + C90570 * C91341);
    const double C90512 = C90452 + C90509;
    const double C91030 = C90461 + C91028;
    const double C91285 = C90461 + C91283;
    const double C13753 =
        (2 * C90570 * C91026 + C90570 * (C91026 + C91396 * C90756)) / C90095;
    const double C91470 = C90545 + C91464;
    const double C91582 = C91052 + C91580;
    const double C91687 = C90589 + C91684;
    const double C90511 = C90483 + C90508;
    const double C90784 = C90460 + C90783;
    const double C90859 = C90460 + C90858;
    const double C90930 = C90404 * C90927;
    const double C90962 = C90570 * C90927;
    const double C3371 =
        (C90570 * C90775 + ae * C90570 * C90526 * C90461 +
         be * C90570 * C90526 * C90462 +
         C90404 * (ae * C90570 * C90925 + be * C90570 * C90926 +
                   C90404 * C90570 * C90927)) /
        C90099;
    const double C5722 =
        (ae * (C91020 + C90925 * C90756) + be * (C91002 + C90926 * C90756) +
         C90404 * (C90775 + C90927 * C90756)) /
        C90099;
    const double C8461 =
        (ae * C90570 * (2 * C90925 + C90526 * (C90452 + C90493 * C90658)) +
         be * C90570 * (2 * C90926 + C90526 * (C90455 + C90496 * C90658)) +
         C90404 * C90570 *
             (2 * C90927 +
              C90526 * (C90504 + (C90477 * C90478 +
                                  C90408 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90658))) /
        C90099;
    const double C11787 =
        (C90775 + C90927 * C90756 + ae * (C91026 + C90526 * C90505 * C90756) +
         be * (C91008 + C90526 * C90507 * C90756) +
         C90404 *
             (ae * (C90925 + C90526 * C90493 * C90756) +
              be * (C90926 + C90526 * C90496 * C90756) +
              C90404 * (C90927 + C90526 *
                                     (C90477 * C90478 +
                                      C90408 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C13755 =
        (2 * C90570 * C90775 + C90570 * (C90775 + C90927 * C90756)) / C90099;
    const double C90947 = C90404 * C90944;
    const double C6507 = C92102 * C824;
    const double C15500 = C14697 * C824;
    const double C32051 = C31251 * C824;
    const double C47026 = C92102 * C824;
    const double C12767 = C92102 * C1405;
    const double C21202 = C14697 * C1405;
    const double C62492 = C31251 * C1405;
    const double C83506 = C92102 * C1405;
    const double C90675 = C90668 + C90674;
    const double C91070 = C90526 * C91065;
    const double C91219 = C90570 * C91065;
    const double C91456 = C91446 + C91447;
    const double C91519 = C90668 + C91518;
    const double C91542 = C90526 * C91540;
    const double C90773 = C90766 + C90772;
    const double C91333 = C90570 * C91128;
    const double C91409 = C90526 * C91128;
    const double C9333 =
        (ae * (2 * C91095 + C90526 * C91101) +
         be * (2 * C91116 + C90526 * C91122) +
         C90570 *
             (2 * C90526 * C91128 +
              C90526 * (C91128 + C90404 *
                                     (C90477 * C90478 +
                                      C90756 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90658))) /
        C90099;
    const double C91510 = C90766 + C91509;
    const double C91590 = C90570 * C91585;
    const double C91677 = C91665 + C91666;
    const double C91618 = C91616 + C91468;
    const double C91471 = C91452 + C91466;
    const double C91617 = C91614 + C91465;
    const double C91600 = C90570 * C91598;
    const double C91599 = C90570 * C91597;
    const double C41105 = 3 * (C91040 + C91048 * C90756) +
                          C90570 * (2 * C91402 + C90570 * C91593);
    const double C91680 = C91671 + C91672;
    const double C209 = C92177 * C187;
    const double C430 = C182 * C187;
    const double C2055 = C92177 * C879;
    const double C2273 = C182 * C879;
    const double C14802 = C92226 * C879;
    const double C15055 = C14781 * C879;
    const double C31356 = C92226 * C879;
    const double C31607 = C31335 * C879;
    const double C4127 = C4027 * C882;
    const double C4379 = C4108 * C882;
    const double C17049 = C92226 * C882;
    const double C17362 = C14781 * C882;
    const double C33600 = C92226 * C882;
    const double C33911 = C31335 * C882;
    const double C44894 = C44794 * C882;
    const double C2748 = C92177 * C1460;
    const double C2966 = C182 * C1460;
    const double C9505 = C92177 * C1463;
    const double C9761 = C182 * C1463;
    const double C18008 = C92226 * C3441;
    const double C18311 = C14781 * C3441;
    const double C22060 = C92177 * C3441;
    const double C22373 = C182 * C3441;
    const double C34556 = C92226 * C3441;
    const double C34855 = C31335 * C3441;
    const double C11607 = C92177 * C11595;
    const double C4949 = (2 * (C90526 * C90540 + C90425 * be) +
                          C90526 * (C90540 + C90526 * C91036 + C91034 * be) +
                          (C90425 + C90447 * C90658) * be) /
                         C90095;
    const double C5800 =
        (C90570 * (C90540 + C90526 * C91036 + C91034 * be)) / C90095;
    const double C5803 =
        (C90526 * C90540 + C90425 * be + C91036 * C90756) / C90095;
    const double C13870 =
        (2 * C90570 * C91036 + C90570 * (C91036 + C91077 * C90756)) / C90095;
    const double C11331 = C11321 - C11322;
    const double C91059 = C90538 + C91057;
    const double C91455 = C90668 + C91444;
    const double C41233 = C92226 * C13869;
    const double C41517 = C31335 * C13869;
    const double C73663 = C92177 * C13869;
    const double C73866 = C182 * C13869;
    const double C86809 = C92226 * C13869;
    const double C87049 = C14781 * C13869;
    const double C71930 = C92177 * C11002;
    const double C72107 = C182 * C11002;
    const double C292 = C92188 * C270;
    const double C721 = C265 * C270;
    const double C2135 = C92188 * C945;
    const double C2575 = C265 * C945;
    const double C4213 = C92188 * C948;
    const double C4727 = C265 * C948;
    const double C2828 = C92188 * C1526;
    const double C3268 = C265 * C1526;
    const double C19920 = C92252 * C1526;
    const double C20419 = C19899 * C1526;
    const double C61211 = C92252 * C1526;
    const double C61709 = C61190 * C1526;
    const double C9602 = C9424 * C1529;
    const double C10098 = C9583 * C1529;
    const double C23138 = C92252 * C1529;
    const double C23761 = C19899 * C1529;
    const double C64413 = C92252 * C1529;
    const double C65035 = C61190 * C1529;
    const double C80587 = C80417 * C1529;
    const double C18112 = C92188 * C3515;
    const double C18741 = C265 * C3515;
    const double C22172 = C92252 * C3515;
    const double C22782 = C19899 * C3515;
    const double C63458 = C92252 * C3515;
    const double C64059 = C61190 * C3515;
    const double C5342 = C92188 * C5330;
    const double C12002 = C9424 * C5888;
    const double C12629 = C9583 * C5888;
    const double C29123 = C92252 * C5888;
    const double C29920 = C19899 * C5888;
    const double C78369 = C92252 * C5888;
    const double C79158 = C61190 * C5888;
    const double C82779 = C80417 * C5888;
    const double C11110 = (2 * (C90570 * C90584 + C90425 * be) +
                           C90570 * (C90584 + C90570 * C91304 + C91302 * be) +
                           (C90425 + C90447 * C90756) * be) /
                          C90095;
    const double C5618 = C5608 - C5609;
    const double C8349 = C8340 - C8341;
    const double C36868 = C92188 * C5032;
    const double C37222 = C265 * C5032;
    const double C40515 = C9424 * C5889;
    const double C41002 = C9583 * C5889;
    const double C60325 = C92252 * C5889;
    const double C60952 = C19899 * C5889;
    const double C70244 = C92252 * C5889;
    const double C70872 = C61190 * C5889;
    const double C86149 = C80417 * C5889;
    const double C39156 = C92188 * C8690;
    const double C39583 = C265 * C8690;
    const double C57001 = C92252 * C8690;
    const double C57473 = C19899 * C8690;
    const double C66862 = C92252 * C8690;
    const double C67358 = C61190 * C8690;
    const double C91327 = C90582 + C91325;
    const double C91663 = C90766 + C91546;
    const double C13979 = (2 * (C90570 * C91089 + C91040 * be) +
                           C90570 * (C91089 + C90570 * C91406 + C91402 * be) +
                           (C91040 + C91048 * C90756) * be) /
                          C90095;
    const double C432 = C182 * C352;
    const double C510 = C265 * C352;
    const double C2275 = C182 * C1011;
    const double C2365 = C265 * C1011;
    const double C15057 = C14781 * C1011;
    const double C31609 = C31335 * C1011;
    const double C4381 = C4108 * C1014;
    const double C4485 = C265 * C1014;
    const double C6852 = C4030 * C1014;
    const double C17364 = C14781 * C1014;
    const double C33913 = C31335 * C1014;
    const double C47359 = C90114 * C1014;
    const double C2968 = C182 * C1592;
    const double C3058 = C265 * C1592;
    const double C20164 = C19899 * C1592;
    const double C61455 = C61190 * C1592;
    const double C9763 = C182 * C1595;
    const double C9855 = C9583 * C1595;
    const double C13112 = C4030 * C1595;
    const double C23458 = C19899 * C1595;
    const double C64733 = C61190 * C1595;
    const double C83825 = C90114 * C1595;
    const double C18313 = C14781 * C3589;
    const double C18437 = C265 * C3589;
    const double C22375 = C182 * C3589;
    const double C22484 = C19899 * C3589;
    const double C28036 = C4030 * C3589;
    const double C34857 = C31335 * C3589;
    const double C53019 = C90114 * C3589;
    const double C63763 = C61190 * C3589;
    const double C8035 = C92188 * C6138;
    const double C26179 = C92252 * C6138;
    const double C68732 = C92252 * C6138;
    const double C12326 = C9424 * C6141;
    const double C29523 = C92252 * C6141;
    const double C78767 = C92252 * C6141;
    const double C83085 = C80417 * C6141;
    const double C5140 = (2 * (C90526 * C90627 + C90425 * ae) +
                          C90526 * (C90627 + C90526 * C91037 + C91034 * ae) +
                          (C90425 + C90447 * C90658) * ae) /
                         C90095;
    const double C5972 =
        (C90570 * (C90627 + C90526 * C91037 + C91034 * ae)) / C90095;
    const double C5974 =
        (C90526 * C90627 + C90425 * ae + C91037 * C90756) / C90095;
    const double C14082 =
        (2 * C90570 * C91037 + C90570 * (C91037 + C91078 * C90756)) / C90095;
    const double C91060 = C90625 + C91058;
    const double C41415 = C36262 * C14081;
    const double C41519 = C31335 * C14081;
    const double C44385 = C9583 * C14081;
    const double C73868 = C182 * C14081;
    const double C87051 = C14781 * C14081;
    const double C72047 = C36262 * C11193;
    const double C72109 = C182 * C11193;
    const double C5251 =
        (2 * (ae * C90540 + be * C90627 + C90526 * C91032) +
         ae * (C90540 + C90526 * C91036 + C91034 * be) +
         be * (C90627 + C90526 * C91037 + C91034 * ae) +
         C90526 * (C91032 + ae * C91036 + be * C91037 +
                   C90526 * (C90555 + C90642 + C90526 * C90404 * C90673))) /
        C90099;
    const double C6057 =
        (C90570 * C91032 + ae * C90570 * C91036 + be * C90570 * C91037 +
         C90526 * (ae * C90570 * C90551 + be * C90570 * C90638 +
                   C90526 * C90570 * C91065)) /
        C90099;
    const double C6061 =
        (ae * (C90540 + C90551 * C90756) + be * (C90627 + C90638 * C90756) +
         C90526 * (C91032 + C91065 * C90756)) /
        C90099;
    const double C6062 =
        (C91032 + C91065 * C90756 + ae * (C91036 + C91077 * C90756) +
         be * (C91037 + C91078 * C90756) +
         C90526 *
             (ae * (C90551 + C91066 * C90756) +
              be * (C90638 + C91069 * C90756) +
              C90526 * (C91065 + C90404 *
                                     (C90477 * C90478 +
                                      C90658 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C11306 =
        (2 * C90570 * C91032 + C90570 * (C91032 + C91065 * C90756)) / C90099;
    const double C91051 = C91045 + C91046;
    const double C11308 =
        (3 * (C90663 + C90668 * C90756) +
         C90570 * (2 * C91217 + C90570 * (C90668 + C90673 * C90756))) /
        C90099;
    const double C14191 =
        (ae * (2 * C91289 + C90570 * C91293) +
         be * (2 * C91265 + C90570 * C91267) +
         C90526 * (2 * C91217 + C90570 * (C90668 + C90673 * C90756))) /
        C90099;
    const double C433 = C92177 * C415;
    const double C2280 = C92177 * C1075;
    const double C4386 = C4026 * C1075;
    const double C15054 = C92226 * C1075;
    const double C17369 = C92333 * C1075;
    const double C31606 = C92226 * C1075;
    const double C33918 = C31252 * C1075;
    const double C4378 = C4027 * C1079;
    const double C6960 = C4026 * C1079;
    const double C17373 = C92226 * C1079;
    const double C33922 = C92226 * C1079;
    const double C45137 = C44794 * C1079;
    const double C2973 = C92177 * C1656;
    const double C18318 = C92333 * C1656;
    const double C34862 = C31252 * C1656;
    const double C9760 = C92177 * C1660;
    const double C27045 = C92333 * C1660;
    const double C43305 = C31252 * C1660;
    const double C7919 = C4026 * C3662;
    const double C12215 = C92177 * C3662;
    const double C18322 = C92226 * C3662;
    const double C28175 = C92333 * C3662;
    const double C34866 = C92226 * C3662;
    const double C53158 = C31252 * C3662;
    const double C30621 = C92226 * C6058;
    const double C44261 = C92226 * C6058;
    const double C57892 = C44794 * C6058;
    const double C67790 = C4027 * C6058;
    const double C70452 = C4026 * C6058;
    const double C14202 = C92177 * C6059;
    const double C27049 = C92226 * C6059;
    const double C41516 = C92226 * C6059;
    const double C44265 = C31252 * C6059;
    const double C67798 = C4026 * C6059;
    const double C89650 = C92333 * C6059;
    const double C44269 = C92226 * C6060;
    const double C57896 = C44794 * C6060;
    const double C67794 = C4027 * C6060;
    const double C89654 = C92226 * C6060;
    const double C11328 = C92177 * C11307;
    const double C41524 = C31252 * C11307;
    const double C87056 = C92333 * C11307;
    const double C644 = C182 * C571;
    const double C723 = C265 * C571;
    const double C2506 = C182 * C1193;
    const double C2577 = C265 * C1193;
    const double C15323 = C14781 * C1193;
    const double C31874 = C31335 * C1193;
    const double C4645 = C4108 * C1196;
    const double C4729 = C265 * C1196;
    const double C7182 = C4030 * C1196;
    const double C17697 = C14781 * C1196;
    const double C34245 = C31335 * C1196;
    const double C47682 = C90114 * C1196;
    const double C3199 = C182 * C1774;
    const double C3270 = C265 * C1774;
    const double C20421 = C19899 * C1774;
    const double C61711 = C61190 * C1774;
    const double C10007 = C182 * C1777;
    const double C10100 = C9583 * C1777;
    const double C13428 = C4030 * C1777;
    const double C23763 = C19899 * C1777;
    const double C65037 = C61190 * C1777;
    const double C84133 = C90114 * C1777;
    const double C18641 = C14781 * C3803;
    const double C18743 = C265 * C3803;
    const double C22682 = C182 * C3803;
    const double C22784 = C19899 * C3803;
    const double C28450 = C4030 * C3803;
    const double C35183 = C31335 * C3803;
    const double C53427 = C90114 * C3803;
    const double C64061 = C61190 * C3803;
    const double C7288 = C4027 * C5518;
    const double C47787 = C44794 * C5518;
    const double C12528 = C182 * C6220;
    const double C12631 = C9583 * C6220;
    const double C14416 = C4030 * C6220;
    const double C27376 = C14781 * C6220;
    const double C29922 = C19899 * C6220;
    const double C42584 = C36262 * C6220;
    const double C43616 = C31335 * C6220;
    const double C52273 = C90114 * C6220;
    const double C79160 = C61190 * C6220;
    const double C11498 = (2 * (C90570 * C90708 + C90425 * ae) +
                           C90570 * (C90708 + C90570 * C91305 + C91302 * ae) +
                           (C90425 + C90447 * C90756) * ae) /
                          C90095;
    const double C37112 = C36262 * C5419;
    const double C37224 = C265 * C5419;
    const double C40840 = C36262 * C6221;
    const double C41004 = C9583 * C6221;
    const double C44595 = C31335 * C6221;
    const double C60954 = C19899 * C6221;
    const double C68053 = C4108 * C6221;
    const double C70874 = C61190 * C6221;
    const double C89963 = C14781 * C6221;
    const double C39447 = C36262 * C9122;
    const double C39585 = C265 * C9122;
    const double C57475 = C19899 * C9122;
    const double C67360 = C61190 * C9122;
    const double C70772 = C4108 * C9122;
    const double C91328 = C90706 + C91326;
    const double C14409 = (2 * (C90570 * C91110 + C91040 * ae) +
                           C90570 * (C91110 + C90570 * C91407 + C91402 * ae) +
                           (C91040 + C91048 * C90756) * ae) /
                          C90095;
    const double C5595 =
        (2 * C90526 * C91124 + C90526 * (C91124 + C90404 * C90771 * C90658)) /
        C90099;
    const double C5598 =
        (3 * (C91124 + C91128 * C90658) +
         C90526 *
             (2 * C90526 * C91128 +
              C90526 * (C91128 + C90404 *
                                     (C90477 * C90478 +
                                      C90756 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90658))) /
        C90099;
    const double C6383 =
        (ae * (C90584 + C90595 * C90658) + be * (C90708 + C90719 * C90658) +
         C90570 * (C91124 + C91128 * C90658)) /
        C90099;
    const double C6387 =
        (C90526 * C91124 + ae * (C90570 * C91095 + C91034 * be) +
         be * (C90570 * C91116 + C91034 * ae) +
         C90570 * (ae * C91095 + be * C91116 + C90570 * C90526 * C91128)) /
        C90099;
    const double C6388 =
        (C91124 + C91128 * C90658 + ae * (C90570 * C91101 + C91073 * be) +
         be * (C90570 * C91122 + C91073 * ae) +
         C90570 *
             (ae * C91101 + be * C91122 +
              C90570 * (C91128 + C90404 *
                                     (C90477 * C90478 +
                                      C90756 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90658))) /
        C90099;
    const double C11682 =
        (2 * (ae * C90584 + be * C90708 + C90570 * C91124) +
         ae * (C90584 + C90570 * C91304 + C91302 * be) +
         be * (C90708 + C90570 * C91305 + C91302 * ae) +
         C90570 * (C91124 + ae * C91304 + be * C91305 +
                   C90570 * (C90599 + C90723 + C90570 * C91128))) /
        C90099;
    const double C91319 = C91313 + C91314;
    const double C14619 = (2 * (ae * C91089 + be * C91110 + C90570 * C91400) +
                           ae * (C91089 + C90570 * C91406 + C91402 * be) +
                           be * (C91110 + C90570 * C91407 + C91402 * ae) +
                           C90570 * (C91400 + ae * C91406 + be * C91407 +
                                     C90570 * (ae * C91401 + be * C91403 +
                                               C90570 * C90526 * C90771))) /
                          C90099;
    const double C724 = C92188 * C706;
    const double C2582 = C92188 * C1315;
    const double C22789 = C92334 * C1315;
    const double C64066 = C61039 * C1315;
    const double C4726 = C92188 * C1319;
    const double C26489 = C92334 * C1319;
    const double C69030 = C61039 * C1319;
    const double C3275 = C92188 * C1896;
    const double C10105 = C9423 * C1896;
    const double C20418 = C92252 * C1896;
    const double C23768 = C92334 * C1896;
    const double C61708 = C92252 * C1896;
    const double C65042 = C61039 * C1896;
    const double C10097 = C9424 * C1900;
    const double C13638 = C9423 * C1900;
    const double C23772 = C92252 * C1900;
    const double C65046 = C92252 * C1900;
    const double C81064 = C80417 * C1900;
    const double C8347 = C92188 * C3946;
    const double C12636 = C9423 * C3946;
    const double C22793 = C92252 * C3946;
    const double C29927 = C92334 * C3946;
    const double C64070 = C92252 * C3946;
    const double C79165 = C61039 * C3946;
    const double C5615 = C92188 * C5596;
    const double C57480 = C92334 * C5596;
    const double C67365 = C61039 * C5596;
    const double C37225 = C92188 * C5597;
    const double C9338 = C92188 * C6384;
    const double C26493 = C92252 * C6384;
    const double C41009 = C9423 * C6384;
    const double C60959 = C92334 * C6384;
    const double C67357 = C92252 * C6384;
    const double C70879 = C61039 * C6384;
    const double C31165 = C92252 * C6385;
    const double C41001 = C9424 * C6385;
    const double C44703 = C9423 * C6385;
    const double C70883 = C92252 * C6385;
    const double C86623 = C80417 * C6385;
    const double C41005 = C9424 * C6386;
    const double C60955 = C92252 * C6386;
    const double C70875 = C92252 * C6386;
    const double C86627 = C80417 * C6386;
    const double C39586 = C92188 * C9332;
    const double C57476 = C92252 * C9332;
    const double C67361 = C92252 * C9332;
    const double C37385 =
        (2 * C91382 + C90526 * C91431 + be * C90570 * C91428 +
         C90570 * (be * C91428 +
                   C90570 * (2 * C90526 * C90600 +
                             C90526 * (C90600 + std::pow(C90410, 7) * bs[7] *
                                                    C90576 * C90658)))) /
        C90099;
    const double C39153 =
        (be * (3 * C91006 + C90526 * C91428) +
         C90570 * (3 * C91431 +
                   C90526 * (2 * C90526 * C90600 +
                             C90526 * (C90600 + std::pow(C90410, 7) * bs[7] *
                                                    C90576 * C90658)))) /
        C90099;
    const double C36724 = (4 * (2 * C91002 + C90526 * C91006) +
                           C90526 * (3 * C91006 + C90526 * C91428)) /
                          C90095;
    const double C37280 =
        (2 * C91002 + C90526 * C91006 + C91428 * C90756) / C90095;
    const double C38992 = (C90570 * (3 * C91006 + C90526 * C91428)) / C90095;
    const double C71863 = (4 * (2 * C91243 + C90570 * C91247) +
                           C90570 * (3 * C91247 + C90570 * C91633)) /
                          C90095;
    const double C37591 =
        (2 * C91393 + C90526 * C91495 + ae * C90570 * C91442 +
         C90570 * (ae * C91442 +
                   C90570 * (2 * C90526 * C90724 +
                             C90526 * (C90724 + std::pow(C90410, 7) * bs[7] *
                                                    C90700 * C90658)))) /
        C90099;
    const double C39441 =
        (ae * (3 * C91024 + C90526 * C91442) +
         C90570 * (3 * C91495 +
                   C90526 * (2 * C90526 * C90724 +
                             C90526 * (C90724 + std::pow(C90410, 7) * bs[7] *
                                                    C90700 * C90658)))) /
        C90099;
    const double C36723 = (4 * (2 * C91020 + C90526 * C91024) +
                           C90526 * (3 * C91024 + C90526 * C91442)) /
                          C90095;
    const double C37279 =
        (2 * C91020 + C90526 * C91024 + C91442 * C90756) / C90095;
    const double C38991 = (C90570 * (3 * C91024 + C90526 * C91442)) / C90095;
    const double C71862 = (4 * (2 * C91275 + C90570 * C91279) +
                           C90570 * (3 * C91279 + C90570 * C91650)) /
                          C90095;
    const double C1844 =
        (2 * C90404 * C90747 + C90404 * C90752 + ae * C90570 * C90567 +
         C90570 * (ae * C90567 +
                   C90570 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C3193 =
        (ae * (3 * C90549 + C90404 * C90567) +
         C90570 * (3 * C90752 +
                   C90404 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C188 = (4 * (2 * C90540 + C90404 * C90549) +
                         C90404 * (3 * C90549 + C90404 * C90567)) /
                        C90095;
    const double C1464 =
        (2 * C90540 + C90404 * C90549 + C90567 * C90756) / C90095;
    const double C2736 = (C90570 * (3 * C90549 + C90404 * C90567)) / C90095;
    const double C71922 = (4 * (2 * C91289 + C90570 * C91293) +
                           C90570 * (3 * C91293 + C90570 * C91661)) /
                          C90095;
    const double C1139 =
        (2 * C90404 * C90687 + C90404 * C90692 + ae * C90526 * C90611 +
         C90526 * (ae * C90611 +
                   C90526 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C2359 =
        (ae * (3 * C90593 + C90404 * C90611) +
         C90526 * (3 * C90692 +
                   C90404 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C271 = (4 * (2 * C90584 + C90404 * C90593) +
                         C90404 * (3 * C90593 + C90404 * C90611)) /
                        C90095;
    const double C949 =
        (2 * C90584 + C90404 * C90593 + C90611 * C90658) / C90095;
    const double C2123 = (C90526 * (3 * C90593 + C90404 * C90611)) / C90095;
    const double C36860 = (4 * (2 * C91089 + C90526 * C91093) +
                           C90526 * (3 * C91093 + C90526 * C91492)) /
                          C90095;
    const double C1720 =
        (2 * C90404 * C90687 + C90404 * C90692 + be * C90570 * C90654 +
         C90570 * (be * C90654 +
                   C90570 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C3052 =
        (be * (3 * C90636 + C90404 * C90654) +
         C90570 * (3 * C90692 +
                   C90404 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C3664 =
        (ae * C90570 * C90567 + be * C90570 * C90654 +
         C90526 * C90570 *
             (2 * C90404 * C90673 +
              C90404 * (C90673 + (C90477 * C90478 +
                                  C90658 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90408))) /
        C90099;
    const double C353 = (4 * (2 * C90627 + C90404 * C90636) +
                         C90404 * (3 * C90636 + C90404 * C90654)) /
                        C90095;
    const double C1596 =
        (2 * C90627 + C90404 * C90636 + C90654 * C90756) / C90095;
    const double C2896 = (C90570 * (3 * C90636 + C90404 * C90654)) / C90095;
    const double C72038 = (4 * (2 * C91265 + C90570 * C91267) +
                           C90570 * (3 * C91267 + C90570 * C91639)) /
                          C90095;
    const double C1263 =
        (2 * C90404 * C90747 + C90404 * C90752 + be * C90526 * C90735 +
         C90526 * (be * C90735 +
                   C90526 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C2500 =
        (be * (3 * C90717 + C90404 * C90735) +
         C90526 * (3 * C90752 +
                   C90404 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C3948 =
        (ae * C90526 * C90611 + be * C90526 * C90735 +
         C90570 * C90526 *
             (2 * C90404 * C90771 +
              C90404 * (C90771 + (C90477 * C90478 +
                                  C90756 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90408))) /
        C90099;
    const double C572 = (4 * (2 * C90708 + C90404 * C90717) +
                         C90404 * (3 * C90717 + C90404 * C90735)) /
                        C90095;
    const double C1197 =
        (2 * C90708 + C90404 * C90717 + C90735 * C90658) / C90095;
    const double C2432 = (C90526 * (3 * C90717 + C90404 * C90735)) / C90095;
    const double C37101 = (4 * (2 * C91110 + C90526 * C91114) +
                           C90526 * (3 * C91114 + C90526 * C91507)) /
                          C90095;
    const double C11032 = C11028 * C4023;
    const double C71926 = C11028 * C92097;
    const double C81925 = C11028 * C92320;
    const double C211 = C92177 * C193;
    const double C2053 = C92177 * C886;
    const double C4131 = C4026 * C886;
    const double C14797 = C92226 * C886;
    const double C17051 = C92333 * C886;
    const double C31351 = C92226 * C886;
    const double C33602 = C31252 * C886;
    const double C4120 = C4027 * C889;
    const double C6629 = C4026 * C889;
    const double C17045 = C92226 * C889;
    const double C33596 = C92226 * C889;
    const double C44887 = C44794 * C889;
    const double C2746 = C92177 * C1467;
    const double C18010 = C92333 * C1467;
    const double C34558 = C31252 * C1467;
    const double C9502 = C92177 * C1470;
    const double C26733 = C92333 * C1470;
    const double C42997 = C31252 * C1470;
    const double C7602 = C4026 * C3444;
    const double C11892 = C92177 * C3444;
    const double C18004 = C92226 * C3444;
    const double C27755 = C92333 * C3444;
    const double C34552 = C92226 * C3444;
    const double C52750 = C31252 * C3444;
    const double C30203 = C92226 * C5805;
    const double C43928 = C92226 * C5805;
    const double C57645 = C44794 * C5805;
    const double C67543 = C4027 * C5805;
    const double C70132 = C4026 * C5805;
    const double C13881 = C92177 * C5807;
    const double C26727 = C92226 * C5807;
    const double C41228 = C92226 * C5807;
    const double C43934 = C31252 * C5807;
    const double C67554 = C4026 * C5807;
    const double C89338 = C92333 * C5807;
    const double C43936 = C92226 * C5808;
    const double C57658 = C44794 * C5808;
    const double C67556 = C4027 * C5808;
    const double C89340 = C92226 * C5808;
    const double C60223 = C44794 * C8590;
    const double C70134 = C4027 * C8590;
    const double C41237 = C92226 * C13871;
    const double C73665 = C92177 * C13871;
    const double C86813 = C92226 * C13871;
    const double C71935 = C71928 * C92097;
    const double C90566 = C90559 + C90564;
    const double C91011 = C90473 + C91009;
    const double C11026 = C92177 * C11005;
    const double C91427 = C91419 + C91425;
    const double C6845 = C92102 * C1018;
    const double C15759 = C14697 * C1018;
    const double C32310 = C31251 * C1018;
    const double C33810 = C31250 * C1018;
    const double C47352 = C92102 * C1018;
    const double C5162 = C92102 * C1021;
    const double C6851 = C4023 * C1021;
    const double C32321 = C31250 * C1021;
    const double C37990 = C92097 * C1021;
    const double C45843 = C92102 * C1021;
    const double C47358 = C92320 * C1021;
    const double C13105 = C92102 * C1599;
    const double C21461 = C14697 * C1599;
    const double C54246 = C92102 * C1599;
    const double C62751 = C31251 * C1599;
    const double C64525 = C31250 * C1599;
    const double C11214 = C92102 * C1602;
    const double C13111 = C4023 * C1602;
    const double C43203 = C92097 * C1602;
    const double C51960 = C92102 * C1602;
    const double C62762 = C31250 * C1602;
    const double C83824 = C92320 * C1602;
    const double C8812 = C92102 * C3592;
    const double C28035 = C4023 * C3592;
    const double C35709 = C31250 * C3592;
    const double C42283 = C92097 * C3592;
    const double C49240 = C92102 * C3592;
    const double C53018 = C92320 * C3592;
    const double C36942 = C92097 * C5145;
    const double C90653 = C90646 + C90651;
    const double C91029 = C90472 + C91027;
    const double C11198 =
        (3 * (C90635 + C90649 * C90756) +
         C90570 *
             (2 * C91215 +
              C90570 * (C90649 + (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619) *
                                     C90756))) /
        C90099;
    const double C14093 = C92102 * C5980;
    const double C42287 = C92097 * C5980;
    const double C51968 = C92102 * C5980;
    const double C11223 = C92102 * C11196;
    const double C73194 = C92097 * C11196;
    const double C82090 = C92102 * C11196;
    const double C91441 = C91433 + C91439;
    const double C39225 =
        (3 * (C91213 + ae * C90570 * C90925 + C90526 * C91537) +
         ae * C90570 * C91442 +
         C90526 * (2 * C91537 + ae * C90570 * C91438 +
                   C90526 * (C91535 + ae * C90570 * C90526 * C90493 +
                             C90526 * (ae * C90570 * C90493 +
                                       C90526 * C90570 * std::pow(C90410, 7) *
                                           bs[7] * C90619)))) /
        C90099;
    const double C5062 = C5058 * C4023;
    const double C36864 = C5058 * C92097;
    const double C45749 = C5058 * C92320;
    const double C294 = C92188 * C276;
    const double C2133 = C92188 * C952;
    const double C22174 = C92334 * C952;
    const double C63460 = C61039 * C952;
    const double C4210 = C92188 * C955;
    const double C25871 = C92334 * C955;
    const double C68432 = C61039 * C955;
    const double C2826 = C92188 * C1533;
    const double C9606 = C9423 * C1533;
    const double C19915 = C92252 * C1533;
    const double C23140 = C92334 * C1533;
    const double C61206 = C92252 * C1533;
    const double C64415 = C61039 * C1533;
    const double C9595 = C9424 * C1536;
    const double C12995 = C9423 * C1536;
    const double C23134 = C92252 * C1536;
    const double C64409 = C92252 * C1536;
    const double C80580 = C80417 * C1536;
    const double C7708 = C92188 * C3518;
    const double C12006 = C9423 * C3518;
    const double C22168 = C92252 * C3518;
    const double C29125 = C92334 * C3518;
    const double C63454 = C92252 * C3518;
    const double C78371 = C61039 * C3518;
    const double C36873 = C36866 * C92097;
    const double C90610 = C90603 + C90608;
    const double C91252 = C90473 + C91250;
    const double C13982 =
        (2 * (be * C91008 + C90570 * C91384) + be * (C91008 + C91385 * C90756) +
         C90570 * (C91384 + be * C90570 * C91385 +
                   C90570 * (be * C91385 +
                             C90570 * C90526 *
                                 (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576)))) /
        C90099;
    const double C5056 = C92188 * C5035;
    const double C7712 = C92188 * C5892;
    const double C25873 = C92252 * C5892;
    const double C68434 = C92252 * C5892;
    const double C41321 =
        (3 * (C91382 + be * C91555 + C90570 * C91560) +
         be * (2 * C91555 + C90570 * C91561) +
         C90570 * (2 * C91560 + be * C91561 +
                   C90570 * (C91556 + be * C90570 * C91557 +
                             C90570 * (be * C91557 + C90570 * C90526 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90576)))) /
        C90099;
    const double C91632 = C91624 + C91630;
    const double C515 = C513 * C92177;
    const double C37051 = C92188 * C5331;
    const double C39374 = C92188 * C9018;
    const double C57240 = C92252 * C9018;
    const double C67109 = C92252 * C9018;
    const double C15161 = C15159 * C92226;
    const double C31711 = C15159 * C92226;
    const double C2366 = C92188 * C1135;
    const double C4486 = C92188 * C1138;
    const double C3059 = C92188 * C1716;
    const double C20165 = C92252 * C1716;
    const double C61456 = C92252 * C1716;
    const double C9856 = C9424 * C1719;
    const double C23459 = C92252 * C1719;
    const double C64734 = C92252 * C1719;
    const double C80827 = C80417 * C1719;
    const double C18438 = C92188 * C3733;
    const double C22485 = C92252 * C3733;
    const double C63764 = C92252 * C3733;
    const double C5332 =
        (3 * (C91087 + ae * C91095 + C90526 * C91100) +
         ae * (2 * C91095 + C90526 * C91101) +
         C90526 * (2 * C91100 + ae * C91101 +
                   C90526 * (C91096 + ae * C90526 * C91097 +
                             C90526 * (ae * C91097 + C90526 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90681)))) /
        C90099;
    const double C9019 =
        (2 * (ae * (C90570 * C90595 + C90453) + C90526 * C91225) +
         ae * (C90570 * C91101 + C91073 * be) +
         C90526 * (C91225 + ae * (C90570 * C90526 * C91097 + C91072) +
                   C90526 * (ae * (C90570 * C91097 + C90494) +
                             C90526 * (be * C91069 + C90570 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90681)))) /
        C90099;
    const double C11420 =
        (2 * (be * C90627 + C90570 * C91087) + be * (C90627 + C90638 * C90756) +
         C90570 * (C91087 + be * C90570 * C90638 + C90570 * C91225)) /
        C90099;
    const double C11422 =
        (3 * (C91087 + be * C91269 + C90570 * C91225) +
         be * (2 * C91269 + C90570 * C91271) +
         C90570 * (2 * C91225 + be * C91271 +
                   C90570 * (C91096 + be * C90570 * C91069 +
                             C90570 * (be * C91069 + C90570 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90681)))) /
        C90099;
    const double C91491 = C91486 + C91489;
    const double C91527 = C91525 + C91526;
    const double C91548 = C91546 + C91547;
    const double C7179 = C92102 * C1200;
    const double C15999 = C14697 * C1200;
    const double C32550 = C31251 * C1200;
    const double C34138 = C31250 * C1200;
    const double C47679 = C92102 * C1200;
    const double C5433 = C92102 * C1203;
    const double C7181 = C4023 * C1203;
    const double C32555 = C31250 * C1203;
    const double C38196 = C92097 * C1203;
    const double C46088 = C92102 * C1203;
    const double C47681 = C92320 * C1203;
    const double C13425 = C92102 * C1781;
    const double C21707 = C14697 * C1781;
    const double C54642 = C92102 * C1781;
    const double C62997 = C31251 * C1781;
    const double C64836 = C31250 * C1781;
    const double C11512 = C92102 * C1784;
    const double C13427 = C4023 * C1784;
    const double C43515 = C92097 * C1784;
    const double C52270 = C92102 * C1784;
    const double C63002 = C31250 * C1784;
    const double C84132 = C92320 * C1784;
    const double C9130 = C92102 * C3806;
    const double C28449 = C4023 * C3806;
    const double C36009 = C31250 * C3806;
    const double C42583 = C92097 * C3806;
    const double C49546 = C92102 * C3806;
    const double C53426 = C92320 * C3806;
    const double C72220 = C92097 * C11503;
    const double C90734 = C90727 + C90732;
    const double C91284 = C90472 + C91282;
    const double C14412 =
        (2 * (ae * C91026 + C90570 * C91395) + ae * (C91026 + C91396 * C90756) +
         C90570 * (C91395 + ae * C90570 * C91396 +
                   C90570 * (ae * C91396 +
                             C90570 * C90526 *
                                 (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700)))) /
        C90099;
    const double C5438 = C92102 * C5422;
    const double C38198 = C92097 * C5422;
    const double C46093 = C92102 * C5422;
    const double C9134 = C92102 * C6224;
    const double C49550 = C92102 * C6224;
    const double C58933 = C92097 * C6224;
    const double C41694 =
        (3 * (C91393 + ae * C91570 + C90570 * C91575) +
         ae * (2 * C91570 + C90570 * C91576) +
         C90570 * (2 * C91575 + ae * C91576 +
                   C90570 * (C91571 + ae * C90570 * C91572 +
                             C90570 * (ae * C91572 + C90570 * C90526 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90700)))) /
        C90099;
    const double C91649 = C91641 + C91647;
    const double C649 = C647 * C92188;
    const double C31031 = C92226 * C6303;
    const double C44592 = C92226 * C6303;
    const double C58149 = C44794 * C6303;
    const double C68047 = C4027 * C6303;
    const double C70771 = C4026 * C6303;
    const double C14521 = C92177 * C6305;
    const double C27373 = C92226 * C6305;
    const double C41787 = C92226 * C6305;
    const double C44594 = C31252 * C6305;
    const double C68052 = C4026 * C6305;
    const double C89962 = C92333 * C6305;
    const double C41792 = C92226 * C14515;
    const double C74073 = C92177 * C14515;
    const double C87291 = C92226 * C14515;
    const double C72274 = C92177 * C11596;
    const double C20324 = C20322 * C92252;
    const double C61613 = C20322 * C92252;
    const double C2507 = C92177 * C1259;
    const double C15324 = C92226 * C1259;
    const double C31875 = C92226 * C1259;
    const double C4646 = C4027 * C1262;
    const double C17698 = C92226 * C1262;
    const double C34246 = C92226 * C1262;
    const double C45401 = C44794 * C1262;
    const double C3200 = C92177 * C1840;
    const double C10008 = C92177 * C1843;
    const double C18642 = C92226 * C3877;
    const double C22683 = C92177 * C3877;
    const double C35184 = C92226 * C3877;
    const double C5520 =
        (3 * (C91108 + be * C91116 + C90526 * C91121) +
         be * (2 * C91116 + C90526 * C91122) +
         C90526 * (2 * C91121 + be * C91122 +
                   C90526 * (C91117 + be * C90526 * C91118 +
                             C90526 * (be * C91118 + C90526 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90741)))) /
        C90099;
    const double C6304 = (ae * (C90540 + C90526 * C91036 + C91034 * be) +
                          C90570 * (C91108 + be * C91116 + C90526 * C91121)) /
                         C90099;
    const double C6307 = (be * C90708 + C90526 * C91108 + ae * C90570 * C91036 +
                          C90570 * (ae * C91036 + C90570 * C91121)) /
                         C90099;
    const double C14516 =
        (2 * (ae * C91036 + C90570 * C91121) + ae * (C91036 + C91077 * C90756) +
         C90570 * (C91121 + ae * C90570 * C91077 +
                   C90570 * (ae * C91077 +
                             C90570 * (be * C91118 + C90526 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90741)))) /
        C90099;
    const double C11597 =
        (3 * (C91108 + ae * C91295 + C90570 * C91298) +
         ae * (2 * C91295 + C90570 * C91299) +
         C90570 * (2 * C91298 + ae * C91299 +
                   C90570 * (C91117 + ae * C90570 * C91066 +
                             C90570 * (ae * C91066 + C90570 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90741)))) /
        C90099;
    const double C91506 = C91501 + C91504;
    const double C91581 = C91444 + C91579;
    const double C91660 = C91652 + C91658;
    const double C15495 = C14704 * C805;
    const double C15493 = C14704 * C804;
    const double C15771 = C14704 * C1014;
    const double C15765 = C14704 * C800;
    const double C15760 = C14704 * C1010;
    const double C15754 = C14704 * C795;
    const double C16005 = C14704 * C1196;
    const double C16000 = C14704 * C1192;
    const double C17262 = C14704 * C1011;
    const double C17256 = C14704 * C794;
    const double C17591 = C14704 * C1193;
    const double C19175 = C14704 * C3589;
    const double C19169 = C14704 * C3359;
    const double C19475 = C14704 * C3803;
    const double C21197 = C14704 * C1386;
    const double C21195 = C14704 * C1385;
    const double C21473 = C14704 * C1595;
    const double C21467 = C14704 * C1381;
    const double C21462 = C14704 * C1591;
    const double C21456 = C14704 * C1376;
    const double C21713 = C14704 * C1777;
    const double C21708 = C14704 * C1773;
    const double C23251 = C14704 * C1592;
    const double C23245 = C14704 * C1375;
    const double C23562 = C14704 * C1774;
    const double C32046 = C31258 * C805;
    const double C32044 = C31258 * C804;
    const double C32322 = C31258 * C1014;
    const double C32316 = C31258 * C800;
    const double C32311 = C31258 * C1010;
    const double C32305 = C31258 * C795;
    const double C32556 = C31258 * C1196;
    const double C32551 = C31258 * C1192;
    const double C33811 = C31258 * C1011;
    const double C33805 = C31258 * C794;
    const double C34139 = C31258 * C1193;
    const double C35710 = C31258 * C3589;
    const double C35704 = C31258 * C3359;
    const double C36010 = C31258 * C3803;
    const double C62487 = C31258 * C1386;
    const double C62485 = C31258 * C1385;
    const double C62763 = C31258 * C1595;
    const double C62757 = C31258 * C1381;
    const double C62752 = C31258 * C1591;
    const double C62746 = C31258 * C1376;
    const double C63003 = C31258 * C1777;
    const double C62998 = C31258 * C1773;
    const double C64526 = C31258 * C1592;
    const double C64520 = C31258 * C1375;
    const double C64837 = C31258 * C1774;
    const double C90118 = C92097 - C90116;
    const double C36945 = C36935 - C36936;
    const double C36944 = C36933 - C36934;
    const double C36943 = C36931 - C36932;
    const double C37115 = C37110 - C37111;
    const double C37114 = C37107 - C37108;
    const double C57085 = C39232 - C39231;
    const double C60428 = C39231 - C39232;
    const double C44152 = C39229 - C39230;
    const double C44150 = C39230 - C39229;
    const double C44151 = C39227 - C39228;
    const double C44149 = C39228 - C39227;
    const double C57319 = C39446 - C39445;
    const double C60749 = C39445 - C39446;
    const double C44488 = C39443 - C39444;
    const double C44487 = C39444 - C39443;
    const double C41407 = C40596 - C40597;
    const double C44153 = C40597 - C40596;
    const double C41700 = C40838 - C40839;
    const double C44489 = C40839 - C40838;
    const double C72044 = C41412 - C41411;
    const double C72043 = C41410 - C41409;
    const double C41418 = C41405 - C41406;
    const double C41417 = C41403 - C41404;
    const double C41705 = C41698 - C41699;
    const double C15508 = C92357 * C822;
    const double C15488 = C92357 * C821;
    const double C15768 = C92357 * C1020;
    const double C15762 = C92357 * C810;
    const double C15755 = C92357 * C1016;
    const double C15749 = C92357 * C808;
    const double C16002 = C92357 * C1202;
    const double C15995 = C92357 * C1198;
    const double C16922 = C92357 * C820;
    const double C17259 = C92357 * C1017;
    const double C17253 = C92357 * C806;
    const double C17588 = C92357 * C1199;
    const double C18861 = C92357 * C3369;
    const double C19172 = C92357 * C3591;
    const double C19166 = C92357 * C3361;
    const double C19472 = C92357 * C3805;
    const double C21210 = C92357 * C1403;
    const double C21190 = C92357 * C1402;
    const double C21470 = C92357 * C1601;
    const double C21464 = C92357 * C1391;
    const double C21457 = C92357 * C1597;
    const double C21451 = C92357 * C1389;
    const double C21710 = C92357 * C1783;
    const double C21703 = C92357 * C1779;
    const double C22911 = C92357 * C1401;
    const double C23248 = C92357 * C1598;
    const double C23242 = C92357 * C1387;
    const double C23559 = C92357 * C1780;
    const double C89 = (C92357 * C92092) / C90095 + (C92320 - C92344) / C90100;
    const double C15504 = C92358 * C823;
    const double C15492 = C92358 * C820;
    const double C15770 = C92358 * C1021;
    const double C15764 = C92358 * C812;
    const double C15757 = C92358 * C1017;
    const double C15751 = C92358 * C806;
    const double C16004 = C92358 * C1203;
    const double C15997 = C92358 * C1199;
    const double C17261 = C92358 * C1018;
    const double C17255 = C92358 * C804;
    const double C17590 = C92358 * C1200;
    const double C19174 = C92358 * C3592;
    const double C19168 = C92358 * C3363;
    const double C19474 = C92358 * C3806;
    const double C21206 = C92358 * C1404;
    const double C21194 = C92358 * C1401;
    const double C21472 = C92358 * C1602;
    const double C21466 = C92358 * C1393;
    const double C21459 = C92358 * C1598;
    const double C21453 = C92358 * C1387;
    const double C21712 = C92358 * C1784;
    const double C21705 = C92358 * C1780;
    const double C23250 = C92358 * C1599;
    const double C23244 = C92358 * C1385;
    const double C23561 = C92358 * C1781;
    const double C90 =
        (C92358 * C92092) / C90095 + (2 * C92102 + C92357) / C90100;
    const double C91 = (C92092 * C92102) / C90104 + C92358 / C90100;
    const double C90186 = C92177 - C90185;
    const double C31362 = C31347 - C31348;
    const double C31877 = C31870 - C31871;
    const double C53972 = C34547 - C34548;
    const double C53968 = C34548 - C34547;
    const double C54776 = C35179 - C35180;
    const double C54774 = C35180 - C35179;
    const double C44893 = C44875 * C800;
    const double C44888 = C44875 * C813;
    const double C44882 = C44875 * C799;
    const double C45140 = C44875 * C1014;
    const double C45138 = C44875 * C882;
    const double C45136 = C44875 * C1013;
    const double C45134 = C44875 * C881;
    const double C45400 = C44875 * C1196;
    const double C45395 = C44875 * C1195;
    const double C47147 = C44875 * C4819;
    const double C47141 = C44875 * C4814;
    const double C47786 = C44875 * C5418;
    const double C48095 = C44875 * C5708;
    const double C48089 = C44875 * C5701;
    const double C48710 = C44875 * C6218;
    const double C57657 = C44875 * C5716;
    const double C57651 = C44875 * C5705;
    const double C57646 = C44875 * C5710;
    const double C57640 = C44875 * C5702;
    const double C57891 = C44875 * C5971;
    const double C57889 = C44875 * C5799;
    const double C58155 = C44875 * C6221;
    const double C58150 = C44875 * C6217;
    const double C60222 = C44875 * C8457;
    const double C60216 = C44875 * C8454;
    const double C60852 = C44875 * C9122;
    const double C442 = C438 + C421;
    const double C11337 = C11333 + C11314;
    const double C44896 = C92359 * C191;
    const double C44890 = C92359 * C185;
    const double C44883 = C92359 * C190;
    const double C44877 = C92359 * C184;
    const double C45149 = C92359 * C413;
    const double C45129 = C92359 * C412;
    const double C45397 = C92359 * C631;
    const double C45390 = C92359 * C630;
    const double C47144 = C92359 * C885;
    const double C47138 = C92359 * C877;
    const double C47470 = C92359 * C1076;
    const double C47783 = C92359 * C1257;
    const double C48092 = C92359 * C1466;
    const double C48086 = C92359 * C1458;
    const double C48402 = C92359 * C1657;
    const double C48707 = C92359 * C1838;
    const double C57654 = C92359 * C1469;
    const double C57648 = C92359 * C1461;
    const double C57641 = C92359 * C1465;
    const double C57635 = C92359 * C1457;
    const double C57904 = C92359 * C1659;
    const double C57884 = C92359 * C1658;
    const double C58152 = C92359 * C1841;
    const double C58145 = C92359 * C1837;
    const double C60219 = C92359 * C3443;
    const double C60213 = C92359 * C3439;
    const double C60531 = C92359 * C3661;
    const double C60849 = C92359 * C3875;
    const double C36258 =
        (C92359 * C92221) / C90095 + (C92333 - C92351) / C90100;
    const double C44898 = C92360 * C886;
    const double C44892 = C92360 * C878;
    const double C44885 = C92360 * C885;
    const double C44879 = C92360 * C877;
    const double C45145 = C92360 * C1075;
    const double C45133 = C92360 * C1076;
    const double C45399 = C92360 * C1258;
    const double C45392 = C92360 * C1257;
    const double C47146 = C92360 * C889;
    const double C47140 = C92360 * C881;
    const double C47466 = C92360 * C1079;
    const double C47785 = C92360 * C1261;
    const double C48094 = C92360 * C3444;
    const double C48088 = C92360 * C3440;
    const double C48398 = C92360 * C3662;
    const double C48709 = C92360 * C3876;
    const double C57656 = C92360 * C5807;
    const double C57650 = C92360 * C5801;
    const double C57643 = C92360 * C3443;
    const double C57637 = C92360 * C3439;
    const double C57900 = C92360 * C6059;
    const double C57888 = C92360 * C3661;
    const double C58154 = C92360 * C6305;
    const double C58147 = C92360 * C3875;
    const double C60221 = C92360 * C5805;
    const double C60215 = C92360 * C5799;
    const double C60535 = C92360 * C6058;
    const double C60851 = C92360 * C6303;
    const double C36259 =
        (C92360 * C92221) / C90095 + (2 * C92226 + C92359) / C90100;
    const double C36260 = (C92221 * C92226) / C90104 + C92360 / C90100;
    const double C90212 = C92188 - C90211;
    const double C61217 = C61202 - C61203;
    const double C61458 = C61451 - C61452;
    const double C77181 = C63449 - C63450;
    const double C77177 = C63450 - C63449;
    const double C77581 = C63759 - C63760;
    const double C77579 = C63760 - C63759;
    const double C66870 = C66857 - C66858;
    const double C66868 = C66853 - C66854;
    const double C80586 = C80568 * C1381;
    const double C80581 = C80568 * C1394;
    const double C80575 = C80568 * C1380;
    const double C80826 = C80568 * C1595;
    const double C80821 = C80568 * C1594;
    const double C81067 = C80568 * C1777;
    const double C81065 = C80568 * C1529;
    const double C81063 = C80568 * C1776;
    const double C81061 = C80568 * C1528;
    const double C82778 = C80568 * C5704;
    const double C83382 = C80568 * C6220;
    const double C83380 = C80568 * C5888;
    const double C83719 = C80568 * C10872;
    const double C83713 = C80568 * C10867;
    const double C84031 = C80568 * C11192;
    const double C86154 = C80568 * C5716;
    const double C86148 = C80568 * C5705;
    const double C86143 = C80568 * C5712;
    const double C86137 = C80568 * C5703;
    const double C86383 = C80568 * C5973;
    const double C86626 = C80568 * C6221;
    const double C86624 = C80568 * C5889;
    const double C86622 = C80568 * C6219;
    const double C86620 = C80568 * C5887;
    const double C89449 = C80568 * C13752;
    const double C89443 = C80568 * C13749;
    const double C89763 = C80568 * C14081;
    const double C733 = C729 + C712;
    const double C5624 = C5620 + C5603;
    const double C80589 = C92361 * C274;
    const double C80583 = C92361 * C268;
    const double C80576 = C92361 * C273;
    const double C80570 = C92361 * C267;
    const double C80823 = C92361 * C497;
    const double C80816 = C92361 * C496;
    const double C81076 = C92361 * C704;
    const double C81056 = C92361 * C703;
    const double C82781 = C92361 * C951;
    const double C82775 = C92361 * C943;
    const double C83081 = C92361 * C1133;
    const double C83391 = C92361 * C1316;
    const double C83716 = C92361 * C1532;
    const double C83710 = C92361 * C1524;
    const double C84028 = C92361 * C1714;
    const double C84342 = C92361 * C1897;
    const double C86151 = C92361 * C954;
    const double C86145 = C92361 * C946;
    const double C86138 = C92361 * C950;
    const double C86132 = C92361 * C942;
    const double C86385 = C92361 * C1136;
    const double C86378 = C92361 * C1132;
    const double C86635 = C92361 * C1318;
    const double C86615 = C92361 * C1317;
    const double C89446 = C92361 * C3517;
    const double C89440 = C92361 * C3513;
    const double C89760 = C92361 * C3731;
    const double C90074 = C92361 * C3945;
    const double C70949 =
        (C92361 * C92247) / C90095 + (C92334 - C92354) / C90100;
    const double C80591 = C92362 * C1533;
    const double C80585 = C92362 * C1525;
    const double C80578 = C92362 * C1532;
    const double C80572 = C92362 * C1524;
    const double C80825 = C92362 * C1715;
    const double C80818 = C92362 * C1714;
    const double C81072 = C92362 * C1896;
    const double C81060 = C92362 * C1897;
    const double C82783 = C92362 * C3518;
    const double C82777 = C92362 * C3514;
    const double C83083 = C92362 * C3732;
    const double C83387 = C92362 * C3946;
    const double C83718 = C92362 * C1536;
    const double C83712 = C92362 * C1528;
    const double C84030 = C92362 * C1718;
    const double C84338 = C92362 * C1900;
    const double C86153 = C92362 * C5891;
    const double C86147 = C92362 * C5885;
    const double C86140 = C92362 * C3517;
    const double C86134 = C92362 * C3513;
    const double C86387 = C92362 * C6137;
    const double C86380 = C92362 * C3731;
    const double C86631 = C92362 * C6384;
    const double C86619 = C92362 * C3945;
    const double C89448 = C92362 * C5893;
    const double C89442 = C92362 * C5887;
    const double C89762 = C92362 * C6139;
    const double C90070 = C92362 * C6385;
    const double C70950 =
        (C92362 * C92247) / C90095 + (2 * C92252 + C92361) / C90100;
    const double C70951 = (C92247 * C92252) / C90104 + C92362 / C90100;
    const double C215 = C206 - C207;
    const double C298 = C289 - C290;
    const double C37049 = C5340 - C5339;
    const double C36946 = C36937 - C36938;
    const double C57236 = C26175 - C26174;
    const double C57086 = C39234 - C39233;
    const double C60429 = C39233 - C39234;
    const double C67111 = C67104 - C67105;
    const double C41408 = C40598 - C40599;
    const double C44154 = C40599 - C40598;
    const double C72272 = C11605 - C11604;
    const double C72218 = C41702 - C41701;
    const double C5059 = C5047 * C4030;
    const double C45750 = C5047 * C90114;
    const double C4735 = C4733 - C4725;
    const double C11029 = C11017 * C4030;
    const double C81926 = C11017 * C90114;
    const double C9767 = C9765 - C9759;
    const double C8352 = C8350 - C8346;
    const double C12219 = C12217 - C12214;
    const double C5173 = C5158 - C5159;
    const double C45854 = C45839 - C45840;
    const double C11225 = C11210 - C11211;
    const double C82080 = C51956 - C51955;
    const double C30477 = C8807 - C8808;
    const double C30473 = C8808 - C8807;
    const double C55436 = C49235 - C49236;
    const double C55432 = C49236 - C49235;
    const double C14205 = C14199 - C14200;
    const double C86803 = C26723 - C26722;
    const double C41239 = C41224 - C41225;
    const double C443 = C439 + C425;
    const double C444 = C440 + C429;
    const double C2293 = C2290 + C2284;
    const double C2986 = C2983 + C2977;
    const double C11338 = C11334 + C11319;
    const double C14208 = C14206 + C14197;
    const double C734 = C730 + C716;
    const double C735 = C731 + C720;
    const double C2595 = C2592 + C2586;
    const double C5625 = C5621 + C5607;
    const double C3288 = C3285 + C3279;
    const double C9348 = C9346 + C9342;
    const double C516 = C504 + C514;
    const double C650 = C638 + C648;
    const double C90470 = C90468 + C90456;
    const double C6631 = C4027 * C4953;
    const double C47148 = C44794 * C4953;
    const double C12997 = C9424 * C11114;
    const double C83720 = C80417 * C11114;
    const double C12008 = C9424 * C5894;
    const double C29127 = C92252 * C5894;
    const double C78373 = C92252 * C5894;
    const double C82785 = C80417 * C5894;
    const double C11895 = C182 * C5714;
    const double C12007 = C9583 * C5714;
    const double C13764 = C4030 * C5714;
    const double C26734 = C14781 * C5714;
    const double C29126 = C19899 * C5714;
    const double C41976 = C36262 * C5714;
    const double C42998 = C31335 * C5714;
    const double C51619 = C90114 * C5714;
    const double C78372 = C61190 * C5714;
    const double C82784 = C80568 * C5714;
    const double C90469 = C90467 + C90453;
    const double C90491 = C90482 + C90473;
    const double C5171 = C92102 * C5144;
    const double C37994 = C92097 * C5144;
    const double C45852 = C92102 * C5144;
    const double C11517 = C92102 * C11502;
    const double C73397 = C92097 * C11502;
    const double C82330 = C92102 * C11502;
    const double C8820 = C92102 * C5978;
    const double C49248 = C92102 * C5978;
    const double C58637 = C92097 * C5978;
    const double C14417 = C92102 * C6226;
    const double C42585 = C92097 * C6226;
    const double C52274 = C92102 * C6226;
    const double C13762 = C4030 * C5713;
    const double C14089 = C92102 * C5713;
    const double C41974 = C36262 * C5713;
    const double C42285 = C92097 * C5713;
    const double C51617 = C90114 * C5713;
    const double C51964 = C92102 * C5713;
    const double C6499 = C92102 * C819;
    const double C15496 = C14697 * C819;
    const double C16926 = C92358 * C819;
    const double C32047 = C31251 * C819;
    const double C33477 = C31250 * C819;
    const double C47018 = C92102 * C819;
    const double C8474 = C92102 * C3370;
    const double C18857 = C92358 * C3370;
    const double C27609 = C4023 * C3370;
    const double C35392 = C31250 * C3370;
    const double C41973 = C92097 * C3370;
    const double C48922 = C92102 * C3370;
    const double C52604 = C92320 * C3370;
    const double C13761 = C4023 * C5721;
    const double C40335 = C92097 * C5721;
    const double C51624 = C92320 * C5721;
    const double C12759 = C92102 * C1400;
    const double C21198 = C14697 * C1400;
    const double C22915 = C92358 * C1400;
    const double C53830 = C92102 * C1400;
    const double C62488 = C31251 * C1400;
    const double C64192 = C31250 * C1400;
    const double C90516 = C90513 + C90497;
    const double C5896 =
        (C90592 + C90606 * C90658 + be * C90570 * C91012 +
         C90570 *
             (be * C91012 +
              C90570 * (C90606 + (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576) *
                                     C90658))) /
        C90099;
    const double C8693 =
        (be * (2 * C91008 + C90526 * C91012) +
         C90570 *
             (2 * C90526 * C90606 +
              C90526 * (C90606 + (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576) *
                                     C90658))) /
        C90099;
    const double C4825 = (3 * (C90436 + C90462 * C90658) +
                          C90526 * (2 * C91008 + C90526 * C91012)) /
                         C90095;
    const double C5718 = (C90436 + C90462 * C90658 + C91012 * C90756) / C90095;
    const double C8459 = (C90570 * (2 * C91008 + C90526 * C91012)) / C90095;
    const double C10878 = (3 * (C90436 + C90462 * C90756) +
                           C90570 * (2 * C91249 + C90570 * C91253)) /
                          C90095;
    const double C91474 = C91472 + C91461;
    const double C91690 = C91688 + C91682;
    const double C6835 = (2 * (C90526 * C90636 + C90454 * ae) +
                          C90526 * (C90636 + C90526 * C91192 + C91189 * ae) +
                          (C90454 + C90495 * C90658) * ae) /
                         C90095;
    const double C7810 =
        (C90570 * (C90636 + C90526 * C91192 + C91189 * ae)) / C90095;
    const double C12106 =
        (C90526 * C90636 + C90454 * ae + C91192 * C90756) / C90095;
    const double C13419 = (2 * (C90570 * C90717 + C90454 * ae) +
                           C90570 * (C90717 + C90570 * C91376 + C91373 * ae) +
                           (C90454 + C90495 * C90756) * ae) /
                          C90095;
    const double C3734 =
        (ae * (C90570 * C90611 + C90506 * be) +
         C90526 * (be * C90654 +
                   C90570 * (2 * C90404 * C90690 +
                             C90404 * (C90690 + std::pow(C90410, 7) * bs[7] *
                                                    C90681 * C90408)))) /
        C90099;
    const double C3878 =
        (ae * (C90526 * C90567 + C90506 * be) +
         C90570 * (be * C90735 +
                   C90526 * (2 * C90404 * C90750 +
                             C90404 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C883 =
        (2 * C90540 + C90404 * C90549 +
         C90526 * (C90526 * C90567 + C90506 * be) + C90526 * C90506 * be) /
        C90095;
    const double C1015 =
        (2 * C90627 + C90404 * C90636 +
         C90526 * (C90526 * C90654 + C90506 * ae) + C90526 * C90506 * ae) /
        C90095;
    const double C1530 =
        (2 * C90584 + C90404 * C90593 +
         C90570 * (C90570 * C90611 + C90506 * be) + C90570 * C90506 * be) /
        C90095;
    const double C1778 =
        (2 * C90708 + C90404 * C90717 +
         C90570 * (C90570 * C90735 + C90506 * ae) + C90570 * C90506 * ae) /
        C90095;
    const double C2043 = (C90526 * (3 * C90549 + C90404 * C90567) +
                          (3 * C90454 + C90404 * C90506) * be) /
                         C90095;
    const double C2203 = (C90526 * (3 * C90636 + C90404 * C90654) +
                          (3 * C90454 + C90404 * C90506) * ae) /
                         C90095;
    const double C2816 = (C90570 * (3 * C90593 + C90404 * C90611) +
                          (3 * C90454 + C90404 * C90506) * be) /
                         C90095;
    const double C3125 = (C90570 * (3 * C90717 + C90404 * C90735) +
                          (3 * C90454 + C90404 * C90506) * ae) /
                         C90095;
    const double C3442 = (C90570 * (C90526 * C90567 + C90506 * be)) / C90095;
    const double C3516 =
        (C90570 * C90526 * C90611 + C90526 * C90506 * be) / C90095;
    const double C3590 = (C90570 * (C90526 * C90654 + C90506 * ae)) / C90095;
    const double C3804 =
        (C90570 * C90526 * C90735 + C90526 * C90506 * ae) / C90095;
    const double C113 = 4 * (2 * C90425 + C90404 * C90454) +
                        C90404 * (3 * C90454 + C90404 * C90506);
    const double C801 = 2 * C90425 + C90404 * C90454 + C90506 * C90658;
    const double C1382 = 2 * C90425 + C90404 * C90454 + C90506 * C90756;
    const double C1973 = C90526 * (3 * C90454 + C90404 * C90506);
    const double C2666 = C90570 * (3 * C90454 + C90404 * C90506);
    const double C3360 = C90570 * C90526 * C90506;
    const double C8233 =
        (ae * (C90549 + C90526 * C91191 + C91189 * be) +
         C90570 * (C90752 + be * C90526 * C90731 +
                   C90526 * (be * C90731 +
                             C90526 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C12524 =
        (be * C90717 + C90526 * C90752 + ae * C90570 * C91191 +
         C90570 * (ae * C91191 +
                   C90570 * (be * C90731 +
                             C90526 * (C90750 + std::pow(C90410, 7) * bs[7] *
                                                    C90741 * C90408)))) /
        C90099;
    const double C6617 = (2 * (C90526 * C90549 + C90454 * be) +
                          C90526 * (C90549 + C90526 * C91191 + C91189 * be) +
                          (C90454 + C90495 * C90658) * be) /
                         C90095;
    const double C7590 =
        (C90570 * (C90549 + C90526 * C91191 + C91189 * be)) / C90095;
    const double C11886 =
        (C90526 * C90549 + C90454 * be + C91191 * C90756) / C90095;
    const double C12983 = (2 * (C90570 * C90593 + C90454 * be) +
                           C90570 * (C90593 + C90570 * C91375 + C91373 * be) +
                           (C90454 + C90495 * C90756) * be) /
                          C90095;
    const double C91082 = C90638 + C91080;
    const double C91347 = C90719 + C91345;
    const double C91081 = C90551 + C91079;
    const double C91346 = C90595 + C91344;
    const double C14410 = (2 * (C90570 * C91116 + C91034 * ae) +
                           C90570 * (C91116 + C90570 * C91416 + C91411 * ae) +
                           (C91034 + C91067 * C90756) * ae) /
                          C90095;
    const double C13980 = (2 * (C90570 * C91095 + C91034 * be) +
                           C90570 * (C91095 + C90570 * C91415 + C91411 * be) +
                           (C91034 + C91067 * C90756) * be) /
                          C90095;
    const double C90515 = C90512 + C90494;
    const double C6228 =
        (C90716 + C90730 * C90658 + ae * C90570 * C91030 +
         C90570 *
             (ae * C91030 +
              C90570 * (C90730 + (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700) *
                                     C90658))) /
        C90099;
    const double C8803 =
        (2 * (ae * C90570 * C90461 + C90526 * C91215) + ae * C90570 * C91030 +
         C90526 * (C91215 + ae * C90570 * C90526 * C90505 +
                   C90526 * (ae * C90570 * C90505 +
                             C90526 * C90570 *
                                 (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619)))) /
        C90099;
    const double C9125 =
        (ae * (2 * C91026 + C90526 * C91030) +
         C90570 *
             (2 * C90526 * C90730 +
              C90526 * (C90730 + (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700) *
                                     C90658))) /
        C90099;
    const double C4824 = (3 * (C90435 + C90461 * C90658) +
                          C90526 * (2 * C91026 + C90526 * C91030)) /
                         C90095;
    const double C5717 = (C90435 + C90461 * C90658 + C91030 * C90756) / C90095;
    const double C8458 = (C90570 * (2 * C91026 + C90526 * C91030)) / C90095;
    const double C14084 =
        (ae * (2 * C91281 + C90570 * C91285) +
         C90526 *
             (2 * C91215 +
              C90570 * (C90649 + (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619) *
                                     C90756))) /
        C90099;
    const double C10877 = (3 * (C90435 + C90461 * C90756) +
                           C90570 * (2 * C91281 + C90570 * C91285)) /
                          C90095;
    const double C91473 = C91470 + C91458;
    const double C41211 = (3 * (C91042 + C91052 * C90756) +
                           C90570 * (2 * C91578 + C90570 * C91582)) /
                          C90095;
    const double C91689 = C91687 + C91679;
    const double C90514 = C90404 * C90511;
    const double C4826 =
        (ae * (2 * C90526 * C90429 + C90526 * (C90429 + C90452 * C90658)) +
         be * (2 * C90526 * C90430 + C90526 * (C90430 + C90455 * C90658)) +
         C90404 * (2 * C90775 + C90526 * C90784)) /
        C90099;
    const double C4828 = (3 * (C90434 + C90460 * C90658) +
                          C90526 * (2 * C90775 + C90526 * C90784)) /
                         C90099;
    const double C4829 =
        (ae * (3 * (C90429 + C90452 * C90658) +
               C90526 * (2 * C90925 + C90526 * (C90452 + C90493 * C90658))) +
         be * (3 * (C90430 + C90455 * C90658) +
               C90526 * (2 * C90926 + C90526 * (C90455 + C90496 * C90658))) +
         C90404 * (3 * C90784 +
                   C90526 * (2 * C90927 +
                             C90526 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C5719 = (ae * C90570 * C91024 + be * C90570 * C91006 +
                          C90404 * C90570 * C90784) /
                         C90099;
    const double C5723 = (C90434 + C90460 * C90658 + C90784 * C90756) / C90099;
    const double C5724 =
        (ae * (C91024 + (C90452 + C90493 * C90658) * C90756) +
         be * (C91006 + (C90455 + C90496 * C90658) * C90756) +
         C90404 * (C90784 + (C90504 + (C90477 * C90478 +
                                       C90408 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90658) *
                                C90756)) /
        C90099;
    const double C6490 =
        (2 * C90775 + C90526 * C90784 + ae * (2 * C91026 + C90526 * C91030) +
         be * (2 * C91008 + C90526 * C91012) +
         C90404 * (ae * (2 * C90925 + C90526 * (C90452 + C90493 * C90658)) +
                   be * (2 * C90926 + C90526 * (C90455 + C90496 * C90658)) +
                   C90404 * (2 * C90927 +
                             C90526 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C7491 =
        (C90570 * C90784 + ae * C90570 * C91030 + be * C90570 * C91012 +
         C90404 * (ae * C90570 * (C90452 + C90493 * C90658) +
                   be * C90570 * (C90455 + C90496 * C90658) +
                   C90404 * C90570 *
                       (C90504 + (C90477 * C90478 +
                                  C90408 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90658))) /
        C90099;
    const double C8460 = (C90570 * (2 * C90775 + C90526 * C90784)) / C90099;
    const double C36725 =
        (4 * (2 * C90775 + C90526 * C90784) +
         C90526 * (3 * C90784 +
                   C90526 * (2 * C90927 +
                             C90526 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C37281 =
        (2 * C90775 + C90526 * C90784 +
         (2 * C90927 +
          C90526 * (C90504 +
                    (C90477 * C90478 + C90408 * bs[7] * std::pow(C90410, 7)) *
                        C90097 * C90658)) *
             C90756) /
        C90099;
    const double C38993 =
        (C90570 *
         (3 * C90784 +
          C90526 * (2 * C90927 +
                    C90526 * (C90504 + (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C43816 =
        (2 * C90570 * C90784 +
         C90570 * (C90784 + (C90504 + (C90477 * C90478 +
                                       C90408 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90658) *
                                C90756)) /
        C90099;
    const double C10879 =
        (ae * (2 * C90570 * C90429 + C90570 * (C90429 + C90452 * C90756)) +
         be * (2 * C90570 * C90430 + C90570 * (C90430 + C90455 * C90756)) +
         C90404 * (2 * C90850 + C90570 * C90859)) /
        C90099;
    const double C10881 = (3 * (C90434 + C90460 * C90756) +
                           C90570 * (2 * C90850 + C90570 * C90859)) /
                          C90099;
    const double C10882 =
        (ae * (3 * (C90429 + C90452 * C90756) +
               C90570 * (2 * C90942 + C90570 * (C90452 + C90493 * C90756))) +
         be * (3 * (C90430 + C90455 * C90756) +
               C90570 * (2 * C90943 + C90570 * (C90455 + C90496 * C90756))) +
         C90404 * (3 * C90859 +
                   C90570 * (2 * C90944 +
                             C90570 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C12750 =
        (2 * C90850 + C90570 * C90859 + ae * (2 * C91281 + C90570 * C91285) +
         be * (2 * C91249 + C90570 * C91253) +
         C90404 * (ae * (2 * C90942 + C90570 * (C90452 + C90493 * C90756)) +
                   be * (2 * C90943 + C90570 * (C90455 + C90496 * C90756)) +
                   C90404 * (2 * C90944 +
                             C90570 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C71864 =
        (4 * (2 * C90850 + C90570 * C90859) +
         C90570 * (3 * C90859 +
                   C90570 * (2 * C90944 +
                             C90570 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C90932 = C90931 + C90930;
    const double C13756 =
        (ae * (2 * C90570 * C90925 +
               C90570 * (C90925 + C90526 * C90493 * C90756)) +
         be * (2 * C90570 * C90926 +
               C90570 * (C90926 + C90526 * C90496 * C90756)) +
         C90404 *
             (2 * C90962 +
              C90570 * (C90927 + C90526 *
                                     (C90477 * C90478 +
                                      C90408 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C41108 =
        (3 * (C90775 + C90927 * C90756) +
         C90570 *
             (2 * C90962 +
              C90570 * (C90927 + C90526 *
                                     (C90477 * C90478 +
                                      C90408 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C18853 = C14697 * C3371;
    const double C27613 = C92102 * C3371;
    const double C35388 = C31251 * C3371;
    const double C52608 = C92102 * C3371;
    const double C13765 = C92102 * C5722;
    const double C41977 = C92097 * C5722;
    const double C51620 = C92102 * C5722;
    const double C41121 = C92097 * C13755;
    const double C90949 = C90948 + C90947;
    const double C416 =
        (4 * (2 * C90404 * C90668 + C90404 * C90675) +
         C90404 * (3 * C90675 +
                   C90404 * (2 * C90404 * C90673 +
                             C90404 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C1074 = (ae * (2 * C90540 + C90404 * C90549) +
                          be * (2 * C90627 + C90404 * C90636) +
                          C90526 * (2 * C90404 * C90668 + C90404 * C90675)) /
                         C90099;
    const double C1080 =
        (C90663 + C90668 * C90408 + ae * (C90526 * C90549 + C90454 * be) +
         be * (C90526 * C90636 + C90454 * ae) +
         C90526 * (ae * C90549 + be * C90636 + C90526 * C90675)) /
        C90099;
    const double C1081 =
        (2 * C90404 * C90668 + C90404 * C90675 +
         ae * (C90526 * C90567 + C90506 * be) +
         be * (C90526 * C90654 + C90506 * ae) +
         C90526 * (ae * C90567 + be * C90654 +
                   C90526 * (2 * C90404 * C90673 +
                             C90404 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C1655 =
        (C90570 * (2 * C90404 * C90668 + C90404 * C90675)) / C90099;
    const double C1661 = (C90663 + C90668 * C90408 + C90675 * C90756) / C90099;
    const double C1662 =
        (2 * C90404 * C90668 + C90404 * C90675 +
         (2 * C90404 * C90673 +
          C90404 * (C90673 +
                    (C90477 * C90478 + C90658 * bs[7] * std::pow(C90410, 7)) *
                        C90097 * C90408)) *
             C90756) /
        C90099;
    const double C2271 =
        (ae * (3 * C90549 + C90404 * C90567) +
         be * (3 * C90636 + C90404 * C90654) +
         C90526 * (3 * C90675 +
                   C90404 * (2 * C90404 * C90673 +
                             C90404 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C2964 =
        (C90570 *
         (3 * C90675 +
          C90404 * (2 * C90404 * C90673 +
                    C90404 * (C90673 + (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C3663 = (ae * C90570 * C90549 + be * C90570 * C90636 +
                          C90526 * C90570 * C90675) /
                         C90099;
    const double C6951 =
        (2 * (ae * C90549 + be * C90636 + C90526 * C90675) +
         ae * (C90549 + C90526 * C91191 + C91189 * be) +
         be * (C90636 + C90526 * C91192 + C91189 * ae) +
         C90526 * (C90675 + ae * C91191 + be * C91192 +
                   C90526 * (ae * C90563 + be * C90650 +
                             C90526 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C7910 =
        (C90570 * C90675 + ae * C90570 * C91191 + be * C90570 * C91192 +
         C90526 * (ae * C90570 * C90563 + be * C90570 * C90650 +
                   C90526 * C90570 *
                       (C90673 + (C90477 * C90478 +
                                  C90658 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90408))) /
        C90099;
    const double C12206 =
        (ae * (C90549 + C90563 * C90756) + be * (C90636 + C90650 * C90756) +
         C90526 * (C90675 + (C90673 + (C90477 * C90478 +
                                       C90658 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90408) *
                                C90756)) /
        C90099;
    const double C13211 =
        (2 * C90570 * C90675 +
         C90570 * (C90675 + (C90673 + (C90477 * C90478 +
                                       C90658 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90408) *
                                C90756)) /
        C90099;
    const double C91076 = C91064 + C91070;
    const double C11309 =
        (3 * (C91032 + C91065 * C90756) +
         C90570 *
             (2 * C91219 +
              C90570 * (C91065 + C90404 *
                                     (C90477 * C90478 +
                                      C90658 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C14192 =
        (ae * (2 * C91295 + C90570 * C91299) +
         be * (2 * C91269 + C90570 * C91271) +
         C90526 *
             (2 * C91219 +
              C90570 * (C91065 + C90404 *
                                     (C90477 * C90478 +
                                      C90658 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90756))) /
        C90099;
    const double C91463 = C90526 * C91456;
    const double C41499 =
        (ae * (3 * C91293 +
               C90570 * (2 * C91539 + C90570 * (C90545 + C90558 * C90756))) +
         be * (3 * C91267 +
               C90570 * (2 * C91521 + C90570 * (C90632 + C90645 * C90756))) +
         C90526 * (3 * C91519 +
                   C90570 * (2 * C91540 +
                             C90570 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C44252 =
        (2 * C91217 + C90570 * C91519 + ae * (2 * C91578 + C90570 * C91582) +
         be * (2 * C90570 * C91055 + C90570 * (C91055 + C91460 * C90756)) +
         C90526 * (ae * (2 * C91539 + C90570 * (C90545 + C90558 * C90756)) +
                   be * (2 * C91521 + C90570 * C91568) +
                   C90526 * (2 * C91540 +
                             C90570 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C72102 =
        (4 * (2 * C91217 + C90570 * C91519) +
         C90570 * (3 * C91519 +
                   C90570 * (2 * C91540 +
                             C90570 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C91544 = C91543 + C91542;
    const double C707 =
        (4 * (2 * C90404 * C90766 + C90404 * C90773) +
         C90404 * (3 * C90773 +
                   C90404 * (2 * C90404 * C90771 +
                             C90404 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C1314 =
        (C90526 * (2 * C90404 * C90766 + C90404 * C90773)) / C90099;
    const double C1320 = (C90761 + C90766 * C90408 + C90773 * C90658) / C90099;
    const double C1321 =
        (2 * C90404 * C90766 + C90404 * C90773 +
         (2 * C90404 * C90771 +
          C90404 * (C90771 +
                    (C90477 * C90478 + C90756 * bs[7] * std::pow(C90410, 7)) *
                        C90097 * C90408)) *
             C90658) /
        C90099;
    const double C1895 = (ae * (2 * C90584 + C90404 * C90593) +
                          be * (2 * C90708 + C90404 * C90717) +
                          C90570 * (2 * C90404 * C90766 + C90404 * C90773)) /
                         C90099;
    const double C1901 =
        (C90761 + C90766 * C90408 + ae * (C90570 * C90593 + C90454 * be) +
         be * (C90570 * C90717 + C90454 * ae) +
         C90570 * (ae * C90593 + be * C90717 + C90570 * C90773)) /
        C90099;
    const double C1902 =
        (2 * C90404 * C90766 + C90404 * C90773 +
         ae * (C90570 * C90611 + C90506 * be) +
         be * (C90570 * C90735 + C90506 * ae) +
         C90570 * (ae * C90611 + be * C90735 +
                   C90570 * (2 * C90404 * C90771 +
                             C90404 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C2573 =
        (C90526 *
         (3 * C90773 +
          C90404 * (2 * C90404 * C90771 +
                    C90404 * (C90771 + (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C3266 =
        (ae * (3 * C90593 + C90404 * C90611) +
         be * (3 * C90717 + C90404 * C90735) +
         C90570 * (3 * C90773 +
                   C90404 * (2 * C90404 * C90771 +
                             C90404 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C3947 = (ae * C90526 * C90593 + be * C90526 * C90717 +
                          C90570 * C90526 * C90773) /
                         C90099;
    const double C7386 =
        (2 * C90526 * C90773 +
         C90526 * (C90773 + (C90771 + (C90477 * C90478 +
                                       C90756 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90408) *
                                C90658)) /
        C90099;
    const double C8338 =
        (ae * (C90593 + C90607 * C90658) + be * (C90717 + C90731 * C90658) +
         C90570 * (C90773 + (C90771 + (C90477 * C90478 +
                                       C90756 * bs[7] * std::pow(C90410, 7)) *
                                          C90097 * C90408) *
                                C90658)) /
        C90099;
    const double C12627 =
        (C90526 * C90773 + ae * (C90570 * C91361 + C91189 * be) +
         be * (C90570 * C91362 + C91189 * ae) +
         C90570 * (ae * C91361 + be * C91362 +
                   C90570 * C90526 *
                       (C90771 + (C90477 * C90478 +
                                  C90756 * bs[7] * std::pow(C90410, 7)) *
                                     C90097 * C90408))) /
        C90099;
    const double C13629 =
        (2 * (ae * C90593 + be * C90717 + C90570 * C90773) +
         ae * (C90593 + C90570 * C91375 + C91373 * be) +
         be * (C90717 + C90570 * C91376 + C91373 * ae) +
         C90570 * (C90773 + ae * C91375 + be * C91376 +
                   C90570 * (ae * C90607 + be * C90731 +
                             C90570 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90408)))) /
        C90099;
    const double C91338 = C91332 + C91333;
    const double C14620 =
        (2 * (ae * C91095 + be * C91116 + C90570 * C91409) +
         ae * (C91095 + C90570 * C91415 + C91411 * be) +
         be * (C91116 + C90570 * C91416 + C91411 * ae) +
         C90570 * (C91409 + ae * C91415 + be * C91416 +
                   C90570 * (ae * C91410 + be * C91412 +
                             C90570 * C90526 * C90404 *
                                 (C90477 * C90478 +
                                  C90756 * bs[7] * std::pow(C90410, 7)) *
                                 C90097))) /
        C90099;
    const double C37220 =
        (4 * (2 * C91400 + C90526 * C91510) +
         C90526 * (3 * C91510 +
                   C90526 * (2 * C90526 * C90771 +
                             C90526 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C39581 =
        (ae * (3 * C91093 + C90526 * C91492) +
         be * (3 * C91114 + C90526 * C91507) +
         C90570 * (3 * C91510 +
                   C90526 * (2 * C90526 * C90771 +
                             C90526 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C91596 = C91584 + C91590;
    const double C91683 = C90570 * C91677;
    const double C44484 = (2 * (C90570 * C91114 + C91054 * ae) +
                           C90570 * (C91114 + C90570 * C91618 + C91615 * ae) +
                           (C91054 + C91459 * C90756) * ae) /
                          C90095;
    const double C37693 =
        (2 * C91400 + C90526 * C91510 + ae * (C90570 * C91492 + C91471 * be) +
         be * (C90570 * C91507 + C91471 * ae) +
         C90570 * (ae * C91492 + be * C91507 +
                   C90570 * (2 * C90526 * C90771 +
                             C90526 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C37384 =
        (2 * C91089 + C90526 * C91093 +
         C90570 * (C90570 * C91492 + C91471 * be) + C90570 * C91471 * be) /
        C90095;
    const double C37590 =
        (2 * C91110 + C90526 * C91114 +
         C90570 * (C90570 * C91507 + C91471 * ae) + C90570 * C91471 * ae) /
        C90095;
    const double C39152 = (C90570 * (3 * C91093 + C90526 * C91492) +
                           (3 * C91054 + C90526 * C91471) * be) /
                          C90095;
    const double C39440 = (C90570 * (3 * C91114 + C90526 * C91507) +
                           (3 * C91054 + C90526 * C91471) * ae) /
                          C90095;
    const double C36722 = 4 * (2 * C91040 + C90526 * C91054) +
                          C90526 * (3 * C91054 + C90526 * C91471);
    const double C37278 = 2 * C91040 + C90526 * C91054 + C91471 * C90756;
    const double C38990 = C90570 * (3 * C91054 + C90526 * C91471);
    const double C44694 =
        (2 * (ae * C91093 + be * C91114 + C90570 * C91510) +
         ae * (C91093 + C90570 * C91617 + C91615 * be) +
         be * (C91114 + C90570 * C91618 + C91615 * ae) +
         C90570 * (C91510 + ae * C91617 + be * C91618 +
                   C90570 * (ae * C91488 + be * C91503 +
                             C90570 * (C90771 +
                                       (C90477 * C90478 +
                                        C90756 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C44034 = (2 * (C90570 * C91093 + C91054 * be) +
                           C90570 * (C91093 + C90570 * C91617 + C91615 * be) +
                           (C91054 + C91459 * C90756) * be) /
                          C90095;
    const double C91602 = C91403 + C91600;
    const double C91601 = C91401 + C91599;
    const double C71861 = 4 * (2 * C91308 + C90570 * C91322) +
                          C90570 * (3 * C91322 + C90570 * C91680);
    const double C437 = C430 - C431;
    const double C2285 = C2273 - C2274;
    const double C2978 = C2966 - C2967;
    const double C9766 = C9761 - C9762;
    const double C22377 = C22373 - C22374;
    const double C6625 = C4027 * C4949;
    const double C6953 = C4108 * C4949;
    const double C47142 = C44794 * C4949;
    const double C47459 = C44875 * C4949;
    const double C7598 = C4027 * C5800;
    const double C7912 = C4108 * C5800;
    const double C27753 = C92226 * C5800;
    const double C28168 = C14781 * C5800;
    const double C48090 = C44794 * C5800;
    const double C48391 = C44875 * C5800;
    const double C52748 = C92226 * C5800;
    const double C53151 = C31335 * C5800;
    const double C11894 = C92177 * C5803;
    const double C12208 = C182 * C5803;
    const double C26731 = C92226 * C5803;
    const double C27038 = C14781 * C5803;
    const double C42995 = C92226 * C5803;
    const double C43306 = C31335 * C5803;
    const double C11335 = C11331 - C11323;
    const double C91061 = C91059 + C91053;
    const double C91462 = C91455 + C91445;
    const double C73870 = C73866 - C73867;
    const double C72111 = C72107 - C72108;
    const double C728 = C721 - C722;
    const double C2587 = C2575 - C2576;
    const double C4734 = C4727 - C4728;
    const double C3280 = C3268 - C3269;
    const double C18748 = C18741 - C18742;
    const double C12991 = C9424 * C11110;
    const double C13631 = C9583 * C11110;
    const double C83714 = C80417 * C11110;
    const double C84331 = C80568 * C11110;
    const double C5622 = C5618 - C5610;
    const double C8351 = C8349 - C8342;
    const double C37226 = C37222 - C37223;
    const double C39587 = C39583 - C39584;
    const double C91329 = C91327 + C91321;
    const double C91676 = C91663 + C91664;
    const double C44042 = C9424 * C13979;
    const double C44696 = C9583 * C13979;
    const double C89444 = C80417 * C13979;
    const double C90063 = C80568 * C13979;
    const double C5170 = C4030 * C5140;
    const double C5341 = C265 * C5140;
    const double C6955 = C4108 * C5140;
    const double C37993 = C36262 * C5140;
    const double C45851 = C90114 * C5140;
    const double C47461 = C44875 * C5140;
    const double C7914 = C4108 * C5972;
    const double C8034 = C265 * C5972;
    const double C8819 = C4030 * C5972;
    const double C26178 = C19899 * C5972;
    const double C28170 = C14781 * C5972;
    const double C48393 = C44875 * C5972;
    const double C49247 = C90114 * C5972;
    const double C53153 = C31335 * C5972;
    const double C58636 = C36262 * C5972;
    const double C68731 = C61190 * C5972;
    const double C12210 = C182 * C5974;
    const double C12325 = C9583 * C5974;
    const double C14092 = C4030 * C5974;
    const double C27040 = C14781 * C5974;
    const double C29522 = C19899 * C5974;
    const double C42286 = C36262 * C5974;
    const double C43308 = C31335 * C5974;
    const double C51967 = C90114 * C5974;
    const double C78766 = C61190 * C5974;
    const double C83084 = C80568 * C5974;
    const double C91062 = C91060 + C91056;
    const double C6956 = C4027 * C5251;
    const double C47462 = C44794 * C5251;
    const double C7915 = C4027 * C6057;
    const double C28171 = C92226 * C6057;
    const double C48394 = C44794 * C6057;
    const double C53154 = C92226 * C6057;
    const double C12211 = C92177 * C6061;
    const double C27041 = C92226 * C6061;
    const double C43309 = C92226 * C6061;
    const double C11324 = C92177 * C11306;
    const double C72110 = C92177 * C11308;
    const double C41520 = C92226 * C14191;
    const double C73869 = C92177 * C14191;
    const double C87052 = C92226 * C14191;
    const double C2292 = C2289 + C2280;
    const double C2985 = C2982 + C2973;
    const double C11340 = C11336 + C11328;
    const double C11516 = C4030 * C11498;
    const double C11606 = C182 * C11498;
    const double C13633 = C9583 * C11498;
    const double C73396 = C36262 * C11498;
    const double C82329 = C90114 * C11498;
    const double C84333 = C80568 * C11498;
    const double C91330 = C91328 + C91324;
    const double C41703 = C36262 * C14409;
    const double C41791 = C31335 * C14409;
    const double C44698 = C9583 * C14409;
    const double C74072 = C182 * C14409;
    const double C87290 = C14781 * C14409;
    const double C90065 = C80568 * C14409;
    const double C5611 = C92188 * C5595;
    const double C8343 = C92188 * C6383;
    const double C26485 = C92252 * C6383;
    const double C69034 = C92252 * C6383;
    const double C12632 = C9424 * C6387;
    const double C29923 = C92252 * C6387;
    const double C79161 = C92252 * C6387;
    const double C83383 = C80417 * C6387;
    const double C13634 = C9424 * C11682;
    const double C84334 = C80417 * C11682;
    const double C44699 = C9424 * C14619;
    const double C90066 = C80417 * C14619;
    const double C2594 = C2591 + C2582;
    const double C3287 = C3284 + C3275;
    const double C5627 = C5623 + C5615;
    const double C9347 = C9345 + C9338;
    const double C71933 = C71925 + C71926;
    const double C14810 = C14797 - C14798;
    const double C31364 = C31351 - C31352;
    const double C19824 = C2746 - C2745;
    const double C23028 = C2745 - C2746;
    const double C11018 = C9502 - C9503;
    const double C12885 = C9503 - C9502;
    const double C28985 = C18003 - C18004;
    const double C28981 = C18004 - C18003;
    const double C53974 = C34551 - C34552;
    const double C53970 = C34552 - C34551;
    const double C86805 = C26727 - C26726;
    const double C41241 = C41228 - C41229;
    const double C71936 = C71934 + C71935;
    const double C194 =
        (4 * (2 * C90548 + ae * C90549 + C90404 * C90566) +
         ae * (3 * C90549 + C90404 * C90567) +
         C90404 * (3 * C90566 + ae * C90567 +
                   C90404 * (2 * C90562 + ae * C90563 +
                             C90404 * (C90556 + ae * C90404 * C90558 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C1468 =
        (C90570 * (2 * C90548 + ae * C90549 + C90404 * C90566)) / C90099;
    const double C1471 =
        (C90537 + ae * C90540 + C90404 * C90548 + C90566 * C90756) / C90099;
    const double C1472 =
        (2 * C90548 + ae * C90549 + C90404 * C90566 +
         (2 * C90562 + ae * C90563 +
          C90404 * (C90556 + ae * C90404 * C90558 +
                    C90404 * (ae * C90558 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90532))) *
             C90756) /
        C90099;
    const double C2737 =
        (C90570 * (3 * C90566 + ae * C90567 +
                   C90404 * (2 * C90562 + ae * C90563 +
                             C90404 * (C90556 + ae * C90404 * C90558 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C12878 =
        (2 * C90570 * C90566 +
         C90570 *
             (C90566 + (C90556 + ae * C91066 +
                        C90404 * (ae * C90558 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90532)) *
                           C90756)) /
        C90099;
    const double C4955 =
        (3 * (C90548 + be * C91008 + C90526 * C91011) +
         be * (2 * C91008 + C90526 * C91012) +
         C90526 * (2 * C91011 + be * C91012 +
                   C90526 * (C90562 + be * C90526 * C90507 +
                             C90526 * (be * C90507 +
                                       C90526 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C5806 =
        (C90570 * (C90548 + be * C91008 + C90526 * C91011)) / C90099;
    const double C5809 =
        (be * C90436 + C90526 * C90548 + C91011 * C90756) / C90099;
    const double C5810 =
        (C90548 + be * C91008 + C90526 * C91011 +
         (C90562 + be * C90526 * C90507 +
          C90526 * (be * C90507 +
                    C90526 * (ae * C90558 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90532))) *
             C90756) /
        C90099;
    const double C8591 =
        (C90570 * (2 * C91011 + be * C91012 +
                   C90526 * (C90562 + be * C90526 * C90507 +
                             C90526 * (be * C90507 +
                                       C90526 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C13872 =
        (2 * C90570 * C91011 +
         C90570 *
             (C91011 + (be * C90507 +
                        C90526 * (ae * C90558 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90532)) *
                           C90756)) /
        C90099;
    const double C36809 =
        (4 * (2 * C91005 + be * C91006 + C90526 * C91427) +
         be * (3 * C91006 + C90526 * C91428) +
         C90526 * (3 * C91427 + be * C91428 +
                   C90526 * (2 * C91423 + be * C91424 +
                             C90526 * (C90556 + be * C90526 * C90496 +
                                       C90526 * (be * C90496 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C37333 =
        (2 * C91005 + be * C91006 + C90526 * C91427 +
         (2 * C91423 + be * C91424 +
          C90526 * (C90556 + be * C90526 * C90496 +
                    C90526 * (be * C90496 +
                              C90526 * std::pow(C90410, 7) * bs[7] * C90532))) *
             C90756) /
        C90099;
    const double C39085 =
        (C90570 * (3 * C91427 + be * C91428 +
                   C90526 * (2 * C91423 + be * C91424 +
                             C90526 * (C90556 + be * C90526 * C90496 +
                                       C90526 * (be * C90496 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C43919 =
        (2 * C90570 * C91427 +
         C90570 *
             (C91427 + (C90556 + be * C91557 +
                        C90526 * (be * C90496 + C90526 * std::pow(C90410, 7) *
                                                    bs[7] * C90532)) *
                           C90756)) /
        C90099;
    const double C5175 = C5162 - C5163;
    const double C45856 = C45843 - C45844;
    const double C11227 = C11214 - C11215;
    const double C82082 = C51960 - C51959;
    const double C30479 = C8811 - C8812;
    const double C30475 = C8812 - C8811;
    const double C55438 = C49239 - C49240;
    const double C55434 = C49240 - C49239;
    const double C359 =
        (4 * (2 * C90635 + be * C90636 + C90404 * C90653) +
         be * (3 * C90636 + C90404 * C90654) +
         C90404 * (3 * C90653 + be * C90654 +
                   C90404 * (2 * C90649 + be * C90650 +
                             C90404 * (C90643 + be * C90404 * C90645 +
                                       C90404 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C1600 =
        (C90570 * (2 * C90635 + be * C90636 + C90404 * C90653)) / C90099;
    const double C1603 =
        (C90624 + be * C90627 + C90404 * C90635 + C90653 * C90756) / C90099;
    const double C1604 =
        (2 * C90635 + be * C90636 + C90404 * C90653 +
         (2 * C90649 + be * C90650 +
          C90404 * (C90643 + be * C90404 * C90645 +
                    C90404 * (be * C90645 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90619))) *
             C90756) /
        C90099;
    const double C2897 =
        (C90570 * (3 * C90653 + be * C90654 +
                   C90404 * (2 * C90649 + be * C90650 +
                             C90404 * (C90643 + be * C90404 * C90645 +
                                       C90404 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C13096 =
        (2 * C90570 * C90653 +
         C90570 *
             (C90653 + (C90643 + be * C91069 +
                        C90404 * (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619)) *
                           C90756)) /
        C90099;
    const double C5146 =
        (3 * (C90635 + ae * C91026 + C90526 * C91029) +
         ae * (2 * C91026 + C90526 * C91030) +
         C90526 * (2 * C91029 + ae * C91030 +
                   C90526 * (C90649 + ae * C90526 * C90505 +
                             C90526 * (ae * C90505 +
                                       C90526 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C36925 =
        (4 * (2 * C91023 + ae * C91024 + C90526 * C91441) +
         ae * (3 * C91024 + C90526 * C91442) +
         C90526 * (3 * C91441 + ae * C91442 +
                   C90526 * (2 * C91437 + ae * C91438 +
                             C90526 * (C90643 + ae * C90526 * C90493 +
                                       C90526 * (ae * C90493 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C36871 = C36863 + C36864;
    const double C14888 = C2133 - C2132;
    const double C17153 = C2132 - C2133;
    const double C5048 = C4210 - C4211;
    const double C6737 = C4211 - C4210;
    const double C19928 = C19915 - C19916;
    const double C61219 = C61206 - C61207;
    const double C27895 = C22167 - C22168;
    const double C27891 = C22168 - C22167;
    const double C77183 = C63453 - C63454;
    const double C77179 = C63454 - C63453;
    const double C36874 = C36872 + C36873;
    const double C277 =
        (4 * (2 * C90592 + ae * C90593 + C90404 * C90610) +
         ae * (3 * C90593 + C90404 * C90611) +
         C90404 * (3 * C90610 + ae * C90611 +
                   C90404 * (2 * C90606 + ae * C90607 +
                             C90404 * (C90600 + ae * C90404 * C90602 +
                                       C90404 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C953 =
        (C90526 * (2 * C90592 + ae * C90593 + C90404 * C90610)) / C90099;
    const double C956 =
        (C90581 + ae * C90584 + C90404 * C90592 + C90610 * C90658) / C90099;
    const double C957 =
        (2 * C90592 + ae * C90593 + C90404 * C90610 +
         (2 * C90606 + ae * C90607 +
          C90404 * (C90600 + ae * C90404 * C90602 +
                    C90404 * (ae * C90602 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90576))) *
             C90658) /
        C90099;
    const double C2124 =
        (C90526 * (3 * C90610 + ae * C90611 +
                   C90404 * (2 * C90606 + ae * C90607 +
                             C90404 * (C90600 + ae * C90404 * C90602 +
                                       C90404 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C6730 =
        (2 * C90526 * C90610 +
         C90526 *
             (C90610 + (C90600 + ae * C91097 +
                        C90404 * (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576)) *
                           C90658)) /
        C90099;
    const double C11116 =
        (3 * (C90592 + be * C91249 + C90570 * C91252) +
         be * (2 * C91249 + C90570 * C91253) +
         C90570 * (2 * C91252 + be * C91253 +
                   C90570 * (C90606 + be * C90570 * C90507 +
                             C90570 * (be * C90507 +
                                       C90570 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C71987 =
        (4 * (2 * C91246 + be * C91247 + C90570 * C91632) +
         be * (3 * C91247 + C90570 * C91633) +
         C90570 * (3 * C91632 + be * C91633 +
                   C90570 * (2 * C91628 + be * C91629 +
                             C90570 * (C90600 + be * C90570 * C90496 +
                                       C90570 * (be * C90496 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C517 = C507 + C515;
    const double C13321 = C9424 * C11420;
    const double C84032 = C80417 * C11420;
    const double C37047 =
        (4 * (2 * C91092 + ae * C91093 + C90526 * C91491) +
         ae * (3 * C91093 + C90526 * C91492) +
         C90526 * (3 * C91491 + ae * C91492 +
                   C90526 * (2 * C91487 + ae * C91488 +
                             C90526 * (C90690 + ae * C90526 * C90602 +
                                       C90526 * (ae * C90602 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90681))))) /
        C90099;
    const double C72164 =
        (4 * (2 * C91222 + be * C91267 + C90570 * C91527) +
         be * (3 * C91267 + C90570 * C91639) +
         C90570 * (3 * C91527 + be * C91639 +
                   C90570 * (2 * C91524 + be * C91568 +
                             C90570 * (C90690 + be * C90570 * C90645 +
                                       C90570 * (be * C90645 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90681))))) /
        C90099;
    const double C39371 =
        (3 * (C91222 + ae * C91406 + C90526 * C91548) +
         ae * (C90570 * C91492 + C91471 * be) +
         C90526 * (2 * C91548 + ae * (C90570 * C91488 + C91465) +
                   C90526 * (C91524 + ae * (C90570 * C90526 * C90602 + C91458) +
                             C90526 * (ae * (C90570 * C90602 + C90486) +
                                       C90526 * (be * C90645 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90681))))) /
        C90099;
    const double C5440 = C5433 - C5434;
    const double C46095 = C46088 - C46089;
    const double C11519 = C11512 - C11513;
    const double C82326 = C52270 - C52269;
    const double C30895 = C9129 - C9130;
    const double C30893 = C9130 - C9129;
    const double C55836 = C49545 - C49546;
    const double C55834 = C49546 - C49545;
    const double C578 =
        (4 * (2 * C90716 + be * C90717 + C90404 * C90734) +
         be * (3 * C90717 + C90404 * C90735) +
         C90404 * (3 * C90734 + be * C90735 +
                   C90404 * (2 * C90730 + be * C90731 +
                             C90404 * (C90724 + be * C90404 * C90726 +
                                       C90404 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C1201 =
        (C90526 * (2 * C90716 + be * C90717 + C90404 * C90734)) / C90099;
    const double C1204 =
        (C90705 + be * C90708 + C90404 * C90716 + C90734 * C90658) / C90099;
    const double C1205 =
        (2 * C90716 + be * C90717 + C90404 * C90734 +
         (2 * C90730 + be * C90731 +
          C90404 * (C90724 + be * C90404 * C90726 +
                    C90404 * (be * C90726 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90700))) *
             C90658) /
        C90099;
    const double C2433 =
        (C90526 * (3 * C90734 + be * C90735 +
                   C90404 * (2 * C90730 + be * C90731 +
                             C90404 * (C90724 + be * C90404 * C90726 +
                                       C90404 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C7174 =
        (2 * C90526 * C90734 +
         C90526 *
             (C90734 + (C90724 + be * C91118 +
                        C90404 * (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700)) *
                           C90658)) /
        C90099;
    const double C11504 =
        (3 * (C90716 + ae * C91281 + C90570 * C91284) +
         ae * (2 * C91281 + C90570 * C91285) +
         C90570 * (2 * C91284 + ae * C91285 +
                   C90570 * (C90730 + ae * C90570 * C90505 +
                             C90570 * (ae * C90505 +
                                       C90570 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C72216 =
        (4 * (2 * C91278 + ae * C91279 + C90570 * C91649) +
         ae * (3 * C91279 + C90570 * C91650) +
         C90570 * (3 * C91649 + ae * C91650 +
                   C90570 * (2 * C91645 + ae * C91646 +
                             C90570 * (C90724 + ae * C90570 * C90493 +
                                       C90570 * (ae * C90493 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C651 = C641 + C649;
    const double C87287 = C27373 - C27372;
    const double C41794 = C41787 - C41788;
    const double C8240 = C4027 * C6304;
    const double C28585 = C92226 * C6304;
    const double C48711 = C44794 * C6304;
    const double C53562 = C92226 * C6304;
    const double C12529 = C92177 * C6307;
    const double C27377 = C92226 * C6307;
    const double C43617 = C92226 * C6307;
    const double C37169 =
        (4 * (2 * C91113 + be * C91114 + C90526 * C91506) +
         be * (3 * C91114 + C90526 * C91507) +
         C90526 * (3 * C91506 + be * C91507 +
                   C90526 * (2 * C91502 + be * C91503 +
                             C90526 * (C90750 + be * C90526 * C90726 +
                                       C90526 * (be * C90726 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C41779 =
        (3 * (C91113 + ae * C91578 + C90570 * C91581) +
         ae * (2 * C91578 + C90570 * C91582) +
         C90570 * (2 * C91581 + ae * C91582 +
                   C90570 * (C91502 + ae * C90570 * C91457 +
                             C90570 * (ae * C91457 +
                                       C90570 * (be * C90726 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C72270 =
        (4 * (2 * C91292 + ae * C91293 + C90570 * C91660) +
         ae * (3 * C91293 + C90570 * C91661) +
         C90570 * (3 * C91660 + ae * C91661 +
                   C90570 * (2 * C91656 + ae * C91657 +
                             C90570 * (C90750 + ae * C90570 * C90558 +
                                       C90570 * (ae * C90558 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C90119 = C90118 * ae;
    const double C90130 = C90118 * C90127;
    const double C4028 = (-C90096 / C90095) / C90100 - (C90118 * be) / C90095;
    const double C37109 = C36945 * C265;
    const double C37106 = C36943 * C265;
    const double C37117 = C37115 * C92188;
    const double C37116 = C37114 * C92188;
    const double C57317 = C37114 * C92334;
    const double C67188 = C37114 * C61039;
    const double C57318 = C57085 * C19899;
    const double C67189 = C57085 * C61190;
    const double C57321 = C57319 * C92252;
    const double C67190 = C57319 * C92252;
    const double C41419 = C41407 * C31335;
    const double C86969 = C41407 * C14781;
    const double C72051 = C72044 * C92177;
    const double C72050 = C72043 * C182;
    const double C41422 = C41418 * C31252;
    const double C72042 = C41418 * C92177;
    const double C86968 = C41418 * C92333;
    const double C72041 = C41417 * C182;
    const double C90187 = C90186 * C90127;
    const double C90278 = C90186 * ae;
    const double C14780 = (C90186 * ae) / C90095 - C90173 / C90104;
    const double C31334 = (-C90173 / C90095) / C90100 - (C90186 * be) / C90095;
    const double C11341 = C11337 * C4023;
    const double C21549 = C11337 * C92357;
    const double C62839 = C11337 * C31249;
    const double C72104 = C11337 * C92097;
    const double C82170 = C11337 * C92320;
    const double C90213 = C90212 * C90127;
    const double C90349 = C90212 * ae;
    const double C19898 = (C90212 * ae) / C90095 - C90199 / C90104;
    const double C61189 = (-C90199 / C90095) / C90100 - (C90212 * be) / C90095;
    const double C737 = C733 * C92177;
    const double C4721 = C733 * C4025;
    const double C15404 = C733 * C92333;
    const double C31955 = C733 * C31252;
    const double C45476 = C733 * C92359;
    const double C41420 = C41408 * C92226;
    const double C86970 = C41408 * C92226;
    const double C4737 = C4735 + C4726;
    const double C9769 = C9767 + C9760;
    const double C8354 = C8352 + C8347;
    const double C12221 = C12219 + C12215;
    const double C14207 = C14205 - C14201;
    const double C11315 = C2986 * C92102;
    const double C13213 = C2986 * C4023;
    const double C21550 = C2986 * C92358;
    const double C23351 = C2986 * C92357;
    const double C62840 = C2986 * C31250;
    const double C64626 = C2986 * C31249;
    const double C73261 = C2986 * C92097;
    const double C82171 = C2986 * C92102;
    const double C83925 = C2986 * C92320;
    const double C11342 = C11338 * C4023;
    const double C21554 = C11338 * C92357;
    const double C62844 = C11338 * C31249;
    const double C72105 = C11338 * C92097;
    const double C82172 = C11338 * C92320;
    const double C14210 = C14208 * C4023;
    const double C24279 = C14208 * C92357;
    const double C65553 = C14208 * C31249;
    const double C73864 = C14208 * C92097;
    const double C84842 = C14208 * C92320;
    const double C738 = C734 * C92177;
    const double C4732 = C734 * C4025;
    const double C15406 = C734 * C92333;
    const double C31957 = C734 * C31252;
    const double C45481 = C734 * C92359;
    const double C739 = C735 * C92177;
    const double C15409 = C735 * C92333;
    const double C31960 = C735 * C31252;
    const double C2598 = C2595 * C92177;
    const double C4722 = C2595 * C4026;
    const double C7390 = C2595 * C4025;
    const double C15405 = C2595 * C92226;
    const double C17800 = C2595 * C92333;
    const double C31956 = C2595 * C92226;
    const double C34348 = C2595 * C31252;
    const double C45477 = C2595 * C92360;
    const double C47888 = C2595 * C92359;
    const double C3291 = C3288 * C92177;
    const double C8348 = C3288 * C4025;
    const double C18747 = C3288 * C92333;
    const double C35286 = C3288 * C31252;
    const double C48812 = C3288 * C92359;
    const double C887 =
        (be * (2 * C90436 + C90404 * C90470 + C90454 * ae) +
         C90526 * (2 * C90548 + ae * C90549 + C90404 * C90566)) /
        C90099;
    const double C890 =
        (C90537 + ae * C90540 + C90404 * C90548 + be * C90526 * C90470 +
         C90526 * (be * C90470 + C90526 * C90566)) /
        C90099;
    const double C1534 =
        (be * (2 * C90436 + C90404 * C90470 + C90454 * ae) +
         C90570 * (2 * C90592 + ae * C90593 + C90404 * C90610)) /
        C90099;
    const double C1537 =
        (C90581 + ae * C90584 + C90404 * C90592 + be * C90570 * C90470 +
         C90570 * (be * C90470 + C90570 * C90610)) /
        C90099;
    const double C3445 = (C90570 * (be * C90470 + C90526 * C90566)) / C90099;
    const double C3519 =
        (be * C90526 * C90470 + C90570 * C90526 * C90610) / C90099;
    const double C123 = (3 * (C90417 + C90404 * C90436 + C90425 * ae) +
                         C90404 * (2 * C90436 + C90404 * C90470 + C90454 * ae) +
                         (2 * C90425 + C90404 * C90454) * ae) /
                        C90095;
    const double C803 =
        (C90526 * (2 * C90436 + C90404 * C90470 + C90454 * ae)) / C90095;
    const double C815 =
        (C90417 + C90404 * C90436 + C90425 * ae + C90470 * C90658) / C90095;
    const double C1384 =
        (C90570 * (2 * C90436 + C90404 * C90470 + C90454 * ae)) / C90095;
    const double C1396 =
        (C90417 + C90404 * C90436 + C90425 * ae + C90470 * C90756) / C90095;
    const double C3366 = (C90570 * C90526 * C90470) / C90095;
    const double C130 =
        (3 * (C90434 + ae * C90435 + be * C90436 + C90404 * C90466) +
         ae * (2 * C90435 + C90404 * C90469 + C90454 * be) +
         be * (2 * C90436 + C90404 * C90470 + C90454 * ae) +
         C90404 *
             (2 * C90466 + ae * C90469 + be * C90470 +
              C90404 * (C90460 + ae * C90461 + be * C90462 +
                        C90404 * (ae * C90452 + be * C90455 +
                                  C90404 *
                                      (C90441 * C90442 +
                                       C90408 * bs[6] * std::pow(C90402, 6)) *
                                      C90097)))) /
        C90099;
    const double C818 =
        (2 * (ae * C90526 * C90429 + be * C90526 * C90430 + C90404 * C90775) +
         ae * C90526 * C90469 + be * C90526 * C90470 +
         C90404 * (C90775 + ae * C90526 * C90461 + be * C90526 * C90462 +
                   C90404 * (ae * C90526 * C90452 + be * C90526 * C90455 +
                             C90404 * C90526 * C90504))) /
        C90099;
    const double C1019 =
        (ae * (2 * C90435 + C90404 * C90469 + C90454 * be) +
         C90526 * (2 * C90635 + be * C90636 + C90404 * C90653)) /
        C90099;
    const double C1022 =
        (C90624 + be * C90627 + C90404 * C90635 + ae * C90526 * C90469 +
         C90526 * (ae * C90469 + C90526 * C90653)) /
        C90099;
    const double C1399 =
        (2 * (ae * C90570 * C90429 + be * C90570 * C90430 + C90404 * C90850) +
         ae * C90570 * C90469 + be * C90570 * C90470 +
         C90404 * (C90850 + ae * C90570 * C90461 + be * C90570 * C90462 +
                   C90404 * (ae * C90570 * C90452 + be * C90570 * C90455 +
                             C90404 * C90570 * C90504))) /
        C90099;
    const double C1782 =
        (ae * (2 * C90435 + C90404 * C90469 + C90454 * be) +
         C90570 * (2 * C90716 + be * C90717 + C90404 * C90734)) /
        C90099;
    const double C1785 =
        (C90705 + be * C90708 + C90404 * C90716 + ae * C90570 * C90469 +
         C90570 * (ae * C90469 + C90570 * C90734)) /
        C90099;
    const double C3593 =
        (ae * C90570 * C90469 + C90526 * C90570 * C90653) / C90099;
    const double C3807 =
        (ae * C90526 * C90469 + C90570 * C90526 * C90734) / C90099;
    const double C122 = (3 * (C90416 + C90404 * C90435 + C90425 * be) +
                         C90404 * (2 * C90435 + C90404 * C90469 + C90454 * be) +
                         (2 * C90425 + C90404 * C90454) * be) /
                        C90095;
    const double C802 =
        (C90526 * (2 * C90435 + C90404 * C90469 + C90454 * be)) / C90095;
    const double C814 =
        (C90416 + C90404 * C90435 + C90425 * be + C90469 * C90658) / C90095;
    const double C1383 =
        (C90570 * (2 * C90435 + C90404 * C90469 + C90454 * be)) / C90095;
    const double C1395 =
        (C90416 + C90404 * C90435 + C90425 * be + C90469 * C90756) / C90095;
    const double C3365 = (C90570 * C90526 * C90469) / C90095;
    const double C90519 = C90404 * C90516;
    const double C91353 = C90526 * C90516;
    const double C6618 =
        (2 * (be * C90470 + C90526 * C90566) + be * (C90470 + C90516 * C90658) +
         C90526 * (C90566 + be * C90526 * C90516 +
                   C90526 * (be * C90516 +
                             C90526 * (C90556 + ae * C91066 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C7591 =
        (C90570 * (C90566 + be * C90526 * C90516 +
                   C90526 * (be * C90516 +
                             C90526 * (C90556 + ae * C91066 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C7703 =
        (be * (C90470 + C90516 * C90658) +
         C90570 *
             (C90610 + (C90600 + ae * C91097 +
                        C90404 * (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576)) *
                           C90658)) /
        C90099;
    const double C11887 =
        (be * C90470 + C90526 * C90566 +
         (be * C90516 +
          C90526 * (C90556 + ae * C91066 +
                    C90404 * (ae * C90558 +
                              C90404 * std::pow(C90410, 7) * bs[7] * C90532))) *
             C90756) /
        C90099;
    const double C12984 =
        (2 * (be * C90470 + C90570 * C90610) + be * (C90470 + C90516 * C90756) +
         C90570 * (C90610 + be * C90570 * C90516 +
                   C90570 * (be * C90516 +
                             C90570 * (C90600 + ae * C91097 +
                                       C90404 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C6489 =
        (2 * C90526 * C90470 + C90526 * (C90470 + C90516 * C90658)) / C90095;
    const double C7490 = (C90570 * (C90470 + C90516 * C90658)) / C90095;
    const double C12749 =
        (2 * C90570 * C90470 + C90570 * (C90470 + C90516 * C90756)) / C90095;
    const double C91476 = C90526 * C91474;
    const double C91692 = C90570 * C91690;
    const double C91084 = C91082 + C91075;
    const double C91349 = C91347 + C91343;
    const double C91083 = C91081 + C91072;
    const double C91348 = C91346 + C91340;
    const double C90518 = C90404 * C90515;
    const double C91358 = C90526 * C90515;
    const double C825 =
        (2 * (ae * (C90429 + C90452 * C90658) +
              be * (C90430 + C90455 * C90658) + C90404 * C90784) +
         ae * (C90469 + C90515 * C90658) + be * (C90470 + C90516 * C90658) +
         C90404 * (C90784 + ae * (C90461 + C90505 * C90658) +
                   be * (C90462 + C90507 * C90658) +
                   C90404 * (ae * (C90452 + C90493 * C90658) +
                             be * (C90455 + C90496 * C90658) +
                             C90404 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90658)))) /
        C90099;
    const double C1406 =
        (2 * (ae * (C90429 + C90452 * C90756) +
              be * (C90430 + C90455 * C90756) + C90404 * C90859) +
         ae * (C90469 + C90515 * C90756) + be * (C90470 + C90516 * C90756) +
         C90404 * (C90859 + ae * (C90461 + C90505 * C90756) +
                   be * (C90462 + C90507 * C90756) +
                   C90404 * (ae * (C90452 + C90493 * C90756) +
                             be * (C90455 + C90496 * C90756) +
                             C90404 * (C90504 +
                                       (C90477 * C90478 +
                                        C90408 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C3372 =
        (2 * (ae * C90570 * C90925 + be * C90570 * C90926 + C90404 * C90962) +
         ae * C90570 * C90526 * C90515 + be * C90570 * C90526 * C90516 +
         C90404 * (C90962 + ae * C90570 * C90526 * C90505 +
                   be * C90570 * C90526 * C90507 +
                   C90404 * (ae * C90570 * C90526 * C90493 +
                             be * C90570 * C90526 * C90496 +
                             C90404 * C90570 * C90526 *
                                 (C90477 * C90478 +
                                  C90408 * bs[7] * std::pow(C90410, 7)) *
                                 C90097))) /
        C90099;
    const double C6836 =
        (2 * (ae * C90469 + C90526 * C90653) + ae * (C90469 + C90515 * C90658) +
         C90526 * (C90653 + ae * C90526 * C90515 +
                   C90526 * (ae * C90515 +
                             C90526 * (C90643 + be * C91069 +
                                       C90404 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C7811 =
        (C90570 * C90653 + ae * C90570 * C90526 * C90515 +
         C90526 * (ae * C90570 * C90515 +
                   C90526 * C90570 *
                       (C90643 + be * C91069 +
                        C90404 * (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619)))) /
        C90099;
    const double C8134 =
        (ae * (C90469 + C90515 * C90658) +
         C90570 *
             (C90734 + (C90724 + be * C91118 +
                        C90404 * (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700)) *
                           C90658)) /
        C90099;
    const double C12107 =
        (ae * (C90469 + C90515 * C90756) +
         C90526 *
             (C90653 + (C90643 + be * C91069 +
                        C90404 * (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619)) *
                           C90756)) /
        C90099;
    const double C13420 =
        (2 * (ae * C90469 + C90570 * C90734) + ae * (C90469 + C90515 * C90756) +
         C90570 * (C90734 + ae * C90570 * C90515 +
                   C90570 * (ae * C90515 +
                             C90570 * (C90724 + be * C91118 +
                                       C90404 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C6488 =
        (2 * C90526 * C90469 + C90526 * (C90469 + C90515 * C90658)) / C90095;
    const double C7489 = (C90570 * (C90469 + C90515 * C90658)) / C90095;
    const double C12748 =
        (2 * C90570 * C90469 + C90570 * (C90469 + C90515 * C90756)) / C90095;
    const double C91475 = C90526 * C91473;
    const double C91691 = C90570 * C91689;
    const double C90517 = C90491 + C90514;
    const double C4850 = C92102 * C4826;
    const double C37772 = C92097 * C4826;
    const double C45575 = C92102 * C4826;
    const double C36742 = C92097 * C4828;
    const double C8466 = C92102 * C5719;
    const double C48914 = C92102 * C5719;
    const double C58335 = C92097 * C5719;
    const double C40339 = C92097 * C5723;
    const double C38998 = C92097 * C8460;
    const double C10903 = C92102 * C10879;
    const double C72989 = C92097 * C10879;
    const double C81839 = C92102 * C10879;
    const double C71869 = C92097 * C10881;
    const double C2276 = C92177 * C1074;
    const double C15058 = C92226 * C1074;
    const double C31610 = C92226 * C1074;
    const double C4382 = C4027 * C1080;
    const double C17365 = C92226 * C1080;
    const double C33914 = C92226 * C1080;
    const double C45141 = C44794 * C1080;
    const double C2969 = C92177 * C1655;
    const double C9764 = C92177 * C1661;
    const double C18314 = C92226 * C3663;
    const double C22376 = C92177 * C3663;
    const double C34858 = C92226 * C3663;
    const double C2578 = C92188 * C1314;
    const double C4730 = C92188 * C1320;
    const double C3271 = C92188 * C1895;
    const double C20422 = C92252 * C1895;
    const double C61712 = C92252 * C1895;
    const double C10101 = C9424 * C1901;
    const double C23764 = C92252 * C1901;
    const double C65038 = C92252 * C1901;
    const double C81068 = C80417 * C1901;
    const double C18744 = C92188 * C3947;
    const double C22785 = C92252 * C3947;
    const double C64062 = C92252 * C3947;
    const double C91604 = C91602 + C91595;
    const double C91603 = C91601 + C91592;
    const double C441 = C437 - C432;
    const double C2288 = C2285 - C2275;
    const double C2981 = C2978 - C2968;
    const double C9768 = C9766 - C9763;
    const double C22378 = C22377 - C22375;
    const double C12216 = C12208 - C12209;
    const double C6306 =
        (C90744 + be * C91110 + C90526 * C91113 + ae * C90570 * C91061 +
         C90570 *
             (ae * C91061 + C90570 * (C90747 + be * C90526 * C90713 +
                                      C90526 * (C90720 + C90526 * C90750)))) /
        C90099;
    const double C9232 =
        (ae * (2 * C91042 + C90526 * C91061 + C91054 * be) +
         C90570 * (2 * C91113 + be * C91114 +
                   C90526 * (C90747 + be * C90526 * C90713 +
                             C90526 * (C90720 + C90526 * C90750)))) /
        C90099;
    const double C44587 =
        (2 * (ae * C91061 + C90570 * C91506) + ae * (C91061 + C91473 * C90756) +
         C90570 * (C91506 + ae * C90570 * C91473 +
                   C90570 * (ae * C91473 +
                             C90570 * (C90750 + be * C91589 +
                                       C90526 * (be * C90726 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C4950 =
        (3 * (C90533 + C90526 * C91042 + C91040 * be) +
         C90526 * (2 * C91042 + C90526 * C91061 + C91054 * be) +
         (2 * C91040 + C90526 * C91054) * be) /
        C90095;
    const double C5802 =
        (C90533 + C90526 * C91042 + C91040 * be + C91061 * C90756) / C90095;
    const double C8588 =
        (C90570 * (2 * C91042 + C90526 * C91061 + C91054 * be)) / C90095;
    const double C43918 =
        (2 * C90570 * C91061 + C90570 * (C91061 + C91473 * C90756)) / C90095;
    const double C91469 = C91462 + C91463;
    const double C73871 = C73870 - C73868;
    const double C72112 = C72111 - C72109;
    const double C732 = C728 - C723;
    const double C2590 = C2587 - C2577;
    const double C4736 = C4734 - C4729;
    const double C3283 = C3280 - C3270;
    const double C18749 = C18748 - C18743;
    const double C37227 = C37226 - C37224;
    const double C39588 = C39587 - C39585;
    const double C14309 =
        (ae * (2 * C91310 + C90570 * C91329 + C91322 * be) +
         C90526 * (2 * C91222 + be * C91267 +
                   C90570 * (C90687 + be * C90570 * C90632 +
                             C90570 * (C90639 + C90570 * C90690)))) /
        C90099;
    const double C37539 =
        (2 * (ae * C91329 + C90526 * C91527) +
         ae * (C91093 + C90570 * (C90570 * C91488 + C91465) +
               C90570 * C91459 * be) +
         C90526 *
             (C91527 +
              ae * (C91401 + C90570 * (C90570 * C90526 * C90602 + C91458) +
                    C90570 * C91450 * be) +
              C90526 * (ae * (C90589 + C90570 * (C90570 * C90602 + C90486) +
                              C90570 * C90476 * be) +
                        C90526 * (C90690 + be * C90570 * C90645 +
                                  C90570 * (be * C90645 +
                                            C90570 * std::pow(C90410, 7) *
                                                bs[7] * C90681))))) /
        C90099;
    const double C41618 =
        (ae *
             (3 * C91329 +
              C90570 * (2 * C91320 +
                        C90570 * (C90589 + C90570 * (C90570 * C90602 + C90486) +
                                  C90570 * C90476 * be) +
                        C91567 * be) +
              (2 * C91316 + C90570 * C91567) * be) +
         C90526 * (3 * C91527 + be * (2 * C91521 + C90570 * C91568) +
                   C90570 * (2 * C91524 + be * C91568 +
                             C90570 * (C90690 + be * C90570 * C90645 +
                                       C90570 * (be * C90645 +
                                                 C90570 * std::pow(C90410, 7) *
                                                     bs[7] * C90681))))) /
        C90099;
    const double C11111 =
        (3 * (C90577 + C90570 * C91310 + C91308 * be) +
         C90570 * (2 * C91310 + C90570 * C91329 + C91322 * be) +
         (2 * C91308 + C90570 * C91322) * be) /
        C90095;
    const double C91686 = C91676 + C91683;
    const double C5253 =
        (3 * (C90663 + ae * C91042 + be * C91043 + C90526 * C91051) +
         ae * (2 * C91042 + C90526 * C91061 + C91054 * be) +
         be * (2 * C91043 + C90526 * C91062 + C91054 * ae) +
         C90526 * (2 * C91051 + ae * C91061 + be * C91062 +
                   C90526 * (C90668 + ae * C91052 + be * C91055 +
                             C90526 * (C90552 + C90639 + C90526 * C90673)))) /
        C90099;
    const double C8918 =
        (2 * (ae * C90570 * C90538 + be * C90570 * C90625 + C90526 * C91217) +
         ae * C90570 * C91061 + be * C90570 * C91062 +
         C90526 * (C91217 + ae * C90570 * C91052 + be * C90570 * C91055 +
                   C90526 * (ae * C90570 * C90545 + be * C90570 * C90632 +
                             C90526 * C90570 * C90673))) /
        C90099;
    const double C37488 =
        (2 * (ae * C91293 + be * C91267 + C90526 * C91519) +
         ae * (C91061 + C91473 * C90756) + be * (C91062 + C91474 * C90756) +
         C90526 * (C91519 + ae * (C91052 + C91457 * C90756) +
                   be * (C91055 + C91460 * C90756) +
                   C90526 * (ae * (C90545 + C90558 * C90756) +
                             be * (C90632 + C90645 * C90756) +
                             C90526 * (C90673 +
                                       (C90477 * C90478 +
                                        C90658 * bs[7] * std::pow(C90410, 7)) *
                                           C90097 * C90756)))) /
        C90099;
    const double C5141 =
        (3 * (C90620 + C90526 * C91043 + C91040 * ae) +
         C90526 * (2 * C91043 + C90526 * C91062 + C91054 * ae) +
         (2 * C91040 + C90526 * C91054) * ae) /
        C90095;
    const double C5975 =
        (C90620 + C90526 * C91043 + C91040 * ae + C91062 * C90756) / C90095;
    const double C8800 =
        (C90570 * (2 * C91043 + C90526 * C91062 + C91054 * ae)) / C90095;
    const double C44146 =
        (2 * C90570 * C91062 + C90570 * (C91062 + C91474 * C90756)) / C90095;
    const double C11339 = C11335 + C11324;
    const double C13214 = C2985 * C92102;
    const double C21551 = C2985 * C14697;
    const double C23352 = C2985 * C92358;
    const double C62841 = C2985 * C31251;
    const double C64627 = C2985 * C31250;
    const double C83926 = C2985 * C92102;
    const double C11344 = C11340 * C4023;
    const double C72106 = C11340 * C92097;
    const double C82175 = C11340 * C92320;
    const double C11684 =
        (3 * (C90761 + ae * C91310 + be * C91311 + C90570 * C91319) +
         ae * (2 * C91310 + C90570 * C91329 + C91322 * be) +
         be * (2 * C91311 + C90570 * C91330 + C91322 * ae) +
         C90570 * (2 * C91319 + ae * C91329 + be * C91330 +
                   C90570 * (C90766 + ae * C91320 + be * C91323 +
                             C90570 * (C90596 + C90720 + C90570 * C90771)))) /
        C90099;
    const double C11499 =
        (3 * (C90701 + C90570 * C91311 + C91308 * ae) +
         C90570 * (2 * C91311 + C90570 * C91330 + C91322 * ae) +
         (2 * C91308 + C90570 * C91322) * ae) /
        C90095;
    const double C5626 = C5622 + C5611;
    const double C8353 = C8351 + C8343;
    const double C2597 = C2594 * C92177;
    const double C4731 = C2594 * C4026;
    const double C15407 = C2594 * C92226;
    const double C17798 = C2594 * C92333;
    const double C31958 = C2594 * C92226;
    const double C34346 = C2594 * C31252;
    const double C45480 = C2594 * C92360;
    const double C3290 = C3287 * C92177;
    const double C18745 = C3287 * C92333;
    const double C35284 = C3287 * C31252;
    const double C11030 = C11018 * C92102;
    const double C81927 = C11018 * C92102;
    const double C2750 = C92177 * C1468;
    const double C9507 = C92177 * C1471;
    const double C7604 = C4027 * C5806;
    const double C27757 = C92226 * C5806;
    const double C48096 = C44794 * C5806;
    const double C52752 = C92226 * C5806;
    const double C11896 = C92177 * C5809;
    const double C26735 = C92226 * C5809;
    const double C42999 = C92226 * C5809;
    const double C23252 = C14697 * C1600;
    const double C64527 = C31251 * C1600;
    const double C13113 = C92102 * C1603;
    const double C21474 = C14697 * C1603;
    const double C62764 = C31251 * C1603;
    const double C83826 = C92102 * C1603;
    const double C5060 = C5048 * C92102;
    const double C45751 = C5048 * C92102;
    const double C2137 = C92188 * C953;
    const double C4215 = C92188 * C956;
    const double C17592 = C14697 * C1201;
    const double C34140 = C31251 * C1201;
    const double C7183 = C92102 * C1204;
    const double C16006 = C14697 * C1204;
    const double C32557 = C31251 * C1204;
    const double C47683 = C92102 * C1204;
    const double C90120 = C90119 / C90095;
    const double C90131 = C90093 * C90130;
    const double C107 = (-C90130 / C90095) / (4 * C90124);
    const double C4031 = (-C90130 / C90095) / C90100;
    const double C14705 = (-C90130 / C90095) / (4 * C90099);
    const double C31259 = (-C90130 / C90095) / (4 * C90099);
    const double C36263 = -C90130 / C90095;
    const double C44798 = (-C90130 / C90095) / C90100;
    const double C4853 = C4028 * C4821;
    const double C4851 = C4028 * C4820;
    const double C4841 = C4028 * C811;
    const double C4839 = C4028 * C810;
    const double C4833 = C4028 * C809;
    const double C4831 = C4028 * C808;
    const double C5061 = C5057 * C4028;
    const double C5168 = C4028 * C5139;
    const double C5164 = C4028 * C4815;
    const double C5161 = C4028 * C1012;
    const double C5157 = C4028 * C798;
    const double C5153 = C4028 * C1008;
    const double C5149 = C4028 * C797;
    const double C5435 = C4028 * C5417;
    const double C5432 = C4028 * C1194;
    const double C5427 = C4028 * C1190;
    const double C6502 = C4028 * C813;
    const double C6500 = C4028 * C812;
    const double C6494 = C4028 * C807;
    const double C6492 = C4028 * C806;
    const double C6850 = C4028 * C1013;
    const double C6846 = C4028 * C799;
    const double C6842 = C4028 * C1009;
    const double C6838 = C4028 * C796;
    const double C7180 = C4028 * C1195;
    const double C7176 = C4028 * C1191;
    const double C8477 = C4028 * C3362;
    const double C8475 = C4028 * C3361;
    const double C8469 = C4028 * C5710;
    const double C8467 = C4028 * C5709;
    const double C8817 = C4028 * C5971;
    const double C8813 = C4028 * C5702;
    const double C8809 = C4028 * C3587;
    const double C8805 = C4028 * C3357;
    const double C9131 = C4028 * C6217;
    const double C9127 = C4028 * C3801;
    const double C10906 = C4028 * C10874;
    const double C10904 = C4028 * C10873;
    const double C10894 = C4028 * C1392;
    const double C10892 = C4028 * C1391;
    const double C10886 = C4028 * C1390;
    const double C10884 = C4028 * C1389;
    const double C11031 = C11027 * C4028;
    const double C11220 = C4028 * C11191;
    const double C11216 = C4028 * C10868;
    const double C11213 = C4028 * C1593;
    const double C11209 = C4028 * C1379;
    const double C11205 = C4028 * C1589;
    const double C11201 = C4028 * C1378;
    const double C11514 = C4028 * C11497;
    const double C11511 = C4028 * C1775;
    const double C11507 = C4028 * C1771;
    const double C12762 = C4028 * C1394;
    const double C12760 = C4028 * C1393;
    const double C12754 = C4028 * C1388;
    const double C12752 = C4028 * C1387;
    const double C13110 = C4028 * C1594;
    const double C13106 = C4028 * C1380;
    const double C13102 = C4028 * C1590;
    const double C13098 = C4028 * C1377;
    const double C13426 = C4028 * C1776;
    const double C13422 = C4028 * C1772;
    const double C13760 = C4028 * C5712;
    const double C13758 = C4028 * C5711;
    const double C14090 = C4028 * C5973;
    const double C14086 = C4028 * C5703;
    const double C14414 = C4028 * C6219;
    const double C27608 = C4028 * C3364;
    const double C27606 = C4028 * C3363;
    const double C28034 = C4028 * C3588;
    const double C28030 = C4028 * C3358;
    const double C28448 = C4028 * C3802;
    const double C37119 = C37109 + C37117;
    const double C37118 = C37106 + C37116;
    const double C72052 = C72050 + C72051;
    const double C72049 = C72041 + C72042;
    const double C90190 = C90155 * C90187;
    const double C4363 =
        (ae * -2 * C90173) / C90124 +
        (((C90155 * ((-4 * C90175) / C90095 - (C90155 * C90187) / C90095) *
           ae) /
              C90095 +
          2 * ((C90186 * ae) / C90095 - C90173 / C90104)) *
         ae) /
            C90095 -
        C90187 / C90104;
    const double C4365 = (-C90187 / C90095) / (4 * C90099);
    const double C15037 = (-C90187 / C90095) / C90100;
    const double C31589 = (-C90187 / C90095) / C90100;
    const double C36471 = (-C90187 / C90095) / (4 * C90124);
    const double C45124 = (-C90187 / C90095) / (4 * C90099);
    const double C90284 = C90278 / C90095;
    const double C14803 = C14780 * C121;
    const double C14799 = C14780 * C111;
    const double C14796 = C14780 * C119;
    const double C14792 = C14780 * C110;
    const double C14788 = C14780 * C117;
    const double C14784 = C14780 * C109;
    const double C15061 = C14780 * C351;
    const double C15059 = C14780 * C186;
    const double C15049 = C14780 * C350;
    const double C15047 = C14780 * C185;
    const double C15041 = C14780 * C349;
    const double C15039 = C14780 * C184;
    const double C15156 = C295 * C14780;
    const double C15321 = C14780 * C570;
    const double C15318 = C14780 * C569;
    const double C15313 = C14780 * C568;
    const double C17050 = C14780 * C805;
    const double C17046 = C14780 * C795;
    const double C17042 = C14780 * C807;
    const double C17038 = C14780 * C796;
    const double C17376 = C14780 * C1009;
    const double C17374 = C14780 * C877;
    const double C17368 = C14780 * C1010;
    const double C17366 = C14780 * C878;
    const double C17695 = C14780 * C1192;
    const double C17691 = C14780 * C1191;
    const double C18009 = C14780 * C1386;
    const double C18005 = C14780 * C1376;
    const double C18001 = C14780 * C1388;
    const double C17997 = C14780 * C1377;
    const double C18325 = C14780 * C1590;
    const double C18323 = C14780 * C1458;
    const double C18317 = C14780 * C1591;
    const double C18315 = C14780 * C1459;
    const double C18639 = C14780 * C1773;
    const double C18635 = C14780 * C1772;
    const double C26732 = C14780 * C1394;
    const double C26728 = C14780 * C1380;
    const double C26724 = C14780 * C1392;
    const double C26720 = C14780 * C1379;
    const double C26717 = C14780 * C1390;
    const double C26713 = C14780 * C1378;
    const double C27052 = C14780 * C1593;
    const double C27050 = C14780 * C1461;
    const double C27044 = C14780 * C1594;
    const double C27042 = C14780 * C1462;
    const double C27032 = C14780 * C1589;
    const double C27030 = C14780 * C1457;
    const double C27374 = C14780 * C1776;
    const double C27370 = C14780 * C1775;
    const double C27367 = C14780 * C1771;
    const double C27754 = C14780 * C3364;
    const double C27750 = C14780 * C3358;
    const double C28174 = C14780 * C3588;
    const double C28172 = C14780 * C3440;
    const double C28582 = C14780 * C3802;
    const double C30200 = C14780 * C3362;
    const double C30196 = C14780 * C3357;
    const double C30616 = C14780 * C3587;
    const double C30614 = C14780 * C3439;
    const double C31028 = C14780 * C3801;
    const double C86810 = C14780 * C10874;
    const double C86806 = C14780 * C10868;
    const double C86967 = C41417 * C14780;
    const double C87055 = C14780 * C11191;
    const double C87053 = C14780 * C11000;
    const double C87288 = C14780 * C11497;
    const double C89337 = C14780 * C5712;
    const double C89333 = C14780 * C5703;
    const double C89649 = C14780 * C5973;
    const double C89647 = C14780 * C5801;
    const double C89961 = C14780 * C6219;
    const double C31357 = C31334 * C121;
    const double C31353 = C31334 * C111;
    const double C31350 = C31334 * C119;
    const double C31346 = C31334 * C110;
    const double C31342 = C31334 * C117;
    const double C31338 = C31334 * C109;
    const double C31613 = C31334 * C351;
    const double C31611 = C31334 * C186;
    const double C31601 = C31334 * C350;
    const double C31599 = C31334 * C185;
    const double C31593 = C31334 * C349;
    const double C31591 = C31334 * C184;
    const double C31708 = C295 * C31334;
    const double C31872 = C31334 * C570;
    const double C31869 = C31334 * C569;
    const double C31864 = C31334 * C568;
    const double C33601 = C31334 * C805;
    const double C33597 = C31334 * C795;
    const double C33593 = C31334 * C807;
    const double C33589 = C31334 * C796;
    const double C33925 = C31334 * C1009;
    const double C33923 = C31334 * C877;
    const double C33917 = C31334 * C1010;
    const double C33915 = C31334 * C878;
    const double C34243 = C31334 * C1192;
    const double C34239 = C31334 * C1191;
    const double C34557 = C31334 * C1386;
    const double C34553 = C31334 * C1376;
    const double C34549 = C31334 * C1388;
    const double C34545 = C31334 * C1377;
    const double C34869 = C31334 * C1590;
    const double C34867 = C31334 * C1458;
    const double C34861 = C31334 * C1591;
    const double C34859 = C31334 * C1459;
    const double C35181 = C31334 * C1773;
    const double C35177 = C31334 * C1772;
    const double C41234 = C31334 * C10874;
    const double C41230 = C31334 * C10868;
    const double C41227 = C31334 * C1392;
    const double C41223 = C31334 * C1379;
    const double C41219 = C31334 * C1390;
    const double C41215 = C31334 * C1378;
    const double C41421 = C41417 * C31334;
    const double C41523 = C31334 * C11191;
    const double C41521 = C31334 * C11000;
    const double C41511 = C31334 * C1593;
    const double C41509 = C31334 * C1461;
    const double C41503 = C31334 * C1589;
    const double C41501 = C31334 * C1457;
    const double C41789 = C31334 * C11497;
    const double C41786 = C31334 * C1775;
    const double C41782 = C31334 * C1771;
    const double C42996 = C31334 * C1394;
    const double C42992 = C31334 * C1380;
    const double C43304 = C31334 * C1594;
    const double C43302 = C31334 * C1462;
    const double C43614 = C31334 * C1776;
    const double C43933 = C31334 * C5712;
    const double C43929 = C31334 * C5703;
    const double C43925 = C31334 * C3362;
    const double C43921 = C31334 * C3357;
    const double C44264 = C31334 * C5973;
    const double C44262 = C31334 * C5801;
    const double C44256 = C31334 * C3587;
    const double C44254 = C31334 * C3439;
    const double C44593 = C31334 * C6219;
    const double C44589 = C31334 * C3801;
    const double C52749 = C31334 * C3364;
    const double C52745 = C31334 * C3358;
    const double C53157 = C31334 * C3588;
    const double C53155 = C31334 * C3440;
    const double C53559 = C31334 * C3802;
    const double C90216 = C90158 * C90213;
    const double C10082 =
        (ae * -2 * C90199) / C90124 +
        (((C90158 * ((-4 * C90201) / C90095 - (C90158 * C90213) / C90095) *
           ae) /
              C90095 +
          2 * ((C90212 * ae) / C90095 - C90199 / C90104)) *
         ae) /
            C90095 -
        C90213 / C90104;
    const double C10084 = (-C90213 / C90095) / (4 * C90099);
    const double C20401 = (-C90213 / C90095) / C90100;
    const double C61691 = (-C90213 / C90095) / C90100;
    const double C71360 = (-C90213 / C90095) / (4 * C90124);
    const double C81051 = (-C90213 / C90095) / (4 * C90099);
    const double C90355 = C90349 / C90095;
    const double C19921 = C19898 * C121;
    const double C19917 = C19898 * C111;
    const double C19914 = C19898 * C119;
    const double C19910 = C19898 * C110;
    const double C19906 = C19898 * C117;
    const double C19902 = C19898 * C109;
    const double C20162 = C19898 * C351;
    const double C20159 = C19898 * C350;
    const double C20154 = C19898 * C349;
    const double C20319 = C212 * C19898;
    const double C20425 = C19898 * C570;
    const double C20423 = C19898 * C269;
    const double C20413 = C19898 * C569;
    const double C20411 = C19898 * C268;
    const double C20405 = C19898 * C568;
    const double C20403 = C19898 * C267;
    const double C22173 = C19898 * C805;
    const double C22169 = C19898 * C795;
    const double C22165 = C19898 * C807;
    const double C22161 = C19898 * C796;
    const double C22482 = C19898 * C1010;
    const double C22478 = C19898 * C1009;
    const double C22796 = C19898 * C1191;
    const double C22794 = C19898 * C943;
    const double C22788 = C19898 * C1192;
    const double C22786 = C19898 * C944;
    const double C23139 = C19898 * C1386;
    const double C23135 = C19898 * C1376;
    const double C23131 = C19898 * C1388;
    const double C23127 = C19898 * C1377;
    const double C23456 = C19898 * C1591;
    const double C23452 = C19898 * C1590;
    const double C23775 = C19898 * C1772;
    const double C23773 = C19898 * C1524;
    const double C23767 = C19898 * C1773;
    const double C23765 = C19898 * C1525;
    const double C25870 = C19898 * C813;
    const double C25866 = C19898 * C799;
    const double C25862 = C19898 * C811;
    const double C25858 = C19898 * C798;
    const double C25855 = C19898 * C809;
    const double C25851 = C19898 * C797;
    const double C26176 = C19898 * C1013;
    const double C26172 = C19898 * C1012;
    const double C26169 = C19898 * C1008;
    const double C26496 = C19898 * C1194;
    const double C26494 = C19898 * C946;
    const double C26488 = C19898 * C1195;
    const double C26486 = C19898 * C947;
    const double C26476 = C19898 * C1190;
    const double C26474 = C19898 * C942;
    const double C29124 = C19898 * C3364;
    const double C29120 = C19898 * C3358;
    const double C29520 = C19898 * C3588;
    const double C29926 = C19898 * C3802;
    const double C29924 = C19898 * C3514;
    const double C30338 = C19898 * C3362;
    const double C30334 = C19898 * C3357;
    const double C30758 = C19898 * C3587;
    const double C31168 = C19898 * C3801;
    const double C31166 = C19898 * C3513;
    const double C57002 = C19898 * C4821;
    const double C56998 = C19898 * C4815;
    const double C57237 = C19898 * C5139;
    const double C57316 = C36943 * C19898;
    const double C57479 = C19898 * C5417;
    const double C57477 = C19898 * C5030;
    const double C60326 = C19898 * C5710;
    const double C60322 = C19898 * C5702;
    const double C60647 = C19898 * C5971;
    const double C60958 = C19898 * C6217;
    const double C60956 = C19898 * C5885;
    const double C61212 = C61189 * C121;
    const double C61208 = C61189 * C111;
    const double C61205 = C61189 * C119;
    const double C61201 = C61189 * C110;
    const double C61197 = C61189 * C117;
    const double C61193 = C61189 * C109;
    const double C61453 = C61189 * C351;
    const double C61450 = C61189 * C350;
    const double C61445 = C61189 * C349;
    const double C61610 = C212 * C61189;
    const double C61715 = C61189 * C570;
    const double C61713 = C61189 * C269;
    const double C61703 = C61189 * C569;
    const double C61701 = C61189 * C268;
    const double C61695 = C61189 * C568;
    const double C61693 = C61189 * C267;
    const double C63459 = C61189 * C805;
    const double C63455 = C61189 * C795;
    const double C63451 = C61189 * C807;
    const double C63447 = C61189 * C796;
    const double C63761 = C61189 * C1010;
    const double C63757 = C61189 * C1009;
    const double C64073 = C61189 * C1191;
    const double C64071 = C61189 * C943;
    const double C64065 = C61189 * C1192;
    const double C64063 = C61189 * C944;
    const double C64414 = C61189 * C1386;
    const double C64410 = C61189 * C1376;
    const double C64406 = C61189 * C1388;
    const double C64402 = C61189 * C1377;
    const double C64731 = C61189 * C1591;
    const double C64727 = C61189 * C1590;
    const double C65049 = C61189 * C1772;
    const double C65047 = C61189 * C1524;
    const double C65041 = C61189 * C1773;
    const double C65039 = C61189 * C1525;
    const double C66863 = C61189 * C4821;
    const double C66859 = C61189 * C4815;
    const double C66856 = C61189 * C811;
    const double C66852 = C61189 * C798;
    const double C66848 = C61189 * C809;
    const double C66844 = C61189 * C797;
    const double C67106 = C61189 * C5139;
    const double C67103 = C61189 * C1012;
    const double C67099 = C61189 * C1008;
    const double C67187 = C36943 * C61189;
    const double C67364 = C61189 * C5417;
    const double C67362 = C61189 * C5030;
    const double C67352 = C61189 * C1194;
    const double C67350 = C61189 * C946;
    const double C67344 = C61189 * C1190;
    const double C67342 = C61189 * C942;
    const double C68431 = C61189 * C813;
    const double C68427 = C61189 * C799;
    const double C68729 = C61189 * C1013;
    const double C69029 = C61189 * C1195;
    const double C69027 = C61189 * C947;
    const double C70245 = C61189 * C5710;
    const double C70241 = C61189 * C5702;
    const double C70237 = C61189 * C3362;
    const double C70233 = C61189 * C3357;
    const double C70568 = C61189 * C5971;
    const double C70564 = C61189 * C3587;
    const double C70886 = C61189 * C3801;
    const double C70884 = C61189 * C3513;
    const double C70878 = C61189 * C6217;
    const double C70876 = C61189 * C5885;
    const double C78370 = C61189 * C3364;
    const double C78366 = C61189 * C3358;
    const double C78764 = C61189 * C3588;
    const double C79164 = C61189 * C3802;
    const double C79162 = C61189 * C3514;
    const double C4739 = C4737 * C4027;
    const double C7389 = C4737 * C4026;
    const double C17799 = C4737 * C92226;
    const double C34347 = C4737 * C92226;
    const double C45478 = C4737 * C44794;
    const double C47887 = C4737 * C92360;
    const double C11320 = C9769 * C92102;
    const double C13215 = C9769 * C4023;
    const double C21553 = C9769 * C92358;
    const double C62843 = C9769 * C31250;
    const double C73262 = C9769 * C92097;
    const double C82173 = C9769 * C92102;
    const double C83927 = C9769 * C92320;
    const double C8356 = C8354 * C4026;
    const double C18746 = C8354 * C92226;
    const double C35285 = C8354 * C92226;
    const double C48811 = C8354 * C92360;
    const double C14198 = C12221 * C92102;
    const double C24280 = C12221 * C92358;
    const double C65554 = C12221 * C31250;
    const double C84843 = C12221 * C92102;
    const double C14209 = C14207 + C14202;
    const double C2057 = C92177 * C887;
    const double C14806 = C92226 * C887;
    const double C31360 = C92226 * C887;
    const double C4133 = C4027 * C890;
    const double C17053 = C92226 * C890;
    const double C33604 = C92226 * C890;
    const double C44900 = C44794 * C890;
    const double C2830 = C92188 * C1534;
    const double C19924 = C92252 * C1534;
    const double C61215 = C92252 * C1534;
    const double C9608 = C9424 * C1537;
    const double C23142 = C92252 * C1537;
    const double C64417 = C92252 * C1537;
    const double C80593 = C80417 * C1537;
    const double C18012 = C92226 * C3445;
    const double C22062 = C92177 * C3445;
    const double C34560 = C92226 * C3445;
    const double C18114 = C92188 * C3519;
    const double C22176 = C92252 * C3519;
    const double C63462 = C92252 * C3519;
    const double C210 = C182 * C123;
    const double C293 = C265 * C123;
    const double C2056 = C182 * C803;
    const double C2136 = C265 * C803;
    const double C14805 = C14781 * C803;
    const double C16929 = C14704 * C803;
    const double C31359 = C31335 * C803;
    const double C33480 = C31258 * C803;
    const double C4132 = C4108 * C815;
    const double C4214 = C265 * C815;
    const double C6506 = C4030 * C815;
    const double C15499 = C14704 * C815;
    const double C17052 = C14781 * C815;
    const double C32050 = C31258 * C815;
    const double C33603 = C31335 * C815;
    const double C44899 = C44875 * C815;
    const double C47025 = C90114 * C815;
    const double C2749 = C182 * C1384;
    const double C2829 = C265 * C1384;
    const double C19923 = C19899 * C1384;
    const double C22918 = C14704 * C1384;
    const double C61214 = C61190 * C1384;
    const double C64195 = C31258 * C1384;
    const double C9506 = C182 * C1396;
    const double C9607 = C9583 * C1396;
    const double C12766 = C4030 * C1396;
    const double C21201 = C14704 * C1396;
    const double C23141 = C19899 * C1396;
    const double C62491 = C31258 * C1396;
    const double C64416 = C61190 * C1396;
    const double C80592 = C80568 * C1396;
    const double C83505 = C90114 * C1396;
    const double C18011 = C14781 * C3366;
    const double C18113 = C265 * C3366;
    const double C18852 = C14704 * C3366;
    const double C22061 = C182 * C3366;
    const double C22175 = C19899 * C3366;
    const double C27612 = C4030 * C3366;
    const double C34559 = C31335 * C3366;
    const double C35387 = C31258 * C3366;
    const double C52607 = C90114 * C3366;
    const double C63461 = C61190 * C3366;
    const double C16930 = C14697 * C818;
    const double C33481 = C31251 * C818;
    const double C17263 = C14697 * C1019;
    const double C33812 = C31251 * C1019;
    const double C6853 = C92102 * C1022;
    const double C15772 = C14697 * C1022;
    const double C32323 = C31251 * C1022;
    const double C47360 = C92102 * C1022;
    const double C22919 = C14697 * C1399;
    const double C64196 = C31251 * C1399;
    const double C23563 = C14697 * C1782;
    const double C64838 = C31251 * C1782;
    const double C13429 = C92102 * C1785;
    const double C21714 = C14697 * C1785;
    const double C63004 = C31251 * C1785;
    const double C84134 = C92102 * C1785;
    const double C19176 = C14697 * C3593;
    const double C28037 = C92102 * C3593;
    const double C35711 = C31251 * C3593;
    const double C53020 = C92102 * C3593;
    const double C19476 = C14697 * C3807;
    const double C28451 = C92102 * C3807;
    const double C36011 = C31251 * C3807;
    const double C53428 = C92102 * C3807;
    const double C16927 = C14704 * C802;
    const double C17257 = C14697 * C802;
    const double C33478 = C31258 * C802;
    const double C33806 = C31251 * C802;
    const double C6504 = C4030 * C814;
    const double C6849 = C92102 * C814;
    const double C15497 = C14704 * C814;
    const double C15766 = C14697 * C814;
    const double C32048 = C31258 * C814;
    const double C32317 = C31251 * C814;
    const double C47023 = C90114 * C814;
    const double C47356 = C92102 * C814;
    const double C22916 = C14704 * C1383;
    const double C23246 = C14697 * C1383;
    const double C64193 = C31258 * C1383;
    const double C64521 = C31251 * C1383;
    const double C12764 = C4030 * C1395;
    const double C13109 = C92102 * C1395;
    const double C21199 = C14704 * C1395;
    const double C21468 = C14697 * C1395;
    const double C62489 = C31258 * C1395;
    const double C62758 = C31251 * C1395;
    const double C83503 = C90114 * C1395;
    const double C83822 = C92102 * C1395;
    const double C18850 = C14704 * C3365;
    const double C19170 = C14697 * C3365;
    const double C27610 = C4030 * C3365;
    const double C28033 = C92102 * C3365;
    const double C35385 = C31258 * C3365;
    const double C35705 = C31251 * C3365;
    const double C52605 = C90114 * C3365;
    const double C53016 = C92102 * C3365;
    const double C90521 = C90481 + C90519;
    const double C11995 =
        (C90526 * C90610 + be * C90570 * C91353 +
         C90570 * (be * C91353 +
                   C90570 * C90526 *
                       (C90600 + ae * C91097 +
                        C90404 * (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576)))) /
        C90099;
    const double C11786 = (C90526 * C90470 + C91353 * C90756) / C90095;
    const double C91478 = C91453 + C91476;
    const double C91694 = C91673 + C91692;
    const double C5142 =
        (3 * (C90627 + C90526 * C91037 + C91034 * ae) +
         C90526 * (2 * C91037 + C90526 * C91084 + C91073 * ae) +
         (2 * C91034 + C90526 * C91073) * ae) /
        C90095;
    const double C5976 =
        (C90627 + C90526 * C91037 + C91034 * ae + C91084 * C90756) / C90095;
    const double C8801 =
        (C90570 * (2 * C91037 + C90526 * C91084 + C91073 * ae)) / C90095;
    const double C11500 =
        (3 * (C90708 + C90570 * C91305 + C91302 * ae) +
         C90570 * (2 * C91305 + C90570 * C91349 + C91341 * ae) +
         (2 * C91302 + C90570 * C91341) * ae) /
        C90095;
    const double C5254 =
        (3 * (C91032 + ae * C91036 + be * C91037 + C90526 * C91076) +
         ae * (2 * C91036 + C90526 * C91083 + C91073 * be) +
         be * (2 * C91037 + C90526 * C91084 + C91073 * ae) +
         C90526 *
             (2 * C91076 + ae * C91083 + be * C91084 +
              C90526 * (C91065 + ae * C91077 + be * C91078 +
                        C90526 * (ae * C91066 + be * C91069 +
                                  C90526 * C90404 *
                                      (C90477 * C90478 +
                                       C90658 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C6308 =
        (C91108 + be * C91116 + C90526 * C91121 + ae * C90570 * C91083 +
         C90570 * (ae * C91083 +
                   C90570 * (C91117 + be * C90526 * C91118 +
                             C90526 * (be * C91118 + C90526 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90741)))) /
        C90099;
    const double C8919 =
        (2 * (ae * C90570 * C90551 + be * C90570 * C90638 + C90526 * C91219) +
         ae * C90570 * C91083 + be * C90570 * C91084 +
         C90526 * (C91219 + ae * C90570 * C91077 + be * C90570 * C91078 +
                   C90526 * (ae * C90570 * C91066 + be * C90570 * C91069 +
                             C90526 * C90570 * C90404 *
                                 (C90477 * C90478 +
                                  C90658 * bs[7] * std::pow(C90410, 7)) *
                                 C90097))) /
        C90099;
    const double C9233 =
        (ae * (2 * C91036 + C90526 * C91083 + C91073 * be) +
         C90570 * (2 * C91121 + be * C91122 +
                   C90526 * (C91117 + be * C90526 * C91118 +
                             C90526 * (be * C91118 + C90526 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90741)))) /
        C90099;
    const double C4951 =
        (3 * (C90540 + C90526 * C91036 + C91034 * be) +
         C90526 * (2 * C91036 + C90526 * C91083 + C91073 * be) +
         (2 * C91034 + C90526 * C91073) * be) /
        C90095;
    const double C5804 =
        (C90540 + C90526 * C91036 + C91034 * be + C91083 * C90756) / C90095;
    const double C8589 =
        (C90570 * (2 * C91036 + C90526 * C91083 + C91073 * be)) / C90095;
    const double C11685 =
        (3 * (C91124 + ae * C91304 + be * C91305 + C90570 * C91338) +
         ae * (2 * C91304 + C90570 * C91348 + C91341 * be) +
         be * (2 * C91305 + C90570 * C91349 + C91341 * ae) +
         C90570 *
             (2 * C91338 + ae * C91348 + be * C91349 +
              C90570 * (C91128 + ae * C91339 + be * C91342 +
                        C90570 * (ae * C91097 + be * C91118 +
                                  C90570 * C90404 *
                                      (C90477 * C90478 +
                                       C90756 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C14310 =
        (ae * (2 * C91304 + C90570 * C91348 + C91341 * be) +
         C90526 * (2 * C91225 + be * C91271 +
                   C90570 * (C91096 + be * C90570 * C91069 +
                             C90570 * (be * C91069 + C90570 * C90404 *
                                                         std::pow(C90410, 7) *
                                                         bs[7] * C90681)))) /
        C90099;
    const double C11112 =
        (3 * (C90584 + C90570 * C91304 + C91302 * be) +
         C90570 * (2 * C91304 + C90570 * C91348 + C91341 * be) +
         (2 * C91302 + C90570 * C91341) * be) /
        C90095;
    const double C90520 = C90479 + C90518;
    const double C12425 =
        (C90526 * C90734 + ae * C90570 * C91358 +
         C90570 * (ae * C91358 +
                   C90570 * C90526 *
                       (C90724 + be * C91118 +
                        C90404 * (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700)))) /
        C90099;
    const double C11785 = (C90526 * C90469 + C91358 * C90756) / C90095;
    const double C91477 = C91448 + C91475;
    const double C91693 = C91667 + C91691;
    const double C41693 =
        (3 * (C91110 + C90570 * C91407 + C91402 * ae) +
         C90570 * (2 * C91407 + C90570 * C91604 + C91593 * ae) +
         (2 * C91402 + C90570 * C91593) * ae) /
        C90095;
    const double C41869 =
        (3 * (C91400 + ae * C91406 + be * C91407 + C90570 * C91596) +
         ae * (2 * C91406 + C90570 * C91603 + C91593 * be) +
         be * (2 * C91407 + C90570 * C91604 + C91593 * ae) +
         C90570 *
             (2 * C91596 + ae * C91603 + be * C91604 +
              C90570 * (C91585 + ae * C91597 + be * C91598 +
                        C90570 * (ae * C91586 + be * C91589 +
                                  C90570 * C90526 *
                                      (C90477 * C90478 +
                                       C90756 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C44379 =
        (2 * C91222 + be * C91267 + C90570 * C91527 +
         ae * (2 * C91406 + C90570 * C91603 + C91593 * be) +
         C90526 *
             (ae * (2 * C91320 +
                    C90570 * (C90589 + C90570 * (C90570 * C90602 + C90486) +
                              C90570 * C90476 * be) +
                    C91567 * be) +
              C90526 * (2 * C91524 + be * C91568 +
                        C90570 * (C90690 + be * C90570 * C90645 +
                                  C90570 * (be * C90645 +
                                            C90570 * std::pow(C90410, 7) *
                                                bs[7] * C90681))))) /
        C90099;
    const double C41320 =
        (3 * (C91089 + C90570 * C91406 + C91402 * be) +
         C90570 * (2 * C91406 + C90570 * C91603 + C91593 * be) +
         (2 * C91402 + C90570 * C91593) * be) /
        C90095;
    const double C445 = C441 + C433;
    const double C2291 = C2288 + C2276;
    const double C2984 = C2981 + C2969;
    const double C9770 = C9768 + C9764;
    const double C22379 = C22378 + C22376;
    const double C12218 = C12216 - C12210;
    const double C44596 = C92226 * C6306;
    const double C58156 = C44794 * C6306;
    const double C68054 = C4027 * C6306;
    const double C89964 = C92226 * C6306;
    const double C60853 = C44794 * C9232;
    const double C70773 = C4027 * C9232;
    const double C43932 = C92226 * C5802;
    const double C44266 = C31335 * C5802;
    const double C57652 = C44794 * C5802;
    const double C57893 = C44875 * C5802;
    const double C67550 = C4027 * C5802;
    const double C67791 = C4108 * C5802;
    const double C89336 = C92226 * C5802;
    const double C89651 = C14781 * C5802;
    const double C60217 = C44794 * C8588;
    const double C60536 = C44875 * C8588;
    const double C70128 = C4027 * C8588;
    const double C70453 = C4108 * C8588;
    const double C73872 = C73871 + C73869;
    const double C72113 = C72112 + C72110;
    const double C736 = C732 + C724;
    const double C2593 = C2590 + C2578;
    const double C4738 = C4736 + C4730;
    const double C3286 = C3283 + C3271;
    const double C18750 = C18749 + C18744;
    const double C37228 = C37227 + C37225;
    const double C39589 = C39588 + C39586;
    const double C44386 = C9424 * C14309;
    const double C89764 = C80417 * C14309;
    const double C60539 = C44794 * C8918;
    const double C70456 = C4027 * C8918;
    const double C36941 = C36262 * C5141;
    const double C37050 = C265 * C5141;
    const double C40602 = C36262 * C5975;
    const double C40762 = C9583 * C5975;
    const double C44268 = C31335 * C5975;
    const double C57895 = C44875 * C5975;
    const double C60649 = C19899 * C5975;
    const double C67793 = C4108 * C5975;
    const double C70570 = C61190 * C5975;
    const double C86388 = C80568 * C5975;
    const double C89653 = C14781 * C5975;
    const double C39237 = C36262 * C8800;
    const double C39373 = C265 * C8800;
    const double C57239 = C19899 * C8800;
    const double C60538 = C44875 * C8800;
    const double C67108 = C61190 * C8800;
    const double C70455 = C4108 * C8800;
    const double C11343 = C11339 * C92102;
    const double C73263 = C11339 * C92097;
    const double C82174 = C11339 * C92102;
    const double C72219 = C36262 * C11499;
    const double C72273 = C182 * C11499;
    const double C7388 = C5626 * C4027;
    const double C47886 = C5626 * C44794;
    const double C8355 = C8353 * C4027;
    const double C48810 = C8353 * C44794;
    const double C15410 = C15406 + C15407;
    const double C31961 = C31957 + C31958;
    const double C90121 = C90120 - C90110;
    const double C90132 = C90131 / C90095;
    const double C4848 = C4031 * C4814;
    const double C4844 = C4031 * C799;
    const double C4836 = C4031 * C796;
    const double C6505 = C4031 * C800;
    const double C6497 = C4031 * C795;
    const double C8472 = C4031 * C3358;
    const double C8464 = C4031 * C5701;
    const double C10901 = C4031 * C10867;
    const double C10897 = C4031 * C1380;
    const double C10889 = C4031 * C1377;
    const double C12765 = C4031 * C1381;
    const double C12757 = C4031 * C1376;
    const double C13763 = C4031 * C5704;
    const double C27611 = C4031 * C3359;
    const double C15498 = C14705 * C800;
    const double C15494 = C14705 * C795;
    const double C16928 = C14705 * C794;
    const double C18851 = C14705 * C3359;
    const double C21200 = C14705 * C1381;
    const double C21196 = C14705 * C1376;
    const double C22917 = C14705 * C1375;
    const double C32049 = C31259 * C800;
    const double C32045 = C31259 * C795;
    const double C33479 = C31259 * C794;
    const double C35386 = C31259 * C3359;
    const double C62490 = C31259 * C1381;
    const double C62486 = C31259 * C1376;
    const double C64194 = C31259 * C1375;
    const double C36740 = C36263 * C4816;
    const double C36736 = C36263 * C4815;
    const double C36732 = C36263 * C798;
    const double C36728 = C36263 * C797;
    const double C37770 = C36263 * C4814;
    const double C37766 = C36263 * C799;
    const double C37762 = C36263 * C796;
    const double C39004 = C36263 * C3357;
    const double C39000 = C36263 * C5702;
    const double C38996 = C36263 * C8454;
    const double C40337 = C36263 * C5705;
    const double C40333 = C36263 * C5703;
    const double C41123 = C36263 * C10868;
    const double C41119 = C36263 * C13749;
    const double C41115 = C36263 * C1379;
    const double C41111 = C36263 * C1378;
    const double C41975 = C36263 * C5704;
    const double C41971 = C36263 * C3358;
    const double C42885 = C36263 * C1380;
    const double C42881 = C36263 * C1377;
    const double C58333 = C36263 * C5701;
    const double C71867 = C36263 * C10869;
    const double C72987 = C36263 * C10867;
    const double C45573 = C44798 * C4814;
    const double C45569 = C44798 * C799;
    const double C45561 = C44798 * C796;
    const double C47024 = C44798 * C800;
    const double C47016 = C44798 * C795;
    const double C48920 = C44798 * C3358;
    const double C48912 = C44798 * C5701;
    const double C51626 = C44798 * C1380;
    const double C51618 = C44798 * C5704;
    const double C51614 = C44798 * C1377;
    const double C52606 = C44798 * C3359;
    const double C53828 = C44798 * C1376;
    const double C81837 = C44798 * C10867;
    const double C83504 = C44798 * C1381;
    const double C5063 = C5061 + C5062;
    const double C5174 = C5160 - C5161;
    const double C5172 = C5156 - C5157;
    const double C5439 = C5431 - C5432;
    const double C30478 = C8809 - C8810;
    const double C30474 = C8810 - C8809;
    const double C30476 = C8805 - C8806;
    const double C30472 = C8806 - C8805;
    const double C30894 = C9127 - C9128;
    const double C30892 = C9128 - C9127;
    const double C11033 = C11031 + C11032;
    const double C11226 = C11212 - C11213;
    const double C11224 = C11208 - C11209;
    const double C11518 = C11510 - C11511;
    const double C90303 = C90190 / C90095;
    const double C4364 =
        (((-4 * C90175) / C90095 - C90190 / C90095) * ae) / C90104 +
        ((2 * ((0 * ae) / C90095 - C90175 / C90099) - C90190 / C90104) * ae) /
            C90095;
    const double C15036 =
        (((-4 * C90175) / C90095 - C90190 / C90095) * ae) / C90095;
    const double C31588 =
        -(((-4 * C90175) / C90095 - C90190 / C90095) * be) / C90095;
    const double C4388 = C4363 * C110;
    const double C4368 = C4363 * C109;
    const double C6962 = C4363 * C796;
    const double C7921 = C4363 * C1377;
    const double C67800 = C4363 * C1379;
    const double C67780 = C4363 * C1378;
    const double C70446 = C4363 * C3357;
    const double C4380 = C4365 * C800;
    const double C4376 = C4365 * C799;
    const double C6954 = C4365 * C4814;
    const double C7913 = C4365 * C5701;
    const double C67792 = C4365 * C5705;
    const double C67788 = C4365 * C5702;
    const double C70454 = C4365 * C8454;
    const double C15056 = C15037 * C794;
    const double C15052 = C15037 * C795;
    const double C15044 = C15037 * C796;
    const double C17371 = C15037 * C799;
    const double C17363 = C15037 * C800;
    const double C18320 = C15037 * C3358;
    const double C18312 = C15037 * C3359;
    const double C27047 = C15037 * C5703;
    const double C27039 = C15037 * C5704;
    const double C27035 = C15037 * C3357;
    const double C28169 = C15037 * C5701;
    const double C30619 = C15037 * C5702;
    const double C87050 = C15037 * C13749;
    const double C89652 = C15037 * C5705;
    const double C31608 = C31589 * C794;
    const double C31604 = C31589 * C795;
    const double C31596 = C31589 * C796;
    const double C33920 = C31589 * C799;
    const double C33912 = C31589 * C800;
    const double C34864 = C31589 * C3358;
    const double C34856 = C31589 * C3359;
    const double C41518 = C31589 * C13749;
    const double C41514 = C31589 * C5703;
    const double C41506 = C31589 * C3357;
    const double C43307 = C31589 * C5704;
    const double C44267 = C31589 * C5705;
    const double C44259 = C31589 * C5702;
    const double C53152 = C31589 * C5701;
    const double C45139 = C45124 * C800;
    const double C45135 = C45124 * C799;
    const double C47460 = C45124 * C4814;
    const double C48392 = C45124 * C5701;
    const double C57894 = C45124 * C5705;
    const double C57890 = C45124 * C5702;
    const double C60537 = C45124 * C8454;
    const double C90287 = C90284 - C90279;
    const double C14809 = C14795 - C14796;
    const double C14807 = C14791 - C14792;
    const double C15160 = C15156 + C15157;
    const double C15325 = C15317 - C15318;
    const double C28984 = C18001 - C18002;
    const double C28980 = C18002 - C18001;
    const double C28982 = C17997 - C17998;
    const double C28978 = C17998 - C17997;
    const double C29786 = C18635 - C18636;
    const double C29784 = C18636 - C18635;
    const double C86804 = C26725 - C26724;
    const double C86802 = C26721 - C26720;
    const double C87286 = C27371 - C27370;
    const double C86971 = C86967 + C86968;
    const double C31363 = C31349 - C31350;
    const double C31361 = C31345 - C31346;
    const double C31712 = C31708 + C31709;
    const double C31876 = C31868 - C31869;
    const double C53973 = C34549 - C34550;
    const double C53969 = C34550 - C34549;
    const double C53971 = C34545 - C34546;
    const double C53967 = C34546 - C34545;
    const double C54775 = C35177 - C35178;
    const double C54773 = C35178 - C35177;
    const double C41240 = C41226 - C41227;
    const double C41238 = C41222 - C41223;
    const double C41423 = C41421 + C41422;
    const double C41793 = C41785 - C41786;
    const double C90374 = C90216 / C90095;
    const double C10083 =
        (((-4 * C90201) / C90095 - C90216 / C90095) * ae) / C90104 +
        ((2 * ((0 * ae) / C90095 - C90201 / C90099) - C90216 / C90104) * ae) /
            C90095;
    const double C20400 =
        (((-4 * C90201) / C90095 - C90216 / C90095) * ae) / C90095;
    const double C61690 =
        -(((-4 * C90201) / C90095 - C90216 / C90095) * be) / C90095;
    const double C10107 = C10082 * C110;
    const double C10087 = C10082 * C109;
    const double C12638 = C10082 * C796;
    const double C13640 = C10082 * C1377;
    const double C41011 = C10082 * C798;
    const double C40991 = C10082 * C797;
    const double C44705 = C10082 * C3357;
    const double C10099 = C10084 * C1381;
    const double C10095 = C10084 * C1380;
    const double C12630 = C10084 * C5704;
    const double C13632 = C10084 * C10867;
    const double C41003 = C10084 * C5705;
    const double C40999 = C10084 * C5703;
    const double C44697 = C10084 * C13749;
    const double C20420 = C20401 * C1375;
    const double C20416 = C20401 * C1376;
    const double C20408 = C20401 * C1377;
    const double C22791 = C20401 * C3358;
    const double C22783 = C20401 * C3359;
    const double C23770 = C20401 * C1380;
    const double C23762 = C20401 * C1381;
    const double C26491 = C20401 * C5702;
    const double C26483 = C20401 * C5701;
    const double C26479 = C20401 * C3357;
    const double C29921 = C20401 * C5704;
    const double C31163 = C20401 * C5703;
    const double C57474 = C20401 * C8454;
    const double C60953 = C20401 * C5705;
    const double C61710 = C61691 * C1375;
    const double C61706 = C61691 * C1376;
    const double C61698 = C61691 * C1377;
    const double C64068 = C61691 * C3358;
    const double C64060 = C61691 * C3359;
    const double C65044 = C61691 * C1380;
    const double C65036 = C61691 * C1381;
    const double C67359 = C61691 * C8454;
    const double C67355 = C61691 * C5702;
    const double C67347 = C61691 * C3357;
    const double C69032 = C61691 * C5701;
    const double C70881 = C61691 * C5703;
    const double C70873 = C61691 * C5705;
    const double C79159 = C61691 * C5704;
    const double C81066 = C81051 * C1381;
    const double C81062 = C81051 * C1380;
    const double C83381 = C81051 * C5704;
    const double C84332 = C81051 * C10867;
    const double C86625 = C81051 * C5705;
    const double C86621 = C81051 * C5703;
    const double C90064 = C81051 * C13749;
    const double C90358 = C90355 - C90350;
    const double C19927 = C19913 - C19914;
    const double C19925 = C19909 - C19910;
    const double C20166 = C20158 - C20159;
    const double C20323 = C20319 + C20320;
    const double C27894 = C22165 - C22166;
    const double C27890 = C22166 - C22165;
    const double C27892 = C22161 - C22162;
    const double C27888 = C22162 - C22161;
    const double C28314 = C22478 - C22479;
    const double C28312 = C22479 - C22478;
    const double C56996 = C25863 - C25862;
    const double C56994 = C25859 - C25858;
    const double C57235 = C26173 - C26172;
    const double C57320 = C57316 + C57317;
    const double C61218 = C61204 - C61205;
    const double C61216 = C61200 - C61201;
    const double C61457 = C61449 - C61450;
    const double C61614 = C61610 + C61611;
    const double C77182 = C63451 - C63452;
    const double C77178 = C63452 - C63451;
    const double C77180 = C63447 - C63448;
    const double C77176 = C63448 - C63447;
    const double C77580 = C63757 - C63758;
    const double C77578 = C63758 - C63757;
    const double C66869 = C66855 - C66856;
    const double C66867 = C66851 - C66852;
    const double C67110 = C67102 - C67103;
    const double C67191 = C67187 + C67188;
    const double C11345 = C11342 + C11320;
    const double C82176 = C82172 + C82173;
    const double C14211 = C14209 * C4023;
    const double C73865 = C14209 * C92097;
    const double C84844 = C14209 * C92320;
    const double C90523 = C90521 + C90503;
    const double C91480 = C91478 + C91468;
    const double C91696 = C91694 + C91675;
    const double C90522 = C90520 + C90500;
    const double C91479 = C91477 + C91465;
    const double C91695 = C91693 + C91670;
    const double C23353 = C2984 * C14697;
    const double C64628 = C2984 * C31251;
    const double C13216 = C9770 * C92102;
    const double C21552 = C9770 * C14697;
    const double C62842 = C9770 * C31251;
    const double C83928 = C9770 * C92102;
    const double C24281 = C22379 * C14697;
    const double C65555 = C22379 * C31251;
    const double C12220 = C12218 + C12211;
    const double C73873 = C73872 * C92097;
    const double C72114 = C72113 * C92097;
    const double C740 = C736 * C92177;
    const double C2596 = C2593 * C92177;
    const double C15408 = C2593 * C92226;
    const double C31959 = C2593 * C92226;
    const double C4740 = C4738 * C4027;
    const double C17797 = C4738 * C92226;
    const double C34345 = C4738 * C92226;
    const double C45479 = C4738 * C44794;
    const double C3289 = C3286 * C92177;
    const double C18751 = C18750 * C92226;
    const double C35283 = C18750 * C92226;
    const double C45578 = C90121 * C4821;
    const double C45576 = C90121 * C4820;
    const double C45566 = C90121 * C811;
    const double C45564 = C90121 * C810;
    const double C45558 = C90121 * C809;
    const double C45556 = C90121 * C808;
    const double C45748 = C5057 * C90121;
    const double C45849 = C90121 * C5139;
    const double C45845 = C90121 * C4815;
    const double C45842 = C90121 * C1012;
    const double C45838 = C90121 * C798;
    const double C45834 = C90121 * C1008;
    const double C45830 = C90121 * C797;
    const double C46090 = C90121 * C5417;
    const double C46087 = C90121 * C1194;
    const double C46082 = C90121 * C1190;
    const double C47021 = C90121 * C813;
    const double C47019 = C90121 * C812;
    const double C47013 = C90121 * C807;
    const double C47011 = C90121 * C806;
    const double C47357 = C90121 * C1013;
    const double C47353 = C90121 * C799;
    const double C47349 = C90121 * C1009;
    const double C47345 = C90121 * C796;
    const double C47680 = C90121 * C1195;
    const double C47676 = C90121 * C1191;
    const double C48925 = C90121 * C3362;
    const double C48923 = C90121 * C3361;
    const double C48917 = C90121 * C5710;
    const double C48915 = C90121 * C5709;
    const double C49245 = C90121 * C5971;
    const double C49241 = C90121 * C5702;
    const double C49237 = C90121 * C3587;
    const double C49233 = C90121 * C3357;
    const double C49547 = C90121 * C6217;
    const double C49543 = C90121 * C3801;
    const double C51631 = C90121 * C1392;
    const double C51629 = C90121 * C1391;
    const double C51623 = C90121 * C5712;
    const double C51621 = C90121 * C5711;
    const double C51611 = C90121 * C1390;
    const double C51609 = C90121 * C1389;
    const double C51965 = C90121 * C5973;
    const double C51961 = C90121 * C5703;
    const double C51957 = C90121 * C1593;
    const double C51953 = C90121 * C1379;
    const double C51950 = C90121 * C1589;
    const double C51946 = C90121 * C1378;
    const double C52271 = C90121 * C6219;
    const double C52267 = C90121 * C1775;
    const double C52264 = C90121 * C1771;
    const double C52603 = C90121 * C3364;
    const double C52601 = C90121 * C3363;
    const double C53017 = C90121 * C3588;
    const double C53013 = C90121 * C3358;
    const double C53425 = C90121 * C3802;
    const double C53825 = C90121 * C1388;
    const double C53823 = C90121 * C1387;
    const double C54243 = C90121 * C1590;
    const double C54239 = C90121 * C1377;
    const double C54639 = C90121 * C1772;
    const double C81842 = C90121 * C10874;
    const double C81840 = C90121 * C10873;
    const double C81924 = C11027 * C90121;
    const double C82087 = C90121 * C11191;
    const double C82083 = C90121 * C10868;
    const double C82327 = C90121 * C11497;
    const double C83501 = C90121 * C1394;
    const double C83499 = C90121 * C1393;
    const double C83823 = C90121 * C1594;
    const double C83819 = C90121 * C1380;
    const double C84131 = C90121 * C1776;
    const double C100 =
        ((((0 - (C90093 * C90094) / C90095) * ae) / C90095 - (0 * be) / C90104 +
          C90096 / C90095) /
             C90100 -
         ((C90093 * C90117 + 0) * be) / C90095) /
            C90100 +
        ((C90093 * (C90117 / C90100 -
                    ((C90093 * C90121 + C92320) * be) / C90095 + C90114) +
          C92357) *
         ae) /
            C90095 +
        C90121 / C90100 - ((C90093 * C90114 + C92102) * be) / C90095;
    const double C102 =
        (C90117 / C90100 - ((C90093 * C90121 + C92320) * be) / C90095 +
         C90114) /
            C90100 +
        ((C90093 *
              (C90121 / C90100 - ((C90093 * C90114 + C92102) * be) / C90095) +
          C92358) *
         ae) /
            C90095 +
        2 * (C90114 / C90100 - (0 * be) / C90095);
    const double C104 =
        (C90121 / C90100 - ((C90093 * C90114 + C92102) * be) / C90095) /
            C90100 +
        ((C90093 * (C90114 / C90100 - (0 * be) / C90095) + C14697) * ae) /
            C90095;
    const double C14700 =
        C90117 / C90100 - ((C90093 * C90121 + C92320) * be) / C90095 + C90114;
    const double C14702 =
        C90121 / C90100 - ((C90093 * C90114 + C92102) * be) / C90095;
    const double C31254 =
        C90117 / C90100 + ((C90093 * C90121 + C92320) * ae) / C90095 + C90114;
    const double C31256 =
        C90121 / C90100 + ((C90093 * C90114 + C92102) * ae) / C90095;
    const double C90133 = C90129 - C90132;
    const double C4859 = C4847 - C4848;
    const double C4858 = C4843 - C4844;
    const double C4856 = C4835 - C4836;
    const double C6511 = C6504 - C6505;
    const double C6509 = C6496 - C6497;
    const double C8481 = C8471 - C8472;
    const double C8479 = C8463 - C8464;
    const double C10912 = C10900 - C10901;
    const double C10911 = C10896 - C10897;
    const double C10909 = C10888 - C10889;
    const double C12771 = C12764 - C12765;
    const double C12769 = C12756 - C12757;
    const double C13767 = C13762 - C13763;
    const double C27615 = C27610 - C27611;
    const double C15512 = C15497 - C15498;
    const double C15511 = C15493 - C15494;
    const double C16933 = C16927 - C16928;
    const double C18862 = C18850 - C18851;
    const double C21214 = C21199 - C21200;
    const double C21213 = C21195 - C21196;
    const double C22922 = C22916 - C22917;
    const double C32063 = C32048 - C32049;
    const double C32062 = C32044 - C32045;
    const double C33484 = C33478 - C33479;
    const double C35397 = C35385 - C35386;
    const double C62504 = C62489 - C62490;
    const double C62503 = C62485 - C62486;
    const double C64199 = C64193 - C64194;
    const double C36746 = C36739 - C36740;
    const double C36745 = C36735 - C36736;
    const double C36744 = C36731 - C36732;
    const double C36743 = C36727 - C36728;
    const double C37775 = C37769 - C37770;
    const double C37774 = C37765 - C37766;
    const double C37773 = C37761 - C37762;
    const double C39009 = C39003 - C39004;
    const double C39008 = C38999 - C39000;
    const double C39007 = C38995 - C38996;
    const double C40343 = C40336 - C40337;
    const double C40342 = C40332 - C40333;
    const double C41129 = C41122 - C41123;
    const double C41128 = C41118 - C41119;
    const double C41127 = C41114 - C41115;
    const double C41126 = C41110 - C41111;
    const double C41979 = C41974 - C41975;
    const double C41978 = C41970 - C41971;
    const double C42889 = C42884 - C42885;
    const double C42888 = C42880 - C42881;
    const double C58336 = C58332 - C58333;
    const double C71870 = C71866 - C71867;
    const double C72990 = C72986 - C72987;
    const double C45584 = C45572 - C45573;
    const double C45583 = C45568 - C45569;
    const double C45581 = C45560 - C45561;
    const double C47030 = C47023 - C47024;
    const double C47028 = C47015 - C47016;
    const double C48929 = C48919 - C48920;
    const double C48927 = C48911 - C48912;
    const double C51637 = C51625 - C51626;
    const double C51635 = C51617 - C51618;
    const double C51634 = C51613 - C51614;
    const double C52610 = C52605 - C52606;
    const double C53832 = C53827 - C53828;
    const double C81844 = C81836 - C81837;
    const double C83508 = C83503 - C83504;
    const double C5064 = C5063 + C5059;
    const double C5177 = C5174 + C5175;
    const double C5176 = C5172 + C5173;
    const double C5441 = C5439 + C5440;
    const double C30483 = C30478 + C30479;
    const double C30481 = C30474 + C30475;
    const double C30482 = C30476 + C30477;
    const double C30480 = C30472 + C30473;
    const double C30897 = C30894 + C30895;
    const double C30896 = C30892 + C30893;
    const double C11034 = C11033 + C11029;
    const double C11229 = C11226 + C11227;
    const double C11228 = C11224 + C11225;
    const double C11520 = C11518 + C11519;
    const double C90306 = C90305 - C90303;
    const double C4384 = C4364 * C795;
    const double C4372 = C4364 * C796;
    const double C6958 = C4364 * C799;
    const double C7917 = C4364 * C3358;
    const double C67796 = C4364 * C5703;
    const double C67784 = C4364 * C3357;
    const double C70450 = C4364 * C5702;
    const double C15060 = C15036 * C111;
    const double C15048 = C15036 * C110;
    const double C15040 = C15036 * C109;
    const double C17375 = C15036 * C796;
    const double C17367 = C15036 * C795;
    const double C18324 = C15036 * C1377;
    const double C18316 = C15036 * C1376;
    const double C27051 = C15036 * C1379;
    const double C27043 = C15036 * C1380;
    const double C27031 = C15036 * C1378;
    const double C28173 = C15036 * C3358;
    const double C30615 = C15036 * C3357;
    const double C87054 = C15036 * C10868;
    const double C89648 = C15036 * C5703;
    const double C31612 = C31588 * C111;
    const double C31600 = C31588 * C110;
    const double C31592 = C31588 * C109;
    const double C33924 = C31588 * C796;
    const double C33916 = C31588 * C795;
    const double C34868 = C31588 * C1377;
    const double C34860 = C31588 * C1376;
    const double C41522 = C31588 * C10868;
    const double C41510 = C31588 * C1379;
    const double C41502 = C31588 * C1378;
    const double C43303 = C31588 * C1380;
    const double C44263 = C31588 * C5703;
    const double C44255 = C31588 * C3357;
    const double C53156 = C31588 * C3358;
    const double C4396 = C4387 - C4388;
    const double C4391 = C4367 - C4368;
    const double C6967 = C6961 - C6962;
    const double C7926 = C7920 - C7921;
    const double C67808 = C67799 - C67800;
    const double C67803 = C67779 - C67780;
    const double C70457 = C70445 - C70446;
    const double C4394 = C4379 - C4380;
    const double C4393 = C4375 - C4376;
    const double C6965 = C6953 - C6954;
    const double C7924 = C7912 - C7913;
    const double C67806 = C67791 - C67792;
    const double C67805 = C67787 - C67788;
    const double C70459 = C70453 - C70454;
    const double C15067 = C15055 - C15056;
    const double C15066 = C15051 - C15052;
    const double C15064 = C15043 - C15044;
    const double C17380 = C17370 - C17371;
    const double C17378 = C17362 - C17363;
    const double C18329 = C18319 - C18320;
    const double C18327 = C18311 - C18312;
    const double C27058 = C27046 - C27047;
    const double C27056 = C27038 - C27039;
    const double C27055 = C27034 - C27035;
    const double C28176 = C28168 - C28169;
    const double C30623 = C30618 - C30619;
    const double C87058 = C87049 - C87050;
    const double C89656 = C89651 - C89652;
    const double C31619 = C31607 - C31608;
    const double C31618 = C31603 - C31604;
    const double C31616 = C31595 - C31596;
    const double C33929 = C33919 - C33920;
    const double C33927 = C33911 - C33912;
    const double C34873 = C34863 - C34864;
    const double C34871 = C34855 - C34856;
    const double C41529 = C41517 - C41518;
    const double C41528 = C41513 - C41514;
    const double C41526 = C41505 - C41506;
    const double C43311 = C43306 - C43307;
    const double C44273 = C44266 - C44267;
    const double C44271 = C44258 - C44259;
    const double C53159 = C53151 - C53152;
    const double C45153 = C45138 - C45139;
    const double C45152 = C45134 - C45135;
    const double C47471 = C47459 - C47460;
    const double C48403 = C48391 - C48392;
    const double C57908 = C57893 - C57894;
    const double C57907 = C57889 - C57890;
    const double C60542 = C60536 - C60537;
    const double C36314 =
        ((((0 - (C90155 * C90276) / C90095) * ae) / C90095 - (0 * be) / C90104 +
          C90173 / C90095) /
             C90100 -
         ((C90155 * C90291 + 0) * be) / C90095) /
            C90100 +
        ((C90155 * (C90291 / C90100 -
                    ((C90155 * C90287 + C92333) * be) / C90095 + C90288) +
          C92359) *
         ae) /
            C90095 +
        C90287 / C90100 - ((C90155 * C90288 + C92226) * be) / C90095;
    const double C36315 =
        (C90291 / C90100 - ((C90155 * C90287 + C92333) * be) / C90095 +
         C90288) /
            C90100 +
        ((C90155 *
              (C90287 / C90100 - ((C90155 * C90288 + C92226) * be) / C90095) +
          C92360) *
         ae) /
            C90095 +
        2 * (C90288 / C90100 - (0 * be) / C90095);
    const double C36316 =
        (C90287 / C90100 - ((C90155 * C90288 + C92226) * be) / C90095) /
            C90100 +
        ((C90155 * (C90288 / C90100 - (0 * be) / C90095) + C44794) * ae) /
            C90095;
    const double C44873 =
        C90291 / C90100 - ((C90155 * C90287 + C92333) * be) / C90095 + C90288;
    const double C44874 =
        C90287 / C90100 - ((C90155 * C90288 + C92226) * be) / C90095;
    const double C14812 = C14809 + C14810;
    const double C14811 = C14807 + C14808;
    const double C15162 = C15160 + C15158;
    const double C15327 = C15325 + C15326;
    const double C28989 = C28984 + C28985;
    const double C28987 = C28980 + C28981;
    const double C28988 = C28982 + C28983;
    const double C28986 = C28978 + C28979;
    const double C29789 = C29786 + C29787;
    const double C29788 = C29784 + C29785;
    const double C86815 = C86804 + C86805;
    const double C86814 = C86802 + C86803;
    const double C87292 = C87286 + C87287;
    const double C86972 = C86971 + C86969;
    const double C31366 = C31363 + C31364;
    const double C31365 = C31361 + C31362;
    const double C31713 = C31712 + C31710;
    const double C31878 = C31876 + C31877;
    const double C53978 = C53973 + C53974;
    const double C53976 = C53969 + C53970;
    const double C53977 = C53971 + C53972;
    const double C53975 = C53967 + C53968;
    const double C54778 = C54775 + C54776;
    const double C54777 = C54773 + C54774;
    const double C41243 = C41240 + C41241;
    const double C41242 = C41238 + C41239;
    const double C41424 = C41423 + C41419;
    const double C41795 = C41793 + C41794;
    const double C90377 = C90376 - C90374;
    const double C10103 = C10083 * C1376;
    const double C10091 = C10083 * C1377;
    const double C12634 = C10083 * C3358;
    const double C13636 = C10083 * C1380;
    const double C41007 = C10083 * C5702;
    const double C40995 = C10083 * C3357;
    const double C44701 = C10083 * C5703;
    const double C20424 = C20400 * C111;
    const double C20412 = C20400 * C110;
    const double C20404 = C20400 * C109;
    const double C22795 = C20400 * C796;
    const double C22787 = C20400 * C795;
    const double C23774 = C20400 * C1377;
    const double C23766 = C20400 * C1376;
    const double C26495 = C20400 * C798;
    const double C26487 = C20400 * C799;
    const double C26475 = C20400 * C797;
    const double C29925 = C20400 * C3358;
    const double C31167 = C20400 * C3357;
    const double C57478 = C20400 * C4815;
    const double C60957 = C20400 * C5702;
    const double C61714 = C61690 * C111;
    const double C61702 = C61690 * C110;
    const double C61694 = C61690 * C109;
    const double C64072 = C61690 * C796;
    const double C64064 = C61690 * C795;
    const double C65048 = C61690 * C1377;
    const double C65040 = C61690 * C1376;
    const double C67363 = C61690 * C4815;
    const double C67351 = C61690 * C798;
    const double C67343 = C61690 * C797;
    const double C69028 = C61690 * C799;
    const double C70885 = C61690 * C3357;
    const double C70877 = C61690 * C5702;
    const double C79163 = C61690 * C3358;
    const double C10115 = C10106 - C10107;
    const double C10110 = C10086 - C10087;
    const double C12643 = C12637 - C12638;
    const double C13645 = C13639 - C13640;
    const double C41019 = C41010 - C41011;
    const double C41014 = C40990 - C40991;
    const double C44710 = C44704 - C44705;
    const double C10113 = C10098 - C10099;
    const double C10112 = C10094 - C10095;
    const double C12641 = C12629 - C12630;
    const double C13643 = C13631 - C13632;
    const double C41017 = C41002 - C41003;
    const double C41016 = C40998 - C40999;
    const double C44708 = C44696 - C44697;
    const double C20431 = C20419 - C20420;
    const double C20430 = C20415 - C20416;
    const double C20428 = C20407 - C20408;
    const double C22800 = C22790 - C22791;
    const double C22798 = C22782 - C22783;
    const double C23779 = C23769 - C23770;
    const double C23777 = C23761 - C23762;
    const double C26502 = C26490 - C26491;
    const double C26500 = C26482 - C26483;
    const double C26499 = C26478 - C26479;
    const double C29928 = C29920 - C29921;
    const double C31170 = C31162 - C31163;
    const double C57481 = C57473 - C57474;
    const double C60960 = C60952 - C60953;
    const double C61721 = C61709 - C61710;
    const double C61720 = C61705 - C61706;
    const double C61718 = C61697 - C61698;
    const double C64077 = C64067 - C64068;
    const double C64075 = C64059 - C64060;
    const double C65053 = C65043 - C65044;
    const double C65051 = C65035 - C65036;
    const double C67370 = C67358 - C67359;
    const double C67369 = C67354 - C67355;
    const double C67367 = C67346 - C67347;
    const double C69036 = C69031 - C69032;
    const double C70890 = C70880 - C70881;
    const double C70888 = C70872 - C70873;
    const double C79166 = C79158 - C79159;
    const double C81080 = C81065 - C81066;
    const double C81079 = C81061 - C81062;
    const double C83392 = C83380 - C83381;
    const double C84343 = C84331 - C84332;
    const double C86639 = C86624 - C86625;
    const double C86638 = C86620 - C86621;
    const double C90075 = C90063 - C90064;
    const double C71053 =
        ((((0 - (C90158 * C90347) / C90095) * ae) / C90095 - (0 * be) / C90104 +
          C90199 / C90095) /
             C90100 -
         ((C90158 * C90362 + 0) * be) / C90095) /
            C90100 +
        ((C90158 * (C90362 / C90100 -
                    ((C90158 * C90358 + C92334) * be) / C90095 + C90359) +
          C92361) *
         ae) /
            C90095 +
        C90358 / C90100 - ((C90158 * C90359 + C92252) * be) / C90095;
    const double C71054 =
        (C90362 / C90100 - ((C90158 * C90358 + C92334) * be) / C90095 +
         C90359) /
            C90100 +
        ((C90158 *
              (C90358 / C90100 - ((C90158 * C90359 + C92252) * be) / C90095) +
          C92362) *
         ae) /
            C90095 +
        2 * (C90359 / C90100 - (0 * be) / C90095);
    const double C71055 =
        (C90358 / C90100 - ((C90158 * C90359 + C92252) * be) / C90095) /
            C90100 +
        ((C90158 * (C90359 / C90100 - (0 * be) / C90095) + C80417) * ae) /
            C90095;
    const double C80566 =
        C90362 / C90100 - ((C90158 * C90358 + C92334) * be) / C90095 + C90359;
    const double C80567 =
        C90358 / C90100 - ((C90158 * C90359 + C92252) * be) / C90095;
    const double C19930 = C19927 + C19928;
    const double C19929 = C19925 + C19926;
    const double C20168 = C20166 + C20167;
    const double C20325 = C20323 + C20321;
    const double C27899 = C27894 + C27895;
    const double C27897 = C27890 + C27891;
    const double C27898 = C27892 + C27893;
    const double C27896 = C27888 + C27889;
    const double C28317 = C28314 + C28315;
    const double C28316 = C28312 + C28313;
    const double C57007 = C56996 + C56997;
    const double C57006 = C56994 + C56995;
    const double C57241 = C57235 + C57236;
    const double C57322 = C57320 + C57318;
    const double C61221 = C61218 + C61219;
    const double C61220 = C61216 + C61217;
    const double C61459 = C61457 + C61458;
    const double C61615 = C61614 + C61612;
    const double C77187 = C77182 + C77183;
    const double C77185 = C77178 + C77179;
    const double C77186 = C77180 + C77181;
    const double C77184 = C77176 + C77177;
    const double C77583 = C77580 + C77581;
    const double C77582 = C77578 + C77579;
    const double C66872 = C66869 + C66870;
    const double C66871 = C66867 + C66868;
    const double C67112 = C67110 + C67111;
    const double C67192 = C67191 + C67189;
    const double C891 =
        (2 * C90548 + ae * C90549 + C90404 * C90566 + be * C90526 * C90523 +
         C90526 * (be * C90523 +
                   C90526 * (2 * C90562 + ae * C90563 +
                             C90404 * (C90556 + ae * C90404 * C90558 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C1538 =
        (2 * C90592 + ae * C90593 + C90404 * C90610 + be * C90570 * C90523 +
         C90570 * (be * C90523 +
                   C90570 * (2 * C90606 + ae * C90607 +
                             C90404 * (C90600 + ae * C90404 * C90602 +
                                       C90404 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C2044 =
        (be * (3 * C90470 + C90404 * C90523 + C90506 * ae) +
         C90526 * (3 * C90566 + ae * C90567 +
                   C90404 * (2 * C90562 + ae * C90563 +
                             C90404 * (C90556 + ae * C90404 * C90558 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C2817 =
        (be * (3 * C90470 + C90404 * C90523 + C90506 * ae) +
         C90570 * (3 * C90610 + ae * C90611 +
                   C90404 * (2 * C90606 + ae * C90607 +
                             C90404 * (C90600 + ae * C90404 * C90602 +
                                       C90404 * (ae * C90602 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90576))))) /
        C90099;
    const double C3446 =
        (C90570 * (be * C90523 +
                   C90526 * (2 * C90562 + ae * C90563 +
                             C90404 * (C90556 + ae * C90404 * C90558 +
                                       C90404 * (ae * C90558 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90532))))) /
        C90099;
    const double C3520 =
        (be * C90526 * C90523 +
         C90570 * C90526 *
             (2 * C90606 + ae * C90607 +
              C90404 * (C90600 + ae * C90404 * C90602 +
                        C90404 * (ae * C90602 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90576)))) /
        C90099;
    const double C125 = (4 * (2 * C90436 + C90404 * C90470 + C90454 * ae) +
                         C90404 * (3 * C90470 + C90404 * C90523 + C90506 * ae) +
                         (3 * C90454 + C90404 * C90506) * ae) /
                        C90095;
    const double C817 =
        (2 * C90436 + C90404 * C90470 + C90454 * ae + C90523 * C90658) / C90095;
    const double C1398 =
        (2 * C90436 + C90404 * C90470 + C90454 * ae + C90523 * C90756) / C90095;
    const double C1975 =
        (C90526 * (3 * C90470 + C90404 * C90523 + C90506 * ae)) / C90095;
    const double C2668 =
        (C90570 * (3 * C90470 + C90404 * C90523 + C90506 * ae)) / C90095;
    const double C3368 = (C90570 * C90526 * C90523) / C90095;
    const double C36924 =
        (4 * (2 * C91043 + C90526 * C91062 + C91054 * ae) +
         C90526 * (3 * C91062 + C90526 * C91480 + C91471 * ae) +
         (3 * C91054 + C90526 * C91471) * ae) /
        C90095;
    const double C37436 =
        (2 * C91043 + C90526 * C91062 + C91054 * ae + C91480 * C90756) / C90095;
    const double C39224 =
        (C90570 * (3 * C91062 + C90526 * C91480 + C91471 * ae)) / C90095;
    const double C72215 =
        (4 * (2 * C91311 + C90570 * C91330 + C91322 * ae) +
         C90570 * (3 * C91330 + C90570 * C91696 + C91680 * ae) +
         (3 * C91322 + C90570 * C91680) * ae) /
        C90095;
    const double C131 =
        (4 * (2 * C90466 + ae * C90469 + be * C90470 + C90404 * C90517) +
         ae * (3 * C90469 + C90404 * C90522 + C90506 * be) +
         be * (3 * C90470 + C90404 * C90523 + C90506 * ae) +
         C90404 * (3 * C90517 + ae * C90522 + be * C90523 +
                   C90404 * (2 * C90511 + ae * C90515 + be * C90516 +
                             C90404 * (C90504 + ae * C90505 + be * C90507 +
                                       C90404 * (ae * C90493 + be * C90496 +
                                                 C90404 *
                                                     (C90477 * C90478 +
                                                      C90408 * bs[7] *
                                                          std::pow(C90410, 7)) *
                                                     C90097))))) /
        C90099;
    const double C1023 =
        (2 * C90635 + be * C90636 + C90404 * C90653 + ae * C90526 * C90522 +
         C90526 * (ae * C90522 +
                   C90526 * (2 * C90649 + be * C90650 +
                             C90404 * (C90643 + be * C90404 * C90645 +
                                       C90404 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C1786 =
        (2 * C90716 + be * C90717 + C90404 * C90734 + ae * C90570 * C90522 +
         C90570 * (ae * C90522 +
                   C90570 * (2 * C90730 + be * C90731 +
                             C90404 * (C90724 + be * C90404 * C90726 +
                                       C90404 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C1976 =
        (3 * (C90775 + ae * C90526 * C90461 + be * C90526 * C90462 +
              C90404 * C90932) +
         ae * C90526 * C90522 + be * C90526 * C90523 +
         C90404 *
             (2 * C90932 + ae * C90526 * C90515 + be * C90526 * C90516 +
              C90404 * (C90927 + ae * C90526 * C90505 + be * C90526 * C90507 +
                        C90404 * (ae * C90526 * C90493 + be * C90526 * C90496 +
                                  C90404 * C90526 *
                                      (C90477 * C90478 +
                                       C90408 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C2204 =
        (ae * (3 * C90469 + C90404 * C90522 + C90506 * be) +
         C90526 * (3 * C90653 + be * C90654 +
                   C90404 * (2 * C90649 + be * C90650 +
                             C90404 * (C90643 + be * C90404 * C90645 +
                                       C90404 * (be * C90645 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90619))))) /
        C90099;
    const double C2669 =
        (3 * (C90850 + ae * C90570 * C90461 + be * C90570 * C90462 +
              C90404 * C90949) +
         ae * C90570 * C90522 + be * C90570 * C90523 +
         C90404 *
             (2 * C90949 + ae * C90570 * C90515 + be * C90570 * C90516 +
              C90404 * (C90944 + ae * C90570 * C90505 + be * C90570 * C90507 +
                        C90404 * (ae * C90570 * C90493 + be * C90570 * C90496 +
                                  C90404 * C90570 *
                                      (C90477 * C90478 +
                                       C90408 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C3126 =
        (ae * (3 * C90469 + C90404 * C90522 + C90506 * be) +
         C90570 * (3 * C90734 + be * C90735 +
                   C90404 * (2 * C90730 + be * C90731 +
                             C90404 * (C90724 + be * C90404 * C90726 +
                                       C90404 * (be * C90726 +
                                                 C90404 * std::pow(C90410, 7) *
                                                     bs[7] * C90700))))) /
        C90099;
    const double C3594 =
        (ae * C90570 * C90522 +
         C90526 * C90570 *
             (2 * C90649 + be * C90650 +
              C90404 * (C90643 + be * C90404 * C90645 +
                        C90404 * (be * C90645 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90619)))) /
        C90099;
    const double C3808 =
        (ae * C90526 * C90522 +
         C90570 * C90526 *
             (2 * C90730 + be * C90731 +
              C90404 * (C90724 + be * C90404 * C90726 +
                        C90404 * (be * C90726 + C90404 * std::pow(C90410, 7) *
                                                    bs[7] * C90700)))) /
        C90099;
    const double C124 = (4 * (2 * C90435 + C90404 * C90469 + C90454 * be) +
                         C90404 * (3 * C90469 + C90404 * C90522 + C90506 * be) +
                         (3 * C90454 + C90404 * C90506) * be) /
                        C90095;
    const double C816 =
        (2 * C90435 + C90404 * C90469 + C90454 * be + C90522 * C90658) / C90095;
    const double C1397 =
        (2 * C90435 + C90404 * C90469 + C90454 * be + C90522 * C90756) / C90095;
    const double C1974 =
        (C90526 * (3 * C90469 + C90404 * C90522 + C90506 * be)) / C90095;
    const double C2667 =
        (C90570 * (3 * C90469 + C90404 * C90522 + C90506 * be)) / C90095;
    const double C3367 = (C90570 * C90526 * C90522) / C90095;
    const double C36996 =
        (4 * (2 * C91051 + ae * C91061 + be * C91062 + C90526 * C91469) +
         ae * (3 * C91061 + C90526 * C91479 + C91471 * be) +
         be * (3 * C91062 + C90526 * C91480 + C91471 * ae) +
         C90526 * (3 * C91469 + ae * C91479 + be * C91480 +
                   C90526 * (2 * C91456 + ae * C91473 + be * C91474 +
                             C90526 * (C90673 + ae * C91457 + be * C91460 +
                                       C90526 * (ae * C90558 + be * C90645 +
                                                 C90526 *
                                                     (C90477 * C90478 +
                                                      C90658 * bs[7] *
                                                          std::pow(C90410, 7)) *
                                                     C90097))))) /
        C90099;
    const double C37642 =
        (2 * C91113 + be * C91114 + C90526 * C91506 + ae * C90570 * C91479 +
         C90570 * (ae * C91479 +
                   C90570 * (2 * C91502 + be * C91503 +
                             C90526 * (C90750 + be * C90526 * C90726 +
                                       C90526 * (be * C90726 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C39304 =
        (3 * (C91217 + ae * C90570 * C91052 + be * C90570 * C91055 +
              C90526 * C91544) +
         ae * C90570 * C91479 + be * C90570 * C91480 +
         C90526 *
             (2 * C91544 + ae * C90570 * C91473 + be * C90570 * C91474 +
              C90526 * (C91540 + ae * C90570 * C91457 + be * C90570 * C91460 +
                        C90526 * (ae * C90570 * C90558 + be * C90570 * C90645 +
                                  C90526 * C90570 *
                                      (C90477 * C90478 +
                                       C90658 * bs[7] * std::pow(C90410, 7)) *
                                      C90097)))) /
        C90099;
    const double C39514 =
        (ae * (3 * C91061 + C90526 * C91479 + C91471 * be) +
         C90570 * (3 * C91506 + be * C91507 +
                   C90526 * (2 * C91502 + be * C91503 +
                             C90526 * (C90750 + be * C90526 * C90726 +
                                       C90526 * (be * C90726 +
                                                 C90526 * std::pow(C90410, 7) *
                                                     bs[7] * C90741))))) /
        C90099;
    const double C36808 =
        (4 * (2 * C91042 + C90526 * C91061 + C91054 * be) +
         C90526 * (3 * C91061 + C90526 * C91479 + C91471 * be) +
         (3 * C91054 + C90526 * C91471) * be) /
        C90095;
    const double C37332 =
        (2 * C91042 + C90526 * C91061 + C91054 * be + C91479 * C90756) / C90095;
    const double C39084 =
        (C90570 * (3 * C91061 + C90526 * C91479 + C91471 * be)) / C90095;
    const double C72324 =
        (4 * (2 * C91319 + ae * C91329 + be * C91330 + C90570 * C91686) +
         ae * (3 * C91329 + C90570 * C91695 + C91680 * be) +
         be * (3 * C91330 + C90570 * C91696 + C91680 * ae) +
         C90570 * (3 * C91686 + ae * C91695 + be * C91696 +
                   C90570 * (2 * C91677 + ae * C91689 + be * C91690 +
                             C90570 * (C90771 + ae * C91678 + be * C91681 +
                                       C90570 * (ae * C90602 + be * C90726 +
                                                 C90570 *
                                                     (C90477 * C90478 +
                                                      C90756 * bs[7] *
                                                          std::pow(C90410, 7)) *
                                                     C90097))))) /
        C90099;
    const double C71986 =
        (4 * (2 * C91310 + C90570 * C91329 + C91322 * be) +
         C90570 * (3 * C91329 + C90570 * C91695 + C91680 * be) +
         (3 * C91322 + C90570 * C91680) * be) /
        C90095;
    const double C14203 = C12220 * C92102;
    const double C84845 = C12220 * C92102;
    const double C45752 = C45748 + C45749;
    const double C45855 = C45841 - C45842;
    const double C45853 = C45837 - C45838;
    const double C46094 = C46086 - C46087;
    const double C55437 = C49237 - C49238;
    const double C55433 = C49238 - C49237;
    const double C55435 = C49233 - C49234;
    const double C55431 = C49234 - C49233;
    const double C55835 = C49543 - C49544;
    const double C55833 = C49544 - C49543;
    const double C82081 = C51958 - C51957;
    const double C82079 = C51954 - C51953;
    const double C82325 = C52268 - C52267;
    const double C81928 = C81924 + C81925;
    const double C15507 = C14700 * C811;
    const double C15505 = C14700 * C810;
    const double C15487 = C14700 * C809;
    const double C15485 = C14700 * C808;
    const double C15767 = C14700 * C1012;
    const double C15761 = C14700 * C798;
    const double C15756 = C14700 * C1008;
    const double C15750 = C14700 * C797;
    const double C16001 = C14700 * C1194;
    const double C15996 = C14700 * C1190;
    const double C16921 = C14700 * C807;
    const double C16919 = C14700 * C806;
    const double C17258 = C14700 * C1009;
    const double C17252 = C14700 * C796;
    const double C17587 = C14700 * C1191;
    const double C18860 = C14700 * C3362;
    const double C18858 = C14700 * C3361;
    const double C19171 = C14700 * C3587;
    const double C19165 = C14700 * C3357;
    const double C19471 = C14700 * C3801;
    const double C21209 = C14700 * C1392;
    const double C21207 = C14700 * C1391;
    const double C21189 = C14700 * C1390;
    const double C21187 = C14700 * C1389;
    const double C21469 = C14700 * C1593;
    const double C21463 = C14700 * C1379;
    const double C21458 = C14700 * C1589;
    const double C21452 = C14700 * C1378;
    const double C21709 = C14700 * C1775;
    const double C21704 = C14700 * C1771;
    const double C22910 = C14700 * C1388;
    const double C22908 = C14700 * C1387;
    const double C23247 = C14700 * C1590;
    const double C23241 = C14700 * C1377;
    const double C23558 = C14700 * C1772;
    const double C15503 = C14702 * C813;
    const double C15501 = C14702 * C812;
    const double C15491 = C14702 * C807;
    const double C15489 = C14702 * C806;
    const double C15769 = C14702 * C1013;
    const double C15763 = C14702 * C799;
    const double C15758 = C14702 * C1009;
    const double C15752 = C14702 * C796;
    const double C16003 = C14702 * C1195;
    const double C15998 = C14702 * C1191;
    const double C16925 = C14702 * C805;
    const double C16923 = C14702 * C804;
    const double C17260 = C14702 * C1010;
    const double C17254 = C14702 * C795;
    const double C17589 = C14702 * C1192;
    const double C18856 = C14702 * C3364;
    const double C18854 = C14702 * C3363;
    const double C19173 = C14702 * C3588;
    const double C19167 = C14702 * C3358;
    const double C19473 = C14702 * C3802;
    const double C21205 = C14702 * C1394;
    const double C21203 = C14702 * C1393;
    const double C21193 = C14702 * C1388;
    const double C21191 = C14702 * C1387;
    const double C21471 = C14702 * C1594;
    const double C21465 = C14702 * C1380;
    const double C21460 = C14702 * C1590;
    const double C21454 = C14702 * C1377;
    const double C21711 = C14702 * C1776;
    const double C21706 = C14702 * C1772;
    const double C22914 = C14702 * C1386;
    const double C22912 = C14702 * C1385;
    const double C23249 = C14702 * C1591;
    const double C23243 = C14702 * C1376;
    const double C23560 = C14702 * C1773;
    const double C32058 = C31254 * C811;
    const double C32056 = C31254 * C810;
    const double C32038 = C31254 * C809;
    const double C32036 = C31254 * C808;
    const double C32318 = C31254 * C1012;
    const double C32312 = C31254 * C798;
    const double C32307 = C31254 * C1008;
    const double C32301 = C31254 * C797;
    const double C32552 = C31254 * C1194;
    const double C32547 = C31254 * C1190;
    const double C33472 = C31254 * C807;
    const double C33470 = C31254 * C806;
    const double C33807 = C31254 * C1009;
    const double C33801 = C31254 * C796;
    const double C34135 = C31254 * C1191;
    const double C35395 = C31254 * C3362;
    const double C35393 = C31254 * C3361;
    const double C35706 = C31254 * C3587;
    const double C35700 = C31254 * C3357;
    const double C36006 = C31254 * C3801;
    const double C62499 = C31254 * C1392;
    const double C62497 = C31254 * C1391;
    const double C62479 = C31254 * C1390;
    const double C62477 = C31254 * C1389;
    const double C62759 = C31254 * C1593;
    const double C62753 = C31254 * C1379;
    const double C62748 = C31254 * C1589;
    const double C62742 = C31254 * C1378;
    const double C62999 = C31254 * C1775;
    const double C62994 = C31254 * C1771;
    const double C64187 = C31254 * C1388;
    const double C64185 = C31254 * C1387;
    const double C64522 = C31254 * C1590;
    const double C64516 = C31254 * C1377;
    const double C64833 = C31254 * C1772;
    const double C32054 = C31256 * C813;
    const double C32052 = C31256 * C812;
    const double C32042 = C31256 * C807;
    const double C32040 = C31256 * C806;
    const double C32320 = C31256 * C1013;
    const double C32314 = C31256 * C799;
    const double C32309 = C31256 * C1009;
    const double C32303 = C31256 * C796;
    const double C32554 = C31256 * C1195;
    const double C32549 = C31256 * C1191;
    const double C33476 = C31256 * C805;
    const double C33474 = C31256 * C804;
    const double C33809 = C31256 * C1010;
    const double C33803 = C31256 * C795;
    const double C34137 = C31256 * C1192;
    const double C35391 = C31256 * C3364;
    const double C35389 = C31256 * C3363;
    const double C35708 = C31256 * C3588;
    const double C35702 = C31256 * C3358;
    const double C36008 = C31256 * C3802;
    const double C62495 = C31256 * C1394;
    const double C62493 = C31256 * C1393;
    const double C62483 = C31256 * C1388;
    const double C62481 = C31256 * C1387;
    const double C62761 = C31256 * C1594;
    const double C62755 = C31256 * C1380;
    const double C62750 = C31256 * C1590;
    const double C62744 = C31256 * C1377;
    const double C63001 = C31256 * C1776;
    const double C62996 = C31256 * C1772;
    const double C64191 = C31256 * C1386;
    const double C64189 = C31256 * C1385;
    const double C64524 = C31256 * C1591;
    const double C64518 = C31256 * C1376;
    const double C64835 = C31256 * C1773;
    const double C90134 = C90133 * ae;
    const double C4029 = -(C90133 * be) / C90095;
    const double C4865 = C4859 - C4849;
    const double C4864 = C4858 - C4845;
    const double C4862 = C4856 - C4837;
    const double C6515 = C6511 - C6506;
    const double C6513 = C6509 - C6498;
    const double C8485 = C8481 - C8473;
    const double C8483 = C8479 - C8465;
    const double C10918 = C10912 - C10902;
    const double C10917 = C10911 - C10898;
    const double C10915 = C10909 - C10890;
    const double C12775 = C12771 - C12766;
    const double C12773 = C12769 - C12758;
    const double C13769 = C13767 - C13764;
    const double C27617 = C27615 - C27612;
    const double C15518 = C15512 - C15499;
    const double C15517 = C15511 - C15495;
    const double C16936 = C16933 - C16929;
    const double C18865 = C18862 - C18852;
    const double C21220 = C21214 - C21201;
    const double C21219 = C21213 - C21197;
    const double C22925 = C22922 - C22918;
    const double C32069 = C32063 - C32050;
    const double C32068 = C32062 - C32046;
    const double C33487 = C33484 - C33480;
    const double C35400 = C35397 - C35387;
    const double C62510 = C62504 - C62491;
    const double C62509 = C62503 - C62487;
    const double C64202 = C64199 - C64195;
    const double C36750 = C36746 - C36741;
    const double C36749 = C36745 - C36737;
    const double C36748 = C36744 - C36733;
    const double C36747 = C36743 - C36729;
    const double C37778 = C37775 - C37771;
    const double C37777 = C37774 - C37767;
    const double C37776 = C37773 - C37763;
    const double C39012 = C39009 - C39005;
    const double C39011 = C39008 - C39001;
    const double C39010 = C39007 - C38997;
    const double C40345 = C40343 - C40338;
    const double C40344 = C40342 - C40334;
    const double C41133 = C41129 - C41124;
    const double C41132 = C41128 - C41120;
    const double C41131 = C41127 - C41116;
    const double C41130 = C41126 - C41112;
    const double C41981 = C41979 - C41976;
    const double C41980 = C41978 - C41972;
    const double C42891 = C42889 - C42886;
    const double C42890 = C42888 - C42882;
    const double C58337 = C58336 - C58334;
    const double C71871 = C71870 - C71868;
    const double C72991 = C72990 - C72988;
    const double C45590 = C45584 - C45574;
    const double C45589 = C45583 - C45570;
    const double C45587 = C45581 - C45562;
    const double C47034 = C47030 - C47025;
    const double C47032 = C47028 - C47017;
    const double C48933 = C48929 - C48921;
    const double C48931 = C48927 - C48913;
    const double C51643 = C51637 - C51627;
    const double C51641 = C51635 - C51619;
    const double C51640 = C51634 - C51615;
    const double C52612 = C52610 - C52607;
    const double C53834 = C53832 - C53829;
    const double C81846 = C81844 - C81838;
    const double C83510 = C83508 - C83505;
    const double C5065 = C5064 + C5060;
    const double C5430 = C5176 * C265;
    const double C5442 = C5441 * C92188;
    const double C11035 = C11034 + C11030;
    const double C11231 = C11229 * C92177;
    const double C11230 = C11228 * C182;
    const double C90307 = C90306 * ae;
    const double C4395 = C4383 - C4384;
    const double C4392 = C4371 - C4372;
    const double C6966 = C6957 - C6958;
    const double C7925 = C7916 - C7917;
    const double C67807 = C67795 - C67796;
    const double C67804 = C67783 - C67784;
    const double C70458 = C70449 - C70450;
    const double C15068 = C15059 - C15060;
    const double C15065 = C15047 - C15048;
    const double C15063 = C15039 - C15040;
    const double C17381 = C17374 - C17375;
    const double C17379 = C17366 - C17367;
    const double C18330 = C18323 - C18324;
    const double C18328 = C18315 - C18316;
    const double C27059 = C27050 - C27051;
    const double C27057 = C27042 - C27043;
    const double C27054 = C27030 - C27031;
    const double C28177 = C28172 - C28173;
    const double C30622 = C30614 - C30615;
    const double C87059 = C87053 - C87054;
    const double C89655 = C89647 - C89648;
    const double C31620 = C31611 - C31612;
    const double C31617 = C31599 - C31600;
    const double C31615 = C31591 - C31592;
    const double C33930 = C33923 - C33924;
    const double C33928 = C33915 - C33916;
    const double C34874 = C34867 - C34868;
    const double C34872 = C34859 - C34860;
    const double C41530 = C41521 - C41522;
    const double C41527 = C41509 - C41510;
    const double C41525 = C41501 - C41502;
    const double C43310 = C43302 - C43303;
    const double C44272 = C44262 - C44263;
    const double C44270 = C44254 - C44255;
    const double C53160 = C53155 - C53156;
    const double C4402 = C4396 - C4389;
    const double C4397 = C4391 - C4369;
    const double C6970 = C6967 - C6963;
    const double C7929 = C7926 - C7922;
    const double C67814 = C67808 - C67801;
    const double C67809 = C67803 - C67781;
    const double C70460 = C70457 - C70447;
    const double C4400 = C4394 - C4381;
    const double C4399 = C4393 - C4377;
    const double C6968 = C6965 - C6955;
    const double C7927 = C7924 - C7914;
    const double C67812 = C67806 - C67793;
    const double C67811 = C67805 - C67789;
    const double C70462 = C70459 - C70455;
    const double C15073 = C15067 - C15057;
    const double C15072 = C15066 - C15053;
    const double C15070 = C15064 - C15045;
    const double C17384 = C17380 - C17372;
    const double C17382 = C17378 - C17364;
    const double C18333 = C18329 - C18321;
    const double C18331 = C18327 - C18313;
    const double C27064 = C27058 - C27048;
    const double C27062 = C27056 - C27040;
    const double C27061 = C27055 - C27036;
    const double C28178 = C28176 - C28170;
    const double C30625 = C30623 - C30620;
    const double C87060 = C87058 - C87051;
    const double C89658 = C89656 - C89653;
    const double C31625 = C31619 - C31609;
    const double C31624 = C31618 - C31605;
    const double C31622 = C31616 - C31597;
    const double C33933 = C33929 - C33921;
    const double C33931 = C33927 - C33913;
    const double C34877 = C34873 - C34865;
    const double C34875 = C34871 - C34857;
    const double C41535 = C41529 - C41519;
    const double C41534 = C41528 - C41515;
    const double C41532 = C41526 - C41507;
    const double C43313 = C43311 - C43308;
    const double C44277 = C44273 - C44268;
    const double C44275 = C44271 - C44260;
    const double C53161 = C53159 - C53153;
    const double C45159 = C45153 - C45140;
    const double C45158 = C45152 - C45136;
    const double C47474 = C47471 - C47461;
    const double C48406 = C48403 - C48393;
    const double C57914 = C57908 - C57895;
    const double C57913 = C57907 - C57891;
    const double C60545 = C60542 - C60538;
    const double C44895 = C44873 * C119;
    const double C44889 = C44873 * C110;
    const double C44884 = C44873 * C117;
    const double C44878 = C44873 * C109;
    const double C45148 = C44873 * C350;
    const double C45146 = C44873 * C185;
    const double C45128 = C44873 * C349;
    const double C45126 = C44873 * C184;
    const double C45396 = C44873 * C569;
    const double C45391 = C44873 * C568;
    const double C47143 = C44873 * C807;
    const double C47137 = C44873 * C796;
    const double C47469 = C44873 * C1009;
    const double C47467 = C44873 * C877;
    const double C47782 = C44873 * C1191;
    const double C48091 = C44873 * C1388;
    const double C48085 = C44873 * C1377;
    const double C48401 = C44873 * C1590;
    const double C48399 = C44873 * C1458;
    const double C48706 = C44873 * C1772;
    const double C57653 = C44873 * C1392;
    const double C57647 = C44873 * C1379;
    const double C57642 = C44873 * C1390;
    const double C57636 = C44873 * C1378;
    const double C57903 = C44873 * C1593;
    const double C57901 = C44873 * C1461;
    const double C57883 = C44873 * C1589;
    const double C57881 = C44873 * C1457;
    const double C58151 = C44873 * C1775;
    const double C58146 = C44873 * C1771;
    const double C60218 = C44873 * C3362;
    const double C60212 = C44873 * C3357;
    const double C60530 = C44873 * C3587;
    const double C60528 = C44873 * C3439;
    const double C60848 = C44873 * C3801;
    const double C44897 = C44874 * C805;
    const double C44891 = C44874 * C795;
    const double C44886 = C44874 * C807;
    const double C44880 = C44874 * C796;
    const double C45144 = C44874 * C1010;
    const double C45142 = C44874 * C878;
    const double C45132 = C44874 * C1009;
    const double C45130 = C44874 * C877;
    const double C45398 = C44874 * C1192;
    const double C45393 = C44874 * C1191;
    const double C47145 = C44874 * C813;
    const double C47139 = C44874 * C799;
    const double C47465 = C44874 * C1013;
    const double C47463 = C44874 * C881;
    const double C47784 = C44874 * C1195;
    const double C48093 = C44874 * C3364;
    const double C48087 = C44874 * C3358;
    const double C48397 = C44874 * C3588;
    const double C48395 = C44874 * C3440;
    const double C48708 = C44874 * C3802;
    const double C57655 = C44874 * C5712;
    const double C57649 = C44874 * C5703;
    const double C57644 = C44874 * C3362;
    const double C57638 = C44874 * C3357;
    const double C57899 = C44874 * C5973;
    const double C57897 = C44874 * C5801;
    const double C57887 = C44874 * C3587;
    const double C57885 = C44874 * C3439;
    const double C58153 = C44874 * C6219;
    const double C58148 = C44874 * C3801;
    const double C60220 = C44874 * C5710;
    const double C60214 = C44874 * C5702;
    const double C60534 = C44874 * C5971;
    const double C60532 = C44874 * C5799;
    const double C60850 = C44874 * C6217;
    const double C15316 = C14811 * C265;
    const double C15163 = C15162 + C15161;
    const double C15328 = C15327 * C92188;
    const double C86817 = C86815 * C92097;
    const double C86816 = C86814 * C36262;
    const double C86973 = C86972 + C86970;
    const double C31867 = C31365 * C265;
    const double C31714 = C31713 + C31711;
    const double C31879 = C31878 * C92188;
    const double C41245 = C41243 * C92097;
    const double C41244 = C41242 * C36262;
    const double C41425 = C41424 + C41420;
    const double C90378 = C90377 * ae;
    const double C10114 = C10102 - C10103;
    const double C10111 = C10090 - C10091;
    const double C12642 = C12633 - C12634;
    const double C13644 = C13635 - C13636;
    const double C41018 = C41006 - C41007;
    const double C41015 = C40994 - C40995;
    const double C44709 = C44700 - C44701;
    const double C20432 = C20423 - C20424;
    const double C20429 = C20411 - C20412;
    const double C20427 = C20403 - C20404;
    const double C22801 = C22794 - C22795;
    const double C22799 = C22786 - C22787;
    const double C23780 = C23773 - C23774;
    const double C23778 = C23765 - C23766;
    const double C26503 = C26494 - C26495;
    const double C26501 = C26486 - C26487;
    const double C26498 = C26474 - C26475;
    const double C29929 = C29924 - C29925;
    const double C31171 = C31166 - C31167;
    const double C57482 = C57477 - C57478;
    const double C60961 = C60956 - C60957;
    const double C61722 = C61713 - C61714;
    const double C61719 = C61701 - C61702;
    const double C61717 = C61693 - C61694;
    const double C64078 = C64071 - C64072;
    const double C64076 = C64063 - C64064;
    const double C65054 = C65047 - C65048;
    const double C65052 = C65039 - C65040;
    const double C67371 = C67362 - C67363;
    const double C67368 = C67350 - C67351;
    const double C67366 = C67342 - C67343;
    const double C69035 = C69027 - C69028;
    const double C70891 = C70884 - C70885;
    const double C70889 = C70876 - C70877;
    const double C79167 = C79162 - C79163;
    const double C10121 = C10115 - C10108;
    const double C10116 = C10110 - C10088;
    const double C12646 = C12643 - C12639;
    const double C13648 = C13645 - C13641;
    const double C41025 = C41019 - C41012;
    const double C41020 = C41014 - C40992;
    const double C44713 = C44710 - C44706;
    const double C10119 = C10113 - C10100;
    const double C10118 = C10112 - C10096;
    const double C12644 = C12641 - C12631;
    const double C13646 = C13643 - C13633;
    const double C41023 = C41017 - C41004;
    const double C41022 = C41016 - C41000;
    const double C44711 = C44708 - C44698;
    const double C20437 = C20431 - C20421;
    const double C20436 = C20430 - C20417;
    const double C20434 = C20428 - C20409;
    const double C22804 = C22800 - C22792;
    const double C22802 = C22798 - C22784;
    const double C23783 = C23779 - C23771;
    const double C23781 = C23777 - C23763;
    const double C26508 = C26502 - C26492;
    const double C26506 = C26500 - C26484;
    const double C26505 = C26499 - C26480;
    const double C29930 = C29928 - C29922;
    const double C31172 = C31170 - C31164;
    const double C57483 = C57481 - C57475;
    const double C60962 = C60960 - C60954;
    const double C61727 = C61721 - C61711;
    const double C61726 = C61720 - C61707;
    const double C61724 = C61718 - C61699;
    const double C64081 = C64077 - C64069;
    const double C64079 = C64075 - C64061;
    const double C65057 = C65053 - C65045;
    const double C65055 = C65051 - C65037;
    const double C67376 = C67370 - C67360;
    const double C67375 = C67369 - C67356;
    const double C67373 = C67367 - C67348;
    const double C69038 = C69036 - C69033;
    const double C70894 = C70890 - C70882;
    const double C70892 = C70888 - C70874;
    const double C79168 = C79166 - C79160;
    const double C81086 = C81080 - C81067;
    const double C81085 = C81079 - C81063;
    const double C83395 = C83392 - C83382;
    const double C84346 = C84343 - C84333;
    const double C86645 = C86639 - C86626;
    const double C86644 = C86638 - C86622;
    const double C90078 = C90075 - C90065;
    const double C80588 = C80566 * C119;
    const double C80582 = C80566 * C110;
    const double C80577 = C80566 * C117;
    const double C80571 = C80566 * C109;
    const double C80822 = C80566 * C350;
    const double C80817 = C80566 * C349;
    const double C81075 = C80566 * C569;
    const double C81073 = C80566 * C268;
    const double C81055 = C80566 * C568;
    const double C81053 = C80566 * C267;
    const double C82780 = C80566 * C807;
    const double C82774 = C80566 * C796;
    const double C83080 = C80566 * C1009;
    const double C83390 = C80566 * C1191;
    const double C83388 = C80566 * C943;
    const double C83715 = C80566 * C1388;
    const double C83709 = C80566 * C1377;
    const double C84027 = C80566 * C1590;
    const double C84341 = C80566 * C1772;
    const double C84339 = C80566 * C1524;
    const double C86150 = C80566 * C811;
    const double C86144 = C80566 * C798;
    const double C86139 = C80566 * C809;
    const double C86133 = C80566 * C797;
    const double C86384 = C80566 * C1012;
    const double C86379 = C80566 * C1008;
    const double C86634 = C80566 * C1194;
    const double C86632 = C80566 * C946;
    const double C86614 = C80566 * C1190;
    const double C86612 = C80566 * C942;
    const double C89445 = C80566 * C3362;
    const double C89439 = C80566 * C3357;
    const double C89759 = C80566 * C3587;
    const double C90073 = C80566 * C3801;
    const double C90071 = C80566 * C3513;
    const double C80590 = C80567 * C1386;
    const double C80584 = C80567 * C1376;
    const double C80579 = C80567 * C1388;
    const double C80573 = C80567 * C1377;
    const double C80824 = C80567 * C1591;
    const double C80819 = C80567 * C1590;
    const double C81071 = C80567 * C1773;
    const double C81069 = C80567 * C1525;
    const double C81059 = C80567 * C1772;
    const double C81057 = C80567 * C1524;
    const double C82782 = C80567 * C3364;
    const double C82776 = C80567 * C3358;
    const double C83082 = C80567 * C3588;
    const double C83386 = C80567 * C3802;
    const double C83384 = C80567 * C3514;
    const double C83717 = C80567 * C1394;
    const double C83711 = C80567 * C1380;
    const double C84029 = C80567 * C1594;
    const double C84337 = C80567 * C1776;
    const double C84335 = C80567 * C1528;
    const double C86152 = C80567 * C5710;
    const double C86146 = C80567 * C5702;
    const double C86141 = C80567 * C3362;
    const double C86135 = C80567 * C3357;
    const double C86386 = C80567 * C5971;
    const double C86381 = C80567 * C3587;
    const double C86630 = C80567 * C6217;
    const double C86628 = C80567 * C5885;
    const double C86618 = C80567 * C3801;
    const double C86616 = C80567 * C3513;
    const double C89447 = C80567 * C5712;
    const double C89441 = C80567 * C5703;
    const double C89761 = C80567 * C5973;
    const double C90069 = C80567 * C6219;
    const double C90067 = C80567 * C5887;
    const double C20157 = C19929 * C182;
    const double C20169 = C20168 * C92177;
    const double C20326 = C20325 + C20324;
    const double C57009 = C57007 * C92097;
    const double C57008 = C57006 * C36262;
    const double C57323 = C57322 + C57321;
    const double C61448 = C61220 * C182;
    const double C61460 = C61459 * C92177;
    const double C61616 = C61615 + C61613;
    const double C66874 = C66872 * C92097;
    const double C66873 = C66871 * C36262;
    const double C67193 = C67192 + C67190;
    const double C45753 = C45752 + C45750;
    const double C45858 = C45855 + C45856;
    const double C45857 = C45853 + C45854;
    const double C46096 = C46094 + C46095;
    const double C55442 = C55437 + C55438;
    const double C55440 = C55433 + C55434;
    const double C55441 = C55435 + C55436;
    const double C55439 = C55431 + C55432;
    const double C55838 = C55835 + C55836;
    const double C55837 = C55833 + C55834;
    const double C82092 = C82081 + C82082;
    const double C82091 = C82079 + C82080;
    const double C82331 = C82325 + C82326;
    const double C81929 = C81928 + C81926;
    const double C101 =
        ((ae * -2 * C90094) / C90124 -
         (((C90093 * C90128) / C90099 + 2 * C90117) * be) / C90095) /
            C90100 +
        ((C90093 * (C90128 / C90124 -
                    (((C90093 * C90134) / C90095 + 2 * C90121) * be) / C90095 -
                    C90130 / C90104) +
          2 * (C90117 / C90100 - ((C90093 * C90121 + C92320) * be) / C90095 +
               C90114)) *
         ae) /
            C90095 +
        C90134 / C90104 - ((2 * C90114 - C90131 / C90104) * be) / C90095;
    const double C103 =
        (C90128 / C90124 -
         (((C90093 * C90134) / C90095 + 2 * C90121) * be) / C90095 -
         C90130 / C90104) /
            C90100 +
        ((C90093 * (C90134 / C90104 -
                    ((2 * C90114 - C90131 / C90104) * be) / C90095) +
          2 * (C90121 / C90100 - ((C90093 * C90114 + C92102) * be) / C90095)) *
         ae) /
            C90095 +
        (-2 * C90130) / (C90095 * 4 * C90099);
    const double C105 =
        (C90134 / C90104 - ((2 * C90114 - C90131 / C90104) * be) / C90095) /
            C90100 +
        ((2 * (C90114 / C90100 - (0 * be) / C90095) -
          C90131 / (C90095 * 4 * C90099)) *
         ae) /
            C90095;
    const double C14701 =
        C90128 / C90124 -
        (((C90093 * C90134) / C90095 + 2 * C90121) * be) / C90095 -
        C90130 / C90104;
    const double C14703 =
        C90134 / C90104 - ((2 * C90114 - C90131 / C90104) * be) / C90095;
    const double C31255 =
        C90128 / C90124 +
        (((C90093 * C90134) / C90095 + 2 * C90121) * ae) / C90095 -
        C90130 / C90104;
    const double C31257 =
        C90134 / C90104 + ((2 * C90114 - C90131 / C90104) * ae) / C90095;
    const double C44796 = C90134 / C90095;
    const double C4852 = C4029 * C4815;
    const double C4840 = C4029 * C798;
    const double C4832 = C4029 * C797;
    const double C6501 = C4029 * C799;
    const double C6493 = C4029 * C796;
    const double C8476 = C4029 * C3357;
    const double C8468 = C4029 * C5702;
    const double C10905 = C4029 * C10868;
    const double C10893 = C4029 * C1379;
    const double C10885 = C4029 * C1378;
    const double C12761 = C4029 * C1380;
    const double C12753 = C4029 * C1377;
    const double C13759 = C4029 * C5703;
    const double C27607 = C4029 * C3358;
    const double C4871 = C4865 + C4850;
    const double C4870 = C4864 + C4846;
    const double C4868 = C4862 + C4838;
    const double C6519 = C6515 + C6507;
    const double C6517 = C6513 + C6499;
    const double C8489 = C8485 + C8474;
    const double C8487 = C8483 + C8466;
    const double C10924 = C10918 + C10903;
    const double C10923 = C10917 + C10899;
    const double C10921 = C10915 + C10891;
    const double C12779 = C12775 + C12767;
    const double C12777 = C12773 + C12759;
    const double C13771 = C13769 + C13765;
    const double C27619 = C27617 + C27613;
    const double C15524 = C15518 + C15500;
    const double C15523 = C15517 + C15496;
    const double C16939 = C16936 + C16930;
    const double C18868 = C18865 + C18853;
    const double C21226 = C21220 + C21202;
    const double C21225 = C21219 + C21198;
    const double C22928 = C22925 + C22919;
    const double C32075 = C32069 + C32051;
    const double C32074 = C32068 + C32047;
    const double C33490 = C33487 + C33481;
    const double C35403 = C35400 + C35388;
    const double C62516 = C62510 + C62492;
    const double C62515 = C62509 + C62488;
    const double C64205 = C64202 + C64196;
    const double C36754 = C36750 + C36742;
    const double C36753 = C36749 + C36738;
    const double C36752 = C36748 + C36734;
    const double C36751 = C36747 + C36730;
    const double C37781 = C37778 + C37772;
    const double C37780 = C37777 + C37768;
    const double C37779 = C37776 + C37764;
    const double C39015 = C39012 + C39006;
    const double C39014 = C39011 + C39002;
    const double C39013 = C39010 + C38998;
    const double C40347 = C40345 + C40339;
    const double C40346 = C40344 + C40335;
    const double C41137 = C41133 + C41125;
    const double C41136 = C41132 + C41121;
    const double C41135 = C41131 + C41117;
    const double C41134 = C41130 + C41113;
    const double C41983 = C41981 + C41977;
    const double C41982 = C41980 + C41973;
    const double C42893 = C42891 + C42887;
    const double C42892 = C42890 + C42883;
    const double C58338 = C58337 + C58335;
    const double C71872 = C71871 + C71869;
    const double C72992 = C72991 + C72989;
    const double C45596 = C45590 + C45575;
    const double C45595 = C45589 + C45571;
    const double C45593 = C45587 + C45563;
    const double C47038 = C47034 + C47026;
    const double C47036 = C47032 + C47018;
    const double C48937 = C48933 + C48922;
    const double C48935 = C48931 + C48914;
    const double C51649 = C51643 + C51628;
    const double C51647 = C51641 + C51620;
    const double C51646 = C51640 + C51616;
    const double C52614 = C52612 + C52608;
    const double C53836 = C53834 + C53830;
    const double C81848 = C81846 + C81839;
    const double C83512 = C83510 + C83506;
    const double C5443 = C5430 + C5442;
    const double C11232 = C11230 + C11231;
    const double C36468 =
        ((ae * -2 * C90276) / C90124 -
         (((C90155 * C90304) / C90099 + 2 * C90291) * be) / C90095) /
            C90100 +
        ((C90155 * (C90304 / C90124 -
                    (((C90155 * C90307) / C90095 + 2 * C90287) * be) / C90095 -
                    C90187 / C90104) +
          2 * (C90291 / C90100 - ((C90155 * C90287 + C92333) * be) / C90095 +
               C90288)) *
         ae) /
            C90095 +
        C90307 / C90104 - ((2 * C90288 - C90190 / C90104) * be) / C90095;
    const double C36469 =
        (C90304 / C90124 -
         (((C90155 * C90307) / C90095 + 2 * C90287) * be) / C90095 -
         C90187 / C90104) /
            C90100 +
        ((C90155 * (C90307 / C90104 -
                    ((2 * C90288 - C90190 / C90104) * be) / C90095) +
          2 * (C90287 / C90100 - ((C90155 * C90288 + C92226) * be) / C90095)) *
         ae) /
            C90095 +
        (-2 * C90187) / (C90095 * 4 * C90099);
    const double C36470 =
        (C90307 / C90104 - ((2 * C90288 - C90190 / C90104) * be) / C90095) /
            C90100 +
        ((2 * (C90288 / C90100 - (0 * be) / C90095) -
          C90190 / (C90095 * 4 * C90099)) *
         ae) /
            C90095;
    const double C45122 =
        C90304 / C90124 -
        (((C90155 * C90307) / C90095 + 2 * C90287) * be) / C90095 -
        C90187 / C90104;
    const double C45123 =
        C90307 / C90104 - ((2 * C90288 - C90190 / C90104) * be) / C90095;
    const double C4401 = C4395 - C4385;
    const double C4398 = C4392 - C4373;
    const double C6969 = C6966 - C6959;
    const double C7928 = C7925 - C7918;
    const double C67813 = C67807 - C67797;
    const double C67810 = C67804 - C67785;
    const double C70461 = C70458 - C70451;
    const double C15074 = C15068 - C15061;
    const double C15071 = C15065 - C15049;
    const double C15069 = C15063 - C15041;
    const double C17385 = C17381 - C17376;
    const double C17383 = C17379 - C17368;
    const double C18334 = C18330 - C18325;
    const double C18332 = C18328 - C18317;
    const double C27065 = C27059 - C27052;
    const double C27063 = C27057 - C27044;
    const double C27060 = C27054 - C27032;
    const double C28179 = C28177 - C28174;
    const double C30624 = C30622 - C30616;
    const double C87061 = C87059 - C87055;
    const double C89657 = C89655 - C89649;
    const double C31626 = C31620 - C31613;
    const double C31623 = C31617 - C31601;
    const double C31621 = C31615 - C31593;
    const double C33934 = C33930 - C33925;
    const double C33932 = C33928 - C33917;
    const double C34878 = C34874 - C34869;
    const double C34876 = C34872 - C34861;
    const double C41536 = C41530 - C41523;
    const double C41533 = C41527 - C41511;
    const double C41531 = C41525 - C41503;
    const double C43312 = C43310 - C43304;
    const double C44276 = C44272 - C44264;
    const double C44274 = C44270 - C44256;
    const double C53162 = C53160 - C53157;
    const double C4408 = C4402 + C4390;
    const double C4403 = C4397 + C4370;
    const double C6973 = C6970 + C6964;
    const double C7932 = C7929 + C7923;
    const double C67820 = C67814 + C67802;
    const double C67815 = C67809 + C67782;
    const double C70463 = C70460 + C70448;
    const double C4406 = C4400 + C4382;
    const double C4405 = C4399 + C4378;
    const double C6971 = C6968 + C6956;
    const double C7930 = C7927 + C7915;
    const double C67818 = C67812 + C67794;
    const double C67817 = C67811 + C67790;
    const double C70465 = C70462 + C70456;
    const double C15079 = C15073 + C15058;
    const double C15078 = C15072 + C15054;
    const double C15076 = C15070 + C15046;
    const double C17388 = C17384 + C17373;
    const double C17386 = C17382 + C17365;
    const double C18337 = C18333 + C18322;
    const double C18335 = C18331 + C18314;
    const double C27070 = C27064 + C27049;
    const double C27068 = C27062 + C27041;
    const double C27067 = C27061 + C27037;
    const double C28180 = C28178 + C28171;
    const double C30627 = C30625 + C30621;
    const double C87062 = C87060 + C87052;
    const double C89660 = C89658 + C89654;
    const double C31631 = C31625 + C31610;
    const double C31630 = C31624 + C31606;
    const double C31628 = C31622 + C31598;
    const double C33937 = C33933 + C33922;
    const double C33935 = C33931 + C33914;
    const double C34881 = C34877 + C34866;
    const double C34879 = C34875 + C34858;
    const double C41541 = C41535 + C41520;
    const double C41540 = C41534 + C41516;
    const double C41538 = C41532 + C41508;
    const double C43315 = C43313 + C43309;
    const double C44281 = C44277 + C44269;
    const double C44279 = C44275 + C44261;
    const double C53163 = C53161 + C53154;
    const double C45165 = C45159 + C45141;
    const double C45164 = C45158 + C45137;
    const double C47477 = C47474 + C47462;
    const double C48409 = C48406 + C48394;
    const double C57920 = C57914 + C57896;
    const double C57919 = C57913 + C57892;
    const double C60548 = C60545 + C60539;
    const double C15329 = C15316 + C15328;
    const double C86818 = C86816 + C86817;
    const double C31880 = C31867 + C31879;
    const double C41246 = C41244 + C41245;
    const double C71357 =
        ((ae * -2 * C90347) / C90124 -
         (((C90158 * C90375) / C90099 + 2 * C90362) * be) / C90095) /
            C90100 +
        ((C90158 * (C90375 / C90124 -
                    (((C90158 * C90378) / C90095 + 2 * C90358) * be) / C90095 -
                    C90213 / C90104) +
          2 * (C90362 / C90100 - ((C90158 * C90358 + C92334) * be) / C90095 +
               C90359)) *
         ae) /
            C90095 +
        C90378 / C90104 - ((2 * C90359 - C90216 / C90104) * be) / C90095;
    const double C71358 =
        (C90375 / C90124 -
         (((C90158 * C90378) / C90095 + 2 * C90358) * be) / C90095 -
         C90213 / C90104) /
            C90100 +
        ((C90158 * (C90378 / C90104 -
                    ((2 * C90359 - C90216 / C90104) * be) / C90095) +
          2 * (C90358 / C90100 - ((C90158 * C90359 + C92252) * be) / C90095)) *
         ae) /
            C90095 +
        (-2 * C90213) / (C90095 * 4 * C90099);
    const double C71359 =
        (C90378 / C90104 - ((2 * C90359 - C90216 / C90104) * be) / C90095) /
            C90100 +
        ((2 * (C90359 / C90100 - (0 * be) / C90095) -
          C90216 / (C90095 * 4 * C90099)) *
         ae) /
            C90095;
    const double C81049 =
        C90375 / C90124 -
        (((C90158 * C90378) / C90095 + 2 * C90358) * be) / C90095 -
        C90213 / C90104;
    const double C81050 =
        C90378 / C90104 - ((2 * C90359 - C90216 / C90104) * be) / C90095;
    const double C10120 = C10114 - C10104;
    const double C10117 = C10111 - C10092;
    const double C12645 = C12642 - C12635;
    const double C13647 = C13644 - C13637;
    const double C41024 = C41018 - C41008;
    const double C41021 = C41015 - C40996;
    const double C44712 = C44709 - C44702;
    const double C20438 = C20432 - C20425;
    const double C20435 = C20429 - C20413;
    const double C20433 = C20427 - C20405;
    const double C22805 = C22801 - C22796;
    const double C22803 = C22799 - C22788;
    const double C23784 = C23780 - C23775;
    const double C23782 = C23778 - C23767;
    const double C26509 = C26503 - C26496;
    const double C26507 = C26501 - C26488;
    const double C26504 = C26498 - C26476;
    const double C29931 = C29929 - C29926;
    const double C31173 = C31171 - C31168;
    const double C57484 = C57482 - C57479;
    const double C60963 = C60961 - C60958;
    const double C61728 = C61722 - C61715;
    const double C61725 = C61719 - C61703;
    const double C61723 = C61717 - C61695;
    const double C64082 = C64078 - C64073;
    const double C64080 = C64076 - C64065;
    const double C65058 = C65054 - C65049;
    const double C65056 = C65052 - C65041;
    const double C67377 = C67371 - C67364;
    const double C67374 = C67368 - C67352;
    const double C67372 = C67366 - C67344;
    const double C69037 = C69035 - C69029;
    const double C70895 = C70891 - C70886;
    const double C70893 = C70889 - C70878;
    const double C79169 = C79167 - C79164;
    const double C10127 = C10121 + C10109;
    const double C10122 = C10116 + C10089;
    const double C12649 = C12646 + C12640;
    const double C13651 = C13648 + C13642;
    const double C41031 = C41025 + C41013;
    const double C41026 = C41020 + C40993;
    const double C44716 = C44713 + C44707;
    const double C10125 = C10119 + C10101;
    const double C10124 = C10118 + C10097;
    const double C12647 = C12644 + C12632;
    const double C13649 = C13646 + C13634;
    const double C41029 = C41023 + C41005;
    const double C41028 = C41022 + C41001;
    const double C44714 = C44711 + C44699;
    const double C20443 = C20437 + C20422;
    const double C20442 = C20436 + C20418;
    const double C20440 = C20434 + C20410;
    const double C22808 = C22804 + C22793;
    const double C22806 = C22802 + C22785;
    const double C23787 = C23783 + C23772;
    const double C23785 = C23781 + C23764;
    const double C26514 = C26508 + C26493;
    const double C26512 = C26506 + C26485;
    const double C26511 = C26505 + C26481;
    const double C29932 = C29930 + C29923;
    const double C31174 = C31172 + C31165;
    const double C57485 = C57483 + C57476;
    const double C60964 = C60962 + C60955;
    const double C61733 = C61727 + C61712;
    const double C61732 = C61726 + C61708;
    const double C61730 = C61724 + C61700;
    const double C64085 = C64081 + C64070;
    const double C64083 = C64079 + C64062;
    const double C65061 = C65057 + C65046;
    const double C65059 = C65055 + C65038;
    const double C67382 = C67376 + C67361;
    const double C67381 = C67375 + C67357;
    const double C67379 = C67373 + C67349;
    const double C69040 = C69038 + C69034;
    const double C70898 = C70894 + C70883;
    const double C70896 = C70892 + C70875;
    const double C79170 = C79168 + C79161;
    const double C81092 = C81086 + C81068;
    const double C81091 = C81085 + C81064;
    const double C83398 = C83395 + C83383;
    const double C84349 = C84346 + C84334;
    const double C86651 = C86645 + C86627;
    const double C86650 = C86644 + C86623;
    const double C90081 = C90078 + C90066;
    const double C20170 = C20157 + C20169;
    const double C57010 = C57008 + C57009;
    const double C61461 = C61448 + C61460;
    const double C66875 = C66873 + C66874;
    const double C45754 = C45753 + C45751;
    const double C46085 = C45857 * C265;
    const double C46097 = C46096 * C92188;
    const double C82094 = C82092 * C92177;
    const double C82093 = C82091 * C182;
    const double C81930 = C81929 + C81927;
    const double C15506 = C14701 * C798;
    const double C15486 = C14701 * C797;
    const double C16920 = C14701 * C796;
    const double C18859 = C14701 * C3357;
    const double C21208 = C14701 * C1379;
    const double C21188 = C14701 * C1378;
    const double C22909 = C14701 * C1377;
    const double C15502 = C14703 * C799;
    const double C15490 = C14703 * C796;
    const double C16924 = C14703 * C795;
    const double C18855 = C14703 * C3358;
    const double C21204 = C14703 * C1380;
    const double C21192 = C14703 * C1377;
    const double C22913 = C14703 * C1376;
    const double C32057 = C31255 * C798;
    const double C32037 = C31255 * C797;
    const double C33471 = C31255 * C796;
    const double C35394 = C31255 * C3357;
    const double C62498 = C31255 * C1379;
    const double C62478 = C31255 * C1378;
    const double C64186 = C31255 * C1377;
    const double C32053 = C31257 * C799;
    const double C32041 = C31257 * C796;
    const double C33475 = C31257 * C795;
    const double C35390 = C31257 * C3358;
    const double C62494 = C31257 * C1380;
    const double C62482 = C31257 * C1377;
    const double C64190 = C31257 * C1376;
    const double C45577 = C44796 * C4815;
    const double C45565 = C44796 * C798;
    const double C45557 = C44796 * C797;
    const double C47020 = C44796 * C799;
    const double C47012 = C44796 * C796;
    const double C48924 = C44796 * C3357;
    const double C48916 = C44796 * C5702;
    const double C51630 = C44796 * C1379;
    const double C51622 = C44796 * C5703;
    const double C51610 = C44796 * C1378;
    const double C52602 = C44796 * C3358;
    const double C53824 = C44796 * C1377;
    const double C81841 = C44796 * C10868;
    const double C83500 = C44796 * C1380;
    const double C4860 = C4851 - C4852;
    const double C4857 = C4839 - C4840;
    const double C4855 = C4831 - C4832;
    const double C6510 = C6500 - C6501;
    const double C6508 = C6492 - C6493;
    const double C8482 = C8475 - C8476;
    const double C8480 = C8467 - C8468;
    const double C10913 = C10904 - C10905;
    const double C10910 = C10892 - C10893;
    const double C10908 = C10884 - C10885;
    const double C12770 = C12760 - C12761;
    const double C12768 = C12752 - C12753;
    const double C13766 = C13758 - C13759;
    const double C27614 = C27606 - C27607;
    const double C36758 = C36754 * C92188;
    const double C36757 = C36753 * C92188;
    const double C56844 = C36753 * C92334;
    const double C66693 = C36753 * C61039;
    const double C36756 = C36752 * C92188;
    const double C40341 = C36752 * C9422;
    const double C56841 = C36752 * C92334;
    const double C66690 = C36752 * C61039;
    const double C85983 = C36752 * C92361;
    const double C36755 = C36751 * C92188;
    const double C40330 = C36751 * C9422;
    const double C56839 = C36751 * C92334;
    const double C66688 = C36751 * C61039;
    const double C85978 = C36751 * C92361;
    const double C37784 = C37781 * C92188;
    const double C37783 = C37780 * C92188;
    const double C58331 = C37780 * C92334;
    const double C68229 = C37780 * C61039;
    const double C37782 = C37779 * C92188;
    const double C41969 = C37779 * C9422;
    const double C58329 = C37779 * C92334;
    const double C68227 = C37779 * C61039;
    const double C87465 = C37779 * C92361;
    const double C39018 = C39015 * C92188;
    const double C40331 = C39015 * C9423;
    const double C43820 = C39015 * C9422;
    const double C56840 = C39015 * C92252;
    const double C60113 = C39015 * C92334;
    const double C66689 = C39015 * C92252;
    const double C70024 = C39015 * C61039;
    const double C85979 = C39015 * C92362;
    const double C89234 = C39015 * C92361;
    const double C39017 = C39014 * C92188;
    const double C40340 = C39014 * C9423;
    const double C56842 = C39014 * C92252;
    const double C60111 = C39014 * C92334;
    const double C66691 = C39014 * C92252;
    const double C70022 = C39014 * C61039;
    const double C85982 = C39014 * C92362;
    const double C39016 = C39013 * C92188;
    const double C56843 = C39013 * C92252;
    const double C66692 = C39013 * C92252;
    const double C40349 = C40347 * C9424;
    const double C60110 = C40347 * C92252;
    const double C70021 = C40347 * C92252;
    const double C85981 = C40347 * C80417;
    const double C40348 = C40346 * C9424;
    const double C43819 = C40346 * C9423;
    const double C60112 = C40346 * C92252;
    const double C70023 = C40346 * C92252;
    const double C85980 = C40346 * C80417;
    const double C89233 = C40346 * C92362;
    const double C43818 = C41136 * C9424;
    const double C89232 = C41136 * C80417;
    const double C41985 = C41983 * C9424;
    const double C87467 = C41983 * C80417;
    const double C41984 = C41982 * C9423;
    const double C58330 = C41982 * C92252;
    const double C68228 = C41982 * C92252;
    const double C87466 = C41982 * C92362;
    const double C58339 = C58338 * C92252;
    const double C68230 = C58338 * C92252;
    const double C45147 = C45122 * C110;
    const double C45127 = C45122 * C109;
    const double C47468 = C45122 * C796;
    const double C48400 = C45122 * C1377;
    const double C57902 = C45122 * C1379;
    const double C57882 = C45122 * C1378;
    const double C60529 = C45122 * C3357;
    const double C45143 = C45123 * C795;
    const double C45131 = C45123 * C796;
    const double C47464 = C45123 * C799;
    const double C48396 = C45123 * C3358;
    const double C57898 = C45123 * C5703;
    const double C57886 = C45123 * C3357;
    const double C60533 = C45123 * C5702;
    const double C4407 = C4401 + C4386;
    const double C4404 = C4398 + C4374;
    const double C6972 = C6969 + C6960;
    const double C7931 = C7928 + C7919;
    const double C67819 = C67813 + C67798;
    const double C67816 = C67810 + C67786;
    const double C70464 = C70461 + C70452;
    const double C15080 = C15074 + C15062;
    const double C15077 = C15071 + C15050;
    const double C15075 = C15069 + C15042;
    const double C17389 = C17385 + C17377;
    const double C17387 = C17383 + C17369;
    const double C18338 = C18334 + C18326;
    const double C18336 = C18332 + C18318;
    const double C27071 = C27065 + C27053;
    const double C27069 = C27063 + C27045;
    const double C27066 = C27060 + C27033;
    const double C28181 = C28179 + C28175;
    const double C30626 = C30624 + C30617;
    const double C87063 = C87061 + C87056;
    const double C89659 = C89657 + C89650;
    const double C31632 = C31626 + C31614;
    const double C31629 = C31623 + C31602;
    const double C31627 = C31621 + C31594;
    const double C33938 = C33934 + C33926;
    const double C33936 = C33932 + C33918;
    const double C34882 = C34878 + C34870;
    const double C34880 = C34876 + C34862;
    const double C41542 = C41536 + C41524;
    const double C41539 = C41533 + C41512;
    const double C41537 = C41531 + C41504;
    const double C43314 = C43312 + C43305;
    const double C44280 = C44276 + C44265;
    const double C44278 = C44274 + C44257;
    const double C53164 = C53162 + C53158;
    const double C81074 = C81049 * C110;
    const double C81054 = C81049 * C109;
    const double C83389 = C81049 * C796;
    const double C84340 = C81049 * C1377;
    const double C86633 = C81049 * C798;
    const double C86613 = C81049 * C797;
    const double C90072 = C81049 * C3357;
    const double C81070 = C81050 * C1376;
    const double C81058 = C81050 * C1377;
    const double C83385 = C81050 * C3358;
    const double C84336 = C81050 * C1380;
    const double C86629 = C81050 * C5702;
    const double C86617 = C81050 * C3357;
    const double C90068 = C81050 * C5703;
    const double C10126 = C10120 + C10105;
    const double C10123 = C10117 + C10093;
    const double C12648 = C12645 + C12636;
    const double C13650 = C13647 + C13638;
    const double C41030 = C41024 + C41009;
    const double C41027 = C41021 + C40997;
    const double C44715 = C44712 + C44703;
    const double C20444 = C20438 + C20426;
    const double C20441 = C20435 + C20414;
    const double C20439 = C20433 + C20406;
    const double C22809 = C22805 + C22797;
    const double C22807 = C22803 + C22789;
    const double C23788 = C23784 + C23776;
    const double C23786 = C23782 + C23768;
    const double C26515 = C26509 + C26497;
    const double C26513 = C26507 + C26489;
    const double C26510 = C26504 + C26477;
    const double C29933 = C29931 + C29927;
    const double C31175 = C31173 + C31169;
    const double C57486 = C57484 + C57480;
    const double C60965 = C60963 + C60959;
    const double C61734 = C61728 + C61716;
    const double C61731 = C61725 + C61704;
    const double C61729 = C61723 + C61696;
    const double C64086 = C64082 + C64074;
    const double C64084 = C64080 + C64066;
    const double C65062 = C65058 + C65050;
    const double C65060 = C65056 + C65042;
    const double C67383 = C67377 + C67365;
    const double C67380 = C67374 + C67353;
    const double C67378 = C67372 + C67345;
    const double C69039 = C69037 + C69030;
    const double C70899 = C70895 + C70887;
    const double C70897 = C70893 + C70879;
    const double C79171 = C79169 + C79165;
    const double C46098 = C46085 + C46097;
    const double C82095 = C82093 + C82094;
    const double C15514 = C15505 - C15506;
    const double C15509 = C15485 - C15486;
    const double C16931 = C16919 - C16920;
    const double C18864 = C18858 - C18859;
    const double C21216 = C21207 - C21208;
    const double C21211 = C21187 - C21188;
    const double C22920 = C22908 - C22909;
    const double C15513 = C15501 - C15502;
    const double C15510 = C15489 - C15490;
    const double C16932 = C16923 - C16924;
    const double C18863 = C18854 - C18855;
    const double C21215 = C21203 - C21204;
    const double C21212 = C21191 - C21192;
    const double C22921 = C22912 - C22913;
    const double C32065 = C32056 - C32057;
    const double C32060 = C32036 - C32037;
    const double C33482 = C33470 - C33471;
    const double C35399 = C35393 - C35394;
    const double C62506 = C62497 - C62498;
    const double C62501 = C62477 - C62478;
    const double C64197 = C64185 - C64186;
    const double C32064 = C32052 - C32053;
    const double C32061 = C32040 - C32041;
    const double C33483 = C33474 - C33475;
    const double C35398 = C35389 - C35390;
    const double C62505 = C62493 - C62494;
    const double C62502 = C62481 - C62482;
    const double C64198 = C64189 - C64190;
    const double C45585 = C45576 - C45577;
    const double C45582 = C45564 - C45565;
    const double C45580 = C45556 - C45557;
    const double C47029 = C47019 - C47020;
    const double C47027 = C47011 - C47012;
    const double C48930 = C48923 - C48924;
    const double C48928 = C48915 - C48916;
    const double C51638 = C51629 - C51630;
    const double C51636 = C51621 - C51622;
    const double C51633 = C51609 - C51610;
    const double C52609 = C52601 - C52602;
    const double C53831 = C53823 - C53824;
    const double C81845 = C81840 - C81841;
    const double C83507 = C83499 - C83500;
    const double C4866 = C4860 - C4853;
    const double C4863 = C4857 - C4841;
    const double C4861 = C4855 - C4833;
    const double C6514 = C6510 - C6502;
    const double C6512 = C6508 - C6494;
    const double C8486 = C8482 - C8477;
    const double C8484 = C8480 - C8469;
    const double C10919 = C10913 - C10906;
    const double C10916 = C10910 - C10894;
    const double C10914 = C10908 - C10886;
    const double C12774 = C12770 - C12762;
    const double C12772 = C12768 - C12754;
    const double C13768 = C13766 - C13760;
    const double C27616 = C27614 - C27608;
    const double C56845 = C56841 + C56842;
    const double C66694 = C66690 + C66691;
    const double C45155 = C45146 - C45147;
    const double C45150 = C45126 - C45127;
    const double C47473 = C47467 - C47468;
    const double C48405 = C48399 - C48400;
    const double C57910 = C57901 - C57902;
    const double C57905 = C57881 - C57882;
    const double C60540 = C60528 - C60529;
    const double C45154 = C45142 - C45143;
    const double C45151 = C45130 - C45131;
    const double C47472 = C47463 - C47464;
    const double C48404 = C48395 - C48396;
    const double C57909 = C57897 - C57898;
    const double C57906 = C57885 - C57886;
    const double C60541 = C60532 - C60533;
    const double C15081 = C15077 + C15078;
    const double C29389 = C18337 + C18338;
    const double C29388 = C18338 + C18337;
    const double C87048 = C27071 + C27070;
    const double C31633 = C31629 + C31630;
    const double C54378 = C34881 + C34882;
    const double C54377 = C34882 + C34881;
    const double C41543 = C41539 + C41540;
    const double C81082 = C81073 - C81074;
    const double C81077 = C81053 - C81054;
    const double C83394 = C83388 - C83389;
    const double C84345 = C84339 - C84340;
    const double C86641 = C86632 - C86633;
    const double C86636 = C86612 - C86613;
    const double C90077 = C90071 - C90072;
    const double C81081 = C81069 - C81070;
    const double C81078 = C81057 - C81058;
    const double C83393 = C83384 - C83385;
    const double C84344 = C84335 - C84336;
    const double C86640 = C86628 - C86629;
    const double C86637 = C86616 - C86617;
    const double C90076 = C90067 - C90068;
    const double C20445 = C20441 + C20442;
    const double C28717 = C22808 + C22809;
    const double C28716 = C22809 + C22808;
    const double C57472 = C26515 + C26514;
    const double C61735 = C61731 + C61732;
    const double C77975 = C64085 + C64086;
    const double C77974 = C64086 + C64085;
    const double C67384 = C67380 + C67381;
    const double C15520 = C15514 - C15507;
    const double C15515 = C15509 - C15487;
    const double C16934 = C16931 - C16921;
    const double C18867 = C18864 - C18860;
    const double C21222 = C21216 - C21209;
    const double C21217 = C21211 - C21189;
    const double C22923 = C22920 - C22910;
    const double C15519 = C15513 - C15503;
    const double C15516 = C15510 - C15491;
    const double C16935 = C16932 - C16925;
    const double C18866 = C18863 - C18856;
    const double C21221 = C21215 - C21205;
    const double C21218 = C21212 - C21193;
    const double C22924 = C22921 - C22914;
    const double C32071 = C32065 - C32058;
    const double C32066 = C32060 - C32038;
    const double C33485 = C33482 - C33472;
    const double C35402 = C35399 - C35395;
    const double C62512 = C62506 - C62499;
    const double C62507 = C62501 - C62479;
    const double C64200 = C64197 - C64187;
    const double C32070 = C32064 - C32054;
    const double C32067 = C32061 - C32042;
    const double C33486 = C33483 - C33476;
    const double C35401 = C35398 - C35391;
    const double C62511 = C62505 - C62495;
    const double C62508 = C62502 - C62483;
    const double C64201 = C64198 - C64191;
    const double C45591 = C45585 - C45578;
    const double C45588 = C45582 - C45566;
    const double C45586 = C45580 - C45558;
    const double C47033 = C47029 - C47021;
    const double C47031 = C47027 - C47013;
    const double C48934 = C48930 - C48925;
    const double C48932 = C48928 - C48917;
    const double C51644 = C51638 - C51631;
    const double C51642 = C51636 - C51623;
    const double C51639 = C51633 - C51611;
    const double C52611 = C52609 - C52603;
    const double C53833 = C53831 - C53825;
    const double C81847 = C81845 - C81842;
    const double C83509 = C83507 - C83501;
    const double C4872 = C4866 + C4854;
    const double C4869 = C4863 + C4842;
    const double C4867 = C4861 + C4834;
    const double C6518 = C6514 + C6503;
    const double C6516 = C6512 + C6495;
    const double C8490 = C8486 + C8478;
    const double C8488 = C8484 + C8470;
    const double C10925 = C10919 + C10907;
    const double C10922 = C10916 + C10895;
    const double C10920 = C10914 + C10887;
    const double C12778 = C12774 + C12763;
    const double C12776 = C12772 + C12755;
    const double C13770 = C13768 + C13761;
    const double C27618 = C27616 + C27609;
    const double C45161 = C45155 - C45148;
    const double C45156 = C45150 - C45128;
    const double C47476 = C47473 - C47469;
    const double C48408 = C48405 - C48401;
    const double C57916 = C57910 - C57903;
    const double C57911 = C57905 - C57883;
    const double C60543 = C60540 - C60530;
    const double C45160 = C45154 - C45144;
    const double C45157 = C45151 - C45132;
    const double C47475 = C47472 - C47465;
    const double C48407 = C48404 - C48397;
    const double C57915 = C57909 - C57899;
    const double C57912 = C57906 - C57887;
    const double C60544 = C60541 - C60534;
    const double C87057 = C87048 * C92097;
    const double C41544 = C41543 * C92097;
    const double C81088 = C81082 - C81075;
    const double C81083 = C81077 - C81055;
    const double C83397 = C83394 - C83390;
    const double C84348 = C84345 - C84341;
    const double C86647 = C86641 - C86634;
    const double C86642 = C86636 - C86614;
    const double C90080 = C90077 - C90073;
    const double C81087 = C81081 - C81071;
    const double C81084 = C81078 - C81059;
    const double C83396 = C83393 - C83386;
    const double C84347 = C84344 - C84337;
    const double C86646 = C86640 - C86630;
    const double C86643 = C86637 - C86618;
    const double C90079 = C90076 - C90069;
    const double C20446 = C20445 * C92177;
    const double C61736 = C61735 * C92177;
    const double C15526 = C15520 + C15508;
    const double C15521 = C15515 + C15488;
    const double C16937 = C16934 + C16922;
    const double C18870 = C18867 + C18861;
    const double C21228 = C21222 + C21210;
    const double C21223 = C21217 + C21190;
    const double C22926 = C22923 + C22911;
    const double C15525 = C15519 + C15504;
    const double C15522 = C15516 + C15492;
    const double C16938 = C16935 + C16926;
    const double C18869 = C18866 + C18857;
    const double C21227 = C21221 + C21206;
    const double C21224 = C21218 + C21194;
    const double C22927 = C22924 + C22915;
    const double C32077 = C32071 + C32059;
    const double C32072 = C32066 + C32039;
    const double C33488 = C33485 + C33473;
    const double C35405 = C35402 + C35396;
    const double C62518 = C62512 + C62500;
    const double C62513 = C62507 + C62480;
    const double C64203 = C64200 + C64188;
    const double C32076 = C32070 + C32055;
    const double C32073 = C32067 + C32043;
    const double C33489 = C33486 + C33477;
    const double C35404 = C35401 + C35392;
    const double C62517 = C62511 + C62496;
    const double C62514 = C62508 + C62484;
    const double C64204 = C64201 + C64192;
    const double C45597 = C45591 + C45579;
    const double C45594 = C45588 + C45567;
    const double C45592 = C45586 + C45559;
    const double C47037 = C47033 + C47022;
    const double C47035 = C47031 + C47014;
    const double C48938 = C48934 + C48926;
    const double C48936 = C48932 + C48918;
    const double C51650 = C51644 + C51632;
    const double C51648 = C51642 + C51624;
    const double C51645 = C51639 + C51612;
    const double C52613 = C52611 + C52604;
    const double C53835 = C53833 + C53826;
    const double C81849 = C81847 + C81843;
    const double C83511 = C83509 + C83502;
    const double C4873 = C4869 + C4870;
    const double C30065 = C8489 + C8490;
    const double C30064 = C8490 + C8489;
    const double C10926 = C10922 + C10923;
    const double C45167 = C45161 + C45149;
    const double C45162 = C45156 + C45129;
    const double C47479 = C47476 + C47470;
    const double C48411 = C48408 + C48402;
    const double C57922 = C57916 + C57904;
    const double C57917 = C57911 + C57884;
    const double C60546 = C60543 + C60531;
    const double C45166 = C45160 + C45145;
    const double C45163 = C45157 + C45133;
    const double C47478 = C47475 + C47466;
    const double C48410 = C48407 + C48398;
    const double C57921 = C57915 + C57900;
    const double C57918 = C57912 + C57888;
    const double C60547 = C60544 + C60535;
    const double C81094 = C81088 + C81076;
    const double C81089 = C81083 + C81056;
    const double C83400 = C83397 + C83391;
    const double C84351 = C84348 + C84342;
    const double C86653 = C86647 + C86635;
    const double C86648 = C86642 + C86615;
    const double C90083 = C90080 + C90074;
    const double C81093 = C81087 + C81072;
    const double C81090 = C81084 + C81060;
    const double C83399 = C83396 + C83387;
    const double C84350 = C84347 + C84338;
    const double C86652 = C86646 + C86631;
    const double C86649 = C86643 + C86619;
    const double C90082 = C90079 + C90070;
    const double C45598 = C45594 + C45595;
    const double C55040 = C48937 + C48938;
    const double C55039 = C48938 + C48937;
    const double C81835 = C51650 + C51649;
    const double C4874 = C4873 * C92188;
    const double C45599 = C45598 * C92188;
    d2eexx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92188 * C92333 +
            (C15521 + C15522 + C15523) * C92188 * C92226) *
               C92150 * C1969 -
           ((C15524 + C15525 + C15526) * C92188 * C92226 +
            (C15523 + C15522 + C15521) * C92188 * C92333) *
               C92150 * C1970) *
              C1971 +
          (((C16937 + C16938 + C16939) * C92188 * C92333 +
            (C14700 * C812 - C14701 * C799 - C14700 * C813 + C92357 * C823 +
             C14702 * C814 - C14703 * C800 - C14702 * C815 + C92358 * C824 +
             C14704 * C816 - C14705 * C801 - C14704 * C817 + C14697 * C825) *
                C92188 * C92226) *
               C92150 * C1970 -
           ((C16939 + C16938 + C16937) * C92188 * C92226 +
            (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
             C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
             C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
                C92188 * C92333) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C14700 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92357 +
            (C14783 - C14784 + C14785 - C14786) * C14702 +
            (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
            C14812 * C14697) *
               C92188 * C92150 * C1969 +
           ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C14700 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92357 +
            (C17038 - C17039 + C17040 - C17041) * C14702 +
            (C17042 - C17043 + C17044 - C17045) * C92358 +
            (C17046 - C17047 + C17048 - C17049) * C14704 +
            (C17050 - C17051 + C17052 - C17053) * C14697) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C14784 - C14783 + C14786 - C14785) * C14700 +
            (C14788 - C14787 + C14790 - C14789) * C92357 +
            (C14792 - C14791 + C14794 - C14793) * C14702 +
            (C14796 - C14795 + C14798 - C14797) * C92358 +
            (C14799 - C14800 + C14801 - C14802) * C14704 +
            (C14803 - C14804 + C14805 - C14806) * C14697) *
               C92188 * C92150 * C1969 +
           ((C17039 - C17038 + C17041 - C17040) * C14700 +
            (C17043 - C17042 + C17045 - C17044) * C92357 +
            (C17047 - C17046 + C17049 - C17048) * C14702 +
            (C17051 - C17050 + C17053 - C17052) * C92358 +
            (C92333 * C879 - C14780 * C794 + C92226 * C883 - C14781 * C801) *
                C14704 +
            (C92333 * C887 - C14780 * C803 + C92226 * C891 - C14781 * C817) *
                C14697) *
               C92188 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C14700 +
             (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
             (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
                C92333 +
            ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
             C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
             C14888 * C14697) *
                C92226) *
               C92150 * C1969 +
           (((C5040 - C5039) * C14700 + (C5042 - C5041) * C92357 +
             C6734 * C14702 + C6735 * C92358 + C17152 * C14704 +
             C17153 * C14697) *
                C92333 +
            ((C5044 - C5043) * C14700 + (C5046 - C5045) * C92357 +
             C6736 * C14702 + C6737 * C92358 + (C4212 - C4213) * C14704 +
             (C4214 - C4215) * C14697) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C14700 + (C282 - C281) * C92357 +
             (C284 - C283) * C14702 + (C286 - C285) * C92358 +
             (C288 - C287) * C14704 + (C290 - C289) * C14697) *
                C92333 +
            (C6734 * C14700 + C6735 * C92357 + C17152 * C14702 +
             C17153 * C92358 + (C2134 - C2135) * C14704 +
             (C2136 - C2137) * C14697) *
                C92226) *
               C92150 * C1969 +
           ((C6732 * C14700 + C6733 * C92357 + C14887 * C14702 +
             C14888 * C92358 + (C2135 - C2134) * C14704 +
             (C2137 - C2136) * C14697) *
                C92333 +
            (C5047 * C14700 + C5048 * C92357 + (C4213 - C4212) * C14702 +
             (C4215 - C4214) * C92358 + (C92188 * C949 - C265 * C801) * C14704 +
             (C92188 * C957 - C265 * C817) * C14697) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C14780 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92333 +
            (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
            (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
               C92188 * C92150 * C1969 +
           ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C14780 +
            (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92333 +
            (C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C14781 +
            (C15767 - C15768 + C15769 - C15770 + C15771 - C15772) * C92226) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C14780 +
            (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
             C14704 * C351 - C14697 * C357) *
                C92333 +
            (C17252 - C17253 + C17254 - C17255 + C17256 - C17257) * C14781 +
            (C17258 - C17259 + C17260 - C17261 + C17262 - C17263) * C92226) *
               C92188 * C92150 * C1969 +
           ((C17253 - C17252 + C17255 - C17254 + C17257 - C17256) * C14780 +
            (C17259 - C17258 + C17261 - C17260 + C17263 - C17262) * C92333 +
            (C92357 * C812 - C14700 * C799 + C92358 * C814 - C14702 * C800 +
             C14697 * C816 - C14704 * C801) *
                C14781 +
            (C92357 * C1021 - C14700 * C1013 + C92358 * C1022 - C14702 * C1014 +
             C14697 * C1023 - C14704 * C1015) *
                C92226) *
               C92188 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92357 +
            (C15075 + C15076) * C92358 + C15081 * C14697) *
               C92188 * C92150 * C1969 -
           ((C17386 + C17387) * C14697 + (C17388 + C17389) * C92358 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92357) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C17389 + C17388) * C92357 + (C17387 + C17386) * C92358 +
            (C14780 * C879 - C15036 * C794 - C14780 * C1011 + C92333 * C1074 +
             C14781 * C883 - C15037 * C801 - C14781 * C1015 + C92226 * C1081) *
                C14697) *
               C92188 * C92150 * C1970 -
           ((C15079 + C15080) * C14697 + (C15078 + C15077) * C92358 +
            (C15076 + C15075) * C92357) *
               C92188 * C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C92188 * C266 - C265 * C108) * C14780 +
                      (C92188 * C495 - C265 * C348) * C92333 +
                      (C5039 - C5040) * C14781 + (C5334 - C5335) * C92226) *
                         C92357 +
                     ((C279 - C280) * C14780 + (C502 - C503) * C92333 +
                      C6732 * C14781 + C7073 * C92226) *
                         C92358 +
                     C15163 * C14697) *
                        C92150 * C1969 +
                    (((C5040 - C5039) * C14780 + (C5335 - C5334) * C92333 +
                      (C5044 - C5043) * C14781 + (C5337 - C5336) * C92226) *
                         C92357 +
                     (C6734 * C14780 + C7074 * C92333 + C6736 * C14781 +
                      C7075 * C92226) *
                         C92358 +
                     (C17152 * C14780 + C17488 * C92333 +
                      (C4212 - C4213) * C14781 + (C4485 - C4486) * C92226) *
                         C14697) *
                        C92150 * C1970) *
                       C1971 +
                   ((((C280 - C279) * C14780 + (C503 - C502) * C92333 +
                      C6734 * C14781 + C7074 * C92226) *
                         C92357 +
                     ((C284 - C283) * C14780 + (C506 - C505) * C92333 +
                      C17152 * C14781 + C17488 * C92226) *
                         C92358 +
                     ((C288 - C287) * C14780 + (C509 - C508) * C92333 +
                      (C2134 - C2135) * C14781 + (C2365 - C2366) * C92226) *
                         C14697) *
                        C92150 * C1969 +
                    ((C6732 * C14780 + C7073 * C92333 + C5047 * C14781 +
                      C5338 * C92226) *
                         C92357 +
                     (C14887 * C14780 + C15159 * C92333 +
                      (C4213 - C4212) * C14781 + (C4486 - C4485) * C92226) *
                         C92358 +
                     ((C2135 - C2134) * C14780 + (C2366 - C2365) * C92333 +
                      (C92188 * C949 - C265 * C801) * C14781 +
                      (C92188 * C1139 - C265 * C1015) * C92226) *
                         C14697) *
                        C92150 * C1970) *
                       C1972)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C265 +
             (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
              C14697 * C575 - C14704 * C569) *
                 C92188) *
                C92333 +
            ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
             (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C265 +
             (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92188) *
                C92333 +
            ((C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C265 +
             (C16001 - C16002 + C16003 - C16004 + C16005 - C16006) * C92188) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
              C14704 * C111 - C14697 * C120) *
                 C265 +
             (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
              C14704 * C570 - C14697 * C576) *
                 C92188) *
                C92333 +
            ((C17252 - C17253 + C17254 - C17255 + C17256 - C17257) * C265 +
             (C17587 - C17588 + C17589 - C17590 + C17591 - C17592) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C17253 - C17252 + C17255 - C17254 + C17257 - C17256) * C265 +
             (C17588 - C17587 + C17590 - C17589 + C17592 - C17591) * C92188) *
                C92333 +
            ((C92357 * C812 - C14700 * C799 + C92358 * C814 - C14702 * C800 +
              C14697 * C816 - C14704 * C801) *
                 C265 +
             (C92357 * C1203 - C14700 * C1195 + C92358 * C1204 -
              C14702 * C1196 + C14697 * C1205 - C14704 * C1197) *
                 C92188) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C265 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92188) *
                C92357 +
            ((C14783 - C14784 + C14785 - C14786) * C265 +
             (C15312 - C15313 + C15314 - C15315) * C92188) *
                C92358 +
            C15329 * C14697) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C265 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C92357 +
            ((C17038 - C17039 + C17040 - C17041) * C265 +
             (C17691 - C17692 + C17693 - C17694) * C92188) *
                C92358 +
            ((C17046 - C17047 + C17048 - C17049) * C265 +
             (C17695 - C17696 + C17697 - C17698) * C92188) *
                C14697) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C265 +
             (C15313 - C15312 + C15315 - C15314) * C92188) *
                C92357 +
            ((C14792 - C14791 + C14794 - C14793) * C265 +
             (C15318 - C15317 + C15320 - C15319) * C92188) *
                C92358 +
            ((C14799 - C14800 + C14801 - C14802) * C265 +
             (C15321 - C15322 + C15323 - C15324) * C92188) *
                C14697) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C265 +
             (C17692 - C17691 + C17694 - C17693) * C92188) *
                C92357 +
            ((C17047 - C17046 + C17049 - C17048) * C265 +
             (C17696 - C17695 + C17698 - C17697) * C92188) *
                C92358 +
            ((C92333 * C879 - C14780 * C794 + C92226 * C883 - C14781 * C801) *
                 C265 +
             (C92333 * C1259 - C14780 * C1193 + C92226 * C1263 -
              C14781 * C1197) *
                 C92188) *
                C14697) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92333 +
             C5624 * C92226) *
                C92357 +
            (C15404 + C15405) * C92358 + C15410 * C14697) *
               C92150 * C1969 -
           ((C17797 + C17798) * C14697 + (C17799 + C17800) * C92358 +
            (C5625 * C92226 + C5624 * C92333) * C92357) *
               C92150 * C1970) *
              C1971 +
          (((C17800 + C17799) * C92357 + (C17798 + C17797) * C92358 +
            (C2593 * C92333 +
             (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                 C92226) *
                C14697) *
               C92150 * C1970 -
           ((C15408 + C15409) * C14697 + (C15407 + C15406) * C92358 +
            (C15405 + C15404) * C92357) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92188 * C92333 +
            (C15521 + C15522 + C15523) * C92188 * C92226) *
               C2664 -
           ((C18868 + C18869 + C18870) * C92188 * C92226 +
            (C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400 +
             C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
             C14700 * C1389 - C14701 * C1378 - C14700 * C1390 +
             C92357 * C1402) *
                C92188 * C92333) *
               C2665) *
              C1969 +
          (((C18870 + C18869 + C18868) * C92188 * C92333 +
            (C14700 * C5709 - C14701 * C5702 - C14700 * C5710 + C92357 * C5720 +
             C14702 * C5707 - C14703 * C5701 - C14702 * C5708 + C92358 * C5719 +
             C14704 * C7489 - C14705 * C7488 - C14704 * C7490 +
             C14697 * C7491) *
                C92188 * C92226) *
               C2665 -
           ((C15524 + C15525 + C15526) * C92188 * C92226 +
            (C15523 + C15522 + C15521) * C92188 * C92333) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C14700 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92357 +
            (C14783 - C14784 + C14785 - C14786) * C14702 +
            (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
            C14812 * C14697) *
               C92188 * C2664 +
           ((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 -
             C92226 * C3439) *
                C14700 +
            (C14780 * C1390 - C92333 * C1465 + C14781 * C3362 -
             C92226 * C3443) *
                C92357 +
            (C17997 - C17998 + C17999 - C18000) * C14702 +
            (C18001 - C18002 + C18003 - C18004) * C92358 +
            (C18005 - C18006 + C18007 - C18008) * C14704 +
            (C18009 - C18010 + C18011 - C18012) * C14697) *
               C92188 * C2665) *
              C1969 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C14700 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92357 +
            (C17038 - C17039 + C17040 - C17041) * C14702 +
            (C17042 - C17043 + C17044 - C17045) * C92358 +
            (C17046 - C17047 + C17048 - C17049) * C14704 +
            (C17050 - C17051 + C17052 - C17053) * C14697) *
               C92188 * C2664 +
           ((C92333 * C3439 - C14780 * C3357 + C92226 * C5799 -
             C14781 * C5702) *
                C14700 +
            (C92333 * C3443 - C14780 * C3362 + C92226 * C5805 -
             C14781 * C5710) *
                C92357 +
            (C92333 * C3440 - C14780 * C3358 + C92226 * C5800 -
             C14781 * C5701) *
                C14702 +
            (C92333 * C3444 - C14780 * C3364 + C92226 * C5806 -
             C14781 * C5708) *
                C92358 +
            (C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
             C14781 * C7488) *
                C14704 +
            (C92333 * C3445 - C14780 * C3366 + C92226 * C7591 -
             C14781 * C7490) *
                C14697) *
               C92188 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C14700 +
             (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
             (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
                C92333 +
            ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
             C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
             C14888 * C14697) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C14700 +
             (C265 * C1390 - C92188 * C1531) * C92357 +
             (C2819 - C2820) * C14702 + (C2821 - C2822) * C92358 +
             (C2823 - C2824) * C14704 + (C2825 - C2826) * C14697) *
                C92333 +
            ((C8695 - C8696) * C14700 + (C8697 - C8698) * C92357 +
             (C7705 - C7706) * C14702 + (C7707 - C7708) * C92358 +
             (C18111 - C18112) * C14704 + (C18113 - C18114) * C14697) *
                C92226) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C14700 + (C5042 - C5041) * C92357 +
             C6734 * C14702 + C6735 * C92358 + C17152 * C14704 +
             C17153 * C14697) *
                C92333 +
            ((C5044 - C5043) * C14700 + (C5046 - C5045) * C92357 +
             C6736 * C14702 + C6737 * C92358 + (C4212 - C4213) * C14704 +
             (C4214 - C4215) * C14697) *
                C92226) *
               C2664 +
           (((C8696 - C8695) * C14700 + (C8698 - C8697) * C92357 +
             (C7706 - C7705) * C14702 + (C7708 - C7707) * C92358 +
             (C18112 - C18111) * C14704 + (C18114 - C18113) * C14697) *
                C92333 +
            ((C8700 - C8699) * C14700 + (C8702 - C8701) * C92357 +
             (C7710 - C7709) * C14702 + (C7712 - C7711) * C92358 +
             (C92188 * C7702 - C265 * C7488) * C14704 +
             (C92188 * C7703 - C265 * C7490) * C14697) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C14780 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92333 +
            (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
            (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
               C92188 * C2664 +
           ((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 - C92358 * C1387 +
             C14704 * C1376 - C14697 * C1385) *
                C14780 +
            (C14700 * C1589 - C92357 * C1597 + C14702 * C1590 - C92358 * C1598 +
             C14704 * C1591 - C14697 * C1599) *
                C92333 +
            (C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C14781 +
            (C19171 - C19172 + C19173 - C19174 + C19175 - C19176) * C92226) *
               C92188 * C2665) *
              C1969 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C14780 +
            (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92333 +
            (C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C14781 +
            (C15767 - C15768 + C15769 - C15770 + C15771 - C15772) * C92226) *
               C92188 * C2664 +
           ((C19166 - C19165 + C19168 - C19167 + C19170 - C19169) * C14780 +
            (C19172 - C19171 + C19174 - C19173 + C19176 - C19175) * C92333 +
            (C92357 * C5709 - C14700 * C5702 + C92358 * C5707 - C14702 * C5701 +
             C14697 * C7489 - C14704 * C7488) *
                C14781 +
            (C92357 * C5977 - C14700 * C5971 + C92358 * C5978 - C14702 * C5972 +
             C14697 * C7811 - C14704 * C7810) *
                C92226) *
               C92188 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92357 +
            (C15075 + C15076) * C92358 + C15081 * C14697) *
               C92188 * C2664 -
           ((C18335 + C18336) * C14697 + (C18337 + C18338) * C92358 +
            (C14781 * C3439 - C15037 * C3357 - C14781 * C3587 + C92226 * C3661 +
             C14780 * C1457 - C15036 * C1378 - C14780 * C1589 +
             C92333 * C1658) *
                C92357) *
               C92188 * C2665) *
              C1969 +
          (((C14780 * C3439 - C15036 * C3357 - C14780 * C3587 + C92333 * C3661 +
             C14781 * C5799 - C15037 * C5702 - C14781 * C5971 +
             C92226 * C6058) *
                C92357 +
            (C14780 * C3440 - C15036 * C3358 - C14780 * C3588 + C92333 * C3662 +
             C14781 * C5800 - C15037 * C5701 - C14781 * C5972 +
             C92226 * C6057) *
                C92358 +
            (C14780 * C3441 - C15036 * C3359 - C14780 * C3589 + C92333 * C3663 +
             C14781 * C7590 - C15037 * C7488 - C14781 * C7810 +
             C92226 * C7910) *
                C14697) *
               C92188 * C2665 -
           ((C17386 + C17387) * C14697 + (C17388 + C17389) * C92358 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92357) *
               C92188 * C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C92188 * C266 - C265 * C108) * C14780 +
                      (C92188 * C495 - C265 * C348) * C92333 +
                      (C5039 - C5040) * C14781 + (C5334 - C5335) * C92226) *
                         C92357 +
                     ((C279 - C280) * C14780 + (C502 - C503) * C92333 +
                      C6732 * C14781 + C7073 * C92226) *
                         C92358 +
                     C15163 * C14697) *
                        C2664 +
                    (((C265 * C1378 - C92188 * C1523) * C14780 +
                      (C265 * C1589 - C92188 * C1713) * C92333 +
                      (C8695 - C8696) * C14781 + (C9021 - C9022) * C92226) *
                         C92357 +
                     ((C2819 - C2820) * C14780 + (C3054 - C3055) * C92333 +
                      (C7705 - C7706) * C14781 + (C8032 - C8033) * C92226) *
                         C92358 +
                     ((C2823 - C2824) * C14780 + (C3056 - C3057) * C92333 +
                      (C18111 - C18112) * C14781 + (C18437 - C18438) * C92226) *
                         C14697) *
                        C2665) *
                       C1969 +
                   ((((C5040 - C5039) * C14780 + (C5335 - C5334) * C92333 +
                      (C5044 - C5043) * C14781 + (C5337 - C5336) * C92226) *
                         C92357 +
                     (C6734 * C14780 + C7074 * C92333 + C6736 * C14781 +
                      C7075 * C92226) *
                         C92358 +
                     (C17152 * C14780 + C17488 * C92333 +
                      (C4212 - C4213) * C14781 + (C4485 - C4486) * C92226) *
                         C14697) *
                        C2664 +
                    (((C8696 - C8695) * C14780 + (C9022 - C9021) * C92333 +
                      (C8700 - C8699) * C14781 + (C9024 - C9023) * C92226) *
                         C92357 +
                     ((C7706 - C7705) * C14780 + (C8033 - C8032) * C92333 +
                      (C7710 - C7709) * C14781 + (C8035 - C8034) * C92226) *
                         C92358 +
                     ((C18112 - C18111) * C14780 + (C18438 - C18437) * C92333 +
                      (C92188 * C7702 - C265 * C7488) * C14781 +
                      (C92188 * C8030 - C265 * C7810) * C92226) *
                         C14697) *
                        C2665) *
                       C1970) *
                  C92124) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C265 +
             (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
              C14697 * C575 - C14704 * C569) *
                 C92188) *
                C92333 +
            ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
             (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
                C92226) *
               C2664 +
           (((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 -
              C92358 * C1387 + C14704 * C1376 - C14697 * C1385) *
                 C265 +
             (C14700 * C1771 - C92357 * C1779 + C14702 * C1772 -
              C92358 * C1780 + C14704 * C1773 - C14697 * C1781) *
                 C92188) *
                C92333 +
            ((C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C265 +
             (C19471 - C19472 + C19473 - C19474 + C19475 - C19476) * C92188) *
                C92226) *
               C2665) *
              C1969 +
          ((((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C265 +
             (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92188) *
                C92333 +
            ((C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C265 +
             (C16001 - C16002 + C16003 - C16004 + C16005 - C16006) * C92188) *
                C92226) *
               C2664 +
           (((C19166 - C19165 + C19168 - C19167 + C19170 - C19169) * C265 +
             (C19472 - C19471 + C19474 - C19473 + C19476 - C19475) * C92188) *
                C92333 +
            ((C92357 * C5709 - C14700 * C5702 + C92358 * C5707 -
              C14702 * C5701 + C14697 * C7489 - C14704 * C7488) *
                 C265 +
             (C92357 * C6223 - C14700 * C6217 + C92358 * C6224 -
              C14702 * C6218 + C14697 * C8134 - C14704 * C8133) *
                 C92188) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C265 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92188) *
                C92357 +
            ((C14783 - C14784 + C14785 - C14786) * C265 +
             (C15312 - C15313 + C15314 - C15315) * C92188) *
                C92358 +
            C15329 * C14697) *
               C2664 +
           (((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C14780 * C1771 - C92333 * C1837 + C14781 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C92357 +
            ((C17997 - C17998 + C17999 - C18000) * C265 +
             (C18635 - C18636 + C18637 - C18638) * C92188) *
                C92358 +
            ((C18005 - C18006 + C18007 - C18008) * C265 +
             (C18639 - C18640 + C18641 - C18642) * C92188) *
                C14697) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C265 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C92357 +
            ((C17038 - C17039 + C17040 - C17041) * C265 +
             (C17691 - C17692 + C17693 - C17694) * C92188) *
                C92358 +
            ((C17046 - C17047 + C17048 - C17049) * C265 +
             (C17695 - C17696 + C17697 - C17698) * C92188) *
                C14697) *
               C2664 +
           (((C92333 * C3439 - C14780 * C3357 + C92226 * C5799 -
              C14781 * C5702) *
                 C265 +
             (C92333 * C3875 - C14780 * C3801 + C92226 * C6303 -
              C14781 * C6217) *
                 C92188) *
                C92357 +
            ((C92333 * C3440 - C14780 * C3358 + C92226 * C5800 -
              C14781 * C5701) *
                 C265 +
             (C92333 * C3876 - C14780 * C3802 + C92226 * C6304 -
              C14781 * C6218) *
                 C92188) *
                C92358 +
            ((C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
              C14781 * C7488) *
                 C265 +
             (C92333 * C3877 - C14780 * C3803 + C92226 * C8233 -
              C14781 * C8133) *
                 C92188) *
                C14697) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92333 +
             C5624 * C92226) *
                C92357 +
            (C15404 + C15405) * C92358 + C15410 * C14697) *
               C2664 -
           ((C18751 + C18745) * C14697 + (C18746 + C18747) * C92358 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C92333) *
                C92357) *
               C2665) *
              C1969 +
          (((C9348 * C92333 + C9347 * C92226) * C92357 +
            (C8354 * C92333 + C8353 * C92226) * C92358 +
            (C18750 * C92333 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C92226) *
                C14697) *
               C2665 -
           ((C17797 + C17798) * C14697 + (C17799 + C17800) * C92358 +
            (C5625 * C92226 + C5624 * C92333) * C92357) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92188 * C92333 +
           (C15521 + C15522 + C15523) * C92188 * C92226) *
              C92150 * C790 -
          ((C15524 + C15525 + C15526) * C92188 * C92226 +
           (C15523 + C15522 + C15521) * C92188 * C92333) *
              C92150 * C791 +
          ((C15526 + C15525 + C15524) * C92188 * C92333 +
           (C14700 * C4820 - C14701 * C4815 - C14700 * C4821 + C92357 * C4827 +
            C14702 * C4818 - C14703 * C4814 - C14702 * C4819 + C92358 * C4826 +
            C14704 * C6488 - C14705 * C6487 - C14704 * C6489 + C14697 * C6490) *
               C92188 * C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92188 * C92333 +
           (C14700 * C808 - C14701 * C797 - C14700 * C809 + C92357 * C821 +
            C14702 * C806 - C14703 * C796 - C14702 * C807 + C92358 * C820 +
            C14704 * C804 - C14705 * C795 - C14704 * C805 + C14697 * C819) *
               C92188 * C92226) *
              C92150 * C92136 * C97 -
          ((C14704 * C802 - C14705 * C794 - C14704 * C803 + C14697 * C818 +
            C14702 * C804 - C14703 * C795 - C14702 * C805 + C92358 * C819 +
            C14700 * C806 - C14701 * C796 - C14700 * C807 + C92357 * C820) *
               C92188 * C92226 +
           (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
            C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
            C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
               C92188 * C92333) *
              C92150 * C92136 * C98 +
          ((C14700 * C118 - C14701 * C110 - C14700 * C119 + C92357 * C128 +
            C14702 * C120 - C14703 * C111 - C14702 * C121 + C92358 * C129 +
            C14704 * C122 - C14705 * C112 - C14704 * C123 + C14697 * C130) *
               C92188 * C92333 +
           (C14700 * C804 - C14701 * C795 - C14700 * C805 + C92357 * C819 +
            C14702 * C802 - C14703 * C794 - C14702 * C803 + C92358 * C818 +
            C14704 * C1974 - C14705 * C1973 - C14704 * C1975 + C14697 * C1976) *
               C92188 * C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92188 * C92333 +
           (C15521 + C15522 + C15523) * C92188 * C92226) *
              C1372 -
          ((C14704 * C3365 - C14705 * C3359 - C14704 * C3366 + C14697 * C3371 +
            C14702 * C3363 - C14703 * C3358 - C14702 * C3364 + C92358 * C3370 +
            C14700 * C3361 - C14701 * C3357 - C14700 * C3362 + C92357 * C3369) *
               C92188 * C92226 +
           (C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400 +
            C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
            C14700 * C1389 - C14701 * C1378 - C14700 * C1390 + C92357 * C1402) *
               C92188 * C92333) *
              C1373 +
          ((C14700 * C1391 - C14701 * C1379 - C14700 * C1392 + C92357 * C1403 +
            C14702 * C1393 - C14703 * C1380 - C14702 * C1394 + C92358 * C1404 +
            C14704 * C1395 - C14705 * C1381 - C14704 * C1396 + C14697 * C1405) *
               C92188 * C92333 +
           (C14700 * C5711 - C14701 * C5703 - C14700 * C5712 + C92357 * C5721 +
            C14702 * C5713 - C14703 * C5704 - C14702 * C5714 + C92358 * C5722 +
            C14704 * C11785 - C14705 * C11784 - C14704 * C11786 +
            C14697 * C11787) *
               C92188 * C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C14700 +
           (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
               C92357 +
           (C14783 - C14784 + C14785 - C14786) * C14702 +
           (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
           C14812 * C14697) *
              C92188 * C92150 * C790 +
          ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
               C14700 +
           (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
               C92357 +
           (C14780 * C796 - C92333 * C877 + C14781 * C799 - C92226 * C881) *
               C14702 +
           (C14780 * C807 - C92333 * C885 + C14781 * C813 - C92226 * C889) *
               C92358 +
           (C14780 * C795 - C92333 * C878 + C14781 * C800 - C92226 * C882) *
               C14704 +
           (C14780 * C805 - C92333 * C886 + C14781 * C815 - C92226 * C890) *
               C14697) *
              C92188 * C92150 * C791 +
          ((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
               C14700 +
           (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
               C92357 +
           (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
               C14702 +
           (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
               C92358 +
           (C92333 * C882 - C14780 * C800 + C92226 * C6617 - C14781 * C6487) *
               C14704 +
           (C92333 * C890 - C14780 * C815 + C92226 * C6618 - C14781 * C6489) *
               C14697) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C14700 +
           (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
               C92357 +
           (C14783 - C14784 + C14785 - C14786) * C14702 +
           (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
           C14812 * C14697) *
              C92188 * C92150 * C92136 * C97 +
          ((C14784 - C14783 + C14786 - C14785) * C14700 +
           (C14788 - C14787 + C14790 - C14789) * C92357 +
           (C14792 - C14791 + C14794 - C14793) * C14702 +
           (C14796 - C14795 + C14798 - C14797) * C92358 +
           (C14799 - C14800 + C14801 - C14802) * C14704 +
           (C14803 - C14804 + C14805 - C14806) * C14697) *
              C92188 * C92150 * C92136 * C98 +
          (C14811 * C14700 + C14812 * C92357 +
           (C14800 - C14799 + C14802 - C14801) * C14702 +
           (C14804 - C14803 + C14806 - C14805) * C92358 +
           (C92333 * C187 - C14780 * C112 + C92226 * C2043 - C14781 * C1973) *
               C14704 +
           (C92333 * C193 - C14780 * C123 + C92226 * C2044 - C14781 * C1975) *
               C14697) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C14700 +
           (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
               C92357 +
           (C14783 - C14784 + C14785 - C14786) * C14702 +
           (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
           C14812 * C14697) *
              C92188 * C1372 +
          ((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 - C92226 * C3439) *
               C14700 +
           (C14780 * C1390 - C92333 * C1465 + C14781 * C3362 - C92226 * C3443) *
               C92357 +
           (C14780 * C1377 - C92333 * C1458 + C14781 * C3358 - C92226 * C3440) *
               C14702 +
           (C14780 * C1388 - C92333 * C1466 + C14781 * C3364 - C92226 * C3444) *
               C92358 +
           (C14780 * C1376 - C92333 * C1459 + C14781 * C3359 - C92226 * C3441) *
               C14704 +
           (C14780 * C1386 - C92333 * C1467 + C14781 * C3366 - C92226 * C3445) *
               C14697) *
              C92188 * C1373 +
          ((C92333 * C1461 - C14780 * C1379 + C92226 * C5801 - C14781 * C5703) *
               C14700 +
           (C92333 * C1469 - C14780 * C1392 + C92226 * C5807 - C14781 * C5712) *
               C92357 +
           (C92333 * C1462 - C14780 * C1380 + C92226 * C5803 - C14781 * C5704) *
               C14702 +
           (C92333 * C1470 - C14780 * C1394 + C92226 * C5809 - C14781 * C5714) *
               C92358 +
           (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
            C14781 * C11784) *
               C14704 +
           (C92333 * C1471 - C14780 * C1396 + C92226 * C11887 -
            C14781 * C11786) *
               C14697) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14700 +
            (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
            (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
               C92333 +
           ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
            C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
            C14888 * C14697) *
               C92226) *
              C92150 * C790 +
          (((C5040 - C5039) * C14700 + (C5042 - C5041) * C92357 +
            C6734 * C14702 + C6735 * C92358 + (C2130 - C2131) * C14704 +
            (C2132 - C2133) * C14697) *
               C92333 +
           ((C5044 - C5043) * C14700 + (C5046 - C5045) * C92357 +
            C6736 * C14702 + C6737 * C92358 + (C4212 - C4213) * C14704 +
            (C4214 - C4215) * C14697) *
               C92226) *
              C92150 * C791 +
          ((C5057 * C14700 + C5058 * C92357 + C5047 * C14702 + C5048 * C92358 +
            (C4213 - C4212) * C14704 + (C4215 - C4214) * C14697) *
               C92333 +
           ((C5050 - C5049) * C14700 + (C5052 - C5051) * C92357 +
            (C5054 - C5053) * C14702 + (C5056 - C5055) * C92358 +
            (C92188 * C6729 - C265 * C6487) * C14704 +
            (C92188 * C6730 - C265 * C6489) * C14697) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14700 +
            (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
            (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
               C92333 +
           ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
            C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
            C14888 * C14697) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C14700 + (C282 - C281) * C92357 +
            (C284 - C283) * C14702 + (C286 - C285) * C92358 +
            (C288 - C287) * C14704 + (C290 - C289) * C14697) *
               C92333 +
           (C6734 * C14700 + C6735 * C92357 + (C2130 - C2131) * C14702 +
            (C2132 - C2133) * C92358 + (C2134 - C2135) * C14704 +
            (C2136 - C2137) * C14697) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C295 * C14700 + C296 * C92357 + C297 * C14702 + C298 * C92358 +
            (C292 - C291) * C14704 + (C294 - C293) * C14697) *
               C92333 +
           (C14887 * C14700 + C14888 * C92357 + (C2135 - C2134) * C14702 +
            (C2137 - C2136) * C92358 +
            (C92188 * C2123 - C265 * C1973) * C14704 +
            (C92188 * C2124 - C265 * C1975) * C14697) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14700 +
            (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
            (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
               C92333 +
           ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
            C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
            C14888 * C14697) *
               C92226) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C14700 +
            (C265 * C1390 - C92188 * C1531) * C92357 +
            (C2819 - C2820) * C14702 + (C2821 - C2822) * C92358 +
            (C2823 - C2824) * C14704 + (C2825 - C2826) * C14697) *
               C92333 +
           ((C8695 - C8696) * C14700 + (C8697 - C8698) * C92357 +
            (C7705 - C7706) * C14702 + (C7707 - C7708) * C92358 +
            (C265 * C3359 - C92188 * C3515) * C14704 +
            (C265 * C3366 - C92188 * C3519) * C14697) *
               C92226) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C14700 +
            (C92188 * C1535 - C265 * C1392) * C92357 +
            (C92188 * C1528 - C265 * C1380) * C14702 +
            (C92188 * C1536 - C265 * C1394) * C92358 +
            (C92188 * C1529 - C265 * C1381) * C14704 +
            (C92188 * C1537 - C265 * C1396) * C14697) *
               C92333 +
           ((C92188 * C5887 - C265 * C5703) * C14700 +
            (C92188 * C5893 - C265 * C5712) * C92357 +
            (C92188 * C5888 - C265 * C5704) * C14702 +
            (C92188 * C5894 - C265 * C5714) * C92358 +
            (C92188 * C11994 - C265 * C11784) * C14704 +
            (C92188 * C11995 - C265 * C11786) * C14697) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C14780 +
           (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
            C14697 * C356 - C14704 * C350) *
               C92333 +
           (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
           (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
              C92188 * C92150 * C790 +
          ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C14780 +
           (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92333 +
           (C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C14781 +
           (C15767 - C15768 + C15769 - C15770 + C15771 - C15772) * C92226) *
              C92188 * C92150 * C791 +
          ((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C14780 +
           (C15768 - C15767 + C15770 - C15769 + C15772 - C15771) * C92333 +
           (C92357 * C4820 - C14700 * C4815 + C92358 * C4818 - C14702 * C4814 +
            C14697 * C6488 - C14704 * C6487) *
               C14781 +
           (C92357 * C5143 - C14700 * C5139 + C92358 * C5144 - C14702 * C5140 +
            C14697 * C6836 - C14704 * C6835) *
               C92226) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C14780 +
           (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
            C14697 * C356 - C14704 * C350) *
               C92333 +
           (C92357 * C808 - C14700 * C797 + C92358 * C806 - C14702 * C796 +
            C14697 * C804 - C14704 * C795) *
               C14781 +
           (C92357 * C1016 - C14700 * C1008 + C92358 * C1017 - C14702 * C1009 +
            C14697 * C1018 - C14704 * C1010) *
               C92226) *
              C92188 * C92150 * C92136 * C97 +
          ((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
            C14704 * C111 - C14697 * C120) *
               C14780 +
           (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
            C14704 * C351 - C14697 * C357) *
               C92333 +
           (C14700 * C796 - C92357 * C806 + C14702 * C795 - C92358 * C804 +
            C14704 * C794 - C14697 * C802) *
               C14781 +
           (C14700 * C1009 - C92357 * C1017 + C14702 * C1010 - C92358 * C1018 +
            C14704 * C1011 - C14697 * C1019) *
               C92226) *
              C92188 * C92150 * C92136 * C98 +
          ((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
            C14697 * C122 - C14704 * C112) *
               C14780 +
           (C92357 * C356 - C14700 * C350 + C92358 * C357 - C14702 * C351 +
            C14697 * C358 - C14704 * C352) *
               C92333 +
           (C92357 * C804 - C14700 * C795 + C92358 * C802 - C14702 * C794 +
            C14697 * C1974 - C14704 * C1973) *
               C14781 +
           (C92357 * C1018 - C14700 * C1010 + C92358 * C1019 - C14702 * C1011 +
            C14697 * C2204 - C14704 * C2203) *
               C92226) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C14780 +
           (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
            C14697 * C356 - C14704 * C350) *
               C92333 +
           (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
           (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
              C92188 * C1372 +
          ((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 - C92358 * C1387 +
            C14704 * C1376 - C14697 * C1385) *
               C14780 +
           (C14700 * C1589 - C92357 * C1597 + C14702 * C1590 - C92358 * C1598 +
            C14704 * C1591 - C14697 * C1599) *
               C92333 +
           (C14700 * C3357 - C92357 * C3361 + C14702 * C3358 - C92358 * C3363 +
            C14704 * C3359 - C14697 * C3365) *
               C14781 +
           (C14700 * C3587 - C92357 * C3591 + C14702 * C3588 - C92358 * C3592 +
            C14704 * C3589 - C14697 * C3593) *
               C92226) *
              C92188 * C1373 +
          ((C92357 * C1391 - C14700 * C1379 + C92358 * C1393 - C14702 * C1380 +
            C14697 * C1395 - C14704 * C1381) *
               C14780 +
           (C92357 * C1601 - C14700 * C1593 + C92358 * C1602 - C14702 * C1594 +
            C14697 * C1603 - C14704 * C1595) *
               C92333 +
           (C92357 * C5711 - C14700 * C5703 + C92358 * C5713 - C14702 * C5704 +
            C14697 * C11785 - C14704 * C11784) *
               C14781 +
           (C92357 * C5979 - C14700 * C5973 + C92358 * C5980 - C14702 * C5974 +
            C14697 * C12107 - C14704 * C12106) *
               C92226) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92357 +
           (C15075 + C15076) * C92358 + C15081 * C14697) *
              C92188 * C92150 * C790 -
          ((C14781 * C882 - C15037 * C800 - C14781 * C1014 + C92226 * C1080 +
            C14780 * C878 - C15036 * C795 - C14780 * C1010 + C92333 * C1075) *
               C14697 +
           (C14781 * C881 - C15037 * C799 - C14781 * C1013 + C92226 * C1079 +
            C14780 * C877 - C15036 * C796 - C14780 * C1009 + C92333 * C1076) *
               C92358 +
           (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
            C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
               C92357) *
              C92188 * C92150 * C791 +
          ((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
            C14781 * C4948 - C15037 * C4815 - C14781 * C5139 + C92226 * C5252) *
               C92357 +
           (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
            C14781 * C4949 - C15037 * C4814 - C14781 * C5140 + C92226 * C5251) *
               C92358 +
           (C14780 * C882 - C15036 * C800 - C14780 * C1014 + C92333 * C1080 +
            C14781 * C6617 - C15037 * C6487 - C14781 * C6835 + C92226 * C6951) *
               C14697) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92357 +
           (C15075 + C15076) * C92358 + C15081 * C14697) *
              C92188 * C92150 * C92136 * C97 -
          ((C15079 + C15080) * C14697 + (C15078 + C15077) * C92358 +
           (C15076 + C15075) * C92357) *
              C92188 * C92150 * C92136 * C98 +
          (C15081 * C92357 + (C15080 + C15079) * C92358 +
           (C14780 * C187 - C15036 * C112 - C14780 * C352 + C92333 * C415 +
            C14781 * C2043 - C15037 * C1973 - C14781 * C2203 + C92226 * C2271) *
               C14697) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92357 +
           (C15075 + C15076) * C92358 + C15081 * C14697) *
              C92188 * C1372 -
          ((C14781 * C3441 - C15037 * C3359 - C14781 * C3589 + C92226 * C3663 +
            C14780 * C1459 - C15036 * C1376 - C14780 * C1591 + C92333 * C1656) *
               C14697 +
           (C14781 * C3440 - C15037 * C3358 - C14781 * C3588 + C92226 * C3662 +
            C14780 * C1458 - C15036 * C1377 - C14780 * C1590 + C92333 * C1657) *
               C92358 +
           (C14781 * C3439 - C15037 * C3357 - C14781 * C3587 + C92226 * C3661 +
            C14780 * C1457 - C15036 * C1378 - C14780 * C1589 + C92333 * C1658) *
               C92357) *
              C92188 * C1373 +
          ((C14780 * C1461 - C15036 * C1379 - C14780 * C1593 + C92333 * C1659 +
            C14781 * C5801 - C15037 * C5703 - C14781 * C5973 + C92226 * C6059) *
               C92357 +
           (C14780 * C1462 - C15036 * C1380 - C14780 * C1594 + C92333 * C1660 +
            C14781 * C5803 - C15037 * C5704 - C14781 * C5974 + C92226 * C6061) *
               C92358 +
           (C14780 * C1463 - C15036 * C1381 - C14780 * C1595 + C92333 * C1661 +
            C14781 * C11886 - C15037 * C11784 - C14781 * C12106 +
            C92226 * C12206) *
               C14697) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14780 +
            (C92188 * C495 - C265 * C348) * C92333 + (C5039 - C5040) * C14781 +
            (C5334 - C5335) * C92226) *
               C92357 +
           ((C279 - C280) * C14780 + (C502 - C503) * C92333 + C6732 * C14781 +
            C7073 * C92226) *
               C92358 +
           C15163 * C14697) *
              C92150 * C790 +
          (((C5040 - C5039) * C14780 + (C5335 - C5334) * C92333 +
            (C5044 - C5043) * C14781 + (C5337 - C5336) * C92226) *
               C92357 +
           (C6734 * C14780 + C7074 * C92333 + C6736 * C14781 + C7075 * C92226) *
               C92358 +
           ((C2130 - C2131) * C14780 + (C2363 - C2364) * C92333 +
            (C4212 - C4213) * C14781 + (C4485 - C4486) * C92226) *
               C14697) *
              C92150 * C791 +
          ((C5057 * C14780 + C5343 * C92333 + (C5050 - C5049) * C14781 +
            (C5340 - C5339) * C92226) *
               C92357 +
           (C5047 * C14780 + C5338 * C92333 + (C5054 - C5053) * C14781 +
            (C5342 - C5341) * C92226) *
               C92358 +
           ((C4213 - C4212) * C14780 + (C4486 - C4485) * C92333 +
            (C92188 * C6729 - C265 * C6487) * C14781 +
            (C92188 * C7071 - C265 * C6835) * C92226) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14780 +
            (C92188 * C495 - C265 * C348) * C92333 + (C5039 - C5040) * C14781 +
            (C5334 - C5335) * C92226) *
               C92357 +
           ((C279 - C280) * C14780 + (C502 - C503) * C92333 + C6732 * C14781 +
            C7073 * C92226) *
               C92358 +
           C15163 * C14697) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C14780 + (C503 - C502) * C92333 + C6734 * C14781 +
            C7074 * C92226) *
               C92357 +
           ((C284 - C283) * C14780 + (C506 - C505) * C92333 +
            (C2130 - C2131) * C14781 + (C2363 - C2364) * C92226) *
               C92358 +
           ((C288 - C287) * C14780 + (C509 - C508) * C92333 +
            (C2134 - C2135) * C14781 + (C2365 - C2366) * C92226) *
               C14697) *
              C92150 * C92136 * C98 +
          (C15163 * C92357 +
           (C297 * C14780 + C513 * C92333 + (C2135 - C2134) * C14781 +
            (C2366 - C2365) * C92226) *
               C92358 +
           ((C292 - C291) * C14780 + (C511 - C510) * C92333 +
            (C92188 * C2123 - C265 * C1973) * C14781 +
            (C92188 * C2359 - C265 * C2203) * C92226) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14780 +
            (C92188 * C495 - C265 * C348) * C92333 + (C5039 - C5040) * C14781 +
            (C5334 - C5335) * C92226) *
               C92357 +
           ((C279 - C280) * C14780 + (C502 - C503) * C92333 + C6732 * C14781 +
            C7073 * C92226) *
               C92358 +
           C15163 * C14697) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C14780 +
            (C265 * C1589 - C92188 * C1713) * C92333 +
            (C8695 - C8696) * C14781 + (C9021 - C9022) * C92226) *
               C92357 +
           ((C2819 - C2820) * C14780 + (C3054 - C3055) * C92333 +
            (C7705 - C7706) * C14781 + (C8032 - C8033) * C92226) *
               C92358 +
           ((C2823 - C2824) * C14780 + (C3056 - C3057) * C92333 +
            (C265 * C3359 - C92188 * C3515) * C14781 +
            (C265 * C3589 - C92188 * C3733) * C92226) *
               C14697) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C14780 +
            (C92188 * C1717 - C265 * C1593) * C92333 +
            (C92188 * C5887 - C265 * C5703) * C14781 +
            (C92188 * C6139 - C265 * C5973) * C92226) *
               C92357 +
           ((C92188 * C1528 - C265 * C1380) * C14780 +
            (C92188 * C1718 - C265 * C1594) * C92333 +
            (C92188 * C5888 - C265 * C5704) * C14781 +
            (C92188 * C6141 - C265 * C5974) * C92226) *
               C92358 +
           ((C92188 * C1529 - C265 * C1381) * C14780 +
            (C92188 * C1719 - C265 * C1595) * C92333 +
            (C92188 * C11994 - C265 * C11784) * C14781 +
            (C92188 * C12319 - C265 * C12106) * C92226) *
               C14697) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C265 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92188) *
               C92333 +
           ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
            (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
               C92226) *
              C92150 * C790 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C265 +
            (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92188) *
               C92333 +
           ((C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C265 +
            (C16001 - C16002 + C16003 - C16004 + C16005 - C16006) * C92188) *
               C92226) *
              C92150 * C791 +
          (((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C265 +
            (C16002 - C16001 + C16004 - C16003 + C16006 - C16005) * C92188) *
               C92333 +
           ((C92357 * C4820 - C14700 * C4815 + C92358 * C4818 - C14702 * C4814 +
             C14697 * C6488 - C14704 * C6487) *
                C265 +
            (C92357 * C5421 - C14700 * C5417 + C92358 * C5422 - C14702 * C5418 +
             C14697 * C7174 - C14704 * C7173) *
                C92188) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C265 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92188) *
               C92333 +
           ((C92357 * C808 - C14700 * C797 + C92358 * C806 - C14702 * C796 +
             C14697 * C804 - C14704 * C795) *
                C265 +
            (C92357 * C1198 - C14700 * C1190 + C92358 * C1199 - C14702 * C1191 +
             C14697 * C1200 - C14704 * C1192) *
                C92188) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C265 +
            (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
             C14704 * C570 - C14697 * C576) *
                C92188) *
               C92333 +
           ((C14700 * C796 - C92357 * C806 + C14702 * C795 - C92358 * C804 +
             C14704 * C794 - C14697 * C802) *
                C265 +
            (C14700 * C1191 - C92357 * C1199 + C14702 * C1192 - C92358 * C1200 +
             C14704 * C1193 - C14697 * C1201) *
                C92188) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
             C14697 * C122 - C14704 * C112) *
                C265 +
            (C92357 * C575 - C14700 * C569 + C92358 * C576 - C14702 * C570 +
             C14697 * C577 - C14704 * C571) *
                C92188) *
               C92333 +
           ((C92357 * C804 - C14700 * C795 + C92358 * C802 - C14702 * C794 +
             C14697 * C1974 - C14704 * C1973) *
                C265 +
            (C92357 * C1200 - C14700 * C1192 + C92358 * C1201 - C14702 * C1193 +
             C14697 * C2433 - C14704 * C2432) *
                C92188) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C265 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92188) *
               C92333 +
           ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
            (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
               C92226) *
              C1372 +
          (((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 - C92358 * C1387 +
             C14704 * C1376 - C14697 * C1385) *
                C265 +
            (C14700 * C1771 - C92357 * C1779 + C14702 * C1772 - C92358 * C1780 +
             C14704 * C1773 - C14697 * C1781) *
                C92188) *
               C92333 +
           ((C14700 * C3357 - C92357 * C3361 + C14702 * C3358 - C92358 * C3363 +
             C14704 * C3359 - C14697 * C3365) *
                C265 +
            (C14700 * C3801 - C92357 * C3805 + C14702 * C3802 - C92358 * C3806 +
             C14704 * C3803 - C14697 * C3807) *
                C92188) *
               C92226) *
              C1373 +
          (((C92357 * C1391 - C14700 * C1379 + C92358 * C1393 - C14702 * C1380 +
             C14697 * C1395 - C14704 * C1381) *
                C265 +
            (C92357 * C1783 - C14700 * C1775 + C92358 * C1784 - C14702 * C1776 +
             C14697 * C1785 - C14704 * C1777) *
                C92188) *
               C92333 +
           ((C92357 * C5711 - C14700 * C5703 + C92358 * C5713 - C14702 * C5704 +
             C14697 * C11785 - C14704 * C11784) *
                C265 +
            (C92357 * C6225 - C14700 * C6219 + C92358 * C6226 - C14702 * C6220 +
             C14697 * C12425 - C14704 * C12424) *
                C92188) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C265 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92188) *
               C92357 +
           ((C14783 - C14784 + C14785 - C14786) * C265 +
            (C15312 - C15313 + C15314 - C15315) * C92188) *
               C92358 +
           C15329 * C14697) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C265 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92188) *
               C92357 +
           ((C14780 * C796 - C92333 * C877 + C14781 * C799 - C92226 * C881) *
                C265 +
            (C14780 * C1191 - C92333 * C1257 + C14781 * C1195 -
             C92226 * C1261) *
                C92188) *
               C92358 +
           ((C14780 * C795 - C92333 * C878 + C14781 * C800 - C92226 * C882) *
                C265 +
            (C14780 * C1192 - C92333 * C1258 + C14781 * C1196 -
             C92226 * C1262) *
                C92188) *
               C14697) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C265 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C92188) *
               C92357 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C265 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C92188) *
               C92358 +
           ((C92333 * C882 - C14780 * C800 + C92226 * C6617 - C14781 * C6487) *
                C265 +
            (C92333 * C1262 - C14780 * C1196 + C92226 * C7281 -
             C14781 * C7173) *
                C92188) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C265 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92188) *
               C92357 +
           ((C14783 - C14784 + C14785 - C14786) * C265 +
            (C15312 - C15313 + C15314 - C15315) * C92188) *
               C92358 +
           C15329 * C14697) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C265 +
            (C15313 - C15312 + C15315 - C15314) * C92188) *
               C92357 +
           ((C14792 - C14791 + C14794 - C14793) * C265 +
            (C15318 - C15317 + C15320 - C15319) * C92188) *
               C92358 +
           ((C14799 - C14800 + C14801 - C14802) * C265 +
            (C15321 - C15322 + C15323 - C15324) * C92188) *
               C14697) *
              C92150 * C92136 * C98 +
          (C15329 * C92357 +
           ((C14800 - C14799 + C14802 - C14801) * C265 +
            (C15322 - C15321 + C15324 - C15323) * C92188) *
               C92358 +
           ((C92333 * C187 - C14780 * C112 + C92226 * C2043 - C14781 * C1973) *
                C265 +
            (C92333 * C633 - C14780 * C571 + C92226 * C2500 - C14781 * C2432) *
                C92188) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C265 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92188) *
               C92357 +
           ((C14783 - C14784 + C14785 - C14786) * C265 +
            (C15312 - C15313 + C15314 - C15315) * C92188) *
               C92358 +
           C15329 * C14697) *
              C1372 +
          (((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 -
             C92226 * C3439) *
                C265 +
            (C14780 * C1771 - C92333 * C1837 + C14781 * C3801 -
             C92226 * C3875) *
                C92188) *
               C92357 +
           ((C14780 * C1377 - C92333 * C1458 + C14781 * C3358 -
             C92226 * C3440) *
                C265 +
            (C14780 * C1772 - C92333 * C1838 + C14781 * C3802 -
             C92226 * C3876) *
                C92188) *
               C92358 +
           ((C14780 * C1376 - C92333 * C1459 + C14781 * C3359 -
             C92226 * C3441) *
                C265 +
            (C14780 * C1773 - C92333 * C1839 + C14781 * C3803 -
             C92226 * C3877) *
                C92188) *
               C14697) *
              C1373 +
          (((C92333 * C1461 - C14780 * C1379 + C92226 * C5801 -
             C14781 * C5703) *
                C265 +
            (C92333 * C1841 - C14780 * C1775 + C92226 * C6305 -
             C14781 * C6219) *
                C92188) *
               C92357 +
           ((C92333 * C1462 - C14780 * C1380 + C92226 * C5803 -
             C14781 * C5704) *
                C265 +
            (C92333 * C1842 - C14780 * C1776 + C92226 * C6307 -
             C14781 * C6220) *
                C92188) *
               C92358 +
           ((C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
             C14781 * C11784) *
                C265 +
            (C92333 * C1843 - C14780 * C1777 + C92226 * C12524 -
             C14781 * C12424) *
                C92188) *
               C14697) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92333 +
            C5624 * C92226) *
               C92357 +
           (C15404 + C15405) * C92358 + C15410 * C14697) *
              C92150 * C790 -
          ((C4738 * C92226 + C2594 * C92333) * C14697 +
           (C4737 * C92226 + C2595 * C92333) * C92358 +
           (C5625 * C92226 + C5624 * C92333) * C92357) *
              C92150 * C791 +
          ((C5625 * C92333 + C5627 * C92226) * C92357 +
           (C4737 * C92333 + C5626 * C92226) * C92358 +
           (C4738 * C92333 +
            (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                C92226) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92333 +
            C5624 * C92226) *
               C92357 +
           (C15404 + C15405) * C92358 + C15410 * C14697) *
              C92150 * C92136 * C97 -
          ((C15408 + C15409) * C14697 + (C15407 + C15406) * C92358 +
           (C15405 + C15404) * C92357) *
              C92150 * C92136 * C98 +
          (C15410 * C92357 + (C15409 + C15408) * C92358 +
           (C736 * C92333 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92226) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92333 +
            C5624 * C92226) *
               C92357 +
           (C15404 + C15405) * C92358 + C15410 * C14697) *
              C1372 -
          (((C265 * C3515 - C701 * C3359 - C265 * C3803 + C92188 * C3947) *
                C92226 +
            C3287 * C92333) *
               C14697 +
           (C8354 * C92226 + C3288 * C92333) * C92358 +
           (C9348 * C92226 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92333) *
               C92357) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C92333 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C92226) *
               C92357 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C92333 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C92226) *
               C92358 +
           ((C265 * C1529 - C701 * C1381 - C265 * C1777 + C92188 * C1901) *
                C92333 +
            (C265 * C11994 - C701 * C11784 - C265 * C12424 + C92188 * C12627) *
                C92226) *
               C14697) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92188 * C92333 +
            (C15521 + C15522 + C15523) * C92188 * C92226) *
               C2664 -
           ((C14704 * C3365 - C14705 * C3359 - C14704 * C3366 + C14697 * C3371 +
             C14702 * C3363 - C14703 * C3358 - C14702 * C3364 + C92358 * C3370 +
             C14700 * C3361 - C14701 * C3357 - C14700 * C3362 +
             C92357 * C3369) *
                C92188 * C92226 +
            (C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400 +
             C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
             C14700 * C1389 - C14701 * C1378 - C14700 * C1390 +
             C92357 * C1402) *
                C92188 * C92333) *
               C2665) *
              C92136 * C1971 +
          (((C14700 * C1387 - C14701 * C1377 - C14700 * C1388 + C92357 * C1401 +
             C14702 * C1385 - C14703 * C1376 - C14702 * C1386 + C92358 * C1400 +
             C14704 * C1383 - C14705 * C1375 - C14704 * C1384 +
             C14697 * C1399) *
                C92188 * C92333 +
            (C14700 * C3363 - C14701 * C3358 - C14700 * C3364 + C92357 * C3370 +
             C14702 * C3365 - C14703 * C3359 - C14702 * C3366 + C92358 * C3371 +
             C14704 * C3367 - C14705 * C3360 - C14704 * C3368 +
             C14697 * C3372) *
                C92188 * C92226) *
               C2665 -
           ((C16939 + C16938 + C16937) * C92188 * C92226 +
            (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
             C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
             C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
                C92188 * C92333) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C14700 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92357 +
            (C14783 - C14784 + C14785 - C14786) * C14702 +
            (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
            C14812 * C14697) *
               C92188 * C2664 +
           ((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 -
             C92226 * C3439) *
                C14700 +
            (C14780 * C1390 - C92333 * C1465 + C14781 * C3362 -
             C92226 * C3443) *
                C92357 +
            (C17997 - C17998 + C17999 - C18000) * C14702 +
            (C18001 - C18002 + C18003 - C18004) * C92358 +
            (C18005 - C18006 + C18007 - C18008) * C14704 +
            (C18009 - C18010 + C18011 - C18012) * C14697) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C14784 - C14783 + C14786 - C14785) * C14700 +
            (C14788 - C14787 + C14790 - C14789) * C92357 +
            (C14792 - C14791 + C14794 - C14793) * C14702 +
            (C14796 - C14795 + C14798 - C14797) * C92358 +
            (C14799 - C14800 + C14801 - C14802) * C14704 +
            (C14803 - C14804 + C14805 - C14806) * C14697) *
               C92188 * C2664 +
           ((C17998 - C17997 + C18000 - C17999) * C14700 +
            (C18002 - C18001 + C18004 - C18003) * C92357 +
            (C18006 - C18005 + C18008 - C18007) * C14702 +
            (C18010 - C18009 + C18012 - C18011) * C92358 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C14704 +
            (C92333 * C1468 - C14780 * C1384 + C92226 * C3446 -
             C14781 * C3368) *
                C14697) *
               C92188 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C14700 +
             (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
             (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
                C92333 +
            ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
             C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
             C14888 * C14697) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C14700 +
             (C265 * C1390 - C92188 * C1531) * C92357 +
             (C2819 - C2820) * C14702 + (C2821 - C2822) * C92358 +
             (C2823 - C2824) * C14704 + (C2825 - C2826) * C14697) *
                C92333 +
            ((C8695 - C8696) * C14700 + (C8697 - C8698) * C92357 +
             (C7705 - C7706) * C14702 + (C7707 - C7708) * C92358 +
             (C18111 - C18112) * C14704 + (C18113 - C18114) * C14697) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C14700 + (C282 - C281) * C92357 +
             (C284 - C283) * C14702 + (C286 - C285) * C92358 +
             (C288 - C287) * C14704 + (C290 - C289) * C14697) *
                C92333 +
            (C6734 * C14700 + C6735 * C92357 + C17152 * C14702 +
             C17153 * C92358 + (C2134 - C2135) * C14704 +
             (C2136 - C2137) * C14697) *
                C92226) *
               C2664 +
           (((C2820 - C2819) * C14700 + (C2822 - C2821) * C92357 +
             (C2824 - C2823) * C14702 + (C2826 - C2825) * C92358 +
             (C2828 - C2827) * C14704 + (C2830 - C2829) * C14697) *
                C92333 +
            ((C7706 - C7705) * C14700 + (C7708 - C7707) * C92357 +
             (C18112 - C18111) * C14702 + (C18114 - C18113) * C92358 +
             (C92188 * C3516 - C265 * C3360) * C14704 +
             (C92188 * C3520 - C265 * C3368) * C14697) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C14780 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92333 +
            (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
            (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
               C92188 * C2664 +
           ((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 - C92358 * C1387 +
             C14704 * C1376 - C14697 * C1385) *
                C14780 +
            (C14700 * C1589 - C92357 * C1597 + C14702 * C1590 - C92358 * C1598 +
             C14704 * C1591 - C14697 * C1599) *
                C92333 +
            (C14700 * C3357 - C92357 * C3361 + C14702 * C3358 - C92358 * C3363 +
             C14704 * C3359 - C14697 * C3365) *
                C14781 +
            (C14700 * C3587 - C92357 * C3591 + C14702 * C3588 - C92358 * C3592 +
             C14704 * C3589 - C14697 * C3593) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C14780 +
            (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
             C14704 * C351 - C14697 * C357) *
                C92333 +
            (C17252 - C17253 + C17254 - C17255 + C17256 - C17257) * C14781 +
            (C17258 - C17259 + C17260 - C17261 + C17262 - C17263) * C92226) *
               C92188 * C2664 +
           ((C92357 * C1387 - C14700 * C1377 + C92358 * C1385 - C14702 * C1376 +
             C14697 * C1383 - C14704 * C1375) *
                C14780 +
            (C92357 * C1598 - C14700 * C1590 + C92358 * C1599 - C14702 * C1591 +
             C14697 * C1600 - C14704 * C1592) *
                C92333 +
            (C92357 * C3363 - C14700 * C3358 + C92358 * C3365 - C14702 * C3359 +
             C14697 * C3367 - C14704 * C3360) *
                C14781 +
            (C92357 * C3592 - C14700 * C3588 + C92358 * C3593 - C14702 * C3589 +
             C14697 * C3594 - C14704 * C3590) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92357 +
            (C15075 + C15076) * C92358 + C15081 * C14697) *
               C92188 * C2664 -
           ((C18335 + C18336) * C14697 + (C18337 + C18338) * C92358 +
            (C14781 * C3439 - C15037 * C3357 - C14781 * C3587 + C92226 * C3661 +
             C14780 * C1457 - C15036 * C1378 - C14780 * C1589 +
             C92333 * C1658) *
                C92357) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C18338 + C18337) * C92357 + (C18336 + C18335) * C92358 +
            (C14780 * C1460 - C15036 * C1375 - C14780 * C1592 + C92333 * C1655 +
             C14781 * C3442 - C15037 * C3360 - C14781 * C3590 +
             C92226 * C3664) *
                C14697) *
               C92188 * C2665 -
           ((C15079 + C15080) * C14697 + (C15078 + C15077) * C92358 +
            (C15076 + C15075) * C92357) *
               C92188 * C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C92188 * C266 - C265 * C108) * C14780 +
                      (C92188 * C495 - C265 * C348) * C92333 +
                      (C5039 - C5040) * C14781 + (C5334 - C5335) * C92226) *
                         C92357 +
                     ((C279 - C280) * C14780 + (C502 - C503) * C92333 +
                      C6732 * C14781 + C7073 * C92226) *
                         C92358 +
                     C15163 * C14697) *
                        C2664 +
                    (((C265 * C1378 - C92188 * C1523) * C14780 +
                      (C265 * C1589 - C92188 * C1713) * C92333 +
                      (C8695 - C8696) * C14781 + (C9021 - C9022) * C92226) *
                         C92357 +
                     ((C2819 - C2820) * C14780 + (C3054 - C3055) * C92333 +
                      (C7705 - C7706) * C14781 + (C8032 - C8033) * C92226) *
                         C92358 +
                     ((C2823 - C2824) * C14780 + (C3056 - C3057) * C92333 +
                      (C18111 - C18112) * C14781 + (C18437 - C18438) * C92226) *
                         C14697) *
                        C2665) *
                       C92136 * C1971 +
                   ((((C280 - C279) * C14780 + (C503 - C502) * C92333 +
                      C6734 * C14781 + C7074 * C92226) *
                         C92357 +
                     ((C284 - C283) * C14780 + (C506 - C505) * C92333 +
                      C17152 * C14781 + C17488 * C92226) *
                         C92358 +
                     ((C288 - C287) * C14780 + (C509 - C508) * C92333 +
                      (C2134 - C2135) * C14781 + (C2365 - C2366) * C92226) *
                         C14697) *
                        C2664 +
                    (((C2820 - C2819) * C14780 + (C3055 - C3054) * C92333 +
                      (C7706 - C7705) * C14781 + (C8033 - C8032) * C92226) *
                         C92357 +
                     ((C2824 - C2823) * C14780 + (C3057 - C3056) * C92333 +
                      (C18112 - C18111) * C14781 + (C18438 - C18437) * C92226) *
                         C92358 +
                     ((C2828 - C2827) * C14780 + (C3059 - C3058) * C92333 +
                      (C92188 * C3516 - C265 * C3360) * C14781 +
                      (C92188 * C3734 - C265 * C3590) * C92226) *
                         C14697) *
                        C2665) *
                       C92136 * C1972)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C265 +
             (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
              C14697 * C575 - C14704 * C569) *
                 C92188) *
                C92333 +
            ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
             (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
                C92226) *
               C2664 +
           (((C14700 * C1378 - C92357 * C1389 + C14702 * C1377 -
              C92358 * C1387 + C14704 * C1376 - C14697 * C1385) *
                 C265 +
             (C14700 * C1771 - C92357 * C1779 + C14702 * C1772 -
              C92358 * C1780 + C14704 * C1773 - C14697 * C1781) *
                 C92188) *
                C92333 +
            ((C14700 * C3357 - C92357 * C3361 + C14702 * C3358 -
              C92358 * C3363 + C14704 * C3359 - C14697 * C3365) *
                 C265 +
             (C14700 * C3801 - C92357 * C3805 + C14702 * C3802 -
              C92358 * C3806 + C14704 * C3803 - C14697 * C3807) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
              C14704 * C111 - C14697 * C120) *
                 C265 +
             (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
              C14704 * C570 - C14697 * C576) *
                 C92188) *
                C92333 +
            ((C17252 - C17253 + C17254 - C17255 + C17256 - C17257) * C265 +
             (C17587 - C17588 + C17589 - C17590 + C17591 - C17592) * C92188) *
                C92226) *
               C2664 +
           (((C92357 * C1387 - C14700 * C1377 + C92358 * C1385 -
              C14702 * C1376 + C14697 * C1383 - C14704 * C1375) *
                 C265 +
             (C92357 * C1780 - C14700 * C1772 + C92358 * C1781 -
              C14702 * C1773 + C14697 * C1782 - C14704 * C1774) *
                 C92188) *
                C92333 +
            ((C92357 * C3363 - C14700 * C3358 + C92358 * C3365 -
              C14702 * C3359 + C14697 * C3367 - C14704 * C3360) *
                 C265 +
             (C92357 * C3806 - C14700 * C3802 + C92358 * C3807 -
              C14702 * C3803 + C14697 * C3808 - C14704 * C3804) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C265 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92188) *
                C92357 +
            ((C14783 - C14784 + C14785 - C14786) * C265 +
             (C15312 - C15313 + C15314 - C15315) * C92188) *
                C92358 +
            C15329 * C14697) *
               C2664 +
           (((C14780 * C1378 - C92333 * C1457 + C14781 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C14780 * C1771 - C92333 * C1837 + C14781 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C92357 +
            ((C17997 - C17998 + C17999 - C18000) * C265 +
             (C18635 - C18636 + C18637 - C18638) * C92188) *
                C92358 +
            ((C18005 - C18006 + C18007 - C18008) * C265 +
             (C18639 - C18640 + C18641 - C18642) * C92188) *
                C14697) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C265 +
             (C15313 - C15312 + C15315 - C15314) * C92188) *
                C92357 +
            ((C14792 - C14791 + C14794 - C14793) * C265 +
             (C15318 - C15317 + C15320 - C15319) * C92188) *
                C92358 +
            ((C14799 - C14800 + C14801 - C14802) * C265 +
             (C15321 - C15322 + C15323 - C15324) * C92188) *
                C14697) *
               C2664 +
           (((C17998 - C17997 + C18000 - C17999) * C265 +
             (C18636 - C18635 + C18638 - C18637) * C92188) *
                C92357 +
            ((C18006 - C18005 + C18008 - C18007) * C265 +
             (C18640 - C18639 + C18642 - C18641) * C92188) *
                C92358 +
            ((C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
              C14781 * C3360) *
                 C265 +
             (C92333 * C1840 - C14780 * C1774 + C92226 * C3878 -
              C14781 * C3804) *
                 C92188) *
                C14697) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92333 +
             C5624 * C92226) *
                C92357 +
            (C15404 + C15405) * C92358 + C15410 * C14697) *
               C2664 -
           ((C18751 + C18745) * C14697 + (C18746 + C18747) * C92358 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C92333) *
                C92357) *
               C2665) *
              C92136 * C1971 +
          (((C18747 + C18746) * C92357 + (C18745 + C18751) * C92358 +
            (C3286 * C92333 +
             (C265 * C3516 - C701 * C3360 - C265 * C3804 + C92188 * C3948) *
                 C92226) *
                C14697) *
               C2665 -
           ((C15408 + C15409) * C14697 + (C15407 + C15406) * C92358 +
            (C15405 + C15404) * C92357) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92188 * C92333 +
           (C14700 * C808 - C14701 * C797 - C14700 * C809 + C92357 * C821 +
            C14702 * C806 - C14703 * C796 - C14702 * C807 + C92358 * C820 +
            C14704 * C804 - C14705 * C795 - C14704 * C805 + C14697 * C819) *
               C92188 * C92226) *
              C92150 * C92136 * C97 -
          ((C14704 * C802 - C14705 * C794 - C14704 * C803 + C14697 * C818 +
            C14702 * C804 - C14703 * C795 - C14702 * C805 + C92358 * C819 +
            C14700 * C806 - C14701 * C796 - C14700 * C807 + C92357 * C820) *
               C92188 * C92226 +
           (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
            C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
            C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
               C92188 * C92333) *
              C92150 * C92136 * C98 +
          ((C14700 * C118 - C14701 * C110 - C14700 * C119 + C92357 * C128 +
            C14702 * C120 - C14703 * C111 - C14702 * C121 + C92358 * C129 +
            C14704 * C122 - C14705 * C112 - C14704 * C123 + C14697 * C130) *
               C92188 * C92333 +
           (C14700 * C804 - C14701 * C795 - C14700 * C805 + C92357 * C819 +
            C14702 * C802 - C14703 * C794 - C14702 * C803 + C92358 * C818 +
            C14704 * C1974 - C14705 * C1973 - C14704 * C1975 + C14697 * C1976) *
               C92188 * C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92188 * C92333 +
           (C15521 + C15522 + C15523) * C92188 * C92226) *
              C92150 * C790 -
          ((C15524 + C15525 + C15526) * C92188 * C92226 +
           (C15523 + C15522 + C15521) * C92188 * C92333) *
              C92150 * C791 +
          ((C15526 + C15525 + C15524) * C92188 * C92333 +
           (C14700 * C4820 - C14701 * C4815 - C14700 * C4821 + C92357 * C4827 +
            C14702 * C4818 - C14703 * C4814 - C14702 * C4819 + C92358 * C4826 +
            C14704 * C6488 - C14705 * C6487 - C14704 * C6489 + C14697 * C6490) *
               C92188 * C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C14700 +
           (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
               C92357 +
           (C14783 - C14784 + C14785 - C14786) * C14702 +
           (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
           C14812 * C14697) *
              C92188 * C92150 * C92136 * C97 +
          ((C14784 - C14783 + C14786 - C14785) * C14700 +
           (C14788 - C14787 + C14790 - C14789) * C92357 +
           (C14792 - C14791 + C14794 - C14793) * C14702 +
           (C14796 - C14795 + C14798 - C14797) * C92358 +
           (C14799 - C14800 + C14801 - C14802) * C14704 +
           (C14803 - C14804 + C14805 - C14806) * C14697) *
              C92188 * C92150 * C92136 * C98 +
          (C14811 * C14700 + C14812 * C92357 +
           (C14800 - C14799 + C14802 - C14801) * C14702 +
           (C14804 - C14803 + C14806 - C14805) * C92358 +
           (C92333 * C187 - C14780 * C112 + C92226 * C2043 - C14781 * C1973) *
               C14704 +
           (C92333 * C193 - C14780 * C123 + C92226 * C2044 - C14781 * C1975) *
               C14697) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C14700 +
           (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
               C92357 +
           (C14783 - C14784 + C14785 - C14786) * C14702 +
           (C14787 - C14788 + C14789 - C14790) * C92358 + C14811 * C14704 +
           C14812 * C14697) *
              C92188 * C92150 * C790 +
          ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
               C14700 +
           (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
               C92357 +
           (C14780 * C796 - C92333 * C877 + C14781 * C799 - C92226 * C881) *
               C14702 +
           (C14780 * C807 - C92333 * C885 + C14781 * C813 - C92226 * C889) *
               C92358 +
           (C14780 * C795 - C92333 * C878 + C14781 * C800 - C92226 * C882) *
               C14704 +
           (C14780 * C805 - C92333 * C886 + C14781 * C815 - C92226 * C890) *
               C14697) *
              C92188 * C92150 * C791 +
          ((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
               C14700 +
           (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
               C92357 +
           (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
               C14702 +
           (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
               C92358 +
           (C92333 * C882 - C14780 * C800 + C92226 * C6617 - C14781 * C6487) *
               C14704 +
           (C92333 * C890 - C14780 * C815 + C92226 * C6618 - C14781 * C6489) *
               C14697) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14700 +
            (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
            (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
               C92333 +
           ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
            C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
            C14888 * C14697) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C14700 + (C282 - C281) * C92357 +
            (C284 - C283) * C14702 + (C286 - C285) * C92358 +
            (C288 - C287) * C14704 + (C290 - C289) * C14697) *
               C92333 +
           (C6734 * C14700 + C6735 * C92357 + (C2130 - C2131) * C14702 +
            (C2132 - C2133) * C92358 + (C2134 - C2135) * C14704 +
            (C2136 - C2137) * C14697) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C295 * C14700 + C296 * C92357 + C297 * C14702 + C298 * C92358 +
            (C292 - C291) * C14704 + (C294 - C293) * C14697) *
               C92333 +
           (C14887 * C14700 + C14888 * C92357 + (C2135 - C2134) * C14702 +
            (C2137 - C2136) * C92358 +
            (C92188 * C2123 - C265 * C1973) * C14704 +
            (C92188 * C2124 - C265 * C1975) * C14697) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14700 +
            (C92188 * C272 - C265 * C115) * C92357 + (C279 - C280) * C14702 +
            (C281 - C282) * C92358 + C295 * C14704 + C296 * C14697) *
               C92333 +
           ((C5039 - C5040) * C14700 + (C5041 - C5042) * C92357 +
            C6732 * C14702 + C6733 * C92358 + C14887 * C14704 +
            C14888 * C14697) *
               C92226) *
              C92150 * C790 +
          (((C5040 - C5039) * C14700 + (C5042 - C5041) * C92357 +
            C6734 * C14702 + C6735 * C92358 + (C2130 - C2131) * C14704 +
            (C2132 - C2133) * C14697) *
               C92333 +
           ((C5044 - C5043) * C14700 + (C5046 - C5045) * C92357 +
            C6736 * C14702 + C6737 * C92358 + (C4212 - C4213) * C14704 +
            (C4214 - C4215) * C14697) *
               C92226) *
              C92150 * C791 +
          ((C5057 * C14700 + C5058 * C92357 + C5047 * C14702 + C5048 * C92358 +
            (C4213 - C4212) * C14704 + (C4215 - C4214) * C14697) *
               C92333 +
           ((C5050 - C5049) * C14700 + (C5052 - C5051) * C92357 +
            (C5054 - C5053) * C14702 + (C5056 - C5055) * C92358 +
            (C92188 * C6729 - C265 * C6487) * C14704 +
            (C92188 * C6730 - C265 * C6489) * C14697) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C14780 +
           (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
            C14697 * C356 - C14704 * C350) *
               C92333 +
           (C92357 * C808 - C14700 * C797 + C92358 * C806 - C14702 * C796 +
            C14697 * C804 - C14704 * C795) *
               C14781 +
           (C92357 * C1016 - C14700 * C1008 + C92358 * C1017 - C14702 * C1009 +
            C14697 * C1018 - C14704 * C1010) *
               C92226) *
              C92188 * C92150 * C92136 * C97 +
          ((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
            C14704 * C111 - C14697 * C120) *
               C14780 +
           (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
            C14704 * C351 - C14697 * C357) *
               C92333 +
           (C14700 * C796 - C92357 * C806 + C14702 * C795 - C92358 * C804 +
            C14704 * C794 - C14697 * C802) *
               C14781 +
           (C14700 * C1009 - C92357 * C1017 + C14702 * C1010 - C92358 * C1018 +
            C14704 * C1011 - C14697 * C1019) *
               C92226) *
              C92188 * C92150 * C92136 * C98 +
          ((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
            C14697 * C122 - C14704 * C112) *
               C14780 +
           (C92357 * C356 - C14700 * C350 + C92358 * C357 - C14702 * C351 +
            C14697 * C358 - C14704 * C352) *
               C92333 +
           (C92357 * C804 - C14700 * C795 + C92358 * C802 - C14702 * C794 +
            C14697 * C1974 - C14704 * C1973) *
               C14781 +
           (C92357 * C1018 - C14700 * C1010 + C92358 * C1019 - C14702 * C1011 +
            C14697 * C2204 - C14704 * C2203) *
               C92226) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C14780 +
           (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
            C14697 * C356 - C14704 * C350) *
               C92333 +
           (C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C14781 +
           (C15755 - C15756 + C15757 - C15758 + C15759 - C15760) * C92226) *
              C92188 * C92150 * C790 +
          ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C14780 +
           (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92333 +
           (C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C14781 +
           (C15767 - C15768 + C15769 - C15770 + C15771 - C15772) * C92226) *
              C92188 * C92150 * C791 +
          ((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C14780 +
           (C15768 - C15767 + C15770 - C15769 + C15772 - C15771) * C92333 +
           (C92357 * C4820 - C14700 * C4815 + C92358 * C4818 - C14702 * C4814 +
            C14697 * C6488 - C14704 * C6487) *
               C14781 +
           (C92357 * C5143 - C14700 * C5139 + C92358 * C5144 - C14702 * C5140 +
            C14697 * C6836 - C14704 * C6835) *
               C92226) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92357 +
           (C15075 + C15076) * C92358 + C15081 * C14697) *
              C92188 * C92150 * C92136 * C97 -
          ((C15079 + C15080) * C14697 + (C15078 + C15077) * C92358 +
           (C15076 + C15075) * C92357) *
              C92188 * C92150 * C92136 * C98 +
          (C15081 * C92357 + (C15080 + C15079) * C92358 +
           (C14780 * C187 - C15036 * C112 - C14780 * C352 + C92333 * C415 +
            C14781 * C2043 - C15037 * C1973 - C14781 * C2203 + C92226 * C2271) *
               C14697) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92357 +
           (C15075 + C15076) * C92358 + C15081 * C14697) *
              C92188 * C92150 * C790 -
          ((C14781 * C882 - C15037 * C800 - C14781 * C1014 + C92226 * C1080 +
            C14780 * C878 - C15036 * C795 - C14780 * C1010 + C92333 * C1075) *
               C14697 +
           (C14781 * C881 - C15037 * C799 - C14781 * C1013 + C92226 * C1079 +
            C14780 * C877 - C15036 * C796 - C14780 * C1009 + C92333 * C1076) *
               C92358 +
           (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
            C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
               C92357) *
              C92188 * C92150 * C791 +
          ((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
            C14781 * C4948 - C15037 * C4815 - C14781 * C5139 + C92226 * C5252) *
               C92357 +
           (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
            C14781 * C4949 - C15037 * C4814 - C14781 * C5140 + C92226 * C5251) *
               C92358 +
           (C14780 * C882 - C15036 * C800 - C14780 * C1014 + C92333 * C1080 +
            C14781 * C6617 - C15037 * C6487 - C14781 * C6835 + C92226 * C6951) *
               C14697) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14780 +
            (C92188 * C495 - C265 * C348) * C92333 + (C5039 - C5040) * C14781 +
            (C5334 - C5335) * C92226) *
               C92357 +
           ((C279 - C280) * C14780 + (C502 - C503) * C92333 + C6732 * C14781 +
            C7073 * C92226) *
               C92358 +
           C15163 * C14697) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C14780 + (C503 - C502) * C92333 + C6734 * C14781 +
            C7074 * C92226) *
               C92357 +
           ((C284 - C283) * C14780 + (C506 - C505) * C92333 +
            (C2130 - C2131) * C14781 + (C2363 - C2364) * C92226) *
               C92358 +
           ((C288 - C287) * C14780 + (C509 - C508) * C92333 +
            (C2134 - C2135) * C14781 + (C2365 - C2366) * C92226) *
               C14697) *
              C92150 * C92136 * C98 +
          (C15163 * C92357 +
           (C297 * C14780 + C513 * C92333 + (C2135 - C2134) * C14781 +
            (C2366 - C2365) * C92226) *
               C92358 +
           ((C292 - C291) * C14780 + (C511 - C510) * C92333 +
            (C92188 * C2123 - C265 * C1973) * C14781 +
            (C92188 * C2359 - C265 * C2203) * C92226) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C14780 +
            (C92188 * C495 - C265 * C348) * C92333 + (C5039 - C5040) * C14781 +
            (C5334 - C5335) * C92226) *
               C92357 +
           ((C279 - C280) * C14780 + (C502 - C503) * C92333 + C6732 * C14781 +
            C7073 * C92226) *
               C92358 +
           C15163 * C14697) *
              C92150 * C790 +
          (((C5040 - C5039) * C14780 + (C5335 - C5334) * C92333 +
            (C5044 - C5043) * C14781 + (C5337 - C5336) * C92226) *
               C92357 +
           (C6734 * C14780 + C7074 * C92333 + C6736 * C14781 + C7075 * C92226) *
               C92358 +
           ((C2130 - C2131) * C14780 + (C2363 - C2364) * C92333 +
            (C4212 - C4213) * C14781 + (C4485 - C4486) * C92226) *
               C14697) *
              C92150 * C791 +
          ((C5057 * C14780 + C5343 * C92333 + (C5050 - C5049) * C14781 +
            (C5340 - C5339) * C92226) *
               C92357 +
           (C5047 * C14780 + C5338 * C92333 + (C5054 - C5053) * C14781 +
            (C5342 - C5341) * C92226) *
               C92358 +
           ((C4213 - C4212) * C14780 + (C4486 - C4485) * C92333 +
            (C92188 * C6729 - C265 * C6487) * C14781 +
            (C92188 * C7071 - C265 * C6835) * C92226) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C265 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92188) *
               C92333 +
           ((C92357 * C808 - C14700 * C797 + C92358 * C806 - C14702 * C796 +
             C14697 * C804 - C14704 * C795) *
                C265 +
            (C92357 * C1198 - C14700 * C1190 + C92358 * C1199 - C14702 * C1191 +
             C14697 * C1200 - C14704 * C1192) *
                C92188) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C265 +
            (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
             C14704 * C570 - C14697 * C576) *
                C92188) *
               C92333 +
           ((C14700 * C796 - C92357 * C806 + C14702 * C795 - C92358 * C804 +
             C14704 * C794 - C14697 * C802) *
                C265 +
            (C14700 * C1191 - C92357 * C1199 + C14702 * C1192 - C92358 * C1200 +
             C14704 * C1193 - C14697 * C1201) *
                C92188) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
             C14697 * C122 - C14704 * C112) *
                C265 +
            (C92357 * C575 - C14700 * C569 + C92358 * C576 - C14702 * C570 +
             C14697 * C577 - C14704 * C571) *
                C92188) *
               C92333 +
           ((C92357 * C804 - C14700 * C795 + C92358 * C802 - C14702 * C794 +
             C14697 * C1974 - C14704 * C1973) *
                C265 +
            (C92357 * C1200 - C14700 * C1192 + C92358 * C1201 - C14702 * C1193 +
             C14697 * C2433 - C14704 * C2432) *
                C92188) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C265 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92188) *
               C92333 +
           ((C15749 - C15750 + C15751 - C15752 + C15753 - C15754) * C265 +
            (C15995 - C15996 + C15997 - C15998 + C15999 - C16000) * C92188) *
               C92226) *
              C92150 * C790 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C265 +
            (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92188) *
               C92333 +
           ((C15761 - C15762 + C15763 - C15764 + C15765 - C15766) * C265 +
            (C16001 - C16002 + C16003 - C16004 + C16005 - C16006) * C92188) *
               C92226) *
              C92150 * C791 +
          (((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C265 +
            (C16002 - C16001 + C16004 - C16003 + C16006 - C16005) * C92188) *
               C92333 +
           ((C92357 * C4820 - C14700 * C4815 + C92358 * C4818 - C14702 * C4814 +
             C14697 * C6488 - C14704 * C6487) *
                C265 +
            (C92357 * C5421 - C14700 * C5417 + C92358 * C5422 - C14702 * C5418 +
             C14697 * C7174 - C14704 * C7173) *
                C92188) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C265 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92188) *
               C92357 +
           ((C14783 - C14784 + C14785 - C14786) * C265 +
            (C15312 - C15313 + C15314 - C15315) * C92188) *
               C92358 +
           C15329 * C14697) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C265 +
            (C15313 - C15312 + C15315 - C15314) * C92188) *
               C92357 +
           ((C14792 - C14791 + C14794 - C14793) * C265 +
            (C15318 - C15317 + C15320 - C15319) * C92188) *
               C92358 +
           ((C14799 - C14800 + C14801 - C14802) * C265 +
            (C15321 - C15322 + C15323 - C15324) * C92188) *
               C14697) *
              C92150 * C92136 * C98 +
          (C15329 * C92357 +
           ((C14800 - C14799 + C14802 - C14801) * C265 +
            (C15322 - C15321 + C15324 - C15323) * C92188) *
               C92358 +
           ((C92333 * C187 - C14780 * C112 + C92226 * C2043 - C14781 * C1973) *
                C265 +
            (C92333 * C633 - C14780 * C571 + C92226 * C2500 - C14781 * C2432) *
                C92188) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C265 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92188) *
               C92357 +
           ((C14783 - C14784 + C14785 - C14786) * C265 +
            (C15312 - C15313 + C15314 - C15315) * C92188) *
               C92358 +
           C15329 * C14697) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C265 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92188) *
               C92357 +
           ((C14780 * C796 - C92333 * C877 + C14781 * C799 - C92226 * C881) *
                C265 +
            (C14780 * C1191 - C92333 * C1257 + C14781 * C1195 -
             C92226 * C1261) *
                C92188) *
               C92358 +
           ((C14780 * C795 - C92333 * C878 + C14781 * C800 - C92226 * C882) *
                C265 +
            (C14780 * C1192 - C92333 * C1258 + C14781 * C1196 -
             C92226 * C1262) *
                C92188) *
               C14697) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C265 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C92188) *
               C92357 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C265 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C92188) *
               C92358 +
           ((C92333 * C882 - C14780 * C800 + C92226 * C6617 - C14781 * C6487) *
                C265 +
            (C92333 * C1262 - C14780 * C1196 + C92226 * C7281 -
             C14781 * C7173) *
                C92188) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92333 +
            C5624 * C92226) *
               C92357 +
           (C15404 + C15405) * C92358 + C15410 * C14697) *
              C92150 * C92136 * C97 -
          ((C15408 + C15409) * C14697 + (C15407 + C15406) * C92358 +
           (C15405 + C15404) * C92357) *
              C92150 * C92136 * C98 +
          (C15410 * C92357 + (C15409 + C15408) * C92358 +
           (C736 * C92333 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92226) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92333 +
            C5624 * C92226) *
               C92357 +
           (C15404 + C15405) * C92358 + C15410 * C14697) *
              C92150 * C790 -
          ((C4738 * C92226 + C2594 * C92333) * C14697 +
           (C4737 * C92226 + C2595 * C92333) * C92358 +
           (C5625 * C92226 + C5624 * C92333) * C92357) *
              C92150 * C791 +
          ((C5625 * C92333 + C5627 * C92226) * C92357 +
           (C4737 * C92333 + C5626 * C92226) * C92358 +
           (C4738 * C92333 +
            (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                C92226) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
              C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                 C92334 +
             (C10920 + C10921) * C92252) *
                C92333 +
            ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
               C92150 * C1969 -
           (((C8487 + C8488) * C92252 + (C4870 + C4869) * C92334) * C92226 +
            ((C8489 + C8490) * C92252 + (C4868 + C4867) * C92334) * C92333) *
               C92150 * C1970) *
              C1971 +
          ((((C6516 + C6517) * C92334 + (C27618 + C27619) * C92252) * C92333 +
            ((C6518 + C6519) * C92334 +
             (C4028 * C5707 - C4029 * C5701 - C4028 * C5708 + C4023 * C5719 +
              C4030 * C7489 - C4031 * C7488 - C4030 * C7490 + C92102 * C7491) *
                 C92252) *
                C92226) *
               C92150 * C1970 -
           (((C27619 + C27618) * C92252 + (C6517 + C6516) * C92334) * C92226 +
            ((C12777 + C12776) * C92252 +
             (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
              C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                 C92334) *
                C92333) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C4028 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C4023 +
             (C14783 - C14784 + C14785 - C14786) * C4030 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C92334 +
            ((C26712 - C26713 + C26714 - C26715) * C4028 +
             (C26716 - C26717 + C26718 - C26719) * C4023 +
             (C17998 - C17997 + C18000 - C17999) * C4030 +
             (C18002 - C18001 + C18004 - C18003) * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C4028 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C4023 +
             (C17038 - C17039 + C17040 - C17041) * C4030 +
             (C17042 - C17043 + C17044 - C17045) * C92102) *
                C92334 +
            ((C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
              C92226 * C5799) *
                 C4028 +
             (C14780 * C3362 - C92333 * C3443 + C14781 * C5710 -
              C92226 * C5805) *
                 C4023 +
             (C27750 - C27751 + C27752 - C27753) * C4030 +
             (C27754 - C27755 + C27756 - C27757) * C92102) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C4028 +
             (C14788 - C14787 + C14790 - C14789) * C4023 +
             (C14792 - C14791 + C14794 - C14793) * C4030 +
             (C14796 - C14795 + C14798 - C14797) * C92102) *
                C92334 +
            ((C17997 - C17998 + C17999 - C18000) * C4028 +
             (C18001 - C18002 + C18003 - C18004) * C4023 +
             (C18005 - C18006 + C18007 - C18008) * C4030 +
             (C18009 - C18010 + C18011 - C18012) * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C4028 +
             (C17043 - C17042 + C17045 - C17044) * C4023 +
             (C17047 - C17046 + C17049 - C17048) * C4030 +
             (C17051 - C17050 + C17053 - C17052) * C92102) *
                C92334 +
            ((C27751 - C27750 + C27753 - C27752) * C4028 +
             (C27755 - C27754 + C27757 - C27756) * C4023 +
             (C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
              C14781 * C7488) *
                 C4030 +
             (C92333 * C3445 - C14780 * C3366 + C92226 * C7591 -
              C14781 * C7490) *
                 C92102) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C4028 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C4023 +
             (C19901 - C19902 + C19903 - C19904) * C4030 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C92333 +
            ((C25850 - C25851 + C25852 - C25853) * C4028 +
             (C25854 - C25855 + C25856 - C25857) * C4023 + C27896 * C4030 +
             C27897 * C92102) *
                C92226) *
               C92150 * C1969 +
           (((C25851 - C25850 + C25853 - C25852) * C4028 +
             (C25855 - C25854 + C25857 - C25856) * C4023 + C27898 * C4030 +
             C27899 * C92102) *
                C92333 +
            ((C25858 - C25859 + C25860 - C25861) * C4028 +
             (C25862 - C25863 + C25864 - C25865) * C4023 +
             (C25866 - C25867 + C25868 - C25869) * C4030 +
             (C25870 - C25871 + C25872 - C25873) * C92102) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C4028 +
             (C19906 - C19905 + C19908 - C19907) * C4023 +
             (C19910 - C19909 + C19912 - C19911) * C4030 +
             (C19914 - C19913 + C19916 - C19915) * C92102) *
                C92333 +
            (C27898 * C4028 + C27899 * C4023 +
             (C22169 - C22170 + C22171 - C22172) * C4030 +
             (C22173 - C22174 + C22175 - C22176) * C92102) *
                C92226) *
               C92150 * C1969 +
           ((C27896 * C4028 + C27897 * C4023 +
             (C22170 - C22169 + C22172 - C22171) * C4030 +
             (C22174 - C22173 + C22176 - C22175) * C92102) *
                C92333 +
            ((C25867 - C25866 + C25869 - C25868) * C4028 +
             (C25871 - C25870 + C25873 - C25872) * C4023 +
             (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                 C4030 +
             (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
                 C92102) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C14780 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92333 +
             (C5148 - C5149 + C5150 - C5151) * C14781 +
             (C5152 - C5153 + C5154 - C5155) * C92226) *
                C92334 +
            ((C11200 - C11201 + C11202 - C11203) * C14780 +
             (C11204 - C11205 + C11206 - C11207) * C92333 +
             (C8806 - C8805 + C8808 - C8807) * C14781 +
             (C8810 - C8809 + C8812 - C8811) * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C5149 - C5148 + C5151 - C5150) * C14780 +
             (C5153 - C5152 + C5155 - C5154) * C92333 +
             (C5157 - C5156 + C5159 - C5158) * C14781 +
             (C5161 - C5160 + C5163 - C5162) * C92226) *
                C92334 +
            ((C8805 - C8806 + C8807 - C8808) * C14780 +
             (C8809 - C8810 + C8811 - C8812) * C92333 +
             (C8813 - C8814 + C8815 - C8816) * C14781 +
             (C8817 - C8818 + C8819 - C8820) * C92226) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C14780 +
             (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                 C92333 +
             (C6838 - C6839 + C6840 - C6841) * C14781 +
             (C6842 - C6843 + C6844 - C6845) * C92226) *
                C92334 +
            ((C13098 - C13099 + C13100 - C13101) * C14780 +
             (C13102 - C13103 + C13104 - C13105) * C92333 +
             (C28030 - C28031 + C28032 - C28033) * C14781 +
             (C28034 - C28035 + C28036 - C28037) * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C6839 - C6838 + C6841 - C6840) * C14780 +
             (C6843 - C6842 + C6845 - C6844) * C92333 +
             (C6847 - C6846 + C6849 - C6848) * C14781 +
             (C6851 - C6850 + C6853 - C6852) * C92226) *
                C92334 +
            ((C28031 - C28030 + C28033 - C28032) * C14780 +
             (C28035 - C28034 + C28037 - C28036) * C92333 +
             (C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                 C14781 +
             (C4023 * C5978 - C4028 * C5972 + C92102 * C7811 - C4030 * C7810) *
                 C92226) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C4023 +
             (C15075 + C15076) * C92102) *
                C92334 +
            ((C27066 + C27067) * C4023 + (C18338 + C18337) * C92102) * C92252) *
               C92150 * C1969 -
           (((C28180 + C28181) * C92102 +
             (C14781 * C5799 - C15037 * C5702 - C14781 * C5971 +
              C92226 * C6058 + C14780 * C3439 - C15036 * C3357 -
              C14780 * C3587 + C92333 * C3661) *
                 C4023) *
                C92252 +
            ((C17388 + C17389) * C92102 +
             (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
              C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                 C4023) *
                C92334) *
               C92150 * C1970) *
              C1971 +
          ((((C17389 + C17388) * C4023 + (C17387 + C17386) * C92102) * C92334 +
            ((C28181 + C28180) * C4023 +
             (C14780 * C3441 - C15036 * C3359 - C14780 * C3589 +
              C92333 * C3663 + C14781 * C7590 - C15037 * C7488 -
              C14781 * C7810 + C92226 * C7910) *
                 C92102) *
                C92252) *
               C92150 * C1970 -
           (((C18335 + C18336) * C92102 + (C18337 + C18338) * C4023) * C92252 +
            ((C15078 + C15077) * C92102 + (C15076 + C15075) * C4023) * C92334) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C14780 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92333 +
             (C25850 - C25851 + C25852 - C25853) * C14781 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C4023 +
            ((C19901 - C19902 + C19903 - C19904) * C14780 +
             (C20153 - C20154 + C20155 - C20156) * C92333 + C27896 * C14781 +
             C28316 * C92226) *
                C92102) *
               C92150 * C1969 +
           (((C25851 - C25850 + C25853 - C25852) * C14780 +
             (C26169 - C26168 + C26171 - C26170) * C92333 +
             (C25858 - C25859 + C25860 - C25861) * C14781 +
             (C26172 - C26173 + C26174 - C26175) * C92226) *
                C4023 +
            (C27898 * C14780 + C28317 * C92333 +
             (C25866 - C25867 + C25868 - C25869) * C14781 +
             (C26176 - C26177 + C26178 - C26179) * C92226) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C14780 +
             (C20154 - C20153 + C20156 - C20155) * C92333 + C27898 * C14781 +
             C28317 * C92226) *
                C4023 +
            ((C19910 - C19909 + C19912 - C19911) * C14780 +
             (C20159 - C20158 + C20161 - C20160) * C92333 +
             (C22169 - C22170 + C22171 - C22172) * C14781 +
             (C22482 - C22483 + C22484 - C22485) * C92226) *
                C92102) *
               C92150 * C1969 +
           ((C27896 * C14780 + C28316 * C92333 +
             (C25867 - C25866 + C25869 - C25868) * C14781 +
             (C26177 - C26176 + C26179 - C26178) * C92226) *
                C4023 +
            ((C22170 - C22169 + C22172 - C22171) * C14780 +
             (C22483 - C22482 + C22485 - C22484) * C92333 +
             (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                 C14781 +
             (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 -
              C19899 * C7810) *
                 C92226) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C19898 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92334 +
             (C11200 - C11201 + C11202 - C11203) * C19899 +
             (C11506 - C11507 + C11508 - C11509) * C92252) *
                C92333 +
            ((C5148 - C5149 + C5150 - C5151) * C19898 +
             (C5426 - C5427 + C5428 - C5429) * C92334 +
             (C8806 - C8805 + C8808 - C8807) * C19899 +
             (C9128 - C9127 + C9130 - C9129) * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C5149 - C5148 + C5151 - C5150) * C19898 +
             (C5427 - C5426 + C5429 - C5428) * C92334 +
             (C8805 - C8806 + C8807 - C8808) * C19899 +
             (C9127 - C9128 + C9129 - C9130) * C92252) *
                C92333 +
            ((C5157 - C5156 + C5159 - C5158) * C19898 +
             (C5432 - C5431 + C5434 - C5433) * C92334 +
             (C8813 - C8814 + C8815 - C8816) * C19899 +
             (C9131 - C9132 + C9133 - C9134) * C92252) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C19898 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92334 +
             (C13098 - C13099 + C13100 - C13101) * C19899 +
             (C13422 - C13423 + C13424 - C13425) * C92252) *
                C92333 +
            ((C6838 - C6839 + C6840 - C6841) * C19898 +
             (C7176 - C7177 + C7178 - C7179) * C92334 +
             (C28030 - C28031 + C28032 - C28033) * C19899 +
             (C28448 - C28449 + C28450 - C28451) * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C6839 - C6838 + C6841 - C6840) * C19898 +
             (C7177 - C7176 + C7179 - C7178) * C92334 +
             (C28031 - C28030 + C28033 - C28032) * C19899 +
             (C28449 - C28448 + C28451 - C28450) * C92252) *
                C92333 +
            ((C6847 - C6846 + C6849 - C6848) * C19898 +
             (C7181 - C7180 + C7183 - C7182) * C92334 +
             (C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                 C19899 +
             (C4023 * C6224 - C4028 * C6218 + C92102 * C8134 - C4030 * C8133) *
                 C92252) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C19898 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92334 +
             (C26712 - C26713 + C26714 - C26715) * C19899 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C4023 +
            ((C14783 - C14784 + C14785 - C14786) * C19898 +
             (C15312 - C15313 + C15314 - C15315) * C92334 +
             (C17998 - C17997 + C18000 - C17999) * C19899 +
             (C18636 - C18635 + C18638 - C18637) * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C19898 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C92334 +
             (C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
              C92226 * C5799) *
                 C19899 +
             (C14780 * C3801 - C92333 * C3875 + C14781 * C6217 -
              C92226 * C6303) *
                 C92252) *
                C4023 +
            ((C17038 - C17039 + C17040 - C17041) * C19898 +
             (C17691 - C17692 + C17693 - C17694) * C92334 +
             (C27750 - C27751 + C27752 - C27753) * C19899 +
             (C28582 - C28583 + C28584 - C28585) * C92252) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C19898 +
             (C15313 - C15312 + C15315 - C15314) * C92334 +
             (C17997 - C17998 + C17999 - C18000) * C19899 +
             (C18635 - C18636 + C18637 - C18638) * C92252) *
                C4023 +
            ((C14792 - C14791 + C14794 - C14793) * C19898 +
             (C15318 - C15317 + C15320 - C15319) * C92334 +
             (C18005 - C18006 + C18007 - C18008) * C19899 +
             (C18639 - C18640 + C18641 - C18642) * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C19898 +
             (C17692 - C17691 + C17694 - C17693) * C92334 +
             (C27751 - C27750 + C27753 - C27752) * C19899 +
             (C28583 - C28582 + C28585 - C28584) * C92252) *
                C4023 +
            ((C17047 - C17046 + C17049 - C17048) * C19898 +
             (C17696 - C17695 + C17698 - C17697) * C92334 +
             (C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
              C14781 * C7488) *
                 C19899 +
             (C92333 * C3877 - C14780 * C3803 + C92226 * C8233 -
              C14781 * C8133) *
                 C92252) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C26510 + C26511) * C92226) *
                C4023 +
            ((C20439 + C20440) * C92333 + C28716 * C92226) * C92102) *
               C92150 * C1969 -
           (((C26512 + C26513) * C92226 + C28717 * C92333) * C92102 +
            ((C26514 + C26515) * C92226 + (C26511 + C26510) * C92333) * C4023) *
               C92150 * C1970) *
              C1971 +
          (((C28716 * C92333 + (C26513 + C26512) * C92226) * C4023 +
            ((C22807 + C22806) * C92333 +
             (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
              C19899 * C7702 - C20401 * C7488 - C19899 * C8133 +
              C92252 * C8338) *
                 C92226) *
                C92102) *
               C92150 * C1970 -
           (((C22806 + C22807) * C92226 + (C20442 + C20441) * C92333) * C92102 +
            (C28717 * C92226 + (C20440 + C20439) * C92333) * C4023) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
              C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                 C92334 +
             (C10920 + C10921) * C92252) *
                C92333 +
            ((C4867 + C4868) * C92334 + C30064 * C92252) * C92226) *
               C2664 -
           (((C13771 + C13770) * C92252 + C30065 * C92334) * C92226 +
            ((C10923 + C10922) * C92252 + (C10921 + C10920) * C92334) *
                C92333) *
               C2665) *
              C1969 +
          (((C30064 * C92334 + (C13770 + C13771) * C92252) * C92333 +
            ((C8488 + C8487) * C92334 +
             (C4028 * C5715 - C4029 * C5705 - C4028 * C5716 + C4023 * C5723 +
              C4030 * C5717 - C4031 * C5706 - C4030 * C5718 + C92102 * C5724) *
                 C92252) *
                C92226) *
               C2665 -
           (((C8487 + C8488) * C92252 + (C4870 + C4869) * C92334) * C92226 +
            (C30065 * C92252 + (C4868 + C4867) * C92334) * C92333) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C4028 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C4023 +
             (C14783 - C14784 + C14785 - C14786) * C4030 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C92334 +
            ((C26712 - C26713 + C26714 - C26715) * C4028 +
             (C26716 - C26717 + C26718 - C26719) * C4023 + C28986 * C4030 +
             C28987 * C92102) *
                C92252) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C4028 +
             (C26717 - C26716 + C26719 - C26718) * C4023 + C28988 * C4030 +
             C28989 * C92102) *
                C92334 +
            ((C26720 - C26721 + C26722 - C26723) * C4028 +
             (C26724 - C26725 + C26726 - C26727) * C4023 +
             (C26728 - C26729 + C26730 - C26731) * C4030 +
             (C26732 - C26733 + C26734 - C26735) * C92102) *
                C92252) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C4028 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C4023 +
             (C17038 - C17039 + C17040 - C17041) * C4030 +
             (C17042 - C17043 + C17044 - C17045) * C92102) *
                C92334 +
            ((C30196 - C30197 + C30198 - C30199) * C4028 +
             (C30200 - C30201 + C30202 - C30203) * C4023 +
             (C27750 - C27751 + C27752 - C27753) * C4030 +
             (C27754 - C27755 + C27756 - C27757) * C92102) *
                C92252) *
               C2664 +
           (((C30197 - C30196 + C30199 - C30198) * C4028 +
             (C30201 - C30200 + C30203 - C30202) * C4023 +
             (C27751 - C27750 + C27753 - C27752) * C4030 +
             (C27755 - C27754 + C27757 - C27756) * C92102) *
                C92334 +
            ((C92333 * C5801 - C14780 * C5703 + C92226 * C5802 -
              C14781 * C5705) *
                 C4028 +
             (C92333 * C5807 - C14780 * C5712 + C92226 * C5808 -
              C14781 * C5716) *
                 C4023 +
             (C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
              C14781 * C5706) *
                 C4030 +
             (C92333 * C5809 - C14780 * C5714 + C92226 * C5810 -
              C14781 * C5718) *
                 C92102) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C4028 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C4023 +
             (C19901 - C19902 + C19903 - C19904) * C4030 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C92333 +
            ((C25850 - C25851 + C25852 - C25853) * C4028 +
             (C25854 - C25855 + C25856 - C25857) * C4023 + C27896 * C4030 +
             C27897 * C92102) *
                C92226) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C4028 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C4023 +
             (C23127 - C23128 + C23129 - C23130) * C4030 +
             (C23131 - C23132 + C23133 - C23134) * C92102) *
                C92333 +
            ((C30334 - C30335 + C30336 - C30337) * C4028 +
             (C30338 - C30339 + C30340 - C30341) * C4023 +
             (C29120 - C29121 + C29122 - C29123) * C4030 +
             (C29124 - C29125 + C29126 - C29127) * C92102) *
                C92226) *
               C2665) *
              C1969 +
          ((((C25851 - C25850 + C25853 - C25852) * C4028 +
             (C25855 - C25854 + C25857 - C25856) * C4023 + C27898 * C4030 +
             C27899 * C92102) *
                C92333 +
            ((C25858 - C25859 + C25860 - C25861) * C4028 +
             (C25862 - C25863 + C25864 - C25865) * C4023 +
             (C25866 - C25867 + C25868 - C25869) * C4030 +
             (C25870 - C25871 + C25872 - C25873) * C92102) *
                C92226) *
               C2664 +
           (((C30335 - C30334 + C30337 - C30336) * C4028 +
             (C30339 - C30338 + C30341 - C30340) * C4023 +
             (C29121 - C29120 + C29123 - C29122) * C4030 +
             (C29125 - C29124 + C29127 - C29126) * C92102) *
                C92333 +
            ((C92334 * C5885 - C19898 * C5702 + C92252 * C5889 -
              C19899 * C5705) *
                 C4028 +
             (C92334 * C5891 - C19898 * C5710 + C92252 * C5895 -
              C19899 * C5716) *
                 C4023 +
             (C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
              C19899 * C5706) *
                 C4030 +
             (C92334 * C5892 - C19898 * C5708 + C92252 * C5896 -
              C19899 * C5718) *
                 C92102) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C14780 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92333 +
             (C5148 - C5149 + C5150 - C5151) * C14781 +
             (C5152 - C5153 + C5154 - C5155) * C92226) *
                C92334 +
            ((C11200 - C11201 + C11202 - C11203) * C14780 +
             (C11204 - C11205 + C11206 - C11207) * C92333 + C30480 * C14781 +
             C30481 * C92226) *
                C92252) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C14780 +
             (C11205 - C11204 + C11207 - C11206) * C92333 + C30482 * C14781 +
             C30483 * C92226) *
                C92334 +
            ((C11209 - C11208 + C11211 - C11210) * C14780 +
             (C11213 - C11212 + C11215 - C11214) * C92333 +
             (C14086 - C14087 + C14088 - C14089) * C14781 +
             (C14090 - C14091 + C14092 - C14093) * C92226) *
                C92252) *
               C2665) *
              C1969 +
          ((((C5149 - C5148 + C5151 - C5150) * C14780 +
             (C5153 - C5152 + C5155 - C5154) * C92333 +
             (C5157 - C5156 + C5159 - C5158) * C14781 +
             (C5161 - C5160 + C5163 - C5162) * C92226) *
                C92334 +
            (C30482 * C14780 + C30483 * C92333 +
             (C8813 - C8814 + C8815 - C8816) * C14781 +
             (C8817 - C8818 + C8819 - C8820) * C92226) *
                C92252) *
               C2664 +
           ((C30480 * C14780 + C30481 * C92333 +
             (C8814 - C8813 + C8816 - C8815) * C14781 +
             (C8818 - C8817 + C8820 - C8819) * C92226) *
                C92334 +
            ((C14087 - C14086 + C14089 - C14088) * C14780 +
             (C14091 - C14090 + C14093 - C14092) * C92333 +
             (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                 C14781 +
             (C4023 * C5981 - C4028 * C5975 + C92102 * C5982 - C4030 * C5976) *
                 C92226) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C4023 +
             (C15075 + C15076) * C92102) *
                C92334 +
            ((C27066 + C27067) * C4023 + C29388 * C92102) * C92252) *
               C2664 -
           (((C27068 + C27069) * C92102 + (C27070 + C27071) * C4023) * C92252 +
            (C29389 * C92102 + (C27067 + C27066) * C4023) * C92334) *
               C2665) *
              C1969 +
          ((((C30626 + C30627) * C4023 + (C28181 + C28180) * C92102) * C92334 +
            ((C14780 * C5801 - C15036 * C5703 - C14780 * C5973 +
              C92333 * C6059 + C14781 * C5802 - C15037 * C5705 -
              C14781 * C5975 + C92226 * C6060) *
                 C4023 +
             (C14780 * C5803 - C15036 * C5704 - C14780 * C5974 +
              C92333 * C6061 + C14781 * C5804 - C15037 * C5706 -
              C14781 * C5976 + C92226 * C6062) *
                 C92102) *
                C92252) *
               C2665 -
           (((C28180 + C28181) * C92102 + (C30627 + C30626) * C4023) * C92252 +
            ((C17388 + C17389) * C92102 +
             (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
              C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                 C4023) *
                C92334) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C14780 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92333 +
             (C25850 - C25851 + C25852 - C25853) * C14781 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C4023 +
            ((C19901 - C19902 + C19903 - C19904) * C14780 +
             (C20153 - C20154 + C20155 - C20156) * C92333 + C27896 * C14781 +
             C28316 * C92226) *
                C92102) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C14780 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C92333 +
             (C30334 - C30335 + C30336 - C30337) * C14781 +
             (C30758 - C30759 + C30760 - C30761) * C92226) *
                C4023 +
            ((C23127 - C23128 + C23129 - C23130) * C14780 +
             (C23452 - C23453 + C23454 - C23455) * C92333 +
             (C29120 - C29121 + C29122 - C29123) * C14781 +
             (C29520 - C29521 + C29522 - C29523) * C92226) *
                C92102) *
               C2665) *
              C1969 +
          ((((C25851 - C25850 + C25853 - C25852) * C14780 +
             (C26169 - C26168 + C26171 - C26170) * C92333 +
             (C25858 - C25859 + C25860 - C25861) * C14781 +
             (C26172 - C26173 + C26174 - C26175) * C92226) *
                C4023 +
            (C27898 * C14780 + C28317 * C92333 +
             (C25866 - C25867 + C25868 - C25869) * C14781 +
             (C26176 - C26177 + C26178 - C26179) * C92226) *
                C92102) *
               C2664 +
           (((C30335 - C30334 + C30337 - C30336) * C14780 +
             (C30759 - C30758 + C30761 - C30760) * C92333 +
             (C92334 * C5885 - C19898 * C5702 + C92252 * C5889 -
              C19899 * C5705) *
                 C14781 +
             (C92334 * C6137 - C19898 * C5971 + C92252 * C6140 -
              C19899 * C5975) *
                 C92226) *
                C4023 +
            ((C29121 - C29120 + C29123 - C29122) * C14780 +
             (C29521 - C29520 + C29523 - C29522) * C92333 +
             (C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
              C19899 * C5706) *
                 C14781 +
             (C92334 * C6138 - C19898 * C5972 + C92252 * C6142 -
              C19899 * C5976) *
                 C92226) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C19898 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92334 +
             (C11200 - C11201 + C11202 - C11203) * C19899 +
             (C11506 - C11507 + C11508 - C11509) * C92252) *
                C92333 +
            ((C5148 - C5149 + C5150 - C5151) * C19898 +
             (C5426 - C5427 + C5428 - C5429) * C92334 + C30480 * C19899 +
             C30896 * C92252) *
                C92226) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C19898 +
             (C11507 - C11506 + C11509 - C11508) * C92334 +
             (C11209 - C11208 + C11211 - C11210) * C19899 +
             (C11511 - C11510 + C11513 - C11512) * C92252) *
                C92333 +
            (C30482 * C19898 + C30897 * C92334 +
             (C14086 - C14087 + C14088 - C14089) * C19899 +
             (C14414 - C14415 + C14416 - C14417) * C92252) *
                C92226) *
               C2665) *
              C1969 +
          ((((C5149 - C5148 + C5151 - C5150) * C19898 +
             (C5427 - C5426 + C5429 - C5428) * C92334 + C30482 * C19899 +
             C30897 * C92252) *
                C92333 +
            ((C5157 - C5156 + C5159 - C5158) * C19898 +
             (C5432 - C5431 + C5434 - C5433) * C92334 +
             (C8813 - C8814 + C8815 - C8816) * C19899 +
             (C9131 - C9132 + C9133 - C9134) * C92252) *
                C92226) *
               C2664 +
           ((C30480 * C19898 + C30896 * C92334 +
             (C14087 - C14086 + C14089 - C14088) * C19899 +
             (C14415 - C14414 + C14417 - C14416) * C92252) *
                C92333 +
            ((C8814 - C8813 + C8816 - C8815) * C19898 +
             (C9132 - C9131 + C9134 - C9133) * C92334 +
             (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                 C19899 +
             (C4023 * C6227 - C4028 * C6221 + C92102 * C6228 - C4030 * C6222) *
                 C92252) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C19898 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92334 +
             (C26712 - C26713 + C26714 - C26715) * C19899 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C4023 +
            ((C14783 - C14784 + C14785 - C14786) * C19898 +
             (C15312 - C15313 + C15314 - C15315) * C92334 + C28986 * C19899 +
             C29788 * C92252) *
                C92102) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C19898 +
             (C27367 - C27366 + C27369 - C27368) * C92334 +
             (C26720 - C26721 + C26722 - C26723) * C19899 +
             (C27370 - C27371 + C27372 - C27373) * C92252) *
                C4023 +
            (C28988 * C19898 + C29789 * C92334 +
             (C26728 - C26729 + C26730 - C26731) * C19899 +
             (C27374 - C27375 + C27376 - C27377) * C92252) *
                C92102) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C19898 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C92334 +
             (C30196 - C30197 + C30198 - C30199) * C19899 +
             (C31028 - C31029 + C31030 - C31031) * C92252) *
                C4023 +
            ((C17038 - C17039 + C17040 - C17041) * C19898 +
             (C17691 - C17692 + C17693 - C17694) * C92334 +
             (C27750 - C27751 + C27752 - C27753) * C19899 +
             (C28582 - C28583 + C28584 - C28585) * C92252) *
                C92102) *
               C2664 +
           (((C30197 - C30196 + C30199 - C30198) * C19898 +
             (C31029 - C31028 + C31031 - C31030) * C92334 +
             (C92333 * C5801 - C14780 * C5703 + C92226 * C5802 -
              C14781 * C5705) *
                 C19899 +
             (C92333 * C6305 - C14780 * C6219 + C92226 * C6306 -
              C14781 * C6221) *
                 C92252) *
                C4023 +
            ((C27751 - C27750 + C27753 - C27752) * C19898 +
             (C28583 - C28582 + C28585 - C28584) * C92334 +
             (C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
              C14781 * C5706) *
                 C19899 +
             (C92333 * C6307 - C14780 * C6220 + C92226 * C6308 -
              C14781 * C6222) *
                 C92252) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C26510 + C26511) * C92226) *
                C4023 +
            ((C20439 + C20440) * C92333 + C28716 * C92226) * C92102) *
               C2664 -
           (((C29932 + C29933) * C92226 + (C23787 + C23788) * C92333) * C92102 +
            ((C31174 + C31175) * C92226 +
             (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
              C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
              C19898 * C1771 + C92334 * C1898) *
                 C92333) *
                C4023) *
               C2665) *
              C1969 +
          ((((C31175 + C31174) * C92333 +
             (C19898 * C5885 - C20400 * C5702 - C19898 * C6217 +
              C92334 * C6384 + C19899 * C5889 - C20401 * C5705 -
              C19899 * C6221 + C92252 * C6386) *
                 C92226) *
                C4023 +
            ((C29933 + C29932) * C92333 +
             (C19898 * C5886 - C20400 * C5701 - C19898 * C6218 +
              C92334 * C6383 + C19899 * C5890 - C20401 * C5706 -
              C19899 * C6222 + C92252 * C6388) *
                 C92226) *
                C92102) *
               C2665 -
           (((C26512 + C26513) * C92226 + C28717 * C92333) * C92102 +
            ((C26514 + C26515) * C92226 + (C26511 + C26510) * C92333) * C4023) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92334 +
            (C10920 + C10921) * C92252) *
               C92333 +
           ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
              C92150 * C790 -
          (((C8487 + C8488) * C92252 + (C4870 + C4869) * C92334) * C92226 +
           ((C8489 + C8490) * C92252 + (C4868 + C4867) * C92334) * C92333) *
              C92150 * C791 +
          ((C4873 * C92334 + (C8488 + C8487) * C92252) * C92333 +
           ((C4872 + C4871) * C92334 +
            (C4028 * C8456 - C4029 * C8454 - C4028 * C8457 + C4023 * C8460 +
             C4030 * C8458 - C4031 * C8455 - C4030 * C8459 + C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92334 +
            (C10920 + C10921) * C92252) *
               C92333 +
           ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C4030 * C3365 - C4031 * C3359 - C4030 * C3366 + C92102 * C3371 +
             C4028 * C3363 - C4029 * C3358 - C4028 * C3364 + C4023 * C3370) *
                C92252 +
            (C6517 + C6516) * C92334) *
               C92226 +
           ((C12777 + C12776) * C92252 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92334) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
             C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
                C92334 +
            (C4028 * C1385 - C4029 * C1376 - C4028 * C1386 + C4023 * C1400 +
             C4030 * C1383 - C4031 * C1375 - C4030 * C1384 + C92102 * C1399) *
                C92252) *
               C92333 +
           ((C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
             C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
                C92334 +
            (C4028 * C3365 - C4029 * C3359 - C4028 * C3366 + C4023 * C3371 +
             C4030 * C3367 - C4031 * C3360 - C4030 * C3368 + C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92334 +
            (C10920 + C10921) * C92252) *
               C92333 +
           ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
              C1372 -
          (((C13771 + C13770) * C92252 + (C8489 + C8490) * C92334) * C92226 +
           ((C10923 + C10922) * C92252 + (C10921 + C10920) * C92334) * C92333) *
              C1373 +
          ((C10926 * C92334 + (C10925 + C10924) * C92252) * C92333 +
           ((C13770 + C13771) * C92334 +
            (C4028 * C13751 - C4029 * C13749 - C4028 * C13752 + C4023 * C13755 +
             C4030 * C13753 - C4031 * C13750 - C4030 * C13754 +
             C92102 * C13756) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C4028 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C4023 +
            (C14783 - C14784 + C14785 - C14786) * C4030 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C92334 +
           ((C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C4028 +
            (C92333 * C1465 - C14780 * C1390 + C92226 * C3443 -
             C14781 * C3362) *
                C4023 +
            (C17998 - C17997 + C18000 - C17999) * C4030 +
            (C18002 - C18001 + C18004 - C18003) * C92102) *
               C92252) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C4028 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C4023 +
            (C17038 - C17039 + C17040 - C17041) * C4030 +
            (C17042 - C17043 + C17044 - C17045) * C92102) *
               C92334 +
           ((C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
             C92226 * C5799) *
                C4028 +
            (C14780 * C3362 - C92333 * C3443 + C14781 * C5710 -
             C92226 * C5805) *
                C4023 +
            (C14780 * C3358 - C92333 * C3440 + C14781 * C5701 -
             C92226 * C5800) *
                C4030 +
            (C14780 * C3364 - C92333 * C3444 + C14781 * C5708 -
             C92226 * C5806) *
                C92102) *
               C92252) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C4028 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C4023 +
            (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C4030 +
            (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
                C92102) *
               C92334 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C4028 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C4023 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C4030 +
            (C92333 * C5806 - C14780 * C5708 + C92226 * C8591 -
             C14781 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C4028 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C4023 +
            (C14783 - C14784 + C14785 - C14786) * C4030 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C92334 +
           ((C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C4028 +
            (C92333 * C1465 - C14780 * C1390 + C92226 * C3443 -
             C14781 * C3362) *
                C4023 +
            (C17998 - C17997 + C18000 - C17999) * C4030 +
            (C18002 - C18001 + C18004 - C18003) * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C4028 +
            (C14788 - C14787 + C14790 - C14789) * C4023 +
            (C14792 - C14791 + C14794 - C14793) * C4030 +
            (C14796 - C14795 + C14798 - C14797) * C92102) *
               C92334 +
           ((C17997 - C17998 + C17999 - C18000) * C4028 +
            (C18001 - C18002 + C18003 - C18004) * C4023 +
            (C18005 - C18006 + C18007 - C18008) * C4030 +
            (C18009 - C18010 + C18011 - C18012) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C14811 * C4028 + C14812 * C4023 +
            (C14800 - C14799 + C14802 - C14801) * C4030 +
            (C14804 - C14803 + C14806 - C14805) * C92102) *
               C92334 +
           ((C18006 - C18005 + C18008 - C18007) * C4028 +
            (C18010 - C18009 + C18012 - C18011) * C4023 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C4030 +
            (C92333 * C1468 - C14780 * C1384 + C92226 * C3446 -
             C14781 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C4028 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C4023 +
            (C14783 - C14784 + C14785 - C14786) * C4030 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C92334 +
           ((C26712 - C26713 + C26714 - C26715) * C4028 +
            (C26716 - C26717 + C26718 - C26719) * C4023 +
            (C17998 - C17997 + C18000 - C17999) * C4030 +
            (C18002 - C18001 + C18004 - C18003) * C92102) *
               C92252) *
              C1372 +
          (((C26713 - C26712 + C26715 - C26714) * C4028 +
            (C26717 - C26716 + C26719 - C26718) * C4023 +
            (C17997 - C17998 + C17999 - C18000) * C4030 +
            (C18001 - C18002 + C18003 - C18004) * C92102) *
               C92334 +
           ((C26720 - C26721 + C26722 - C26723) * C4028 +
            (C26724 - C26725 + C26726 - C26727) * C4023 +
            (C26728 - C26729 + C26730 - C26731) * C4030 +
            (C26732 - C26733 + C26734 - C26735) * C92102) *
               C92252) *
              C1373 +
          (((C26721 - C26720 + C26723 - C26722) * C4028 +
            (C26725 - C26724 + C26727 - C26726) * C4023 +
            (C26729 - C26728 + C26731 - C26730) * C4030 +
            (C26733 - C26732 + C26735 - C26734) * C92102) *
               C92334 +
           ((C92333 * C11000 - C14780 * C10868 + C92226 * C13869 -
             C14781 * C13749) *
                C4028 +
            (C92333 * C11004 - C14780 * C10874 + C92226 * C13871 -
             C14781 * C13752) *
                C4023 +
            (C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
             C14781 * C13750) *
                C4030 +
            (C92333 * C11005 - C14780 * C10872 + C92226 * C13872 -
             C14781 * C13754) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C4028 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C4023 +
            (C19901 - C19902 + C19903 - C19904) * C4030 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C92333 +
           ((C25850 - C25851 + C25852 - C25853) * C4028 +
            (C25854 - C25855 + C25856 - C25857) * C4023 +
            (C22162 - C22161 + C22164 - C22163) * C4030 +
            (C22166 - C22165 + C22168 - C22167) * C92102) *
               C92226) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C4028 +
            (C25855 - C25854 + C25857 - C25856) * C4023 +
            (C22161 - C22162 + C22163 - C22164) * C4030 +
            (C22165 - C22166 + C22167 - C22168) * C92102) *
               C92333 +
           ((C25858 - C25859 + C25860 - C25861) * C4028 +
            (C25862 - C25863 + C25864 - C25865) * C4023 +
            (C25866 - C25867 + C25868 - C25869) * C4030 +
            (C25870 - C25871 + C25872 - C25873) * C92102) *
               C92226) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C4028 +
            (C25863 - C25862 + C25865 - C25864) * C4023 +
            (C25867 - C25866 + C25869 - C25868) * C4030 +
            (C25871 - C25870 + C25873 - C25872) * C92102) *
               C92333 +
           ((C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C4028 +
            (C92334 * C5034 - C19898 * C4821 + C92252 * C8692 -
             C19899 * C8457) *
                C4023 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C4030 +
            (C92334 * C5035 - C19898 * C4819 + C92252 * C8693 -
             C19899 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C4028 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C4023 +
            (C19901 - C19902 + C19903 - C19904) * C4030 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C92333 +
           ((C92334 * C942 - C19898 * C797 + C92252 * C3513 - C19899 * C3357) *
                C4028 +
            (C92334 * C950 - C19898 * C809 + C92252 * C3517 - C19899 * C3362) *
                C4023 +
            (C22162 - C22161 + C22164 - C22163) * C4030 +
            (C22166 - C22165 + C22168 - C22167) * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C4028 +
            (C19906 - C19905 + C19908 - C19907) * C4023 +
            (C19910 - C19909 + C19912 - C19911) * C4030 +
            (C19914 - C19913 + C19916 - C19915) * C92102) *
               C92333 +
           ((C22161 - C22162 + C22163 - C22164) * C4028 +
            (C22165 - C22166 + C22167 - C22168) * C4023 +
            (C22169 - C22170 + C22171 - C22172) * C4030 +
            (C22173 - C22174 + C22175 - C22176) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C19929 * C4028 + C19930 * C4023 +
            (C19918 - C19917 + C19920 - C19919) * C4030 +
            (C19922 - C19921 + C19924 - C19923) * C92102) *
               C92333 +
           ((C22170 - C22169 + C22172 - C22171) * C4028 +
            (C22174 - C22173 + C22176 - C22175) * C4023 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C4030 +
            (C92334 * C953 - C19898 * C803 + C92252 * C3520 - C19899 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C4028 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C4023 +
            (C19901 - C19902 + C19903 - C19904) * C4030 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C92333 +
           ((C25850 - C25851 + C25852 - C25853) * C4028 +
            (C25854 - C25855 + C25856 - C25857) * C4023 +
            (C22162 - C22161 + C22164 - C22163) * C4030 +
            (C22166 - C22165 + C22168 - C22167) * C92102) *
               C92226) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C4028 +
            (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
             C92252 * C1535) *
                C4023 +
            (C23127 - C23128 + C23129 - C23130) * C4030 +
            (C23131 - C23132 + C23133 - C23134) * C92102) *
               C92333 +
           ((C19898 * C3357 - C92334 * C3513 + C19899 * C5703 -
             C92252 * C5887) *
                C4028 +
            (C19898 * C3362 - C92334 * C3517 + C19899 * C5712 -
             C92252 * C5893) *
                C4023 +
            (C19898 * C3358 - C92334 * C3514 + C19899 * C5704 -
             C92252 * C5888) *
                C4030 +
            (C19898 * C3364 - C92334 * C3518 + C19899 * C5714 -
             C92252 * C5894) *
                C92102) *
               C92226) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C4028 +
            (C92334 * C1535 - C19898 * C1392 + C92252 * C11113 -
             C19899 * C10874) *
                C4023 +
            (C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
             C19899 * C10867) *
                C4030 +
            (C92334 * C1536 - C19898 * C1394 + C92252 * C11114 -
             C19899 * C10872) *
                C92102) *
               C92333 +
           ((C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
             C19899 * C13749) *
                C4028 +
            (C92334 * C5893 - C19898 * C5712 + C92252 * C13981 -
             C19899 * C13752) *
                C4023 +
            (C92334 * C5888 - C19898 * C5704 + C92252 * C13980 -
             C19899 * C13750) *
                C4030 +
            (C92334 * C5894 - C19898 * C5714 + C92252 * C13982 -
             C19899 * C13754) *
                C92102) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C14780 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92333 +
            (C5148 - C5149 + C5150 - C5151) * C14781 +
            (C5152 - C5153 + C5154 - C5155) * C92226) *
               C92334 +
           ((C11200 - C11201 + C11202 - C11203) * C14780 +
            (C11204 - C11205 + C11206 - C11207) * C92333 +
            (C8806 - C8805 + C8808 - C8807) * C14781 +
            (C8810 - C8809 + C8812 - C8811) * C92226) *
               C92252) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C14780 +
            (C5153 - C5152 + C5155 - C5154) * C92333 +
            (C5157 - C5156 + C5159 - C5158) * C14781 +
            (C5161 - C5160 + C5163 - C5162) * C92226) *
               C92334 +
           ((C8805 - C8806 + C8807 - C8808) * C14780 +
            (C8809 - C8810 + C8811 - C8812) * C92333 +
            (C8813 - C8814 + C8815 - C8816) * C14781 +
            (C8817 - C8818 + C8819 - C8820) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C5176 * C14780 + C5177 * C92333 +
            (C5165 - C5164 + C5167 - C5166) * C14781 +
            (C5169 - C5168 + C5171 - C5170) * C92226) *
               C92334 +
           ((C8814 - C8813 + C8816 - C8815) * C14780 +
            (C8818 - C8817 + C8820 - C8819) * C92333 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C14781 +
            (C4023 * C8802 - C4028 * C8800 + C92102 * C8803 - C4030 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C14780 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92333 +
            (C5148 - C5149 + C5150 - C5151) * C14781 +
            (C5152 - C5153 + C5154 - C5155) * C92226) *
               C92334 +
           ((C11200 - C11201 + C11202 - C11203) * C14780 +
            (C11204 - C11205 + C11206 - C11207) * C92333 +
            (C8806 - C8805 + C8808 - C8807) * C14781 +
            (C8810 - C8809 + C8812 - C8811) * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C14780 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C92333 +
            (C6838 - C6839 + C6840 - C6841) * C14781 +
            (C6842 - C6843 + C6844 - C6845) * C92226) *
               C92334 +
           ((C13098 - C13099 + C13100 - C13101) * C14780 +
            (C13102 - C13103 + C13104 - C13105) * C92333 +
            (C4028 * C3358 - C4023 * C3363 + C4030 * C3359 - C92102 * C3365) *
                C14781 +
            (C4028 * C3588 - C4023 * C3592 + C4030 * C3589 - C92102 * C3593) *
                C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C14780 +
            (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
                C92333 +
            (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C14781 +
            (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
                C92226) *
               C92334 +
           ((C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C14780 +
            (C4023 * C1599 - C4028 * C1591 + C92102 * C1600 - C4030 * C1592) *
                C92333 +
            (C4023 * C3365 - C4028 * C3359 + C92102 * C3367 - C4030 * C3360) *
                C14781 +
            (C4023 * C3593 - C4028 * C3589 + C92102 * C3594 - C4030 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C14780 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92333 +
            (C5148 - C5149 + C5150 - C5151) * C14781 +
            (C5152 - C5153 + C5154 - C5155) * C92226) *
               C92334 +
           ((C11200 - C11201 + C11202 - C11203) * C14780 +
            (C11204 - C11205 + C11206 - C11207) * C92333 +
            (C8806 - C8805 + C8808 - C8807) * C14781 +
            (C8810 - C8809 + C8812 - C8811) * C92226) *
               C92252) *
              C1372 +
          (((C11201 - C11200 + C11203 - C11202) * C14780 +
            (C11205 - C11204 + C11207 - C11206) * C92333 +
            (C8805 - C8806 + C8807 - C8808) * C14781 +
            (C8809 - C8810 + C8811 - C8812) * C92226) *
               C92334 +
           ((C11209 - C11208 + C11211 - C11210) * C14780 +
            (C11213 - C11212 + C11215 - C11214) * C92333 +
            (C14086 - C14087 + C14088 - C14089) * C14781 +
            (C14090 - C14091 + C14092 - C14093) * C92226) *
               C92252) *
              C1373 +
          ((C11228 * C14780 + C11229 * C92333 +
            (C14087 - C14086 + C14089 - C14088) * C14781 +
            (C14091 - C14090 + C14093 - C14092) * C92226) *
               C92334 +
           ((C11217 - C11216 + C11219 - C11218) * C14780 +
            (C11221 - C11220 + C11223 - C11222) * C92333 +
            (C4023 * C13751 - C4028 * C13749 + C92102 * C13753 -
             C4030 * C13750) *
                C14781 +
            (C4023 * C14083 - C4028 * C14081 + C92102 * C14084 -
             C4030 * C14082) *
                C92226) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C4023 +
            (C15075 + C15076) * C92102) *
               C92334 +
           ((C14780 * C1457 - C15036 * C1378 - C14780 * C1589 + C92333 * C1658 +
             C14781 * C3439 - C15037 * C3357 - C14781 * C3587 +
             C92226 * C3661) *
                C4023 +
            (C18338 + C18337) * C92102) *
               C92252) *
              C92150 * C790 -
          (((C14781 * C5800 - C15037 * C5701 - C14781 * C5972 + C92226 * C6057 +
             C14780 * C3440 - C15036 * C3358 - C14780 * C3588 +
             C92333 * C3662) *
                C92102 +
            (C14781 * C5799 - C15037 * C5702 - C14781 * C5971 + C92226 * C6058 +
             C14780 * C3439 - C15036 * C3357 - C14780 * C3587 +
             C92333 * C3661) *
                C4023) *
               C92252 +
           ((C17388 + C17389) * C92102 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C4023) *
               C92334) *
              C92150 * C791 +
          (((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
             C14781 * C4948 - C15037 * C4815 - C14781 * C5139 +
             C92226 * C5252) *
                C4023 +
            (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
             C14781 * C4949 - C15037 * C4814 - C14781 * C5140 +
             C92226 * C5251) *
                C92102) *
               C92334 +
           ((C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
             C14781 * C8588 - C15037 * C8454 - C14781 * C8800 +
             C92226 * C8918) *
                C4023 +
            (C14780 * C5800 - C15036 * C5701 - C14780 * C5972 + C92333 * C6057 +
             C14781 * C8589 - C15037 * C8455 - C14781 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C4023 +
            (C15075 + C15076) * C92102) *
               C92334 +
           ((C14780 * C1457 - C15036 * C1378 - C14780 * C1589 + C92333 * C1658 +
             C14781 * C3439 - C15037 * C3357 - C14781 * C3587 +
             C92226 * C3661) *
                C4023 +
            (C18338 + C18337) * C92102) *
               C92252) *
              C92150 * C92136 * C97 -
          (((C18335 + C18336) * C92102 + (C18337 + C18338) * C4023) * C92252 +
           ((C15078 + C15077) * C92102 + (C15076 + C15075) * C4023) * C92334) *
              C92150 * C92136 * C98 +
          ((C15081 * C4023 + (C15080 + C15079) * C92102) * C92334 +
           ((C18336 + C18335) * C4023 +
            (C14780 * C1460 - C15036 * C1375 - C14780 * C1592 + C92333 * C1655 +
             C14781 * C3442 - C15037 * C3360 - C14781 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C4023 +
            (C15075 + C15076) * C92102) *
               C92334 +
           ((C27066 + C27067) * C4023 + (C18338 + C18337) * C92102) * C92252) *
              C1372 -
          (((C27068 + C27069) * C92102 + (C27070 + C27071) * C4023) * C92252 +
           ((C18337 + C18338) * C92102 + (C27067 + C27066) * C4023) * C92334) *
              C1373 +
          (((C27071 + C27070) * C4023 + (C27069 + C27068) * C92102) * C92334 +
           ((C14780 * C11000 - C15036 * C10868 - C14780 * C11191 +
             C92333 * C11307 + C14781 * C13869 - C15037 * C13749 -
             C14781 * C14081 + C92226 * C14191) *
                C4023 +
            (C14780 * C11001 - C15036 * C10867 - C14780 * C11192 +
             C92333 * C11306 + C14781 * C13870 - C15037 * C13750 -
             C14781 * C14082 + C92226 * C14192) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14780 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92333 +
            (C25850 - C25851 + C25852 - C25853) * C14781 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C4023 +
           ((C19901 - C19902 + C19903 - C19904) * C14780 +
            (C20153 - C20154 + C20155 - C20156) * C92333 +
            (C22162 - C22161 + C22164 - C22163) * C14781 +
            (C22479 - C22478 + C22481 - C22480) * C92226) *
               C92102) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C14780 +
            (C26169 - C26168 + C26171 - C26170) * C92333 +
            (C25858 - C25859 + C25860 - C25861) * C14781 +
            (C26172 - C26173 + C26174 - C26175) * C92226) *
               C4023 +
           ((C22161 - C22162 + C22163 - C22164) * C14780 +
            (C22478 - C22479 + C22480 - C22481) * C92333 +
            (C25866 - C25867 + C25868 - C25869) * C14781 +
            (C26176 - C26177 + C26178 - C26179) * C92226) *
               C92102) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C14780 +
            (C26173 - C26172 + C26175 - C26174) * C92333 +
            (C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C14781 +
            (C92334 * C5329 - C19898 * C5139 + C92252 * C9018 -
             C19899 * C8800) *
                C92226) *
               C4023 +
           ((C25867 - C25866 + C25869 - C25868) * C14780 +
            (C26177 - C26176 + C26179 - C26178) * C92333 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C14781 +
            (C92334 * C5330 - C19898 * C5140 + C92252 * C9019 -
             C19899 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14780 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92333 +
            (C92334 * C942 - C19898 * C797 + C92252 * C3513 - C19899 * C3357) *
                C14781 +
            (C92334 * C1132 - C19898 * C1008 + C92252 * C3731 -
             C19899 * C3587) *
                C92226) *
               C4023 +
           ((C19901 - C19902 + C19903 - C19904) * C14780 +
            (C20153 - C20154 + C20155 - C20156) * C92333 +
            (C22162 - C22161 + C22164 - C22163) * C14781 +
            (C22479 - C22478 + C22481 - C22480) * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C14780 +
            (C20154 - C20153 + C20156 - C20155) * C92333 +
            (C22161 - C22162 + C22163 - C22164) * C14781 +
            (C22478 - C22479 + C22480 - C22481) * C92226) *
               C4023 +
           ((C19910 - C19909 + C19912 - C19911) * C14780 +
            (C20159 - C20158 + C20161 - C20160) * C92333 +
            (C22169 - C22170 + C22171 - C22172) * C14781 +
            (C22482 - C22483 + C22484 - C22485) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C19929 * C14780 + C20168 * C92333 +
            (C22170 - C22169 + C22172 - C22171) * C14781 +
            (C22483 - C22482 + C22485 - C22484) * C92226) *
               C4023 +
           ((C19918 - C19917 + C19920 - C19919) * C14780 +
            (C20163 - C20162 + C20165 - C20164) * C92333 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C14781 +
            (C92334 * C1135 - C19898 * C1011 + C92252 * C3734 -
             C19899 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14780 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92333 +
            (C25850 - C25851 + C25852 - C25853) * C14781 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C4023 +
           ((C19901 - C19902 + C19903 - C19904) * C14780 +
            (C20153 - C20154 + C20155 - C20156) * C92333 +
            (C22162 - C22161 + C22164 - C22163) * C14781 +
            (C22479 - C22478 + C22481 - C22480) * C92226) *
               C92102) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C14780 +
            (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
             C92252 * C1717) *
                C92333 +
            (C19898 * C3357 - C92334 * C3513 + C19899 * C5703 -
             C92252 * C5887) *
                C14781 +
            (C19898 * C3587 - C92334 * C3731 + C19899 * C5973 -
             C92252 * C6139) *
                C92226) *
               C4023 +
           ((C23127 - C23128 + C23129 - C23130) * C14780 +
            (C23452 - C23453 + C23454 - C23455) * C92333 +
            (C19898 * C3358 - C92334 * C3514 + C19899 * C5704 -
             C92252 * C5888) *
                C14781 +
            (C19898 * C3588 - C92334 * C3732 + C19899 * C5974 -
             C92252 * C6141) *
                C92226) *
               C92102) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C14780 +
            (C92334 * C1717 - C19898 * C1593 + C92252 * C11419 -
             C19899 * C11191) *
                C92333 +
            (C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
             C19899 * C13749) *
                C14781 +
            (C92334 * C6139 - C19898 * C5973 + C92252 * C14309 -
             C19899 * C14081) *
                C92226) *
               C4023 +
           ((C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
             C19899 * C10867) *
                C14780 +
            (C92334 * C1718 - C19898 * C1594 + C92252 * C11420 -
             C19899 * C11192) *
                C92333 +
            (C92334 * C5888 - C19898 * C5704 + C92252 * C13980 -
             C19899 * C13750) *
                C14781 +
            (C92334 * C6141 - C19898 * C5974 + C92252 * C14310 -
             C19899 * C14082) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C19898 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92334 +
            (C11200 - C11201 + C11202 - C11203) * C19899 +
            (C11506 - C11507 + C11508 - C11509) * C92252) *
               C92333 +
           ((C5148 - C5149 + C5150 - C5151) * C19898 +
            (C5426 - C5427 + C5428 - C5429) * C92334 +
            (C8806 - C8805 + C8808 - C8807) * C19899 +
            (C9128 - C9127 + C9130 - C9129) * C92252) *
               C92226) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C19898 +
            (C5427 - C5426 + C5429 - C5428) * C92334 +
            (C8805 - C8806 + C8807 - C8808) * C19899 +
            (C9127 - C9128 + C9129 - C9130) * C92252) *
               C92333 +
           ((C5157 - C5156 + C5159 - C5158) * C19898 +
            (C5432 - C5431 + C5434 - C5433) * C92334 +
            (C8813 - C8814 + C8815 - C8816) * C19899 +
            (C9131 - C9132 + C9133 - C9134) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C5176 * C19898 + C5441 * C92334 +
            (C8814 - C8813 + C8816 - C8815) * C19899 +
            (C9132 - C9131 + C9134 - C9133) * C92252) *
               C92333 +
           ((C5165 - C5164 + C5167 - C5166) * C19898 +
            (C5436 - C5435 + C5438 - C5437) * C92334 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C19899 +
            (C4023 * C9124 - C4028 * C9122 + C92102 * C9125 - C4030 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C19898 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92334 +
            (C11200 - C11201 + C11202 - C11203) * C19899 +
            (C11506 - C11507 + C11508 - C11509) * C92252) *
               C92333 +
           ((C5148 - C5149 + C5150 - C5151) * C19898 +
            (C5426 - C5427 + C5428 - C5429) * C92334 +
            (C8806 - C8805 + C8808 - C8807) * C19899 +
            (C9128 - C9127 + C9130 - C9129) * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C19898 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92334 +
            (C13098 - C13099 + C13100 - C13101) * C19899 +
            (C13422 - C13423 + C13424 - C13425) * C92252) *
               C92333 +
           ((C6838 - C6839 + C6840 - C6841) * C19898 +
            (C7176 - C7177 + C7178 - C7179) * C92334 +
            (C4028 * C3358 - C4023 * C3363 + C4030 * C3359 - C92102 * C3365) *
                C19899 +
            (C4028 * C3802 - C4023 * C3806 + C4030 * C3803 - C92102 * C3807) *
                C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C19898 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92334 +
            (C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C19899 +
            (C4023 * C1781 - C4028 * C1773 + C92102 * C1782 - C4030 * C1774) *
                C92252) *
               C92333 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C19898 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92334 +
            (C4023 * C3365 - C4028 * C3359 + C92102 * C3367 - C4030 * C3360) *
                C19899 +
            (C4023 * C3807 - C4028 * C3803 + C92102 * C3808 - C4030 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C19898 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92334 +
            (C11200 - C11201 + C11202 - C11203) * C19899 +
            (C11506 - C11507 + C11508 - C11509) * C92252) *
               C92333 +
           ((C5148 - C5149 + C5150 - C5151) * C19898 +
            (C5426 - C5427 + C5428 - C5429) * C92334 +
            (C8806 - C8805 + C8808 - C8807) * C19899 +
            (C9128 - C9127 + C9130 - C9129) * C92252) *
               C92226) *
              C1372 +
          (((C11201 - C11200 + C11203 - C11202) * C19898 +
            (C11507 - C11506 + C11509 - C11508) * C92334 +
            (C11209 - C11208 + C11211 - C11210) * C19899 +
            (C11511 - C11510 + C11513 - C11512) * C92252) *
               C92333 +
           ((C8805 - C8806 + C8807 - C8808) * C19898 +
            (C9127 - C9128 + C9129 - C9130) * C92334 +
            (C14086 - C14087 + C14088 - C14089) * C19899 +
            (C14414 - C14415 + C14416 - C14417) * C92252) *
               C92226) *
              C1373 +
          ((C11228 * C19898 + C11520 * C92334 +
            (C11217 - C11216 + C11219 - C11218) * C19899 +
            (C11515 - C11514 + C11517 - C11516) * C92252) *
               C92333 +
           ((C14087 - C14086 + C14089 - C14088) * C19898 +
            (C14415 - C14414 + C14417 - C14416) * C92334 +
            (C4023 * C13751 - C4028 * C13749 + C92102 * C13753 -
             C4030 * C13750) *
                C19899 +
            (C4023 * C14411 - C4028 * C14409 + C92102 * C14412 -
             C4030 * C14410) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C19898 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92334 +
            (C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C19899 +
            (C92333 * C1837 - C14780 * C1771 + C92226 * C3875 -
             C14781 * C3801) *
                C92252) *
               C4023 +
           ((C14783 - C14784 + C14785 - C14786) * C19898 +
            (C15312 - C15313 + C15314 - C15315) * C92334 +
            (C17998 - C17997 + C18000 - C17999) * C19899 +
            (C18636 - C18635 + C18638 - C18637) * C92252) *
               C92102) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C19898 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92334 +
            (C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
             C92226 * C5799) *
                C19899 +
            (C14780 * C3801 - C92333 * C3875 + C14781 * C6217 -
             C92226 * C6303) *
                C92252) *
               C4023 +
           ((C17038 - C17039 + C17040 - C17041) * C19898 +
            (C17691 - C17692 + C17693 - C17694) * C92334 +
            (C14780 * C3358 - C92333 * C3440 + C14781 * C5701 -
             C92226 * C5800) *
                C19899 +
            (C14780 * C3802 - C92333 * C3876 + C14781 * C6218 -
             C92226 * C6304) *
                C92252) *
               C92102) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C19898 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C92334 +
            (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C19899 +
            (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 -
             C14781 * C9122) *
                C92252) *
               C4023 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C19898 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C92334 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C19899 +
            (C92333 * C6304 - C14780 * C6218 + C92226 * C9233 -
             C14781 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C19898 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92334 +
            (C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C19899 +
            (C92333 * C1837 - C14780 * C1771 + C92226 * C3875 -
             C14781 * C3801) *
                C92252) *
               C4023 +
           ((C14783 - C14784 + C14785 - C14786) * C19898 +
            (C15312 - C15313 + C15314 - C15315) * C92334 +
            (C17998 - C17997 + C18000 - C17999) * C19899 +
            (C18636 - C18635 + C18638 - C18637) * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C19898 +
            (C15313 - C15312 + C15315 - C15314) * C92334 +
            (C17997 - C17998 + C17999 - C18000) * C19899 +
            (C18635 - C18636 + C18637 - C18638) * C92252) *
               C4023 +
           ((C14792 - C14791 + C14794 - C14793) * C19898 +
            (C15318 - C15317 + C15320 - C15319) * C92334 +
            (C18005 - C18006 + C18007 - C18008) * C19899 +
            (C18639 - C18640 + C18641 - C18642) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C14811 * C19898 + C15327 * C92334 +
            (C18006 - C18005 + C18008 - C18007) * C19899 +
            (C18640 - C18639 + C18642 - C18641) * C92252) *
               C4023 +
           ((C14800 - C14799 + C14802 - C14801) * C19898 +
            (C15322 - C15321 + C15324 - C15323) * C92334 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C19899 +
            (C92333 * C1840 - C14780 * C1774 + C92226 * C3878 -
             C14781 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C19898 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92334 +
            (C26712 - C26713 + C26714 - C26715) * C19899 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C4023 +
           ((C14783 - C14784 + C14785 - C14786) * C19898 +
            (C15312 - C15313 + C15314 - C15315) * C92334 +
            (C17998 - C17997 + C18000 - C17999) * C19899 +
            (C18636 - C18635 + C18638 - C18637) * C92252) *
               C92102) *
              C1372 +
          (((C26713 - C26712 + C26715 - C26714) * C19898 +
            (C27367 - C27366 + C27369 - C27368) * C92334 +
            (C26720 - C26721 + C26722 - C26723) * C19899 +
            (C27370 - C27371 + C27372 - C27373) * C92252) *
               C4023 +
           ((C17997 - C17998 + C17999 - C18000) * C19898 +
            (C18635 - C18636 + C18637 - C18638) * C92334 +
            (C26728 - C26729 + C26730 - C26731) * C19899 +
            (C27374 - C27375 + C27376 - C27377) * C92252) *
               C92102) *
              C1373 +
          (((C26721 - C26720 + C26723 - C26722) * C19898 +
            (C27371 - C27370 + C27373 - C27372) * C92334 +
            (C92333 * C11000 - C14780 * C10868 + C92226 * C13869 -
             C14781 * C13749) *
                C19899 +
            (C92333 * C11594 - C14780 * C11497 + C92226 * C14515 -
             C14781 * C14409) *
                C92252) *
               C4023 +
           ((C26729 - C26728 + C26731 - C26730) * C19898 +
            (C27375 - C27374 + C27377 - C27376) * C92334 +
            (C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
             C14781 * C13750) *
                C19899 +
            (C92333 * C11595 - C14780 * C11498 + C92226 * C14516 -
             C14781 * C14410) *
                C92252) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C26510 + C26511) * C92226) *
               C4023 +
           ((C20439 + C20440) * C92333 + (C22809 + C22808) * C92226) * C92102) *
              C92150 * C790 -
          (((C26512 + C26513) * C92226 + (C22808 + C22809) * C92333) * C92102 +
           ((C26514 + C26515) * C92226 + (C26511 + C26510) * C92333) * C4023) *
              C92150 * C791 +
          (((C26515 + C26514) * C92333 +
            (C19898 * C5030 - C20400 * C4815 - C19898 * C5417 + C92334 * C5596 +
             C19899 * C8690 - C20401 * C8454 - C19899 * C9122 +
             C92252 * C9332) *
                C92226) *
               C4023 +
           ((C26513 + C26512) * C92333 +
            (C19898 * C5031 - C20400 * C4814 - C19898 * C5418 + C92334 * C5595 +
             C19899 * C8691 - C20401 * C8455 - C19899 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317 +
             C19899 * C3513 - C20401 * C3357 - C19899 * C3801 +
             C92252 * C3945) *
                C92226) *
               C4023 +
           ((C20439 + C20440) * C92333 + (C22809 + C22808) * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C22806 + C22807) * C92226 + (C20442 + C20441) * C92333) * C92102 +
           ((C22808 + C22809) * C92226 + (C20440 + C20439) * C92333) * C4023) *
              C92150 * C92136 * C98 +
          ((C20445 * C92333 + (C22807 + C22806) * C92226) * C4023 +
           ((C20444 + C20443) * C92333 +
            (C19898 * C945 - C20400 * C794 - C19898 * C1193 + C92334 * C1314 +
             C19899 * C3516 - C20401 * C3360 - C19899 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C26510 + C26511) * C92226) *
               C4023 +
           ((C20439 + C20440) * C92333 + (C22809 + C22808) * C92226) * C92102) *
              C1372 -
          (((C19899 * C5888 - C20401 * C5704 - C19899 * C6220 + C92252 * C6387 +
             C19898 * C3514 - C20400 * C3358 - C19898 * C3802 +
             C92334 * C3946) *
                C92226 +
            (C23787 + C23788) * C92333) *
               C92102 +
           ((C19899 * C5887 - C20401 * C5703 - C19899 * C6219 + C92252 * C6385 +
             C19898 * C3513 - C20400 * C3357 - C19898 * C3801 +
             C92334 * C3945) *
                C92226 +
            (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 + C92252 * C1899 +
             C19898 * C1523 - C20400 * C1378 - C19898 * C1771 +
             C92334 * C1898) *
                C92333) *
               C4023) *
              C1373 +
          (((C19898 * C1527 - C20400 * C1379 - C19898 * C1775 + C92334 * C1899 +
             C19899 * C11109 - C20401 * C10868 - C19899 * C11497 +
             C92252 * C11683) *
                C92333 +
            (C19898 * C5887 - C20400 * C5703 - C19898 * C6219 + C92334 * C6385 +
             C19899 * C13979 - C20401 * C13749 - C19899 * C14409 +
             C92252 * C14619) *
                C92226) *
               C4023 +
           ((C19898 * C1528 - C20400 * C1380 - C19898 * C1776 + C92334 * C1900 +
             C19899 * C11110 - C20401 * C10867 - C19899 * C11498 +
             C92252 * C11682) *
                C92333 +
            (C19898 * C5888 - C20400 * C5704 - C19898 * C6220 + C92334 * C6387 +
             C19899 * C13980 - C20401 * C13750 - C19899 * C14410 +
             C92252 * C14620) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
              C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                 C92334 +
             (C10920 + C10921) * C92252) *
                C92333 +
            ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
               C2664 -
           (((C13771 + C13770) * C92252 + (C8489 + C8490) * C92334) * C92226 +
            ((C10923 + C10922) * C92252 + (C10921 + C10920) * C92334) *
                C92333) *
               C2665) *
              C92136 * C1971 +
          ((((C12776 + C12777) * C92334 + (C12778 + C12779) * C92252) * C92333 +
            ((C27618 + C27619) * C92334 +
             (C4028 * C5713 - C4029 * C5704 - C4028 * C5714 + C4023 * C5722 +
              C4030 * C11785 - C4031 * C11784 - C4030 * C11786 +
              C92102 * C11787) *
                 C92252) *
                C92226) *
               C2665 -
           (((C27619 + C27618) * C92252 + (C6517 + C6516) * C92334) * C92226 +
            ((C12777 + C12776) * C92252 +
             (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
              C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                 C92334) *
                C92333) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C4028 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C4023 +
             (C14783 - C14784 + C14785 - C14786) * C4030 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C92334 +
            ((C26712 - C26713 + C26714 - C26715) * C4028 +
             (C26716 - C26717 + C26718 - C26719) * C4023 + C28986 * C4030 +
             C28987 * C92102) *
                C92252) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C4028 +
             (C26717 - C26716 + C26719 - C26718) * C4023 + C28988 * C4030 +
             C28989 * C92102) *
                C92334 +
            ((C26720 - C26721 + C26722 - C26723) * C4028 +
             (C26724 - C26725 + C26726 - C26727) * C4023 +
             (C26728 - C26729 + C26730 - C26731) * C4030 +
             (C26732 - C26733 + C26734 - C26735) * C92102) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C4028 +
             (C14788 - C14787 + C14790 - C14789) * C4023 +
             (C14792 - C14791 + C14794 - C14793) * C4030 +
             (C14796 - C14795 + C14798 - C14797) * C92102) *
                C92334 +
            (C28988 * C4028 + C28989 * C4023 +
             (C18005 - C18006 + C18007 - C18008) * C4030 +
             (C18009 - C18010 + C18011 - C18012) * C92102) *
                C92252) *
               C2664 +
           ((C28986 * C4028 + C28987 * C4023 +
             (C18006 - C18005 + C18008 - C18007) * C4030 +
             (C18010 - C18009 + C18012 - C18011) * C92102) *
                C92334 +
            ((C26729 - C26728 + C26731 - C26730) * C4028 +
             (C26733 - C26732 + C26735 - C26734) * C4023 +
             (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
              C14781 * C11784) *
                 C4030 +
             (C92333 * C1471 - C14780 * C1396 + C92226 * C11887 -
              C14781 * C11786) *
                 C92102) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C4028 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C4023 +
             (C19901 - C19902 + C19903 - C19904) * C4030 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C92333 +
            ((C25850 - C25851 + C25852 - C25853) * C4028 +
             (C25854 - C25855 + C25856 - C25857) * C4023 + C27896 * C4030 +
             C27897 * C92102) *
                C92226) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C4028 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C4023 +
             (C23127 - C23128 + C23129 - C23130) * C4030 +
             (C23131 - C23132 + C23133 - C23134) * C92102) *
                C92333 +
            ((C19898 * C3357 - C92334 * C3513 + C19899 * C5703 -
              C92252 * C5887) *
                 C4028 +
             (C19898 * C3362 - C92334 * C3517 + C19899 * C5712 -
              C92252 * C5893) *
                 C4023 +
             (C29120 - C29121 + C29122 - C29123) * C4030 +
             (C29124 - C29125 + C29126 - C29127) * C92102) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C4028 +
             (C19906 - C19905 + C19908 - C19907) * C4023 +
             (C19910 - C19909 + C19912 - C19911) * C4030 +
             (C19914 - C19913 + C19916 - C19915) * C92102) *
                C92333 +
            (C27898 * C4028 + C27899 * C4023 +
             (C22169 - C22170 + C22171 - C22172) * C4030 +
             (C22173 - C22174 + C22175 - C22176) * C92102) *
                C92226) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C4028 +
             (C23132 - C23131 + C23134 - C23133) * C4023 +
             (C23136 - C23135 + C23138 - C23137) * C4030 +
             (C23140 - C23139 + C23142 - C23141) * C92102) *
                C92333 +
            ((C29121 - C29120 + C29123 - C29122) * C4028 +
             (C29125 - C29124 + C29127 - C29126) * C4023 +
             (C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
              C19899 * C11784) *
                 C4030 +
             (C92334 * C3519 - C19898 * C3366 + C92252 * C11995 -
              C19899 * C11786) *
                 C92102) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C14780 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92333 +
             (C5148 - C5149 + C5150 - C5151) * C14781 +
             (C5152 - C5153 + C5154 - C5155) * C92226) *
                C92334 +
            ((C11200 - C11201 + C11202 - C11203) * C14780 +
             (C11204 - C11205 + C11206 - C11207) * C92333 +
             (C8806 - C8805 + C8808 - C8807) * C14781 +
             (C8810 - C8809 + C8812 - C8811) * C92226) *
                C92252) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C14780 +
             (C11205 - C11204 + C11207 - C11206) * C92333 +
             (C8805 - C8806 + C8807 - C8808) * C14781 +
             (C8809 - C8810 + C8811 - C8812) * C92226) *
                C92334 +
            ((C11209 - C11208 + C11211 - C11210) * C14780 +
             (C11213 - C11212 + C11215 - C11214) * C92333 +
             (C14086 - C14087 + C14088 - C14089) * C14781 +
             (C14090 - C14091 + C14092 - C14093) * C92226) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C14780 +
             (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                 C92333 +
             (C6838 - C6839 + C6840 - C6841) * C14781 +
             (C6842 - C6843 + C6844 - C6845) * C92226) *
                C92334 +
            ((C13098 - C13099 + C13100 - C13101) * C14780 +
             (C13102 - C13103 + C13104 - C13105) * C92333 +
             (C28030 - C28031 + C28032 - C28033) * C14781 +
             (C28034 - C28035 + C28036 - C28037) * C92226) *
                C92252) *
               C2664 +
           (((C13099 - C13098 + C13101 - C13100) * C14780 +
             (C13103 - C13102 + C13105 - C13104) * C92333 +
             (C28031 - C28030 + C28033 - C28032) * C14781 +
             (C28035 - C28034 + C28037 - C28036) * C92226) *
                C92334 +
            ((C13107 - C13106 + C13109 - C13108) * C14780 +
             (C13111 - C13110 + C13113 - C13112) * C92333 +
             (C4023 * C5713 - C4028 * C5704 + C92102 * C11785 -
              C4030 * C11784) *
                 C14781 +
             (C4023 * C5980 - C4028 * C5974 + C92102 * C12107 -
              C4030 * C12106) *
                 C92226) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C4023 +
             (C15075 + C15076) * C92102) *
                C92334 +
            ((C27066 + C27067) * C4023 + C29388 * C92102) * C92252) *
               C2664 -
           (((C27068 + C27069) * C92102 + (C27070 + C27071) * C4023) * C92252 +
            (C29389 * C92102 + (C27067 + C27066) * C4023) * C92334) *
               C2665) *
              C92136 * C1971 +
          (((C29388 * C4023 + (C18336 + C18335) * C92102) * C92334 +
            ((C27069 + C27068) * C4023 +
             (C14780 * C1463 - C15036 * C1381 - C14780 * C1595 +
              C92333 * C1661 + C14781 * C11886 - C15037 * C11784 -
              C14781 * C12106 + C92226 * C12206) *
                 C92102) *
                C92252) *
               C2665 -
           (((C18335 + C18336) * C92102 + C29389 * C4023) * C92252 +
            ((C15078 + C15077) * C92102 + (C15076 + C15075) * C4023) * C92334) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C14780 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92333 +
             (C25850 - C25851 + C25852 - C25853) * C14781 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C4023 +
            ((C19901 - C19902 + C19903 - C19904) * C14780 +
             (C20153 - C20154 + C20155 - C20156) * C92333 + C27896 * C14781 +
             C28316 * C92226) *
                C92102) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C14780 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C92333 +
             (C19898 * C3357 - C92334 * C3513 + C19899 * C5703 -
              C92252 * C5887) *
                 C14781 +
             (C19898 * C3587 - C92334 * C3731 + C19899 * C5973 -
              C92252 * C6139) *
                 C92226) *
                C4023 +
            ((C23127 - C23128 + C23129 - C23130) * C14780 +
             (C23452 - C23453 + C23454 - C23455) * C92333 +
             (C29120 - C29121 + C29122 - C29123) * C14781 +
             (C29520 - C29521 + C29522 - C29523) * C92226) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C14780 +
             (C20154 - C20153 + C20156 - C20155) * C92333 + C27898 * C14781 +
             C28317 * C92226) *
                C4023 +
            ((C19910 - C19909 + C19912 - C19911) * C14780 +
             (C20159 - C20158 + C20161 - C20160) * C92333 +
             (C22169 - C22170 + C22171 - C22172) * C14781 +
             (C22482 - C22483 + C22484 - C22485) * C92226) *
                C92102) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C14780 +
             (C23453 - C23452 + C23455 - C23454) * C92333 +
             (C29121 - C29120 + C29123 - C29122) * C14781 +
             (C29521 - C29520 + C29523 - C29522) * C92226) *
                C4023 +
            ((C23136 - C23135 + C23138 - C23137) * C14780 +
             (C23457 - C23456 + C23459 - C23458) * C92333 +
             (C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
              C19899 * C11784) *
                 C14781 +
             (C92334 * C3733 - C19898 * C3589 + C92252 * C12319 -
              C19899 * C12106) *
                 C92226) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C19898 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92334 +
             (C11200 - C11201 + C11202 - C11203) * C19899 +
             (C11506 - C11507 + C11508 - C11509) * C92252) *
                C92333 +
            ((C5148 - C5149 + C5150 - C5151) * C19898 +
             (C5426 - C5427 + C5428 - C5429) * C92334 +
             (C8806 - C8805 + C8808 - C8807) * C19899 +
             (C9128 - C9127 + C9130 - C9129) * C92252) *
                C92226) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C19898 +
             (C11507 - C11506 + C11509 - C11508) * C92334 +
             (C11209 - C11208 + C11211 - C11210) * C19899 +
             (C11511 - C11510 + C11513 - C11512) * C92252) *
                C92333 +
            ((C8805 - C8806 + C8807 - C8808) * C19898 +
             (C9127 - C9128 + C9129 - C9130) * C92334 +
             (C14086 - C14087 + C14088 - C14089) * C19899 +
             (C14414 - C14415 + C14416 - C14417) * C92252) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C19898 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92334 +
             (C13098 - C13099 + C13100 - C13101) * C19899 +
             (C13422 - C13423 + C13424 - C13425) * C92252) *
                C92333 +
            ((C6838 - C6839 + C6840 - C6841) * C19898 +
             (C7176 - C7177 + C7178 - C7179) * C92334 +
             (C28030 - C28031 + C28032 - C28033) * C19899 +
             (C28448 - C28449 + C28450 - C28451) * C92252) *
                C92226) *
               C2664 +
           (((C13099 - C13098 + C13101 - C13100) * C19898 +
             (C13423 - C13422 + C13425 - C13424) * C92334 +
             (C13107 - C13106 + C13109 - C13108) * C19899 +
             (C13427 - C13426 + C13429 - C13428) * C92252) *
                C92333 +
            ((C28031 - C28030 + C28033 - C28032) * C19898 +
             (C28449 - C28448 + C28451 - C28450) * C92334 +
             (C4023 * C5713 - C4028 * C5704 + C92102 * C11785 -
              C4030 * C11784) *
                 C19899 +
             (C4023 * C6226 - C4028 * C6220 + C92102 * C12425 -
              C4030 * C12424) *
                 C92252) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C19898 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C92334 +
             (C26712 - C26713 + C26714 - C26715) * C19899 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C4023 +
            ((C14783 - C14784 + C14785 - C14786) * C19898 +
             (C15312 - C15313 + C15314 - C15315) * C92334 + C28986 * C19899 +
             C29788 * C92252) *
                C92102) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C19898 +
             (C27367 - C27366 + C27369 - C27368) * C92334 +
             (C26720 - C26721 + C26722 - C26723) * C19899 +
             (C27370 - C27371 + C27372 - C27373) * C92252) *
                C4023 +
            (C28988 * C19898 + C29789 * C92334 +
             (C26728 - C26729 + C26730 - C26731) * C19899 +
             (C27374 - C27375 + C27376 - C27377) * C92252) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C19898 +
             (C15313 - C15312 + C15315 - C15314) * C92334 + C28988 * C19899 +
             C29789 * C92252) *
                C4023 +
            ((C14792 - C14791 + C14794 - C14793) * C19898 +
             (C15318 - C15317 + C15320 - C15319) * C92334 +
             (C18005 - C18006 + C18007 - C18008) * C19899 +
             (C18639 - C18640 + C18641 - C18642) * C92252) *
                C92102) *
               C2664 +
           ((C28986 * C19898 + C29788 * C92334 +
             (C26729 - C26728 + C26731 - C26730) * C19899 +
             (C27375 - C27374 + C27377 - C27376) * C92252) *
                C4023 +
            ((C18006 - C18005 + C18008 - C18007) * C19898 +
             (C18640 - C18639 + C18642 - C18641) * C92334 +
             (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
              C14781 * C11784) *
                 C19899 +
             (C92333 * C1843 - C14780 * C1777 + C92226 * C12524 -
              C14781 * C12424) *
                 C92252) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C26510 + C26511) * C92226) *
                C4023 +
            ((C20439 + C20440) * C92333 + C28716 * C92226) * C92102) *
               C2664 -
           (((C29932 + C29933) * C92226 + (C23787 + C23788) * C92333) * C92102 +
            ((C19899 * C5887 - C20401 * C5703 - C19899 * C6219 +
              C92252 * C6385 + C19898 * C3513 - C20400 * C3357 -
              C19898 * C3801 + C92334 * C3945) *
                 C92226 +
             (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
              C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
              C19898 * C1771 + C92334 * C1898) *
                 C92333) *
                C4023) *
               C2665) *
              C92136 * C1971 +
          ((((C23788 + C23787) * C92333 + (C29933 + C29932) * C92226) * C4023 +
            ((C23786 + C23785) * C92333 +
             (C19898 * C3515 - C20400 * C3359 - C19898 * C3803 +
              C92334 * C3947 + C19899 * C11994 - C20401 * C11784 -
              C19899 * C12424 + C92252 * C12627) *
                 C92226) *
                C92102) *
               C2665 -
           (((C22806 + C22807) * C92226 + (C20442 + C20441) * C92333) * C92102 +
            (C28717 * C92226 + (C20440 + C20439) * C92333) * C4023) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92334 +
            (C10920 + C10921) * C92252) *
               C92333 +
           ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C4030 * C3365 - C4031 * C3359 - C4030 * C3366 + C92102 * C3371 +
             C4028 * C3363 - C4029 * C3358 - C4028 * C3364 + C4023 * C3370) *
                C92252 +
            (C6517 + C6516) * C92334) *
               C92226 +
           ((C12777 + C12776) * C92252 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92334) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
             C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
                C92334 +
            (C4028 * C1385 - C4029 * C1376 - C4028 * C1386 + C4023 * C1400 +
             C4030 * C1383 - C4031 * C1375 - C4030 * C1384 + C92102 * C1399) *
                C92252) *
               C92333 +
           ((C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
             C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
                C92334 +
            (C4028 * C3365 - C4029 * C3359 - C4028 * C3366 + C4023 * C3371 +
             C4030 * C3367 - C4031 * C3360 - C4030 * C3368 + C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92334 +
            (C10920 + C10921) * C92252) *
               C92333 +
           ((C4867 + C4868) * C92334 + (C8490 + C8489) * C92252) * C92226) *
              C92150 * C790 -
          (((C8487 + C8488) * C92252 + (C4870 + C4869) * C92334) * C92226 +
           ((C8489 + C8490) * C92252 + (C4868 + C4867) * C92334) * C92333) *
              C92150 * C791 +
          ((C4873 * C92334 + (C8488 + C8487) * C92252) * C92333 +
           ((C4872 + C4871) * C92334 +
            (C4028 * C8456 - C4029 * C8454 - C4028 * C8457 + C4023 * C8460 +
             C4030 * C8458 - C4031 * C8455 - C4030 * C8459 + C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C4028 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C4023 +
            (C14783 - C14784 + C14785 - C14786) * C4030 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C92334 +
           ((C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C4028 +
            (C92333 * C1465 - C14780 * C1390 + C92226 * C3443 -
             C14781 * C3362) *
                C4023 +
            (C17998 - C17997 + C18000 - C17999) * C4030 +
            (C18002 - C18001 + C18004 - C18003) * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C4028 +
            (C14788 - C14787 + C14790 - C14789) * C4023 +
            (C14792 - C14791 + C14794 - C14793) * C4030 +
            (C14796 - C14795 + C14798 - C14797) * C92102) *
               C92334 +
           ((C17997 - C17998 + C17999 - C18000) * C4028 +
            (C18001 - C18002 + C18003 - C18004) * C4023 +
            (C18005 - C18006 + C18007 - C18008) * C4030 +
            (C18009 - C18010 + C18011 - C18012) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C14811 * C4028 + C14812 * C4023 +
            (C14800 - C14799 + C14802 - C14801) * C4030 +
            (C14804 - C14803 + C14806 - C14805) * C92102) *
               C92334 +
           ((C18006 - C18005 + C18008 - C18007) * C4028 +
            (C18010 - C18009 + C18012 - C18011) * C4023 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C4030 +
            (C92333 * C1468 - C14780 * C1384 + C92226 * C3446 -
             C14781 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C4028 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C4023 +
            (C14783 - C14784 + C14785 - C14786) * C4030 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C92334 +
           ((C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C4028 +
            (C92333 * C1465 - C14780 * C1390 + C92226 * C3443 -
             C14781 * C3362) *
                C4023 +
            (C17998 - C17997 + C18000 - C17999) * C4030 +
            (C18002 - C18001 + C18004 - C18003) * C92102) *
               C92252) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C4028 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C4023 +
            (C17038 - C17039 + C17040 - C17041) * C4030 +
            (C17042 - C17043 + C17044 - C17045) * C92102) *
               C92334 +
           ((C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
             C92226 * C5799) *
                C4028 +
            (C14780 * C3362 - C92333 * C3443 + C14781 * C5710 -
             C92226 * C5805) *
                C4023 +
            (C14780 * C3358 - C92333 * C3440 + C14781 * C5701 -
             C92226 * C5800) *
                C4030 +
            (C14780 * C3364 - C92333 * C3444 + C14781 * C5708 -
             C92226 * C5806) *
                C92102) *
               C92252) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C4028 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C4023 +
            (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C4030 +
            (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
                C92102) *
               C92334 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C4028 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C4023 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C4030 +
            (C92333 * C5806 - C14780 * C5708 + C92226 * C8591 -
             C14781 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C4028 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C4023 +
            (C19901 - C19902 + C19903 - C19904) * C4030 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C92333 +
           ((C92334 * C942 - C19898 * C797 + C92252 * C3513 - C19899 * C3357) *
                C4028 +
            (C92334 * C950 - C19898 * C809 + C92252 * C3517 - C19899 * C3362) *
                C4023 +
            (C22162 - C22161 + C22164 - C22163) * C4030 +
            (C22166 - C22165 + C22168 - C22167) * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C4028 +
            (C19906 - C19905 + C19908 - C19907) * C4023 +
            (C19910 - C19909 + C19912 - C19911) * C4030 +
            (C19914 - C19913 + C19916 - C19915) * C92102) *
               C92333 +
           ((C22161 - C22162 + C22163 - C22164) * C4028 +
            (C22165 - C22166 + C22167 - C22168) * C4023 +
            (C22169 - C22170 + C22171 - C22172) * C4030 +
            (C22173 - C22174 + C22175 - C22176) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C19929 * C4028 + C19930 * C4023 +
            (C19918 - C19917 + C19920 - C19919) * C4030 +
            (C19922 - C19921 + C19924 - C19923) * C92102) *
               C92333 +
           ((C22170 - C22169 + C22172 - C22171) * C4028 +
            (C22174 - C22173 + C22176 - C22175) * C4023 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C4030 +
            (C92334 * C953 - C19898 * C803 + C92252 * C3520 - C19899 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C4028 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C4023 +
            (C19901 - C19902 + C19903 - C19904) * C4030 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C92333 +
           ((C25850 - C25851 + C25852 - C25853) * C4028 +
            (C25854 - C25855 + C25856 - C25857) * C4023 +
            (C22162 - C22161 + C22164 - C22163) * C4030 +
            (C22166 - C22165 + C22168 - C22167) * C92102) *
               C92226) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C4028 +
            (C25855 - C25854 + C25857 - C25856) * C4023 +
            (C22161 - C22162 + C22163 - C22164) * C4030 +
            (C22165 - C22166 + C22167 - C22168) * C92102) *
               C92333 +
           ((C25858 - C25859 + C25860 - C25861) * C4028 +
            (C25862 - C25863 + C25864 - C25865) * C4023 +
            (C25866 - C25867 + C25868 - C25869) * C4030 +
            (C25870 - C25871 + C25872 - C25873) * C92102) *
               C92226) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C4028 +
            (C25863 - C25862 + C25865 - C25864) * C4023 +
            (C25867 - C25866 + C25869 - C25868) * C4030 +
            (C25871 - C25870 + C25873 - C25872) * C92102) *
               C92333 +
           ((C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C4028 +
            (C92334 * C5034 - C19898 * C4821 + C92252 * C8692 -
             C19899 * C8457) *
                C4023 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C4030 +
            (C92334 * C5035 - C19898 * C4819 + C92252 * C8693 -
             C19899 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C14780 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92333 +
            (C5148 - C5149 + C5150 - C5151) * C14781 +
            (C5152 - C5153 + C5154 - C5155) * C92226) *
               C92334 +
           ((C11200 - C11201 + C11202 - C11203) * C14780 +
            (C11204 - C11205 + C11206 - C11207) * C92333 +
            (C8806 - C8805 + C8808 - C8807) * C14781 +
            (C8810 - C8809 + C8812 - C8811) * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C14780 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C92333 +
            (C6838 - C6839 + C6840 - C6841) * C14781 +
            (C6842 - C6843 + C6844 - C6845) * C92226) *
               C92334 +
           ((C13098 - C13099 + C13100 - C13101) * C14780 +
            (C13102 - C13103 + C13104 - C13105) * C92333 +
            (C4028 * C3358 - C4023 * C3363 + C4030 * C3359 - C92102 * C3365) *
                C14781 +
            (C4028 * C3588 - C4023 * C3592 + C4030 * C3589 - C92102 * C3593) *
                C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C14780 +
            (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
                C92333 +
            (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C14781 +
            (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
                C92226) *
               C92334 +
           ((C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C14780 +
            (C4023 * C1599 - C4028 * C1591 + C92102 * C1600 - C4030 * C1592) *
                C92333 +
            (C4023 * C3365 - C4028 * C3359 + C92102 * C3367 - C4030 * C3360) *
                C14781 +
            (C4023 * C3593 - C4028 * C3589 + C92102 * C3594 - C4030 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C14780 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92333 +
            (C5148 - C5149 + C5150 - C5151) * C14781 +
            (C5152 - C5153 + C5154 - C5155) * C92226) *
               C92334 +
           ((C11200 - C11201 + C11202 - C11203) * C14780 +
            (C11204 - C11205 + C11206 - C11207) * C92333 +
            (C8806 - C8805 + C8808 - C8807) * C14781 +
            (C8810 - C8809 + C8812 - C8811) * C92226) *
               C92252) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C14780 +
            (C5153 - C5152 + C5155 - C5154) * C92333 +
            (C5157 - C5156 + C5159 - C5158) * C14781 +
            (C5161 - C5160 + C5163 - C5162) * C92226) *
               C92334 +
           ((C8805 - C8806 + C8807 - C8808) * C14780 +
            (C8809 - C8810 + C8811 - C8812) * C92333 +
            (C8813 - C8814 + C8815 - C8816) * C14781 +
            (C8817 - C8818 + C8819 - C8820) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C5176 * C14780 + C5177 * C92333 +
            (C5165 - C5164 + C5167 - C5166) * C14781 +
            (C5169 - C5168 + C5171 - C5170) * C92226) *
               C92334 +
           ((C8814 - C8813 + C8816 - C8815) * C14780 +
            (C8818 - C8817 + C8820 - C8819) * C92333 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C14781 +
            (C4023 * C8802 - C4028 * C8800 + C92102 * C8803 - C4030 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C4023 +
            (C15075 + C15076) * C92102) *
               C92334 +
           ((C14780 * C1457 - C15036 * C1378 - C14780 * C1589 + C92333 * C1658 +
             C14781 * C3439 - C15037 * C3357 - C14781 * C3587 +
             C92226 * C3661) *
                C4023 +
            (C18338 + C18337) * C92102) *
               C92252) *
              C92150 * C92136 * C97 -
          (((C18335 + C18336) * C92102 + (C18337 + C18338) * C4023) * C92252 +
           ((C15078 + C15077) * C92102 + (C15076 + C15075) * C4023) * C92334) *
              C92150 * C92136 * C98 +
          ((C15081 * C4023 + (C15080 + C15079) * C92102) * C92334 +
           ((C18336 + C18335) * C4023 +
            (C14780 * C1460 - C15036 * C1375 - C14780 * C1592 + C92333 * C1655 +
             C14781 * C3442 - C15037 * C3360 - C14781 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C4023 +
            (C15075 + C15076) * C92102) *
               C92334 +
           ((C14780 * C1457 - C15036 * C1378 - C14780 * C1589 + C92333 * C1658 +
             C14781 * C3439 - C15037 * C3357 - C14781 * C3587 +
             C92226 * C3661) *
                C4023 +
            (C18338 + C18337) * C92102) *
               C92252) *
              C92150 * C790 -
          (((C14781 * C5800 - C15037 * C5701 - C14781 * C5972 + C92226 * C6057 +
             C14780 * C3440 - C15036 * C3358 - C14780 * C3588 +
             C92333 * C3662) *
                C92102 +
            (C14781 * C5799 - C15037 * C5702 - C14781 * C5971 + C92226 * C6058 +
             C14780 * C3439 - C15036 * C3357 - C14780 * C3587 +
             C92333 * C3661) *
                C4023) *
               C92252 +
           ((C17388 + C17389) * C92102 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C4023) *
               C92334) *
              C92150 * C791 +
          (((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
             C14781 * C4948 - C15037 * C4815 - C14781 * C5139 +
             C92226 * C5252) *
                C4023 +
            (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
             C14781 * C4949 - C15037 * C4814 - C14781 * C5140 +
             C92226 * C5251) *
                C92102) *
               C92334 +
           ((C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
             C14781 * C8588 - C15037 * C8454 - C14781 * C8800 +
             C92226 * C8918) *
                C4023 +
            (C14780 * C5800 - C15036 * C5701 - C14780 * C5972 + C92333 * C6057 +
             C14781 * C8589 - C15037 * C8455 - C14781 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14780 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92333 +
            (C92334 * C942 - C19898 * C797 + C92252 * C3513 - C19899 * C3357) *
                C14781 +
            (C92334 * C1132 - C19898 * C1008 + C92252 * C3731 -
             C19899 * C3587) *
                C92226) *
               C4023 +
           ((C19901 - C19902 + C19903 - C19904) * C14780 +
            (C20153 - C20154 + C20155 - C20156) * C92333 +
            (C22162 - C22161 + C22164 - C22163) * C14781 +
            (C22479 - C22478 + C22481 - C22480) * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C14780 +
            (C20154 - C20153 + C20156 - C20155) * C92333 +
            (C22161 - C22162 + C22163 - C22164) * C14781 +
            (C22478 - C22479 + C22480 - C22481) * C92226) *
               C4023 +
           ((C19910 - C19909 + C19912 - C19911) * C14780 +
            (C20159 - C20158 + C20161 - C20160) * C92333 +
            (C22169 - C22170 + C22171 - C22172) * C14781 +
            (C22482 - C22483 + C22484 - C22485) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C19929 * C14780 + C20168 * C92333 +
            (C22170 - C22169 + C22172 - C22171) * C14781 +
            (C22483 - C22482 + C22485 - C22484) * C92226) *
               C4023 +
           ((C19918 - C19917 + C19920 - C19919) * C14780 +
            (C20163 - C20162 + C20165 - C20164) * C92333 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C14781 +
            (C92334 * C1135 - C19898 * C1011 + C92252 * C3734 -
             C19899 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14780 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92333 +
            (C25850 - C25851 + C25852 - C25853) * C14781 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C4023 +
           ((C19901 - C19902 + C19903 - C19904) * C14780 +
            (C20153 - C20154 + C20155 - C20156) * C92333 +
            (C22162 - C22161 + C22164 - C22163) * C14781 +
            (C22479 - C22478 + C22481 - C22480) * C92226) *
               C92102) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C14780 +
            (C26169 - C26168 + C26171 - C26170) * C92333 +
            (C25858 - C25859 + C25860 - C25861) * C14781 +
            (C26172 - C26173 + C26174 - C26175) * C92226) *
               C4023 +
           ((C22161 - C22162 + C22163 - C22164) * C14780 +
            (C22478 - C22479 + C22480 - C22481) * C92333 +
            (C25866 - C25867 + C25868 - C25869) * C14781 +
            (C26176 - C26177 + C26178 - C26179) * C92226) *
               C92102) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C14780 +
            (C26173 - C26172 + C26175 - C26174) * C92333 +
            (C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C14781 +
            (C92334 * C5329 - C19898 * C5139 + C92252 * C9018 -
             C19899 * C8800) *
                C92226) *
               C4023 +
           ((C25867 - C25866 + C25869 - C25868) * C14780 +
            (C26177 - C26176 + C26179 - C26178) * C92333 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C14781 +
            (C92334 * C5330 - C19898 * C5140 + C92252 * C9019 -
             C19899 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C19898 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92334 +
            (C11200 - C11201 + C11202 - C11203) * C19899 +
            (C11506 - C11507 + C11508 - C11509) * C92252) *
               C92333 +
           ((C5148 - C5149 + C5150 - C5151) * C19898 +
            (C5426 - C5427 + C5428 - C5429) * C92334 +
            (C8806 - C8805 + C8808 - C8807) * C19899 +
            (C9128 - C9127 + C9130 - C9129) * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C19898 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92334 +
            (C13098 - C13099 + C13100 - C13101) * C19899 +
            (C13422 - C13423 + C13424 - C13425) * C92252) *
               C92333 +
           ((C6838 - C6839 + C6840 - C6841) * C19898 +
            (C7176 - C7177 + C7178 - C7179) * C92334 +
            (C4028 * C3358 - C4023 * C3363 + C4030 * C3359 - C92102 * C3365) *
                C19899 +
            (C4028 * C3802 - C4023 * C3806 + C4030 * C3803 - C92102 * C3807) *
                C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C19898 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92334 +
            (C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C19899 +
            (C4023 * C1781 - C4028 * C1773 + C92102 * C1782 - C4030 * C1774) *
                C92252) *
               C92333 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C19898 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92334 +
            (C4023 * C3365 - C4028 * C3359 + C92102 * C3367 - C4030 * C3360) *
                C19899 +
            (C4023 * C3807 - C4028 * C3803 + C92102 * C3808 - C4030 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C19898 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92334 +
            (C11200 - C11201 + C11202 - C11203) * C19899 +
            (C11506 - C11507 + C11508 - C11509) * C92252) *
               C92333 +
           ((C5148 - C5149 + C5150 - C5151) * C19898 +
            (C5426 - C5427 + C5428 - C5429) * C92334 +
            (C8806 - C8805 + C8808 - C8807) * C19899 +
            (C9128 - C9127 + C9130 - C9129) * C92252) *
               C92226) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C19898 +
            (C5427 - C5426 + C5429 - C5428) * C92334 +
            (C8805 - C8806 + C8807 - C8808) * C19899 +
            (C9127 - C9128 + C9129 - C9130) * C92252) *
               C92333 +
           ((C5157 - C5156 + C5159 - C5158) * C19898 +
            (C5432 - C5431 + C5434 - C5433) * C92334 +
            (C8813 - C8814 + C8815 - C8816) * C19899 +
            (C9131 - C9132 + C9133 - C9134) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C5176 * C19898 + C5441 * C92334 +
            (C8814 - C8813 + C8816 - C8815) * C19899 +
            (C9132 - C9131 + C9134 - C9133) * C92252) *
               C92333 +
           ((C5165 - C5164 + C5167 - C5166) * C19898 +
            (C5436 - C5435 + C5438 - C5437) * C92334 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C19899 +
            (C4023 * C9124 - C4028 * C9122 + C92102 * C9125 - C4030 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C19898 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92334 +
            (C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C19899 +
            (C92333 * C1837 - C14780 * C1771 + C92226 * C3875 -
             C14781 * C3801) *
                C92252) *
               C4023 +
           ((C14783 - C14784 + C14785 - C14786) * C19898 +
            (C15312 - C15313 + C15314 - C15315) * C92334 +
            (C17998 - C17997 + C18000 - C17999) * C19899 +
            (C18636 - C18635 + C18638 - C18637) * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C19898 +
            (C15313 - C15312 + C15315 - C15314) * C92334 +
            (C17997 - C17998 + C17999 - C18000) * C19899 +
            (C18635 - C18636 + C18637 - C18638) * C92252) *
               C4023 +
           ((C14792 - C14791 + C14794 - C14793) * C19898 +
            (C15318 - C15317 + C15320 - C15319) * C92334 +
            (C18005 - C18006 + C18007 - C18008) * C19899 +
            (C18639 - C18640 + C18641 - C18642) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C14811 * C19898 + C15327 * C92334 +
            (C18006 - C18005 + C18008 - C18007) * C19899 +
            (C18640 - C18639 + C18642 - C18641) * C92252) *
               C4023 +
           ((C14800 - C14799 + C14802 - C14801) * C19898 +
            (C15322 - C15321 + C15324 - C15323) * C92334 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C19899 +
            (C92333 * C1840 - C14780 * C1774 + C92226 * C3878 -
             C14781 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C19898 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92334 +
            (C92333 * C1457 - C14780 * C1378 + C92226 * C3439 -
             C14781 * C3357) *
                C19899 +
            (C92333 * C1837 - C14780 * C1771 + C92226 * C3875 -
             C14781 * C3801) *
                C92252) *
               C4023 +
           ((C14783 - C14784 + C14785 - C14786) * C19898 +
            (C15312 - C15313 + C15314 - C15315) * C92334 +
            (C17998 - C17997 + C18000 - C17999) * C19899 +
            (C18636 - C18635 + C18638 - C18637) * C92252) *
               C92102) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C19898 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92334 +
            (C14780 * C3357 - C92333 * C3439 + C14781 * C5702 -
             C92226 * C5799) *
                C19899 +
            (C14780 * C3801 - C92333 * C3875 + C14781 * C6217 -
             C92226 * C6303) *
                C92252) *
               C4023 +
           ((C17038 - C17039 + C17040 - C17041) * C19898 +
            (C17691 - C17692 + C17693 - C17694) * C92334 +
            (C14780 * C3358 - C92333 * C3440 + C14781 * C5701 -
             C92226 * C5800) *
                C19899 +
            (C14780 * C3802 - C92333 * C3876 + C14781 * C6218 -
             C92226 * C6304) *
                C92252) *
               C92102) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C19898 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C92334 +
            (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C19899 +
            (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 -
             C14781 * C9122) *
                C92252) *
               C4023 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C19898 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C92334 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C19899 +
            (C92333 * C6304 - C14780 * C6218 + C92226 * C9233 -
             C14781 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317 +
             C19899 * C3513 - C20401 * C3357 - C19899 * C3801 +
             C92252 * C3945) *
                C92226) *
               C4023 +
           ((C20439 + C20440) * C92333 + (C22809 + C22808) * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C22806 + C22807) * C92226 + (C20442 + C20441) * C92333) * C92102 +
           ((C22808 + C22809) * C92226 + (C20440 + C20439) * C92333) * C4023) *
              C92150 * C92136 * C98 +
          ((C20445 * C92333 + (C22807 + C22806) * C92226) * C4023 +
           ((C20444 + C20443) * C92333 +
            (C19898 * C945 - C20400 * C794 - C19898 * C1193 + C92334 * C1314 +
             C19899 * C3516 - C20401 * C3360 - C19899 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C26510 + C26511) * C92226) *
               C4023 +
           ((C20439 + C20440) * C92333 + (C22809 + C22808) * C92226) * C92102) *
              C92150 * C790 -
          (((C26512 + C26513) * C92226 + (C22808 + C22809) * C92333) * C92102 +
           ((C26514 + C26515) * C92226 + (C26511 + C26510) * C92333) * C4023) *
              C92150 * C791 +
          (((C26515 + C26514) * C92333 +
            (C19898 * C5030 - C20400 * C4815 - C19898 * C5417 + C92334 * C5596 +
             C19899 * C8690 - C20401 * C8454 - C19899 * C9122 +
             C92252 * C9332) *
                C92226) *
               C4023 +
           ((C26513 + C26512) * C92333 +
            (C19898 * C5031 - C20400 * C4814 - C19898 * C5418 + C92334 * C5595 +
             C19899 * C8691 - C20401 * C8455 - C19899 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C92150 * C1969 -
           ((C4871 + C4872) * C92188 * C4027 +
            (C4870 + C4869) * C92188 * C4026 +
            (C4868 + C4867) * C92188 * C4025) *
               C92150 * C1970) *
              C1971 +
          (((C6516 + C6517) * C92188 * C4025 +
            (C6518 + C6519) * C92188 * C4026 +
            (C4028 * C4818 - C4029 * C4814 - C4028 * C4819 + C4023 * C4826 +
             C4030 * C6488 - C4031 * C6487 - C4030 * C6489 + C92102 * C6490) *
                C92188 * C4027) *
               C92150 * C1970 -
           ((C6519 + C6518) * C92188 * C4027 +
            (C6517 + C6516) * C92188 * C4026 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92188 * C4025) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C92150 * C1969 -
           (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
            C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
            C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
            C89 * C821) *
               C92188 * C92177 * C92150 * C1970) *
              C1971 +
          ((C100 * C806 - C101 * C796 - C100 * C807 + C89 * C820 + C102 * C804 -
            C103 * C795 - C102 * C805 + C90 * C819 + C104 * C802 - C105 * C794 -
            C104 * C803 + C91 * C818 + C106 * C1974 - C107 * C1973 -
            C106 * C1975 + C92 * C1976) *
               C92188 * C92177 * C92150 * C1970 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C92188 * C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C9422 +
            (C10920 + C10921) * C9423 + C10926 * C9424) *
               C92177 * C92150 * C1969 -
           ((C4030 * C5713 - C4031 * C5704 - C4030 * C5714 + C92102 * C5722 +
             C4028 * C5711 - C4029 * C5703 - C4028 * C5712 + C4023 * C5721) *
                C9424 +
            (C8489 + C8490) * C9423 + (C4868 + C4867) * C9422) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C6516 + C6517) * C9422 +
            (C4028 * C3363 - C4029 * C3358 - C4028 * C3364 + C4023 * C3370 +
             C4030 * C3365 - C4031 * C3359 - C4030 * C3366 + C92102 * C3371) *
                C9423 +
            (C4028 * C5713 - C4029 * C5704 - C4028 * C5714 + C4023 * C5722 +
             C4030 * C11785 - C4031 * C11784 - C4030 * C11786 +
             C92102 * C11787) *
                C9424) *
               C92177 * C92150 * C1970 -
           ((C4030 * C1395 - C4031 * C1381 - C4030 * C1396 + C92102 * C1405 +
             C4028 * C1393 - C4029 * C1380 - C4028 * C1394 + C4023 * C1404) *
                C9424 +
            (C4030 * C1385 - C4031 * C1376 - C4030 * C1386 + C92102 * C1400 +
             C4028 * C1387 - C4029 * C1377 - C4028 * C1388 + C4023 * C1401) *
                C9423 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C9422) *
               C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C92150 * C1969 +
           ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C4028 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C4023 +
            (C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C4030 +
            (C6626 - C6627 + C6628 - C6629 + C6630 - C6631) * C92102) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
            (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
            (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
               C92188 * C92150 * C1969 +
           ((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C4028 +
            (C6627 - C6626 + C6629 - C6628 + C6631 - C6630) * C4023 +
            (C4025 * C878 - C4106 * C795 + C4026 * C882 - C4107 * C800 +
             C4027 * C6617 - C4108 * C6487) *
                C4030 +
            (C4025 * C886 - C4106 * C805 + C4026 * C890 - C4107 * C815 +
             C4027 * C6618 - C4108 * C6489) *
                C92102) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C92150 * C1969 +
           ((C182 * C797 - C92177 * C876) * C100 +
            (C182 * C809 - C92177 * C884) * C89 + (C2046 - C2047) * C102 +
            (C2048 - C2049) * C90 + (C2050 - C2051) * C104 +
            (C2052 - C2053) * C91 + (C2054 - C2055) * C106 +
            (C2056 - C2057) * C92) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C92188 * C92150 * C1969 +
           ((C2047 - C2046) * C100 + (C2049 - C2048) * C89 +
            (C2051 - C2050) * C102 + (C2053 - C2052) * C90 +
            (C2055 - C2054) * C104 + (C2057 - C2056) * C91 +
            (C92177 * C2043 - C182 * C1973) * C106 +
            (C92177 * C2044 - C182 * C1975) * C92) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C4028 +
             (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
             (C198 - C199) * C92102) *
                C9422 +
            ((C11009 - C11010) * C4028 + (C11011 - C11012) * C4023 +
             (C2740 - C2739) * C4030 + (C2742 - C2741) * C92102) *
                C9423 +
            C11035 * C9424) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C4028 +
             (C182 * C809 - C92177 * C884) * C4023 + (C2046 - C2047) * C4030 +
             (C2048 - C2049) * C92102) *
                C9422 +
            ((C182 * C3357 - C92177 * C3439) * C4028 +
             (C182 * C3362 - C92177 * C3443) * C4023 +
             (C11889 - C11890) * C4030 + (C11891 - C11892) * C92102) *
                C9423 +
            ((C182 * C5703 - C92177 * C5801) * C4028 +
             (C182 * C5712 - C92177 * C5807) * C4023 +
             (C11893 - C11894) * C4030 + (C11895 - C11896) * C92102) *
                C9424) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C4028 + (C199 - C198) * C4023 +
             (C201 - C200) * C4030 + (C203 - C202) * C92102) *
                C9422 +
            ((C2739 - C2740) * C4028 + (C2741 - C2742) * C4023 +
             (C2743 - C2744) * C4030 + (C2745 - C2746) * C92102) *
                C9423 +
            ((C9501 - C9500) * C4028 + (C9503 - C9502) * C4023 +
             (C9504 - C9505) * C4030 + (C9506 - C9507) * C92102) *
                C9424) *
               C92150 * C1969 +
           (((C2047 - C2046) * C4028 + (C2049 - C2048) * C4023 +
             (C2051 - C2050) * C4030 + (C2053 - C2052) * C92102) *
                C9422 +
            ((C11890 - C11889) * C4028 + (C11892 - C11891) * C4023 +
             (C92177 * C3441 - C182 * C3359) * C4030 +
             (C92177 * C3445 - C182 * C3366) * C92102) *
                C9423 +
            ((C11894 - C11893) * C4028 + (C11896 - C11895) * C4023 +
             (C92177 * C11886 - C182 * C11784) * C4030 +
             (C92177 * C11887 - C182 * C11786) * C92102) *
                C9424) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4028 +
             (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
             (C281 - C282) * C92102) *
                C4025 +
            ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 + C6732 * C4030 +
             C6733 * C92102) *
                C4026 +
            C5065 * C4027) *
               C92150 * C1969 +
           (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 + C6734 * C4030 +
             C6735 * C92102) *
                C4025 +
            ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 + C6736 * C4030 +
             C6737 * C92102) *
                C4026 +
            ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
             (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C4028 + (C282 - C281) * C4023 +
             (C284 - C283) * C4030 + (C286 - C285) * C92102) *
                C4025 +
            (C6734 * C4028 + C6735 * C4023 + (C2130 - C2131) * C4030 +
             (C2132 - C2133) * C92102) *
                C4026 +
            (C6736 * C4028 + C6737 * C4023 + (C4212 - C4213) * C4030 +
             (C4214 - C4215) * C92102) *
                C4027) *
               C92150 * C1969 +
           ((C6732 * C4028 + C6733 * C4023 + (C2131 - C2130) * C4030 +
             (C2133 - C2132) * C92102) *
                C4025 +
            (C5047 * C4028 + C5048 * C4023 + (C4213 - C4212) * C4030 +
             (C4215 - C4214) * C92102) *
                C4026 +
            ((C5054 - C5053) * C4028 + (C5056 - C5055) * C4023 +
             (C92188 * C6729 - C265 * C6487) * C4030 +
             (C92188 * C6730 - C265 * C6489) * C92102) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C100 +
            (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C92177 * C92150 * C1969 +
           ((C265 * C797 - C92188 * C942) * C100 +
            (C265 * C809 - C92188 * C950) * C89 + (C2126 - C2127) * C102 +
            (C2128 - C2129) * C90 + (C2130 - C2131) * C104 +
            (C2132 - C2133) * C91 + (C2134 - C2135) * C106 +
            (C2136 - C2137) * C92) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C92177 * C92150 * C1969 +
           ((C2127 - C2126) * C100 + (C2129 - C2128) * C89 +
            (C2131 - C2130) * C102 + (C2133 - C2132) * C90 +
            (C2135 - C2134) * C104 + (C2137 - C2136) * C91 +
            (C92188 * C2123 - C265 * C1973) * C106 +
            (C92188 * C2124 - C265 * C1975) * C92) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C4028 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C4023 +
            (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
            (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
               C92177 * C92150 * C1969 +
           ((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
             C9583 * C5703 - C9424 * C5887) *
                C4028 +
            (C9581 * C809 - C9422 * C950 + C9582 * C3362 - C9423 * C3517 +
             C9583 * C5712 - C9424 * C5893) *
                C4023 +
            (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C4030 +
            (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92102) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C4028 +
            (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C4023 +
            (C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C4030 +
            (C9603 - C9604 + C9605 - C9606 + C9607 - C9608) * C92102) *
               C92177 * C92150 * C1969 +
           ((C11998 - C11997 + C12000 - C11999 + C12002 - C12001) * C4028 +
            (C12004 - C12003 + C12006 - C12005 + C12008 - C12007) * C4023 +
            (C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
             C9424 * C11994 - C9583 * C11784) *
                C4030 +
            (C9422 * C952 - C9581 * C805 + C9423 * C3519 - C9582 * C3366 +
             C9424 * C11995 - C9583 * C11786) *
                C92102) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C92150 * C1969 +
           ((C5149 - C5148 + C5151 - C5150) * C4106 +
            (C5153 - C5152 + C5155 - C5154) * C4025 +
            (C5157 - C5156 + C5159 - C5158) * C4107 +
            (C5161 - C5160 + C5163 - C5162) * C4026 +
            (C5164 - C5165 + C5166 - C5167) * C4108 +
            (C5168 - C5169 + C5170 - C5171) * C4027) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C4106 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C4025 +
            (C6838 - C6839 + C6840 - C6841) * C4107 +
            (C6842 - C6843 + C6844 - C6845) * C4026 +
            (C6846 - C6847 + C6848 - C6849) * C4108 +
            (C6850 - C6851 + C6852 - C6853) * C4027) *
               C92188 * C92150 * C1969 +
           ((C6839 - C6838 + C6841 - C6840) * C4106 +
            (C6843 - C6842 + C6845 - C6844) * C4025 +
            (C6847 - C6846 + C6849 - C6848) * C4107 +
            (C6851 - C6850 + C6853 - C6852) * C4026 +
            (C4023 * C4818 - C4028 * C4814 + C92102 * C6488 - C4030 * C6487) *
                C4108 +
            (C4023 * C5144 - C4028 * C5140 + C92102 * C6836 - C4030 * C6835) *
                C4027) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C92150 * C1969 +
           ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C182 +
            (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
             C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
                C92177) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C92177) *
               C92188 * C92150 * C1969 +
           ((C89 * C806 - C100 * C796 + C90 * C804 - C102 * C795 + C91 * C802 -
             C104 * C794 + C92 * C1974 - C106 * C1973) *
                C182 +
            (C89 * C1017 - C100 * C1009 + C90 * C1018 - C102 * C1010 +
             C91 * C1019 - C104 * C1011 + C92 * C2204 - C106 * C2203) *
                C92177) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C182 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92177) *
                C9422 +
            ((C11200 - C11201 + C11202 - C11203) * C182 +
             (C11204 - C11205 + C11206 - C11207) * C92177) *
                C9423 +
            C11232 * C9424) *
               C92150 * C1969 +
           (((C5149 - C5148 + C5151 - C5150) * C182 +
             (C5153 - C5152 + C5155 - C5154) * C92177) *
                C9422 +
            ((C8805 - C8806 + C8807 - C8808) * C182 +
             (C8809 - C8810 + C8811 - C8812) * C92177) *
                C9423 +
            ((C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
                 C182 +
             (C4028 * C5973 - C4023 * C5979 + C4030 * C5974 - C92102 * C5980) *
                 C92177) *
                C9424) *
               C92150 * C1970) *
              C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C182 +
             (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                 C92177) *
                C9422 +
            ((C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
                 C182 +
             (C4028 * C1590 - C4023 * C1598 + C4030 * C1591 - C92102 * C1599) *
                 C92177) *
                C9423 +
            ((C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
                 C182 +
             (C4028 * C1594 - C4023 * C1602 + C4030 * C1595 - C92102 * C1603) *
                 C92177) *
                C9424) *
               C92150 * C1969 +
           (((C6839 - C6838 + C6841 - C6840) * C182 +
             (C6843 - C6842 + C6845 - C6844) * C92177) *
                C9422 +
            ((C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                 C182 +
             (C4023 * C3592 - C4028 * C3588 + C92102 * C3593 - C4030 * C3589) *
                 C92177) *
                C9423 +
            ((C4023 * C5713 - C4028 * C5704 + C92102 * C11785 -
              C4030 * C11784) *
                 C182 +
             (C4023 * C5980 - C4028 * C5974 + C92102 * C12107 -
              C4030 * C12106) *
                 C92177) *
                C9424) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C92150 * C1969 -
           ((C6971 + C6972 + C6973) * C92102 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C4023) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C6973 + C6972 + C6971) * C4023 +
            (C4106 * C878 - C4363 * C795 - C4106 * C1010 + C4025 * C1075 +
             C4107 * C882 - C4364 * C800 - C4107 * C1014 + C4026 * C1080 +
             C4108 * C6617 - C4365 * C6487 - C4108 * C6835 + C4027 * C6951) *
                C92102) *
               C92188 * C92150 * C1970 -
           ((C4406 + C4407 + C4408) * C92102 +
            (C4405 + C4404 + C4403) * C4023) *
               C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C92150 * C1969 -
           (C2291 * C92 + C2292 * C91 + C2293 * C90 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
               C92188 * C92150 * C1970) *
              C1971 +
          ((C2293 * C89 + C2292 * C90 + C2291 * C91 +
            (C182 * C2043 - C410 * C1973 - C182 * C2203 + C92177 * C2271) *
                C92) *
               C92188 * C92150 * C1970 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
             C442 * C92102) *
                C9422 +
            (C11341 + C11315) * C9423 + C11345 * C9424) *
               C92150 * C1969 -
           ((C12220 * C92102 +
             (C182 * C5801 - C410 * C5703 - C182 * C5973 + C92177 * C6059) *
                 C4023) *
                C9424 +
            (C12221 * C92102 +
             (C182 * C3439 - C410 * C3357 - C182 * C3587 + C92177 * C3661) *
                 C4023) *
                C9423 +
            (C2293 * C92102 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C4023) *
                C9422) *
               C92150 * C1970) *
              C1971 +
          (((C2293 * C4023 + C2292 * C92102) * C9422 +
            (C12221 * C4023 +
             (C182 * C3441 - C410 * C3359 - C182 * C3589 + C92177 * C3663) *
                 C92102) *
                C9423 +
            (C12220 * C4023 +
             (C182 * C11886 - C410 * C11784 - C182 * C12106 + C92177 * C12206) *
                 C92102) *
                C9424) *
               C92150 * C1970 -
           ((C9770 * C92102 + C9769 * C4023) * C9424 +
            (C2985 * C92102 + C2986 * C4023) * C9423 +
            (C443 * C92102 + C442 * C4023) * C9422) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C92150 * C1969 +
           (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
             (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
             (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
                C4023 +
            (C6734 * C4106 + C7074 * C4025 + C6736 * C4107 + C7075 * C4026 +
             (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C4106 + (C503 - C502) * C4025 + C6734 * C4107 +
             C7074 * C4026 + C6736 * C4108 + C7075 * C4027) *
                C4023 +
            ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
             (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
             (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
                C92102) *
               C92150 * C1969 +
           ((C6732 * C4106 + C7073 * C4025 + C5047 * C4107 + C5338 * C4026 +
             (C5054 - C5053) * C4108 + (C5342 - C5341) * C4027) *
                C4023 +
            ((C2131 - C2130) * C4106 + (C2364 - C2363) * C4025 +
             (C4213 - C4212) * C4107 + (C4486 - C4485) * C4026 +
             (C92188 * C6729 - C265 * C6487) * C4108 +
             (C92188 * C7071 - C265 * C6835) * C4027) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C92150 * C1969 +
           (((C265 * C797 - C92188 * C942) * C182 +
             (C265 * C1008 - C92188 * C1132) * C92177) *
                C89 +
            ((C2126 - C2127) * C182 + (C2361 - C2362) * C92177) * C90 +
            ((C2130 - C2131) * C182 + (C2363 - C2364) * C92177) * C91 +
            ((C2134 - C2135) * C182 + (C2365 - C2366) * C92177) * C92) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
               C92150 * C1969 +
           (((C2127 - C2126) * C182 + (C2362 - C2361) * C92177) * C89 +
            ((C2131 - C2130) * C182 + (C2364 - C2363) * C92177) * C90 +
            ((C2135 - C2134) * C182 + (C2366 - C2365) * C92177) * C91 +
            ((C92188 * C2123 - C265 * C1973) * C182 +
             (C92188 * C2359 - C265 * C2203) * C92177) *
                C92) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C182 +
             (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
              C9424 * C1717 - C9583 * C1593) *
                 C92177) *
                C4023 +
            ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
             (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
                C92102) *
               C92150 * C1969 +
           (((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
              C9583 * C5703 - C9424 * C5887) *
                 C182 +
             (C9581 * C1008 - C9422 * C1132 + C9582 * C3587 - C9423 * C3731 +
              C9583 * C5973 - C9424 * C6139) *
                 C92177) *
                C4023 +
            ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C182 +
             (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92177) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C182 +
             (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C92177) *
                C4023 +
            ((C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C182 +
             (C9851 - C9852 + C9853 - C9854 + C9855 - C9856) * C92177) *
                C92102) *
               C92150 * C1969 +
           (((C11998 - C11997 + C12000 - C11999 + C12002 - C12001) * C182 +
             (C12322 - C12321 + C12324 - C12323 + C12326 - C12325) * C92177) *
                C4023 +
            ((C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
              C9424 * C11994 - C9583 * C11784) *
                 C182 +
             (C9422 * C1134 - C9581 * C1010 + C9423 * C3733 - C9582 * C3589 +
              C9424 * C12319 - C9583 * C12106) *
                 C92177) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C92150 * C1969 +
           (((C5149 - C5148 + C5151 - C5150) * C265 +
             (C5427 - C5426 + C5429 - C5428) * C92188) *
                C4025 +
            ((C5157 - C5156 + C5159 - C5158) * C265 +
             (C5432 - C5431 + C5434 - C5433) * C92188) *
                C4026 +
            ((C5164 - C5165 + C5166 - C5167) * C265 +
             (C5435 - C5436 + C5437 - C5438) * C92188) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C265 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92188) *
                C4025 +
            ((C6838 - C6839 + C6840 - C6841) * C265 +
             (C7176 - C7177 + C7178 - C7179) * C92188) *
                C4026 +
            ((C6846 - C6847 + C6848 - C6849) * C265 +
             (C7180 - C7181 + C7182 - C7183) * C92188) *
                C4027) *
               C92150 * C1969 +
           (((C6839 - C6838 + C6841 - C6840) * C265 +
             (C7177 - C7176 + C7179 - C7178) * C92188) *
                C4025 +
            ((C6847 - C6846 + C6849 - C6848) * C265 +
             (C7181 - C7180 + C7183 - C7182) * C92188) *
                C4026 +
            ((C4023 * C4818 - C4028 * C4814 + C92102 * C6488 - C4030 * C6487) *
                 C265 +
             (C4023 * C5422 - C4028 * C5418 + C92102 * C7174 - C4030 * C7173) *
                 C92188) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C92150 * C1969 +
           ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C265 +
            (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
             C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
                C92188) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C92188) *
               C92177 * C92150 * C1969 +
           ((C89 * C806 - C100 * C796 + C90 * C804 - C102 * C795 + C91 * C802 -
             C104 * C794 + C92 * C1974 - C106 * C1973) *
                C265 +
            (C89 * C1199 - C100 * C1191 + C90 * C1200 - C102 * C1192 +
             C91 * C1201 - C104 * C1193 + C92 * C2433 - C106 * C2432) *
                C92188) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C9581 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C9422 +
            (C11200 - C11201 + C11202 - C11203) * C9582 +
            (C11506 - C11507 + C11508 - C11509) * C9423 + C11228 * C9583 +
            C11520 * C9424) *
               C92177 * C92150 * C1969 +
           ((C5149 - C5148 + C5151 - C5150) * C9581 +
            (C5427 - C5426 + C5429 - C5428) * C9422 +
            (C8805 - C8806 + C8807 - C8808) * C9582 +
            (C9127 - C9128 + C9129 - C9130) * C9423 +
            (C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
                C9583 +
            (C4028 * C6219 - C4023 * C6225 + C4030 * C6220 - C92102 * C6226) *
                C9424) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C9581 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C9422 +
            (C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
                C9582 +
            (C4028 * C1772 - C4023 * C1780 + C4030 * C1773 - C92102 * C1781) *
                C9423 +
            (C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
                C9583 +
            (C4028 * C1776 - C4023 * C1784 + C4030 * C1777 - C92102 * C1785) *
                C9424) *
               C92177 * C92150 * C1969 +
           ((C6839 - C6838 + C6841 - C6840) * C9581 +
            (C7177 - C7176 + C7179 - C7178) * C9422 +
            (C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                C9582 +
            (C4023 * C3806 - C4028 * C3802 + C92102 * C3807 - C4030 * C3803) *
                C9423 +
            (C4023 * C5713 - C4028 * C5704 + C92102 * C11785 - C4030 * C11784) *
                C9583 +
            (C4023 * C6226 - C4028 * C6220 + C92102 * C12425 - C4030 * C12424) *
                C9424) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C265 +
             (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
              C4108 * C5417 - C4027 * C5517) *
                 C92188) *
                C4023 +
            ((C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C265 +
             (C7283 - C7284 + C7285 - C7286 + C7287 - C7288) * C92188) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
             (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
                C4023 +
            ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
             (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C265 +
             (C7284 - C7283 + C7286 - C7285 + C7288 - C7287) * C92188) *
                C4023 +
            ((C4025 * C878 - C4106 * C795 + C4026 * C882 - C4107 * C800 +
              C4027 * C6617 - C4108 * C6487) *
                 C265 +
             (C4025 * C1258 - C4106 * C1192 + C4026 * C1262 - C4107 * C1196 +
              C4027 * C7281 - C4108 * C7173) *
                 C92188) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C265 +
             (C182 * C1190 - C92177 * C1256) * C92188) *
                C89 +
            ((C2046 - C2047) * C265 + (C2502 - C2503) * C92188) * C90 +
            ((C2050 - C2051) * C265 + (C2504 - C2505) * C92188) * C91 +
            ((C2054 - C2055) * C265 + (C2506 - C2507) * C92188) * C92) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
               C92150 * C1969 +
           (((C2047 - C2046) * C265 + (C2503 - C2502) * C92188) * C89 +
            ((C2051 - C2050) * C265 + (C2505 - C2504) * C92188) * C90 +
            ((C2055 - C2054) * C265 + (C2507 - C2506) * C92188) * C91 +
            ((C92177 * C2043 - C182 * C1973) * C265 +
             (C92177 * C2500 - C182 * C2432) * C92188) *
                C92) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C9581 +
             (C92177 * C629 - C182 * C567) * C9422 + (C11009 - C11010) * C9582 +
             (C11599 - C11600) * C9423 + C11027 * C9583 + C11608 * C9424) *
                C4023 +
            ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
             (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 +
             C11017 * C9583 + C11603 * C9424) *
                C92102) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C9581 +
             (C182 * C1190 - C92177 * C1256) * C9422 +
             (C182 * C3357 - C92177 * C3439) * C9582 +
             (C182 * C3801 - C92177 * C3875) * C9423 +
             (C182 * C5703 - C92177 * C5801) * C9583 +
             (C182 * C6219 - C92177 * C6305) * C9424) *
                C4023 +
            ((C2046 - C2047) * C9581 + (C2502 - C2503) * C9422 +
             (C11889 - C11890) * C9582 + (C12526 - C12527) * C9423 +
             (C11893 - C11894) * C9583 + (C12528 - C12529) * C9424) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C9581 + (C637 - C636) * C9422 +
             (C2739 - C2740) * C9582 + (C3195 - C3196) * C9423 +
             (C9501 - C9500) * C9583 + (C10006 - C10005) * C9424) *
                C4023 +
            ((C201 - C200) * C9581 + (C640 - C639) * C9422 +
             (C2743 - C2744) * C9582 + (C3197 - C3198) * C9423 +
             (C9504 - C9505) * C9583 + (C10007 - C10008) * C9424) *
                C92102) *
               C92150 * C1969 +
           (((C2047 - C2046) * C9581 + (C2503 - C2502) * C9422 +
             (C11890 - C11889) * C9582 + (C12527 - C12526) * C9423 +
             (C11894 - C11893) * C9583 + (C12529 - C12528) * C9424) *
                C4023 +
            ((C2051 - C2050) * C9581 + (C2505 - C2504) * C9422 +
             (C92177 * C3441 - C182 * C3359) * C9582 +
             (C92177 * C3877 - C182 * C3803) * C9423 +
             (C92177 * C11886 - C182 * C11784) * C9583 +
             (C92177 * C12524 - C182 * C12424) * C9424) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C92150 * C1969 -
           ((C7388 + C7389 + C7390) * C92102 +
            (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
               C92150 * C1970) *
              C1971 +
          (((C7390 + C7389 + C7388) * C4023 +
            (C2594 * C4025 + C4738 * C4026 +
             (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                 C4027) *
                C92102) *
               C92150 * C1970 -
           ((C4740 + C4731 + C4732) * C92102 +
            (C4739 + C4722 + C4721) * C4023) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C92150 * C1969 -
           (C2596 * C92 + C2597 * C91 + C2598 * C90 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C92177 * C89) *
               C92150 * C1970) *
              C1971 +
          ((C2598 * C89 + C2597 * C90 + C2596 * C91 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92177 * C92) *
               C92150 * C1970 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
               C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C92177 * C4023 +
            (C10122 + C10123 + C10124) * C92177 * C92102) *
               C92150 * C1969 -
           ((C12647 + C12648 + C12649) * C92177 * C92102 +
            (C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385 +
             C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
             C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317) *
                C92177 * C4023) *
               C92150 * C1970) *
              C1971 +
          (((C12649 + C12648 + C12647) * C92177 * C4023 +
            (C9581 * C944 - C10082 * C795 - C9581 * C1192 + C9422 * C1315 +
             C9582 * C3515 - C10083 * C3359 - C9582 * C3803 + C9423 * C3947 +
             C9583 * C11994 - C10084 * C11784 - C9583 * C12424 +
             C9424 * C12627) *
                C92177 * C92102) *
               C92150 * C1970 -
           ((C10125 + C10126 + C10127) * C92177 * C92102 +
            (C10124 + C10123 + C10122) * C92177 * C4023) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C2664 -
           ((C8487 + C8488) * C92188 * C4027 +
            (C8489 + C8490) * C92188 * C4026 +
            (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
             C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
                C92188 * C4025) *
               C2665) *
              C1969 +
          (((C8490 + C8489) * C92188 * C4025 +
            (C8488 + C8487) * C92188 * C4026 +
            (C4028 * C8456 - C4029 * C8454 - C4028 * C8457 + C4023 * C8460 +
             C4030 * C8458 - C4031 * C8455 - C4030 * C8459 + C92102 * C8461) *
                C92188 * C4027) *
               C2665 -
           ((C4871 + C4872) * C92188 * C4027 +
            (C4870 + C4869) * C92188 * C4026 +
            (C4868 + C4867) * C92188 * C4025) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C2664 -
           (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
            C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
            C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
            C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
               C92188 * C92177 * C2665) *
              C1969 +
          ((C100 * C3361 - C101 * C3357 - C100 * C3362 + C89 * C3369 +
            C102 * C3363 - C103 * C3358 - C102 * C3364 + C90 * C3370 +
            C104 * C3365 - C105 * C3359 - C104 * C3366 + C91 * C3371 +
            C106 * C3367 - C107 * C3360 - C106 * C3368 + C92 * C3372) *
               C92188 * C92177 * C2665 -
           (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
            C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
            C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
            C89 * C821) *
               C92188 * C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C9422 +
            (C10920 + C10921) * C9423 + C10926 * C9424) *
               C92177 * C2664 -
           ((C10924 + C10925) * C9424 + (C10923 + C10922) * C9423 +
            (C10921 + C10920) * C9422) *
               C92177 * C2665) *
              C1969 +
          (((C8490 + C8489) * C9422 + (C13770 + C13771) * C9423 +
            (C4028 * C13751 - C4029 * C13749 - C4028 * C13752 + C4023 * C13755 +
             C4030 * C13753 - C4031 * C13750 - C4030 * C13754 +
             C92102 * C13756) *
                C9424) *
               C92177 * C2665 -
           ((C13771 + C13770) * C9424 + (C8489 + C8490) * C9423 +
            (C4868 + C4867) * C9422) *
               C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C2664 +
           ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C4028 +
            (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
             C4108 * C5710 - C4027 * C5805) *
                C4023 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C4030 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92102) *
               C92188 * C2665) *
              C1969 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C4028 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C4023 +
            (C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C4030 +
            (C6626 - C6627 + C6628 - C6629 + C6630 - C6631) * C92102) *
               C92188 * C2664 +
           ((C4025 * C3439 - C4106 * C3357 + C4026 * C5799 - C4107 * C5702 +
             C4027 * C8588 - C4108 * C8454) *
                C4028 +
            (C4025 * C3443 - C4106 * C3362 + C4026 * C5805 - C4107 * C5710 +
             C4027 * C8590 - C4108 * C8457) *
                C4023 +
            (C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
             C4027 * C8589 - C4108 * C8455) *
                C4030 +
            (C4025 * C3444 - C4106 * C3364 + C4026 * C5806 - C4107 * C5708 +
             C4027 * C8591 - C4108 * C8459) *
                C92102) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C2664 +
           ((C182 * C1378 - C92177 * C1457) * C100 +
            (C182 * C1390 - C92177 * C1465) * C89 + (C2739 - C2740) * C102 +
            (C2741 - C2742) * C90 + (C2743 - C2744) * C104 +
            (C2745 - C2746) * C91 + (C2747 - C2748) * C106 +
            (C2749 - C2750) * C92) *
               C92188 * C2665) *
              C1969 +
          (((C182 * C797 - C92177 * C876) * C100 +
            (C182 * C809 - C92177 * C884) * C89 + (C2046 - C2047) * C102 +
            (C2048 - C2049) * C90 + (C2050 - C2051) * C104 +
            (C2052 - C2053) * C91 + (C2054 - C2055) * C106 +
            (C2056 - C2057) * C92) *
               C92188 * C2664 +
           ((C92177 * C3439 - C182 * C3357) * C100 +
            (C92177 * C3443 - C182 * C3362) * C89 +
            (C92177 * C3440 - C182 * C3358) * C102 +
            (C92177 * C3444 - C182 * C3364) * C90 +
            (C92177 * C3441 - C182 * C3359) * C104 +
            (C92177 * C3445 - C182 * C3366) * C91 +
            (C92177 * C3442 - C182 * C3360) * C106 +
            (C92177 * C3446 - C182 * C3368) * C92) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C4028 +
             (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
             (C198 - C199) * C92102) *
                C9422 +
            ((C11009 - C11010) * C4028 + (C11011 - C11012) * C4023 +
             C12880 * C4030 + C12881 * C92102) *
                C9423 +
            C11035 * C9424) *
               C2664 +
           (((C11010 - C11009) * C4028 + (C11012 - C11011) * C4023 +
             C12882 * C4030 + C12883 * C92102) *
                C9422 +
            ((C11014 - C11013) * C4028 + (C11016 - C11015) * C4023 +
             C12884 * C4030 + C12885 * C92102) *
                C9423 +
            ((C11019 - C11020) * C4028 + (C11021 - C11022) * C4023 +
             (C11023 - C11024) * C4030 + (C11025 - C11026) * C92102) *
                C9424) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C4028 +
             (C182 * C809 - C92177 * C884) * C4023 + (C2046 - C2047) * C4030 +
             (C2048 - C2049) * C92102) *
                C9422 +
            ((C13874 - C13875) * C4028 + (C13876 - C13877) * C4023 +
             (C11889 - C11890) * C4030 + (C11891 - C11892) * C92102) *
                C9423 +
            ((C13878 - C13879) * C4028 + (C13880 - C13881) * C4023 +
             (C11893 - C11894) * C4030 + (C11895 - C11896) * C92102) *
                C9424) *
               C2664 +
           (((C13875 - C13874) * C4028 + (C13877 - C13876) * C4023 +
             (C11890 - C11889) * C4030 + (C11892 - C11891) * C92102) *
                C9422 +
            ((C13879 - C13878) * C4028 + (C13881 - C13880) * C4023 +
             (C11894 - C11893) * C4030 + (C11896 - C11895) * C92102) *
                C9423 +
            ((C92177 * C13869 - C182 * C13749) * C4028 +
             (C92177 * C13871 - C182 * C13752) * C4023 +
             (C92177 * C13870 - C182 * C13750) * C4030 +
             (C92177 * C13872 - C182 * C13754) * C92102) *
                C9424) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4028 +
             (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
             (C281 - C282) * C92102) *
                C4025 +
            ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 + C6732 * C4030 +
             C6733 * C92102) *
                C4026 +
            C5065 * C4027) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4028 +
             (C265 * C1390 - C92188 * C1531) * C4023 + (C2819 - C2820) * C4030 +
             (C2821 - C2822) * C92102) *
                C4025 +
            ((C8695 - C8696) * C4028 + (C8697 - C8698) * C4023 +
             (C7705 - C7706) * C4030 + (C7707 - C7708) * C92102) *
                C4026 +
            ((C8699 - C8700) * C4028 + (C8701 - C8702) * C4023 +
             (C7709 - C7710) * C4030 + (C7711 - C7712) * C92102) *
                C4027) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 + C6734 * C4030 +
             C6735 * C92102) *
                C4025 +
            ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 + C6736 * C4030 +
             C6737 * C92102) *
                C4026 +
            ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
             (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
                C4027) *
               C2664 +
           (((C8696 - C8695) * C4028 + (C8698 - C8697) * C4023 +
             (C7706 - C7705) * C4030 + (C7708 - C7707) * C92102) *
                C4025 +
            ((C8700 - C8699) * C4028 + (C8702 - C8701) * C4023 +
             (C7710 - C7709) * C4030 + (C7712 - C7711) * C92102) *
                C4026 +
            ((C92188 * C8690 - C265 * C8454) * C4028 +
             (C92188 * C8692 - C265 * C8457) * C4023 +
             (C92188 * C8691 - C265 * C8455) * C4030 +
             (C92188 * C8693 - C265 * C8459) * C92102) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C100 +
            (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C92177 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C100 +
            (C265 * C1390 - C92188 * C1531) * C89 + (C2819 - C2820) * C102 +
            (C2821 - C2822) * C90 + (C2823 - C2824) * C104 +
            (C2825 - C2826) * C91 + (C2827 - C2828) * C106 +
            (C2829 - C2830) * C92) *
               C92177 * C2665) *
              C1969 +
          (((C265 * C797 - C92188 * C942) * C100 +
            (C265 * C809 - C92188 * C950) * C89 + (C2126 - C2127) * C102 +
            (C2128 - C2129) * C90 + (C2130 - C2131) * C104 +
            (C2132 - C2133) * C91 + (C2134 - C2135) * C106 +
            (C2136 - C2137) * C92) *
               C92177 * C2664 +
           ((C92188 * C3513 - C265 * C3357) * C100 +
            (C92188 * C3517 - C265 * C3362) * C89 +
            (C92188 * C3514 - C265 * C3358) * C102 +
            (C92188 * C3518 - C265 * C3364) * C90 +
            (C92188 * C3515 - C265 * C3359) * C104 +
            (C92188 * C3519 - C265 * C3366) * C91 +
            (C92188 * C3516 - C265 * C3360) * C106 +
            (C92188 * C3520 - C265 * C3368) * C92) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C4028 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C4023 +
            (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
            (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
               C92177 * C2664 +
           ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C4028 +
            (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
             C9583 * C10874 - C9424 * C11113) *
                C4023 +
            (C12986 - C12987 + C12988 - C12989 + C12990 - C12991) * C4030 +
            (C12992 - C12993 + C12994 - C12995 + C12996 - C12997) * C92102) *
               C92177 * C2665) *
              C1969 +
          (((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
             C9583 * C5703 - C9424 * C5887) *
                C4028 +
            (C9581 * C809 - C9422 * C950 + C9582 * C3362 - C9423 * C3517 +
             C9583 * C5712 - C9424 * C5893) *
                C4023 +
            (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C4030 +
            (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92102) *
               C92177 * C2664 +
           ((C9422 * C3513 - C9581 * C3357 + C9423 * C5887 - C9582 * C5703 +
             C9424 * C13979 - C9583 * C13749) *
                C4028 +
            (C9422 * C3517 - C9581 * C3362 + C9423 * C5893 - C9582 * C5712 +
             C9424 * C13981 - C9583 * C13752) *
                C4023 +
            (C9422 * C3514 - C9581 * C3358 + C9423 * C5888 - C9582 * C5704 +
             C9424 * C13980 - C9583 * C13750) *
                C4030 +
            (C9422 * C3518 - C9581 * C3364 + C9423 * C5894 - C9582 * C5714 +
             C9424 * C13982 - C9583 * C13754) *
                C92102) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C2664 +
           ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C4106 +
            (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
                C4025 +
            (C8805 - C8806 + C8807 - C8808) * C4107 +
            (C8809 - C8810 + C8811 - C8812) * C4026 +
            (C8813 - C8814 + C8815 - C8816) * C4108 +
            (C8817 - C8818 + C8819 - C8820) * C4027) *
               C92188 * C2665) *
              C1969 +
          (((C5149 - C5148 + C5151 - C5150) * C4106 +
            (C5153 - C5152 + C5155 - C5154) * C4025 +
            (C5157 - C5156 + C5159 - C5158) * C4107 +
            (C5161 - C5160 + C5163 - C5162) * C4026 +
            (C5164 - C5165 + C5166 - C5167) * C4108 +
            (C5168 - C5169 + C5170 - C5171) * C4027) *
               C92188 * C2664 +
           ((C8806 - C8805 + C8808 - C8807) * C4106 +
            (C8810 - C8809 + C8812 - C8811) * C4025 +
            (C8814 - C8813 + C8816 - C8815) * C4107 +
            (C8818 - C8817 + C8820 - C8819) * C4026 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C4108 +
            (C4023 * C8802 - C4028 * C8800 + C92102 * C8803 - C4030 * C8801) *
                C4027) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C182 +
            (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
             C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
                C92177) *
               C92188 * C2665) *
              C1969 +
          (((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C182 +
            (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
             C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
                C92177) *
               C92188 * C2664 +
           ((C89 * C3361 - C100 * C3357 + C90 * C3363 - C102 * C3358 +
             C91 * C3365 - C104 * C3359 + C92 * C3367 - C106 * C3360) *
                C182 +
            (C89 * C3591 - C100 * C3587 + C90 * C3592 - C102 * C3588 +
             C91 * C3593 - C104 * C3589 + C92 * C3594 - C106 * C3590) *
                C92177) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C182 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92177) *
                C9422 +
            ((C11200 - C11201 + C11202 - C11203) * C182 +
             (C11204 - C11205 + C11206 - C11207) * C92177) *
                C9423 +
            C11232 * C9424) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C182 +
             (C11205 - C11204 + C11207 - C11206) * C92177) *
                C9422 +
            ((C11209 - C11208 + C11211 - C11210) * C182 +
             (C11213 - C11212 + C11215 - C11214) * C92177) *
                C9423 +
            ((C11216 - C11217 + C11218 - C11219) * C182 +
             (C11220 - C11221 + C11222 - C11223) * C92177) *
                C9424) *
               C2665) *
              C1969 +
          ((((C5149 - C5148 + C5151 - C5150) * C182 +
             (C5153 - C5152 + C5155 - C5154) * C92177) *
                C9422 +
            ((C8805 - C8806 + C8807 - C8808) * C182 +
             (C8809 - C8810 + C8811 - C8812) * C92177) *
                C9423 +
            ((C14086 - C14087 + C14088 - C14089) * C182 +
             (C14090 - C14091 + C14092 - C14093) * C92177) *
                C9424) *
               C2664 +
           (((C8806 - C8805 + C8808 - C8807) * C182 +
             (C8810 - C8809 + C8812 - C8811) * C92177) *
                C9422 +
            ((C14087 - C14086 + C14089 - C14088) * C182 +
             (C14091 - C14090 + C14093 - C14092) * C92177) *
                C9423 +
            ((C4023 * C13751 - C4028 * C13749 + C92102 * C13753 -
              C4030 * C13750) *
                 C182 +
             (C4023 * C14083 - C4028 * C14081 + C92102 * C14084 -
              C4030 * C14082) *
                 C92177) *
                C9424) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C2664 -
           ((C7930 + C7931 + C7932) * C92102 +
            (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
             C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
             C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
                C4023) *
               C92188 * C2665) *
              C1969 +
          (((C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661 +
             C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
             C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918) *
                C4023 +
            (C4106 * C3440 - C4363 * C3358 - C4106 * C3588 + C4025 * C3662 +
             C4107 * C5800 - C4364 * C5701 - C4107 * C5972 + C4026 * C6057 +
             C4108 * C8589 - C4365 * C8455 - C4108 * C8801 + C4027 * C8919) *
                C92102) *
               C92188 * C2665 -
           ((C6971 + C6972 + C6973) * C92102 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C4023) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C2664 -
           (C2984 * C92 + C2985 * C91 + C2986 * C90 +
            (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C89) *
               C92188 * C2665) *
              C1969 +
          (((C182 * C3439 - C410 * C3357 - C182 * C3587 + C92177 * C3661) *
                C89 +
            (C182 * C3440 - C410 * C3358 - C182 * C3588 + C92177 * C3662) *
                C90 +
            (C182 * C3441 - C410 * C3359 - C182 * C3589 + C92177 * C3663) *
                C91 +
            (C182 * C3442 - C410 * C3360 - C182 * C3590 + C92177 * C3664) *
                C92) *
               C92188 * C2665 -
           (C2291 * C92 + C2292 * C91 + C2293 * C90 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
             C442 * C92102) *
                C9422 +
            (C11341 + C11315) * C9423 + C11345 * C9424) *
               C2664 -
           ((C11343 + C11344) * C9424 + (C11320 + C11342) * C9423 +
            (C11315 + C11341) * C9422) *
               C2665) *
              C1969 +
          (((C14210 + C14198) * C9422 + (C14211 + C14203) * C9423 +
            ((C182 * C13869 - C410 * C13749 - C182 * C14081 + C92177 * C14191) *
                 C4023 +
             (C182 * C13870 - C410 * C13750 - C182 * C14082 + C92177 * C14192) *
                 C92102) *
                C9424) *
               C2665 -
           ((C14203 + C14211) * C9424 + (C14198 + C14210) * C9423 +
            (C2293 * C92102 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C4023) *
                C9422) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4106 +
             (C265 * C1589 - C92188 * C1713) * C4025 + (C8695 - C8696) * C4107 +
             (C9021 - C9022) * C4026 + (C8699 - C8700) * C4108 +
             (C9023 - C9024) * C4027) *
                C4023 +
            ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
             (C7705 - C7706) * C4107 + (C8032 - C8033) * C4026 +
             (C7709 - C7710) * C4108 + (C8034 - C8035) * C4027) *
                C92102) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
             (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
             (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
                C4023 +
            (C6734 * C4106 + C7074 * C4025 + C6736 * C4107 + C7075 * C4026 +
             (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
                C92102) *
               C2664 +
           (((C8696 - C8695) * C4106 + (C9022 - C9021) * C4025 +
             (C8700 - C8699) * C4107 + (C9024 - C9023) * C4026 +
             (C92188 * C8690 - C265 * C8454) * C4108 +
             (C92188 * C9018 - C265 * C8800) * C4027) *
                C4023 +
            ((C7706 - C7705) * C4106 + (C8033 - C8032) * C4025 +
             (C7710 - C7709) * C4107 + (C8035 - C8034) * C4026 +
             (C92188 * C8691 - C265 * C8455) * C4108 +
             (C92188 * C9019 - C265 * C8801) * C4027) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C182 +
             (C265 * C1589 - C92188 * C1713) * C92177) *
                C89 +
            ((C2819 - C2820) * C182 + (C3054 - C3055) * C92177) * C90 +
            ((C2823 - C2824) * C182 + (C3056 - C3057) * C92177) * C91 +
            ((C2827 - C2828) * C182 + (C3058 - C3059) * C92177) * C92) *
               C2665) *
              C1969 +
          ((((C265 * C797 - C92188 * C942) * C182 +
             (C265 * C1008 - C92188 * C1132) * C92177) *
                C89 +
            ((C2126 - C2127) * C182 + (C2361 - C2362) * C92177) * C90 +
            ((C2130 - C2131) * C182 + (C2363 - C2364) * C92177) * C91 +
            ((C2134 - C2135) * C182 + (C2365 - C2366) * C92177) * C92) *
               C2664 +
           (((C92188 * C3513 - C265 * C3357) * C182 +
             (C92188 * C3731 - C265 * C3587) * C92177) *
                C89 +
            ((C92188 * C3514 - C265 * C3358) * C182 +
             (C92188 * C3732 - C265 * C3588) * C92177) *
                C90 +
            ((C92188 * C3515 - C265 * C3359) * C182 +
             (C92188 * C3733 - C265 * C3589) * C92177) *
                C91 +
            ((C92188 * C3516 - C265 * C3360) * C182 +
             (C92188 * C3734 - C265 * C3590) * C92177) *
                C92) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C182 +
             (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
              C9424 * C1717 - C9583 * C1593) *
                 C92177) *
                C4023 +
            ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
             (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
                C92102) *
               C2664 +
           (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
              C9583 * C10868 - C9424 * C11109) *
                 C182 +
             (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
              C9583 * C11191 - C9424 * C11419) *
                 C92177) *
                C4023 +
            ((C12986 - C12987 + C12988 - C12989 + C12990 - C12991) * C182 +
             (C13316 - C13317 + C13318 - C13319 + C13320 - C13321) * C92177) *
                C92102) *
               C2665) *
              C1969 +
          ((((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
              C9583 * C5703 - C9424 * C5887) *
                 C182 +
             (C9581 * C1008 - C9422 * C1132 + C9582 * C3587 - C9423 * C3731 +
              C9583 * C5973 - C9424 * C6139) *
                 C92177) *
                C4023 +
            ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C182 +
             (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92177) *
                C92102) *
               C2664 +
           (((C9422 * C3513 - C9581 * C3357 + C9423 * C5887 - C9582 * C5703 +
              C9424 * C13979 - C9583 * C13749) *
                 C182 +
             (C9422 * C3731 - C9581 * C3587 + C9423 * C6139 - C9582 * C5973 +
              C9424 * C14309 - C9583 * C14081) *
                 C92177) *
                C4023 +
            ((C9422 * C3514 - C9581 * C3358 + C9423 * C5888 - C9582 * C5704 +
              C9424 * C13980 - C9583 * C13750) *
                 C182 +
             (C9422 * C3732 - C9581 * C3588 + C9423 * C6141 - C9582 * C5974 +
              C9424 * C14310 - C9583 * C14082) *
                 C92177) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C2664 +
           (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                 C265 +
             (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                 C92188) *
                C4025 +
            ((C8805 - C8806 + C8807 - C8808) * C265 +
             (C9127 - C9128 + C9129 - C9130) * C92188) *
                C4026 +
            ((C8813 - C8814 + C8815 - C8816) * C265 +
             (C9131 - C9132 + C9133 - C9134) * C92188) *
                C4027) *
               C2665) *
              C1969 +
          ((((C5149 - C5148 + C5151 - C5150) * C265 +
             (C5427 - C5426 + C5429 - C5428) * C92188) *
                C4025 +
            ((C5157 - C5156 + C5159 - C5158) * C265 +
             (C5432 - C5431 + C5434 - C5433) * C92188) *
                C4026 +
            ((C5164 - C5165 + C5166 - C5167) * C265 +
             (C5435 - C5436 + C5437 - C5438) * C92188) *
                C4027) *
               C2664 +
           (((C8806 - C8805 + C8808 - C8807) * C265 +
             (C9128 - C9127 + C9130 - C9129) * C92188) *
                C4025 +
            ((C8814 - C8813 + C8816 - C8815) * C265 +
             (C9132 - C9131 + C9134 - C9133) * C92188) *
                C4026 +
            ((C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                 C265 +
             (C4023 * C9124 - C4028 * C9122 + C92102 * C9125 - C4030 * C9123) *
                 C92188) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C265 +
            (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
             C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
                C92188) *
               C92177 * C2665) *
              C1969 +
          (((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C265 +
            (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
             C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
                C92188) *
               C92177 * C2664 +
           ((C89 * C3361 - C100 * C3357 + C90 * C3363 - C102 * C3358 +
             C91 * C3365 - C104 * C3359 + C92 * C3367 - C106 * C3360) *
                C265 +
            (C89 * C3805 - C100 * C3801 + C90 * C3806 - C102 * C3802 +
             C91 * C3807 - C104 * C3803 + C92 * C3808 - C106 * C3804) *
                C92188) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C9581 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C9422 +
            (C11200 - C11201 + C11202 - C11203) * C9582 +
            (C11506 - C11507 + C11508 - C11509) * C9423 + C11228 * C9583 +
            C11520 * C9424) *
               C92177 * C2664 +
           ((C11201 - C11200 + C11203 - C11202) * C9581 +
            (C11507 - C11506 + C11509 - C11508) * C9422 +
            (C11209 - C11208 + C11211 - C11210) * C9582 +
            (C11511 - C11510 + C11513 - C11512) * C9423 +
            (C11216 - C11217 + C11218 - C11219) * C9583 +
            (C11514 - C11515 + C11516 - C11517) * C9424) *
               C92177 * C2665) *
              C1969 +
          (((C5149 - C5148 + C5151 - C5150) * C9581 +
            (C5427 - C5426 + C5429 - C5428) * C9422 +
            (C8805 - C8806 + C8807 - C8808) * C9582 +
            (C9127 - C9128 + C9129 - C9130) * C9423 +
            (C14086 - C14087 + C14088 - C14089) * C9583 +
            (C14414 - C14415 + C14416 - C14417) * C9424) *
               C92177 * C2664 +
           ((C8806 - C8805 + C8808 - C8807) * C9581 +
            (C9128 - C9127 + C9130 - C9129) * C9422 +
            (C14087 - C14086 + C14089 - C14088) * C9582 +
            (C14415 - C14414 + C14417 - C14416) * C9423 +
            (C4023 * C13751 - C4028 * C13749 + C92102 * C13753 -
             C4030 * C13750) *
                C9583 +
            (C4023 * C14411 - C4028 * C14409 + C92102 * C14412 -
             C4030 * C14410) *
                C9424) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C2664 +
           (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
              C4108 * C5702 - C4027 * C5799) *
                 C265 +
             (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
              C4108 * C6217 - C4027 * C6303) *
                 C92188) *
                C4023 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C265 +
             (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92188) *
                C92102) *
               C2665) *
              C1969 +
          ((((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C265 +
             (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
              C4108 * C5417 - C4027 * C5517) *
                 C92188) *
                C4023 +
            ((C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C265 +
             (C7283 - C7284 + C7285 - C7286 + C7287 - C7288) * C92188) *
                C92102) *
               C2664 +
           (((C4025 * C3439 - C4106 * C3357 + C4026 * C5799 - C4107 * C5702 +
              C4027 * C8588 - C4108 * C8454) *
                 C265 +
             (C4025 * C3875 - C4106 * C3801 + C4026 * C6303 - C4107 * C6217 +
              C4027 * C9232 - C4108 * C9122) *
                 C92188) *
                C4023 +
            ((C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
              C4027 * C8589 - C4108 * C8455) *
                 C265 +
             (C4025 * C3876 - C4106 * C3802 + C4026 * C6304 - C4107 * C6218 +
              C4027 * C9233 - C4108 * C9123) *
                 C92188) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C2664 +
           (((C182 * C1378 - C92177 * C1457) * C265 +
             (C182 * C1771 - C92177 * C1837) * C92188) *
                C89 +
            ((C2739 - C2740) * C265 + (C3195 - C3196) * C92188) * C90 +
            ((C2743 - C2744) * C265 + (C3197 - C3198) * C92188) * C91 +
            ((C2747 - C2748) * C265 + (C3199 - C3200) * C92188) * C92) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C265 +
             (C182 * C1190 - C92177 * C1256) * C92188) *
                C89 +
            ((C2046 - C2047) * C265 + (C2502 - C2503) * C92188) * C90 +
            ((C2050 - C2051) * C265 + (C2504 - C2505) * C92188) * C91 +
            ((C2054 - C2055) * C265 + (C2506 - C2507) * C92188) * C92) *
               C2664 +
           (((C92177 * C3439 - C182 * C3357) * C265 +
             (C92177 * C3875 - C182 * C3801) * C92188) *
                C89 +
            ((C92177 * C3440 - C182 * C3358) * C265 +
             (C92177 * C3876 - C182 * C3802) * C92188) *
                C90 +
            ((C92177 * C3441 - C182 * C3359) * C265 +
             (C92177 * C3877 - C182 * C3803) * C92188) *
                C91 +
            ((C92177 * C3442 - C182 * C3360) * C265 +
             (C92177 * C3878 - C182 * C3804) * C92188) *
                C92) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C9581 +
             (C92177 * C629 - C182 * C567) * C9422 + (C11009 - C11010) * C9582 +
             (C11599 - C11600) * C9423 + C11027 * C9583 + C11608 * C9424) *
                C4023 +
            ((C196 - C197) * C9581 + (C636 - C637) * C9422 + C12880 * C9582 +
             C13529 * C9423 + C11017 * C9583 + C11603 * C9424) *
                C92102) *
               C2664 +
           (((C11010 - C11009) * C9581 + (C11600 - C11599) * C9422 +
             (C11014 - C11013) * C9582 + (C11602 - C11601) * C9423 +
             (C11019 - C11020) * C9583 + (C11604 - C11605) * C9424) *
                C4023 +
            (C12882 * C9581 + C13530 * C9422 + C12884 * C9582 + C13531 * C9423 +
             (C11023 - C11024) * C9583 + (C11606 - C11607) * C9424) *
                C92102) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C9581 +
             (C182 * C1190 - C92177 * C1256) * C9422 +
             (C13874 - C13875) * C9582 + (C14518 - C14519) * C9423 +
             (C13878 - C13879) * C9583 + (C14520 - C14521) * C9424) *
                C4023 +
            ((C2046 - C2047) * C9581 + (C2502 - C2503) * C9422 +
             (C11889 - C11890) * C9582 + (C12526 - C12527) * C9423 +
             (C11893 - C11894) * C9583 + (C12528 - C12529) * C9424) *
                C92102) *
               C2664 +
           (((C13875 - C13874) * C9581 + (C14519 - C14518) * C9422 +
             (C13879 - C13878) * C9582 + (C14521 - C14520) * C9423 +
             (C92177 * C13869 - C182 * C13749) * C9583 +
             (C92177 * C14515 - C182 * C14409) * C9424) *
                C4023 +
            ((C11890 - C11889) * C9581 + (C12527 - C12526) * C9422 +
             (C11894 - C11893) * C9582 + (C12529 - C12528) * C9423 +
             (C92177 * C13870 - C182 * C13750) * C9583 +
             (C92177 * C14516 - C182 * C14410) * C9424) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C2664 -
           ((C8355 + C8356 + C8348) * C92102 +
            (C9347 * C4027 + C9348 * C4026 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C4025) *
                C4023) *
               C2665) *
              C1969 +
          (((C9348 * C4025 + C9347 * C4026 +
             (C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
                 C4027) *
                C4023 +
            (C8354 * C4025 + C8353 * C4026 +
             (C265 * C8691 - C701 * C8455 - C265 * C9123 + C92188 * C9333) *
                 C4027) *
                C92102) *
               C2665 -
           ((C7388 + C7389 + C7390) * C92102 +
            (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C2664 -
           (C3289 * C92 + C3290 * C91 + C3291 * C90 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92177 * C89) *
               C2665) *
              C1969 +
          (((C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                C92177 * C89 +
            (C265 * C3514 - C701 * C3358 - C265 * C3802 + C92188 * C3946) *
                C92177 * C90 +
            (C265 * C3515 - C701 * C3359 - C265 * C3803 + C92188 * C3947) *
                C92177 * C91 +
            (C265 * C3516 - C701 * C3360 - C265 * C3804 + C92188 * C3948) *
                C92177 * C92) *
               C2665 -
           (C2596 * C92 + C2597 * C91 + C2598 * C90 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C92177 * C89) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C92177 * C4023 +
            (C10122 + C10123 + C10124) * C92177 * C92102) *
               C2664 -
           ((C13649 + C13650 + C13651) * C92177 * C92102 +
            (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 +
             C9424 * C11683 + C9582 * C1527 - C10083 * C1379 - C9582 * C1775 +
             C9423 * C1899 + C9581 * C1523 - C10082 * C1378 - C9581 * C1771 +
             C9422 * C1898) *
                C92177 * C4023) *
               C2665) *
              C1969 +
          (((C9581 * C3513 - C10082 * C3357 - C9581 * C3801 + C9422 * C3945 +
             C9582 * C5887 - C10083 * C5703 - C9582 * C6219 + C9423 * C6385 +
             C9583 * C13979 - C10084 * C13749 - C9583 * C14409 +
             C9424 * C14619) *
                C92177 * C4023 +
            (C9581 * C3514 - C10082 * C3358 - C9581 * C3802 + C9422 * C3946 +
             C9582 * C5888 - C10083 * C5704 - C9582 * C6220 + C9423 * C6387 +
             C9583 * C13980 - C10084 * C13750 - C9583 * C14410 +
             C9424 * C14620) *
                C92177 * C92102) *
               C2665 -
           ((C12647 + C12648 + C12649) * C92177 * C92102 +
            (C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385 +
             C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
             C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317) *
                C92177 * C4023) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 +
               C102 * C116 - C103 * C109 - C102 * C117 + C90 * C127 +
               C104 * C118 - C105 * C110 - C104 * C119 + C91 * C128 +
               C106 * C120 - C107 * C111 - C106 * C121 + C92 * C129) *
                  C92188 * C92177 * C92150 * C92136 * C97 -
              (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 +
               C104 * C120 - C105 * C111 - C104 * C121 + C91 * C129 +
               C102 * C118 - C103 * C110 - C102 * C119 + C90 * C128 +
               C100 * C116 - C101 * C109 - C100 * C117 + C89 * C127) *
                  C92188 * C92177 * C92150 * C92136 * C98 +
              (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 +
               C102 * C120 - C103 * C111 - C102 * C121 + C90 * C129 +
               C104 * C122 - C105 * C112 - C104 * C123 + C91 * C130 +
               C106 * C124 - C107 * C113 - C106 * C125 + C92 * C131) *
                  C92188 * C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 +
               C102 * C116 - C103 * C109 - C102 * C117 + C90 * C127 +
               C104 * C118 - C105 * C110 - C104 * C119 + C91 * C128 +
               C106 * C120 - C107 * C111 - C106 * C121 + C92 * C129) *
                  C92188 * C92177 * C92150 * C790 -
              (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 +
               C104 * C804 - C105 * C795 - C104 * C805 + C91 * C819 +
               C102 * C806 - C103 * C796 - C102 * C807 + C90 * C820 +
               C100 * C808 - C101 * C797 - C100 * C809 + C89 * C821) *
                  C92188 * C92177 * C92150 * C791 +
              (C100 * C810 - C101 * C798 - C100 * C811 + C89 * C822 +
               C102 * C812 - C103 * C799 - C102 * C813 + C90 * C823 +
               C104 * C814 - C105 * C800 - C104 * C815 + C91 * C824 +
               C106 * C816 - C107 * C801 - C106 * C817 + C92 * C825) *
                  C92188 * C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C1372 -
          (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
           C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
           C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
           C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
              C92188 * C92177 * C1373 +
          (C100 * C1391 - C101 * C1379 - C100 * C1392 + C89 * C1403 +
           C102 * C1393 - C103 * C1380 - C102 * C1394 + C90 * C1404 +
           C104 * C1395 - C105 * C1381 - C104 * C1396 + C91 * C1405 +
           C106 * C1397 - C107 * C1382 - C106 * C1398 + C92 * C1406) *
              C92188 * C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4028 * C808 - C4029 * C797 - C4028 * C809 + C4023 * C821 +
            C4030 * C806 - C4031 * C796 - C4030 * C807 + C92102 * C820) *
               C92188 * C4026 +
           (C4028 * C810 - C4029 * C798 - C4028 * C811 + C4023 * C822 +
            C4030 * C812 - C4031 * C799 - C4030 * C813 + C92102 * C823) *
               C92188 * C4027) *
              C92150 * C92136 * C97 -
          ((C4030 * C814 - C4031 * C800 - C4030 * C815 + C92102 * C824 +
            C4028 * C812 - C4029 * C799 - C4028 * C813 + C4023 * C823) *
               C92188 * C4027 +
           (C4030 * C804 - C4031 * C795 - C4030 * C805 + C92102 * C819 +
            C4028 * C806 - C4029 * C796 - C4028 * C807 + C4023 * C820) *
               C92188 * C4026 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C92188 * C4025) *
              C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C92188 * C4025 +
           (C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
            C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
               C92188 * C4026 +
           (C4028 * C814 - C4029 * C800 - C4028 * C815 + C4023 * C824 +
            C4030 * C816 - C4031 * C801 - C4030 * C817 + C92102 * C825) *
               C92188 * C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C92150 * C790 -
          ((C4871 + C4872) * C92188 * C4027 + (C4870 + C4869) * C92188 * C4026 +
           (C4868 + C4867) * C92188 * C4025) *
              C92150 * C791 +
          (C4874 * C4025 + (C4872 + C4871) * C92188 * C4026 +
           (C4028 * C4822 - C4029 * C4816 - C4028 * C4823 + C4023 * C4828 +
            C4030 * C4824 - C4031 * C4817 - C4030 * C4825 + C92102 * C4829) *
               C92188 * C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C1372 -
          ((C4030 * C5707 - C4031 * C5701 - C4030 * C5708 + C92102 * C5719 +
            C4028 * C5709 - C4029 * C5702 - C4028 * C5710 + C4023 * C5720) *
               C92188 * C4027 +
           (C4030 * C3363 - C4031 * C3358 - C4030 * C3364 + C92102 * C3370 +
            C4028 * C3361 - C4029 * C3357 - C4028 * C3362 + C4023 * C3369) *
               C92188 * C4026 +
           (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
            C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
               C92188 * C4025) *
              C1373 +
          ((C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C92188 * C4025 +
           (C4028 * C5711 - C4029 * C5703 - C4028 * C5712 + C4023 * C5721 +
            C4030 * C5713 - C4031 * C5704 - C4030 * C5714 + C92102 * C5722) *
               C92188 * C4026 +
           (C4028 * C5715 - C4029 * C5705 - C4028 * C5716 + C4023 * C5723 +
            C4030 * C5717 - C4031 * C5706 - C4030 * C5718 + C92102 * C5724) *
               C92188 * C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C9422 +
           (C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402 +
            C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401) *
               C9423 +
           (C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C9424) *
              C92177 * C92150 * C92136 * C97 -
          ((C4030 * C1395 - C4031 * C1381 - C4030 * C1396 + C92102 * C1405 +
            C4028 * C1393 - C4029 * C1380 - C4028 * C1394 + C4023 * C1404) *
               C9424 +
           (C4030 * C1385 - C4031 * C1376 - C4030 * C1386 + C92102 * C1400 +
            C4028 * C1387 - C4029 * C1377 - C4028 * C1388 + C4023 * C1401) *
               C9423 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C9422) *
              C92177 * C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C9422 +
           (C4028 * C1385 - C4029 * C1376 - C4028 * C1386 + C4023 * C1400 +
            C4030 * C1383 - C4031 * C1375 - C4030 * C1384 + C92102 * C1399) *
               C9423 +
           (C4028 * C1395 - C4029 * C1381 - C4028 * C1396 + C4023 * C1405 +
            C4030 * C1397 - C4031 * C1382 - C4030 * C1398 + C92102 * C1406) *
               C9424) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C9422 +
           (C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402 +
            C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401) *
               C9423 +
           (C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C9424) *
              C92177 * C92150 * C790 -
          ((C4030 * C5713 - C4031 * C5704 - C4030 * C5714 + C92102 * C5722 +
            C4028 * C5711 - C4029 * C5703 - C4028 * C5712 + C4023 * C5721) *
               C9424 +
           (C8489 + C8490) * C9423 + (C4868 + C4867) * C9422) *
              C92177 * C92150 * C791 +
          (C4873 * C9422 + (C8488 + C8487) * C9423 +
           (C4028 * C5715 - C4029 * C5705 - C4028 * C5716 + C4023 * C5723 +
            C4030 * C5717 - C4031 * C5706 - C4030 * C5718 + C92102 * C5724) *
               C9424) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C9422 +
           (C10920 + C10921) * C9423 + C10926 * C9424) *
              C92177 * C1372 -
          ((C10924 + C10925) * C9424 + (C10923 + C10922) * C9423 +
           (C10921 + C10920) * C9422) *
              C92177 * C1373 +
          (C10926 * C9422 + (C10925 + C10924) * C9423 +
           (C4028 * C10875 - C4029 * C10869 - C4028 * C10876 + C4023 * C10881 +
            C4030 * C10877 - C4031 * C10870 - C4030 * C10878 +
            C92102 * C10882) *
               C9424) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C92177 * C183 - C182 * C108) * C100 +
               (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
               (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
               C215 * C92) *
                  C92188 * C92150 * C92136 * C97 +
              ((C197 - C196) * C100 + (C199 - C198) * C89 +
               (C201 - C200) * C102 + (C203 - C202) * C90 +
               (C205 - C204) * C104 + (C207 - C206) * C91 +
               (C208 - C209) * C106 + (C210 - C211) * C92) *
                  C92188 * C92150 * C92136 * C98 +
              (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
               (C209 - C208) * C104 + (C211 - C210) * C91 +
               (C92177 * C188 - C182 * C113) * C106 +
               (C92177 * C194 - C182 * C125) * C92) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C92177 * C183 - C182 * C108) * C100 +
               (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
               (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
               C215 * C92) *
                  C92188 * C92150 * C790 +
              ((C182 * C797 - C92177 * C876) * C100 +
               (C182 * C809 - C92177 * C884) * C89 +
               (C182 * C796 - C92177 * C877) * C102 +
               (C182 * C807 - C92177 * C885) * C90 +
               (C182 * C795 - C92177 * C878) * C104 +
               (C182 * C805 - C92177 * C886) * C91 +
               (C182 * C794 - C92177 * C879) * C106 +
               (C182 * C803 - C92177 * C887) * C92) *
                  C92188 * C92150 * C791 +
              ((C92177 * C880 - C182 * C798) * C100 +
               (C92177 * C888 - C182 * C811) * C89 +
               (C92177 * C881 - C182 * C799) * C102 +
               (C92177 * C889 - C182 * C813) * C90 +
               (C92177 * C882 - C182 * C800) * C104 +
               (C92177 * C890 - C182 * C815) * C91 +
               (C92177 * C883 - C182 * C801) * C106 +
               (C92177 * C891 - C182 * C817) * C92) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C1372 +
          ((C182 * C1378 - C92177 * C1457) * C100 +
           (C182 * C1390 - C92177 * C1465) * C89 +
           (C182 * C1377 - C92177 * C1458) * C102 +
           (C182 * C1388 - C92177 * C1466) * C90 +
           (C182 * C1376 - C92177 * C1459) * C104 +
           (C182 * C1386 - C92177 * C1467) * C91 +
           (C182 * C1375 - C92177 * C1460) * C106 +
           (C182 * C1384 - C92177 * C1468) * C92) *
              C92188 * C1373 +
          ((C92177 * C1461 - C182 * C1379) * C100 +
           (C92177 * C1469 - C182 * C1392) * C89 +
           (C92177 * C1462 - C182 * C1380) * C102 +
           (C92177 * C1470 - C182 * C1394) * C90 +
           (C92177 * C1463 - C182 * C1381) * C104 +
           (C92177 * C1471 - C182 * C1396) * C91 +
           (C92177 * C1464 - C182 * C1382) * C106 +
           (C92177 * C1472 - C182 * C1398) * C92) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
           (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
           (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
           (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C4028 +
           (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C4023 +
           (C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
            C4027 * C883 - C4108 * C801) *
               C4030 +
           (C4025 * C192 - C4106 * C121 + C4026 * C887 - C4107 * C803 +
            C4027 * C891 - C4108 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C4028 +
           (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
            C4108 * C4821 - C4027 * C4952) *
               C4023 +
           (C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
            C4108 * C4814 - C4027 * C4949) *
               C4030 +
           (C4106 * C807 - C4025 * C885 + C4107 * C813 - C4026 * C889 +
            C4108 * C4819 - C4027 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C4028 +
           (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
            C4027 * C4954 - C4108 * C4823) *
               C4023 +
           (C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
            C4027 * C4951 - C4108 * C4817) *
               C4030 +
           (C4025 * C889 - C4106 * C813 + C4026 * C4953 - C4107 * C4819 +
            C4027 * C4955 - C4108 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C1372 +
          ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
            C4108 * C5702 - C4027 * C5799) *
               C4028 +
           (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
            C4108 * C5710 - C4027 * C5805) *
               C4023 +
           (C4106 * C1377 - C4025 * C1458 + C4107 * C3358 - C4026 * C3440 +
            C4108 * C5701 - C4027 * C5800) *
               C4030 +
           (C4106 * C1388 - C4025 * C1466 + C4107 * C3364 - C4026 * C3444 +
            C4108 * C5708 - C4027 * C5806) *
               C92102) *
              C92188 * C1373 +
          ((C4025 * C1461 - C4106 * C1379 + C4026 * C5801 - C4107 * C5703 +
            C4027 * C5802 - C4108 * C5705) *
               C4028 +
           (C4025 * C1469 - C4106 * C1392 + C4026 * C5807 - C4107 * C5712 +
            C4027 * C5808 - C4108 * C5716) *
               C4023 +
           (C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
            C4027 * C5804 - C4108 * C5706) *
               C4030 +
           (C4025 * C1470 - C4106 * C1394 + C4026 * C5809 - C4107 * C5714 +
            C4027 * C5810 - C4108 * C5718) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C4028 +
            (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
            (C198 - C199) * C92102) *
               C9422 +
           ((C92177 * C1457 - C182 * C1378) * C4028 +
            (C92177 * C1465 - C182 * C1390) * C4023 + (C2740 - C2739) * C4030 +
            (C2742 - C2741) * C92102) *
               C9423 +
           ((C92177 * C1461 - C182 * C1379) * C4028 +
            (C92177 * C1469 - C182 * C1392) * C4023 + (C9500 - C9501) * C4030 +
            (C9502 - C9503) * C92102) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C4028 + (C199 - C198) * C4023 +
            (C201 - C200) * C4030 + (C203 - C202) * C92102) *
               C9422 +
           ((C2739 - C2740) * C4028 + (C2741 - C2742) * C4023 +
            (C2743 - C2744) * C4030 + (C2745 - C2746) * C92102) *
               C9423 +
           ((C9501 - C9500) * C4028 + (C9503 - C9502) * C4023 +
            (C9504 - C9505) * C4030 + (C9506 - C9507) * C92102) *
               C9424) *
              C92150 * C92136 * C98 +
          ((C212 * C4028 + C213 * C4023 + C214 * C4030 + C215 * C92102) *
               C9422 +
           ((C2744 - C2743) * C4028 + (C2746 - C2745) * C4023 +
            (C2748 - C2747) * C4030 + (C2750 - C2749) * C92102) *
               C9423 +
           ((C9505 - C9504) * C4028 + (C9507 - C9506) * C4023 +
            (C92177 * C1464 - C182 * C1382) * C4030 +
            (C92177 * C1472 - C182 * C1398) * C92102) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C4028 +
            (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
            (C198 - C199) * C92102) *
               C9422 +
           ((C92177 * C1457 - C182 * C1378) * C4028 +
            (C92177 * C1465 - C182 * C1390) * C4023 + (C2740 - C2739) * C4030 +
            (C2742 - C2741) * C92102) *
               C9423 +
           ((C92177 * C1461 - C182 * C1379) * C4028 +
            (C92177 * C1469 - C182 * C1392) * C4023 + (C9500 - C9501) * C4030 +
            (C9502 - C9503) * C92102) *
               C9424) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C4028 +
            (C182 * C809 - C92177 * C884) * C4023 + (C2046 - C2047) * C4030 +
            (C2048 - C2049) * C92102) *
               C9422 +
           ((C182 * C3357 - C92177 * C3439) * C4028 +
            (C182 * C3362 - C92177 * C3443) * C4023 +
            (C182 * C3358 - C92177 * C3440) * C4030 +
            (C182 * C3364 - C92177 * C3444) * C92102) *
               C9423 +
           ((C182 * C5703 - C92177 * C5801) * C4028 +
            (C182 * C5712 - C92177 * C5807) * C4023 +
            (C182 * C5704 - C92177 * C5803) * C4030 +
            (C182 * C5714 - C92177 * C5809) * C92102) *
               C9424) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C4028 +
            (C92177 * C888 - C182 * C811) * C4023 +
            (C92177 * C881 - C182 * C799) * C4030 +
            (C92177 * C889 - C182 * C813) * C92102) *
               C9422 +
           ((C92177 * C5799 - C182 * C5702) * C4028 +
            (C92177 * C5805 - C182 * C5710) * C4023 +
            (C92177 * C5800 - C182 * C5701) * C4030 +
            (C92177 * C5806 - C182 * C5708) * C92102) *
               C9423 +
           ((C92177 * C5802 - C182 * C5705) * C4028 +
            (C92177 * C5808 - C182 * C5716) * C4023 +
            (C92177 * C5804 - C182 * C5706) * C4030 +
            (C92177 * C5810 - C182 * C5718) * C92102) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C4028 +
            (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
            (C198 - C199) * C92102) *
               C9422 +
           ((C11009 - C11010) * C4028 + (C11011 - C11012) * C4023 +
            (C2740 - C2739) * C4030 + (C2742 - C2741) * C92102) *
               C9423 +
           C11035 * C9424) *
              C1372 +
          (((C11010 - C11009) * C4028 + (C11012 - C11011) * C4023 +
            (C2739 - C2740) * C4030 + (C2741 - C2742) * C92102) *
               C9422 +
           ((C11014 - C11013) * C4028 + (C11016 - C11015) * C4023 +
            (C9501 - C9500) * C4030 + (C9503 - C9502) * C92102) *
               C9423 +
           ((C11019 - C11020) * C4028 + (C11021 - C11022) * C4023 +
            (C11023 - C11024) * C4030 + (C11025 - C11026) * C92102) *
               C9424) *
              C1373 +
          (C11035 * C9422 +
           ((C11020 - C11019) * C4028 + (C11022 - C11021) * C4023 +
            (C11024 - C11023) * C4030 + (C11026 - C11025) * C92102) *
               C9423 +
           ((C92177 * C11002 - C182 * C10869) * C4028 +
            (C92177 * C11006 - C182 * C10876) * C4023 +
            (C92177 * C11003 - C182 * C10870) * C4030 +
            (C92177 * C11007 - C182 * C10878) * C92102) *
               C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C92188 * C266 - C265 * C108) * C100 +
               (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
               (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
               C298 * C92) *
                  C92177 * C92150 * C92136 * C97 +
              ((C280 - C279) * C100 + (C282 - C281) * C89 +
               (C284 - C283) * C102 + (C286 - C285) * C90 +
               (C288 - C287) * C104 + (C290 - C289) * C91 +
               (C291 - C292) * C106 + (C293 - C294) * C92) *
                  C92177 * C92150 * C92136 * C98 +
              (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
               (C292 - C291) * C104 + (C294 - C293) * C91 +
               (C92188 * C271 - C265 * C113) * C106 +
               (C92188 * C277 - C265 * C125) * C92) *
                  C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C92188 * C266 - C265 * C108) * C100 +
               (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
               (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
               C298 * C92) *
                  C92177 * C92150 * C790 +
              ((C265 * C797 - C92188 * C942) * C100 +
               (C265 * C809 - C92188 * C950) * C89 +
               (C265 * C796 - C92188 * C943) * C102 +
               (C265 * C807 - C92188 * C951) * C90 +
               (C265 * C795 - C92188 * C944) * C104 +
               (C265 * C805 - C92188 * C952) * C91 +
               (C265 * C794 - C92188 * C945) * C106 +
               (C265 * C803 - C92188 * C953) * C92) *
                  C92177 * C92150 * C791 +
              ((C92188 * C946 - C265 * C798) * C100 +
               (C92188 * C954 - C265 * C811) * C89 +
               (C92188 * C947 - C265 * C799) * C102 +
               (C92188 * C955 - C265 * C813) * C90 +
               (C92188 * C948 - C265 * C800) * C104 +
               (C92188 * C956 - C265 * C815) * C91 +
               (C92188 * C949 - C265 * C801) * C106 +
               (C92188 * C957 - C265 * C817) * C92) *
                  C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C1372 +
          ((C265 * C1378 - C92188 * C1523) * C100 +
           (C265 * C1390 - C92188 * C1531) * C89 +
           (C265 * C1377 - C92188 * C1524) * C102 +
           (C265 * C1388 - C92188 * C1532) * C90 +
           (C265 * C1376 - C92188 * C1525) * C104 +
           (C265 * C1386 - C92188 * C1533) * C91 +
           (C265 * C1375 - C92188 * C1526) * C106 +
           (C265 * C1384 - C92188 * C1534) * C92) *
              C92177 * C1373 +
          ((C92188 * C1527 - C265 * C1379) * C100 +
           (C92188 * C1535 - C265 * C1392) * C89 +
           (C92188 * C1528 - C265 * C1380) * C102 +
           (C92188 * C1536 - C265 * C1394) * C90 +
           (C92188 * C1529 - C265 * C1381) * C104 +
           (C92188 * C1537 - C265 * C1396) * C91 +
           (C92188 * C1530 - C265 * C1382) * C106 +
           (C92188 * C1538 - C265 * C1398) * C92) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C92188 * C942 - C265 * C797) * C4028 +
            (C92188 * C950 - C265 * C809) * C4023 + (C2127 - C2126) * C4030 +
            (C2129 - C2128) * C92102) *
               C4026 +
           ((C92188 * C946 - C265 * C798) * C4028 +
            (C92188 * C954 - C265 * C811) * C4023 + (C4208 - C4209) * C4030 +
            (C4210 - C4211) * C92102) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4028 + (C282 - C281) * C4023 +
            (C284 - C283) * C4030 + (C286 - C285) * C92102) *
               C4025 +
           ((C2126 - C2127) * C4028 + (C2128 - C2129) * C4023 +
            (C2130 - C2131) * C4030 + (C2132 - C2133) * C92102) *
               C4026 +
           ((C4209 - C4208) * C4028 + (C4211 - C4210) * C4023 +
            (C4212 - C4213) * C4030 + (C4214 - C4215) * C92102) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C295 * C4028 + C296 * C4023 + C297 * C4030 + C298 * C92102) *
               C4025 +
           ((C2131 - C2130) * C4028 + (C2133 - C2132) * C4023 +
            (C2135 - C2134) * C4030 + (C2137 - C2136) * C92102) *
               C4026 +
           ((C4213 - C4212) * C4028 + (C4215 - C4214) * C4023 +
            (C92188 * C949 - C265 * C801) * C4030 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C92150 * C790 +
          (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 +
            (C2126 - C2127) * C4030 + (C2128 - C2129) * C92102) *
               C4025 +
           ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 +
            (C4209 - C4208) * C4030 + (C4211 - C4210) * C92102) *
               C4026 +
           ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
            (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
               C4027) *
              C92150 * C791 +
          (C5065 * C4025 +
           ((C5050 - C5049) * C4028 + (C5052 - C5051) * C4023 +
            (C5054 - C5053) * C4030 + (C5056 - C5055) * C92102) *
               C4026 +
           ((C92188 * C5032 - C265 * C4816) * C4028 +
            (C92188 * C5036 - C265 * C4823) * C4023 +
            (C92188 * C5033 - C265 * C4817) * C4030 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C4028 +
            (C265 * C1390 - C92188 * C1531) * C4023 + (C2819 - C2820) * C4030 +
            (C2821 - C2822) * C92102) *
               C4025 +
           ((C265 * C3357 - C92188 * C3513) * C4028 +
            (C265 * C3362 - C92188 * C3517) * C4023 +
            (C265 * C3358 - C92188 * C3514) * C4030 +
            (C265 * C3364 - C92188 * C3518) * C92102) *
               C4026 +
           ((C265 * C5702 - C92188 * C5885) * C4028 +
            (C265 * C5710 - C92188 * C5891) * C4023 +
            (C265 * C5701 - C92188 * C5886) * C4030 +
            (C265 * C5708 - C92188 * C5892) * C92102) *
               C4027) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C4028 +
            (C92188 * C1535 - C265 * C1392) * C4023 +
            (C92188 * C1528 - C265 * C1380) * C4030 +
            (C92188 * C1536 - C265 * C1394) * C92102) *
               C4025 +
           ((C92188 * C5887 - C265 * C5703) * C4028 +
            (C92188 * C5893 - C265 * C5712) * C4023 +
            (C92188 * C5888 - C265 * C5704) * C4030 +
            (C92188 * C5894 - C265 * C5714) * C92102) *
               C4026 +
           ((C92188 * C5889 - C265 * C5705) * C4028 +
            (C92188 * C5895 - C265 * C5716) * C4023 +
            (C92188 * C5890 - C265 * C5706) * C4030 +
            (C92188 * C5896 - C265 * C5718) * C92102) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C4028 +
           (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
            C9424 * C1535 - C9583 * C1392) *
               C4023 +
           (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
           (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
              C92177 * C92150 * C92136 * C97 +
          ((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C4028 +
           (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C4023 +
           (C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C4030 +
           (C9603 - C9604 + C9605 - C9606 + C9607 - C9608) * C92102) *
              C92177 * C92150 * C92136 * C98 +
          ((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C4028 +
           (C9604 - C9603 + C9606 - C9605 + C9608 - C9607) * C4023 +
           (C9422 * C269 - C9581 * C111 + C9423 * C1526 - C9582 * C1375 +
            C9424 * C1530 - C9583 * C1382) *
               C4030 +
           (C9422 * C275 - C9581 * C121 + C9423 * C1534 - C9582 * C1384 +
            C9424 * C1538 - C9583 * C1398) *
               C92102) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C4028 +
           (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
            C9424 * C1535 - C9583 * C1392) *
               C4023 +
           (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
           (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
              C92177 * C92150 * C790 +
          ((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
            C9583 * C5703 - C9424 * C5887) *
               C4028 +
           (C9581 * C809 - C9422 * C950 + C9582 * C3362 - C9423 * C3517 +
            C9583 * C5712 - C9424 * C5893) *
               C4023 +
           (C9581 * C796 - C9422 * C943 + C9582 * C3358 - C9423 * C3514 +
            C9583 * C5704 - C9424 * C5888) *
               C4030 +
           (C9581 * C807 - C9422 * C951 + C9582 * C3364 - C9423 * C3518 +
            C9583 * C5714 - C9424 * C5894) *
               C92102) *
              C92177 * C92150 * C791 +
          ((C9422 * C946 - C9581 * C798 + C9423 * C5885 - C9582 * C5702 +
            C9424 * C5889 - C9583 * C5705) *
               C4028 +
           (C9422 * C954 - C9581 * C811 + C9423 * C5891 - C9582 * C5710 +
            C9424 * C5895 - C9583 * C5716) *
               C4023 +
           (C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
            C9424 * C5890 - C9583 * C5706) *
               C4030 +
           (C9422 * C955 - C9581 * C813 + C9423 * C5892 - C9582 * C5708 +
            C9424 * C5896 - C9583 * C5718) *
               C92102) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C4028 +
           (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
            C9424 * C1535 - C9583 * C1392) *
               C4023 +
           (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
           (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
              C92177 * C1372 +
          ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
            C9583 * C10868 - C9424 * C11109) *
               C4028 +
           (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
            C9583 * C10874 - C9424 * C11113) *
               C4023 +
           (C9581 * C1377 - C9422 * C1524 + C9582 * C1380 - C9423 * C1528 +
            C9583 * C10867 - C9424 * C11110) *
               C4030 +
           (C9581 * C1388 - C9422 * C1532 + C9582 * C1394 - C9423 * C1536 +
            C9583 * C10872 - C9424 * C11114) *
               C92102) *
              C92177 * C1373 +
          ((C9422 * C1527 - C9581 * C1379 + C9423 * C11109 - C9582 * C10868 +
            C9424 * C11111 - C9583 * C10869) *
               C4028 +
           (C9422 * C1535 - C9581 * C1392 + C9423 * C11113 - C9582 * C10874 +
            C9424 * C11115 - C9583 * C10876) *
               C4023 +
           (C9422 * C1528 - C9581 * C1380 + C9423 * C11110 - C9582 * C10867 +
            C9424 * C11112 - C9583 * C10870) *
               C4030 +
           (C9422 * C1536 - C9581 * C1394 + C9423 * C11114 - C9582 * C10872 +
            C9424 * C11116 - C9583 * C10878) *
               C92102) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 +
                C91 * C118 - C104 * C110 + C92 * C120 - C106 * C111) *
                   C182 +
               (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                C91 * C356 - C104 * C350 + C92 * C357 - C106 * C351) *
                   C92177) *
                  C92188 * C92150 * C92136 * C97 +
              ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 +
                C104 * C111 - C91 * C120 + C106 * C112 - C92 * C122) *
                   C182 +
               (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 +
                C104 * C351 - C91 * C357 + C106 * C352 - C92 * C358) *
                   C92177) *
                  C92188 * C92150 * C92136 * C98 +
              ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 +
                C91 * C122 - C104 * C112 + C92 * C124 - C106 * C113) *
                   C182 +
               (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 +
                C91 * C358 - C104 * C352 + C92 * C359 - C106 * C353) *
                   C92177) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 +
                C91 * C118 - C104 * C110 + C92 * C120 - C106 * C111) *
                   C182 +
               (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                C91 * C356 - C104 * C350 + C92 * C357 - C106 * C351) *
                   C92177) *
                  C92188 * C92150 * C790 +
              ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 +
                C104 * C795 - C91 * C804 + C106 * C794 - C92 * C802) *
                   C182 +
               (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
                C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
                   C92177) *
                  C92188 * C92150 * C791 +
              ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 +
                C91 * C814 - C104 * C800 + C92 * C816 - C106 * C801) *
                   C182 +
               (C89 * C1020 - C100 * C1012 + C90 * C1021 - C102 * C1013 +
                C91 * C1022 - C104 * C1014 + C92 * C1023 - C106 * C1015) *
                   C92177) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C1372 +
          ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
            C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
               C182 +
           (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
            C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
               C92177) *
              C92188 * C1373 +
          ((C89 * C1391 - C100 * C1379 + C90 * C1393 - C102 * C1380 +
            C91 * C1395 - C104 * C1381 + C92 * C1397 - C106 * C1382) *
               C182 +
           (C89 * C1601 - C100 * C1593 + C90 * C1602 - C102 * C1594 +
            C91 * C1603 - C104 * C1595 + C92 * C1604 - C106 * C1596) *
               C92177) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
               C4107 +
           (C4023 * C1016 - C4028 * C1008 + C92102 * C1017 - C4030 * C1009) *
               C4026 +
           (C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
               C4108 +
           (C4023 * C1020 - C4028 * C1012 + C92102 * C1021 - C4030 * C1013) *
               C4027) *
              C92188 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C4106 +
           (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
               C4025 +
           (C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
               C4107 +
           (C4028 * C1009 - C4023 * C1017 + C4030 * C1010 - C92102 * C1018) *
               C4026 +
           (C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
               C4108 +
           (C4028 * C1013 - C4023 * C1021 + C4030 * C1014 - C92102 * C1022) *
               C4027) *
              C92188 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C4106 +
           (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
               C4025 +
           (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
               C4107 +
           (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
               C4026 +
           (C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
               C4108 +
           (C4023 * C1022 - C4028 * C1014 + C92102 * C1023 - C4030 * C1015) *
               C4027) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C4106 +
           (C5153 - C5152 + C5155 - C5154) * C4025 +
           (C5157 - C5156 + C5159 - C5158) * C4107 +
           (C5161 - C5160 + C5163 - C5162) * C4026 +
           (C5164 - C5165 + C5166 - C5167) * C4108 +
           (C5168 - C5169 + C5170 - C5171) * C4027) *
              C92188 * C92150 * C791 +
          (C5176 * C4106 + C5177 * C4025 +
           (C5165 - C5164 + C5167 - C5166) * C4107 +
           (C5169 - C5168 + C5171 - C5170) * C4026 +
           (C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
               C4108 +
           (C4023 * C5145 - C4028 * C5141 + C92102 * C5146 - C4030 * C5142) *
               C4027) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C1372 +
          ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
               C4106 +
           (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
               C4025 +
           (C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
               C4107 +
           (C4028 * C3587 - C4023 * C3591 + C4030 * C3588 - C92102 * C3592) *
               C4026 +
           (C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
               C4108 +
           (C4028 * C5971 - C4023 * C5977 + C4030 * C5972 - C92102 * C5978) *
               C4027) *
              C92188 * C1373 +
          ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C4106 +
           (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
               C4025 +
           (C4023 * C5711 - C4028 * C5703 + C92102 * C5713 - C4030 * C5704) *
               C4107 +
           (C4023 * C5979 - C4028 * C5973 + C92102 * C5980 - C4030 * C5974) *
               C4026 +
           (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
               C4108 +
           (C4023 * C5981 - C4028 * C5975 + C92102 * C5982 - C4030 * C5976) *
               C4027) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C182 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92177) *
               C9422 +
           ((C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
                C182 +
            (C4023 * C1597 - C4028 * C1589 + C92102 * C1598 - C4030 * C1590) *
                C92177) *
               C9423 +
           ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C182 +
            (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
                C92177) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C182 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C92177) *
               C9422 +
           ((C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
                C182 +
            (C4028 * C1590 - C4023 * C1598 + C4030 * C1591 - C92102 * C1599) *
                C92177) *
               C9423 +
           ((C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
                C182 +
            (C4028 * C1594 - C4023 * C1602 + C4030 * C1595 - C92102 * C1603) *
                C92177) *
               C9424) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C182 +
            (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
                C92177) *
               C9422 +
           ((C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C182 +
            (C4023 * C1599 - C4028 * C1591 + C92102 * C1600 - C4030 * C1592) *
                C92177) *
               C9423 +
           ((C4023 * C1395 - C4028 * C1381 + C92102 * C1397 - C4030 * C1382) *
                C182 +
            (C4023 * C1603 - C4028 * C1595 + C92102 * C1604 - C4030 * C1596) *
                C92177) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C182 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92177) *
               C9422 +
           ((C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
                C182 +
            (C4023 * C1597 - C4028 * C1589 + C92102 * C1598 - C4030 * C1590) *
                C92177) *
               C9423 +
           ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C182 +
            (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
                C92177) *
               C9424) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C182 +
            (C5153 - C5152 + C5155 - C5154) * C92177) *
               C9422 +
           ((C8805 - C8806 + C8807 - C8808) * C182 +
            (C8809 - C8810 + C8811 - C8812) * C92177) *
               C9423 +
           ((C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
                C182 +
            (C4028 * C5973 - C4023 * C5979 + C4030 * C5974 - C92102 * C5980) *
                C92177) *
               C9424) *
              C92150 * C791 +
          ((C5176 * C182 + C5177 * C92177) * C9422 +
           ((C8814 - C8813 + C8816 - C8815) * C182 +
            (C8818 - C8817 + C8820 - C8819) * C92177) *
               C9423 +
           ((C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                C182 +
            (C4023 * C5981 - C4028 * C5975 + C92102 * C5982 - C4030 * C5976) *
                C92177) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C182 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92177) *
               C9422 +
           ((C11200 - C11201 + C11202 - C11203) * C182 +
            (C11204 - C11205 + C11206 - C11207) * C92177) *
               C9423 +
           C11232 * C9424) *
              C1372 +
          (((C11201 - C11200 + C11203 - C11202) * C182 +
            (C11205 - C11204 + C11207 - C11206) * C92177) *
               C9422 +
           ((C11209 - C11208 + C11211 - C11210) * C182 +
            (C11213 - C11212 + C11215 - C11214) * C92177) *
               C9423 +
           ((C11216 - C11217 + C11218 - C11219) * C182 +
            (C11220 - C11221 + C11222 - C11223) * C92177) *
               C9424) *
              C1373 +
          (C11232 * C9422 +
           ((C11217 - C11216 + C11219 - C11218) * C182 +
            (C11221 - C11220 + C11223 - C11222) * C92177) *
               C9423 +
           ((C4023 * C10875 - C4028 * C10869 + C92102 * C10877 -
             C4030 * C10870) *
                C182 +
            (C4023 * C11197 - C4028 * C11193 + C92102 * C11198 -
             C4030 * C11194) *
                C92177) *
               C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
               C442 * C90 + C443 * C91 + C444 * C92) *
                  C92188 * C92150 * C92136 * C97 -
              (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
                  C92150 * C92136 * C98 +
              (C443 * C89 + C444 * C90 + C445 * C91 +
               (C182 * C188 - C410 * C113 - C182 * C353 + C92177 * C416) *
                   C92) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
               C442 * C90 + C443 * C91 + C444 * C92) *
                  C92188 * C92150 * C790 -
              ((C182 * C879 - C410 * C794 - C182 * C1011 + C92177 * C1074) *
                   C92 +
               (C182 * C878 - C410 * C795 - C182 * C1010 + C92177 * C1075) *
                   C91 +
               (C182 * C877 - C410 * C796 - C182 * C1009 + C92177 * C1076) *
                   C90 +
               (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                   C89) *
                  C92188 * C92150 * C791 +
              ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                   C89 +
               (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                   C90 +
               (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                   C91 +
               (C182 * C883 - C410 * C801 - C182 * C1015 + C92177 * C1081) *
                   C92) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C1372 -
          ((C182 * C1460 - C410 * C1375 - C182 * C1592 + C92177 * C1655) * C92 +
           (C182 * C1459 - C410 * C1376 - C182 * C1591 + C92177 * C1656) * C91 +
           (C182 * C1458 - C410 * C1377 - C182 * C1590 + C92177 * C1657) * C90 +
           (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
               C89) *
              C92188 * C1373 +
          ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) * C89 +
           (C182 * C1462 - C410 * C1380 - C182 * C1594 + C92177 * C1660) * C90 +
           (C182 * C1463 - C410 * C1381 - C182 * C1595 + C92177 * C1661) * C91 +
           (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
               C92) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C4406 + C4407 + C4408) * C92102 + (C4405 + C4404 + C4403) * C4023) *
              C92188 * C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C4023 +
           (C4106 * C186 - C4363 * C111 - C4106 * C351 + C4025 * C414 +
            C4107 * C879 - C4364 * C794 - C4107 * C1011 + C4026 * C1074 +
            C4108 * C883 - C4365 * C801 - C4108 * C1015 + C4027 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C790 -
          ((C4108 * C4949 - C4365 * C4814 - C4108 * C5140 + C4027 * C5251 +
            C4107 * C881 - C4364 * C799 - C4107 * C1013 + C4026 * C1079 +
            C4106 * C877 - C4363 * C796 - C4106 * C1009 + C4025 * C1076) *
               C92102 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C4023) *
              C92188 * C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C4023 +
           (C4106 * C881 - C4363 * C799 - C4106 * C1013 + C4025 * C1079 +
            C4107 * C4949 - C4364 * C4814 - C4107 * C5140 + C4026 * C5251 +
            C4108 * C4951 - C4365 * C4817 - C4108 * C5142 + C4027 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C1372 -
          ((C4108 * C5800 - C4365 * C5701 - C4108 * C5972 + C4027 * C6057 +
            C4107 * C3440 - C4364 * C3358 - C4107 * C3588 + C4026 * C3662 +
            C4106 * C1458 - C4363 * C1377 - C4106 * C1590 + C4025 * C1657) *
               C92102 +
           (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
               C4023) *
              C92188 * C1373 +
          ((C4106 * C1461 - C4363 * C1379 - C4106 * C1593 + C4025 * C1659 +
            C4107 * C5801 - C4364 * C5703 - C4107 * C5973 + C4026 * C6059 +
            C4108 * C5802 - C4365 * C5705 - C4108 * C5975 + C4027 * C6060) *
               C4023 +
           (C4106 * C1462 - C4363 * C1380 - C4106 * C1594 + C4025 * C1660 +
            C4107 * C5803 - C4364 * C5704 - C4107 * C5974 + C4026 * C6061 +
            C4108 * C5804 - C4365 * C5706 - C4108 * C5976 + C4027 * C6062) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
            C442 * C92102) *
               C9422 +
           ((C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C4023 +
            C2986 * C92102) *
               C9423 +
           ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) *
                C4023 +
            C9769 * C92102) *
               C9424) *
              C92150 * C92136 * C97 -
          ((C9770 * C92102 + C9769 * C4023) * C9424 +
           (C2985 * C92102 + C2986 * C4023) * C9423 +
           (C443 * C92102 + C442 * C4023) * C9422) *
              C92150 * C92136 * C98 +
          ((C443 * C4023 + C444 * C92102) * C9422 +
           (C2985 * C4023 + C2984 * C92102) * C9423 +
           (C9770 * C4023 +
            (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                C92102) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
            C442 * C92102) *
               C9422 +
           ((C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C4023 +
            C2986 * C92102) *
               C9423 +
           ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) *
                C4023 +
            C9769 * C92102) *
               C9424) *
              C92150 * C790 -
          (((C182 * C5803 - C410 * C5704 - C182 * C5974 + C92177 * C6061) *
                C92102 +
            (C182 * C5801 - C410 * C5703 - C182 * C5973 + C92177 * C6059) *
                C4023) *
               C9424 +
           ((C182 * C3440 - C410 * C3358 - C182 * C3588 + C92177 * C3662) *
                C92102 +
            (C182 * C3439 - C410 * C3357 - C182 * C3587 + C92177 * C3661) *
                C4023) *
               C9423 +
           (C2293 * C92102 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C4023) *
               C9422) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C4023 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92102) *
               C9422 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C4023 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92102) *
               C9423 +
           ((C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
                C4023 +
            (C182 * C5804 - C410 * C5706 - C182 * C5976 + C92177 * C6062) *
                C92102) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
            C442 * C92102) *
               C9422 +
           (C11341 + C11315) * C9423 + C11345 * C9424) *
              C1372 -
          ((C11343 + C11344) * C9424 + (C11320 + C11342) * C9423 +
           (C11315 + C11341) * C9422) *
              C1373 +
          (C11345 * C9422 + (C11344 + C11343) * C9423 +
           ((C182 * C11002 - C410 * C10869 - C182 * C11193 + C92177 * C11308) *
                C4023 +
            (C182 * C11003 - C410 * C10870 - C182 * C11194 + C92177 * C11309) *
                C92102) *
               C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C182 +
                (C92188 * C495 - C265 * C348) * C92177) *
                   C89 +
               ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 +
               C516 * C91 + C517 * C92) *
                  C92150 * C92136 * C97 +
              (((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
               ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
               ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
               ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
                  C92150 * C92136 * C98 +
              (C516 * C89 + C517 * C90 +
               ((C292 - C291) * C182 + (C511 - C510) * C92177) * C91 +
               ((C92188 * C271 - C265 * C113) * C182 +
                (C92188 * C500 - C265 * C353) * C92177) *
                   C92) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C182 +
                (C92188 * C495 - C265 * C348) * C92177) *
                   C89 +
               ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 +
               C516 * C91 + C517 * C92) *
                  C92150 * C790 +
              (((C265 * C797 - C92188 * C942) * C182 +
                (C265 * C1008 - C92188 * C1132) * C92177) *
                   C89 +
               ((C265 * C796 - C92188 * C943) * C182 +
                (C265 * C1009 - C92188 * C1133) * C92177) *
                   C90 +
               ((C265 * C795 - C92188 * C944) * C182 +
                (C265 * C1010 - C92188 * C1134) * C92177) *
                   C91 +
               ((C265 * C794 - C92188 * C945) * C182 +
                (C265 * C1011 - C92188 * C1135) * C92177) *
                   C92) *
                  C92150 * C791 +
              (((C92188 * C946 - C265 * C798) * C182 +
                (C92188 * C1136 - C265 * C1012) * C92177) *
                   C89 +
               ((C92188 * C947 - C265 * C799) * C182 +
                (C92188 * C1137 - C265 * C1013) * C92177) *
                   C90 +
               ((C92188 * C948 - C265 * C800) * C182 +
                (C92188 * C1138 - C265 * C1014) * C92177) *
                   C91 +
               ((C92188 * C949 - C265 * C801) * C182 +
                (C92188 * C1139 - C265 * C1015) * C92177) *
                   C92) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C182 +
            (C265 * C1589 - C92188 * C1713) * C92177) *
               C89 +
           ((C265 * C1377 - C92188 * C1524) * C182 +
            (C265 * C1590 - C92188 * C1714) * C92177) *
               C90 +
           ((C265 * C1376 - C92188 * C1525) * C182 +
            (C265 * C1591 - C92188 * C1715) * C92177) *
               C91 +
           ((C265 * C1375 - C92188 * C1526) * C182 +
            (C265 * C1592 - C92188 * C1716) * C92177) *
               C92) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C182 +
            (C92188 * C1717 - C265 * C1593) * C92177) *
               C89 +
           ((C92188 * C1528 - C265 * C1380) * C182 +
            (C92188 * C1718 - C265 * C1594) * C92177) *
               C90 +
           ((C92188 * C1529 - C265 * C1381) * C182 +
            (C92188 * C1719 - C265 * C1595) * C92177) *
               C91 +
           ((C92188 * C1530 - C265 * C1382) * C182 +
            (C92188 * C1720 - C265 * C1596) * C92177) *
               C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 +
            (C92188 * C942 - C265 * C797) * C4107 +
            (C92188 * C1132 - C265 * C1008) * C4026 +
            (C92188 * C946 - C265 * C798) * C4108 +
            (C92188 * C1136 - C265 * C1012) * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 +
            (C4208 - C4209) * C4108 + (C4483 - C4484) * C4027) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4106 + (C503 - C502) * C4025 +
            (C2126 - C2127) * C4107 + (C2361 - C2362) * C4026 +
            (C4209 - C4208) * C4108 + (C4484 - C4483) * C4027) *
               C4023 +
           ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
            (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
            (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C4106 + C512 * C4025 + (C2131 - C2130) * C4107 +
            (C2364 - C2363) * C4026 + (C4213 - C4212) * C4108 +
            (C4486 - C4485) * C4027) *
               C4023 +
           (C297 * C4106 + C513 * C4025 + (C2135 - C2134) * C4107 +
            (C2366 - C2365) * C4026 + (C92188 * C949 - C265 * C801) * C4108 +
            (C92188 * C1139 - C265 * C1015) * C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
            (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
            (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
               C4023 +
           ((C2126 - C2127) * C4106 + (C2361 - C2362) * C4025 +
            (C4209 - C4208) * C4107 + (C4484 - C4483) * C4026 +
            (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C4106 + C5343 * C4025 + (C5050 - C5049) * C4107 +
            (C5340 - C5339) * C4026 + (C92188 * C5032 - C265 * C4816) * C4108 +
            (C92188 * C5331 - C265 * C5141) * C4027) *
               C4023 +
           (C5047 * C4106 + C5338 * C4025 + (C5054 - C5053) * C4107 +
            (C5342 - C5341) * C4026 + (C92188 * C5033 - C265 * C4817) * C4108 +
            (C92188 * C5332 - C265 * C5142) * C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C4106 +
            (C265 * C1589 - C92188 * C1713) * C4025 +
            (C265 * C3357 - C92188 * C3513) * C4107 +
            (C265 * C3587 - C92188 * C3731) * C4026 +
            (C265 * C5702 - C92188 * C5885) * C4108 +
            (C265 * C5971 - C92188 * C6137) * C4027) *
               C4023 +
           ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
            (C265 * C3358 - C92188 * C3514) * C4107 +
            (C265 * C3588 - C92188 * C3732) * C4026 +
            (C265 * C5701 - C92188 * C5886) * C4108 +
            (C265 * C5972 - C92188 * C6138) * C4027) *
               C92102) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C4106 +
            (C92188 * C1717 - C265 * C1593) * C4025 +
            (C92188 * C5887 - C265 * C5703) * C4107 +
            (C92188 * C6139 - C265 * C5973) * C4026 +
            (C92188 * C5889 - C265 * C5705) * C4108 +
            (C92188 * C6140 - C265 * C5975) * C4027) *
               C4023 +
           ((C92188 * C1528 - C265 * C1380) * C4106 +
            (C92188 * C1718 - C265 * C1594) * C4025 +
            (C92188 * C5888 - C265 * C5704) * C4107 +
            (C92188 * C6141 - C265 * C5974) * C4026 +
            (C92188 * C5890 - C265 * C5706) * C4108 +
            (C92188 * C6142 - C265 * C5976) * C4027) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C182 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C92177) *
               C4023 +
           ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
            (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C182 +
            (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C92177) *
               C4023 +
           ((C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C182 +
            (C9851 - C9852 + C9853 - C9854 + C9855 - C9856) * C92177) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C182 +
            (C9852 - C9851 + C9854 - C9853 + C9856 - C9855) * C92177) *
               C4023 +
           ((C9422 * C269 - C9581 * C111 + C9423 * C1526 - C9582 * C1375 +
             C9424 * C1530 - C9583 * C1382) *
                C182 +
            (C9422 * C498 - C9581 * C351 + C9423 * C1716 - C9582 * C1592 +
             C9424 * C1720 - C9583 * C1596) *
                C92177) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C182 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C92177) *
               C4023 +
           ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
            (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
               C92102) *
              C92150 * C790 +
          (((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
             C9583 * C5703 - C9424 * C5887) *
                C182 +
            (C9581 * C1008 - C9422 * C1132 + C9582 * C3587 - C9423 * C3731 +
             C9583 * C5973 - C9424 * C6139) *
                C92177) *
               C4023 +
           ((C9581 * C796 - C9422 * C943 + C9582 * C3358 - C9423 * C3514 +
             C9583 * C5704 - C9424 * C5888) *
                C182 +
            (C9581 * C1009 - C9422 * C1133 + C9582 * C3588 - C9423 * C3732 +
             C9583 * C5974 - C9424 * C6141) *
                C92177) *
               C92102) *
              C92150 * C791 +
          (((C9422 * C946 - C9581 * C798 + C9423 * C5885 - C9582 * C5702 +
             C9424 * C5889 - C9583 * C5705) *
                C182 +
            (C9422 * C1136 - C9581 * C1012 + C9423 * C6137 - C9582 * C5971 +
             C9424 * C6140 - C9583 * C5975) *
                C92177) *
               C4023 +
           ((C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
             C9424 * C5890 - C9583 * C5706) *
                C182 +
            (C9422 * C1137 - C9581 * C1013 + C9423 * C6138 - C9582 * C5972 +
             C9424 * C6142 - C9583 * C5976) *
                C92177) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C182 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C92177) *
               C4023 +
           ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
            (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
               C92102) *
              C1372 +
          (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C182 +
            (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
             C9583 * C11191 - C9424 * C11419) *
                C92177) *
               C4023 +
           ((C9581 * C1377 - C9422 * C1524 + C9582 * C1380 - C9423 * C1528 +
             C9583 * C10867 - C9424 * C11110) *
                C182 +
            (C9581 * C1590 - C9422 * C1714 + C9582 * C1594 - C9423 * C1718 +
             C9583 * C11192 - C9424 * C11420) *
                C92177) *
               C92102) *
              C1373 +
          (((C9422 * C1527 - C9581 * C1379 + C9423 * C11109 - C9582 * C10868 +
             C9424 * C11111 - C9583 * C10869) *
                C182 +
            (C9422 * C1717 - C9581 * C1593 + C9423 * C11419 - C9582 * C11191 +
             C9424 * C11421 - C9583 * C11193) *
                C92177) *
               C4023 +
           ((C9422 * C1528 - C9581 * C1380 + C9423 * C11110 - C9582 * C10867 +
             C9424 * C11112 - C9583 * C10870) *
                C182 +
            (C9422 * C1718 - C9581 * C1594 + C9423 * C11420 - C9582 * C11192 +
             C9424 * C11422 - C9583 * C11194) *
                C92177) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 +
                C91 * C118 - C104 * C110 + C92 * C120 - C106 * C111) *
                   C265 +
               (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 +
                C91 * C575 - C104 * C569 + C92 * C576 - C106 * C570) *
                   C92188) *
                  C92177 * C92150 * C92136 * C97 +
              ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 +
                C104 * C111 - C91 * C120 + C106 * C112 - C92 * C122) *
                   C265 +
               (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 +
                C104 * C570 - C91 * C576 + C106 * C571 - C92 * C577) *
                   C92188) *
                  C92177 * C92150 * C92136 * C98 +
              ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 +
                C91 * C122 - C104 * C112 + C92 * C124 - C106 * C113) *
                   C265 +
               (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 +
                C91 * C577 - C104 * C571 + C92 * C578 - C106 * C572) *
                   C92188) *
                  C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 +
                C91 * C118 - C104 * C110 + C92 * C120 - C106 * C111) *
                   C265 +
               (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 +
                C91 * C575 - C104 * C569 + C92 * C576 - C106 * C570) *
                   C92188) *
                  C92177 * C92150 * C790 +
              ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 +
                C104 * C795 - C91 * C804 + C106 * C794 - C92 * C802) *
                   C265 +
               (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
                C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
                   C92188) *
                  C92177 * C92150 * C791 +
              ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 +
                C91 * C814 - C104 * C800 + C92 * C816 - C106 * C801) *
                   C265 +
               (C89 * C1202 - C100 * C1194 + C90 * C1203 - C102 * C1195 +
                C91 * C1204 - C104 * C1196 + C92 * C1205 - C106 * C1197) *
                   C92188) *
                  C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C1372 +
          ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
            C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
               C265 +
           (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
            C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
               C92188) *
              C92177 * C1373 +
          ((C89 * C1391 - C100 * C1379 + C90 * C1393 - C102 * C1380 +
            C91 * C1395 - C104 * C1381 + C92 * C1397 - C106 * C1382) *
               C265 +
           (C89 * C1783 - C100 * C1775 + C90 * C1784 - C102 * C1776 +
            C91 * C1785 - C104 * C1777 + C92 * C1786 - C106 * C1778) *
               C92188) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
                C265 +
            (C4023 * C1198 - C4028 * C1190 + C92102 * C1199 - C4030 * C1191) *
                C92188) *
               C4026 +
           ((C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
                C265 +
            (C4023 * C1202 - C4028 * C1194 + C92102 * C1203 - C4030 * C1195) *
                C92188) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C265 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92188) *
               C4025 +
           ((C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
                C265 +
            (C4028 * C1191 - C4023 * C1199 + C4030 * C1192 - C92102 * C1200) *
                C92188) *
               C4026 +
           ((C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
                C265 +
            (C4028 * C1195 - C4023 * C1203 + C4030 * C1196 - C92102 * C1204) *
                C92188) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C265 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92188) *
               C4025 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C265 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92188) *
               C4026 +
           ((C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
                C265 +
            (C4023 * C1204 - C4028 * C1196 + C92102 * C1205 - C4030 * C1197) *
                C92188) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C265 +
            (C5427 - C5426 + C5429 - C5428) * C92188) *
               C4025 +
           ((C5157 - C5156 + C5159 - C5158) * C265 +
            (C5432 - C5431 + C5434 - C5433) * C92188) *
               C4026 +
           ((C5164 - C5165 + C5166 - C5167) * C265 +
            (C5435 - C5436 + C5437 - C5438) * C92188) *
               C4027) *
              C92150 * C791 +
          (C5443 * C4025 +
           ((C5165 - C5164 + C5167 - C5166) * C265 +
            (C5436 - C5435 + C5438 - C5437) * C92188) *
               C4026 +
           ((C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
                C265 +
            (C4023 * C5423 - C4028 * C5419 + C92102 * C5424 - C4030 * C5420) *
                C92188) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C1372 +
          (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C265 +
            (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                C92188) *
               C4025 +
           ((C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                C265 +
            (C4028 * C3801 - C4023 * C3805 + C4030 * C3802 - C92102 * C3806) *
                C92188) *
               C4026 +
           ((C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                C265 +
            (C4028 * C6217 - C4023 * C6223 + C4030 * C6218 - C92102 * C6224) *
                C92188) *
               C4027) *
              C1373 +
          (((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C265 +
            (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
                C92188) *
               C4025 +
           ((C4023 * C5711 - C4028 * C5703 + C92102 * C5713 - C4030 * C5704) *
                C265 +
            (C4023 * C6225 - C4028 * C6219 + C92102 * C6226 - C4030 * C6220) *
                C92188) *
               C4026 +
           ((C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                C265 +
            (C4023 * C6227 - C4028 * C6221 + C92102 * C6228 - C4030 * C6222) *
                C92188) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C9581 +
           (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
               C9422 +
           (C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
               C9582 +
           (C4023 * C1779 - C4028 * C1771 + C92102 * C1780 - C4030 * C1772) *
               C9423 +
           (C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C9583 +
           (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
               C9424) *
              C92177 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C9581 +
           (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
               C9422 +
           (C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
               C9582 +
           (C4028 * C1772 - C4023 * C1780 + C4030 * C1773 - C92102 * C1781) *
               C9423 +
           (C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
               C9583 +
           (C4028 * C1776 - C4023 * C1784 + C4030 * C1777 - C92102 * C1785) *
               C9424) *
              C92177 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C9581 +
           (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
               C9422 +
           (C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
               C9582 +
           (C4023 * C1781 - C4028 * C1773 + C92102 * C1782 - C4030 * C1774) *
               C9423 +
           (C4023 * C1395 - C4028 * C1381 + C92102 * C1397 - C4030 * C1382) *
               C9583 +
           (C4023 * C1785 - C4028 * C1777 + C92102 * C1786 - C4030 * C1778) *
               C9424) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C9581 +
           (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
               C9422 +
           (C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
               C9582 +
           (C4023 * C1779 - C4028 * C1771 + C92102 * C1780 - C4030 * C1772) *
               C9423 +
           (C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C9583 +
           (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
               C9424) *
              C92177 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C9581 +
           (C5427 - C5426 + C5429 - C5428) * C9422 +
           (C8805 - C8806 + C8807 - C8808) * C9582 +
           (C9127 - C9128 + C9129 - C9130) * C9423 +
           (C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
               C9583 +
           (C4028 * C6219 - C4023 * C6225 + C4030 * C6220 - C92102 * C6226) *
               C9424) *
              C92177 * C92150 * C791 +
          (C5176 * C9581 + C5441 * C9422 +
           (C8814 - C8813 + C8816 - C8815) * C9582 +
           (C9132 - C9131 + C9134 - C9133) * C9423 +
           (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
               C9583 +
           (C4023 * C6227 - C4028 * C6221 + C92102 * C6228 - C4030 * C6222) *
               C9424) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C9581 +
           (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
               C9422 +
           (C11200 - C11201 + C11202 - C11203) * C9582 +
           (C11506 - C11507 + C11508 - C11509) * C9423 + C11228 * C9583 +
           C11520 * C9424) *
              C92177 * C1372 +
          ((C11201 - C11200 + C11203 - C11202) * C9581 +
           (C11507 - C11506 + C11509 - C11508) * C9422 +
           (C11209 - C11208 + C11211 - C11210) * C9582 +
           (C11511 - C11510 + C11513 - C11512) * C9423 +
           (C11216 - C11217 + C11218 - C11219) * C9583 +
           (C11514 - C11515 + C11516 - C11517) * C9424) *
              C92177 * C1373 +
          (C11228 * C9581 + C11520 * C9422 +
           (C11217 - C11216 + C11219 - C11218) * C9582 +
           (C11515 - C11514 + C11517 - C11516) * C9423 +
           (C4023 * C10875 - C4028 * C10869 + C92102 * C10877 -
            C4030 * C10870) *
               C9583 +
           (C4023 * C11503 - C4028 * C11499 + C92102 * C11504 -
            C4030 * C11500) *
               C9424) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C265 +
                (C92177 * C629 - C182 * C567) * C92188) *
                   C89 +
               ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 +
               C650 * C91 + C651 * C92) *
                  C92150 * C92136 * C97 +
              (((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
               ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
               ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
               ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
                  C92150 * C92136 * C98 +
              (C650 * C89 + C651 * C90 +
               ((C209 - C208) * C265 + (C645 - C644) * C92188) * C91 +
               ((C92177 * C188 - C182 * C113) * C265 +
                (C92177 * C634 - C182 * C572) * C92188) *
                   C92) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C265 +
                (C92177 * C629 - C182 * C567) * C92188) *
                   C89 +
               ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 +
               C650 * C91 + C651 * C92) *
                  C92150 * C790 +
              (((C182 * C797 - C92177 * C876) * C265 +
                (C182 * C1190 - C92177 * C1256) * C92188) *
                   C89 +
               ((C182 * C796 - C92177 * C877) * C265 +
                (C182 * C1191 - C92177 * C1257) * C92188) *
                   C90 +
               ((C182 * C795 - C92177 * C878) * C265 +
                (C182 * C1192 - C92177 * C1258) * C92188) *
                   C91 +
               ((C182 * C794 - C92177 * C879) * C265 +
                (C182 * C1193 - C92177 * C1259) * C92188) *
                   C92) *
                  C92150 * C791 +
              (((C92177 * C880 - C182 * C798) * C265 +
                (C92177 * C1260 - C182 * C1194) * C92188) *
                   C89 +
               ((C92177 * C881 - C182 * C799) * C265 +
                (C92177 * C1261 - C182 * C1195) * C92188) *
                   C90 +
               ((C92177 * C882 - C182 * C800) * C265 +
                (C92177 * C1262 - C182 * C1196) * C92188) *
                   C91 +
               ((C92177 * C883 - C182 * C801) * C265 +
                (C92177 * C1263 - C182 * C1197) * C92188) *
                   C92) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C1372 +
          (((C182 * C1378 - C92177 * C1457) * C265 +
            (C182 * C1771 - C92177 * C1837) * C92188) *
               C89 +
           ((C182 * C1377 - C92177 * C1458) * C265 +
            (C182 * C1772 - C92177 * C1838) * C92188) *
               C90 +
           ((C182 * C1376 - C92177 * C1459) * C265 +
            (C182 * C1773 - C92177 * C1839) * C92188) *
               C91 +
           ((C182 * C1375 - C92177 * C1460) * C265 +
            (C182 * C1774 - C92177 * C1840) * C92188) *
               C92) *
              C1373 +
          (((C92177 * C1461 - C182 * C1379) * C265 +
            (C92177 * C1841 - C182 * C1775) * C92188) *
               C89 +
           ((C92177 * C1462 - C182 * C1380) * C265 +
            (C92177 * C1842 - C182 * C1776) * C92188) *
               C90 +
           ((C92177 * C1463 - C182 * C1381) * C265 +
            (C92177 * C1843 - C182 * C1777) * C92188) *
               C91 +
           ((C92177 * C1464 - C182 * C1382) * C265 +
            (C92177 * C1844 - C182 * C1778) * C92188) *
               C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
               C4023 +
           ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
            (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C265 +
            (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C92188) *
               C4023 +
           ((C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
             C4027 * C883 - C4108 * C801) *
                C265 +
            (C4025 * C632 - C4106 * C570 + C4026 * C1259 - C4107 * C1193 +
             C4027 * C1263 - C4108 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C265 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C92188) *
               C4023 +
           ((C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
             C4108 * C4814 - C4027 * C4949) *
                C265 +
            (C4106 * C1191 - C4025 * C1257 + C4107 * C1195 - C4026 * C1261 +
             C4108 * C5418 - C4027 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C265 +
            (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
             C4027 * C5519 - C4108 * C5419) *
                C92188) *
               C4023 +
           ((C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
             C4027 * C4951 - C4108 * C4817) *
                C265 +
            (C4025 * C1261 - C4106 * C1195 + C4026 * C5518 - C4107 * C5418 +
             C4027 * C5520 - C4108 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C1372 +
          (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C265 +
            (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
             C4108 * C6217 - C4027 * C6303) *
                C92188) *
               C4023 +
           ((C4106 * C1377 - C4025 * C1458 + C4107 * C3358 - C4026 * C3440 +
             C4108 * C5701 - C4027 * C5800) *
                C265 +
            (C4106 * C1772 - C4025 * C1838 + C4107 * C3802 - C4026 * C3876 +
             C4108 * C6218 - C4027 * C6304) *
                C92188) *
               C92102) *
              C1373 +
          (((C4025 * C1461 - C4106 * C1379 + C4026 * C5801 - C4107 * C5703 +
             C4027 * C5802 - C4108 * C5705) *
                C265 +
            (C4025 * C1841 - C4106 * C1775 + C4026 * C6305 - C4107 * C6219 +
             C4027 * C6306 - C4108 * C6221) *
                C92188) *
               C4023 +
           ((C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
             C4027 * C5804 - C4108 * C5706) *
                C265 +
            (C4025 * C1842 - C4106 * C1776 + C4026 * C6307 - C4107 * C6220 +
             C4027 * C6308 - C4108 * C6222) *
                C92188) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C9581 +
            (C92177 * C629 - C182 * C567) * C9422 +
            (C92177 * C1457 - C182 * C1378) * C9582 +
            (C92177 * C1837 - C182 * C1771) * C9423 +
            (C92177 * C1461 - C182 * C1379) * C9583 +
            (C92177 * C1841 - C182 * C1775) * C9424) *
               C4023 +
           ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
            (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 +
            (C9500 - C9501) * C9583 + (C10005 - C10006) * C9424) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C9581 + (C637 - C636) * C9422 +
            (C2739 - C2740) * C9582 + (C3195 - C3196) * C9423 +
            (C9501 - C9500) * C9583 + (C10006 - C10005) * C9424) *
               C4023 +
           ((C201 - C200) * C9581 + (C640 - C639) * C9422 +
            (C2743 - C2744) * C9582 + (C3197 - C3198) * C9423 +
            (C9504 - C9505) * C9583 + (C10007 - C10008) * C9424) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C212 * C9581 + C646 * C9422 + (C2744 - C2743) * C9582 +
            (C3198 - C3197) * C9423 + (C9505 - C9504) * C9583 +
            (C10008 - C10007) * C9424) *
               C4023 +
           (C214 * C9581 + C647 * C9422 + (C2748 - C2747) * C9582 +
            (C3200 - C3199) * C9423 + (C92177 * C1464 - C182 * C1382) * C9583 +
            (C92177 * C1844 - C182 * C1778) * C9424) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C9581 +
            (C92177 * C629 - C182 * C567) * C9422 +
            (C92177 * C1457 - C182 * C1378) * C9582 +
            (C92177 * C1837 - C182 * C1771) * C9423 +
            (C92177 * C1461 - C182 * C1379) * C9583 +
            (C92177 * C1841 - C182 * C1775) * C9424) *
               C4023 +
           ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
            (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 +
            (C9500 - C9501) * C9583 + (C10005 - C10006) * C9424) *
               C92102) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C9581 +
            (C182 * C1190 - C92177 * C1256) * C9422 +
            (C182 * C3357 - C92177 * C3439) * C9582 +
            (C182 * C3801 - C92177 * C3875) * C9423 +
            (C182 * C5703 - C92177 * C5801) * C9583 +
            (C182 * C6219 - C92177 * C6305) * C9424) *
               C4023 +
           ((C2046 - C2047) * C9581 + (C2502 - C2503) * C9422 +
            (C182 * C3358 - C92177 * C3440) * C9582 +
            (C182 * C3802 - C92177 * C3876) * C9423 +
            (C182 * C5704 - C92177 * C5803) * C9583 +
            (C182 * C6220 - C92177 * C6307) * C9424) *
               C92102) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C9581 +
            (C92177 * C1260 - C182 * C1194) * C9422 +
            (C92177 * C5799 - C182 * C5702) * C9582 +
            (C92177 * C6303 - C182 * C6217) * C9423 +
            (C92177 * C5802 - C182 * C5705) * C9583 +
            (C92177 * C6306 - C182 * C6221) * C9424) *
               C4023 +
           ((C92177 * C881 - C182 * C799) * C9581 +
            (C92177 * C1261 - C182 * C1195) * C9422 +
            (C92177 * C5800 - C182 * C5701) * C9582 +
            (C92177 * C6304 - C182 * C6218) * C9423 +
            (C92177 * C5804 - C182 * C5706) * C9583 +
            (C92177 * C6308 - C182 * C6222) * C9424) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C9581 +
            (C92177 * C629 - C182 * C567) * C9422 + (C11009 - C11010) * C9582 +
            (C11599 - C11600) * C9423 + C11027 * C9583 + C11608 * C9424) *
               C4023 +
           ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
            (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 + C11017 * C9583 +
            C11603 * C9424) *
               C92102) *
              C1372 +
          (((C11010 - C11009) * C9581 + (C11600 - C11599) * C9422 +
            (C11014 - C11013) * C9582 + (C11602 - C11601) * C9423 +
            (C11019 - C11020) * C9583 + (C11604 - C11605) * C9424) *
               C4023 +
           ((C2739 - C2740) * C9581 + (C3195 - C3196) * C9422 +
            (C9501 - C9500) * C9582 + (C10006 - C10005) * C9423 +
            (C11023 - C11024) * C9583 + (C11606 - C11607) * C9424) *
               C92102) *
              C1373 +
          ((C11027 * C9581 + C11608 * C9422 + (C11020 - C11019) * C9582 +
            (C11605 - C11604) * C9423 +
            (C92177 * C11002 - C182 * C10869) * C9583 +
            (C92177 * C11596 - C182 * C11499) * C9424) *
               C4023 +
           (C11017 * C9581 + C11603 * C9422 + (C11024 - C11023) * C9582 +
            (C11607 - C11606) * C9423 +
            (C92177 * C11003 - C182 * C10870) * C9583 +
            (C92177 * C11597 - C182 * C11500) * C9424) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                   C92177 * C89 +
               C737 * C90 + C738 * C91 + C739 * C92) *
                  C92150 * C92136 * C97 -
              (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
                  C92136 * C98 +
              (C738 * C89 + C739 * C90 + C740 * C91 +
               (C265 * C271 - C701 * C113 - C265 * C572 + C92188 * C707) *
                   C92177 * C92) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                   C92177 * C89 +
               C737 * C90 + C738 * C91 + C739 * C92) *
                  C92150 * C790 -
              ((C265 * C945 - C701 * C794 - C265 * C1193 + C92188 * C1314) *
                   C92177 * C92 +
               (C265 * C944 - C701 * C795 - C265 * C1192 + C92188 * C1315) *
                   C92177 * C91 +
               (C265 * C943 - C701 * C796 - C265 * C1191 + C92188 * C1316) *
                   C92177 * C90 +
               (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                   C92177 * C89) *
                  C92150 * C791 +
              ((C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
                   C92177 * C89 +
               (C265 * C947 - C701 * C799 - C265 * C1195 + C92188 * C1319) *
                   C92177 * C90 +
               (C265 * C948 - C701 * C800 - C265 * C1196 + C92188 * C1320) *
                   C92177 * C91 +
               (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                   C92177 * C92) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C1372 -
          ((C265 * C1526 - C701 * C1375 - C265 * C1774 + C92188 * C1895) *
               C92177 * C92 +
           (C265 * C1525 - C701 * C1376 - C265 * C1773 + C92188 * C1896) *
               C92177 * C91 +
           (C265 * C1524 - C701 * C1377 - C265 * C1772 + C92188 * C1897) *
               C92177 * C90 +
           (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
               C92177 * C89) *
              C1373 +
          ((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
               C92177 * C89 +
           (C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
               C92177 * C90 +
           (C265 * C1529 - C701 * C1381 - C265 * C1777 + C92188 * C1901) *
               C92177 * C91 +
           (C265 * C1530 - C701 * C1382 - C265 * C1778 + C92188 * C1902) *
               C92177 * C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C4026 +
            (C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
                C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C92136 * C97 -
          ((C4740 + C4731 + C4732) * C92102 + (C4739 + C4722 + C4721) * C4023) *
              C92150 * C92136 * C98 +
          ((C4732 + C4731 + C4740) * C4023 +
           (C735 * C4025 + C2593 * C4026 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C790 -
          ((C5626 * C4027 + C4737 * C4026 + C2595 * C4025) * C92102 +
           (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
              C92150 * C791 +
          ((C5625 * C4025 + C5627 * C4026 +
            (C265 * C5032 - C701 * C4816 - C265 * C5419 + C92188 * C5597) *
                C4027) *
               C4023 +
           (C4737 * C4025 + C5626 * C4026 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C1372 -
          (((C265 * C5886 - C701 * C5701 - C265 * C6218 + C92188 * C6383) *
                C4027 +
            (C265 * C3514 - C701 * C3358 - C265 * C3802 + C92188 * C3946) *
                C4026 +
            C3288 * C4025) *
               C92102 +
           ((C265 * C5885 - C701 * C5702 - C265 * C6217 + C92188 * C6384) *
                C4027 +
            (C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                C4026 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C4025) *
               C4023) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C4025 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C4026 +
            (C265 * C5889 - C701 * C5705 - C265 * C6221 + C92188 * C6386) *
                C4027) *
               C4023 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C4025 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C4026 +
            (C265 * C5890 - C701 * C5706 - C265 * C6222 + C92188 * C6388) *
                C4027) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C92177 * C4023 +
           (C10122 + C10123 + C10124) * C92177 * C92102) *
              C92150 * C92136 * C97 -
          ((C10125 + C10126 + C10127) * C92177 * C92102 +
           (C10124 + C10123 + C10122) * C92177 * C4023) *
              C92150 * C92136 * C98 +
          ((C10127 + C10126 + C10125) * C92177 * C4023 +
           (C9581 * C269 - C10082 * C111 - C9581 * C570 + C9422 * C705 +
            C9582 * C1526 - C10083 * C1375 - C9582 * C1774 + C9423 * C1895 +
            C9583 * C1530 - C10084 * C1382 - C9583 * C1778 + C9424 * C1902) *
               C92177 * C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C92177 * C4023 +
           (C10122 + C10123 + C10124) * C92177 * C92102) *
              C92150 * C790 -
          ((C9583 * C5888 - C10084 * C5704 - C9583 * C6220 + C9424 * C6387 +
            C9582 * C3514 - C10083 * C3358 - C9582 * C3802 + C9423 * C3946 +
            C9581 * C943 - C10082 * C796 - C9581 * C1191 + C9422 * C1316) *
               C92177 * C92102 +
           (C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385 +
            C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
            C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317) *
               C92177 * C4023) *
              C92150 * C791 +
          ((C9581 * C946 - C10082 * C798 - C9581 * C1194 + C9422 * C1318 +
            C9582 * C5885 - C10083 * C5702 - C9582 * C6217 + C9423 * C6384 +
            C9583 * C5889 - C10084 * C5705 - C9583 * C6221 + C9424 * C6386) *
               C92177 * C4023 +
           (C9581 * C947 - C10082 * C799 - C9581 * C1195 + C9422 * C1319 +
            C9582 * C5886 - C10083 * C5701 - C9582 * C6218 + C9423 * C6383 +
            C9583 * C5890 - C10084 * C5706 - C9583 * C6222 + C9424 * C6388) *
               C92177 * C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C92177 * C4023 +
           (C10122 + C10123 + C10124) * C92177 * C92102) *
              C1372 -
          ((C9583 * C11110 - C10084 * C10867 - C9583 * C11498 + C9424 * C11682 +
            C9582 * C1528 - C10083 * C1380 - C9582 * C1776 + C9423 * C1900 +
            C9581 * C1524 - C10082 * C1377 - C9581 * C1772 + C9422 * C1897) *
               C92177 * C92102 +
           (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 + C9424 * C11683 +
            C9582 * C1527 - C10083 * C1379 - C9582 * C1775 + C9423 * C1899 +
            C9581 * C1523 - C10082 * C1378 - C9581 * C1771 + C9422 * C1898) *
               C92177 * C4023) *
              C1373 +
          ((C9581 * C1527 - C10082 * C1379 - C9581 * C1775 + C9422 * C1899 +
            C9582 * C11109 - C10083 * C10868 - C9582 * C11497 + C9423 * C11683 +
            C9583 * C11111 - C10084 * C10869 - C9583 * C11499 +
            C9424 * C11684) *
               C92177 * C4023 +
           (C9581 * C1528 - C10082 * C1380 - C9581 * C1776 + C9422 * C1900 +
            C9582 * C11110 - C10083 * C10867 - C9582 * C11498 + C9423 * C11682 +
            C9583 * C11112 - C10084 * C10870 - C9583 * C11500 +
            C9424 * C11685) *
               C92177 * C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C2664 -
           ((C4030 * C5707 - C4031 * C5701 - C4030 * C5708 + C92102 * C5719 +
             C4028 * C5709 - C4029 * C5702 - C4028 * C5710 + C4023 * C5720) *
                C92188 * C4027 +
            (C4030 * C3363 - C4031 * C3358 - C4030 * C3364 + C92102 * C3370 +
             C4028 * C3361 - C4029 * C3357 - C4028 * C3362 + C4023 * C3369) *
                C92188 * C4026 +
            (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
             C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
                C92188 * C4025) *
               C2665) *
              C92136 * C1971 +
          (((C4028 * C1387 - C4029 * C1377 - C4028 * C1388 + C4023 * C1401 +
             C4030 * C1385 - C4031 * C1376 - C4030 * C1386 + C92102 * C1400) *
                C92188 * C4025 +
            (C4028 * C3363 - C4029 * C3358 - C4028 * C3364 + C4023 * C3370 +
             C4030 * C3365 - C4031 * C3359 - C4030 * C3366 + C92102 * C3371) *
                C92188 * C4026 +
            (C4028 * C5707 - C4029 * C5701 - C4028 * C5708 + C4023 * C5719 +
             C4030 * C7489 - C4031 * C7488 - C4030 * C7490 + C92102 * C7491) *
                C92188 * C4027) *
               C2665 -
           ((C6519 + C6518) * C92188 * C4027 +
            (C6517 + C6516) * C92188 * C4026 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92188 * C4025) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C2664 -
           (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
            C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
            C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
            C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
               C92188 * C92177 * C2665) *
              C92136 * C1971 +
          ((C100 * C1387 - C101 * C1377 - C100 * C1388 + C89 * C1401 +
            C102 * C1385 - C103 * C1376 - C102 * C1386 + C90 * C1400 +
            C104 * C1383 - C105 * C1375 - C104 * C1384 + C91 * C1399 +
            C106 * C2667 - C107 * C2666 - C106 * C2668 + C92 * C2669) *
               C92188 * C92177 * C2665 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C92188 * C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C9422 +
            (C10920 + C10921) * C9423 + C10926 * C9424) *
               C92177 * C2664 -
           ((C10924 + C10925) * C9424 + (C10923 + C10922) * C9423 +
            (C10921 + C10920) * C9422) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C12776 + C12777) * C9422 + (C12778 + C12779) * C9423 +
            (C4028 * C10871 - C4029 * C10867 - C4028 * C10872 + C4023 * C10879 +
             C4030 * C12748 - C4031 * C12747 - C4030 * C12749 +
             C92102 * C12750) *
                C9424) *
               C92177 * C2665 -
           ((C12779 + C12778) * C9424 + (C12777 + C12776) * C9423 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C9422) *
               C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C2664 +
           ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C4028 +
            (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
             C4108 * C5710 - C4027 * C5805) *
                C4023 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C4030 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92102) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
            (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
            (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
               C92188 * C2664 +
           ((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C4028 +
            (C7600 - C7599 + C7602 - C7601 + C7604 - C7603) * C4023 +
            (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C4030 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92102) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C2664 +
           ((C182 * C1378 - C92177 * C1457) * C100 +
            (C182 * C1390 - C92177 * C1465) * C89 + (C2739 - C2740) * C102 +
            (C2741 - C2742) * C90 + (C2743 - C2744) * C104 +
            (C2745 - C2746) * C91 + (C2747 - C2748) * C106 +
            (C2749 - C2750) * C92) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C92188 * C2664 +
           ((C2740 - C2739) * C100 + (C2742 - C2741) * C89 +
            (C2744 - C2743) * C102 + (C2746 - C2745) * C90 +
            (C2748 - C2747) * C104 + (C2750 - C2749) * C91 +
            (C92177 * C2736 - C182 * C2666) * C106 +
            (C92177 * C2737 - C182 * C2668) * C92) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C4028 +
             (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
             (C198 - C199) * C92102) *
                C9422 +
            ((C11009 - C11010) * C4028 + (C11011 - C11012) * C4023 +
             C12880 * C4030 + C12881 * C92102) *
                C9423 +
            C11035 * C9424) *
               C2664 +
           (((C11010 - C11009) * C4028 + (C11012 - C11011) * C4023 +
             C12882 * C4030 + C12883 * C92102) *
                C9422 +
            ((C11014 - C11013) * C4028 + (C11016 - C11015) * C4023 +
             C12884 * C4030 + C12885 * C92102) *
                C9423 +
            ((C11019 - C11020) * C4028 + (C11021 - C11022) * C4023 +
             (C11023 - C11024) * C4030 + (C11025 - C11026) * C92102) *
                C9424) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C4028 + (C199 - C198) * C4023 +
             (C201 - C200) * C4030 + (C203 - C202) * C92102) *
                C9422 +
            (C12882 * C4028 + C12883 * C4023 + (C2743 - C2744) * C4030 +
             (C2745 - C2746) * C92102) *
                C9423 +
            (C12884 * C4028 + C12885 * C4023 + (C9504 - C9505) * C4030 +
             (C9506 - C9507) * C92102) *
                C9424) *
               C2664 +
           ((C12880 * C4028 + C12881 * C4023 + (C2744 - C2743) * C4030 +
             (C2746 - C2745) * C92102) *
                C9422 +
            (C11017 * C4028 + C11018 * C4023 + (C9505 - C9504) * C4030 +
             (C9507 - C9506) * C92102) *
                C9423 +
            ((C11024 - C11023) * C4028 + (C11026 - C11025) * C4023 +
             (C92177 * C12877 - C182 * C12747) * C4030 +
             (C92177 * C12878 - C182 * C12749) * C92102) *
                C9424) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4028 +
             (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
             (C281 - C282) * C92102) *
                C4025 +
            ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 + C6732 * C4030 +
             C6733 * C92102) *
                C4026 +
            C5065 * C4027) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4028 +
             (C265 * C1390 - C92188 * C1531) * C4023 + (C2819 - C2820) * C4030 +
             (C2821 - C2822) * C92102) *
                C4025 +
            ((C265 * C3357 - C92188 * C3513) * C4028 +
             (C265 * C3362 - C92188 * C3517) * C4023 + (C7705 - C7706) * C4030 +
             (C7707 - C7708) * C92102) *
                C4026 +
            ((C265 * C5702 - C92188 * C5885) * C4028 +
             (C265 * C5710 - C92188 * C5891) * C4023 + (C7709 - C7710) * C4030 +
             (C7711 - C7712) * C92102) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C4028 + (C282 - C281) * C4023 +
             (C284 - C283) * C4030 + (C286 - C285) * C92102) *
                C4025 +
            (C6734 * C4028 + C6735 * C4023 + (C2130 - C2131) * C4030 +
             (C2132 - C2133) * C92102) *
                C4026 +
            (C6736 * C4028 + C6737 * C4023 + (C4212 - C4213) * C4030 +
             (C4214 - C4215) * C92102) *
                C4027) *
               C2664 +
           (((C2820 - C2819) * C4028 + (C2822 - C2821) * C4023 +
             (C2824 - C2823) * C4030 + (C2826 - C2825) * C92102) *
                C4025 +
            ((C7706 - C7705) * C4028 + (C7708 - C7707) * C4023 +
             (C92188 * C3515 - C265 * C3359) * C4030 +
             (C92188 * C3519 - C265 * C3366) * C92102) *
                C4026 +
            ((C7710 - C7709) * C4028 + (C7712 - C7711) * C4023 +
             (C92188 * C7702 - C265 * C7488) * C4030 +
             (C92188 * C7703 - C265 * C7490) * C92102) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C100 +
            (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C92177 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C100 +
            (C265 * C1390 - C92188 * C1531) * C89 + (C2819 - C2820) * C102 +
            (C2821 - C2822) * C90 + (C2823 - C2824) * C104 +
            (C2825 - C2826) * C91 + (C2827 - C2828) * C106 +
            (C2829 - C2830) * C92) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C92177 * C2664 +
           ((C2820 - C2819) * C100 + (C2822 - C2821) * C89 +
            (C2824 - C2823) * C102 + (C2826 - C2825) * C90 +
            (C2828 - C2827) * C104 + (C2830 - C2829) * C91 +
            (C92188 * C2816 - C265 * C2666) * C106 +
            (C92188 * C2817 - C265 * C2668) * C92) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C4028 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C4023 +
            (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
            (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
               C92177 * C2664 +
           ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C4028 +
            (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
             C9583 * C10874 - C9424 * C11113) *
                C4023 +
            (C12986 - C12987 + C12988 - C12989 + C12990 - C12991) * C4030 +
            (C12992 - C12993 + C12994 - C12995 + C12996 - C12997) * C92102) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C4028 +
            (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C4023 +
            (C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C4030 +
            (C9603 - C9604 + C9605 - C9606 + C9607 - C9608) * C92102) *
               C92177 * C2664 +
           ((C12987 - C12986 + C12989 - C12988 + C12991 - C12990) * C4028 +
            (C12993 - C12992 + C12995 - C12994 + C12997 - C12996) * C4023 +
            (C9422 * C1525 - C9581 * C1376 + C9423 * C1529 - C9582 * C1381 +
             C9424 * C12983 - C9583 * C12747) *
                C4030 +
            (C9422 * C1533 - C9581 * C1386 + C9423 * C1537 - C9582 * C1396 +
             C9424 * C12984 - C9583 * C12749) *
                C92102) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C2664 +
           ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C4106 +
            (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
                C4025 +
            (C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                C4107 +
            (C4028 * C3587 - C4023 * C3591 + C4030 * C3588 - C92102 * C3592) *
                C4026 +
            (C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                C4108 +
            (C4028 * C5971 - C4023 * C5977 + C4030 * C5972 - C92102 * C5978) *
                C4027) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C4106 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C4025 +
            (C6838 - C6839 + C6840 - C6841) * C4107 +
            (C6842 - C6843 + C6844 - C6845) * C4026 +
            (C6846 - C6847 + C6848 - C6849) * C4108 +
            (C6850 - C6851 + C6852 - C6853) * C4027) *
               C92188 * C2664 +
           ((C4023 * C1387 - C4028 * C1377 + C92102 * C1385 - C4030 * C1376) *
                C4106 +
            (C4023 * C1598 - C4028 * C1590 + C92102 * C1599 - C4030 * C1591) *
                C4025 +
            (C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                C4107 +
            (C4023 * C3592 - C4028 * C3588 + C92102 * C3593 - C4030 * C3589) *
                C4026 +
            (C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                C4108 +
            (C4023 * C5978 - C4028 * C5972 + C92102 * C7811 - C4030 * C7810) *
                C4027) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C182 +
            (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
             C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
                C92177) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C92177) *
               C92188 * C2664 +
           ((C89 * C1387 - C100 * C1377 + C90 * C1385 - C102 * C1376 +
             C91 * C1383 - C104 * C1375 + C92 * C2667 - C106 * C2666) *
                C182 +
            (C89 * C1598 - C100 * C1590 + C90 * C1599 - C102 * C1591 +
             C91 * C1600 - C104 * C1592 + C92 * C2897 - C106 * C2896) *
                C92177) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C182 +
             (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                 C92177) *
                C9422 +
            ((C11200 - C11201 + C11202 - C11203) * C182 +
             (C11204 - C11205 + C11206 - C11207) * C92177) *
                C9423 +
            C11232 * C9424) *
               C2664 +
           (((C11201 - C11200 + C11203 - C11202) * C182 +
             (C11205 - C11204 + C11207 - C11206) * C92177) *
                C9422 +
            ((C11209 - C11208 + C11211 - C11210) * C182 +
             (C11213 - C11212 + C11215 - C11214) * C92177) *
                C9423 +
            ((C11216 - C11217 + C11218 - C11219) * C182 +
             (C11220 - C11221 + C11222 - C11223) * C92177) *
                C9424) *
               C2665) *
              C92136 * C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C182 +
             (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                 C92177) *
                C9422 +
            ((C13098 - C13099 + C13100 - C13101) * C182 +
             (C13102 - C13103 + C13104 - C13105) * C92177) *
                C9423 +
            ((C13106 - C13107 + C13108 - C13109) * C182 +
             (C13110 - C13111 + C13112 - C13113) * C92177) *
                C9424) *
               C2664 +
           (((C13099 - C13098 + C13101 - C13100) * C182 +
             (C13103 - C13102 + C13105 - C13104) * C92177) *
                C9422 +
            ((C13107 - C13106 + C13109 - C13108) * C182 +
             (C13111 - C13110 + C13113 - C13112) * C92177) *
                C9423 +
            ((C4023 * C10871 - C4028 * C10867 + C92102 * C12748 -
              C4030 * C12747) *
                 C182 +
             (C4023 * C11196 - C4028 * C11192 + C92102 * C13096 -
              C4030 * C13095) *
                 C92177) *
                C9424) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C2664 -
           ((C7930 + C7931 + C7932) * C92102 +
            (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
             C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
             C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
                C4023) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C7932 + C7931 + C7930) * C4023 +
            (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
             C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
             C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
                C92102) *
               C92188 * C2665 -
           ((C4406 + C4407 + C4408) * C92102 +
            (C4405 + C4404 + C4403) * C4023) *
               C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C2664 -
           (C2984 * C92 + C2985 * C91 + C2986 * C90 +
            (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C89) *
               C92188 * C2665) *
              C92136 * C1971 +
          ((C2986 * C89 + C2985 * C90 + C2984 * C91 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C92) *
               C92188 * C2665 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
             C442 * C92102) *
                C9422 +
            (C11341 + C11315) * C9423 + C11345 * C9424) *
               C2664 -
           ((C11343 + C11344) * C9424 + (C11320 + C11342) * C9423 +
            (C11315 + C11341) * C9422) *
               C2665) *
              C92136 * C1971 +
          (((C13213 + C13214) * C9422 + (C13215 + C13216) * C9423 +
            (C11339 * C4023 +
             (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
                 C92102) *
                C9424) *
               C2665 -
           ((C13216 + C13215) * C9424 + (C13214 + C13213) * C9423 +
            (C443 * C92102 + C442 * C4023) * C9422) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4106 +
             (C265 * C1589 - C92188 * C1713) * C4025 +
             (C265 * C3357 - C92188 * C3513) * C4107 +
             (C265 * C3587 - C92188 * C3731) * C4026 +
             (C265 * C5702 - C92188 * C5885) * C4108 +
             (C265 * C5971 - C92188 * C6137) * C4027) *
                C4023 +
            ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
             (C7705 - C7706) * C4107 + (C8032 - C8033) * C4026 +
             (C7709 - C7710) * C4108 + (C8034 - C8035) * C4027) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C4106 + (C503 - C502) * C4025 + C6734 * C4107 +
             C7074 * C4026 + C6736 * C4108 + C7075 * C4027) *
                C4023 +
            ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
             (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
             (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
                C92102) *
               C2664 +
           (((C2820 - C2819) * C4106 + (C3055 - C3054) * C4025 +
             (C7706 - C7705) * C4107 + (C8033 - C8032) * C4026 +
             (C7710 - C7709) * C4108 + (C8035 - C8034) * C4027) *
                C4023 +
            ((C2824 - C2823) * C4106 + (C3057 - C3056) * C4025 +
             (C92188 * C3515 - C265 * C3359) * C4107 +
             (C92188 * C3733 - C265 * C3589) * C4026 +
             (C92188 * C7702 - C265 * C7488) * C4108 +
             (C92188 * C8030 - C265 * C7810) * C4027) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C182 +
             (C265 * C1589 - C92188 * C1713) * C92177) *
                C89 +
            ((C2819 - C2820) * C182 + (C3054 - C3055) * C92177) * C90 +
            ((C2823 - C2824) * C182 + (C3056 - C3057) * C92177) * C91 +
            ((C2827 - C2828) * C182 + (C3058 - C3059) * C92177) * C92) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
               C2664 +
           (((C2820 - C2819) * C182 + (C3055 - C3054) * C92177) * C89 +
            ((C2824 - C2823) * C182 + (C3057 - C3056) * C92177) * C90 +
            ((C2828 - C2827) * C182 + (C3059 - C3058) * C92177) * C91 +
            ((C92188 * C2816 - C265 * C2666) * C182 +
             (C92188 * C3052 - C265 * C2896) * C92177) *
                C92) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C182 +
             (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
              C9424 * C1717 - C9583 * C1593) *
                 C92177) *
                C4023 +
            ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
             (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
                C92102) *
               C2664 +
           (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
              C9583 * C10868 - C9424 * C11109) *
                 C182 +
             (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
              C9583 * C11191 - C9424 * C11419) *
                 C92177) *
                C4023 +
            ((C12986 - C12987 + C12988 - C12989 + C12990 - C12991) * C182 +
             (C13316 - C13317 + C13318 - C13319 + C13320 - C13321) * C92177) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C182 +
             (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C92177) *
                C4023 +
            ((C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C182 +
             (C9851 - C9852 + C9853 - C9854 + C9855 - C9856) * C92177) *
                C92102) *
               C2664 +
           (((C12987 - C12986 + C12989 - C12988 + C12991 - C12990) * C182 +
             (C13317 - C13316 + C13319 - C13318 + C13321 - C13320) * C92177) *
                C4023 +
            ((C9422 * C1525 - C9581 * C1376 + C9423 * C1529 - C9582 * C1381 +
              C9424 * C12983 - C9583 * C12747) *
                 C182 +
             (C9422 * C1715 - C9581 * C1591 + C9423 * C1719 - C9582 * C1595 +
              C9424 * C13314 - C9583 * C13095) *
                 C92177) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C2664 +
           (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                 C265 +
             (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                 C92188) *
                C4025 +
            ((C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                 C265 +
             (C4028 * C3801 - C4023 * C3805 + C4030 * C3802 - C92102 * C3806) *
                 C92188) *
                C4026 +
            ((C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                 C265 +
             (C4028 * C6217 - C4023 * C6223 + C4030 * C6218 - C92102 * C6224) *
                 C92188) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C265 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92188) *
                C4025 +
            ((C6838 - C6839 + C6840 - C6841) * C265 +
             (C7176 - C7177 + C7178 - C7179) * C92188) *
                C4026 +
            ((C6846 - C6847 + C6848 - C6849) * C265 +
             (C7180 - C7181 + C7182 - C7183) * C92188) *
                C4027) *
               C2664 +
           (((C4023 * C1387 - C4028 * C1377 + C92102 * C1385 - C4030 * C1376) *
                 C265 +
             (C4023 * C1780 - C4028 * C1772 + C92102 * C1781 - C4030 * C1773) *
                 C92188) *
                C4025 +
            ((C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                 C265 +
             (C4023 * C3806 - C4028 * C3802 + C92102 * C3807 - C4030 * C3803) *
                 C92188) *
                C4026 +
            ((C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                 C265 +
             (C4023 * C6224 - C4028 * C6218 + C92102 * C8134 - C4030 * C8133) *
                 C92188) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C265 +
            (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
             C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
                C92188) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C92188) *
               C92177 * C2664 +
           ((C89 * C1387 - C100 * C1377 + C90 * C1385 - C102 * C1376 +
             C91 * C1383 - C104 * C1375 + C92 * C2667 - C106 * C2666) *
                C265 +
            (C89 * C1780 - C100 * C1772 + C90 * C1781 - C102 * C1773 +
             C91 * C1782 - C104 * C1774 + C92 * C3126 - C106 * C3125) *
                C92188) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C9581 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C9422 +
            (C11200 - C11201 + C11202 - C11203) * C9582 +
            (C11506 - C11507 + C11508 - C11509) * C9423 + C11228 * C9583 +
            C11520 * C9424) *
               C92177 * C2664 +
           ((C11201 - C11200 + C11203 - C11202) * C9581 +
            (C11507 - C11506 + C11509 - C11508) * C9422 +
            (C11209 - C11208 + C11211 - C11210) * C9582 +
            (C11511 - C11510 + C11513 - C11512) * C9423 +
            (C11216 - C11217 + C11218 - C11219) * C9583 +
            (C11514 - C11515 + C11516 - C11517) * C9424) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C9581 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C9422 +
            (C13098 - C13099 + C13100 - C13101) * C9582 +
            (C13422 - C13423 + C13424 - C13425) * C9423 +
            (C13106 - C13107 + C13108 - C13109) * C9583 +
            (C13426 - C13427 + C13428 - C13429) * C9424) *
               C92177 * C2664 +
           ((C13099 - C13098 + C13101 - C13100) * C9581 +
            (C13423 - C13422 + C13425 - C13424) * C9422 +
            (C13107 - C13106 + C13109 - C13108) * C9582 +
            (C13427 - C13426 + C13429 - C13428) * C9423 +
            (C4023 * C10871 - C4028 * C10867 + C92102 * C12748 -
             C4030 * C12747) *
                C9583 +
            (C4023 * C11502 - C4028 * C11498 + C92102 * C13420 -
             C4030 * C13419) *
                C9424) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C2664 +
           (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
              C4108 * C5702 - C4027 * C5799) *
                 C265 +
             (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
              C4108 * C6217 - C4027 * C6303) *
                 C92188) *
                C4023 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C265 +
             (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92188) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
             (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
                C4023 +
            ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
             (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
                C92102) *
               C2664 +
           (((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C265 +
             (C8236 - C8235 + C8238 - C8237 + C8240 - C8239) * C92188) *
                C4023 +
            ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
              C4027 * C7590 - C4108 * C7488) *
                 C265 +
             (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 - C4107 * C3803 +
              C4027 * C8233 - C4108 * C8133) *
                 C92188) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C2664 +
           (((C182 * C1378 - C92177 * C1457) * C265 +
             (C182 * C1771 - C92177 * C1837) * C92188) *
                C89 +
            ((C2739 - C2740) * C265 + (C3195 - C3196) * C92188) * C90 +
            ((C2743 - C2744) * C265 + (C3197 - C3198) * C92188) * C91 +
            ((C2747 - C2748) * C265 + (C3199 - C3200) * C92188) * C92) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
               C2664 +
           (((C2740 - C2739) * C265 + (C3196 - C3195) * C92188) * C89 +
            ((C2744 - C2743) * C265 + (C3198 - C3197) * C92188) * C90 +
            ((C2748 - C2747) * C265 + (C3200 - C3199) * C92188) * C91 +
            ((C92177 * C2736 - C182 * C2666) * C265 +
             (C92177 * C3193 - C182 * C3125) * C92188) *
                C92) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C9581 +
             (C92177 * C629 - C182 * C567) * C9422 + (C11009 - C11010) * C9582 +
             (C11599 - C11600) * C9423 + C11027 * C9583 + C11608 * C9424) *
                C4023 +
            ((C196 - C197) * C9581 + (C636 - C637) * C9422 + C12880 * C9582 +
             C13529 * C9423 + C11017 * C9583 + C11603 * C9424) *
                C92102) *
               C2664 +
           (((C11010 - C11009) * C9581 + (C11600 - C11599) * C9422 +
             (C11014 - C11013) * C9582 + (C11602 - C11601) * C9423 +
             (C11019 - C11020) * C9583 + (C11604 - C11605) * C9424) *
                C4023 +
            (C12882 * C9581 + C13530 * C9422 + C12884 * C9582 + C13531 * C9423 +
             (C11023 - C11024) * C9583 + (C11606 - C11607) * C9424) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C9581 + (C637 - C636) * C9422 + C12882 * C9582 +
             C13530 * C9423 + C12884 * C9583 + C13531 * C9424) *
                C4023 +
            ((C201 - C200) * C9581 + (C640 - C639) * C9422 +
             (C2743 - C2744) * C9582 + (C3197 - C3198) * C9423 +
             (C9504 - C9505) * C9583 + (C10007 - C10008) * C9424) *
                C92102) *
               C2664 +
           ((C12880 * C9581 + C13529 * C9422 + C11017 * C9582 + C11603 * C9423 +
             (C11024 - C11023) * C9583 + (C11607 - C11606) * C9424) *
                C4023 +
            ((C2744 - C2743) * C9581 + (C3198 - C3197) * C9422 +
             (C9505 - C9504) * C9582 + (C10008 - C10007) * C9423 +
             (C92177 * C12877 - C182 * C12747) * C9583 +
             (C92177 * C13527 - C182 * C13419) * C9424) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C2664 -
           ((C8355 + C8356 + C8348) * C92102 +
            ((C265 * C5885 - C701 * C5702 - C265 * C6217 + C92188 * C6384) *
                 C4027 +
             (C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                 C4026 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C4025) *
                C4023) *
               C2665) *
              C92136 * C1971 +
          (((C8348 + C8356 + C8355) * C4023 +
            (C3287 * C4025 +
             (C265 * C3515 - C701 * C3359 - C265 * C3803 + C92188 * C3947) *
                 C4026 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C4027) *
                C92102) *
               C2665 -
           ((C4740 + C4731 + C4732) * C92102 +
            (C4739 + C4722 + C4721) * C4023) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C2664 -
           (C3289 * C92 + C3290 * C91 + C3291 * C90 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92177 * C89) *
               C2665) *
              C92136 * C1971 +
          ((C3291 * C89 + C3290 * C90 + C3289 * C91 +
            (C265 * C2816 - C701 * C2666 - C265 * C3125 + C92188 * C3266) *
                C92177 * C92) *
               C2665 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C92177 * C4023 +
            (C10122 + C10123 + C10124) * C92177 * C92102) *
               C2664 -
           ((C13649 + C13650 + C13651) * C92177 * C92102 +
            (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 +
             C9424 * C11683 + C9582 * C1527 - C10083 * C1379 - C9582 * C1775 +
             C9423 * C1899 + C9581 * C1523 - C10082 * C1378 - C9581 * C1771 +
             C9422 * C1898) *
                C92177 * C4023) *
               C2665) *
              C92136 * C1971 +
          (((C13651 + C13650 + C13649) * C92177 * C4023 +
            (C9581 * C1525 - C10082 * C1376 - C9581 * C1773 + C9422 * C1896 +
             C9582 * C1529 - C10083 * C1381 - C9582 * C1777 + C9423 * C1901 +
             C9583 * C12983 - C10084 * C12747 - C9583 * C13419 +
             C9424 * C13629) *
                C92177 * C92102) *
               C2665 -
           ((C10125 + C10126 + C10127) * C92177 * C92102 +
            (C10124 + C10123 + C10122) * C92177 * C4023) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C790 -
          (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
           C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
           C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
           C89 * C821) *
              C92188 * C92177 * C92150 * C791 +
          (C100 * C810 - C101 * C798 - C100 * C811 + C89 * C822 + C102 * C812 -
           C103 * C799 - C102 * C813 + C90 * C823 + C104 * C814 - C105 * C800 -
           C104 * C815 + C91 * C824 + C106 * C816 - C107 * C801 - C106 * C817 +
           C92 * C825) *
              C92188 * C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C92136 * C97 -
          (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
           C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
           C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
           C89 * C127) *
              C92188 * C92177 * C92150 * C92136 * C98 +
          (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 + C102 * C120 -
           C103 * C111 - C102 * C121 + C90 * C129 + C104 * C122 - C105 * C112 -
           C104 * C123 + C91 * C130 + C106 * C124 - C107 * C113 - C106 * C125 +
           C92 * C131) *
              C92188 * C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4028 * C808 - C4029 * C797 - C4028 * C809 + C4023 * C821 +
            C4030 * C806 - C4031 * C796 - C4030 * C807 + C92102 * C820) *
               C92188 * C4026 +
           (C4028 * C810 - C4029 * C798 - C4028 * C811 + C4023 * C822 +
            C4030 * C812 - C4031 * C799 - C4030 * C813 + C92102 * C823) *
               C92188 * C4027) *
              C92150 * C92136 * C97 -
          ((C4030 * C814 - C4031 * C800 - C4030 * C815 + C92102 * C824 +
            C4028 * C812 - C4029 * C799 - C4028 * C813 + C4023 * C823) *
               C92188 * C4027 +
           (C4030 * C804 - C4031 * C795 - C4030 * C805 + C92102 * C819 +
            C4028 * C806 - C4029 * C796 - C4028 * C807 + C4023 * C820) *
               C92188 * C4026 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C92188 * C4025) *
              C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C92188 * C4025 +
           (C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
            C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
               C92188 * C4026 +
           (C4028 * C814 - C4029 * C800 - C4028 * C815 + C4023 * C824 +
            C4030 * C816 - C4031 * C801 - C4030 * C817 + C92102 * C825) *
               C92188 * C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C92150 * C790 -
          ((C4871 + C4872) * C92188 * C4027 + (C4870 + C4869) * C92188 * C4026 +
           (C4868 + C4867) * C92188 * C4025) *
              C92150 * C791 +
          (C4874 * C4025 + (C4872 + C4871) * C92188 * C4026 +
           (C4028 * C4822 - C4029 * C4816 - C4028 * C4823 + C4023 * C4828 +
            C4030 * C4824 - C4031 * C4817 - C4030 * C4825 + C92102 * C4829) *
               C92188 * C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C9422 +
           (C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402 +
            C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401) *
               C9423 +
           (C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C9424) *
              C92177 * C92150 * C92136 * C97 -
          ((C4030 * C1395 - C4031 * C1381 - C4030 * C1396 + C92102 * C1405 +
            C4028 * C1393 - C4029 * C1380 - C4028 * C1394 + C4023 * C1404) *
               C9424 +
           (C4030 * C1385 - C4031 * C1376 - C4030 * C1386 + C92102 * C1400 +
            C4028 * C1387 - C4029 * C1377 - C4028 * C1388 + C4023 * C1401) *
               C9423 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C9422) *
              C92177 * C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C9422 +
           (C4028 * C1385 - C4029 * C1376 - C4028 * C1386 + C4023 * C1400 +
            C4030 * C1383 - C4031 * C1375 - C4030 * C1384 + C92102 * C1399) *
               C9423 +
           (C4028 * C1395 - C4029 * C1381 - C4028 * C1396 + C4023 * C1405 +
            C4030 * C1397 - C4031 * C1382 - C4030 * C1398 + C92102 * C1406) *
               C9424) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C9422 +
           (C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402 +
            C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401) *
               C9423 +
           (C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C9424) *
              C92177 * C92150 * C790 -
          ((C4030 * C5713 - C4031 * C5704 - C4030 * C5714 + C92102 * C5722 +
            C4028 * C5711 - C4029 * C5703 - C4028 * C5712 + C4023 * C5721) *
               C9424 +
           (C8489 + C8490) * C9423 + (C4868 + C4867) * C9422) *
              C92177 * C92150 * C791 +
          (C4873 * C9422 + (C8488 + C8487) * C9423 +
           (C4028 * C5715 - C4029 * C5705 - C4028 * C5716 + C4023 * C5723 +
            C4030 * C5717 - C4031 * C5706 - C4030 * C5718 + C92102 * C5724) *
               C9424) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C790 +
          ((C182 * C797 - C92177 * C876) * C100 +
           (C182 * C809 - C92177 * C884) * C89 +
           (C182 * C796 - C92177 * C877) * C102 +
           (C182 * C807 - C92177 * C885) * C90 +
           (C182 * C795 - C92177 * C878) * C104 +
           (C182 * C805 - C92177 * C886) * C91 +
           (C182 * C794 - C92177 * C879) * C106 +
           (C182 * C803 - C92177 * C887) * C92) *
              C92188 * C92150 * C791 +
          ((C92177 * C880 - C182 * C798) * C100 +
           (C92177 * C888 - C182 * C811) * C89 +
           (C92177 * C881 - C182 * C799) * C102 +
           (C92177 * C889 - C182 * C813) * C90 +
           (C92177 * C882 - C182 * C800) * C104 +
           (C92177 * C890 - C182 * C815) * C91 +
           (C92177 * C883 - C182 * C801) * C106 +
           (C92177 * C891 - C182 * C817) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C92136 * C97 +
          ((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
           (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
           (C208 - C209) * C106 + (C210 - C211) * C92) *
              C92188 * C92150 * C92136 * C98 +
          (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
           (C209 - C208) * C104 + (C211 - C210) * C91 +
           (C92177 * C188 - C182 * C113) * C106 +
           (C92177 * C194 - C182 * C125) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
           (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
           (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
           (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C4028 +
           (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C4023 +
           (C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
            C4027 * C883 - C4108 * C801) *
               C4030 +
           (C4025 * C192 - C4106 * C121 + C4026 * C887 - C4107 * C803 +
            C4027 * C891 - C4108 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C4028 +
           (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
            C4108 * C4821 - C4027 * C4952) *
               C4023 +
           (C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
            C4108 * C4814 - C4027 * C4949) *
               C4030 +
           (C4106 * C807 - C4025 * C885 + C4107 * C813 - C4026 * C889 +
            C4108 * C4819 - C4027 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C4028 +
           (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
            C4027 * C4954 - C4108 * C4823) *
               C4023 +
           (C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
            C4027 * C4951 - C4108 * C4817) *
               C4030 +
           (C4025 * C889 - C4106 * C813 + C4026 * C4953 - C4107 * C4819 +
            C4027 * C4955 - C4108 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C4028 +
            (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
            (C198 - C199) * C92102) *
               C9422 +
           ((C92177 * C1457 - C182 * C1378) * C4028 +
            (C92177 * C1465 - C182 * C1390) * C4023 + (C2740 - C2739) * C4030 +
            (C2742 - C2741) * C92102) *
               C9423 +
           ((C92177 * C1461 - C182 * C1379) * C4028 +
            (C92177 * C1469 - C182 * C1392) * C4023 + (C9500 - C9501) * C4030 +
            (C9502 - C9503) * C92102) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C4028 + (C199 - C198) * C4023 +
            (C201 - C200) * C4030 + (C203 - C202) * C92102) *
               C9422 +
           ((C2739 - C2740) * C4028 + (C2741 - C2742) * C4023 +
            (C2743 - C2744) * C4030 + (C2745 - C2746) * C92102) *
               C9423 +
           ((C9501 - C9500) * C4028 + (C9503 - C9502) * C4023 +
            (C9504 - C9505) * C4030 + (C9506 - C9507) * C92102) *
               C9424) *
              C92150 * C92136 * C98 +
          ((C212 * C4028 + C213 * C4023 + C214 * C4030 + C215 * C92102) *
               C9422 +
           ((C2744 - C2743) * C4028 + (C2746 - C2745) * C4023 +
            (C2748 - C2747) * C4030 + (C2750 - C2749) * C92102) *
               C9423 +
           ((C9505 - C9504) * C4028 + (C9507 - C9506) * C4023 +
            (C92177 * C1464 - C182 * C1382) * C4030 +
            (C92177 * C1472 - C182 * C1398) * C92102) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C4028 +
            (C92177 * C189 - C182 * C115) * C4023 + (C196 - C197) * C4030 +
            (C198 - C199) * C92102) *
               C9422 +
           ((C92177 * C1457 - C182 * C1378) * C4028 +
            (C92177 * C1465 - C182 * C1390) * C4023 + (C2740 - C2739) * C4030 +
            (C2742 - C2741) * C92102) *
               C9423 +
           ((C92177 * C1461 - C182 * C1379) * C4028 +
            (C92177 * C1469 - C182 * C1392) * C4023 + (C9500 - C9501) * C4030 +
            (C9502 - C9503) * C92102) *
               C9424) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C4028 +
            (C182 * C809 - C92177 * C884) * C4023 + (C2046 - C2047) * C4030 +
            (C2048 - C2049) * C92102) *
               C9422 +
           ((C182 * C3357 - C92177 * C3439) * C4028 +
            (C182 * C3362 - C92177 * C3443) * C4023 +
            (C182 * C3358 - C92177 * C3440) * C4030 +
            (C182 * C3364 - C92177 * C3444) * C92102) *
               C9423 +
           ((C182 * C5703 - C92177 * C5801) * C4028 +
            (C182 * C5712 - C92177 * C5807) * C4023 +
            (C182 * C5704 - C92177 * C5803) * C4030 +
            (C182 * C5714 - C92177 * C5809) * C92102) *
               C9424) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C4028 +
            (C92177 * C888 - C182 * C811) * C4023 +
            (C92177 * C881 - C182 * C799) * C4030 +
            (C92177 * C889 - C182 * C813) * C92102) *
               C9422 +
           ((C92177 * C5799 - C182 * C5702) * C4028 +
            (C92177 * C5805 - C182 * C5710) * C4023 +
            (C92177 * C5800 - C182 * C5701) * C4030 +
            (C92177 * C5806 - C182 * C5708) * C92102) *
               C9423 +
           ((C92177 * C5802 - C182 * C5705) * C4028 +
            (C92177 * C5808 - C182 * C5716) * C4023 +
            (C92177 * C5804 - C182 * C5706) * C4030 +
            (C92177 * C5810 - C182 * C5718) * C92102) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C790 +
          ((C265 * C797 - C92188 * C942) * C100 +
           (C265 * C809 - C92188 * C950) * C89 +
           (C265 * C796 - C92188 * C943) * C102 +
           (C265 * C807 - C92188 * C951) * C90 +
           (C265 * C795 - C92188 * C944) * C104 +
           (C265 * C805 - C92188 * C952) * C91 +
           (C265 * C794 - C92188 * C945) * C106 +
           (C265 * C803 - C92188 * C953) * C92) *
              C92177 * C92150 * C791 +
          ((C92188 * C946 - C265 * C798) * C100 +
           (C92188 * C954 - C265 * C811) * C89 +
           (C92188 * C947 - C265 * C799) * C102 +
           (C92188 * C955 - C265 * C813) * C90 +
           (C92188 * C948 - C265 * C800) * C104 +
           (C92188 * C956 - C265 * C815) * C91 +
           (C92188 * C949 - C265 * C801) * C106 +
           (C92188 * C957 - C265 * C817) * C92) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C92136 * C97 +
          ((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
           (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
           (C291 - C292) * C106 + (C293 - C294) * C92) *
              C92177 * C92150 * C92136 * C98 +
          (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
           (C292 - C291) * C104 + (C294 - C293) * C91 +
           (C92188 * C271 - C265 * C113) * C106 +
           (C92188 * C277 - C265 * C125) * C92) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C92188 * C942 - C265 * C797) * C4028 +
            (C92188 * C950 - C265 * C809) * C4023 + (C2127 - C2126) * C4030 +
            (C2129 - C2128) * C92102) *
               C4026 +
           ((C92188 * C946 - C265 * C798) * C4028 +
            (C92188 * C954 - C265 * C811) * C4023 + (C4208 - C4209) * C4030 +
            (C4210 - C4211) * C92102) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4028 + (C282 - C281) * C4023 +
            (C284 - C283) * C4030 + (C286 - C285) * C92102) *
               C4025 +
           ((C2126 - C2127) * C4028 + (C2128 - C2129) * C4023 +
            (C2130 - C2131) * C4030 + (C2132 - C2133) * C92102) *
               C4026 +
           ((C4209 - C4208) * C4028 + (C4211 - C4210) * C4023 +
            (C4212 - C4213) * C4030 + (C4214 - C4215) * C92102) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C295 * C4028 + C296 * C4023 + C297 * C4030 + C298 * C92102) *
               C4025 +
           ((C2131 - C2130) * C4028 + (C2133 - C2132) * C4023 +
            (C2135 - C2134) * C4030 + (C2137 - C2136) * C92102) *
               C4026 +
           ((C4213 - C4212) * C4028 + (C4215 - C4214) * C4023 +
            (C92188 * C949 - C265 * C801) * C4030 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C92150 * C790 +
          (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 +
            (C2126 - C2127) * C4030 + (C2128 - C2129) * C92102) *
               C4025 +
           ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 +
            (C4209 - C4208) * C4030 + (C4211 - C4210) * C92102) *
               C4026 +
           ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
            (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
               C4027) *
              C92150 * C791 +
          (C5065 * C4025 +
           ((C5050 - C5049) * C4028 + (C5052 - C5051) * C4023 +
            (C5054 - C5053) * C4030 + (C5056 - C5055) * C92102) *
               C4026 +
           ((C92188 * C5032 - C265 * C4816) * C4028 +
            (C92188 * C5036 - C265 * C4823) * C4023 +
            (C92188 * C5033 - C265 * C4817) * C4030 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C4028 +
           (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
            C9424 * C1535 - C9583 * C1392) *
               C4023 +
           (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
           (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
              C92177 * C92150 * C92136 * C97 +
          ((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C4028 +
           (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C4023 +
           (C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C4030 +
           (C9603 - C9604 + C9605 - C9606 + C9607 - C9608) * C92102) *
              C92177 * C92150 * C92136 * C98 +
          ((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C4028 +
           (C9604 - C9603 + C9606 - C9605 + C9608 - C9607) * C4023 +
           (C9422 * C269 - C9581 * C111 + C9423 * C1526 - C9582 * C1375 +
            C9424 * C1530 - C9583 * C1382) *
               C4030 +
           (C9422 * C275 - C9581 * C121 + C9423 * C1534 - C9582 * C1384 +
            C9424 * C1538 - C9583 * C1398) *
               C92102) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C4028 +
           (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
            C9424 * C1535 - C9583 * C1392) *
               C4023 +
           (C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C4030 +
           (C9591 - C9592 + C9593 - C9594 + C9595 - C9596) * C92102) *
              C92177 * C92150 * C790 +
          ((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
            C9583 * C5703 - C9424 * C5887) *
               C4028 +
           (C9581 * C809 - C9422 * C950 + C9582 * C3362 - C9423 * C3517 +
            C9583 * C5712 - C9424 * C5893) *
               C4023 +
           (C9581 * C796 - C9422 * C943 + C9582 * C3358 - C9423 * C3514 +
            C9583 * C5704 - C9424 * C5888) *
               C4030 +
           (C9581 * C807 - C9422 * C951 + C9582 * C3364 - C9423 * C3518 +
            C9583 * C5714 - C9424 * C5894) *
               C92102) *
              C92177 * C92150 * C791 +
          ((C9422 * C946 - C9581 * C798 + C9423 * C5885 - C9582 * C5702 +
            C9424 * C5889 - C9583 * C5705) *
               C4028 +
           (C9422 * C954 - C9581 * C811 + C9423 * C5891 - C9582 * C5710 +
            C9424 * C5895 - C9583 * C5716) *
               C4023 +
           (C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
            C9424 * C5890 - C9583 * C5706) *
               C4030 +
           (C9422 * C955 - C9581 * C813 + C9423 * C5892 - C9582 * C5708 +
            C9424 * C5896 - C9583 * C5718) *
               C92102) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C182 +
           (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
            C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
               C92177) *
              C92188 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C182 +
           (C89 * C1020 - C100 * C1012 + C90 * C1021 - C102 * C1013 +
            C91 * C1022 - C104 * C1014 + C92 * C1023 - C106 * C1015) *
               C92177) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C182 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357 + C106 * C352 - C92 * C358) *
               C92177) *
              C92188 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C182 +
           (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 + C91 * C358 -
            C104 * C352 + C92 * C359 - C106 * C353) *
               C92177) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
               C4107 +
           (C4023 * C1016 - C4028 * C1008 + C92102 * C1017 - C4030 * C1009) *
               C4026 +
           (C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
               C4108 +
           (C4023 * C1020 - C4028 * C1012 + C92102 * C1021 - C4030 * C1013) *
               C4027) *
              C92188 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C4106 +
           (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
               C4025 +
           (C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
               C4107 +
           (C4028 * C1009 - C4023 * C1017 + C4030 * C1010 - C92102 * C1018) *
               C4026 +
           (C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
               C4108 +
           (C4028 * C1013 - C4023 * C1021 + C4030 * C1014 - C92102 * C1022) *
               C4027) *
              C92188 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C4106 +
           (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
               C4025 +
           (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
               C4107 +
           (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
               C4026 +
           (C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
               C4108 +
           (C4023 * C1022 - C4028 * C1014 + C92102 * C1023 - C4030 * C1015) *
               C4027) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C4106 +
           (C5153 - C5152 + C5155 - C5154) * C4025 +
           (C5157 - C5156 + C5159 - C5158) * C4107 +
           (C5161 - C5160 + C5163 - C5162) * C4026 +
           (C5164 - C5165 + C5166 - C5167) * C4108 +
           (C5168 - C5169 + C5170 - C5171) * C4027) *
              C92188 * C92150 * C791 +
          (C5176 * C4106 + C5177 * C4025 +
           (C5165 - C5164 + C5167 - C5166) * C4107 +
           (C5169 - C5168 + C5171 - C5170) * C4026 +
           (C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
               C4108 +
           (C4023 * C5145 - C4028 * C5141 + C92102 * C5146 - C4030 * C5142) *
               C4027) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C182 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92177) *
               C9422 +
           ((C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
                C182 +
            (C4023 * C1597 - C4028 * C1589 + C92102 * C1598 - C4030 * C1590) *
                C92177) *
               C9423 +
           ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C182 +
            (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
                C92177) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C182 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C92177) *
               C9422 +
           ((C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
                C182 +
            (C4028 * C1590 - C4023 * C1598 + C4030 * C1591 - C92102 * C1599) *
                C92177) *
               C9423 +
           ((C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
                C182 +
            (C4028 * C1594 - C4023 * C1602 + C4030 * C1595 - C92102 * C1603) *
                C92177) *
               C9424) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C182 +
            (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
                C92177) *
               C9422 +
           ((C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
                C182 +
            (C4023 * C1599 - C4028 * C1591 + C92102 * C1600 - C4030 * C1592) *
                C92177) *
               C9423 +
           ((C4023 * C1395 - C4028 * C1381 + C92102 * C1397 - C4030 * C1382) *
                C182 +
            (C4023 * C1603 - C4028 * C1595 + C92102 * C1604 - C4030 * C1596) *
                C92177) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C182 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C92177) *
               C9422 +
           ((C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
                C182 +
            (C4023 * C1597 - C4028 * C1589 + C92102 * C1598 - C4030 * C1590) *
                C92177) *
               C9423 +
           ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C182 +
            (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
                C92177) *
               C9424) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C182 +
            (C5153 - C5152 + C5155 - C5154) * C92177) *
               C9422 +
           ((C8805 - C8806 + C8807 - C8808) * C182 +
            (C8809 - C8810 + C8811 - C8812) * C92177) *
               C9423 +
           ((C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
                C182 +
            (C4028 * C5973 - C4023 * C5979 + C4030 * C5974 - C92102 * C5980) *
                C92177) *
               C9424) *
              C92150 * C791 +
          ((C5176 * C182 + C5177 * C92177) * C9422 +
           ((C8814 - C8813 + C8816 - C8815) * C182 +
            (C8818 - C8817 + C8820 - C8819) * C92177) *
               C9423 +
           ((C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                C182 +
            (C4023 * C5981 - C4028 * C5975 + C92102 * C5982 - C4030 * C5976) *
                C92177) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C790 -
          ((C182 * C879 - C410 * C794 - C182 * C1011 + C92177 * C1074) * C92 +
           (C182 * C878 - C410 * C795 - C182 * C1010 + C92177 * C1075) * C91 +
           (C182 * C877 - C410 * C796 - C182 * C1009 + C92177 * C1076) * C90 +
           (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
              C92188 * C92150 * C791 +
          ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) * C89 +
           (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) * C90 +
           (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) * C91 +
           (C182 * C883 - C410 * C801 - C182 * C1015 + C92177 * C1081) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C92136 * C97 -
          (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
              C92150 * C92136 * C98 +
          (C443 * C89 + C444 * C90 + C445 * C91 +
           (C182 * C188 - C410 * C113 - C182 * C353 + C92177 * C416) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C4406 + C4407 + C4408) * C92102 + (C4405 + C4404 + C4403) * C4023) *
              C92188 * C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C4023 +
           (C4106 * C186 - C4363 * C111 - C4106 * C351 + C4025 * C414 +
            C4107 * C879 - C4364 * C794 - C4107 * C1011 + C4026 * C1074 +
            C4108 * C883 - C4365 * C801 - C4108 * C1015 + C4027 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C790 -
          ((C4108 * C4949 - C4365 * C4814 - C4108 * C5140 + C4027 * C5251 +
            C4107 * C881 - C4364 * C799 - C4107 * C1013 + C4026 * C1079 +
            C4106 * C877 - C4363 * C796 - C4106 * C1009 + C4025 * C1076) *
               C92102 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C4023) *
              C92188 * C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C4023 +
           (C4106 * C881 - C4363 * C799 - C4106 * C1013 + C4025 * C1079 +
            C4107 * C4949 - C4364 * C4814 - C4107 * C5140 + C4026 * C5251 +
            C4108 * C4951 - C4365 * C4817 - C4108 * C5142 + C4027 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
            C442 * C92102) *
               C9422 +
           ((C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C4023 +
            C2986 * C92102) *
               C9423 +
           ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) *
                C4023 +
            C9769 * C92102) *
               C9424) *
              C92150 * C92136 * C97 -
          ((C9770 * C92102 + C9769 * C4023) * C9424 +
           (C2985 * C92102 + C2986 * C4023) * C9423 +
           (C443 * C92102 + C442 * C4023) * C9422) *
              C92150 * C92136 * C98 +
          ((C443 * C4023 + C444 * C92102) * C9422 +
           (C2985 * C4023 + C2984 * C92102) * C9423 +
           (C9770 * C4023 +
            (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                C92102) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C4023 +
            C442 * C92102) *
               C9422 +
           ((C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C4023 +
            C2986 * C92102) *
               C9423 +
           ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) *
                C4023 +
            C9769 * C92102) *
               C9424) *
              C92150 * C790 -
          (((C182 * C5803 - C410 * C5704 - C182 * C5974 + C92177 * C6061) *
                C92102 +
            (C182 * C5801 - C410 * C5703 - C182 * C5973 + C92177 * C6059) *
                C4023) *
               C9424 +
           ((C182 * C3440 - C410 * C3358 - C182 * C3588 + C92177 * C3662) *
                C92102 +
            (C182 * C3439 - C410 * C3357 - C182 * C3587 + C92177 * C3661) *
                C4023) *
               C9423 +
           (C2293 * C92102 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C4023) *
               C9422) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C4023 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92102) *
               C9422 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C4023 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92102) *
               C9423 +
           ((C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
                C4023 +
            (C182 * C5804 - C410 * C5706 - C182 * C5976 + C92177 * C6062) *
                C92102) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C790 +
          (((C265 * C797 - C92188 * C942) * C182 +
            (C265 * C1008 - C92188 * C1132) * C92177) *
               C89 +
           ((C265 * C796 - C92188 * C943) * C182 +
            (C265 * C1009 - C92188 * C1133) * C92177) *
               C90 +
           ((C265 * C795 - C92188 * C944) * C182 +
            (C265 * C1010 - C92188 * C1134) * C92177) *
               C91 +
           ((C265 * C794 - C92188 * C945) * C182 +
            (C265 * C1011 - C92188 * C1135) * C92177) *
               C92) *
              C92150 * C791 +
          (((C92188 * C946 - C265 * C798) * C182 +
            (C92188 * C1136 - C265 * C1012) * C92177) *
               C89 +
           ((C92188 * C947 - C265 * C799) * C182 +
            (C92188 * C1137 - C265 * C1013) * C92177) *
               C90 +
           ((C92188 * C948 - C265 * C800) * C182 +
            (C92188 * C1138 - C265 * C1014) * C92177) *
               C91 +
           ((C92188 * C949 - C265 * C801) * C182 +
            (C92188 * C1139 - C265 * C1015) * C92177) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
           ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
           ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
           ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
              C92150 * C92136 * C98 +
          (C516 * C89 + C517 * C90 +
           ((C292 - C291) * C182 + (C511 - C510) * C92177) * C91 +
           ((C92188 * C271 - C265 * C113) * C182 +
            (C92188 * C500 - C265 * C353) * C92177) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 +
            (C92188 * C942 - C265 * C797) * C4107 +
            (C92188 * C1132 - C265 * C1008) * C4026 +
            (C92188 * C946 - C265 * C798) * C4108 +
            (C92188 * C1136 - C265 * C1012) * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 +
            (C4208 - C4209) * C4108 + (C4483 - C4484) * C4027) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4106 + (C503 - C502) * C4025 +
            (C2126 - C2127) * C4107 + (C2361 - C2362) * C4026 +
            (C4209 - C4208) * C4108 + (C4484 - C4483) * C4027) *
               C4023 +
           ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
            (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
            (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C4106 + C512 * C4025 + (C2131 - C2130) * C4107 +
            (C2364 - C2363) * C4026 + (C4213 - C4212) * C4108 +
            (C4486 - C4485) * C4027) *
               C4023 +
           (C297 * C4106 + C513 * C4025 + (C2135 - C2134) * C4107 +
            (C2366 - C2365) * C4026 + (C92188 * C949 - C265 * C801) * C4108 +
            (C92188 * C1139 - C265 * C1015) * C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
            (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
            (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
               C4023 +
           ((C2126 - C2127) * C4106 + (C2361 - C2362) * C4025 +
            (C4209 - C4208) * C4107 + (C4484 - C4483) * C4026 +
            (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C4106 + C5343 * C4025 + (C5050 - C5049) * C4107 +
            (C5340 - C5339) * C4026 + (C92188 * C5032 - C265 * C4816) * C4108 +
            (C92188 * C5331 - C265 * C5141) * C4027) *
               C4023 +
           (C5047 * C4106 + C5338 * C4025 + (C5054 - C5053) * C4107 +
            (C5342 - C5341) * C4026 + (C92188 * C5033 - C265 * C4817) * C4108 +
            (C92188 * C5332 - C265 * C5142) * C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C182 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C92177) *
               C4023 +
           ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
            (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C182 +
            (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C92177) *
               C4023 +
           ((C9597 - C9598 + C9599 - C9600 + C9601 - C9602) * C182 +
            (C9851 - C9852 + C9853 - C9854 + C9855 - C9856) * C92177) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C182 +
            (C9852 - C9851 + C9854 - C9853 + C9856 - C9855) * C92177) *
               C4023 +
           ((C9422 * C269 - C9581 * C111 + C9423 * C1526 - C9582 * C1375 +
             C9424 * C1530 - C9583 * C1382) *
                C182 +
            (C9422 * C498 - C9581 * C351 + C9423 * C1716 - C9582 * C1592 +
             C9424 * C1720 - C9583 * C1596) *
                C92177) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C182 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C92177) *
               C4023 +
           ((C9585 - C9586 + C9587 - C9588 + C9589 - C9590) * C182 +
            (C9845 - C9846 + C9847 - C9848 + C9849 - C9850) * C92177) *
               C92102) *
              C92150 * C790 +
          (((C9581 * C797 - C9422 * C942 + C9582 * C3357 - C9423 * C3513 +
             C9583 * C5703 - C9424 * C5887) *
                C182 +
            (C9581 * C1008 - C9422 * C1132 + C9582 * C3587 - C9423 * C3731 +
             C9583 * C5973 - C9424 * C6139) *
                C92177) *
               C4023 +
           ((C9581 * C796 - C9422 * C943 + C9582 * C3358 - C9423 * C3514 +
             C9583 * C5704 - C9424 * C5888) *
                C182 +
            (C9581 * C1009 - C9422 * C1133 + C9582 * C3588 - C9423 * C3732 +
             C9583 * C5974 - C9424 * C6141) *
                C92177) *
               C92102) *
              C92150 * C791 +
          (((C9422 * C946 - C9581 * C798 + C9423 * C5885 - C9582 * C5702 +
             C9424 * C5889 - C9583 * C5705) *
                C182 +
            (C9422 * C1136 - C9581 * C1012 + C9423 * C6137 - C9582 * C5971 +
             C9424 * C6140 - C9583 * C5975) *
                C92177) *
               C4023 +
           ((C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
             C9424 * C5890 - C9583 * C5706) *
                C182 +
            (C9422 * C1137 - C9581 * C1013 + C9423 * C6138 - C9582 * C5972 +
             C9424 * C6142 - C9583 * C5976) *
                C92177) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C265 +
           (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
            C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
               C92188) *
              C92177 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C265 +
           (C89 * C1202 - C100 * C1194 + C90 * C1203 - C102 * C1195 +
            C91 * C1204 - C104 * C1196 + C92 * C1205 - C106 * C1197) *
               C92188) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C265 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576 + C106 * C571 - C92 * C577) *
               C92188) *
              C92177 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C265 +
           (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 + C91 * C577 -
            C104 * C571 + C92 * C578 - C106 * C572) *
               C92188) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
                C265 +
            (C4023 * C1198 - C4028 * C1190 + C92102 * C1199 - C4030 * C1191) *
                C92188) *
               C4026 +
           ((C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
                C265 +
            (C4023 * C1202 - C4028 * C1194 + C92102 * C1203 - C4030 * C1195) *
                C92188) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C265 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92188) *
               C4025 +
           ((C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
                C265 +
            (C4028 * C1191 - C4023 * C1199 + C4030 * C1192 - C92102 * C1200) *
                C92188) *
               C4026 +
           ((C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
                C265 +
            (C4028 * C1195 - C4023 * C1203 + C4030 * C1196 - C92102 * C1204) *
                C92188) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C265 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92188) *
               C4025 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C265 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92188) *
               C4026 +
           ((C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
                C265 +
            (C4023 * C1204 - C4028 * C1196 + C92102 * C1205 - C4030 * C1197) *
                C92188) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C265 +
            (C5427 - C5426 + C5429 - C5428) * C92188) *
               C4025 +
           ((C5157 - C5156 + C5159 - C5158) * C265 +
            (C5432 - C5431 + C5434 - C5433) * C92188) *
               C4026 +
           ((C5164 - C5165 + C5166 - C5167) * C265 +
            (C5435 - C5436 + C5437 - C5438) * C92188) *
               C4027) *
              C92150 * C791 +
          (C5443 * C4025 +
           ((C5165 - C5164 + C5167 - C5166) * C265 +
            (C5436 - C5435 + C5438 - C5437) * C92188) *
               C4026 +
           ((C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
                C265 +
            (C4023 * C5423 - C4028 * C5419 + C92102 * C5424 - C4030 * C5420) *
                C92188) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C9581 +
           (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
               C9422 +
           (C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
               C9582 +
           (C4023 * C1779 - C4028 * C1771 + C92102 * C1780 - C4030 * C1772) *
               C9423 +
           (C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C9583 +
           (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
               C9424) *
              C92177 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C9581 +
           (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
               C9422 +
           (C4028 * C1377 - C4023 * C1387 + C4030 * C1376 - C92102 * C1385) *
               C9582 +
           (C4028 * C1772 - C4023 * C1780 + C4030 * C1773 - C92102 * C1781) *
               C9423 +
           (C4028 * C1380 - C4023 * C1393 + C4030 * C1381 - C92102 * C1395) *
               C9583 +
           (C4028 * C1776 - C4023 * C1784 + C4030 * C1777 - C92102 * C1785) *
               C9424) *
              C92177 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C9581 +
           (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
               C9422 +
           (C4023 * C1385 - C4028 * C1376 + C92102 * C1383 - C4030 * C1375) *
               C9582 +
           (C4023 * C1781 - C4028 * C1773 + C92102 * C1782 - C4030 * C1774) *
               C9423 +
           (C4023 * C1395 - C4028 * C1381 + C92102 * C1397 - C4030 * C1382) *
               C9583 +
           (C4023 * C1785 - C4028 * C1777 + C92102 * C1786 - C4030 * C1778) *
               C9424) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C9581 +
           (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
               C9422 +
           (C4023 * C1389 - C4028 * C1378 + C92102 * C1387 - C4030 * C1377) *
               C9582 +
           (C4023 * C1779 - C4028 * C1771 + C92102 * C1780 - C4030 * C1772) *
               C9423 +
           (C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C9583 +
           (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
               C9424) *
              C92177 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C9581 +
           (C5427 - C5426 + C5429 - C5428) * C9422 +
           (C8805 - C8806 + C8807 - C8808) * C9582 +
           (C9127 - C9128 + C9129 - C9130) * C9423 +
           (C4028 * C5703 - C4023 * C5711 + C4030 * C5704 - C92102 * C5713) *
               C9583 +
           (C4028 * C6219 - C4023 * C6225 + C4030 * C6220 - C92102 * C6226) *
               C9424) *
              C92177 * C92150 * C791 +
          (C5176 * C9581 + C5441 * C9422 +
           (C8814 - C8813 + C8816 - C8815) * C9582 +
           (C9132 - C9131 + C9134 - C9133) * C9423 +
           (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
               C9583 +
           (C4023 * C6227 - C4028 * C6221 + C92102 * C6228 - C4030 * C6222) *
               C9424) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C265 +
            (C182 * C1190 - C92177 * C1256) * C92188) *
               C89 +
           ((C182 * C796 - C92177 * C877) * C265 +
            (C182 * C1191 - C92177 * C1257) * C92188) *
               C90 +
           ((C182 * C795 - C92177 * C878) * C265 +
            (C182 * C1192 - C92177 * C1258) * C92188) *
               C91 +
           ((C182 * C794 - C92177 * C879) * C265 +
            (C182 * C1193 - C92177 * C1259) * C92188) *
               C92) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C265 +
            (C92177 * C1260 - C182 * C1194) * C92188) *
               C89 +
           ((C92177 * C881 - C182 * C799) * C265 +
            (C92177 * C1261 - C182 * C1195) * C92188) *
               C90 +
           ((C92177 * C882 - C182 * C800) * C265 +
            (C92177 * C1262 - C182 * C1196) * C92188) *
               C91 +
           ((C92177 * C883 - C182 * C801) * C265 +
            (C92177 * C1263 - C182 * C1197) * C92188) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
           ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
           ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
           ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
              C92150 * C92136 * C98 +
          (C650 * C89 + C651 * C90 +
           ((C209 - C208) * C265 + (C645 - C644) * C92188) * C91 +
           ((C92177 * C188 - C182 * C113) * C265 +
            (C92177 * C634 - C182 * C572) * C92188) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
               C4023 +
           ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
            (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C265 +
            (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C92188) *
               C4023 +
           ((C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
             C4027 * C883 - C4108 * C801) *
                C265 +
            (C4025 * C632 - C4106 * C570 + C4026 * C1259 - C4107 * C1193 +
             C4027 * C1263 - C4108 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C265 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C92188) *
               C4023 +
           ((C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
             C4108 * C4814 - C4027 * C4949) *
                C265 +
            (C4106 * C1191 - C4025 * C1257 + C4107 * C1195 - C4026 * C1261 +
             C4108 * C5418 - C4027 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C265 +
            (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
             C4027 * C5519 - C4108 * C5419) *
                C92188) *
               C4023 +
           ((C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
             C4027 * C4951 - C4108 * C4817) *
                C265 +
            (C4025 * C1261 - C4106 * C1195 + C4026 * C5518 - C4107 * C5418 +
             C4027 * C5520 - C4108 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C9581 +
            (C92177 * C629 - C182 * C567) * C9422 +
            (C92177 * C1457 - C182 * C1378) * C9582 +
            (C92177 * C1837 - C182 * C1771) * C9423 +
            (C92177 * C1461 - C182 * C1379) * C9583 +
            (C92177 * C1841 - C182 * C1775) * C9424) *
               C4023 +
           ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
            (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 +
            (C9500 - C9501) * C9583 + (C10005 - C10006) * C9424) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C9581 + (C637 - C636) * C9422 +
            (C2739 - C2740) * C9582 + (C3195 - C3196) * C9423 +
            (C9501 - C9500) * C9583 + (C10006 - C10005) * C9424) *
               C4023 +
           ((C201 - C200) * C9581 + (C640 - C639) * C9422 +
            (C2743 - C2744) * C9582 + (C3197 - C3198) * C9423 +
            (C9504 - C9505) * C9583 + (C10007 - C10008) * C9424) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C212 * C9581 + C646 * C9422 + (C2744 - C2743) * C9582 +
            (C3198 - C3197) * C9423 + (C9505 - C9504) * C9583 +
            (C10008 - C10007) * C9424) *
               C4023 +
           (C214 * C9581 + C647 * C9422 + (C2748 - C2747) * C9582 +
            (C3200 - C3199) * C9423 + (C92177 * C1464 - C182 * C1382) * C9583 +
            (C92177 * C1844 - C182 * C1778) * C9424) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C9581 +
            (C92177 * C629 - C182 * C567) * C9422 +
            (C92177 * C1457 - C182 * C1378) * C9582 +
            (C92177 * C1837 - C182 * C1771) * C9423 +
            (C92177 * C1461 - C182 * C1379) * C9583 +
            (C92177 * C1841 - C182 * C1775) * C9424) *
               C4023 +
           ((C196 - C197) * C9581 + (C636 - C637) * C9422 +
            (C2740 - C2739) * C9582 + (C3196 - C3195) * C9423 +
            (C9500 - C9501) * C9583 + (C10005 - C10006) * C9424) *
               C92102) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C9581 +
            (C182 * C1190 - C92177 * C1256) * C9422 +
            (C182 * C3357 - C92177 * C3439) * C9582 +
            (C182 * C3801 - C92177 * C3875) * C9423 +
            (C182 * C5703 - C92177 * C5801) * C9583 +
            (C182 * C6219 - C92177 * C6305) * C9424) *
               C4023 +
           ((C2046 - C2047) * C9581 + (C2502 - C2503) * C9422 +
            (C182 * C3358 - C92177 * C3440) * C9582 +
            (C182 * C3802 - C92177 * C3876) * C9423 +
            (C182 * C5704 - C92177 * C5803) * C9583 +
            (C182 * C6220 - C92177 * C6307) * C9424) *
               C92102) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C9581 +
            (C92177 * C1260 - C182 * C1194) * C9422 +
            (C92177 * C5799 - C182 * C5702) * C9582 +
            (C92177 * C6303 - C182 * C6217) * C9423 +
            (C92177 * C5802 - C182 * C5705) * C9583 +
            (C92177 * C6306 - C182 * C6221) * C9424) *
               C4023 +
           ((C92177 * C881 - C182 * C799) * C9581 +
            (C92177 * C1261 - C182 * C1195) * C9422 +
            (C92177 * C5800 - C182 * C5701) * C9582 +
            (C92177 * C6304 - C182 * C6218) * C9423 +
            (C92177 * C5804 - C182 * C5706) * C9583 +
            (C92177 * C6308 - C182 * C6222) * C9424) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C790 -
          ((C265 * C945 - C701 * C794 - C265 * C1193 + C92188 * C1314) *
               C92177 * C92 +
           (C265 * C944 - C701 * C795 - C265 * C1192 + C92188 * C1315) *
               C92177 * C91 +
           (C265 * C943 - C701 * C796 - C265 * C1191 + C92188 * C1316) *
               C92177 * C90 +
           (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
               C92177 * C89) *
              C92150 * C791 +
          ((C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
               C92177 * C89 +
           (C265 * C947 - C701 * C799 - C265 * C1195 + C92188 * C1319) *
               C92177 * C90 +
           (C265 * C948 - C701 * C800 - C265 * C1196 + C92188 * C1320) *
               C92177 * C91 +
           (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
               C92177 * C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C92136 * C97 -
          (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
              C92136 * C98 +
          (C738 * C89 + C739 * C90 + C740 * C91 +
           (C265 * C271 - C701 * C113 - C265 * C572 + C92188 * C707) * C92177 *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C4026 +
            (C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
                C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C92136 * C97 -
          ((C4740 + C4731 + C4732) * C92102 + (C4739 + C4722 + C4721) * C4023) *
              C92150 * C92136 * C98 +
          ((C4732 + C4731 + C4740) * C4023 +
           (C735 * C4025 + C2593 * C4026 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C790 -
          ((C5626 * C4027 + C4737 * C4026 + C2595 * C4025) * C92102 +
           (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
              C92150 * C791 +
          ((C5625 * C4025 + C5627 * C4026 +
            (C265 * C5032 - C701 * C4816 - C265 * C5419 + C92188 * C5597) *
                C4027) *
               C4023 +
           (C4737 * C4025 + C5626 * C4026 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C92177 * C4023 +
           (C10122 + C10123 + C10124) * C92177 * C92102) *
              C92150 * C92136 * C97 -
          ((C10125 + C10126 + C10127) * C92177 * C92102 +
           (C10124 + C10123 + C10122) * C92177 * C4023) *
              C92150 * C92136 * C98 +
          ((C10127 + C10126 + C10125) * C92177 * C4023 +
           (C9581 * C269 - C10082 * C111 - C9581 * C570 + C9422 * C705 +
            C9582 * C1526 - C10083 * C1375 - C9582 * C1774 + C9423 * C1895 +
            C9583 * C1530 - C10084 * C1382 - C9583 * C1778 + C9424 * C1902) *
               C92177 * C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C92177 * C4023 +
           (C10122 + C10123 + C10124) * C92177 * C92102) *
              C92150 * C790 -
          ((C9583 * C5888 - C10084 * C5704 - C9583 * C6220 + C9424 * C6387 +
            C9582 * C3514 - C10083 * C3358 - C9582 * C3802 + C9423 * C3946 +
            C9581 * C943 - C10082 * C796 - C9581 * C1191 + C9422 * C1316) *
               C92177 * C92102 +
           (C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385 +
            C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
            C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317) *
               C92177 * C4023) *
              C92150 * C791 +
          ((C9581 * C946 - C10082 * C798 - C9581 * C1194 + C9422 * C1318 +
            C9582 * C5885 - C10083 * C5702 - C9582 * C6217 + C9423 * C6384 +
            C9583 * C5889 - C10084 * C5705 - C9583 * C6221 + C9424 * C6386) *
               C92177 * C4023 +
           (C9581 * C947 - C10082 * C799 - C9581 * C1195 + C9422 * C1319 +
            C9582 * C5886 - C10083 * C5701 - C9582 * C6218 + C9423 * C6383 +
            C9583 * C5890 - C10084 * C5706 - C9583 * C6222 + C9424 * C6388) *
               C92177 * C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92334 +
            (C21223 + C21224 + C21225) * C92252) *
               C92177 * C92150 * C1969 -
           ((C18868 + C18869 + C18870) * C92252 +
            (C15523 + C15522 + C15521) * C92334) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C16937 + C16938 + C16939) * C92334 +
            (C14700 * C3363 - C14701 * C3358 - C14700 * C3364 + C92357 * C3370 +
             C14702 * C3365 - C14703 * C3359 - C14702 * C3366 + C92358 * C3371 +
             C14704 * C3367 - C14705 * C3360 - C14704 * C3368 +
             C14697 * C3372) *
                C92252) *
               C92177 * C92150 * C1970 -
           ((C14704 * C1383 - C14705 * C1375 - C14704 * C1384 + C14697 * C1399 +
             C14702 * C1385 - C14703 * C1376 - C14702 * C1386 + C92358 * C1400 +
             C14700 * C1387 - C14701 * C1377 - C14700 * C1388 +
             C92357 * C1401) *
                C92252 +
            (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
             C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
             C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
                C92334) *
               C92177 * C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C14700 +
             (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
             (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
                C92334 +
            ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
             C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
             C19824 * C14697) *
                C92252) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C14700 +
             (C182 * C809 - C92177 * C884) * C92357 + (C2046 - C2047) * C14702 +
             (C2048 - C2049) * C92358 + (C2050 - C2051) * C14704 +
             (C2052 - C2053) * C14697) *
                C92334 +
            ((C13874 - C13875) * C14700 + (C13876 - C13877) * C92357 +
             (C11889 - C11890) * C14702 + (C11891 - C11892) * C92358 +
             (C22059 - C22060) * C14704 + (C22061 - C22062) * C14697) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C14700 + (C199 - C198) * C92357 +
             (C201 - C200) * C14702 + (C203 - C202) * C92358 +
             (C205 - C204) * C14704 + (C207 - C206) * C14697) *
                C92334 +
            (C12882 * C14700 + C12883 * C92357 + (C2743 - C2744) * C14702 +
             (C2745 - C2746) * C92358 + (C2747 - C2748) * C14704 +
             (C2749 - C2750) * C14697) *
                C92252) *
               C92150 * C1969 +
           (((C2047 - C2046) * C14700 + (C2049 - C2048) * C92357 +
             (C2051 - C2050) * C14702 + (C2053 - C2052) * C92358 +
             (C2055 - C2054) * C14704 + (C2057 - C2056) * C14697) *
                C92334 +
            ((C11890 - C11889) * C14700 + (C11892 - C11891) * C92357 +
             (C22060 - C22059) * C14702 + (C22062 - C22061) * C92358 +
             (C92177 * C3442 - C182 * C3360) * C14704 +
             (C92177 * C3446 - C182 * C3368) * C14697) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14700 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92357 +
            (C19901 - C19902 + C19903 - C19904) * C14702 +
            (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
            C19930 * C14697) *
               C92177 * C92150 * C1969 +
           ((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                C14700 +
            (C19898 * C809 - C92334 * C950 + C19899 * C3362 - C92252 * C3517) *
                C92357 +
            (C22161 - C22162 + C22163 - C22164) * C14702 +
            (C22165 - C22166 + C22167 - C22168) * C92358 +
            (C22169 - C22170 + C22171 - C22172) * C14704 +
            (C22173 - C22174 + C22175 - C22176) * C14697) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C19902 - C19901 + C19904 - C19903) * C14700 +
            (C19906 - C19905 + C19908 - C19907) * C92357 +
            (C19910 - C19909 + C19912 - C19911) * C14702 +
            (C19914 - C19913 + C19916 - C19915) * C92358 +
            (C19917 - C19918 + C19919 - C19920) * C14704 +
            (C19921 - C19922 + C19923 - C19924) * C14697) *
               C92177 * C92150 * C1969 +
           ((C22162 - C22161 + C22164 - C22163) * C14700 +
            (C22166 - C22165 + C22168 - C22167) * C92357 +
            (C22170 - C22169 + C22172 - C22171) * C14702 +
            (C22174 - C22173 + C22176 - C22175) * C92358 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C14704 +
            (C92334 * C953 - C19898 * C803 + C92252 * C3520 - C19899 * C3368) *
                C14697) *
               C92177 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C182 +
             (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
              C14697 * C356 - C14704 * C350) *
                 C92177) *
                C92334 +
            ((C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C182 +
             (C21457 - C21458 + C21459 - C21460 + C21461 - C21462) * C92177) *
                C92252) *
               C92150 * C1969 +
           (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C182 +
             (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92177) *
                C92334 +
            ((C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C182 +
             (C19171 - C19172 + C19173 - C19174 + C19175 - C19176) * C92177) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
              C14704 * C111 - C14697 * C120) *
                 C182 +
             (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
              C14704 * C351 - C14697 * C357) *
                 C92177) *
                C92334 +
            ((C14700 * C1377 - C92357 * C1387 + C14702 * C1376 -
              C92358 * C1385 + C14704 * C1375 - C14697 * C1383) *
                 C182 +
             (C14700 * C1590 - C92357 * C1598 + C14702 * C1591 -
              C92358 * C1599 + C14704 * C1592 - C14697 * C1600) *
                 C92177) *
                C92252) *
               C92150 * C1969 +
           (((C17253 - C17252 + C17255 - C17254 + C17257 - C17256) * C182 +
             (C17259 - C17258 + C17261 - C17260 + C17263 - C17262) * C92177) *
                C92334 +
            ((C92357 * C3363 - C14700 * C3358 + C92358 * C3365 -
              C14702 * C3359 + C14697 * C3367 - C14704 * C3360) *
                 C182 +
             (C92357 * C3592 - C14700 * C3588 + C92358 * C3593 -
              C14702 * C3589 + C14697 * C3594 - C14704 * C3590) *
                 C92177) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92357 +
             C442 * C92358 + C443 * C14697) *
                C92334 +
            (C21549 + C21550 + C21551) * C92252) *
               C92150 * C1969 -
           ((C22379 * C14697 + C12221 * C92358 + C14208 * C92357) * C92252 +
            (C2292 * C14697 + C2293 * C92358 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C92357) *
                C92334) *
               C92150 * C1970) *
              C1971 +
          (((C2293 * C92357 + C2292 * C92358 + C2291 * C14697) * C92334 +
            (C12221 * C92357 + C22379 * C92358 +
             (C182 * C3442 - C410 * C3360 - C182 * C3590 + C92177 * C3664) *
                 C14697) *
                C92252) *
               C92150 * C1970 -
           ((C2984 * C14697 + C2985 * C92358 + C2986 * C92357) * C92252 +
            (C444 * C14697 + C443 * C92358 + C442 * C92357) * C92334) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C182 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92177) *
                C92357 +
            ((C19901 - C19902 + C19903 - C19904) * C182 +
             (C20153 - C20154 + C20155 - C20156) * C92177) *
                C92358 +
            C20170 * C14697) *
               C92150 * C1969 +
           (((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                 C182 +
             (C19898 * C1008 - C92334 * C1132 + C19899 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C92357 +
            ((C22161 - C22162 + C22163 - C22164) * C182 +
             (C22478 - C22479 + C22480 - C22481) * C92177) *
                C92358 +
            ((C22169 - C22170 + C22171 - C22172) * C182 +
             (C22482 - C22483 + C22484 - C22485) * C92177) *
                C14697) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C182 +
             (C20154 - C20153 + C20156 - C20155) * C92177) *
                C92357 +
            ((C19910 - C19909 + C19912 - C19911) * C182 +
             (C20159 - C20158 + C20161 - C20160) * C92177) *
                C92358 +
            ((C19917 - C19918 + C19919 - C19920) * C182 +
             (C20162 - C20163 + C20164 - C20165) * C92177) *
                C14697) *
               C92150 * C1969 +
           (((C22162 - C22161 + C22164 - C22163) * C182 +
             (C22479 - C22478 + C22481 - C22480) * C92177) *
                C92357 +
            ((C22170 - C22169 + C22172 - C22171) * C182 +
             (C22483 - C22482 + C22485 - C22484) * C92177) *
                C92358 +
            ((C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                 C182 +
             (C92334 * C1135 - C19898 * C1011 + C92252 * C3734 -
              C19899 * C3590) *
                 C92177) *
                C14697) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C19898 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92334 +
            (C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C19899 +
            (C21703 - C21704 + C21705 - C21706 + C21707 - C21708) * C92252) *
               C92177 * C92150 * C1969 +
           ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C19898 +
            (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92334 +
            (C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C19899 +
            (C19471 - C19472 + C19473 - C19474 + C19475 - C19476) * C92252) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C19898 +
            (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
             C14704 * C570 - C14697 * C576) *
                C92334 +
            (C14700 * C1377 - C92357 * C1387 + C14702 * C1376 - C92358 * C1385 +
             C14704 * C1375 - C14697 * C1383) *
                C19899 +
            (C14700 * C1772 - C92357 * C1780 + C14702 * C1773 - C92358 * C1781 +
             C14704 * C1774 - C14697 * C1782) *
                C92252) *
               C92177 * C92150 * C1969 +
           ((C17253 - C17252 + C17255 - C17254 + C17257 - C17256) * C19898 +
            (C17588 - C17587 + C17590 - C17589 + C17592 - C17591) * C92334 +
            (C92357 * C3363 - C14700 * C3358 + C92358 * C3365 - C14702 * C3359 +
             C14697 * C3367 - C14704 * C3360) *
                C19899 +
            (C92357 * C3806 - C14700 * C3802 + C92358 * C3807 - C14702 * C3803 +
             C14697 * C3808 - C14704 * C3804) *
                C92252) *
               C92177 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C19898 +
             (C92177 * C629 - C182 * C567) * C92334 +
             (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                C92357 +
            ((C196 - C197) * C19898 + (C636 - C637) * C92334 + C12880 * C19899 +
             C13529 * C92252) *
                C92358 +
            C20326 * C14697) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C19898 +
             (C182 * C1190 - C92177 * C1256) * C92334 +
             (C13874 - C13875) * C19899 + (C14518 - C14519) * C92252) *
                C92357 +
            ((C2046 - C2047) * C19898 + (C2502 - C2503) * C92334 +
             (C11889 - C11890) * C19899 + (C12526 - C12527) * C92252) *
                C92358 +
            ((C2050 - C2051) * C19898 + (C2504 - C2505) * C92334 +
             (C22059 - C22060) * C19899 + (C22682 - C22683) * C92252) *
                C14697) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C19898 + (C637 - C636) * C92334 + C12882 * C19899 +
             C13530 * C92252) *
                C92357 +
            ((C201 - C200) * C19898 + (C640 - C639) * C92334 +
             (C2743 - C2744) * C19899 + (C3197 - C3198) * C92252) *
                C92358 +
            ((C205 - C204) * C19898 + (C643 - C642) * C92334 +
             (C2747 - C2748) * C19899 + (C3199 - C3200) * C92252) *
                C14697) *
               C92150 * C1969 +
           (((C2047 - C2046) * C19898 + (C2503 - C2502) * C92334 +
             (C11890 - C11889) * C19899 + (C12527 - C12526) * C92252) *
                C92357 +
            ((C2051 - C2050) * C19898 + (C2505 - C2504) * C92334 +
             (C22060 - C22059) * C19899 + (C22683 - C22682) * C92252) *
                C92358 +
            ((C2055 - C2054) * C19898 + (C2507 - C2506) * C92334 +
             (C92177 * C3442 - C182 * C3360) * C19899 +
             (C92177 * C3878 - C182 * C3804) * C92252) *
                C14697) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92177 * C92357 +
            (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
               C92150 * C1969 -
           ((C22806 + C22807) * C92177 * C14697 +
            (C22808 + C22809) * C92177 * C92358 +
            (C19899 * C3513 - C20401 * C3357 - C19899 * C3801 + C92252 * C3945 +
             C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317) *
                C92177 * C92357) *
               C92150 * C1970) *
              C1971 +
          (((C22809 + C22808) * C92177 * C92357 +
            (C22807 + C22806) * C92177 * C92358 +
            (C19898 * C945 - C20400 * C794 - C19898 * C1193 + C92334 * C1314 +
             C19899 * C3516 - C20401 * C3360 - C19899 * C3804 +
             C92252 * C3948) *
                C92177 * C14697) *
               C92150 * C1970 -
           ((C20443 + C20444) * C92177 * C14697 +
            (C20442 + C20441) * C92177 * C92358 +
            (C20440 + C20439) * C92177 * C92357) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92334 +
            (C21223 + C21224 + C21225) * C92252) *
               C92177 * C2664 -
           ((C21226 + C21227 + C21228) * C92252 +
            (C21225 + C21224 + C21223) * C92334) *
               C92177 * C2665) *
              C1969 +
          (((C18870 + C18869 + C18868) * C92334 +
            (C14700 * C5711 - C14701 * C5703 - C14700 * C5712 + C92357 * C5721 +
             C14702 * C5713 - C14703 * C5704 - C14702 * C5714 + C92358 * C5722 +
             C14704 * C11785 - C14705 * C11784 - C14704 * C11786 +
             C14697 * C11787) *
                C92252) *
               C92177 * C2665 -
           ((C18868 + C18869 + C18870) * C92252 +
            (C15523 + C15522 + C15521) * C92334) *
               C92177 * C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C14700 +
             (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
             (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
                C92334 +
            ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
             C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
             C19824 * C14697) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C14700 + (C11012 - C11011) * C92357 +
             C12882 * C14702 + C12883 * C92358 + C23027 * C14704 +
             C23028 * C14697) *
                C92334 +
            ((C11014 - C11013) * C14700 + (C11016 - C11015) * C92357 +
             C12884 * C14702 + C12885 * C92358 + (C9504 - C9505) * C14704 +
             (C9506 - C9507) * C14697) *
                C92252) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C14700 +
             (C182 * C809 - C92177 * C884) * C92357 + (C2046 - C2047) * C14702 +
             (C2048 - C2049) * C92358 + (C2050 - C2051) * C14704 +
             (C2052 - C2053) * C14697) *
                C92334 +
            ((C13874 - C13875) * C14700 + (C13876 - C13877) * C92357 +
             (C11889 - C11890) * C14702 + (C11891 - C11892) * C92358 +
             (C22059 - C22060) * C14704 + (C22061 - C22062) * C14697) *
                C92252) *
               C2664 +
           (((C13875 - C13874) * C14700 + (C13877 - C13876) * C92357 +
             (C11890 - C11889) * C14702 + (C11892 - C11891) * C92358 +
             (C22060 - C22059) * C14704 + (C22062 - C22061) * C14697) *
                C92334 +
            ((C13879 - C13878) * C14700 + (C13881 - C13880) * C92357 +
             (C11894 - C11893) * C14702 + (C11896 - C11895) * C92358 +
             (C92177 * C11886 - C182 * C11784) * C14704 +
             (C92177 * C11887 - C182 * C11786) * C14697) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14700 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92357 +
            (C19901 - C19902 + C19903 - C19904) * C14702 +
            (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
            C19930 * C14697) *
               C92177 * C2664 +
           ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C14700 +
            (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
             C92252 * C1535) *
                C92357 +
            (C23127 - C23128 + C23129 - C23130) * C14702 +
            (C23131 - C23132 + C23133 - C23134) * C92358 +
            (C23135 - C23136 + C23137 - C23138) * C14704 +
            (C23139 - C23140 + C23141 - C23142) * C14697) *
               C92177 * C2665) *
              C1969 +
          (((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                C14700 +
            (C19898 * C809 - C92334 * C950 + C19899 * C3362 - C92252 * C3517) *
                C92357 +
            (C22161 - C22162 + C22163 - C22164) * C14702 +
            (C22165 - C22166 + C22167 - C22168) * C92358 +
            (C22169 - C22170 + C22171 - C22172) * C14704 +
            (C22173 - C22174 + C22175 - C22176) * C14697) *
               C92177 * C2664 +
           ((C92334 * C3513 - C19898 * C3357 + C92252 * C5887 -
             C19899 * C5703) *
                C14700 +
            (C92334 * C3517 - C19898 * C3362 + C92252 * C5893 -
             C19899 * C5712) *
                C92357 +
            (C92334 * C3514 - C19898 * C3358 + C92252 * C5888 -
             C19899 * C5704) *
                C14702 +
            (C92334 * C3518 - C19898 * C3364 + C92252 * C5894 -
             C19899 * C5714) *
                C92358 +
            (C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
             C19899 * C11784) *
                C14704 +
            (C92334 * C3519 - C19898 * C3366 + C92252 * C11995 -
             C19899 * C11786) *
                C14697) *
               C92177 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C182 +
             (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
              C14697 * C356 - C14704 * C350) *
                 C92177) *
                C92334 +
            ((C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C182 +
             (C21457 - C21458 + C21459 - C21460 + C21461 - C21462) * C92177) *
                C92252) *
               C2664 +
           (((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C182 +
             (C21458 - C21457 + C21460 - C21459 + C21462 - C21461) * C92177) *
                C92334 +
            ((C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C182 +
             (C21469 - C21470 + C21471 - C21472 + C21473 - C21474) * C92177) *
                C92252) *
               C2665) *
              C1969 +
          ((((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C182 +
             (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92177) *
                C92334 +
            ((C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C182 +
             (C19171 - C19172 + C19173 - C19174 + C19175 - C19176) * C92177) *
                C92252) *
               C2664 +
           (((C19166 - C19165 + C19168 - C19167 + C19170 - C19169) * C182 +
             (C19172 - C19171 + C19174 - C19173 + C19176 - C19175) * C92177) *
                C92334 +
            ((C92357 * C5711 - C14700 * C5703 + C92358 * C5713 -
              C14702 * C5704 + C14697 * C11785 - C14704 * C11784) *
                 C182 +
             (C92357 * C5979 - C14700 * C5973 + C92358 * C5980 -
              C14702 * C5974 + C14697 * C12107 - C14704 * C12106) *
                 C92177) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92357 +
             C442 * C92358 + C443 * C14697) *
                C92334 +
            (C21549 + C21550 + C21551) * C92252) *
               C2664 -
           ((C21552 + C21553 + C21554) * C92252 +
            (C21551 + C21550 + C21549) * C92334) *
               C2665) *
              C1969 +
          (((C24279 + C24280 + C24281) * C92334 +
            (C14209 * C92357 + C12220 * C92358 +
             (C182 * C11886 - C410 * C11784 - C182 * C12106 + C92177 * C12206) *
                 C14697) *
                C92252) *
               C2665 -
           ((C24281 + C24280 + C24279) * C92252 +
            (C2292 * C14697 + C2293 * C92358 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C92357) *
                C92334) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C182 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92177) *
                C92357 +
            ((C19901 - C19902 + C19903 - C19904) * C182 +
             (C20153 - C20154 + C20155 - C20156) * C92177) *
                C92358 +
            C20170 * C14697) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C92357 +
            ((C23127 - C23128 + C23129 - C23130) * C182 +
             (C23452 - C23453 + C23454 - C23455) * C92177) *
                C92358 +
            ((C23135 - C23136 + C23137 - C23138) * C182 +
             (C23456 - C23457 + C23458 - C23459) * C92177) *
                C14697) *
               C2665) *
              C1969 +
          ((((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                 C182 +
             (C19898 * C1008 - C92334 * C1132 + C19899 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C92357 +
            ((C22161 - C22162 + C22163 - C22164) * C182 +
             (C22478 - C22479 + C22480 - C22481) * C92177) *
                C92358 +
            ((C22169 - C22170 + C22171 - C22172) * C182 +
             (C22482 - C22483 + C22484 - C22485) * C92177) *
                C14697) *
               C2664 +
           (((C92334 * C3513 - C19898 * C3357 + C92252 * C5887 -
              C19899 * C5703) *
                 C182 +
             (C92334 * C3731 - C19898 * C3587 + C92252 * C6139 -
              C19899 * C5973) *
                 C92177) *
                C92357 +
            ((C92334 * C3514 - C19898 * C3358 + C92252 * C5888 -
              C19899 * C5704) *
                 C182 +
             (C92334 * C3732 - C19898 * C3588 + C92252 * C6141 -
              C19899 * C5974) *
                 C92177) *
                C92358 +
            ((C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
              C19899 * C11784) *
                 C182 +
             (C92334 * C3733 - C19898 * C3589 + C92252 * C12319 -
              C19899 * C12106) *
                 C92177) *
                C14697) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C19898 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92334 +
            (C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C19899 +
            (C21703 - C21704 + C21705 - C21706 + C21707 - C21708) * C92252) *
               C92177 * C2664 +
           ((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C19898 +
            (C21704 - C21703 + C21706 - C21705 + C21708 - C21707) * C92334 +
            (C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C19899 +
            (C21709 - C21710 + C21711 - C21712 + C21713 - C21714) * C92252) *
               C92177 * C2665) *
              C1969 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C19898 +
            (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92334 +
            (C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C19899 +
            (C19471 - C19472 + C19473 - C19474 + C19475 - C19476) * C92252) *
               C92177 * C2664 +
           ((C19166 - C19165 + C19168 - C19167 + C19170 - C19169) * C19898 +
            (C19472 - C19471 + C19474 - C19473 + C19476 - C19475) * C92334 +
            (C92357 * C5711 - C14700 * C5703 + C92358 * C5713 - C14702 * C5704 +
             C14697 * C11785 - C14704 * C11784) *
                C19899 +
            (C92357 * C6225 - C14700 * C6219 + C92358 * C6226 - C14702 * C6220 +
             C14697 * C12425 - C14704 * C12424) *
                C92252) *
               C92177 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C19898 +
             (C92177 * C629 - C182 * C567) * C92334 +
             (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                C92357 +
            ((C196 - C197) * C19898 + (C636 - C637) * C92334 + C12880 * C19899 +
             C13529 * C92252) *
                C92358 +
            C20326 * C14697) *
               C2664 +
           (((C11010 - C11009) * C19898 + (C11600 - C11599) * C92334 +
             (C11014 - C11013) * C19899 + (C11602 - C11601) * C92252) *
                C92357 +
            (C12882 * C19898 + C13530 * C92334 + C12884 * C19899 +
             C13531 * C92252) *
                C92358 +
            (C23027 * C19898 + C23662 * C92334 + (C9504 - C9505) * C19899 +
             (C10007 - C10008) * C92252) *
                C14697) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C19898 +
             (C182 * C1190 - C92177 * C1256) * C92334 +
             (C13874 - C13875) * C19899 + (C14518 - C14519) * C92252) *
                C92357 +
            ((C2046 - C2047) * C19898 + (C2502 - C2503) * C92334 +
             (C11889 - C11890) * C19899 + (C12526 - C12527) * C92252) *
                C92358 +
            ((C2050 - C2051) * C19898 + (C2504 - C2505) * C92334 +
             (C22059 - C22060) * C19899 + (C22682 - C22683) * C92252) *
                C14697) *
               C2664 +
           (((C13875 - C13874) * C19898 + (C14519 - C14518) * C92334 +
             (C13879 - C13878) * C19899 + (C14521 - C14520) * C92252) *
                C92357 +
            ((C11890 - C11889) * C19898 + (C12527 - C12526) * C92334 +
             (C11894 - C11893) * C19899 + (C12529 - C12528) * C92252) *
                C92358 +
            ((C22060 - C22059) * C19898 + (C22683 - C22682) * C92334 +
             (C92177 * C11886 - C182 * C11784) * C19899 +
             (C92177 * C12524 - C182 * C12424) * C92252) *
                C14697) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C92177 * C92357 +
            (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
               C2664 -
           ((C23785 + C23786) * C92177 * C14697 +
            (C23787 + C23788) * C92177 * C92358 +
            (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 + C92252 * C1899 +
             C19898 * C1523 - C20400 * C1378 - C19898 * C1771 +
             C92334 * C1898) *
                C92177 * C92357) *
               C2665) *
              C1969 +
          (((C19898 * C3513 - C20400 * C3357 - C19898 * C3801 + C92334 * C3945 +
             C19899 * C5887 - C20401 * C5703 - C19899 * C6219 +
             C92252 * C6385) *
                C92177 * C92357 +
            (C19898 * C3514 - C20400 * C3358 - C19898 * C3802 + C92334 * C3946 +
             C19899 * C5888 - C20401 * C5704 - C19899 * C6220 +
             C92252 * C6387) *
                C92177 * C92358 +
            (C19898 * C3515 - C20400 * C3359 - C19898 * C3803 + C92334 * C3947 +
             C19899 * C11994 - C20401 * C11784 - C19899 * C12424 +
             C92252 * C12627) *
                C92177 * C14697) *
               C2665 -
           ((C22806 + C22807) * C92177 * C14697 +
            (C22808 + C22809) * C92177 * C92358 +
            (C19899 * C3513 - C20401 * C3357 - C19899 * C3801 + C92252 * C3945 +
             C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317) *
                C92177 * C92357) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92334 +
           (C14700 * C1389 - C14701 * C1378 - C14700 * C1390 + C92357 * C1402 +
            C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
            C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400) *
               C92252) *
              C92177 * C92150 * C790 -
          ((C18868 + C18869 + C18870) * C92252 +
           (C15523 + C15522 + C15521) * C92334) *
              C92177 * C92150 * C791 +
          ((C15526 + C15525 + C15524) * C92334 +
           (C14700 * C5709 - C14701 * C5702 - C14700 * C5710 + C92357 * C5720 +
            C14702 * C5707 - C14703 * C5701 - C14702 * C5708 + C92358 * C5719 +
            C14704 * C7489 - C14705 * C7488 - C14704 * C7490 + C14697 * C7491) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92334 +
           (C14700 * C1389 - C14701 * C1378 - C14700 * C1390 + C92357 * C1402 +
            C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
            C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400) *
               C92252) *
              C92177 * C92150 * C92136 * C97 -
          ((C14704 * C1383 - C14705 * C1375 - C14704 * C1384 + C14697 * C1399 +
            C14702 * C1385 - C14703 * C1376 - C14702 * C1386 + C92358 * C1400 +
            C14700 * C1387 - C14701 * C1377 - C14700 * C1388 + C92357 * C1401) *
               C92252 +
           (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
            C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
            C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
               C92334) *
              C92177 * C92150 * C92136 * C98 +
          ((C14700 * C118 - C14701 * C110 - C14700 * C119 + C92357 * C128 +
            C14702 * C120 - C14703 * C111 - C14702 * C121 + C92358 * C129 +
            C14704 * C122 - C14705 * C112 - C14704 * C123 + C14697 * C130) *
               C92334 +
           (C14700 * C1385 - C14701 * C1376 - C14700 * C1386 + C92357 * C1400 +
            C14702 * C1383 - C14703 * C1375 - C14702 * C1384 + C92358 * C1399 +
            C14704 * C2667 - C14705 * C2666 - C14704 * C2668 + C14697 * C2669) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92334 +
           (C21223 + C21224 + C21225) * C92252) *
              C92177 * C1372 -
          ((C21226 + C21227 + C21228) * C92252 +
           (C21225 + C21224 + C21223) * C92334) *
              C92177 * C1373 +
          ((C21228 + C21227 + C21226) * C92334 +
           (C14700 * C10873 - C14701 * C10868 - C14700 * C10874 +
            C92357 * C10880 + C14702 * C10871 - C14703 * C10867 -
            C14702 * C10872 + C92358 * C10879 + C14704 * C12748 -
            C14705 * C12747 - C14704 * C12749 + C14697 * C12750) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C14700 +
            (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
            (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
               C92334 +
           ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
            C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
            C19824 * C14697) *
               C92252) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C14700 +
            (C182 * C809 - C92177 * C884) * C92357 + (C2046 - C2047) * C14702 +
            (C2048 - C2049) * C92358 + (C2050 - C2051) * C14704 +
            (C2052 - C2053) * C14697) *
               C92334 +
           ((C13874 - C13875) * C14700 + (C13876 - C13877) * C92357 +
            (C11889 - C11890) * C14702 + (C11891 - C11892) * C92358 +
            (C182 * C3359 - C92177 * C3441) * C14704 +
            (C182 * C3366 - C92177 * C3445) * C14697) *
               C92252) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C14700 +
            (C92177 * C888 - C182 * C811) * C92357 +
            (C92177 * C881 - C182 * C799) * C14702 +
            (C92177 * C889 - C182 * C813) * C92358 +
            (C92177 * C882 - C182 * C800) * C14704 +
            (C92177 * C890 - C182 * C815) * C14697) *
               C92334 +
           ((C92177 * C5799 - C182 * C5702) * C14700 +
            (C92177 * C5805 - C182 * C5710) * C92357 +
            (C92177 * C5800 - C182 * C5701) * C14702 +
            (C92177 * C5806 - C182 * C5708) * C92358 +
            (C92177 * C7590 - C182 * C7488) * C14704 +
            (C92177 * C7591 - C182 * C7490) * C14697) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C14700 +
            (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
            (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
               C92334 +
           ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
            C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
            C19824 * C14697) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C14700 + (C199 - C198) * C92357 +
            (C201 - C200) * C14702 + (C203 - C202) * C92358 +
            (C205 - C204) * C14704 + (C207 - C206) * C14697) *
               C92334 +
           (C12882 * C14700 + C12883 * C92357 + (C2743 - C2744) * C14702 +
            (C2745 - C2746) * C92358 + (C2747 - C2748) * C14704 +
            (C2749 - C2750) * C14697) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C212 * C14700 + C213 * C92357 + C214 * C14702 + C215 * C92358 +
            (C209 - C208) * C14704 + (C211 - C210) * C14697) *
               C92334 +
           (C19823 * C14700 + C19824 * C92357 + (C2748 - C2747) * C14702 +
            (C2750 - C2749) * C92358 +
            (C92177 * C2736 - C182 * C2666) * C14704 +
            (C92177 * C2737 - C182 * C2668) * C14697) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C14700 +
            (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
            (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
               C92334 +
           ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
            C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
            C19824 * C14697) *
               C92252) *
              C1372 +
          (((C11010 - C11009) * C14700 + (C11012 - C11011) * C92357 +
            C12882 * C14702 + C12883 * C92358 + (C2743 - C2744) * C14704 +
            (C2745 - C2746) * C14697) *
               C92334 +
           ((C11014 - C11013) * C14700 + (C11016 - C11015) * C92357 +
            C12884 * C14702 + C12885 * C92358 + (C9504 - C9505) * C14704 +
            (C9506 - C9507) * C14697) *
               C92252) *
              C1373 +
          ((C11027 * C14700 + C11028 * C92357 + C11017 * C14702 +
            C11018 * C92358 + (C9505 - C9504) * C14704 +
            (C9507 - C9506) * C14697) *
               C92334 +
           ((C11020 - C11019) * C14700 + (C11022 - C11021) * C92357 +
            (C11024 - C11023) * C14702 + (C11026 - C11025) * C92358 +
            (C92177 * C12877 - C182 * C12747) * C14704 +
            (C92177 * C12878 - C182 * C12749) * C14697) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C14700 +
           (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
               C92357 +
           (C19901 - C19902 + C19903 - C19904) * C14702 +
           (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
           C19930 * C14697) *
              C92177 * C92150 * C790 +
          ((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
               C14700 +
           (C19898 * C809 - C92334 * C950 + C19899 * C3362 - C92252 * C3517) *
               C92357 +
           (C19898 * C796 - C92334 * C943 + C19899 * C3358 - C92252 * C3514) *
               C14702 +
           (C19898 * C807 - C92334 * C951 + C19899 * C3364 - C92252 * C3518) *
               C92358 +
           (C19898 * C795 - C92334 * C944 + C19899 * C3359 - C92252 * C3515) *
               C14704 +
           (C19898 * C805 - C92334 * C952 + C19899 * C3366 - C92252 * C3519) *
               C14697) *
              C92177 * C92150 * C791 +
          ((C92334 * C946 - C19898 * C798 + C92252 * C5885 - C19899 * C5702) *
               C14700 +
           (C92334 * C954 - C19898 * C811 + C92252 * C5891 - C19899 * C5710) *
               C92357 +
           (C92334 * C947 - C19898 * C799 + C92252 * C5886 - C19899 * C5701) *
               C14702 +
           (C92334 * C955 - C19898 * C813 + C92252 * C5892 - C19899 * C5708) *
               C92358 +
           (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
               C14704 +
           (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
               C14697) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C14700 +
           (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
               C92357 +
           (C19901 - C19902 + C19903 - C19904) * C14702 +
           (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
           C19930 * C14697) *
              C92177 * C92150 * C92136 * C97 +
          ((C19902 - C19901 + C19904 - C19903) * C14700 +
           (C19906 - C19905 + C19908 - C19907) * C92357 +
           (C19910 - C19909 + C19912 - C19911) * C14702 +
           (C19914 - C19913 + C19916 - C19915) * C92358 +
           (C19917 - C19918 + C19919 - C19920) * C14704 +
           (C19921 - C19922 + C19923 - C19924) * C14697) *
              C92177 * C92150 * C92136 * C98 +
          (C19929 * C14700 + C19930 * C92357 +
           (C19918 - C19917 + C19920 - C19919) * C14702 +
           (C19922 - C19921 + C19924 - C19923) * C92358 +
           (C92334 * C270 - C19898 * C112 + C92252 * C2816 - C19899 * C2666) *
               C14704 +
           (C92334 * C276 - C19898 * C123 + C92252 * C2817 - C19899 * C2668) *
               C14697) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C14700 +
           (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
               C92357 +
           (C19901 - C19902 + C19903 - C19904) * C14702 +
           (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
           C19930 * C14697) *
              C92177 * C1372 +
          ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 - C92252 * C1527) *
               C14700 +
           (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 - C92252 * C1535) *
               C92357 +
           (C19898 * C1377 - C92334 * C1524 + C19899 * C1380 - C92252 * C1528) *
               C14702 +
           (C19898 * C1388 - C92334 * C1532 + C19899 * C1394 - C92252 * C1536) *
               C92358 +
           (C19898 * C1376 - C92334 * C1525 + C19899 * C1381 - C92252 * C1529) *
               C14704 +
           (C19898 * C1386 - C92334 * C1533 + C19899 * C1396 - C92252 * C1537) *
               C14697) *
              C92177 * C1373 +
          ((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
            C19899 * C10868) *
               C14700 +
           (C92334 * C1535 - C19898 * C1392 + C92252 * C11113 -
            C19899 * C10874) *
               C92357 +
           (C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
            C19899 * C10867) *
               C14702 +
           (C92334 * C1536 - C19898 * C1394 + C92252 * C11114 -
            C19899 * C10872) *
               C92358 +
           (C92334 * C1529 - C19898 * C1381 + C92252 * C12983 -
            C19899 * C12747) *
               C14704 +
           (C92334 * C1537 - C19898 * C1396 + C92252 * C12984 -
            C19899 * C12749) *
               C14697) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C182 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92177) *
               C92334 +
           ((C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
             C14697 * C1385 - C14704 * C1376) *
                C182 +
            (C92357 * C1597 - C14700 * C1589 + C92358 * C1598 - C14702 * C1590 +
             C14697 * C1599 - C14704 * C1591) *
                C92177) *
               C92252) *
              C92150 * C790 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C182 +
            (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92177) *
               C92334 +
           ((C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C182 +
            (C19171 - C19172 + C19173 - C19174 + C19175 - C19176) * C92177) *
               C92252) *
              C92150 * C791 +
          (((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C182 +
            (C15768 - C15767 + C15770 - C15769 + C15772 - C15771) * C92177) *
               C92334 +
           ((C92357 * C5709 - C14700 * C5702 + C92358 * C5707 - C14702 * C5701 +
             C14697 * C7489 - C14704 * C7488) *
                C182 +
            (C92357 * C5977 - C14700 * C5971 + C92358 * C5978 - C14702 * C5972 +
             C14697 * C7811 - C14704 * C7810) *
                C92177) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C182 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92177) *
               C92334 +
           ((C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
             C14697 * C1385 - C14704 * C1376) *
                C182 +
            (C92357 * C1597 - C14700 * C1589 + C92358 * C1598 - C14702 * C1590 +
             C14697 * C1599 - C14704 * C1591) *
                C92177) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C182 +
            (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
             C14704 * C351 - C14697 * C357) *
                C92177) *
               C92334 +
           ((C14700 * C1377 - C92357 * C1387 + C14702 * C1376 - C92358 * C1385 +
             C14704 * C1375 - C14697 * C1383) *
                C182 +
            (C14700 * C1590 - C92357 * C1598 + C14702 * C1591 - C92358 * C1599 +
             C14704 * C1592 - C14697 * C1600) *
                C92177) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
             C14697 * C122 - C14704 * C112) *
                C182 +
            (C92357 * C356 - C14700 * C350 + C92358 * C357 - C14702 * C351 +
             C14697 * C358 - C14704 * C352) *
                C92177) *
               C92334 +
           ((C92357 * C1385 - C14700 * C1376 + C92358 * C1383 - C14702 * C1375 +
             C14697 * C2667 - C14704 * C2666) *
                C182 +
            (C92357 * C1599 - C14700 * C1591 + C92358 * C1600 - C14702 * C1592 +
             C14697 * C2897 - C14704 * C2896) *
                C92177) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C182 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92177) *
               C92334 +
           ((C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C182 +
            (C21457 - C21458 + C21459 - C21460 + C21461 - C21462) * C92177) *
               C92252) *
              C1372 +
          (((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C182 +
            (C21458 - C21457 + C21460 - C21459 + C21462 - C21461) * C92177) *
               C92334 +
           ((C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C182 +
            (C21469 - C21470 + C21471 - C21472 + C21473 - C21474) * C92177) *
               C92252) *
              C1373 +
          (((C21464 - C21463 + C21466 - C21465 + C21468 - C21467) * C182 +
            (C21470 - C21469 + C21472 - C21471 + C21474 - C21473) * C92177) *
               C92334 +
           ((C92357 * C10873 - C14700 * C10868 + C92358 * C10871 -
             C14702 * C10867 + C14697 * C12748 - C14704 * C12747) *
                C182 +
            (C92357 * C11195 - C14700 * C11191 + C92358 * C11196 -
             C14702 * C11192 + C14697 * C13096 - C14704 * C13095) *
                C92177) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92357 +
            C442 * C92358 + C443 * C14697) *
               C92334 +
           (C11337 * C92357 + C2986 * C92358 + C2985 * C14697) * C92252) *
              C92150 * C790 -
          (((C182 * C3441 - C410 * C3359 - C182 * C3589 + C92177 * C3663) *
                C14697 +
            C12221 * C92358 + C14208 * C92357) *
               C92252 +
           (C2292 * C14697 + C2293 * C92358 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92357) *
               C92334) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C92357 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92358 +
            (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                C14697) *
               C92334 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C92357 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92358 +
            (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                C14697) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92357 +
            C442 * C92358 + C443 * C14697) *
               C92334 +
           (C11337 * C92357 + C2986 * C92358 + C2985 * C14697) * C92252) *
              C92150 * C92136 * C97 -
          ((C2984 * C14697 + C2985 * C92358 + C2986 * C92357) * C92252 +
           (C444 * C14697 + C443 * C92358 + C442 * C92357) * C92334) *
              C92150 * C92136 * C98 +
          ((C443 * C92357 + C444 * C92358 + C445 * C14697) * C92334 +
           (C2985 * C92357 + C2984 * C92358 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C14697) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92357 +
            C442 * C92358 + C443 * C14697) *
               C92334 +
           (C21549 + C21550 + C21551) * C92252) *
              C1372 -
          ((C21552 + C21553 + C21554) * C92252 +
           (C21551 + C21550 + C21549) * C92334) *
              C1373 +
          ((C21554 + C21553 + C21552) * C92334 +
           (C11340 * C92357 + C11339 * C92358 +
            (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
                C14697) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C182 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92177) *
               C92357 +
           ((C19901 - C19902 + C19903 - C19904) * C182 +
            (C20153 - C20154 + C20155 - C20156) * C92177) *
               C92358 +
           C20170 * C14697) *
              C92150 * C790 +
          (((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                C182 +
            (C19898 * C1008 - C92334 * C1132 + C19899 * C3587 -
             C92252 * C3731) *
                C92177) *
               C92357 +
           ((C19898 * C796 - C92334 * C943 + C19899 * C3358 - C92252 * C3514) *
                C182 +
            (C19898 * C1009 - C92334 * C1133 + C19899 * C3588 -
             C92252 * C3732) *
                C92177) *
               C92358 +
           ((C19898 * C795 - C92334 * C944 + C19899 * C3359 - C92252 * C3515) *
                C182 +
            (C19898 * C1010 - C92334 * C1134 + C19899 * C3589 -
             C92252 * C3733) *
                C92177) *
               C14697) *
              C92150 * C791 +
          (((C92334 * C946 - C19898 * C798 + C92252 * C5885 - C19899 * C5702) *
                C182 +
            (C92334 * C1136 - C19898 * C1012 + C92252 * C6137 -
             C19899 * C5971) *
                C92177) *
               C92357 +
           ((C92334 * C947 - C19898 * C799 + C92252 * C5886 - C19899 * C5701) *
                C182 +
            (C92334 * C1137 - C19898 * C1013 + C92252 * C6138 -
             C19899 * C5972) *
                C92177) *
               C92358 +
           ((C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                C182 +
            (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 -
             C19899 * C7810) *
                C92177) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C182 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92177) *
               C92357 +
           ((C19901 - C19902 + C19903 - C19904) * C182 +
            (C20153 - C20154 + C20155 - C20156) * C92177) *
               C92358 +
           C20170 * C14697) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C182 +
            (C20154 - C20153 + C20156 - C20155) * C92177) *
               C92357 +
           ((C19910 - C19909 + C19912 - C19911) * C182 +
            (C20159 - C20158 + C20161 - C20160) * C92177) *
               C92358 +
           ((C19917 - C19918 + C19919 - C19920) * C182 +
            (C20162 - C20163 + C20164 - C20165) * C92177) *
               C14697) *
              C92150 * C92136 * C98 +
          (C20170 * C92357 +
           ((C19918 - C19917 + C19920 - C19919) * C182 +
            (C20163 - C20162 + C20165 - C20164) * C92177) *
               C92358 +
           ((C92334 * C270 - C19898 * C112 + C92252 * C2816 - C19899 * C2666) *
                C182 +
            (C92334 * C499 - C19898 * C352 + C92252 * C3052 - C19899 * C2896) *
                C92177) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C182 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92177) *
               C92357 +
           ((C19901 - C19902 + C19903 - C19904) * C182 +
            (C20153 - C20154 + C20155 - C20156) * C92177) *
               C92358 +
           C20170 * C14697) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C182 +
            (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
             C92252 * C1717) *
                C92177) *
               C92357 +
           ((C19898 * C1377 - C92334 * C1524 + C19899 * C1380 -
             C92252 * C1528) *
                C182 +
            (C19898 * C1590 - C92334 * C1714 + C19899 * C1594 -
             C92252 * C1718) *
                C92177) *
               C92358 +
           ((C19898 * C1376 - C92334 * C1525 + C19899 * C1381 -
             C92252 * C1529) *
                C182 +
            (C19898 * C1591 - C92334 * C1715 + C19899 * C1595 -
             C92252 * C1719) *
                C92177) *
               C14697) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C182 +
            (C92334 * C1717 - C19898 * C1593 + C92252 * C11419 -
             C19899 * C11191) *
                C92177) *
               C92357 +
           ((C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
             C19899 * C10867) *
                C182 +
            (C92334 * C1718 - C19898 * C1594 + C92252 * C11420 -
             C19899 * C11192) *
                C92177) *
               C92358 +
           ((C92334 * C1529 - C19898 * C1381 + C92252 * C12983 -
             C19899 * C12747) *
                C182 +
            (C92334 * C1719 - C19898 * C1595 + C92252 * C13314 -
             C19899 * C13095) *
                C92177) *
               C14697) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C19898 +
           (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
            C14697 * C575 - C14704 * C569) *
               C92334 +
           (C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
            C14697 * C1385 - C14704 * C1376) *
               C19899 +
           (C92357 * C1779 - C14700 * C1771 + C92358 * C1780 - C14702 * C1772 +
            C14697 * C1781 - C14704 * C1773) *
               C92252) *
              C92177 * C92150 * C790 +
          ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C19898 +
           (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92334 +
           (C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C19899 +
           (C19471 - C19472 + C19473 - C19474 + C19475 - C19476) * C92252) *
              C92177 * C92150 * C791 +
          ((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C19898 +
           (C16002 - C16001 + C16004 - C16003 + C16006 - C16005) * C92334 +
           (C92357 * C5709 - C14700 * C5702 + C92358 * C5707 - C14702 * C5701 +
            C14697 * C7489 - C14704 * C7488) *
               C19899 +
           (C92357 * C6223 - C14700 * C6217 + C92358 * C6224 - C14702 * C6218 +
            C14697 * C8134 - C14704 * C8133) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C19898 +
           (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
            C14697 * C575 - C14704 * C569) *
               C92334 +
           (C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
            C14697 * C1385 - C14704 * C1376) *
               C19899 +
           (C92357 * C1779 - C14700 * C1771 + C92358 * C1780 - C14702 * C1772 +
            C14697 * C1781 - C14704 * C1773) *
               C92252) *
              C92177 * C92150 * C92136 * C97 +
          ((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
            C14704 * C111 - C14697 * C120) *
               C19898 +
           (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
            C14704 * C570 - C14697 * C576) *
               C92334 +
           (C14700 * C1377 - C92357 * C1387 + C14702 * C1376 - C92358 * C1385 +
            C14704 * C1375 - C14697 * C1383) *
               C19899 +
           (C14700 * C1772 - C92357 * C1780 + C14702 * C1773 - C92358 * C1781 +
            C14704 * C1774 - C14697 * C1782) *
               C92252) *
              C92177 * C92150 * C92136 * C98 +
          ((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
            C14697 * C122 - C14704 * C112) *
               C19898 +
           (C92357 * C575 - C14700 * C569 + C92358 * C576 - C14702 * C570 +
            C14697 * C577 - C14704 * C571) *
               C92334 +
           (C92357 * C1385 - C14700 * C1376 + C92358 * C1383 - C14702 * C1375 +
            C14697 * C2667 - C14704 * C2666) *
               C19899 +
           (C92357 * C1781 - C14700 * C1773 + C92358 * C1782 - C14702 * C1774 +
            C14697 * C3126 - C14704 * C3125) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C19898 +
           (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
            C14697 * C575 - C14704 * C569) *
               C92334 +
           (C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C19899 +
           (C21703 - C21704 + C21705 - C21706 + C21707 - C21708) * C92252) *
              C92177 * C1372 +
          ((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C19898 +
           (C21704 - C21703 + C21706 - C21705 + C21708 - C21707) * C92334 +
           (C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C19899 +
           (C21709 - C21710 + C21711 - C21712 + C21713 - C21714) * C92252) *
              C92177 * C1373 +
          ((C21464 - C21463 + C21466 - C21465 + C21468 - C21467) * C19898 +
           (C21710 - C21709 + C21712 - C21711 + C21714 - C21713) * C92334 +
           (C92357 * C10873 - C14700 * C10868 + C92358 * C10871 -
            C14702 * C10867 + C14697 * C12748 - C14704 * C12747) *
               C19899 +
           (C92357 * C11501 - C14700 * C11497 + C92358 * C11502 -
            C14702 * C11498 + C14697 * C13420 - C14704 * C13419) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C19898 +
                      (C92177 * C629 - C182 * C567) * C92334 +
                      (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                         C92357 +
                     ((C196 - C197) * C19898 + (C636 - C637) * C92334 +
                      C12880 * C19899 + C13529 * C92252) *
                         C92358 +
                     C20326 * C14697) *
                        C92150 * C790 +
                    (((C182 * C797 - C92177 * C876) * C19898 +
                      (C182 * C1190 - C92177 * C1256) * C92334 +
                      (C13874 - C13875) * C19899 + (C14518 - C14519) * C92252) *
                         C92357 +
                     ((C2046 - C2047) * C19898 + (C2502 - C2503) * C92334 +
                      (C11889 - C11890) * C19899 + (C12526 - C12527) * C92252) *
                         C92358 +
                     ((C2050 - C2051) * C19898 + (C2504 - C2505) * C92334 +
                      (C182 * C3359 - C92177 * C3441) * C19899 +
                      (C182 * C3803 - C92177 * C3877) * C92252) *
                         C14697) *
                        C92150 * C791 +
                    (((C92177 * C880 - C182 * C798) * C19898 +
                      (C92177 * C1260 - C182 * C1194) * C92334 +
                      (C92177 * C5799 - C182 * C5702) * C19899 +
                      (C92177 * C6303 - C182 * C6217) * C92252) *
                         C92357 +
                     ((C92177 * C881 - C182 * C799) * C19898 +
                      (C92177 * C1261 - C182 * C1195) * C92334 +
                      (C92177 * C5800 - C182 * C5701) * C19899 +
                      (C92177 * C6304 - C182 * C6218) * C92252) *
                         C92358 +
                     ((C92177 * C882 - C182 * C800) * C19898 +
                      (C92177 * C1262 - C182 * C1196) * C92334 +
                      (C92177 * C7590 - C182 * C7488) * C19899 +
                      (C92177 * C8233 - C182 * C8133) * C92252) *
                         C14697) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C19898 +
                      (C92177 * C629 - C182 * C567) * C92334 +
                      (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                         C92357 +
                     ((C196 - C197) * C19898 + (C636 - C637) * C92334 +
                      C12880 * C19899 + C13529 * C92252) *
                         C92358 +
                     C20326 * C14697) *
                        C92150 * C92136 * C97 +
                    (((C197 - C196) * C19898 + (C637 - C636) * C92334 +
                      C12882 * C19899 + C13530 * C92252) *
                         C92357 +
                     ((C201 - C200) * C19898 + (C640 - C639) * C92334 +
                      (C2743 - C2744) * C19899 + (C3197 - C3198) * C92252) *
                         C92358 +
                     ((C205 - C204) * C19898 + (C643 - C642) * C92334 +
                      (C2747 - C2748) * C19899 + (C3199 - C3200) * C92252) *
                         C14697) *
                        C92150 * C92136 * C98 +
                    (C20326 * C92357 +
                     (C214 * C19898 + C647 * C92334 + (C2748 - C2747) * C19899 +
                      (C3200 - C3199) * C92252) *
                         C92358 +
                     ((C209 - C208) * C19898 + (C645 - C644) * C92334 +
                      (C92177 * C2736 - C182 * C2666) * C19899 +
                      (C92177 * C3193 - C182 * C3125) * C92252) *
                         C14697) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C19898 +
                      (C92177 * C629 - C182 * C567) * C92334 +
                      (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                         C92357 +
                     ((C196 - C197) * C19898 + (C636 - C637) * C92334 +
                      C12880 * C19899 + C13529 * C92252) *
                         C92358 +
                     C20326 * C14697) *
                        C1372 +
                    (((C11010 - C11009) * C19898 + (C11600 - C11599) * C92334 +
                      (C11014 - C11013) * C19899 + (C11602 - C11601) * C92252) *
                         C92357 +
                     (C12882 * C19898 + C13530 * C92334 + C12884 * C19899 +
                      C13531 * C92252) *
                         C92358 +
                     ((C2743 - C2744) * C19898 + (C3197 - C3198) * C92334 +
                      (C9504 - C9505) * C19899 + (C10007 - C10008) * C92252) *
                         C14697) *
                        C1373 +
                    ((C11027 * C19898 + C11608 * C92334 +
                      (C11020 - C11019) * C19899 + (C11605 - C11604) * C92252) *
                         C92357 +
                     (C11017 * C19898 + C11603 * C92334 +
                      (C11024 - C11023) * C19899 + (C11607 - C11606) * C92252) *
                         C92358 +
                     ((C9505 - C9504) * C19898 + (C10008 - C10007) * C92334 +
                      (C92177 * C12877 - C182 * C12747) * C19899 +
                      (C92177 * C13527 - C182 * C13419) * C92252) *
                         C14697) *
                        C1374) *
                   C92136 * C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92177 * C92357 +
           (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
              C92150 * C790 -
          ((C19899 * C3515 - C20401 * C3359 - C19899 * C3803 + C92252 * C3947 +
            C19898 * C944 - C20400 * C795 - C19898 * C1192 + C92334 * C1315) *
               C92177 * C14697 +
           (C19899 * C3514 - C20401 * C3358 - C19899 * C3802 + C92252 * C3946 +
            C19898 * C943 - C20400 * C796 - C19898 * C1191 + C92334 * C1316) *
               C92177 * C92358 +
           (C19899 * C3513 - C20401 * C3357 - C19899 * C3801 + C92252 * C3945 +
            C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317) *
               C92177 * C92357) *
              C92150 * C791 +
          ((C19898 * C946 - C20400 * C798 - C19898 * C1194 + C92334 * C1318 +
            C19899 * C5885 - C20401 * C5702 - C19899 * C6217 + C92252 * C6384) *
               C92177 * C92357 +
           (C19898 * C947 - C20400 * C799 - C19898 * C1195 + C92334 * C1319 +
            C19899 * C5886 - C20401 * C5701 - C19899 * C6218 + C92252 * C6383) *
               C92177 * C92358 +
           (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
            C19899 * C7702 - C20401 * C7488 - C19899 * C8133 + C92252 * C8338) *
               C92177 * C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92177 * C92357 +
           (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
              C92150 * C92136 * C97 -
          ((C20443 + C20444) * C92177 * C14697 +
           (C20442 + C20441) * C92177 * C92358 +
           (C20440 + C20439) * C92177 * C92357) *
              C92150 * C92136 * C98 +
          (C20446 * C92357 + (C20444 + C20443) * C92177 * C92358 +
           (C19898 * C270 - C20400 * C112 - C19898 * C571 + C92334 * C706 +
            C19899 * C2816 - C20401 * C2666 - C19899 * C3125 + C92252 * C3266) *
               C92177 * C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92177 * C92357 +
           (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
              C1372 -
          ((C19899 * C1529 - C20401 * C1381 - C19899 * C1777 + C92252 * C1901 +
            C19898 * C1525 - C20400 * C1376 - C19898 * C1773 + C92334 * C1896) *
               C92177 * C14697 +
           (C19899 * C1528 - C20401 * C1380 - C19899 * C1776 + C92252 * C1900 +
            C19898 * C1524 - C20400 * C1377 - C19898 * C1772 + C92334 * C1897) *
               C92177 * C92358 +
           (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 + C92252 * C1899 +
            C19898 * C1523 - C20400 * C1378 - C19898 * C1771 + C92334 * C1898) *
               C92177 * C92357) *
              C1373 +
          ((C19898 * C1527 - C20400 * C1379 - C19898 * C1775 + C92334 * C1899 +
            C19899 * C11109 - C20401 * C10868 - C19899 * C11497 +
            C92252 * C11683) *
               C92177 * C92357 +
           (C19898 * C1528 - C20400 * C1380 - C19898 * C1776 + C92334 * C1900 +
            C19899 * C11110 - C20401 * C10867 - C19899 * C11498 +
            C92252 * C11682) *
               C92177 * C92358 +
           (C19898 * C1529 - C20400 * C1381 - C19898 * C1777 + C92334 * C1901 +
            C19899 * C12983 - C20401 * C12747 - C19899 * C13419 +
            C92252 * C13629) *
               C92177 * C14697) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
             C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
             C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
                C92334 +
            (C21223 + C21224 + C21225) * C92252) *
               C92177 * C2664 -
           ((C21226 + C21227 + C21228) * C92252 +
            (C21225 + C21224 + C21223) * C92334) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C22926 + C22927 + C22928) * C92334 +
            (C14700 * C1393 - C14701 * C1380 - C14700 * C1394 + C92357 * C1404 +
             C14702 * C1395 - C14703 * C1381 - C14702 * C1396 + C92358 * C1405 +
             C14704 * C1397 - C14705 * C1382 - C14704 * C1398 +
             C14697 * C1406) *
                C92252) *
               C92177 * C2665 -
           ((C22928 + C22927 + C22926) * C92252 +
            (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
             C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
             C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
                C92334) *
               C92177 * C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C14700 +
             (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
             (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
                C92334 +
            ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
             C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
             C19824 * C14697) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C14700 + (C11012 - C11011) * C92357 +
             C12882 * C14702 + C12883 * C92358 + C23027 * C14704 +
             C23028 * C14697) *
                C92334 +
            ((C11014 - C11013) * C14700 + (C11016 - C11015) * C92357 +
             C12884 * C14702 + C12885 * C92358 + (C9504 - C9505) * C14704 +
             (C9506 - C9507) * C14697) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C14700 + (C199 - C198) * C92357 +
             (C201 - C200) * C14702 + (C203 - C202) * C92358 +
             (C205 - C204) * C14704 + (C207 - C206) * C14697) *
                C92334 +
            (C12882 * C14700 + C12883 * C92357 + C23027 * C14702 +
             C23028 * C92358 + (C2747 - C2748) * C14704 +
             (C2749 - C2750) * C14697) *
                C92252) *
               C2664 +
           ((C12880 * C14700 + C12881 * C92357 + C19823 * C14702 +
             C19824 * C92358 + (C2748 - C2747) * C14704 +
             (C2750 - C2749) * C14697) *
                C92334 +
            (C11017 * C14700 + C11018 * C92357 + (C9505 - C9504) * C14702 +
             (C9507 - C9506) * C92358 +
             (C92177 * C1464 - C182 * C1382) * C14704 +
             (C92177 * C1472 - C182 * C1398) * C14697) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C14700 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92357 +
            (C19901 - C19902 + C19903 - C19904) * C14702 +
            (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
            C19930 * C14697) *
               C92177 * C2664 +
           ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C14700 +
            (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
             C92252 * C1535) *
                C92357 +
            (C23127 - C23128 + C23129 - C23130) * C14702 +
            (C23131 - C23132 + C23133 - C23134) * C92358 +
            (C23135 - C23136 + C23137 - C23138) * C14704 +
            (C23139 - C23140 + C23141 - C23142) * C14697) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C19902 - C19901 + C19904 - C19903) * C14700 +
            (C19906 - C19905 + C19908 - C19907) * C92357 +
            (C19910 - C19909 + C19912 - C19911) * C14702 +
            (C19914 - C19913 + C19916 - C19915) * C92358 +
            (C19917 - C19918 + C19919 - C19920) * C14704 +
            (C19921 - C19922 + C19923 - C19924) * C14697) *
               C92177 * C2664 +
           ((C23128 - C23127 + C23130 - C23129) * C14700 +
            (C23132 - C23131 + C23134 - C23133) * C92357 +
            (C23136 - C23135 + C23138 - C23137) * C14702 +
            (C23140 - C23139 + C23142 - C23141) * C92358 +
            (C92334 * C1526 - C19898 * C1375 + C92252 * C1530 -
             C19899 * C1382) *
                C14704 +
            (C92334 * C1534 - C19898 * C1384 + C92252 * C1538 -
             C19899 * C1398) *
                C14697) *
               C92177 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
              C14697 * C118 - C14704 * C110) *
                 C182 +
             (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
              C14697 * C356 - C14704 * C350) *
                 C92177) *
                C92334 +
            ((C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C182 +
             (C21457 - C21458 + C21459 - C21460 + C21461 - C21462) * C92177) *
                C92252) *
               C2664 +
           (((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C182 +
             (C21458 - C21457 + C21460 - C21459 + C21462 - C21461) * C92177) *
                C92334 +
            ((C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C182 +
             (C21469 - C21470 + C21471 - C21472 + C21473 - C21474) * C92177) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
              C14704 * C111 - C14697 * C120) *
                 C182 +
             (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
              C14704 * C351 - C14697 * C357) *
                 C92177) *
                C92334 +
            ((C23241 - C23242 + C23243 - C23244 + C23245 - C23246) * C182 +
             (C23247 - C23248 + C23249 - C23250 + C23251 - C23252) * C92177) *
                C92252) *
               C2664 +
           (((C23242 - C23241 + C23244 - C23243 + C23246 - C23245) * C182 +
             (C23248 - C23247 + C23250 - C23249 + C23252 - C23251) * C92177) *
                C92334 +
            ((C92357 * C1393 - C14700 * C1380 + C92358 * C1395 -
              C14702 * C1381 + C14697 * C1397 - C14704 * C1382) *
                 C182 +
             (C92357 * C1602 - C14700 * C1594 + C92358 * C1603 -
              C14702 * C1595 + C14697 * C1604 - C14704 * C1596) *
                 C92177) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92357 +
             C442 * C92358 + C443 * C14697) *
                C92334 +
            (C21549 + C21550 + C21551) * C92252) *
               C2664 -
           ((C21552 + C21553 + C21554) * C92252 +
            (C21551 + C21550 + C21549) * C92334) *
               C2665) *
              C92136 * C1971 +
          (((C23351 + C23352 + C23353) * C92334 +
            (C9769 * C92357 + C9770 * C92358 +
             (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                 C14697) *
                C92252) *
               C2665 -
           ((C23353 + C23352 + C23351) * C92252 +
            (C444 * C14697 + C443 * C92358 + C442 * C92357) * C92334) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C182 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C92177) *
                C92357 +
            ((C19901 - C19902 + C19903 - C19904) * C182 +
             (C20153 - C20154 + C20155 - C20156) * C92177) *
                C92358 +
            C20170 * C14697) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C92357 +
            ((C23127 - C23128 + C23129 - C23130) * C182 +
             (C23452 - C23453 + C23454 - C23455) * C92177) *
                C92358 +
            ((C23135 - C23136 + C23137 - C23138) * C182 +
             (C23456 - C23457 + C23458 - C23459) * C92177) *
                C14697) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C182 +
             (C20154 - C20153 + C20156 - C20155) * C92177) *
                C92357 +
            ((C19910 - C19909 + C19912 - C19911) * C182 +
             (C20159 - C20158 + C20161 - C20160) * C92177) *
                C92358 +
            ((C19917 - C19918 + C19919 - C19920) * C182 +
             (C20162 - C20163 + C20164 - C20165) * C92177) *
                C14697) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C182 +
             (C23453 - C23452 + C23455 - C23454) * C92177) *
                C92357 +
            ((C23136 - C23135 + C23138 - C23137) * C182 +
             (C23457 - C23456 + C23459 - C23458) * C92177) *
                C92358 +
            ((C92334 * C1526 - C19898 * C1375 + C92252 * C1530 -
              C19899 * C1382) *
                 C182 +
             (C92334 * C1716 - C19898 * C1592 + C92252 * C1720 -
              C19899 * C1596) *
                 C92177) *
                C14697) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C19898 +
            (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
             C14697 * C575 - C14704 * C569) *
                C92334 +
            (C21451 - C21452 + C21453 - C21454 + C21455 - C21456) * C19899 +
            (C21703 - C21704 + C21705 - C21706 + C21707 - C21708) * C92252) *
               C92177 * C2664 +
           ((C21452 - C21451 + C21454 - C21453 + C21456 - C21455) * C19898 +
            (C21704 - C21703 + C21706 - C21705 + C21708 - C21707) * C92334 +
            (C21463 - C21464 + C21465 - C21466 + C21467 - C21468) * C19899 +
            (C21709 - C21710 + C21711 - C21712 + C21713 - C21714) * C92252) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C19898 +
            (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
             C14704 * C570 - C14697 * C576) *
                C92334 +
            (C23241 - C23242 + C23243 - C23244 + C23245 - C23246) * C19899 +
            (C23558 - C23559 + C23560 - C23561 + C23562 - C23563) * C92252) *
               C92177 * C2664 +
           ((C23242 - C23241 + C23244 - C23243 + C23246 - C23245) * C19898 +
            (C23559 - C23558 + C23561 - C23560 + C23563 - C23562) * C92334 +
            (C92357 * C1393 - C14700 * C1380 + C92358 * C1395 - C14702 * C1381 +
             C14697 * C1397 - C14704 * C1382) *
                C19899 +
            (C92357 * C1784 - C14700 * C1776 + C92358 * C1785 - C14702 * C1777 +
             C14697 * C1786 - C14704 * C1778) *
                C92252) *
               C92177 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C19898 +
             (C92177 * C629 - C182 * C567) * C92334 +
             (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                C92357 +
            ((C196 - C197) * C19898 + (C636 - C637) * C92334 + C12880 * C19899 +
             C13529 * C92252) *
                C92358 +
            C20326 * C14697) *
               C2664 +
           (((C11010 - C11009) * C19898 + (C11600 - C11599) * C92334 +
             (C11014 - C11013) * C19899 + (C11602 - C11601) * C92252) *
                C92357 +
            (C12882 * C19898 + C13530 * C92334 + C12884 * C19899 +
             C13531 * C92252) *
                C92358 +
            (C23027 * C19898 + C23662 * C92334 + (C9504 - C9505) * C19899 +
             (C10007 - C10008) * C92252) *
                C14697) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C19898 + (C637 - C636) * C92334 + C12882 * C19899 +
             C13530 * C92252) *
                C92357 +
            ((C201 - C200) * C19898 + (C640 - C639) * C92334 + C23027 * C19899 +
             C23662 * C92252) *
                C92358 +
            ((C205 - C204) * C19898 + (C643 - C642) * C92334 +
             (C2747 - C2748) * C19899 + (C3199 - C3200) * C92252) *
                C14697) *
               C2664 +
           ((C12880 * C19898 + C13529 * C92334 + C11017 * C19899 +
             C11603 * C92252) *
                C92357 +
            (C19823 * C19898 + C20322 * C92334 + (C9505 - C9504) * C19899 +
             (C10008 - C10007) * C92252) *
                C92358 +
            ((C2748 - C2747) * C19898 + (C3200 - C3199) * C92334 +
             (C92177 * C1464 - C182 * C1382) * C19899 +
             (C92177 * C1844 - C182 * C1778) * C92252) *
                C14697) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19898 * C266 - C20400 * C108 - C19898 * C567 +
                       C92334 * C702 + C19899 * C1523 - C20401 * C1378 -
                       C19899 * C1771 + C92252 * C1898) *
                          C92177 * C92357 +
                      (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
                         C2664 -
                     ((C23785 + C23786) * C92177 * C14697 +
                      (C23787 + C23788) * C92177 * C92358 +
                      (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
                       C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
                       C19898 * C1771 + C92334 * C1898) *
                          C92177 * C92357) *
                         C2665) *
                        C92136 * C1971 +
                    (((C23788 + C23787) * C92177 * C92357 +
                      (C23786 + C23785) * C92177 * C92358 +
                      (C19898 * C1526 - C20400 * C1375 - C19898 * C1774 +
                       C92334 * C1895 + C19899 * C1530 - C20401 * C1382 -
                       C19899 * C1778 + C92252 * C1902) *
                          C92177 * C14697) *
                         C2665 -
                     ((C20443 + C20444) * C92177 * C14697 +
                      (C20442 + C20441) * C92177 * C92358 +
                      (C20440 + C20439) * C92177 * C92357) *
                         C2664) *
                        C92136 * C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92334 +
           (C14700 * C1389 - C14701 * C1378 - C14700 * C1390 + C92357 * C1402 +
            C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
            C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400) *
               C92252) *
              C92177 * C92150 * C92136 * C97 -
          ((C14704 * C1383 - C14705 * C1375 - C14704 * C1384 + C14697 * C1399 +
            C14702 * C1385 - C14703 * C1376 - C14702 * C1386 + C92358 * C1400 +
            C14700 * C1387 - C14701 * C1377 - C14700 * C1388 + C92357 * C1401) *
               C92252 +
           (C14704 * C120 - C14705 * C111 - C14704 * C121 + C14697 * C129 +
            C14702 * C118 - C14703 * C110 - C14702 * C119 + C92358 * C128 +
            C14700 * C116 - C14701 * C109 - C14700 * C117 + C92357 * C127) *
               C92334) *
              C92177 * C92150 * C92136 * C98 +
          ((C14700 * C118 - C14701 * C110 - C14700 * C119 + C92357 * C128 +
            C14702 * C120 - C14703 * C111 - C14702 * C121 + C92358 * C129 +
            C14704 * C122 - C14705 * C112 - C14704 * C123 + C14697 * C130) *
               C92334 +
           (C14700 * C1385 - C14701 * C1376 - C14700 * C1386 + C92357 * C1400 +
            C14702 * C1383 - C14703 * C1375 - C14702 * C1384 + C92358 * C1399 +
            C14704 * C2667 - C14705 * C2666 - C14704 * C2668 + C14697 * C2669) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14700 * C114 - C14701 * C108 - C14700 * C115 + C92357 * C126 +
            C14702 * C116 - C14703 * C109 - C14702 * C117 + C92358 * C127 +
            C14704 * C118 - C14705 * C110 - C14704 * C119 + C14697 * C128) *
               C92334 +
           (C14700 * C1389 - C14701 * C1378 - C14700 * C1390 + C92357 * C1402 +
            C14702 * C1387 - C14703 * C1377 - C14702 * C1388 + C92358 * C1401 +
            C14704 * C1385 - C14705 * C1376 - C14704 * C1386 + C14697 * C1400) *
               C92252) *
              C92177 * C92150 * C790 -
          ((C18868 + C18869 + C18870) * C92252 +
           (C15523 + C15522 + C15521) * C92334) *
              C92177 * C92150 * C791 +
          ((C15526 + C15525 + C15524) * C92334 +
           (C14700 * C5709 - C14701 * C5702 - C14700 * C5710 + C92357 * C5720 +
            C14702 * C5707 - C14703 * C5701 - C14702 * C5708 + C92358 * C5719 +
            C14704 * C7489 - C14705 * C7488 - C14704 * C7490 + C14697 * C7491) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C14700 +
            (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
            (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
               C92334 +
           ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
            C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
            C19824 * C14697) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C14700 + (C199 - C198) * C92357 +
            (C201 - C200) * C14702 + (C203 - C202) * C92358 +
            (C205 - C204) * C14704 + (C207 - C206) * C14697) *
               C92334 +
           (C12882 * C14700 + C12883 * C92357 + (C2743 - C2744) * C14702 +
            (C2745 - C2746) * C92358 + (C2747 - C2748) * C14704 +
            (C2749 - C2750) * C14697) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C212 * C14700 + C213 * C92357 + C214 * C14702 + C215 * C92358 +
            (C209 - C208) * C14704 + (C211 - C210) * C14697) *
               C92334 +
           (C19823 * C14700 + C19824 * C92357 + (C2748 - C2747) * C14702 +
            (C2750 - C2749) * C92358 +
            (C92177 * C2736 - C182 * C2666) * C14704 +
            (C92177 * C2737 - C182 * C2668) * C14697) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C14700 +
            (C92177 * C189 - C182 * C115) * C92357 + (C196 - C197) * C14702 +
            (C198 - C199) * C92358 + C212 * C14704 + C213 * C14697) *
               C92334 +
           ((C11009 - C11010) * C14700 + (C11011 - C11012) * C92357 +
            C12880 * C14702 + C12881 * C92358 + C19823 * C14704 +
            C19824 * C14697) *
               C92252) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C14700 +
            (C182 * C809 - C92177 * C884) * C92357 + (C2046 - C2047) * C14702 +
            (C2048 - C2049) * C92358 + (C2050 - C2051) * C14704 +
            (C2052 - C2053) * C14697) *
               C92334 +
           ((C13874 - C13875) * C14700 + (C13876 - C13877) * C92357 +
            (C11889 - C11890) * C14702 + (C11891 - C11892) * C92358 +
            (C182 * C3359 - C92177 * C3441) * C14704 +
            (C182 * C3366 - C92177 * C3445) * C14697) *
               C92252) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C14700 +
            (C92177 * C888 - C182 * C811) * C92357 +
            (C92177 * C881 - C182 * C799) * C14702 +
            (C92177 * C889 - C182 * C813) * C92358 +
            (C92177 * C882 - C182 * C800) * C14704 +
            (C92177 * C890 - C182 * C815) * C14697) *
               C92334 +
           ((C92177 * C5799 - C182 * C5702) * C14700 +
            (C92177 * C5805 - C182 * C5710) * C92357 +
            (C92177 * C5800 - C182 * C5701) * C14702 +
            (C92177 * C5806 - C182 * C5708) * C92358 +
            (C92177 * C7590 - C182 * C7488) * C14704 +
            (C92177 * C7591 - C182 * C7490) * C14697) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C14700 +
           (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
               C92357 +
           (C19901 - C19902 + C19903 - C19904) * C14702 +
           (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
           C19930 * C14697) *
              C92177 * C92150 * C92136 * C97 +
          ((C19902 - C19901 + C19904 - C19903) * C14700 +
           (C19906 - C19905 + C19908 - C19907) * C92357 +
           (C19910 - C19909 + C19912 - C19911) * C14702 +
           (C19914 - C19913 + C19916 - C19915) * C92358 +
           (C19917 - C19918 + C19919 - C19920) * C14704 +
           (C19921 - C19922 + C19923 - C19924) * C14697) *
              C92177 * C92150 * C92136 * C98 +
          (C19929 * C14700 + C19930 * C92357 +
           (C19918 - C19917 + C19920 - C19919) * C14702 +
           (C19922 - C19921 + C19924 - C19923) * C92358 +
           (C92334 * C270 - C19898 * C112 + C92252 * C2816 - C19899 * C2666) *
               C14704 +
           (C92334 * C276 - C19898 * C123 + C92252 * C2817 - C19899 * C2668) *
               C14697) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C14700 +
           (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
               C92357 +
           (C19901 - C19902 + C19903 - C19904) * C14702 +
           (C19905 - C19906 + C19907 - C19908) * C92358 + C19929 * C14704 +
           C19930 * C14697) *
              C92177 * C92150 * C790 +
          ((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
               C14700 +
           (C19898 * C809 - C92334 * C950 + C19899 * C3362 - C92252 * C3517) *
               C92357 +
           (C19898 * C796 - C92334 * C943 + C19899 * C3358 - C92252 * C3514) *
               C14702 +
           (C19898 * C807 - C92334 * C951 + C19899 * C3364 - C92252 * C3518) *
               C92358 +
           (C19898 * C795 - C92334 * C944 + C19899 * C3359 - C92252 * C3515) *
               C14704 +
           (C19898 * C805 - C92334 * C952 + C19899 * C3366 - C92252 * C3519) *
               C14697) *
              C92177 * C92150 * C791 +
          ((C92334 * C946 - C19898 * C798 + C92252 * C5885 - C19899 * C5702) *
               C14700 +
           (C92334 * C954 - C19898 * C811 + C92252 * C5891 - C19899 * C5710) *
               C92357 +
           (C92334 * C947 - C19898 * C799 + C92252 * C5886 - C19899 * C5701) *
               C14702 +
           (C92334 * C955 - C19898 * C813 + C92252 * C5892 - C19899 * C5708) *
               C92358 +
           (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
               C14704 +
           (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
               C14697) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C182 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92177) *
               C92334 +
           ((C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
             C14697 * C1385 - C14704 * C1376) *
                C182 +
            (C92357 * C1597 - C14700 * C1589 + C92358 * C1598 - C14702 * C1590 +
             C14697 * C1599 - C14704 * C1591) *
                C92177) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
             C14704 * C111 - C14697 * C120) *
                C182 +
            (C14700 * C349 - C92357 * C355 + C14702 * C350 - C92358 * C356 +
             C14704 * C351 - C14697 * C357) *
                C92177) *
               C92334 +
           ((C14700 * C1377 - C92357 * C1387 + C14702 * C1376 - C92358 * C1385 +
             C14704 * C1375 - C14697 * C1383) *
                C182 +
            (C14700 * C1590 - C92357 * C1598 + C14702 * C1591 - C92358 * C1599 +
             C14704 * C1592 - C14697 * C1600) *
                C92177) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
             C14697 * C122 - C14704 * C112) *
                C182 +
            (C92357 * C356 - C14700 * C350 + C92358 * C357 - C14702 * C351 +
             C14697 * C358 - C14704 * C352) *
                C92177) *
               C92334 +
           ((C92357 * C1385 - C14700 * C1376 + C92358 * C1383 - C14702 * C1375 +
             C14697 * C2667 - C14704 * C2666) *
                C182 +
            (C92357 * C1599 - C14700 * C1591 + C92358 * C1600 - C14702 * C1592 +
             C14697 * C2897 - C14704 * C2896) *
                C92177) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
             C14697 * C118 - C14704 * C110) *
                C182 +
            (C92357 * C354 - C14700 * C348 + C92358 * C355 - C14702 * C349 +
             C14697 * C356 - C14704 * C350) *
                C92177) *
               C92334 +
           ((C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
             C14697 * C1385 - C14704 * C1376) *
                C182 +
            (C92357 * C1597 - C14700 * C1589 + C92358 * C1598 - C14702 * C1590 +
             C14697 * C1599 - C14704 * C1591) *
                C92177) *
               C92252) *
              C92150 * C790 +
          (((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C182 +
            (C15756 - C15755 + C15758 - C15757 + C15760 - C15759) * C92177) *
               C92334 +
           ((C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C182 +
            (C19171 - C19172 + C19173 - C19174 + C19175 - C19176) * C92177) *
               C92252) *
              C92150 * C791 +
          (((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C182 +
            (C15768 - C15767 + C15770 - C15769 + C15772 - C15771) * C92177) *
               C92334 +
           ((C92357 * C5709 - C14700 * C5702 + C92358 * C5707 - C14702 * C5701 +
             C14697 * C7489 - C14704 * C7488) *
                C182 +
            (C92357 * C5977 - C14700 * C5971 + C92358 * C5978 - C14702 * C5972 +
             C14697 * C7811 - C14704 * C7810) *
                C92177) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92357 +
            C442 * C92358 + C443 * C14697) *
               C92334 +
           (C11337 * C92357 + C2986 * C92358 + C2985 * C14697) * C92252) *
              C92150 * C92136 * C97 -
          ((C2984 * C14697 + C2985 * C92358 + C2986 * C92357) * C92252 +
           (C444 * C14697 + C443 * C92358 + C442 * C92357) * C92334) *
              C92150 * C92136 * C98 +
          ((C443 * C92357 + C444 * C92358 + C445 * C14697) * C92334 +
           (C2985 * C92357 + C2984 * C92358 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C14697) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92357 +
            C442 * C92358 + C443 * C14697) *
               C92334 +
           (C11337 * C92357 + C2986 * C92358 + C2985 * C14697) * C92252) *
              C92150 * C790 -
          (((C182 * C3441 - C410 * C3359 - C182 * C3589 + C92177 * C3663) *
                C14697 +
            C12221 * C92358 + C14208 * C92357) *
               C92252 +
           (C2292 * C14697 + C2293 * C92358 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92357) *
               C92334) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C92357 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92358 +
            (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                C14697) *
               C92334 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C92357 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92358 +
            (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                C14697) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C182 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92177) *
               C92357 +
           ((C19901 - C19902 + C19903 - C19904) * C182 +
            (C20153 - C20154 + C20155 - C20156) * C92177) *
               C92358 +
           C20170 * C14697) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C182 +
            (C20154 - C20153 + C20156 - C20155) * C92177) *
               C92357 +
           ((C19910 - C19909 + C19912 - C19911) * C182 +
            (C20159 - C20158 + C20161 - C20160) * C92177) *
               C92358 +
           ((C19917 - C19918 + C19919 - C19920) * C182 +
            (C20162 - C20163 + C20164 - C20165) * C92177) *
               C14697) *
              C92150 * C92136 * C98 +
          (C20170 * C92357 +
           ((C19918 - C19917 + C19920 - C19919) * C182 +
            (C20163 - C20162 + C20165 - C20164) * C92177) *
               C92358 +
           ((C92334 * C270 - C19898 * C112 + C92252 * C2816 - C19899 * C2666) *
                C182 +
            (C92334 * C499 - C19898 * C352 + C92252 * C3052 - C19899 * C2896) *
                C92177) *
               C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C182 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92177) *
               C92357 +
           ((C19901 - C19902 + C19903 - C19904) * C182 +
            (C20153 - C20154 + C20155 - C20156) * C92177) *
               C92358 +
           C20170 * C14697) *
              C92150 * C790 +
          (((C19898 * C797 - C92334 * C942 + C19899 * C3357 - C92252 * C3513) *
                C182 +
            (C19898 * C1008 - C92334 * C1132 + C19899 * C3587 -
             C92252 * C3731) *
                C92177) *
               C92357 +
           ((C19898 * C796 - C92334 * C943 + C19899 * C3358 - C92252 * C3514) *
                C182 +
            (C19898 * C1009 - C92334 * C1133 + C19899 * C3588 -
             C92252 * C3732) *
                C92177) *
               C92358 +
           ((C19898 * C795 - C92334 * C944 + C19899 * C3359 - C92252 * C3515) *
                C182 +
            (C19898 * C1010 - C92334 * C1134 + C19899 * C3589 -
             C92252 * C3733) *
                C92177) *
               C14697) *
              C92150 * C791 +
          (((C92334 * C946 - C19898 * C798 + C92252 * C5885 - C19899 * C5702) *
                C182 +
            (C92334 * C1136 - C19898 * C1012 + C92252 * C6137 -
             C19899 * C5971) *
                C92177) *
               C92357 +
           ((C92334 * C947 - C19898 * C799 + C92252 * C5886 - C19899 * C5701) *
                C182 +
            (C92334 * C1137 - C19898 * C1013 + C92252 * C6138 -
             C19899 * C5972) *
                C92177) *
               C92358 +
           ((C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                C182 +
            (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 -
             C19899 * C7810) *
                C92177) *
               C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C19898 +
           (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
            C14697 * C575 - C14704 * C569) *
               C92334 +
           (C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
            C14697 * C1385 - C14704 * C1376) *
               C19899 +
           (C92357 * C1779 - C14700 * C1771 + C92358 * C1780 - C14702 * C1772 +
            C14697 * C1781 - C14704 * C1773) *
               C92252) *
              C92177 * C92150 * C92136 * C97 +
          ((C14700 * C109 - C92357 * C116 + C14702 * C110 - C92358 * C118 +
            C14704 * C111 - C14697 * C120) *
               C19898 +
           (C14700 * C568 - C92357 * C574 + C14702 * C569 - C92358 * C575 +
            C14704 * C570 - C14697 * C576) *
               C92334 +
           (C14700 * C1377 - C92357 * C1387 + C14702 * C1376 - C92358 * C1385 +
            C14704 * C1375 - C14697 * C1383) *
               C19899 +
           (C14700 * C1772 - C92357 * C1780 + C14702 * C1773 - C92358 * C1781 +
            C14704 * C1774 - C14697 * C1782) *
               C92252) *
              C92177 * C92150 * C92136 * C98 +
          ((C92357 * C118 - C14700 * C110 + C92358 * C120 - C14702 * C111 +
            C14697 * C122 - C14704 * C112) *
               C19898 +
           (C92357 * C575 - C14700 * C569 + C92358 * C576 - C14702 * C570 +
            C14697 * C577 - C14704 * C571) *
               C92334 +
           (C92357 * C1385 - C14700 * C1376 + C92358 * C1383 - C14702 * C1375 +
            C14697 * C2667 - C14704 * C2666) *
               C19899 +
           (C92357 * C1781 - C14700 * C1773 + C92358 * C1782 - C14702 * C1774 +
            C14697 * C3126 - C14704 * C3125) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92357 * C114 - C14700 * C108 + C92358 * C116 - C14702 * C109 +
            C14697 * C118 - C14704 * C110) *
               C19898 +
           (C92357 * C573 - C14700 * C567 + C92358 * C574 - C14702 * C568 +
            C14697 * C575 - C14704 * C569) *
               C92334 +
           (C92357 * C1389 - C14700 * C1378 + C92358 * C1387 - C14702 * C1377 +
            C14697 * C1385 - C14704 * C1376) *
               C19899 +
           (C92357 * C1779 - C14700 * C1771 + C92358 * C1780 - C14702 * C1772 +
            C14697 * C1781 - C14704 * C1773) *
               C92252) *
              C92177 * C92150 * C790 +
          ((C15750 - C15749 + C15752 - C15751 + C15754 - C15753) * C19898 +
           (C15996 - C15995 + C15998 - C15997 + C16000 - C15999) * C92334 +
           (C19165 - C19166 + C19167 - C19168 + C19169 - C19170) * C19899 +
           (C19471 - C19472 + C19473 - C19474 + C19475 - C19476) * C92252) *
              C92177 * C92150 * C791 +
          ((C15762 - C15761 + C15764 - C15763 + C15766 - C15765) * C19898 +
           (C16002 - C16001 + C16004 - C16003 + C16006 - C16005) * C92334 +
           (C92357 * C5709 - C14700 * C5702 + C92358 * C5707 - C14702 * C5701 +
            C14697 * C7489 - C14704 * C7488) *
               C19899 +
           (C92357 * C6223 - C14700 * C6217 + C92358 * C6224 - C14702 * C6218 +
            C14697 * C8134 - C14704 * C8133) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C19898 +
                      (C92177 * C629 - C182 * C567) * C92334 +
                      (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                         C92357 +
                     ((C196 - C197) * C19898 + (C636 - C637) * C92334 +
                      C12880 * C19899 + C13529 * C92252) *
                         C92358 +
                     C20326 * C14697) *
                        C92150 * C92136 * C97 +
                    (((C197 - C196) * C19898 + (C637 - C636) * C92334 +
                      C12882 * C19899 + C13530 * C92252) *
                         C92357 +
                     ((C201 - C200) * C19898 + (C640 - C639) * C92334 +
                      (C2743 - C2744) * C19899 + (C3197 - C3198) * C92252) *
                         C92358 +
                     ((C205 - C204) * C19898 + (C643 - C642) * C92334 +
                      (C2747 - C2748) * C19899 + (C3199 - C3200) * C92252) *
                         C14697) *
                        C92150 * C92136 * C98 +
                    (C20326 * C92357 +
                     (C214 * C19898 + C647 * C92334 + (C2748 - C2747) * C19899 +
                      (C3200 - C3199) * C92252) *
                         C92358 +
                     ((C209 - C208) * C19898 + (C645 - C644) * C92334 +
                      (C92177 * C2736 - C182 * C2666) * C19899 +
                      (C92177 * C3193 - C182 * C3125) * C92252) *
                         C14697) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C19898 +
                      (C92177 * C629 - C182 * C567) * C92334 +
                      (C11009 - C11010) * C19899 + (C11599 - C11600) * C92252) *
                         C92357 +
                     ((C196 - C197) * C19898 + (C636 - C637) * C92334 +
                      C12880 * C19899 + C13529 * C92252) *
                         C92358 +
                     C20326 * C14697) *
                        C92150 * C790 +
                    (((C182 * C797 - C92177 * C876) * C19898 +
                      (C182 * C1190 - C92177 * C1256) * C92334 +
                      (C13874 - C13875) * C19899 + (C14518 - C14519) * C92252) *
                         C92357 +
                     ((C2046 - C2047) * C19898 + (C2502 - C2503) * C92334 +
                      (C11889 - C11890) * C19899 + (C12526 - C12527) * C92252) *
                         C92358 +
                     ((C2050 - C2051) * C19898 + (C2504 - C2505) * C92334 +
                      (C182 * C3359 - C92177 * C3441) * C19899 +
                      (C182 * C3803 - C92177 * C3877) * C92252) *
                         C14697) *
                        C92150 * C791 +
                    (((C92177 * C880 - C182 * C798) * C19898 +
                      (C92177 * C1260 - C182 * C1194) * C92334 +
                      (C92177 * C5799 - C182 * C5702) * C19899 +
                      (C92177 * C6303 - C182 * C6217) * C92252) *
                         C92357 +
                     ((C92177 * C881 - C182 * C799) * C19898 +
                      (C92177 * C1261 - C182 * C1195) * C92334 +
                      (C92177 * C5800 - C182 * C5701) * C19899 +
                      (C92177 * C6304 - C182 * C6218) * C92252) *
                         C92358 +
                     ((C92177 * C882 - C182 * C800) * C19898 +
                      (C92177 * C1262 - C182 * C1196) * C92334 +
                      (C92177 * C7590 - C182 * C7488) * C19899 +
                      (C92177 * C8233 - C182 * C8133) * C92252) *
                         C14697) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92177 * C92357 +
           (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
              C92150 * C92136 * C97 -
          ((C20443 + C20444) * C92177 * C14697 +
           (C20442 + C20441) * C92177 * C92358 +
           (C20440 + C20439) * C92177 * C92357) *
              C92150 * C92136 * C98 +
          (C20446 * C92357 + (C20444 + C20443) * C92177 * C92358 +
           (C19898 * C270 - C20400 * C112 - C19898 * C571 + C92334 * C706 +
            C19899 * C2816 - C20401 * C2666 - C19899 * C3125 + C92252 * C3266) *
               C92177 * C14697) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92177 * C92357 +
           (C20439 + C20440) * C92177 * C92358 + C20446 * C14697) *
              C92150 * C790 -
          ((C19899 * C3515 - C20401 * C3359 - C19899 * C3803 + C92252 * C3947 +
            C19898 * C944 - C20400 * C795 - C19898 * C1192 + C92334 * C1315) *
               C92177 * C14697 +
           (C19899 * C3514 - C20401 * C3358 - C19899 * C3802 + C92252 * C3946 +
            C19898 * C943 - C20400 * C796 - C19898 * C1191 + C92334 * C1316) *
               C92177 * C92358 +
           (C19899 * C3513 - C20401 * C3357 - C19899 * C3801 + C92252 * C3945 +
            C19898 * C942 - C20400 * C797 - C19898 * C1190 + C92334 * C1317) *
               C92177 * C92357) *
              C92150 * C791 +
          ((C19898 * C946 - C20400 * C798 - C19898 * C1194 + C92334 * C1318 +
            C19899 * C5885 - C20401 * C5702 - C19899 * C6217 + C92252 * C6384) *
               C92177 * C92357 +
           (C19898 * C947 - C20400 * C799 - C19898 * C1195 + C92334 * C1319 +
            C19899 * C5886 - C20401 * C5701 - C19899 * C6218 + C92252 * C6383) *
               C92177 * C92358 +
           (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
            C19899 * C7702 - C20401 * C7488 - C19899 * C8133 + C92252 * C8338) *
               C92177 * C14697) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C92150 * C1969 -
           (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
            C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
            C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
            C89 * C821) *
               C92188 * C92177 * C92150 * C1970) *
              C1971 +
          ((C100 * C806 - C101 * C796 - C100 * C807 + C89 * C820 + C102 * C804 -
            C103 * C795 - C102 * C805 + C90 * C819 + C104 * C802 - C105 * C794 -
            C104 * C803 + C91 * C818 + C106 * C1974 - C107 * C1973 -
            C106 * C1975 + C92 * C1976) *
               C92188 * C92177 * C92150 * C1970 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C92188 * C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C92150 * C1969 -
           ((C4871 + C4872) * C92188 * C4027 +
            (C4870 + C4869) * C92188 * C4026 +
            (C4868 + C4867) * C92188 * C4025) *
               C92150 * C1970) *
              C1971 +
          (((C6516 + C6517) * C92188 * C4025 +
            (C6518 + C6519) * C92188 * C4026 +
            (C4028 * C4818 - C4029 * C4814 - C4028 * C4819 + C4023 * C4826 +
             C4030 * C6488 - C4031 * C6487 - C4030 * C6489 + C92102 * C6490) *
                C92188 * C4027) *
               C92150 * C1970 -
           ((C6519 + C6518) * C92188 * C4027 +
            (C6517 + C6516) * C92188 * C4026 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92188 * C4025) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C92150 * C1969 +
           ((C182 * C797 - C92177 * C876) * C100 +
            (C182 * C809 - C92177 * C884) * C89 + (C2046 - C2047) * C102 +
            (C2048 - C2049) * C90 + (C2050 - C2051) * C104 +
            (C2052 - C2053) * C91 + (C2054 - C2055) * C106 +
            (C2056 - C2057) * C92) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C92188 * C92150 * C1969 +
           ((C2047 - C2046) * C100 + (C2049 - C2048) * C89 +
            (C2051 - C2050) * C102 + (C2053 - C2052) * C90 +
            (C2055 - C2054) * C104 + (C2057 - C2056) * C91 +
            (C92177 * C2043 - C182 * C1973) * C106 +
            (C92177 * C2044 - C182 * C1975) * C92) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C92150 * C1969 +
           ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C4028 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C4023 +
            (C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C4030 +
            (C6626 - C6627 + C6628 - C6629 + C6630 - C6631) * C92102) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
            (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
            (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
               C92188 * C92150 * C1969 +
           ((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C4028 +
            (C6627 - C6626 + C6629 - C6628 + C6631 - C6630) * C4023 +
            (C4025 * C878 - C4106 * C795 + C4026 * C882 - C4107 * C800 +
             C4027 * C6617 - C4108 * C6487) *
                C4030 +
            (C4025 * C886 - C4106 * C805 + C4026 * C890 - C4107 * C815 +
             C4027 * C6618 - C4108 * C6489) *
                C92102) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C100 +
            (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C92177 * C92150 * C1969 +
           ((C265 * C797 - C92188 * C942) * C100 +
            (C265 * C809 - C92188 * C950) * C89 + (C2126 - C2127) * C102 +
            (C2128 - C2129) * C90 + (C2130 - C2131) * C104 +
            (C2132 - C2133) * C91 + (C2134 - C2135) * C106 +
            (C2136 - C2137) * C92) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C92177 * C92150 * C1969 +
           ((C2127 - C2126) * C100 + (C2129 - C2128) * C89 +
            (C2131 - C2130) * C102 + (C2133 - C2132) * C90 +
            (C2135 - C2134) * C104 + (C2137 - C2136) * C91 +
            (C92188 * C2123 - C265 * C1973) * C106 +
            (C92188 * C2124 - C265 * C1975) * C92) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4028 +
             (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
             (C281 - C282) * C92102) *
                C4025 +
            ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 + C6732 * C4030 +
             C6733 * C92102) *
                C4026 +
            C5065 * C4027) *
               C92150 * C1969 +
           (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 + C6734 * C4030 +
             C6735 * C92102) *
                C4025 +
            ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 + C6736 * C4030 +
             C6737 * C92102) *
                C4026 +
            ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
             (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C4028 + (C282 - C281) * C4023 +
             (C284 - C283) * C4030 + (C286 - C285) * C92102) *
                C4025 +
            (C6734 * C4028 + C6735 * C4023 + (C2130 - C2131) * C4030 +
             (C2132 - C2133) * C92102) *
                C4026 +
            (C6736 * C4028 + C6737 * C4023 + (C4212 - C4213) * C4030 +
             (C4214 - C4215) * C92102) *
                C4027) *
               C92150 * C1969 +
           ((C6732 * C4028 + C6733 * C4023 + (C2131 - C2130) * C4030 +
             (C2133 - C2132) * C92102) *
                C4025 +
            (C5047 * C4028 + C5048 * C4023 + (C4213 - C4212) * C4030 +
             (C4215 - C4214) * C92102) *
                C4026 +
            ((C5054 - C5053) * C4028 + (C5056 - C5055) * C4023 +
             (C92188 * C6729 - C265 * C6487) * C4030 +
             (C92188 * C6730 - C265 * C6489) * C92102) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C92150 * C1969 +
           ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C182 +
            (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
             C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
                C92177) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C92177) *
               C92188 * C92150 * C1969 +
           ((C89 * C806 - C100 * C796 + C90 * C804 - C102 * C795 + C91 * C802 -
             C104 * C794 + C92 * C1974 - C106 * C1973) *
                C182 +
            (C89 * C1017 - C100 * C1009 + C90 * C1018 - C102 * C1010 +
             C91 * C1019 - C104 * C1011 + C92 * C2204 - C106 * C2203) *
                C92177) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C92150 * C1969 +
           ((C5149 - C5148 + C5151 - C5150) * C4106 +
            (C5153 - C5152 + C5155 - C5154) * C4025 +
            (C5157 - C5156 + C5159 - C5158) * C4107 +
            (C5161 - C5160 + C5163 - C5162) * C4026 +
            (C5164 - C5165 + C5166 - C5167) * C4108 +
            (C5168 - C5169 + C5170 - C5171) * C4027) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C4106 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C4025 +
            (C6838 - C6839 + C6840 - C6841) * C4107 +
            (C6842 - C6843 + C6844 - C6845) * C4026 +
            (C6846 - C6847 + C6848 - C6849) * C4108 +
            (C6850 - C6851 + C6852 - C6853) * C4027) *
               C92188 * C92150 * C1969 +
           ((C6839 - C6838 + C6841 - C6840) * C4106 +
            (C6843 - C6842 + C6845 - C6844) * C4025 +
            (C6847 - C6846 + C6849 - C6848) * C4107 +
            (C6851 - C6850 + C6853 - C6852) * C4026 +
            (C4023 * C4818 - C4028 * C4814 + C92102 * C6488 - C4030 * C6487) *
                C4108 +
            (C4023 * C5144 - C4028 * C5140 + C92102 * C6836 - C4030 * C6835) *
                C4027) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C92150 * C1969 -
           (C2291 * C92 + C2292 * C91 + C2293 * C90 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
               C92188 * C92150 * C1970) *
              C1971 +
          ((C2293 * C89 + C2292 * C90 + C2291 * C91 +
            (C182 * C2043 - C410 * C1973 - C182 * C2203 + C92177 * C2271) *
                C92) *
               C92188 * C92150 * C1970 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C92150 * C1969 -
           ((C6971 + C6972 + C6973) * C92102 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C4023) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C6973 + C6972 + C6971) * C4023 +
            (C4106 * C878 - C4363 * C795 - C4106 * C1010 + C4025 * C1075 +
             C4107 * C882 - C4364 * C800 - C4107 * C1014 + C4026 * C1080 +
             C4108 * C6617 - C4365 * C6487 - C4108 * C6835 + C4027 * C6951) *
                C92102) *
               C92188 * C92150 * C1970 -
           ((C4406 + C4407 + C4408) * C92102 +
            (C4405 + C4404 + C4403) * C4023) *
               C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C92150 * C1969 +
           (((C265 * C797 - C92188 * C942) * C182 +
             (C265 * C1008 - C92188 * C1132) * C92177) *
                C89 +
            ((C2126 - C2127) * C182 + (C2361 - C2362) * C92177) * C90 +
            ((C2130 - C2131) * C182 + (C2363 - C2364) * C92177) * C91 +
            ((C2134 - C2135) * C182 + (C2365 - C2366) * C92177) * C92) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
               C92150 * C1969 +
           (((C2127 - C2126) * C182 + (C2362 - C2361) * C92177) * C89 +
            ((C2131 - C2130) * C182 + (C2364 - C2363) * C92177) * C90 +
            ((C2135 - C2134) * C182 + (C2366 - C2365) * C92177) * C91 +
            ((C92188 * C2123 - C265 * C1973) * C182 +
             (C92188 * C2359 - C265 * C2203) * C92177) *
                C92) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C92150 * C1969 +
           (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
             (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
             (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
                C4023 +
            (C6734 * C4106 + C7074 * C4025 + C6736 * C4107 + C7075 * C4026 +
             (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C4106 + (C503 - C502) * C4025 + C6734 * C4107 +
             C7074 * C4026 + C6736 * C4108 + C7075 * C4027) *
                C4023 +
            ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
             (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
             (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
                C92102) *
               C92150 * C1969 +
           ((C6732 * C4106 + C7073 * C4025 + C5047 * C4107 + C5338 * C4026 +
             (C5054 - C5053) * C4108 + (C5342 - C5341) * C4027) *
                C4023 +
            ((C2131 - C2130) * C4106 + (C2364 - C2363) * C4025 +
             (C4213 - C4212) * C4107 + (C4486 - C4485) * C4026 +
             (C92188 * C6729 - C265 * C6487) * C4108 +
             (C92188 * C7071 - C265 * C6835) * C4027) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C92150 * C1969 +
           ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C265 +
            (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
             C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
                C92188) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C92188) *
               C92177 * C92150 * C1969 +
           ((C89 * C806 - C100 * C796 + C90 * C804 - C102 * C795 + C91 * C802 -
             C104 * C794 + C92 * C1974 - C106 * C1973) *
                C265 +
            (C89 * C1199 - C100 * C1191 + C90 * C1200 - C102 * C1192 +
             C91 * C1201 - C104 * C1193 + C92 * C2433 - C106 * C2432) *
                C92188) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C92150 * C1969 +
           (((C5149 - C5148 + C5151 - C5150) * C265 +
             (C5427 - C5426 + C5429 - C5428) * C92188) *
                C4025 +
            ((C5157 - C5156 + C5159 - C5158) * C265 +
             (C5432 - C5431 + C5434 - C5433) * C92188) *
                C4026 +
            ((C5164 - C5165 + C5166 - C5167) * C265 +
             (C5435 - C5436 + C5437 - C5438) * C92188) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C265 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92188) *
                C4025 +
            ((C6838 - C6839 + C6840 - C6841) * C265 +
             (C7176 - C7177 + C7178 - C7179) * C92188) *
                C4026 +
            ((C6846 - C6847 + C6848 - C6849) * C265 +
             (C7180 - C7181 + C7182 - C7183) * C92188) *
                C4027) *
               C92150 * C1969 +
           (((C6839 - C6838 + C6841 - C6840) * C265 +
             (C7177 - C7176 + C7179 - C7178) * C92188) *
                C4025 +
            ((C6847 - C6846 + C6849 - C6848) * C265 +
             (C7181 - C7180 + C7183 - C7182) * C92188) *
                C4026 +
            ((C4023 * C4818 - C4028 * C4814 + C92102 * C6488 - C4030 * C6487) *
                 C265 +
             (C4023 * C5422 - C4028 * C5418 + C92102 * C7174 - C4030 * C7173) *
                 C92188) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C265 +
             (C182 * C1190 - C92177 * C1256) * C92188) *
                C89 +
            ((C2046 - C2047) * C265 + (C2502 - C2503) * C92188) * C90 +
            ((C2050 - C2051) * C265 + (C2504 - C2505) * C92188) * C91 +
            ((C2054 - C2055) * C265 + (C2506 - C2507) * C92188) * C92) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
               C92150 * C1969 +
           (((C2047 - C2046) * C265 + (C2503 - C2502) * C92188) * C89 +
            ((C2051 - C2050) * C265 + (C2505 - C2504) * C92188) * C90 +
            ((C2055 - C2054) * C265 + (C2507 - C2506) * C92188) * C91 +
            ((C92177 * C2043 - C182 * C1973) * C265 +
             (C92177 * C2500 - C182 * C2432) * C92188) *
                C92) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C265 +
             (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
              C4108 * C5417 - C4027 * C5517) *
                 C92188) *
                C4023 +
            ((C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C265 +
             (C7283 - C7284 + C7285 - C7286 + C7287 - C7288) * C92188) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
             (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
                C4023 +
            ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
             (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C265 +
             (C7284 - C7283 + C7286 - C7285 + C7288 - C7287) * C92188) *
                C4023 +
            ((C4025 * C878 - C4106 * C795 + C4026 * C882 - C4107 * C800 +
              C4027 * C6617 - C4108 * C6487) *
                 C265 +
             (C4025 * C1258 - C4106 * C1192 + C4026 * C1262 - C4107 * C1196 +
              C4027 * C7281 - C4108 * C7173) *
                 C92188) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C92150 * C1969 -
           (C2596 * C92 + C2597 * C91 + C2598 * C90 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C92177 * C89) *
               C92150 * C1970) *
              C1971 +
          ((C2598 * C89 + C2597 * C90 + C2596 * C91 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92177 * C92) *
               C92150 * C1970 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
               C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C92150 * C1969 -
           ((C7388 + C7389 + C7390) * C92102 +
            (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
               C92150 * C1970) *
              C1971 +
          (((C7390 + C7389 + C7388) * C4023 +
            (C2594 * C4025 + C4738 * C4026 +
             (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                 C4027) *
                C92102) *
               C92150 * C1970 -
           ((C4740 + C4731 + C4732) * C92102 +
            (C4739 + C4722 + C4721) * C4023) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C2664 -
           (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
            C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
            C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
            C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
               C92188 * C92177 * C2665) *
              C1969 +
          ((C100 * C3361 - C101 * C3357 - C100 * C3362 + C89 * C3369 +
            C102 * C3363 - C103 * C3358 - C102 * C3364 + C90 * C3370 +
            C104 * C3365 - C105 * C3359 - C104 * C3366 + C91 * C3371 +
            C106 * C3367 - C107 * C3360 - C106 * C3368 + C92 * C3372) *
               C92188 * C92177 * C2665 -
           (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
            C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
            C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
            C89 * C821) *
               C92188 * C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C2664 -
           ((C8487 + C8488) * C92188 * C4027 +
            (C8489 + C8490) * C92188 * C4026 +
            (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
             C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
                C92188 * C4025) *
               C2665) *
              C1969 +
          (((C8490 + C8489) * C92188 * C4025 +
            (C8488 + C8487) * C92188 * C4026 +
            (C4028 * C8456 - C4029 * C8454 - C4028 * C8457 + C4023 * C8460 +
             C4030 * C8458 - C4031 * C8455 - C4030 * C8459 + C92102 * C8461) *
                C92188 * C4027) *
               C2665 -
           ((C4871 + C4872) * C92188 * C4027 +
            (C4870 + C4869) * C92188 * C4026 +
            (C4868 + C4867) * C92188 * C4025) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C2664 +
           ((C182 * C1378 - C92177 * C1457) * C100 +
            (C182 * C1390 - C92177 * C1465) * C89 + (C2739 - C2740) * C102 +
            (C2741 - C2742) * C90 + (C2743 - C2744) * C104 +
            (C2745 - C2746) * C91 + (C2747 - C2748) * C106 +
            (C2749 - C2750) * C92) *
               C92188 * C2665) *
              C1969 +
          (((C182 * C797 - C92177 * C876) * C100 +
            (C182 * C809 - C92177 * C884) * C89 + (C2046 - C2047) * C102 +
            (C2048 - C2049) * C90 + (C2050 - C2051) * C104 +
            (C2052 - C2053) * C91 + (C2054 - C2055) * C106 +
            (C2056 - C2057) * C92) *
               C92188 * C2664 +
           ((C92177 * C3439 - C182 * C3357) * C100 +
            (C92177 * C3443 - C182 * C3362) * C89 +
            (C92177 * C3440 - C182 * C3358) * C102 +
            (C92177 * C3444 - C182 * C3364) * C90 +
            (C92177 * C3441 - C182 * C3359) * C104 +
            (C92177 * C3445 - C182 * C3366) * C91 +
            (C92177 * C3442 - C182 * C3360) * C106 +
            (C92177 * C3446 - C182 * C3368) * C92) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C2664 +
           ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C4028 +
            (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
             C4108 * C5710 - C4027 * C5805) *
                C4023 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C4030 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92102) *
               C92188 * C2665) *
              C1969 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C4028 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C4023 +
            (C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C4030 +
            (C6626 - C6627 + C6628 - C6629 + C6630 - C6631) * C92102) *
               C92188 * C2664 +
           ((C4025 * C3439 - C4106 * C3357 + C4026 * C5799 - C4107 * C5702 +
             C4027 * C8588 - C4108 * C8454) *
                C4028 +
            (C4025 * C3443 - C4106 * C3362 + C4026 * C5805 - C4107 * C5710 +
             C4027 * C8590 - C4108 * C8457) *
                C4023 +
            (C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
             C4027 * C8589 - C4108 * C8455) *
                C4030 +
            (C4025 * C3444 - C4106 * C3364 + C4026 * C5806 - C4107 * C5708 +
             C4027 * C8591 - C4108 * C8459) *
                C92102) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92188 * C266 - C265 * C108) * C100 +
                      (C92188 * C272 - C265 * C115) * C89 +
                      (C279 - C280) * C102 + (C281 - C282) * C90 + C295 * C104 +
                      C296 * C91 + C297 * C106 + C298 * C92) *
                         C92177 * C2664 +
                     ((C265 * C1378 - C92188 * C1523) * C100 +
                      (C265 * C1390 - C92188 * C1531) * C89 +
                      (C2819 - C2820) * C102 + (C2821 - C2822) * C90 +
                      (C2823 - C2824) * C104 + (C2825 - C2826) * C91 +
                      (C2827 - C2828) * C106 + (C2829 - C2830) * C92) *
                         C92177 * C2665) *
                        C1969 +
                    (((C265 * C797 - C92188 * C942) * C100 +
                      (C265 * C809 - C92188 * C950) * C89 +
                      (C2126 - C2127) * C102 + (C2128 - C2129) * C90 +
                      (C2130 - C2131) * C104 + (C2132 - C2133) * C91 +
                      (C2134 - C2135) * C106 + (C2136 - C2137) * C92) *
                         C92177 * C2664 +
                     ((C92188 * C3513 - C265 * C3357) * C100 +
                      (C92188 * C3517 - C265 * C3362) * C89 +
                      (C92188 * C3514 - C265 * C3358) * C102 +
                      (C92188 * C3518 - C265 * C3364) * C90 +
                      (C92188 * C3515 - C265 * C3359) * C104 +
                      (C92188 * C3519 - C265 * C3366) * C91 +
                      (C92188 * C3516 - C265 * C3360) * C106 +
                      (C92188 * C3520 - C265 * C3368) * C92) *
                         C92177 * C2665) *
                        C1970) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C92188 * C266 - C265 * C108) * C4028 +
                       (C92188 * C272 - C265 * C115) * C4023 +
                       (C279 - C280) * C4030 + (C281 - C282) * C92102) *
                          C4025 +
                      ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
                       C6732 * C4030 + C6733 * C92102) *
                          C4026 +
                      C5065 * C4027) *
                         C2664 +
                     (((C265 * C1378 - C92188 * C1523) * C4028 +
                       (C265 * C1390 - C92188 * C1531) * C4023 +
                       (C2819 - C2820) * C4030 + (C2821 - C2822) * C92102) *
                          C4025 +
                      ((C8695 - C8696) * C4028 + (C8697 - C8698) * C4023 +
                       (C7705 - C7706) * C4030 + (C7707 - C7708) * C92102) *
                          C4026 +
                      ((C8699 - C8700) * C4028 + (C8701 - C8702) * C4023 +
                       (C7709 - C7710) * C4030 + (C7711 - C7712) * C92102) *
                          C4027) *
                         C2665) *
                        C1969 +
                    ((((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 +
                       C6734 * C4030 + C6735 * C92102) *
                          C4025 +
                      ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 +
                       C6736 * C4030 + C6737 * C92102) *
                          C4026 +
                      ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
                       (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
                          C4027) *
                         C2664 +
                     (((C8696 - C8695) * C4028 + (C8698 - C8697) * C4023 +
                       (C7706 - C7705) * C4030 + (C7708 - C7707) * C92102) *
                          C4025 +
                      ((C8700 - C8699) * C4028 + (C8702 - C8701) * C4023 +
                       (C7710 - C7709) * C4030 + (C7712 - C7711) * C92102) *
                          C4026 +
                      ((C92188 * C8690 - C265 * C8454) * C4028 +
                       (C92188 * C8692 - C265 * C8457) * C4023 +
                       (C92188 * C8691 - C265 * C8455) * C4030 +
                       (C92188 * C8693 - C265 * C8459) * C92102) *
                          C4027) *
                         C2665) *
                        C1970) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C182 +
            (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
             C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
                C92177) *
               C92188 * C2665) *
              C1969 +
          (((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C182 +
            (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
             C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
                C92177) *
               C92188 * C2664 +
           ((C89 * C3361 - C100 * C3357 + C90 * C3363 - C102 * C3358 +
             C91 * C3365 - C104 * C3359 + C92 * C3367 - C106 * C3360) *
                C182 +
            (C89 * C3591 - C100 * C3587 + C90 * C3592 - C102 * C3588 +
             C91 * C3593 - C104 * C3589 + C92 * C3594 - C106 * C3590) *
                C92177) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C2664 +
           ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C4106 +
            (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
                C4025 +
            (C8805 - C8806 + C8807 - C8808) * C4107 +
            (C8809 - C8810 + C8811 - C8812) * C4026 +
            (C8813 - C8814 + C8815 - C8816) * C4108 +
            (C8817 - C8818 + C8819 - C8820) * C4027) *
               C92188 * C2665) *
              C1969 +
          (((C5149 - C5148 + C5151 - C5150) * C4106 +
            (C5153 - C5152 + C5155 - C5154) * C4025 +
            (C5157 - C5156 + C5159 - C5158) * C4107 +
            (C5161 - C5160 + C5163 - C5162) * C4026 +
            (C5164 - C5165 + C5166 - C5167) * C4108 +
            (C5168 - C5169 + C5170 - C5171) * C4027) *
               C92188 * C2664 +
           ((C8806 - C8805 + C8808 - C8807) * C4106 +
            (C8810 - C8809 + C8812 - C8811) * C4025 +
            (C8814 - C8813 + C8816 - C8815) * C4107 +
            (C8818 - C8817 + C8820 - C8819) * C4026 +
            (C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                C4108 +
            (C4023 * C8802 - C4028 * C8800 + C92102 * C8803 - C4030 * C8801) *
                C4027) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C2664 -
           (C2984 * C92 + C2985 * C91 + C2986 * C90 +
            (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C89) *
               C92188 * C2665) *
              C1969 +
          (((C182 * C3439 - C410 * C3357 - C182 * C3587 + C92177 * C3661) *
                C89 +
            (C182 * C3440 - C410 * C3358 - C182 * C3588 + C92177 * C3662) *
                C90 +
            (C182 * C3441 - C410 * C3359 - C182 * C3589 + C92177 * C3663) *
                C91 +
            (C182 * C3442 - C410 * C3360 - C182 * C3590 + C92177 * C3664) *
                C92) *
               C92188 * C2665 -
           (C2291 * C92 + C2292 * C91 + C2293 * C90 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C2664 -
           ((C7930 + C7931 + C7932) * C92102 +
            (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
             C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
             C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
                C4023) *
               C92188 * C2665) *
              C1969 +
          (((C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661 +
             C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
             C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918) *
                C4023 +
            (C4106 * C3440 - C4363 * C3358 - C4106 * C3588 + C4025 * C3662 +
             C4107 * C5800 - C4364 * C5701 - C4107 * C5972 + C4026 * C6057 +
             C4108 * C8589 - C4365 * C8455 - C4108 * C8801 + C4027 * C8919) *
                C92102) *
               C92188 * C2665 -
           ((C6971 + C6972 + C6973) * C92102 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C4023) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C182 +
             (C265 * C1589 - C92188 * C1713) * C92177) *
                C89 +
            ((C2819 - C2820) * C182 + (C3054 - C3055) * C92177) * C90 +
            ((C2823 - C2824) * C182 + (C3056 - C3057) * C92177) * C91 +
            ((C2827 - C2828) * C182 + (C3058 - C3059) * C92177) * C92) *
               C2665) *
              C1969 +
          ((((C265 * C797 - C92188 * C942) * C182 +
             (C265 * C1008 - C92188 * C1132) * C92177) *
                C89 +
            ((C2126 - C2127) * C182 + (C2361 - C2362) * C92177) * C90 +
            ((C2130 - C2131) * C182 + (C2363 - C2364) * C92177) * C91 +
            ((C2134 - C2135) * C182 + (C2365 - C2366) * C92177) * C92) *
               C2664 +
           (((C92188 * C3513 - C265 * C3357) * C182 +
             (C92188 * C3731 - C265 * C3587) * C92177) *
                C89 +
            ((C92188 * C3514 - C265 * C3358) * C182 +
             (C92188 * C3732 - C265 * C3588) * C92177) *
                C90 +
            ((C92188 * C3515 - C265 * C3359) * C182 +
             (C92188 * C3733 - C265 * C3589) * C92177) *
                C91 +
            ((C92188 * C3516 - C265 * C3360) * C182 +
             (C92188 * C3734 - C265 * C3590) * C92177) *
                C92) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4106 +
             (C265 * C1589 - C92188 * C1713) * C4025 + (C8695 - C8696) * C4107 +
             (C9021 - C9022) * C4026 + (C8699 - C8700) * C4108 +
             (C9023 - C9024) * C4027) *
                C4023 +
            ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
             (C7705 - C7706) * C4107 + (C8032 - C8033) * C4026 +
             (C7709 - C7710) * C4108 + (C8034 - C8035) * C4027) *
                C92102) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
             (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
             (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
                C4023 +
            (C6734 * C4106 + C7074 * C4025 + C6736 * C4107 + C7075 * C4026 +
             (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
                C92102) *
               C2664 +
           (((C8696 - C8695) * C4106 + (C9022 - C9021) * C4025 +
             (C8700 - C8699) * C4107 + (C9024 - C9023) * C4026 +
             (C92188 * C8690 - C265 * C8454) * C4108 +
             (C92188 * C9018 - C265 * C8800) * C4027) *
                C4023 +
            ((C7706 - C7705) * C4106 + (C8033 - C8032) * C4025 +
             (C7710 - C7709) * C4107 + (C8035 - C8034) * C4026 +
             (C92188 * C8691 - C265 * C8455) * C4108 +
             (C92188 * C9019 - C265 * C8801) * C4027) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C265 +
            (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
             C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
                C92188) *
               C92177 * C2665) *
              C1969 +
          (((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
             C91 * C804 + C106 * C794 - C92 * C802) *
                C265 +
            (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
             C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
                C92188) *
               C92177 * C2664 +
           ((C89 * C3361 - C100 * C3357 + C90 * C3363 - C102 * C3358 +
             C91 * C3365 - C104 * C3359 + C92 * C3367 - C106 * C3360) *
                C265 +
            (C89 * C3805 - C100 * C3801 + C90 * C3806 - C102 * C3802 +
             C91 * C3807 - C104 * C3803 + C92 * C3808 - C106 * C3804) *
                C92188) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C2664 +
           (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                 C265 +
             (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                 C92188) *
                C4025 +
            ((C8805 - C8806 + C8807 - C8808) * C265 +
             (C9127 - C9128 + C9129 - C9130) * C92188) *
                C4026 +
            ((C8813 - C8814 + C8815 - C8816) * C265 +
             (C9131 - C9132 + C9133 - C9134) * C92188) *
                C4027) *
               C2665) *
              C1969 +
          ((((C5149 - C5148 + C5151 - C5150) * C265 +
             (C5427 - C5426 + C5429 - C5428) * C92188) *
                C4025 +
            ((C5157 - C5156 + C5159 - C5158) * C265 +
             (C5432 - C5431 + C5434 - C5433) * C92188) *
                C4026 +
            ((C5164 - C5165 + C5166 - C5167) * C265 +
             (C5435 - C5436 + C5437 - C5438) * C92188) *
                C4027) *
               C2664 +
           (((C8806 - C8805 + C8808 - C8807) * C265 +
             (C9128 - C9127 + C9130 - C9129) * C92188) *
                C4025 +
            ((C8814 - C8813 + C8816 - C8815) * C265 +
             (C9132 - C9131 + C9134 - C9133) * C92188) *
                C4026 +
            ((C4023 * C8456 - C4028 * C8454 + C92102 * C8458 - C4030 * C8455) *
                 C265 +
             (C4023 * C9124 - C4028 * C9122 + C92102 * C9125 - C4030 * C9123) *
                 C92188) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C2664 +
           (((C182 * C1378 - C92177 * C1457) * C265 +
             (C182 * C1771 - C92177 * C1837) * C92188) *
                C89 +
            ((C2739 - C2740) * C265 + (C3195 - C3196) * C92188) * C90 +
            ((C2743 - C2744) * C265 + (C3197 - C3198) * C92188) * C91 +
            ((C2747 - C2748) * C265 + (C3199 - C3200) * C92188) * C92) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C265 +
             (C182 * C1190 - C92177 * C1256) * C92188) *
                C89 +
            ((C2046 - C2047) * C265 + (C2502 - C2503) * C92188) * C90 +
            ((C2050 - C2051) * C265 + (C2504 - C2505) * C92188) * C91 +
            ((C2054 - C2055) * C265 + (C2506 - C2507) * C92188) * C92) *
               C2664 +
           (((C92177 * C3439 - C182 * C3357) * C265 +
             (C92177 * C3875 - C182 * C3801) * C92188) *
                C89 +
            ((C92177 * C3440 - C182 * C3358) * C265 +
             (C92177 * C3876 - C182 * C3802) * C92188) *
                C90 +
            ((C92177 * C3441 - C182 * C3359) * C265 +
             (C92177 * C3877 - C182 * C3803) * C92188) *
                C91 +
            ((C92177 * C3442 - C182 * C3360) * C265 +
             (C92177 * C3878 - C182 * C3804) * C92188) *
                C92) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C2664 +
           (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
              C4108 * C5702 - C4027 * C5799) *
                 C265 +
             (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
              C4108 * C6217 - C4027 * C6303) *
                 C92188) *
                C4023 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C265 +
             (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92188) *
                C92102) *
               C2665) *
              C1969 +
          ((((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C265 +
             (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
              C4108 * C5417 - C4027 * C5517) *
                 C92188) *
                C4023 +
            ((C6620 - C6621 + C6622 - C6623 + C6624 - C6625) * C265 +
             (C7283 - C7284 + C7285 - C7286 + C7287 - C7288) * C92188) *
                C92102) *
               C2664 +
           (((C4025 * C3439 - C4106 * C3357 + C4026 * C5799 - C4107 * C5702 +
              C4027 * C8588 - C4108 * C8454) *
                 C265 +
             (C4025 * C3875 - C4106 * C3801 + C4026 * C6303 - C4107 * C6217 +
              C4027 * C9232 - C4108 * C9122) *
                 C92188) *
                C4023 +
            ((C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
              C4027 * C8589 - C4108 * C8455) *
                 C265 +
             (C4025 * C3876 - C4106 * C3802 + C4026 * C6304 - C4107 * C6218 +
              C4027 * C9233 - C4108 * C9123) *
                 C92188) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C2664 -
           (C3289 * C92 + C3290 * C91 + C3291 * C90 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92177 * C89) *
               C2665) *
              C1969 +
          (((C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                C92177 * C89 +
            (C265 * C3514 - C701 * C3358 - C265 * C3802 + C92188 * C3946) *
                C92177 * C90 +
            (C265 * C3515 - C701 * C3359 - C265 * C3803 + C92188 * C3947) *
                C92177 * C91 +
            (C265 * C3516 - C701 * C3360 - C265 * C3804 + C92188 * C3948) *
                C92177 * C92) *
               C2665 -
           (C2596 * C92 + C2597 * C91 + C2598 * C90 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C92177 * C89) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C2664 -
           ((C8355 + C8356 + C8348) * C92102 +
            (C9347 * C4027 + C9348 * C4026 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C4025) *
                C4023) *
               C2665) *
              C1969 +
          (((C9348 * C4025 + C9347 * C4026 +
             (C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
                 C4027) *
                C4023 +
            (C8354 * C4025 + C8353 * C4026 +
             (C265 * C8691 - C701 * C8455 - C265 * C9123 + C92188 * C9333) *
                 C4027) *
                C92102) *
               C2665 -
           ((C7388 + C7389 + C7390) * C92102 +
            (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C790 -
          (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
           C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
           C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
           C89 * C821) *
              C92188 * C92177 * C92150 * C791 +
          (C100 * C810 - C101 * C798 - C100 * C811 + C89 * C822 + C102 * C812 -
           C103 * C799 - C102 * C813 + C90 * C823 + C104 * C814 - C105 * C800 -
           C104 * C815 + C91 * C824 + C106 * C816 - C107 * C801 - C106 * C817 +
           C92 * C825) *
              C92188 * C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C92136 * C97 -
          (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
           C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
           C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
           C89 * C127) *
              C92188 * C92177 * C92150 * C92136 * C98 +
          (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 + C102 * C120 -
           C103 * C111 - C102 * C121 + C90 * C129 + C104 * C122 - C105 * C112 -
           C104 * C123 + C91 * C130 + C106 * C124 - C107 * C113 - C106 * C125 +
           C92 * C131) *
              C92188 * C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C1372 -
          (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
           C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
           C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
           C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
              C92188 * C92177 * C1373 +
          (C100 * C1391 - C101 * C1379 - C100 * C1392 + C89 * C1403 +
           C102 * C1393 - C103 * C1380 - C102 * C1394 + C90 * C1404 +
           C104 * C1395 - C105 * C1381 - C104 * C1396 + C91 * C1405 +
           C106 * C1397 - C107 * C1382 - C106 * C1398 + C92 * C1406) *
              C92188 * C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4028 * C808 - C4029 * C797 - C4028 * C809 + C4023 * C821 +
            C4030 * C806 - C4031 * C796 - C4030 * C807 + C92102 * C820) *
               C92188 * C4026 +
           (C4028 * C810 - C4029 * C798 - C4028 * C811 + C4023 * C822 +
            C4030 * C812 - C4031 * C799 - C4030 * C813 + C92102 * C823) *
               C92188 * C4027) *
              C92150 * C92136 * C97 -
          ((C4030 * C814 - C4031 * C800 - C4030 * C815 + C92102 * C824 +
            C4028 * C812 - C4029 * C799 - C4028 * C813 + C4023 * C823) *
               C92188 * C4027 +
           (C4030 * C804 - C4031 * C795 - C4030 * C805 + C92102 * C819 +
            C4028 * C806 - C4029 * C796 - C4028 * C807 + C4023 * C820) *
               C92188 * C4026 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C92188 * C4025) *
              C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C92188 * C4025 +
           (C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
            C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
               C92188 * C4026 +
           (C4028 * C814 - C4029 * C800 - C4028 * C815 + C4023 * C824 +
            C4030 * C816 - C4031 * C801 - C4030 * C817 + C92102 * C825) *
               C92188 * C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C92150 * C790 -
          ((C4871 + C4872) * C92188 * C4027 + (C4870 + C4869) * C92188 * C4026 +
           (C4868 + C4867) * C92188 * C4025) *
              C92150 * C791 +
          (C4874 * C4025 + (C4872 + C4871) * C92188 * C4026 +
           (C4028 * C4822 - C4029 * C4816 - C4028 * C4823 + C4023 * C4828 +
            C4030 * C4824 - C4031 * C4817 - C4030 * C4825 + C92102 * C4829) *
               C92188 * C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C1372 -
          ((C4030 * C5707 - C4031 * C5701 - C4030 * C5708 + C92102 * C5719 +
            C4028 * C5709 - C4029 * C5702 - C4028 * C5710 + C4023 * C5720) *
               C92188 * C4027 +
           (C4030 * C3363 - C4031 * C3358 - C4030 * C3364 + C92102 * C3370 +
            C4028 * C3361 - C4029 * C3357 - C4028 * C3362 + C4023 * C3369) *
               C92188 * C4026 +
           (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
            C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
               C92188 * C4025) *
              C1373 +
          ((C4028 * C1391 - C4029 * C1379 - C4028 * C1392 + C4023 * C1403 +
            C4030 * C1393 - C4031 * C1380 - C4030 * C1394 + C92102 * C1404) *
               C92188 * C4025 +
           (C4028 * C5711 - C4029 * C5703 - C4028 * C5712 + C4023 * C5721 +
            C4030 * C5713 - C4031 * C5704 - C4030 * C5714 + C92102 * C5722) *
               C92188 * C4026 +
           (C4028 * C5715 - C4029 * C5705 - C4028 * C5716 + C4023 * C5723 +
            C4030 * C5717 - C4031 * C5706 - C4030 * C5718 + C92102 * C5724) *
               C92188 * C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C790 +
          ((C182 * C797 - C92177 * C876) * C100 +
           (C182 * C809 - C92177 * C884) * C89 +
           (C182 * C796 - C92177 * C877) * C102 +
           (C182 * C807 - C92177 * C885) * C90 +
           (C182 * C795 - C92177 * C878) * C104 +
           (C182 * C805 - C92177 * C886) * C91 +
           (C182 * C794 - C92177 * C879) * C106 +
           (C182 * C803 - C92177 * C887) * C92) *
              C92188 * C92150 * C791 +
          ((C92177 * C880 - C182 * C798) * C100 +
           (C92177 * C888 - C182 * C811) * C89 +
           (C92177 * C881 - C182 * C799) * C102 +
           (C92177 * C889 - C182 * C813) * C90 +
           (C92177 * C882 - C182 * C800) * C104 +
           (C92177 * C890 - C182 * C815) * C91 +
           (C92177 * C883 - C182 * C801) * C106 +
           (C92177 * C891 - C182 * C817) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C92136 * C97 +
          ((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
           (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
           (C208 - C209) * C106 + (C210 - C211) * C92) *
              C92188 * C92150 * C92136 * C98 +
          (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
           (C209 - C208) * C104 + (C211 - C210) * C91 +
           (C92177 * C188 - C182 * C113) * C106 +
           (C92177 * C194 - C182 * C125) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C1372 +
          ((C182 * C1378 - C92177 * C1457) * C100 +
           (C182 * C1390 - C92177 * C1465) * C89 +
           (C182 * C1377 - C92177 * C1458) * C102 +
           (C182 * C1388 - C92177 * C1466) * C90 +
           (C182 * C1376 - C92177 * C1459) * C104 +
           (C182 * C1386 - C92177 * C1467) * C91 +
           (C182 * C1375 - C92177 * C1460) * C106 +
           (C182 * C1384 - C92177 * C1468) * C92) *
              C92188 * C1373 +
          ((C92177 * C1461 - C182 * C1379) * C100 +
           (C92177 * C1469 - C182 * C1392) * C89 +
           (C92177 * C1462 - C182 * C1380) * C102 +
           (C92177 * C1470 - C182 * C1394) * C90 +
           (C92177 * C1463 - C182 * C1381) * C104 +
           (C92177 * C1471 - C182 * C1396) * C91 +
           (C92177 * C1464 - C182 * C1382) * C106 +
           (C92177 * C1472 - C182 * C1398) * C92) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
           (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
           (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
           (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C4028 +
           (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C4023 +
           (C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
            C4027 * C883 - C4108 * C801) *
               C4030 +
           (C4025 * C192 - C4106 * C121 + C4026 * C887 - C4107 * C803 +
            C4027 * C891 - C4108 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C4028 +
           (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
            C4108 * C4821 - C4027 * C4952) *
               C4023 +
           (C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
            C4108 * C4814 - C4027 * C4949) *
               C4030 +
           (C4106 * C807 - C4025 * C885 + C4107 * C813 - C4026 * C889 +
            C4108 * C4819 - C4027 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C4028 +
           (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
            C4027 * C4954 - C4108 * C4823) *
               C4023 +
           (C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
            C4027 * C4951 - C4108 * C4817) *
               C4030 +
           (C4025 * C889 - C4106 * C813 + C4026 * C4953 - C4107 * C4819 +
            C4027 * C4955 - C4108 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C1372 +
          ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
            C4108 * C5702 - C4027 * C5799) *
               C4028 +
           (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
            C4108 * C5710 - C4027 * C5805) *
               C4023 +
           (C4106 * C1377 - C4025 * C1458 + C4107 * C3358 - C4026 * C3440 +
            C4108 * C5701 - C4027 * C5800) *
               C4030 +
           (C4106 * C1388 - C4025 * C1466 + C4107 * C3364 - C4026 * C3444 +
            C4108 * C5708 - C4027 * C5806) *
               C92102) *
              C92188 * C1373 +
          ((C4025 * C1461 - C4106 * C1379 + C4026 * C5801 - C4107 * C5703 +
            C4027 * C5802 - C4108 * C5705) *
               C4028 +
           (C4025 * C1469 - C4106 * C1392 + C4026 * C5807 - C4107 * C5712 +
            C4027 * C5808 - C4108 * C5716) *
               C4023 +
           (C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
            C4027 * C5804 - C4108 * C5706) *
               C4030 +
           (C4025 * C1470 - C4106 * C1394 + C4026 * C5809 - C4107 * C5714 +
            C4027 * C5810 - C4108 * C5718) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C790 +
          ((C265 * C797 - C92188 * C942) * C100 +
           (C265 * C809 - C92188 * C950) * C89 +
           (C265 * C796 - C92188 * C943) * C102 +
           (C265 * C807 - C92188 * C951) * C90 +
           (C265 * C795 - C92188 * C944) * C104 +
           (C265 * C805 - C92188 * C952) * C91 +
           (C265 * C794 - C92188 * C945) * C106 +
           (C265 * C803 - C92188 * C953) * C92) *
              C92177 * C92150 * C791 +
          ((C92188 * C946 - C265 * C798) * C100 +
           (C92188 * C954 - C265 * C811) * C89 +
           (C92188 * C947 - C265 * C799) * C102 +
           (C92188 * C955 - C265 * C813) * C90 +
           (C92188 * C948 - C265 * C800) * C104 +
           (C92188 * C956 - C265 * C815) * C91 +
           (C92188 * C949 - C265 * C801) * C106 +
           (C92188 * C957 - C265 * C817) * C92) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C92136 * C97 +
          ((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
           (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
           (C291 - C292) * C106 + (C293 - C294) * C92) *
              C92177 * C92150 * C92136 * C98 +
          (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
           (C292 - C291) * C104 + (C294 - C293) * C91 +
           (C92188 * C271 - C265 * C113) * C106 +
           (C92188 * C277 - C265 * C125) * C92) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C1372 +
          ((C265 * C1378 - C92188 * C1523) * C100 +
           (C265 * C1390 - C92188 * C1531) * C89 +
           (C265 * C1377 - C92188 * C1524) * C102 +
           (C265 * C1388 - C92188 * C1532) * C90 +
           (C265 * C1376 - C92188 * C1525) * C104 +
           (C265 * C1386 - C92188 * C1533) * C91 +
           (C265 * C1375 - C92188 * C1526) * C106 +
           (C265 * C1384 - C92188 * C1534) * C92) *
              C92177 * C1373 +
          ((C92188 * C1527 - C265 * C1379) * C100 +
           (C92188 * C1535 - C265 * C1392) * C89 +
           (C92188 * C1528 - C265 * C1380) * C102 +
           (C92188 * C1536 - C265 * C1394) * C90 +
           (C92188 * C1529 - C265 * C1381) * C104 +
           (C92188 * C1537 - C265 * C1396) * C91 +
           (C92188 * C1530 - C265 * C1382) * C106 +
           (C92188 * C1538 - C265 * C1398) * C92) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C92188 * C942 - C265 * C797) * C4028 +
            (C92188 * C950 - C265 * C809) * C4023 + (C2127 - C2126) * C4030 +
            (C2129 - C2128) * C92102) *
               C4026 +
           ((C92188 * C946 - C265 * C798) * C4028 +
            (C92188 * C954 - C265 * C811) * C4023 + (C4208 - C4209) * C4030 +
            (C4210 - C4211) * C92102) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4028 + (C282 - C281) * C4023 +
            (C284 - C283) * C4030 + (C286 - C285) * C92102) *
               C4025 +
           ((C2126 - C2127) * C4028 + (C2128 - C2129) * C4023 +
            (C2130 - C2131) * C4030 + (C2132 - C2133) * C92102) *
               C4026 +
           ((C4209 - C4208) * C4028 + (C4211 - C4210) * C4023 +
            (C4212 - C4213) * C4030 + (C4214 - C4215) * C92102) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C295 * C4028 + C296 * C4023 + C297 * C4030 + C298 * C92102) *
               C4025 +
           ((C2131 - C2130) * C4028 + (C2133 - C2132) * C4023 +
            (C2135 - C2134) * C4030 + (C2137 - C2136) * C92102) *
               C4026 +
           ((C4213 - C4212) * C4028 + (C4215 - C4214) * C4023 +
            (C92188 * C949 - C265 * C801) * C4030 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C92150 * C790 +
          (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 +
            (C2126 - C2127) * C4030 + (C2128 - C2129) * C92102) *
               C4025 +
           ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 +
            (C4209 - C4208) * C4030 + (C4211 - C4210) * C92102) *
               C4026 +
           ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
            (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
               C4027) *
              C92150 * C791 +
          (C5065 * C4025 +
           ((C5050 - C5049) * C4028 + (C5052 - C5051) * C4023 +
            (C5054 - C5053) * C4030 + (C5056 - C5055) * C92102) *
               C4026 +
           ((C92188 * C5032 - C265 * C4816) * C4028 +
            (C92188 * C5036 - C265 * C4823) * C4023 +
            (C92188 * C5033 - C265 * C4817) * C4030 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C4028 +
            (C265 * C1390 - C92188 * C1531) * C4023 + (C2819 - C2820) * C4030 +
            (C2821 - C2822) * C92102) *
               C4025 +
           ((C265 * C3357 - C92188 * C3513) * C4028 +
            (C265 * C3362 - C92188 * C3517) * C4023 +
            (C265 * C3358 - C92188 * C3514) * C4030 +
            (C265 * C3364 - C92188 * C3518) * C92102) *
               C4026 +
           ((C265 * C5702 - C92188 * C5885) * C4028 +
            (C265 * C5710 - C92188 * C5891) * C4023 +
            (C265 * C5701 - C92188 * C5886) * C4030 +
            (C265 * C5708 - C92188 * C5892) * C92102) *
               C4027) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C4028 +
            (C92188 * C1535 - C265 * C1392) * C4023 +
            (C92188 * C1528 - C265 * C1380) * C4030 +
            (C92188 * C1536 - C265 * C1394) * C92102) *
               C4025 +
           ((C92188 * C5887 - C265 * C5703) * C4028 +
            (C92188 * C5893 - C265 * C5712) * C4023 +
            (C92188 * C5888 - C265 * C5704) * C4030 +
            (C92188 * C5894 - C265 * C5714) * C92102) *
               C4026 +
           ((C92188 * C5889 - C265 * C5705) * C4028 +
            (C92188 * C5895 - C265 * C5716) * C4023 +
            (C92188 * C5890 - C265 * C5706) * C4030 +
            (C92188 * C5896 - C265 * C5718) * C92102) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C182 +
           (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
            C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
               C92177) *
              C92188 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C182 +
           (C89 * C1020 - C100 * C1012 + C90 * C1021 - C102 * C1013 +
            C91 * C1022 - C104 * C1014 + C92 * C1023 - C106 * C1015) *
               C92177) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C182 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357 + C106 * C352 - C92 * C358) *
               C92177) *
              C92188 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C182 +
           (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 + C91 * C358 -
            C104 * C352 + C92 * C359 - C106 * C353) *
               C92177) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C1372 +
          ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
            C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
               C182 +
           (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
            C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
               C92177) *
              C92188 * C1373 +
          ((C89 * C1391 - C100 * C1379 + C90 * C1393 - C102 * C1380 +
            C91 * C1395 - C104 * C1381 + C92 * C1397 - C106 * C1382) *
               C182 +
           (C89 * C1601 - C100 * C1593 + C90 * C1602 - C102 * C1594 +
            C91 * C1603 - C104 * C1595 + C92 * C1604 - C106 * C1596) *
               C92177) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
               C4107 +
           (C4023 * C1016 - C4028 * C1008 + C92102 * C1017 - C4030 * C1009) *
               C4026 +
           (C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
               C4108 +
           (C4023 * C1020 - C4028 * C1012 + C92102 * C1021 - C4030 * C1013) *
               C4027) *
              C92188 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C4106 +
           (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
               C4025 +
           (C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
               C4107 +
           (C4028 * C1009 - C4023 * C1017 + C4030 * C1010 - C92102 * C1018) *
               C4026 +
           (C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
               C4108 +
           (C4028 * C1013 - C4023 * C1021 + C4030 * C1014 - C92102 * C1022) *
               C4027) *
              C92188 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C4106 +
           (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
               C4025 +
           (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
               C4107 +
           (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
               C4026 +
           (C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
               C4108 +
           (C4023 * C1022 - C4028 * C1014 + C92102 * C1023 - C4030 * C1015) *
               C4027) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C4106 +
           (C5153 - C5152 + C5155 - C5154) * C4025 +
           (C5157 - C5156 + C5159 - C5158) * C4107 +
           (C5161 - C5160 + C5163 - C5162) * C4026 +
           (C5164 - C5165 + C5166 - C5167) * C4108 +
           (C5168 - C5169 + C5170 - C5171) * C4027) *
              C92188 * C92150 * C791 +
          (C5176 * C4106 + C5177 * C4025 +
           (C5165 - C5164 + C5167 - C5166) * C4107 +
           (C5169 - C5168 + C5171 - C5170) * C4026 +
           (C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
               C4108 +
           (C4023 * C5145 - C4028 * C5141 + C92102 * C5146 - C4030 * C5142) *
               C4027) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C1372 +
          ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
               C4106 +
           (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
               C4025 +
           (C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
               C4107 +
           (C4028 * C3587 - C4023 * C3591 + C4030 * C3588 - C92102 * C3592) *
               C4026 +
           (C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
               C4108 +
           (C4028 * C5971 - C4023 * C5977 + C4030 * C5972 - C92102 * C5978) *
               C4027) *
              C92188 * C1373 +
          ((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
               C4106 +
           (C4023 * C1601 - C4028 * C1593 + C92102 * C1602 - C4030 * C1594) *
               C4025 +
           (C4023 * C5711 - C4028 * C5703 + C92102 * C5713 - C4030 * C5704) *
               C4107 +
           (C4023 * C5979 - C4028 * C5973 + C92102 * C5980 - C4030 * C5974) *
               C4026 +
           (C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
               C4108 +
           (C4023 * C5981 - C4028 * C5975 + C92102 * C5982 - C4030 * C5976) *
               C4027) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C790 -
          ((C182 * C879 - C410 * C794 - C182 * C1011 + C92177 * C1074) * C92 +
           (C182 * C878 - C410 * C795 - C182 * C1010 + C92177 * C1075) * C91 +
           (C182 * C877 - C410 * C796 - C182 * C1009 + C92177 * C1076) * C90 +
           (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
              C92188 * C92150 * C791 +
          ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) * C89 +
           (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) * C90 +
           (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) * C91 +
           (C182 * C883 - C410 * C801 - C182 * C1015 + C92177 * C1081) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C92136 * C97 -
          (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
              C92150 * C92136 * C98 +
          (C443 * C89 + C444 * C90 + C445 * C91 +
           (C182 * C188 - C410 * C113 - C182 * C353 + C92177 * C416) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C1372 -
          ((C182 * C1460 - C410 * C1375 - C182 * C1592 + C92177 * C1655) * C92 +
           (C182 * C1459 - C410 * C1376 - C182 * C1591 + C92177 * C1656) * C91 +
           (C182 * C1458 - C410 * C1377 - C182 * C1590 + C92177 * C1657) * C90 +
           (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
               C89) *
              C92188 * C1373 +
          ((C182 * C1461 - C410 * C1379 - C182 * C1593 + C92177 * C1659) * C89 +
           (C182 * C1462 - C410 * C1380 - C182 * C1594 + C92177 * C1660) * C90 +
           (C182 * C1463 - C410 * C1381 - C182 * C1595 + C92177 * C1661) * C91 +
           (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
               C92) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C4406 + C4407 + C4408) * C92102 + (C4405 + C4404 + C4403) * C4023) *
              C92188 * C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C4023 +
           (C4106 * C186 - C4363 * C111 - C4106 * C351 + C4025 * C414 +
            C4107 * C879 - C4364 * C794 - C4107 * C1011 + C4026 * C1074 +
            C4108 * C883 - C4365 * C801 - C4108 * C1015 + C4027 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C790 -
          ((C4108 * C4949 - C4365 * C4814 - C4108 * C5140 + C4027 * C5251 +
            C4107 * C881 - C4364 * C799 - C4107 * C1013 + C4026 * C1079 +
            C4106 * C877 - C4363 * C796 - C4106 * C1009 + C4025 * C1076) *
               C92102 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C4023) *
              C92188 * C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C4023 +
           (C4106 * C881 - C4363 * C799 - C4106 * C1013 + C4025 * C1079 +
            C4107 * C4949 - C4364 * C4814 - C4107 * C5140 + C4026 * C5251 +
            C4108 * C4951 - C4365 * C4817 - C4108 * C5142 + C4027 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C1372 -
          ((C4108 * C5800 - C4365 * C5701 - C4108 * C5972 + C4027 * C6057 +
            C4107 * C3440 - C4364 * C3358 - C4107 * C3588 + C4026 * C3662 +
            C4106 * C1458 - C4363 * C1377 - C4106 * C1590 + C4025 * C1657) *
               C92102 +
           (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
               C4023) *
              C92188 * C1373 +
          ((C4106 * C1461 - C4363 * C1379 - C4106 * C1593 + C4025 * C1659 +
            C4107 * C5801 - C4364 * C5703 - C4107 * C5973 + C4026 * C6059 +
            C4108 * C5802 - C4365 * C5705 - C4108 * C5975 + C4027 * C6060) *
               C4023 +
           (C4106 * C1462 - C4363 * C1380 - C4106 * C1594 + C4025 * C1660 +
            C4107 * C5803 - C4364 * C5704 - C4107 * C5974 + C4026 * C6061 +
            C4108 * C5804 - C4365 * C5706 - C4108 * C5976 + C4027 * C6062) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C790 +
          (((C265 * C797 - C92188 * C942) * C182 +
            (C265 * C1008 - C92188 * C1132) * C92177) *
               C89 +
           ((C265 * C796 - C92188 * C943) * C182 +
            (C265 * C1009 - C92188 * C1133) * C92177) *
               C90 +
           ((C265 * C795 - C92188 * C944) * C182 +
            (C265 * C1010 - C92188 * C1134) * C92177) *
               C91 +
           ((C265 * C794 - C92188 * C945) * C182 +
            (C265 * C1011 - C92188 * C1135) * C92177) *
               C92) *
              C92150 * C791 +
          (((C92188 * C946 - C265 * C798) * C182 +
            (C92188 * C1136 - C265 * C1012) * C92177) *
               C89 +
           ((C92188 * C947 - C265 * C799) * C182 +
            (C92188 * C1137 - C265 * C1013) * C92177) *
               C90 +
           ((C92188 * C948 - C265 * C800) * C182 +
            (C92188 * C1138 - C265 * C1014) * C92177) *
               C91 +
           ((C92188 * C949 - C265 * C801) * C182 +
            (C92188 * C1139 - C265 * C1015) * C92177) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
           ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
           ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
           ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
              C92150 * C92136 * C98 +
          (C516 * C89 + C517 * C90 +
           ((C292 - C291) * C182 + (C511 - C510) * C92177) * C91 +
           ((C92188 * C271 - C265 * C113) * C182 +
            (C92188 * C500 - C265 * C353) * C92177) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C182 +
            (C265 * C1589 - C92188 * C1713) * C92177) *
               C89 +
           ((C265 * C1377 - C92188 * C1524) * C182 +
            (C265 * C1590 - C92188 * C1714) * C92177) *
               C90 +
           ((C265 * C1376 - C92188 * C1525) * C182 +
            (C265 * C1591 - C92188 * C1715) * C92177) *
               C91 +
           ((C265 * C1375 - C92188 * C1526) * C182 +
            (C265 * C1592 - C92188 * C1716) * C92177) *
               C92) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C182 +
            (C92188 * C1717 - C265 * C1593) * C92177) *
               C89 +
           ((C92188 * C1528 - C265 * C1380) * C182 +
            (C92188 * C1718 - C265 * C1594) * C92177) *
               C90 +
           ((C92188 * C1529 - C265 * C1381) * C182 +
            (C92188 * C1719 - C265 * C1595) * C92177) *
               C91 +
           ((C92188 * C1530 - C265 * C1382) * C182 +
            (C92188 * C1720 - C265 * C1596) * C92177) *
               C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 +
            (C92188 * C942 - C265 * C797) * C4107 +
            (C92188 * C1132 - C265 * C1008) * C4026 +
            (C92188 * C946 - C265 * C798) * C4108 +
            (C92188 * C1136 - C265 * C1012) * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 +
            (C4208 - C4209) * C4108 + (C4483 - C4484) * C4027) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4106 + (C503 - C502) * C4025 +
            (C2126 - C2127) * C4107 + (C2361 - C2362) * C4026 +
            (C4209 - C4208) * C4108 + (C4484 - C4483) * C4027) *
               C4023 +
           ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
            (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
            (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C4106 + C512 * C4025 + (C2131 - C2130) * C4107 +
            (C2364 - C2363) * C4026 + (C4213 - C4212) * C4108 +
            (C4486 - C4485) * C4027) *
               C4023 +
           (C297 * C4106 + C513 * C4025 + (C2135 - C2134) * C4107 +
            (C2366 - C2365) * C4026 + (C92188 * C949 - C265 * C801) * C4108 +
            (C92188 * C1139 - C265 * C1015) * C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
            (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
            (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
               C4023 +
           ((C2126 - C2127) * C4106 + (C2361 - C2362) * C4025 +
            (C4209 - C4208) * C4107 + (C4484 - C4483) * C4026 +
            (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C4106 + C5343 * C4025 + (C5050 - C5049) * C4107 +
            (C5340 - C5339) * C4026 + (C92188 * C5032 - C265 * C4816) * C4108 +
            (C92188 * C5331 - C265 * C5141) * C4027) *
               C4023 +
           (C5047 * C4106 + C5338 * C4025 + (C5054 - C5053) * C4107 +
            (C5342 - C5341) * C4026 + (C92188 * C5033 - C265 * C4817) * C4108 +
            (C92188 * C5332 - C265 * C5142) * C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C4106 +
            (C265 * C1589 - C92188 * C1713) * C4025 +
            (C265 * C3357 - C92188 * C3513) * C4107 +
            (C265 * C3587 - C92188 * C3731) * C4026 +
            (C265 * C5702 - C92188 * C5885) * C4108 +
            (C265 * C5971 - C92188 * C6137) * C4027) *
               C4023 +
           ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
            (C265 * C3358 - C92188 * C3514) * C4107 +
            (C265 * C3588 - C92188 * C3732) * C4026 +
            (C265 * C5701 - C92188 * C5886) * C4108 +
            (C265 * C5972 - C92188 * C6138) * C4027) *
               C92102) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C4106 +
            (C92188 * C1717 - C265 * C1593) * C4025 +
            (C92188 * C5887 - C265 * C5703) * C4107 +
            (C92188 * C6139 - C265 * C5973) * C4026 +
            (C92188 * C5889 - C265 * C5705) * C4108 +
            (C92188 * C6140 - C265 * C5975) * C4027) *
               C4023 +
           ((C92188 * C1528 - C265 * C1380) * C4106 +
            (C92188 * C1718 - C265 * C1594) * C4025 +
            (C92188 * C5888 - C265 * C5704) * C4107 +
            (C92188 * C6141 - C265 * C5974) * C4026 +
            (C92188 * C5890 - C265 * C5706) * C4108 +
            (C92188 * C6142 - C265 * C5976) * C4027) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C265 +
           (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
            C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
               C92188) *
              C92177 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C265 +
           (C89 * C1202 - C100 * C1194 + C90 * C1203 - C102 * C1195 +
            C91 * C1204 - C104 * C1196 + C92 * C1205 - C106 * C1197) *
               C92188) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C265 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576 + C106 * C571 - C92 * C577) *
               C92188) *
              C92177 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C265 +
           (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 + C91 * C577 -
            C104 * C571 + C92 * C578 - C106 * C572) *
               C92188) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C1372 +
          ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
            C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
               C265 +
           (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
            C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
               C92188) *
              C92177 * C1373 +
          ((C89 * C1391 - C100 * C1379 + C90 * C1393 - C102 * C1380 +
            C91 * C1395 - C104 * C1381 + C92 * C1397 - C106 * C1382) *
               C265 +
           (C89 * C1783 - C100 * C1775 + C90 * C1784 - C102 * C1776 +
            C91 * C1785 - C104 * C1777 + C92 * C1786 - C106 * C1778) *
               C92188) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
                C265 +
            (C4023 * C1198 - C4028 * C1190 + C92102 * C1199 - C4030 * C1191) *
                C92188) *
               C4026 +
           ((C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
                C265 +
            (C4023 * C1202 - C4028 * C1194 + C92102 * C1203 - C4030 * C1195) *
                C92188) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C265 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92188) *
               C4025 +
           ((C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
                C265 +
            (C4028 * C1191 - C4023 * C1199 + C4030 * C1192 - C92102 * C1200) *
                C92188) *
               C4026 +
           ((C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
                C265 +
            (C4028 * C1195 - C4023 * C1203 + C4030 * C1196 - C92102 * C1204) *
                C92188) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C265 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92188) *
               C4025 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C265 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92188) *
               C4026 +
           ((C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
                C265 +
            (C4023 * C1204 - C4028 * C1196 + C92102 * C1205 - C4030 * C1197) *
                C92188) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C265 +
            (C5427 - C5426 + C5429 - C5428) * C92188) *
               C4025 +
           ((C5157 - C5156 + C5159 - C5158) * C265 +
            (C5432 - C5431 + C5434 - C5433) * C92188) *
               C4026 +
           ((C5164 - C5165 + C5166 - C5167) * C265 +
            (C5435 - C5436 + C5437 - C5438) * C92188) *
               C4027) *
              C92150 * C791 +
          (C5443 * C4025 +
           ((C5165 - C5164 + C5167 - C5166) * C265 +
            (C5436 - C5435 + C5438 - C5437) * C92188) *
               C4026 +
           ((C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
                C265 +
            (C4023 * C5423 - C4028 * C5419 + C92102 * C5424 - C4030 * C5420) *
                C92188) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C1372 +
          (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C265 +
            (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                C92188) *
               C4025 +
           ((C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                C265 +
            (C4028 * C3801 - C4023 * C3805 + C4030 * C3802 - C92102 * C3806) *
                C92188) *
               C4026 +
           ((C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                C265 +
            (C4028 * C6217 - C4023 * C6223 + C4030 * C6218 - C92102 * C6224) *
                C92188) *
               C4027) *
              C1373 +
          (((C4023 * C1391 - C4028 * C1379 + C92102 * C1393 - C4030 * C1380) *
                C265 +
            (C4023 * C1783 - C4028 * C1775 + C92102 * C1784 - C4030 * C1776) *
                C92188) *
               C4025 +
           ((C4023 * C5711 - C4028 * C5703 + C92102 * C5713 - C4030 * C5704) *
                C265 +
            (C4023 * C6225 - C4028 * C6219 + C92102 * C6226 - C4030 * C6220) *
                C92188) *
               C4026 +
           ((C4023 * C5715 - C4028 * C5705 + C92102 * C5717 - C4030 * C5706) *
                C265 +
            (C4023 * C6227 - C4028 * C6221 + C92102 * C6228 - C4030 * C6222) *
                C92188) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C265 +
            (C182 * C1190 - C92177 * C1256) * C92188) *
               C89 +
           ((C182 * C796 - C92177 * C877) * C265 +
            (C182 * C1191 - C92177 * C1257) * C92188) *
               C90 +
           ((C182 * C795 - C92177 * C878) * C265 +
            (C182 * C1192 - C92177 * C1258) * C92188) *
               C91 +
           ((C182 * C794 - C92177 * C879) * C265 +
            (C182 * C1193 - C92177 * C1259) * C92188) *
               C92) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C265 +
            (C92177 * C1260 - C182 * C1194) * C92188) *
               C89 +
           ((C92177 * C881 - C182 * C799) * C265 +
            (C92177 * C1261 - C182 * C1195) * C92188) *
               C90 +
           ((C92177 * C882 - C182 * C800) * C265 +
            (C92177 * C1262 - C182 * C1196) * C92188) *
               C91 +
           ((C92177 * C883 - C182 * C801) * C265 +
            (C92177 * C1263 - C182 * C1197) * C92188) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
           ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
           ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
           ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
              C92150 * C92136 * C98 +
          (C650 * C89 + C651 * C90 +
           ((C209 - C208) * C265 + (C645 - C644) * C92188) * C91 +
           ((C92177 * C188 - C182 * C113) * C265 +
            (C92177 * C634 - C182 * C572) * C92188) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C1372 +
          (((C182 * C1378 - C92177 * C1457) * C265 +
            (C182 * C1771 - C92177 * C1837) * C92188) *
               C89 +
           ((C182 * C1377 - C92177 * C1458) * C265 +
            (C182 * C1772 - C92177 * C1838) * C92188) *
               C90 +
           ((C182 * C1376 - C92177 * C1459) * C265 +
            (C182 * C1773 - C92177 * C1839) * C92188) *
               C91 +
           ((C182 * C1375 - C92177 * C1460) * C265 +
            (C182 * C1774 - C92177 * C1840) * C92188) *
               C92) *
              C1373 +
          (((C92177 * C1461 - C182 * C1379) * C265 +
            (C92177 * C1841 - C182 * C1775) * C92188) *
               C89 +
           ((C92177 * C1462 - C182 * C1380) * C265 +
            (C92177 * C1842 - C182 * C1776) * C92188) *
               C90 +
           ((C92177 * C1463 - C182 * C1381) * C265 +
            (C92177 * C1843 - C182 * C1777) * C92188) *
               C91 +
           ((C92177 * C1464 - C182 * C1382) * C265 +
            (C92177 * C1844 - C182 * C1778) * C92188) *
               C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
               C4023 +
           ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
            (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C265 +
            (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C92188) *
               C4023 +
           ((C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
             C4027 * C883 - C4108 * C801) *
                C265 +
            (C4025 * C632 - C4106 * C570 + C4026 * C1259 - C4107 * C1193 +
             C4027 * C1263 - C4108 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C265 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C92188) *
               C4023 +
           ((C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
             C4108 * C4814 - C4027 * C4949) *
                C265 +
            (C4106 * C1191 - C4025 * C1257 + C4107 * C1195 - C4026 * C1261 +
             C4108 * C5418 - C4027 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C265 +
            (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
             C4027 * C5519 - C4108 * C5419) *
                C92188) *
               C4023 +
           ((C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
             C4027 * C4951 - C4108 * C4817) *
                C265 +
            (C4025 * C1261 - C4106 * C1195 + C4026 * C5518 - C4107 * C5418 +
             C4027 * C5520 - C4108 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C1372 +
          (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C265 +
            (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
             C4108 * C6217 - C4027 * C6303) *
                C92188) *
               C4023 +
           ((C4106 * C1377 - C4025 * C1458 + C4107 * C3358 - C4026 * C3440 +
             C4108 * C5701 - C4027 * C5800) *
                C265 +
            (C4106 * C1772 - C4025 * C1838 + C4107 * C3802 - C4026 * C3876 +
             C4108 * C6218 - C4027 * C6304) *
                C92188) *
               C92102) *
              C1373 +
          (((C4025 * C1461 - C4106 * C1379 + C4026 * C5801 - C4107 * C5703 +
             C4027 * C5802 - C4108 * C5705) *
                C265 +
            (C4025 * C1841 - C4106 * C1775 + C4026 * C6305 - C4107 * C6219 +
             C4027 * C6306 - C4108 * C6221) *
                C92188) *
               C4023 +
           ((C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
             C4027 * C5804 - C4108 * C5706) *
                C265 +
            (C4025 * C1842 - C4106 * C1776 + C4026 * C6307 - C4107 * C6220 +
             C4027 * C6308 - C4108 * C6222) *
                C92188) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C790 -
          ((C265 * C945 - C701 * C794 - C265 * C1193 + C92188 * C1314) *
               C92177 * C92 +
           (C265 * C944 - C701 * C795 - C265 * C1192 + C92188 * C1315) *
               C92177 * C91 +
           (C265 * C943 - C701 * C796 - C265 * C1191 + C92188 * C1316) *
               C92177 * C90 +
           (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
               C92177 * C89) *
              C92150 * C791 +
          ((C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
               C92177 * C89 +
           (C265 * C947 - C701 * C799 - C265 * C1195 + C92188 * C1319) *
               C92177 * C90 +
           (C265 * C948 - C701 * C800 - C265 * C1196 + C92188 * C1320) *
               C92177 * C91 +
           (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
               C92177 * C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C92136 * C97 -
          (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
              C92136 * C98 +
          (C738 * C89 + C739 * C90 + C740 * C91 +
           (C265 * C271 - C701 * C113 - C265 * C572 + C92188 * C707) * C92177 *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C1372 -
          ((C265 * C1526 - C701 * C1375 - C265 * C1774 + C92188 * C1895) *
               C92177 * C92 +
           (C265 * C1525 - C701 * C1376 - C265 * C1773 + C92188 * C1896) *
               C92177 * C91 +
           (C265 * C1524 - C701 * C1377 - C265 * C1772 + C92188 * C1897) *
               C92177 * C90 +
           (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
               C92177 * C89) *
              C1373 +
          ((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
               C92177 * C89 +
           (C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
               C92177 * C90 +
           (C265 * C1529 - C701 * C1381 - C265 * C1777 + C92188 * C1901) *
               C92177 * C91 +
           (C265 * C1530 - C701 * C1382 - C265 * C1778 + C92188 * C1902) *
               C92177 * C92) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C4026 +
            (C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
                C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C92136 * C97 -
          ((C4740 + C4731 + C4732) * C92102 + (C4739 + C4722 + C4721) * C4023) *
              C92150 * C92136 * C98 +
          ((C4732 + C4731 + C4740) * C4023 +
           (C735 * C4025 + C2593 * C4026 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C790 -
          ((C5626 * C4027 + C4737 * C4026 + C2595 * C4025) * C92102 +
           (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
              C92150 * C791 +
          ((C5625 * C4025 + C5627 * C4026 +
            (C265 * C5032 - C701 * C4816 - C265 * C5419 + C92188 * C5597) *
                C4027) *
               C4023 +
           (C4737 * C4025 + C5626 * C4026 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C1372 -
          (((C265 * C5886 - C701 * C5701 - C265 * C6218 + C92188 * C6383) *
                C4027 +
            (C265 * C3514 - C701 * C3358 - C265 * C3802 + C92188 * C3946) *
                C4026 +
            C3288 * C4025) *
               C92102 +
           ((C265 * C5885 - C701 * C5702 - C265 * C6217 + C92188 * C6384) *
                C4027 +
            (C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                C4026 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C4025) *
               C4023) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C4025 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C4026 +
            (C265 * C5889 - C701 * C5705 - C265 * C6221 + C92188 * C6386) *
                C4027) *
               C4023 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C4025 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C4026 +
            (C265 * C5890 - C701 * C5706 - C265 * C6222 + C92188 * C6388) *
                C4027) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
            C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
            C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
            C92 * C129) *
               C92188 * C92177 * C2664 -
           (C106 * C1383 - C107 * C1375 - C106 * C1384 + C92 * C1399 +
            C104 * C1385 - C105 * C1376 - C104 * C1386 + C91 * C1400 +
            C102 * C1387 - C103 * C1377 - C102 * C1388 + C90 * C1401 +
            C100 * C1389 - C101 * C1378 - C100 * C1390 + C89 * C1402) *
               C92188 * C92177 * C2665) *
              C92136 * C1971 +
          ((C100 * C1387 - C101 * C1377 - C100 * C1388 + C89 * C1401 +
            C102 * C1385 - C103 * C1376 - C102 * C1386 + C90 * C1400 +
            C104 * C1383 - C105 * C1375 - C104 * C1384 + C91 * C1399 +
            C106 * C2667 - C107 * C2666 - C106 * C2668 + C92 * C2669) *
               C92188 * C92177 * C2665 -
           (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
            C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
            C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
            C89 * C127) *
               C92188 * C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
             C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
                C92188 * C4025 +
            (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
               C2664 -
           ((C4030 * C5707 - C4031 * C5701 - C4030 * C5708 + C92102 * C5719 +
             C4028 * C5709 - C4029 * C5702 - C4028 * C5710 + C4023 * C5720) *
                C92188 * C4027 +
            (C4030 * C3363 - C4031 * C3358 - C4030 * C3364 + C92102 * C3370 +
             C4028 * C3361 - C4029 * C3357 - C4028 * C3362 + C4023 * C3369) *
                C92188 * C4026 +
            (C4030 * C1387 - C4031 * C1377 - C4030 * C1388 + C92102 * C1401 +
             C4028 * C1389 - C4029 * C1378 - C4028 * C1390 + C4023 * C1402) *
                C92188 * C4025) *
               C2665) *
              C92136 * C1971 +
          (((C4028 * C1387 - C4029 * C1377 - C4028 * C1388 + C4023 * C1401 +
             C4030 * C1385 - C4031 * C1376 - C4030 * C1386 + C92102 * C1400) *
                C92188 * C4025 +
            (C4028 * C3363 - C4029 * C3358 - C4028 * C3364 + C4023 * C3370 +
             C4030 * C3365 - C4031 * C3359 - C4030 * C3366 + C92102 * C3371) *
                C92188 * C4026 +
            (C4028 * C5707 - C4029 * C5701 - C4028 * C5708 + C4023 * C5719 +
             C4030 * C7489 - C4031 * C7488 - C4030 * C7490 + C92102 * C7491) *
                C92188 * C4027) *
               C2665 -
           ((C6519 + C6518) * C92188 * C4027 +
            (C6517 + C6516) * C92188 * C4026 +
            (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
             C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
                C92188 * C4025) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C100 +
            (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
            (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
            C215 * C92) *
               C92188 * C2664 +
           ((C182 * C1378 - C92177 * C1457) * C100 +
            (C182 * C1390 - C92177 * C1465) * C89 + (C2739 - C2740) * C102 +
            (C2741 - C2742) * C90 + (C2743 - C2744) * C104 +
            (C2745 - C2746) * C91 + (C2747 - C2748) * C106 +
            (C2749 - C2750) * C92) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
            (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
            (C208 - C209) * C106 + (C210 - C211) * C92) *
               C92188 * C2664 +
           ((C2740 - C2739) * C100 + (C2742 - C2741) * C89 +
            (C2744 - C2743) * C102 + (C2746 - C2745) * C90 +
            (C2748 - C2747) * C104 + (C2750 - C2749) * C91 +
            (C92177 * C2736 - C182 * C2666) * C106 +
            (C92177 * C2737 - C182 * C2668) * C92) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C4028 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C4023 +
            (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
            (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
               C92188 * C2664 +
           ((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
             C4108 * C5702 - C4027 * C5799) *
                C4028 +
            (C4106 * C1390 - C4025 * C1465 + C4107 * C3362 - C4026 * C3443 +
             C4108 * C5710 - C4027 * C5805) *
                C4023 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C4030 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92102) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
            (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
            (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
               C92188 * C2664 +
           ((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C4028 +
            (C7600 - C7599 + C7602 - C7601 + C7604 - C7603) * C4023 +
            (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C4030 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92102) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C100 +
            (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
            (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
            C298 * C92) *
               C92177 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C100 +
            (C265 * C1390 - C92188 * C1531) * C89 + (C2819 - C2820) * C102 +
            (C2821 - C2822) * C90 + (C2823 - C2824) * C104 +
            (C2825 - C2826) * C91 + (C2827 - C2828) * C106 +
            (C2829 - C2830) * C92) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
            (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
            (C291 - C292) * C106 + (C293 - C294) * C92) *
               C92177 * C2664 +
           ((C2820 - C2819) * C100 + (C2822 - C2821) * C89 +
            (C2824 - C2823) * C102 + (C2826 - C2825) * C90 +
            (C2828 - C2827) * C104 + (C2830 - C2829) * C91 +
            (C92188 * C2816 - C265 * C2666) * C106 +
            (C92188 * C2817 - C265 * C2668) * C92) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4028 +
             (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
             (C281 - C282) * C92102) *
                C4025 +
            ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 + C6732 * C4030 +
             C6733 * C92102) *
                C4026 +
            C5065 * C4027) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4028 +
             (C265 * C1390 - C92188 * C1531) * C4023 + (C2819 - C2820) * C4030 +
             (C2821 - C2822) * C92102) *
                C4025 +
            ((C265 * C3357 - C92188 * C3513) * C4028 +
             (C265 * C3362 - C92188 * C3517) * C4023 + (C7705 - C7706) * C4030 +
             (C7707 - C7708) * C92102) *
                C4026 +
            ((C265 * C5702 - C92188 * C5885) * C4028 +
             (C265 * C5710 - C92188 * C5891) * C4023 + (C7709 - C7710) * C4030 +
             (C7711 - C7712) * C92102) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C4028 + (C282 - C281) * C4023 +
             (C284 - C283) * C4030 + (C286 - C285) * C92102) *
                C4025 +
            (C6734 * C4028 + C6735 * C4023 + (C2130 - C2131) * C4030 +
             (C2132 - C2133) * C92102) *
                C4026 +
            (C6736 * C4028 + C6737 * C4023 + (C4212 - C4213) * C4030 +
             (C4214 - C4215) * C92102) *
                C4027) *
               C2664 +
           (((C2820 - C2819) * C4028 + (C2822 - C2821) * C4023 +
             (C2824 - C2823) * C4030 + (C2826 - C2825) * C92102) *
                C4025 +
            ((C7706 - C7705) * C4028 + (C7708 - C7707) * C4023 +
             (C92188 * C3515 - C265 * C3359) * C4030 +
             (C92188 * C3519 - C265 * C3366) * C92102) *
                C4026 +
            ((C7710 - C7709) * C4028 + (C7712 - C7711) * C4023 +
             (C92188 * C7702 - C265 * C7488) * C4030 +
             (C92188 * C7703 - C265 * C7490) * C92102) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C182 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350 + C92 * C357 - C106 * C351) *
                C92177) *
               C92188 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C182 +
            (C100 * C1589 - C89 * C1597 + C102 * C1590 - C90 * C1598 +
             C104 * C1591 - C91 * C1599 + C106 * C1592 - C92 * C1600) *
                C92177) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C182 +
            (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
             C91 * C357 + C106 * C352 - C92 * C358) *
                C92177) *
               C92188 * C2664 +
           ((C89 * C1387 - C100 * C1377 + C90 * C1385 - C102 * C1376 +
             C91 * C1383 - C104 * C1375 + C92 * C2667 - C106 * C2666) *
                C182 +
            (C89 * C1598 - C100 * C1590 + C90 * C1599 - C102 * C1591 +
             C91 * C1600 - C104 * C1592 + C92 * C2897 - C106 * C2896) *
                C92177) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C4106 +
            (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
                C4025 +
            (C5148 - C5149 + C5150 - C5151) * C4107 +
            (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
            C5177 * C4027) *
               C92188 * C2664 +
           ((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                C4106 +
            (C4028 * C1589 - C4023 * C1597 + C4030 * C1590 - C92102 * C1598) *
                C4025 +
            (C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                C4107 +
            (C4028 * C3587 - C4023 * C3591 + C4030 * C3588 - C92102 * C3592) *
                C4026 +
            (C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                C4108 +
            (C4028 * C5971 - C4023 * C5977 + C4030 * C5972 - C92102 * C5978) *
                C4027) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C4106 +
            (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
                C4025 +
            (C6838 - C6839 + C6840 - C6841) * C4107 +
            (C6842 - C6843 + C6844 - C6845) * C4026 +
            (C6846 - C6847 + C6848 - C6849) * C4108 +
            (C6850 - C6851 + C6852 - C6853) * C4027) *
               C92188 * C2664 +
           ((C4023 * C1387 - C4028 * C1377 + C92102 * C1385 - C4030 * C1376) *
                C4106 +
            (C4023 * C1598 - C4028 * C1590 + C92102 * C1599 - C4030 * C1591) *
                C4025 +
            (C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                C4107 +
            (C4023 * C3592 - C4028 * C3588 + C92102 * C3593 - C4030 * C3589) *
                C4026 +
            (C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                C4108 +
            (C4023 * C5978 - C4028 * C5972 + C92102 * C7811 - C4030 * C7810) *
                C4027) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
            C442 * C90 + C443 * C91 + C444 * C92) *
               C92188 * C2664 -
           (C2984 * C92 + C2985 * C91 + C2986 * C90 +
            (C182 * C1457 - C410 * C1378 - C182 * C1589 + C92177 * C1658) *
                C89) *
               C92188 * C2665) *
              C92136 * C1971 +
          ((C2986 * C89 + C2985 * C90 + C2984 * C91 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C92) *
               C92188 * C2665 -
           (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C4023 +
            (C4403 + C4404 + C4405) * C92102) *
               C92188 * C2664 -
           ((C7930 + C7931 + C7932) * C92102 +
            (C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058 +
             C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
             C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658) *
                C4023) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C7932 + C7931 + C7930) * C4023 +
            (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
             C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
             C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
                C92102) *
               C92188 * C2665 -
           ((C4406 + C4407 + C4408) * C92102 +
            (C4405 + C4404 + C4403) * C4023) *
               C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C182 +
             (C92188 * C495 - C265 * C348) * C92177) *
                C89 +
            ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
            C517 * C92) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C182 +
             (C265 * C1589 - C92188 * C1713) * C92177) *
                C89 +
            ((C2819 - C2820) * C182 + (C3054 - C3055) * C92177) * C90 +
            ((C2823 - C2824) * C182 + (C3056 - C3057) * C92177) * C91 +
            ((C2827 - C2828) * C182 + (C3058 - C3059) * C92177) * C92) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
            ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
            ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
            ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
               C2664 +
           (((C2820 - C2819) * C182 + (C3055 - C3054) * C92177) * C89 +
            ((C2824 - C2823) * C182 + (C3057 - C3056) * C92177) * C90 +
            ((C2828 - C2827) * C182 + (C3059 - C3058) * C92177) * C91 +
            ((C92188 * C2816 - C265 * C2666) * C182 +
             (C92188 * C3052 - C265 * C2896) * C92177) *
                C92) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C4106 +
             (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
             (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
                C4023 +
            ((C279 - C280) * C4106 + (C502 - C503) * C4025 + C6732 * C4107 +
             C7073 * C4026 + C5047 * C4108 + C5338 * C4027) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C4106 +
             (C265 * C1589 - C92188 * C1713) * C4025 +
             (C265 * C3357 - C92188 * C3513) * C4107 +
             (C265 * C3587 - C92188 * C3731) * C4026 +
             (C265 * C5702 - C92188 * C5885) * C4108 +
             (C265 * C5971 - C92188 * C6137) * C4027) *
                C4023 +
            ((C2819 - C2820) * C4106 + (C3054 - C3055) * C4025 +
             (C7705 - C7706) * C4107 + (C8032 - C8033) * C4026 +
             (C7709 - C7710) * C4108 + (C8034 - C8035) * C4027) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C4106 + (C503 - C502) * C4025 + C6734 * C4107 +
             C7074 * C4026 + C6736 * C4108 + C7075 * C4027) *
                C4023 +
            ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
             (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
             (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
                C92102) *
               C2664 +
           (((C2820 - C2819) * C4106 + (C3055 - C3054) * C4025 +
             (C7706 - C7705) * C4107 + (C8033 - C8032) * C4026 +
             (C7710 - C7709) * C4108 + (C8035 - C8034) * C4027) *
                C4023 +
            ((C2824 - C2823) * C4106 + (C3057 - C3056) * C4025 +
             (C92188 * C3515 - C265 * C3359) * C4107 +
             (C92188 * C3733 - C265 * C3589) * C4026 +
             (C92188 * C7702 - C265 * C7488) * C4108 +
             (C92188 * C8030 - C265 * C7810) * C4027) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
             C104 * C110 + C92 * C120 - C106 * C111) *
                C265 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569 + C92 * C576 - C106 * C570) *
                C92188) *
               C92177 * C2664 +
           ((C100 * C1378 - C89 * C1389 + C102 * C1377 - C90 * C1387 +
             C104 * C1376 - C91 * C1385 + C106 * C1375 - C92 * C1383) *
                C265 +
            (C100 * C1771 - C89 * C1779 + C102 * C1772 - C90 * C1780 +
             C104 * C1773 - C91 * C1781 + C106 * C1774 - C92 * C1782) *
                C92188) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
             C91 * C120 + C106 * C112 - C92 * C122) *
                C265 +
            (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
             C91 * C576 + C106 * C571 - C92 * C577) *
                C92188) *
               C92177 * C2664 +
           ((C89 * C1387 - C100 * C1377 + C90 * C1385 - C102 * C1376 +
             C91 * C1383 - C104 * C1375 + C92 * C2667 - C106 * C2666) *
                C265 +
            (C89 * C1780 - C100 * C1772 + C90 * C1781 - C102 * C1773 +
             C91 * C1782 - C104 * C1774 + C92 * C3126 - C106 * C3125) *
                C92188) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                 C265 +
             (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                 C92188) *
                C4025 +
            ((C5148 - C5149 + C5150 - C5151) * C265 +
             (C5426 - C5427 + C5428 - C5429) * C92188) *
                C4026 +
            C5443 * C4027) *
               C2664 +
           (((C4028 * C1378 - C4023 * C1389 + C4030 * C1377 - C92102 * C1387) *
                 C265 +
             (C4028 * C1771 - C4023 * C1779 + C4030 * C1772 - C92102 * C1780) *
                 C92188) *
                C4025 +
            ((C4028 * C3357 - C4023 * C3361 + C4030 * C3358 - C92102 * C3363) *
                 C265 +
             (C4028 * C3801 - C4023 * C3805 + C4030 * C3802 - C92102 * C3806) *
                 C92188) *
                C4026 +
            ((C4028 * C5702 - C4023 * C5709 + C4030 * C5701 - C92102 * C5707) *
                 C265 +
             (C4028 * C6217 - C4023 * C6223 + C4030 * C6218 - C92102 * C6224) *
                 C92188) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                 C265 +
             (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                 C92188) *
                C4025 +
            ((C6838 - C6839 + C6840 - C6841) * C265 +
             (C7176 - C7177 + C7178 - C7179) * C92188) *
                C4026 +
            ((C6846 - C6847 + C6848 - C6849) * C265 +
             (C7180 - C7181 + C7182 - C7183) * C92188) *
                C4027) *
               C2664 +
           (((C4023 * C1387 - C4028 * C1377 + C92102 * C1385 - C4030 * C1376) *
                 C265 +
             (C4023 * C1780 - C4028 * C1772 + C92102 * C1781 - C4030 * C1773) *
                 C92188) *
                C4025 +
            ((C4023 * C3363 - C4028 * C3358 + C92102 * C3365 - C4030 * C3359) *
                 C265 +
             (C4023 * C3806 - C4028 * C3802 + C92102 * C3807 - C4030 * C3803) *
                 C92188) *
                C4026 +
            ((C4023 * C5707 - C4028 * C5701 + C92102 * C7489 - C4030 * C7488) *
                 C265 +
             (C4023 * C6224 - C4028 * C6218 + C92102 * C8134 - C4030 * C8133) *
                 C92188) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C265 +
             (C92177 * C629 - C182 * C567) * C92188) *
                C89 +
            ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
            C651 * C92) *
               C2664 +
           (((C182 * C1378 - C92177 * C1457) * C265 +
             (C182 * C1771 - C92177 * C1837) * C92188) *
                C89 +
            ((C2739 - C2740) * C265 + (C3195 - C3196) * C92188) * C90 +
            ((C2743 - C2744) * C265 + (C3197 - C3198) * C92188) * C91 +
            ((C2747 - C2748) * C265 + (C3199 - C3200) * C92188) * C92) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
            ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
            ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
            ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
               C2664 +
           (((C2740 - C2739) * C265 + (C3196 - C3195) * C92188) * C89 +
            ((C2744 - C2743) * C265 + (C3198 - C3197) * C92188) * C90 +
            ((C2748 - C2747) * C265 + (C3200 - C3199) * C92188) * C91 +
            ((C92177 * C2736 - C182 * C2666) * C265 +
             (C92177 * C3193 - C182 * C3125) * C92188) *
                C92) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C265 +
             (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
              C4027 * C1260 - C4108 * C1194) *
                 C92188) *
                C4023 +
            ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
             (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
                C92102) *
               C2664 +
           (((C4106 * C1378 - C4025 * C1457 + C4107 * C3357 - C4026 * C3439 +
              C4108 * C5702 - C4027 * C5799) *
                 C265 +
             (C4106 * C1771 - C4025 * C1837 + C4107 * C3801 - C4026 * C3875 +
              C4108 * C6217 - C4027 * C6303) *
                 C92188) *
                C4023 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C265 +
             (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92188) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
             (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
                C4023 +
            ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
             (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
                C92102) *
               C2664 +
           (((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C265 +
             (C8236 - C8235 + C8238 - C8237 + C8240 - C8239) * C92188) *
                C4023 +
            ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
              C4027 * C7590 - C4108 * C7488) *
                 C265 +
             (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 - C4107 * C3803 +
              C4027 * C8233 - C4108 * C8133) *
                 C92188) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
                C89 +
            C737 * C90 + C738 * C91 + C739 * C92) *
               C2664 -
           (C3289 * C92 + C3290 * C91 + C3291 * C90 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92177 * C89) *
               C2665) *
              C92136 * C1971 +
          ((C3291 * C89 + C3290 * C90 + C3289 * C91 +
            (C265 * C2816 - C701 * C2666 - C265 * C3125 + C92188 * C3266) *
                C92177 * C92) *
               C2665 -
           (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
             C5624 * C4026 + C5625 * C4027) *
                C4023 +
            (C4721 + C4722 + C4739) * C92102) *
               C2664 -
           ((C8355 + C8356 + C8348) * C92102 +
            ((C265 * C5885 - C701 * C5702 - C265 * C6217 + C92188 * C6384) *
                 C4027 +
             (C265 * C3513 - C701 * C3357 - C265 * C3801 + C92188 * C3945) *
                 C4026 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C4025) *
                C4023) *
               C2665) *
              C92136 * C1971 +
          (((C8348 + C8356 + C8355) * C4023 +
            (C3287 * C4025 +
             (C265 * C3515 - C701 * C3359 - C265 * C3803 + C92188 * C3947) *
                 C4026 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C4027) *
                C92102) *
               C2665 -
           ((C4740 + C4731 + C4732) * C92102 +
            (C4739 + C4722 + C4721) * C4023) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C92136 * C97 -
          (C106 * C122 - C107 * C112 - C106 * C123 + C92 * C130 + C104 * C120 -
           C105 * C111 - C104 * C121 + C91 * C129 + C102 * C118 - C103 * C110 -
           C102 * C119 + C90 * C128 + C100 * C116 - C101 * C109 - C100 * C117 +
           C89 * C127) *
              C92188 * C92177 * C92150 * C92136 * C98 +
          (C100 * C118 - C101 * C110 - C100 * C119 + C89 * C128 + C102 * C120 -
           C103 * C111 - C102 * C121 + C90 * C129 + C104 * C122 - C105 * C112 -
           C104 * C123 + C91 * C130 + C106 * C124 - C107 * C113 - C106 * C125 +
           C92 * C131) *
              C92188 * C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C114 - C101 * C108 - C100 * C115 + C89 * C126 + C102 * C116 -
           C103 * C109 - C102 * C117 + C90 * C127 + C104 * C118 - C105 * C110 -
           C104 * C119 + C91 * C128 + C106 * C120 - C107 * C111 - C106 * C121 +
           C92 * C129) *
              C92188 * C92177 * C92150 * C790 -
          (C106 * C802 - C107 * C794 - C106 * C803 + C92 * C818 + C104 * C804 -
           C105 * C795 - C104 * C805 + C91 * C819 + C102 * C806 - C103 * C796 -
           C102 * C807 + C90 * C820 + C100 * C808 - C101 * C797 - C100 * C809 +
           C89 * C821) *
              C92188 * C92177 * C92150 * C791 +
          (C100 * C810 - C101 * C798 - C100 * C811 + C89 * C822 + C102 * C812 -
           C103 * C799 - C102 * C813 + C90 * C823 + C104 * C814 - C105 * C800 -
           C104 * C815 + C91 * C824 + C106 * C816 - C107 * C801 - C106 * C817 +
           C92 * C825) *
              C92188 * C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4028 * C808 - C4029 * C797 - C4028 * C809 + C4023 * C821 +
            C4030 * C806 - C4031 * C796 - C4030 * C807 + C92102 * C820) *
               C92188 * C4026 +
           (C4028 * C810 - C4029 * C798 - C4028 * C811 + C4023 * C822 +
            C4030 * C812 - C4031 * C799 - C4030 * C813 + C92102 * C823) *
               C92188 * C4027) *
              C92150 * C92136 * C97 -
          ((C4030 * C814 - C4031 * C800 - C4030 * C815 + C92102 * C824 +
            C4028 * C812 - C4029 * C799 - C4028 * C813 + C4023 * C823) *
               C92188 * C4027 +
           (C4030 * C804 - C4031 * C795 - C4030 * C805 + C92102 * C819 +
            C4028 * C806 - C4029 * C796 - C4028 * C807 + C4023 * C820) *
               C92188 * C4026 +
           (C4030 * C118 - C4031 * C110 - C4030 * C119 + C92102 * C128 +
            C4028 * C116 - C4029 * C109 - C4028 * C117 + C4023 * C127) *
               C92188 * C4025) *
              C92150 * C92136 * C98 +
          ((C4028 * C118 - C4029 * C110 - C4028 * C119 + C4023 * C128 +
            C4030 * C120 - C4031 * C111 - C4030 * C121 + C92102 * C129) *
               C92188 * C4025 +
           (C4028 * C804 - C4029 * C795 - C4028 * C805 + C4023 * C819 +
            C4030 * C802 - C4031 * C794 - C4030 * C803 + C92102 * C818) *
               C92188 * C4026 +
           (C4028 * C814 - C4029 * C800 - C4028 * C815 + C4023 * C824 +
            C4030 * C816 - C4031 * C801 - C4030 * C817 + C92102 * C825) *
               C92188 * C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4028 * C114 - C4029 * C108 - C4028 * C115 + C4023 * C126 +
            C4030 * C116 - C4031 * C109 - C4030 * C117 + C92102 * C127) *
               C92188 * C4025 +
           (C4867 + C4868) * C92188 * C4026 + C4874 * C4027) *
              C92150 * C790 -
          ((C4871 + C4872) * C92188 * C4027 + (C4870 + C4869) * C92188 * C4026 +
           (C4868 + C4867) * C92188 * C4025) *
              C92150 * C791 +
          (C4874 * C4025 + (C4872 + C4871) * C92188 * C4026 +
           (C4028 * C4822 - C4029 * C4816 - C4028 * C4823 + C4023 * C4828 +
            C4030 * C4824 - C4031 * C4817 - C4030 * C4825 + C92102 * C4829) *
               C92188 * C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C92136 * C97 +
          ((C197 - C196) * C100 + (C199 - C198) * C89 + (C201 - C200) * C102 +
           (C203 - C202) * C90 + (C205 - C204) * C104 + (C207 - C206) * C91 +
           (C208 - C209) * C106 + (C210 - C211) * C92) *
              C92188 * C92150 * C92136 * C98 +
          (C212 * C100 + C213 * C89 + C214 * C102 + C215 * C90 +
           (C209 - C208) * C104 + (C211 - C210) * C91 +
           (C92177 * C188 - C182 * C113) * C106 +
           (C92177 * C194 - C182 * C125) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C100 +
           (C92177 * C189 - C182 * C115) * C89 + (C196 - C197) * C102 +
           (C198 - C199) * C90 + C212 * C104 + C213 * C91 + C214 * C106 +
           C215 * C92) *
              C92188 * C92150 * C790 +
          ((C182 * C797 - C92177 * C876) * C100 +
           (C182 * C809 - C92177 * C884) * C89 +
           (C182 * C796 - C92177 * C877) * C102 +
           (C182 * C807 - C92177 * C885) * C90 +
           (C182 * C795 - C92177 * C878) * C104 +
           (C182 * C805 - C92177 * C886) * C91 +
           (C182 * C794 - C92177 * C879) * C106 +
           (C182 * C803 - C92177 * C887) * C92) *
              C92188 * C92150 * C791 +
          ((C92177 * C880 - C182 * C798) * C100 +
           (C92177 * C888 - C182 * C811) * C89 +
           (C92177 * C881 - C182 * C799) * C102 +
           (C92177 * C889 - C182 * C813) * C90 +
           (C92177 * C882 - C182 * C800) * C104 +
           (C92177 * C890 - C182 * C815) * C91 +
           (C92177 * C883 - C182 * C801) * C106 +
           (C92177 * C891 - C182 * C817) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C4028 +
           (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C4023 +
           (C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C4030 +
           (C4128 - C4129 + C4130 - C4131 + C4132 - C4133) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C4028 +
           (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C4023 +
           (C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
            C4027 * C883 - C4108 * C801) *
               C4030 +
           (C4025 * C192 - C4106 * C121 + C4026 * C887 - C4107 * C803 +
            C4027 * C891 - C4108 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C4028 +
           (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
            C4027 * C888 - C4108 * C811) *
               C4023 +
           (C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C4030 +
           (C4116 - C4117 + C4118 - C4119 + C4120 - C4121) * C92102) *
              C92188 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C4028 +
           (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
            C4108 * C4821 - C4027 * C4952) *
               C4023 +
           (C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
            C4108 * C4814 - C4027 * C4949) *
               C4030 +
           (C4106 * C807 - C4025 * C885 + C4107 * C813 - C4026 * C889 +
            C4108 * C4819 - C4027 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C4028 +
           (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
            C4027 * C4954 - C4108 * C4823) *
               C4023 +
           (C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
            C4027 * C4951 - C4108 * C4817) *
               C4030 +
           (C4025 * C889 - C4106 * C813 + C4026 * C4953 - C4107 * C4819 +
            C4027 * C4955 - C4108 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C92136 * C97 +
          ((C280 - C279) * C100 + (C282 - C281) * C89 + (C284 - C283) * C102 +
           (C286 - C285) * C90 + (C288 - C287) * C104 + (C290 - C289) * C91 +
           (C291 - C292) * C106 + (C293 - C294) * C92) *
              C92177 * C92150 * C92136 * C98 +
          (C295 * C100 + C296 * C89 + C297 * C102 + C298 * C90 +
           (C292 - C291) * C104 + (C294 - C293) * C91 +
           (C92188 * C271 - C265 * C113) * C106 +
           (C92188 * C277 - C265 * C125) * C92) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C100 +
           (C92188 * C272 - C265 * C115) * C89 + (C279 - C280) * C102 +
           (C281 - C282) * C90 + C295 * C104 + C296 * C91 + C297 * C106 +
           C298 * C92) *
              C92177 * C92150 * C790 +
          ((C265 * C797 - C92188 * C942) * C100 +
           (C265 * C809 - C92188 * C950) * C89 +
           (C265 * C796 - C92188 * C943) * C102 +
           (C265 * C807 - C92188 * C951) * C90 +
           (C265 * C795 - C92188 * C944) * C104 +
           (C265 * C805 - C92188 * C952) * C91 +
           (C265 * C794 - C92188 * C945) * C106 +
           (C265 * C803 - C92188 * C953) * C92) *
              C92177 * C92150 * C791 +
          ((C92188 * C946 - C265 * C798) * C100 +
           (C92188 * C954 - C265 * C811) * C89 +
           (C92188 * C947 - C265 * C799) * C102 +
           (C92188 * C955 - C265 * C813) * C90 +
           (C92188 * C948 - C265 * C800) * C104 +
           (C92188 * C956 - C265 * C815) * C91 +
           (C92188 * C949 - C265 * C801) * C106 +
           (C92188 * C957 - C265 * C817) * C92) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C92188 * C942 - C265 * C797) * C4028 +
            (C92188 * C950 - C265 * C809) * C4023 + (C2127 - C2126) * C4030 +
            (C2129 - C2128) * C92102) *
               C4026 +
           ((C92188 * C946 - C265 * C798) * C4028 +
            (C92188 * C954 - C265 * C811) * C4023 + (C4208 - C4209) * C4030 +
            (C4210 - C4211) * C92102) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4028 + (C282 - C281) * C4023 +
            (C284 - C283) * C4030 + (C286 - C285) * C92102) *
               C4025 +
           ((C2126 - C2127) * C4028 + (C2128 - C2129) * C4023 +
            (C2130 - C2131) * C4030 + (C2132 - C2133) * C92102) *
               C4026 +
           ((C4209 - C4208) * C4028 + (C4211 - C4210) * C4023 +
            (C4212 - C4213) * C4030 + (C4214 - C4215) * C92102) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C295 * C4028 + C296 * C4023 + C297 * C4030 + C298 * C92102) *
               C4025 +
           ((C2131 - C2130) * C4028 + (C2133 - C2132) * C4023 +
            (C2135 - C2134) * C4030 + (C2137 - C2136) * C92102) *
               C4026 +
           ((C4213 - C4212) * C4028 + (C4215 - C4214) * C4023 +
            (C92188 * C949 - C265 * C801) * C4030 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4028 +
            (C92188 * C272 - C265 * C115) * C4023 + (C279 - C280) * C4030 +
            (C281 - C282) * C92102) *
               C4025 +
           ((C5039 - C5040) * C4028 + (C5041 - C5042) * C4023 +
            (C2127 - C2126) * C4030 + (C2129 - C2128) * C92102) *
               C4026 +
           C5065 * C4027) *
              C92150 * C790 +
          (((C5040 - C5039) * C4028 + (C5042 - C5041) * C4023 +
            (C2126 - C2127) * C4030 + (C2128 - C2129) * C92102) *
               C4025 +
           ((C5044 - C5043) * C4028 + (C5046 - C5045) * C4023 +
            (C4209 - C4208) * C4030 + (C4211 - C4210) * C92102) *
               C4026 +
           ((C5049 - C5050) * C4028 + (C5051 - C5052) * C4023 +
            (C5053 - C5054) * C4030 + (C5055 - C5056) * C92102) *
               C4027) *
              C92150 * C791 +
          (C5065 * C4025 +
           ((C5050 - C5049) * C4028 + (C5052 - C5051) * C4023 +
            (C5054 - C5053) * C4030 + (C5056 - C5055) * C92102) *
               C4026 +
           ((C92188 * C5032 - C265 * C4816) * C4028 +
            (C92188 * C5036 - C265 * C4823) * C4023 +
            (C92188 * C5033 - C265 * C4817) * C4030 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C182 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357 + C106 * C352 - C92 * C358) *
               C92177) *
              C92188 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C182 +
           (C89 * C356 - C100 * C350 + C90 * C357 - C102 * C351 + C91 * C358 -
            C104 * C352 + C92 * C359 - C106 * C353) *
               C92177) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C182 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350 + C92 * C357 - C106 * C351) *
               C92177) *
              C92188 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C182 +
           (C100 * C1008 - C89 * C1016 + C102 * C1009 - C90 * C1017 +
            C104 * C1010 - C91 * C1018 + C106 * C1011 - C92 * C1019) *
               C92177) *
              C92188 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C182 +
           (C89 * C1020 - C100 * C1012 + C90 * C1021 - C102 * C1013 +
            C91 * C1022 - C104 * C1014 + C92 * C1023 - C106 * C1015) *
               C92177) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
               C4107 +
           (C4023 * C1016 - C4028 * C1008 + C92102 * C1017 - C4030 * C1009) *
               C4026 +
           (C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
               C4108 +
           (C4023 * C1020 - C4028 * C1012 + C92102 * C1021 - C4030 * C1013) *
               C4027) *
              C92188 * C92150 * C92136 * C97 +
          ((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
               C4106 +
           (C4028 * C349 - C4023 * C355 + C4030 * C350 - C92102 * C356) *
               C4025 +
           (C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
               C4107 +
           (C4028 * C1009 - C4023 * C1017 + C4030 * C1010 - C92102 * C1018) *
               C4026 +
           (C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
               C4108 +
           (C4028 * C1013 - C4023 * C1021 + C4030 * C1014 - C92102 * C1022) *
               C4027) *
              C92188 * C92150 * C92136 * C98 +
          ((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
               C4106 +
           (C4023 * C356 - C4028 * C350 + C92102 * C357 - C4030 * C351) *
               C4025 +
           (C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
               C4107 +
           (C4023 * C1018 - C4028 * C1010 + C92102 * C1019 - C4030 * C1011) *
               C4026 +
           (C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
               C4108 +
           (C4023 * C1022 - C4028 * C1014 + C92102 * C1023 - C4030 * C1015) *
               C4027) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
               C4106 +
           (C4023 * C354 - C4028 * C348 + C92102 * C355 - C4030 * C349) *
               C4025 +
           (C5148 - C5149 + C5150 - C5151) * C4107 +
           (C5152 - C5153 + C5154 - C5155) * C4026 + C5176 * C4108 +
           C5177 * C4027) *
              C92188 * C92150 * C790 +
          ((C5149 - C5148 + C5151 - C5150) * C4106 +
           (C5153 - C5152 + C5155 - C5154) * C4025 +
           (C5157 - C5156 + C5159 - C5158) * C4107 +
           (C5161 - C5160 + C5163 - C5162) * C4026 +
           (C5164 - C5165 + C5166 - C5167) * C4108 +
           (C5168 - C5169 + C5170 - C5171) * C4027) *
              C92188 * C92150 * C791 +
          (C5176 * C4106 + C5177 * C4025 +
           (C5165 - C5164 + C5167 - C5166) * C4107 +
           (C5169 - C5168 + C5171 - C5170) * C4026 +
           (C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
               C4108 +
           (C4023 * C5145 - C4028 * C5141 + C92102 * C5146 - C4030 * C5142) *
               C4027) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C92136 * C97 -
          (C445 * C92 + C444 * C91 + C443 * C90 + C442 * C89) * C92188 *
              C92150 * C92136 * C98 +
          (C443 * C89 + C444 * C90 + C445 * C91 +
           (C182 * C188 - C410 * C113 - C182 * C353 + C92177 * C416) * C92) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C89 +
           C442 * C90 + C443 * C91 + C444 * C92) *
              C92188 * C92150 * C790 -
          ((C182 * C879 - C410 * C794 - C182 * C1011 + C92177 * C1074) * C92 +
           (C182 * C878 - C410 * C795 - C182 * C1010 + C92177 * C1075) * C91 +
           (C182 * C877 - C410 * C796 - C182 * C1009 + C92177 * C1076) * C90 +
           (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) * C89) *
              C92188 * C92150 * C791 +
          ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) * C89 +
           (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) * C90 +
           (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) * C91 +
           (C182 * C883 - C410 * C801 - C182 * C1015 + C92177 * C1081) * C92) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C4406 + C4407 + C4408) * C92102 + (C4405 + C4404 + C4403) * C4023) *
              C92188 * C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C4023 +
           (C4106 * C186 - C4363 * C111 - C4106 * C351 + C4025 * C414 +
            C4107 * C879 - C4364 * C794 - C4107 * C1011 + C4026 * C1074 +
            C4108 * C883 - C4365 * C801 - C4108 * C1015 + C4027 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C4023 +
           (C4403 + C4404 + C4405) * C92102) *
              C92188 * C92150 * C790 -
          ((C4108 * C4949 - C4365 * C4814 - C4108 * C5140 + C4027 * C5251 +
            C4107 * C881 - C4364 * C799 - C4107 * C1013 + C4026 * C1079 +
            C4106 * C877 - C4363 * C796 - C4106 * C1009 + C4025 * C1076) *
               C92102 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C4023) *
              C92188 * C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C4023 +
           (C4106 * C881 - C4363 * C799 - C4106 * C1013 + C4025 * C1079 +
            C4107 * C4949 - C4364 * C4814 - C4107 * C5140 + C4026 * C5251 +
            C4108 * C4951 - C4365 * C4817 - C4108 * C5142 + C4027 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C182 + (C503 - C502) * C92177) * C89 +
           ((C284 - C283) * C182 + (C506 - C505) * C92177) * C90 +
           ((C288 - C287) * C182 + (C509 - C508) * C92177) * C91 +
           ((C291 - C292) * C182 + (C510 - C511) * C92177) * C92) *
              C92150 * C92136 * C98 +
          (C516 * C89 + C517 * C90 +
           ((C292 - C291) * C182 + (C511 - C510) * C92177) * C91 +
           ((C92188 * C271 - C265 * C113) * C182 +
            (C92188 * C500 - C265 * C353) * C92177) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C182 +
            (C92188 * C495 - C265 * C348) * C92177) *
               C89 +
           ((C279 - C280) * C182 + (C502 - C503) * C92177) * C90 + C516 * C91 +
           C517 * C92) *
              C92150 * C790 +
          (((C265 * C797 - C92188 * C942) * C182 +
            (C265 * C1008 - C92188 * C1132) * C92177) *
               C89 +
           ((C265 * C796 - C92188 * C943) * C182 +
            (C265 * C1009 - C92188 * C1133) * C92177) *
               C90 +
           ((C265 * C795 - C92188 * C944) * C182 +
            (C265 * C1010 - C92188 * C1134) * C92177) *
               C91 +
           ((C265 * C794 - C92188 * C945) * C182 +
            (C265 * C1011 - C92188 * C1135) * C92177) *
               C92) *
              C92150 * C791 +
          (((C92188 * C946 - C265 * C798) * C182 +
            (C92188 * C1136 - C265 * C1012) * C92177) *
               C89 +
           ((C92188 * C947 - C265 * C799) * C182 +
            (C92188 * C1137 - C265 * C1013) * C92177) *
               C90 +
           ((C92188 * C948 - C265 * C800) * C182 +
            (C92188 * C1138 - C265 * C1014) * C92177) *
               C91 +
           ((C92188 * C949 - C265 * C801) * C182 +
            (C92188 * C1139 - C265 * C1015) * C92177) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 +
            (C92188 * C942 - C265 * C797) * C4107 +
            (C92188 * C1132 - C265 * C1008) * C4026 +
            (C92188 * C946 - C265 * C798) * C4108 +
            (C92188 * C1136 - C265 * C1012) * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 +
            (C4208 - C4209) * C4108 + (C4483 - C4484) * C4027) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C4106 + (C503 - C502) * C4025 +
            (C2126 - C2127) * C4107 + (C2361 - C2362) * C4026 +
            (C4209 - C4208) * C4108 + (C4484 - C4483) * C4027) *
               C4023 +
           ((C284 - C283) * C4106 + (C506 - C505) * C4025 +
            (C2130 - C2131) * C4107 + (C2363 - C2364) * C4026 +
            (C4212 - C4213) * C4108 + (C4485 - C4486) * C4027) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C4106 + C512 * C4025 + (C2131 - C2130) * C4107 +
            (C2364 - C2363) * C4026 + (C4213 - C4212) * C4108 +
            (C4486 - C4485) * C4027) *
               C4023 +
           (C297 * C4106 + C513 * C4025 + (C2135 - C2134) * C4107 +
            (C2366 - C2365) * C4026 + (C92188 * C949 - C265 * C801) * C4108 +
            (C92188 * C1139 - C265 * C1015) * C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C4106 +
            (C92188 * C495 - C265 * C348) * C4025 + (C5039 - C5040) * C4107 +
            (C5334 - C5335) * C4026 + C5057 * C4108 + C5343 * C4027) *
               C4023 +
           ((C279 - C280) * C4106 + (C502 - C503) * C4025 +
            (C2127 - C2126) * C4107 + (C2362 - C2361) * C4026 + C5047 * C4108 +
            C5338 * C4027) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C4106 + (C5335 - C5334) * C4025 +
            (C5044 - C5043) * C4107 + (C5337 - C5336) * C4026 +
            (C5049 - C5050) * C4108 + (C5339 - C5340) * C4027) *
               C4023 +
           ((C2126 - C2127) * C4106 + (C2361 - C2362) * C4025 +
            (C4209 - C4208) * C4107 + (C4484 - C4483) * C4026 +
            (C5053 - C5054) * C4108 + (C5341 - C5342) * C4027) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C4106 + C5343 * C4025 + (C5050 - C5049) * C4107 +
            (C5340 - C5339) * C4026 + (C92188 * C5032 - C265 * C4816) * C4108 +
            (C92188 * C5331 - C265 * C5141) * C4027) *
               C4023 +
           (C5047 * C4106 + C5338 * C4025 + (C5054 - C5053) * C4107 +
            (C5342 - C5341) * C4026 + (C92188 * C5033 - C265 * C4817) * C4108 +
            (C92188 * C5332 - C265 * C5142) * C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C92136 * C97 +
          ((C100 * C109 - C89 * C116 + C102 * C110 - C90 * C118 + C104 * C111 -
            C91 * C120 + C106 * C112 - C92 * C122) *
               C265 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576 + C106 * C571 - C92 * C577) *
               C92188) *
              C92177 * C92150 * C92136 * C98 +
          ((C89 * C118 - C100 * C110 + C90 * C120 - C102 * C111 + C91 * C122 -
            C104 * C112 + C92 * C124 - C106 * C113) *
               C265 +
           (C89 * C575 - C100 * C569 + C90 * C576 - C102 * C570 + C91 * C577 -
            C104 * C571 + C92 * C578 - C106 * C572) *
               C92188) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C114 - C100 * C108 + C90 * C116 - C102 * C109 + C91 * C118 -
            C104 * C110 + C92 * C120 - C106 * C111) *
               C265 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569 + C92 * C576 - C106 * C570) *
               C92188) *
              C92177 * C92150 * C790 +
          ((C100 * C797 - C89 * C808 + C102 * C796 - C90 * C806 + C104 * C795 -
            C91 * C804 + C106 * C794 - C92 * C802) *
               C265 +
           (C100 * C1190 - C89 * C1198 + C102 * C1191 - C90 * C1199 +
            C104 * C1192 - C91 * C1200 + C106 * C1193 - C92 * C1201) *
               C92188) *
              C92177 * C92150 * C791 +
          ((C89 * C810 - C100 * C798 + C90 * C812 - C102 * C799 + C91 * C814 -
            C104 * C800 + C92 * C816 - C106 * C801) *
               C265 +
           (C89 * C1202 - C100 * C1194 + C90 * C1203 - C102 * C1195 +
            C91 * C1204 - C104 * C1196 + C92 * C1205 - C106 * C1197) *
               C92188) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C4023 * C808 - C4028 * C797 + C92102 * C806 - C4030 * C796) *
                C265 +
            (C4023 * C1198 - C4028 * C1190 + C92102 * C1199 - C4030 * C1191) *
                C92188) *
               C4026 +
           ((C4023 * C810 - C4028 * C798 + C92102 * C812 - C4030 * C799) *
                C265 +
            (C4023 * C1202 - C4028 * C1194 + C92102 * C1203 - C4030 * C1195) *
                C92188) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C4028 * C109 - C4023 * C116 + C4030 * C110 - C92102 * C118) *
                C265 +
            (C4028 * C568 - C4023 * C574 + C4030 * C569 - C92102 * C575) *
                C92188) *
               C4025 +
           ((C4028 * C796 - C4023 * C806 + C4030 * C795 - C92102 * C804) *
                C265 +
            (C4028 * C1191 - C4023 * C1199 + C4030 * C1192 - C92102 * C1200) *
                C92188) *
               C4026 +
           ((C4028 * C799 - C4023 * C812 + C4030 * C800 - C92102 * C814) *
                C265 +
            (C4028 * C1195 - C4023 * C1203 + C4030 * C1196 - C92102 * C1204) *
                C92188) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C4023 * C118 - C4028 * C110 + C92102 * C120 - C4030 * C111) *
                C265 +
            (C4023 * C575 - C4028 * C569 + C92102 * C576 - C4030 * C570) *
                C92188) *
               C4025 +
           ((C4023 * C804 - C4028 * C795 + C92102 * C802 - C4030 * C794) *
                C265 +
            (C4023 * C1200 - C4028 * C1192 + C92102 * C1201 - C4030 * C1193) *
                C92188) *
               C4026 +
           ((C4023 * C814 - C4028 * C800 + C92102 * C816 - C4030 * C801) *
                C265 +
            (C4023 * C1204 - C4028 * C1196 + C92102 * C1205 - C4030 * C1197) *
                C92188) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4023 * C114 - C4028 * C108 + C92102 * C116 - C4030 * C109) *
                C265 +
            (C4023 * C573 - C4028 * C567 + C92102 * C574 - C4030 * C568) *
                C92188) *
               C4025 +
           ((C5148 - C5149 + C5150 - C5151) * C265 +
            (C5426 - C5427 + C5428 - C5429) * C92188) *
               C4026 +
           C5443 * C4027) *
              C92150 * C790 +
          (((C5149 - C5148 + C5151 - C5150) * C265 +
            (C5427 - C5426 + C5429 - C5428) * C92188) *
               C4025 +
           ((C5157 - C5156 + C5159 - C5158) * C265 +
            (C5432 - C5431 + C5434 - C5433) * C92188) *
               C4026 +
           ((C5164 - C5165 + C5166 - C5167) * C265 +
            (C5435 - C5436 + C5437 - C5438) * C92188) *
               C4027) *
              C92150 * C791 +
          (C5443 * C4025 +
           ((C5165 - C5164 + C5167 - C5166) * C265 +
            (C5436 - C5435 + C5438 - C5437) * C92188) *
               C4026 +
           ((C4023 * C4822 - C4028 * C4816 + C92102 * C4824 - C4030 * C4817) *
                C265 +
            (C4023 * C5423 - C4028 * C5419 + C92102 * C5424 - C4030 * C5420) *
                C92188) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C265 + (C637 - C636) * C92188) * C89 +
           ((C201 - C200) * C265 + (C640 - C639) * C92188) * C90 +
           ((C205 - C204) * C265 + (C643 - C642) * C92188) * C91 +
           ((C208 - C209) * C265 + (C644 - C645) * C92188) * C92) *
              C92150 * C92136 * C98 +
          (C650 * C89 + C651 * C90 +
           ((C209 - C208) * C265 + (C645 - C644) * C92188) * C91 +
           ((C92177 * C188 - C182 * C113) * C265 +
            (C92177 * C634 - C182 * C572) * C92188) *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C265 +
            (C92177 * C629 - C182 * C567) * C92188) *
               C89 +
           ((C196 - C197) * C265 + (C636 - C637) * C92188) * C90 + C650 * C91 +
           C651 * C92) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C265 +
            (C182 * C1190 - C92177 * C1256) * C92188) *
               C89 +
           ((C182 * C796 - C92177 * C877) * C265 +
            (C182 * C1191 - C92177 * C1257) * C92188) *
               C90 +
           ((C182 * C795 - C92177 * C878) * C265 +
            (C182 * C1192 - C92177 * C1258) * C92188) *
               C91 +
           ((C182 * C794 - C92177 * C879) * C265 +
            (C182 * C1193 - C92177 * C1259) * C92188) *
               C92) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C265 +
            (C92177 * C1260 - C182 * C1194) * C92188) *
               C89 +
           ((C92177 * C881 - C182 * C799) * C265 +
            (C92177 * C1261 - C182 * C1195) * C92188) *
               C90 +
           ((C92177 * C882 - C182 * C800) * C265 +
            (C92177 * C1262 - C182 * C1196) * C92188) *
               C91 +
           ((C92177 * C883 - C182 * C801) * C265 +
            (C92177 * C1263 - C182 * C1197) * C92188) *
               C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C265 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C92188) *
               C4023 +
           ((C4122 - C4123 + C4124 - C4125 + C4126 - C4127) * C265 +
            (C4641 - C4642 + C4643 - C4644 + C4645 - C4646) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C265 +
            (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C92188) *
               C4023 +
           ((C4025 * C186 - C4106 * C111 + C4026 * C879 - C4107 * C794 +
             C4027 * C883 - C4108 * C801) *
                C265 +
            (C4025 * C632 - C4106 * C570 + C4026 * C1259 - C4107 * C1193 +
             C4027 * C1263 - C4108 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C265 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C92188) *
               C4023 +
           ((C4110 - C4111 + C4112 - C4113 + C4114 - C4115) * C265 +
            (C4635 - C4636 + C4637 - C4638 + C4639 - C4640) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C265 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C92188) *
               C4023 +
           ((C4106 * C796 - C4025 * C877 + C4107 * C799 - C4026 * C881 +
             C4108 * C4814 - C4027 * C4949) *
                C265 +
            (C4106 * C1191 - C4025 * C1257 + C4107 * C1195 - C4026 * C1261 +
             C4108 * C5418 - C4027 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C265 +
            (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
             C4027 * C5519 - C4108 * C5419) *
                C92188) *
               C4023 +
           ((C4025 * C881 - C4106 * C799 + C4026 * C4949 - C4107 * C4814 +
             C4027 * C4951 - C4108 * C4817) *
                C265 +
            (C4025 * C1261 - C4106 * C1195 + C4026 * C5518 - C4107 * C5418 +
             C4027 * C5520 - C4108 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C92136 * C97 -
          (C740 * C92 + C739 * C91 + C738 * C90 + C737 * C89) * C92150 *
              C92136 * C98 +
          (C738 * C89 + C739 * C90 + C740 * C91 +
           (C265 * C271 - C701 * C113 - C265 * C572 + C92188 * C707) * C92177 *
               C92) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92177 *
               C89 +
           C737 * C90 + C738 * C91 + C739 * C92) *
              C92150 * C790 -
          ((C265 * C945 - C701 * C794 - C265 * C1193 + C92188 * C1314) *
               C92177 * C92 +
           (C265 * C944 - C701 * C795 - C265 * C1192 + C92188 * C1315) *
               C92177 * C91 +
           (C265 * C943 - C701 * C796 - C265 * C1191 + C92188 * C1316) *
               C92177 * C90 +
           (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
               C92177 * C89) *
              C92150 * C791 +
          ((C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
               C92177 * C89 +
           (C265 * C947 - C701 * C799 - C265 * C1195 + C92188 * C1319) *
               C92177 * C90 +
           (C265 * C948 - C701 * C800 - C265 * C1196 + C92188 * C1320) *
               C92177 * C91 +
           (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
               C92177 * C92) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            (C265 * C942 - C701 * C797 - C265 * C1190 + C92188 * C1317) *
                C4026 +
            (C265 * C946 - C701 * C798 - C265 * C1194 + C92188 * C1318) *
                C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C92136 * C97 -
          ((C4740 + C4731 + C4732) * C92102 + (C4739 + C4722 + C4721) * C4023) *
              C92150 * C92136 * C98 +
          ((C4732 + C4731 + C4740) * C4023 +
           (C735 * C4025 + C2593 * C4026 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C4027) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C4025 +
            C5624 * C4026 + C5625 * C4027) *
               C4023 +
           (C4721 + C4722 + C4739) * C92102) *
              C92150 * C790 -
          ((C5626 * C4027 + C4737 * C4026 + C2595 * C4025) * C92102 +
           (C5627 * C4027 + C5625 * C4026 + C5624 * C4025) * C4023) *
              C92150 * C791 +
          ((C5625 * C4025 + C5627 * C4026 +
            (C265 * C5032 - C701 * C4816 - C265 * C5419 + C92188 * C5597) *
                C4027) *
               C4023 +
           (C4737 * C4025 + C5626 * C4026 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C4027) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92188 * C92359 +
            (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
               C92150 * C1969 -
           ((C45596 + C45597) * C92188 * C44794 +
            (C45595 + C45594) * C92188 * C92360 +
            (C45593 + C45592) * C92188 * C92359) *
               C92150 * C1970) *
              C1971 +
          (((C47035 + C47036) * C92188 * C92359 +
            (C47037 + C47038) * C92188 * C92360 +
            (C90121 * C4818 - C44796 * C4814 - C90121 * C4819 + C92320 * C4826 +
             C90114 * C6488 - C44798 * C6487 - C90114 * C6489 +
             C92102 * C6490) *
                C92188 * C44794) *
               C92150 * C1970 -
           ((C47038 + C47037) * C92188 * C44794 +
            (C47036 + C47035) * C92188 * C92360 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92188 * C92359) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C90121 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92320 +
            (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
            (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
               C92188 * C92150 * C1969 +
           ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C90121 +
            (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
             C44875 * C4821 - C44794 * C4952) *
                C92320 +
            (C47137 - C47138 + C47139 - C47140 + C47141 - C47142) * C90114 +
            (C47143 - C47144 + C47145 - C47146 + C47147 - C47148) * C92102) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C90121 +
            (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92320 +
            (C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C90114 +
            (C44895 - C44896 + C44897 - C44898 + C44899 - C44900) * C92102) *
               C92188 * C92150 * C1969 +
           ((C47138 - C47137 + C47140 - C47139 + C47142 - C47141) * C90121 +
            (C47144 - C47143 + C47146 - C47145 + C47148 - C47147) * C92320 +
            (C92359 * C878 - C44873 * C795 + C92360 * C882 - C44874 * C800 +
             C44794 * C6617 - C44875 * C6487) *
                C90114 +
            (C92359 * C886 - C44873 * C805 + C92360 * C890 - C44874 * C815 +
             C44794 * C6618 - C44875 * C6489) *
                C92102) *
               C92188 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C92188 * C266 - C265 * C108) * C90121 +
                       (C92188 * C272 - C265 * C115) * C92320 +
                       (C279 - C280) * C90114 + (C281 - C282) * C92102) *
                          C92359 +
                      ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
                       C6732 * C90114 + C6733 * C92102) *
                          C92360 +
                      C45754 * C44794) *
                         C92150 * C1969 +
                     (((C5040 - C5039) * C90121 + (C5042 - C5041) * C92320 +
                       C6734 * C90114 + C6735 * C92102) *
                          C92359 +
                      ((C5044 - C5043) * C90121 + (C5046 - C5045) * C92320 +
                       C6736 * C90114 + C6737 * C92102) *
                          C92360 +
                      ((C5049 - C5050) * C90121 + (C5051 - C5052) * C92320 +
                       (C5053 - C5054) * C90114 + (C5055 - C5056) * C92102) *
                          C44794) *
                         C92150 * C1970) *
                        C1971 +
                    ((((C280 - C279) * C90121 + (C282 - C281) * C92320 +
                       (C284 - C283) * C90114 + (C286 - C285) * C92102) *
                          C92359 +
                      (C6734 * C90121 + C6735 * C92320 + C17152 * C90114 +
                       C17153 * C92102) *
                          C92360 +
                      (C6736 * C90121 + C6737 * C92320 +
                       (C4212 - C4213) * C90114 + (C4214 - C4215) * C92102) *
                          C44794) *
                         C92150 * C1969 +
                     ((C6732 * C90121 + C6733 * C92320 + C14887 * C90114 +
                       C14888 * C92102) *
                          C92359 +
                      (C5047 * C90121 + C5048 * C92320 +
                       (C4213 - C4212) * C90114 + (C4215 - C4214) * C92102) *
                          C92360 +
                      ((C5054 - C5053) * C90121 + (C5056 - C5055) * C92320 +
                       (C92188 * C6729 - C265 * C6487) * C90114 +
                       (C92188 * C6730 - C265 * C6489) * C92102) *
                          C44794) *
                         C92150 * C1970) *
                        C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C44873 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92359 +
            (C45829 - C45830 + C45831 - C45832) * C44874 +
            (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
            C45858 * C44794) *
               C92188 * C92150 * C1969 +
           ((C45830 - C45829 + C45832 - C45831) * C44873 +
            (C45834 - C45833 + C45836 - C45835) * C92359 +
            (C45838 - C45837 + C45840 - C45839) * C44874 +
            (C45842 - C45841 + C45844 - C45843) * C92360 +
            (C45845 - C45846 + C45847 - C45848) * C44875 +
            (C45849 - C45850 + C45851 - C45852) * C44794) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C44873 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92359 +
            (C47345 - C47346 + C47347 - C47348) * C44874 +
            (C47349 - C47350 + C47351 - C47352) * C92360 +
            (C47353 - C47354 + C47355 - C47356) * C44875 +
            (C47357 - C47358 + C47359 - C47360) * C44794) *
               C92188 * C92150 * C1969 +
           ((C47346 - C47345 + C47348 - C47347) * C44873 +
            (C47350 - C47349 + C47352 - C47351) * C92359 +
            (C47354 - C47353 + C47356 - C47355) * C44874 +
            (C47358 - C47357 + C47360 - C47359) * C92360 +
            (C92320 * C4818 - C90121 * C4814 + C92102 * C6488 -
             C90114 * C6487) *
                C44875 +
            (C92320 * C5144 - C90121 * C5140 + C92102 * C6836 -
             C90114 * C6835) *
                C44794) *
               C92188 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92320 +
            (C45162 + C45163 + C45164) * C92102) *
               C92188 * C92150 * C1969 -
           ((C47477 + C47478 + C47479) * C92102 +
            (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
             C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
             C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
                C92320) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C47479 + C47478 + C47477) * C92320 +
            (C44873 * C878 - C45122 * C795 - C44873 * C1010 + C92359 * C1075 +
             C44874 * C882 - C45123 * C800 - C44874 * C1014 + C92360 * C1080 +
             C44875 * C6617 - C45124 * C6487 - C44875 * C6835 +
             C44794 * C6951) *
                C92102) *
               C92188 * C92150 * C1970 -
           ((C45165 + C45166 + C45167) * C92102 +
            (C45164 + C45163 + C45162) * C92320) *
               C92188 * C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C44873 +
             (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
             (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
                C92320 +
            ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
             C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
                C92102) *
               C92150 * C1969 +
           (((C5040 - C5039) * C44873 + (C5335 - C5334) * C92359 +
             (C5044 - C5043) * C44874 + (C5337 - C5336) * C92360 +
             (C5049 - C5050) * C44875 + (C5339 - C5340) * C44794) *
                C92320 +
            (C6734 * C44873 + C7074 * C92359 + C6736 * C44874 + C7075 * C92360 +
             (C5053 - C5054) * C44875 + (C5341 - C5342) * C44794) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C44873 + (C503 - C502) * C92359 + C6734 * C44874 +
             C7074 * C92360 + C6736 * C44875 + C7075 * C44794) *
                C92320 +
            ((C284 - C283) * C44873 + (C506 - C505) * C92359 + C17152 * C44874 +
             C17488 * C92360 + (C4212 - C4213) * C44875 +
             (C4485 - C4486) * C44794) *
                C92102) *
               C92150 * C1969 +
           ((C6732 * C44873 + C7073 * C92359 + C5047 * C44874 + C5338 * C92360 +
             (C5054 - C5053) * C44875 + (C5342 - C5341) * C44794) *
                C92320 +
            (C14887 * C44873 + C15159 * C92359 + (C4213 - C4212) * C44874 +
             (C4486 - C4485) * C92360 +
             (C92188 * C6729 - C265 * C6487) * C44875 +
             (C92188 * C7071 - C265 * C6835) * C44794) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C265 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92188) *
                C92359 +
            ((C45829 - C45830 + C45831 - C45832) * C265 +
             (C46081 - C46082 + C46083 - C46084) * C92188) *
                C92360 +
            C46098 * C44794) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C265 +
             (C46082 - C46081 + C46084 - C46083) * C92188) *
                C92359 +
            ((C45838 - C45837 + C45840 - C45839) * C265 +
             (C46087 - C46086 + C46089 - C46088) * C92188) *
                C92360 +
            ((C45845 - C45846 + C45847 - C45848) * C265 +
             (C46090 - C46091 + C46092 - C46093) * C92188) *
                C44794) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C265 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C92188) *
                C92359 +
            ((C47345 - C47346 + C47347 - C47348) * C265 +
             (C47676 - C47677 + C47678 - C47679) * C92188) *
                C92360 +
            ((C47353 - C47354 + C47355 - C47356) * C265 +
             (C47680 - C47681 + C47682 - C47683) * C92188) *
                C44794) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C265 +
             (C47677 - C47676 + C47679 - C47678) * C92188) *
                C92359 +
            ((C47354 - C47353 + C47356 - C47355) * C265 +
             (C47681 - C47680 + C47683 - C47682) * C92188) *
                C92360 +
            ((C92320 * C4818 - C90121 * C4814 + C92102 * C6488 -
              C90114 * C6487) *
                 C265 +
             (C92320 * C5422 - C90121 * C5418 + C92102 * C7174 -
              C90114 * C7173) *
                 C92188) *
                C44794) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C265 +
             (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
              C44794 * C1260 - C44875 * C1194) *
                 C92188) *
                C92320 +
            ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
             (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
              C44875 * C4815 - C44794 * C4948) *
                 C265 +
             (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 -
              C92360 * C1260 + C44875 * C5417 - C44794 * C5517) *
                 C92188) *
                C92320 +
            ((C47137 - C47138 + C47139 - C47140 + C47141 - C47142) * C265 +
             (C47782 - C47783 + C47784 - C47785 + C47786 - C47787) * C92188) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C265 +
             (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92188) *
                C92320 +
            ((C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C265 +
             (C45396 - C45397 + C45398 - C45399 + C45400 - C45401) * C92188) *
                C92102) *
               C92150 * C1969 +
           (((C47138 - C47137 + C47140 - C47139 + C47142 - C47141) * C265 +
             (C47783 - C47782 + C47785 - C47784 + C47787 - C47786) * C92188) *
                C92320 +
            ((C92359 * C878 - C44873 * C795 + C92360 * C882 - C44874 * C800 +
              C44794 * C6617 - C44875 * C6487) *
                 C265 +
             (C92359 * C1258 - C44873 * C1192 + C92360 * C1262 -
              C44874 * C1196 + C44794 * C7281 - C44875 * C7173) *
                 C92188) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92359 +
             C5624 * C92360 + C5625 * C44794) *
                C92320 +
            (C45476 + C45477 + C45478) * C92102) *
               C92150 * C1969 -
           ((C47886 + C47887 + C47888) * C92102 +
            (C5627 * C44794 + C5625 * C92360 + C5624 * C92359) * C92320) *
               C92150 * C1970) *
              C1971 +
          (((C47888 + C47887 + C47886) * C92320 +
            (C2594 * C92359 + C4738 * C92360 +
             (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                 C44794) *
                C92102) *
               C92150 * C1970 -
           ((C45479 + C45480 + C45481) * C92102 +
            (C45478 + C45477 + C45476) * C92320) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92188 * C92359 +
            (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
               C2664 -
           ((C48935 + C48936) * C92188 * C44794 +
            (C48937 + C48938) * C92188 * C92360 +
            (C90114 * C1387 - C44798 * C1377 - C90114 * C1388 + C92102 * C1401 +
             C90121 * C1389 - C44796 * C1378 - C90121 * C1390 +
             C92320 * C1402) *
                C92188 * C92359) *
               C2665) *
              C1969 +
          (((C48938 + C48937) * C92188 * C92359 +
            (C48936 + C48935) * C92188 * C92360 +
            (C90121 * C8456 - C44796 * C8454 - C90121 * C8457 + C92320 * C8460 +
             C90114 * C8458 - C44798 * C8455 - C90114 * C8459 +
             C92102 * C8461) *
                C92188 * C44794) *
               C2665 -
           ((C45596 + C45597) * C92188 * C44794 +
            (C45595 + C45594) * C92188 * C92360 +
            (C45593 + C45592) * C92188 * C92359) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C90121 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92320 +
            (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
            (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
               C92188 * C2664 +
           ((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 - C92360 * C3439 +
             C44875 * C5702 - C44794 * C5799) *
                C90121 +
            (C44873 * C1390 - C92359 * C1465 + C44874 * C3362 - C92360 * C3443 +
             C44875 * C5710 - C44794 * C5805) *
                C92320 +
            (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C90114 +
            (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92102) *
               C92188 * C2665) *
              C1969 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C90121 +
            (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
             C44875 * C4821 - C44794 * C4952) *
                C92320 +
            (C47137 - C47138 + C47139 - C47140 + C47141 - C47142) * C90114 +
            (C47143 - C47144 + C47145 - C47146 + C47147 - C47148) * C92102) *
               C92188 * C2664 +
           ((C92359 * C3439 - C44873 * C3357 + C92360 * C5799 - C44874 * C5702 +
             C44794 * C8588 - C44875 * C8454) *
                C90121 +
            (C92359 * C3443 - C44873 * C3362 + C92360 * C5805 - C44874 * C5710 +
             C44794 * C8590 - C44875 * C8457) *
                C92320 +
            (C92359 * C3440 - C44873 * C3358 + C92360 * C5800 - C44874 * C5701 +
             C44794 * C8589 - C44875 * C8455) *
                C90114 +
            (C92359 * C3444 - C44873 * C3364 + C92360 * C5806 - C44874 * C5708 +
             C44794 * C8591 - C44875 * C8459) *
                C92102) *
               C92188 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C92188 * C266 - C265 * C108) * C90121 +
                       (C92188 * C272 - C265 * C115) * C92320 +
                       (C279 - C280) * C90114 + (C281 - C282) * C92102) *
                          C92359 +
                      ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
                       C6732 * C90114 + C6733 * C92102) *
                          C92360 +
                      C45754 * C44794) *
                         C2664 +
                     (((C265 * C1378 - C92188 * C1523) * C90121 +
                       (C265 * C1390 - C92188 * C1531) * C92320 +
                       (C2819 - C2820) * C90114 + (C2821 - C2822) * C92102) *
                          C92359 +
                      ((C8695 - C8696) * C90121 + (C8697 - C8698) * C92320 +
                       (C7705 - C7706) * C90114 + (C7707 - C7708) * C92102) *
                          C92360 +
                      ((C8699 - C8700) * C90121 + (C8701 - C8702) * C92320 +
                       (C7709 - C7710) * C90114 + (C7711 - C7712) * C92102) *
                          C44794) *
                         C2665) *
                        C1969 +
                    ((((C5040 - C5039) * C90121 + (C5042 - C5041) * C92320 +
                       C6734 * C90114 + C6735 * C92102) *
                          C92359 +
                      ((C5044 - C5043) * C90121 + (C5046 - C5045) * C92320 +
                       C6736 * C90114 + C6737 * C92102) *
                          C92360 +
                      ((C5049 - C5050) * C90121 + (C5051 - C5052) * C92320 +
                       (C5053 - C5054) * C90114 + (C5055 - C5056) * C92102) *
                          C44794) *
                         C2664 +
                     (((C8696 - C8695) * C90121 + (C8698 - C8697) * C92320 +
                       (C7706 - C7705) * C90114 + (C7708 - C7707) * C92102) *
                          C92359 +
                      ((C8700 - C8699) * C90121 + (C8702 - C8701) * C92320 +
                       (C7710 - C7709) * C90114 + (C7712 - C7711) * C92102) *
                          C92360 +
                      ((C39156 - C39155) * C90121 + (C39158 - C39157) * C92320 +
                       (C92188 * C8691 - C265 * C8455) * C90114 +
                       (C92188 * C8693 - C265 * C8459) * C92102) *
                          C44794) *
                         C2665) *
                        C1970) *
                   C92124) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C44873 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92359 +
            (C45829 - C45830 + C45831 - C45832) * C44874 +
            (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
            C45858 * C44794) *
               C92188 * C2664 +
           ((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 -
             C92102 * C1387) *
                C44873 +
            (C90121 * C1589 - C92320 * C1597 + C90114 * C1590 -
             C92102 * C1598) *
                C92359 +
            (C49233 - C49234 + C49235 - C49236) * C44874 +
            (C49237 - C49238 + C49239 - C49240) * C92360 +
            (C49241 - C49242 + C49243 - C49244) * C44875 +
            (C49245 - C49246 + C49247 - C49248) * C44794) *
               C92188 * C2665) *
              C1969 +
          (((C45830 - C45829 + C45832 - C45831) * C44873 +
            (C45834 - C45833 + C45836 - C45835) * C92359 +
            (C45838 - C45837 + C45840 - C45839) * C44874 +
            (C45842 - C45841 + C45844 - C45843) * C92360 +
            (C45845 - C45846 + C45847 - C45848) * C44875 +
            (C45849 - C45850 + C45851 - C45852) * C44794) *
               C92188 * C2664 +
           ((C49234 - C49233 + C49236 - C49235) * C44873 +
            (C49238 - C49237 + C49240 - C49239) * C92359 +
            (C49242 - C49241 + C49244 - C49243) * C44874 +
            (C49246 - C49245 + C49248 - C49247) * C92360 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C44875 +
            (C92320 * C8802 - C90121 * C8800 + C92102 * C8803 -
             C90114 * C8801) *
                C44794) *
               C92188 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92320 +
            (C45162 + C45163 + C45164) * C92102) *
               C92188 * C2664 -
           ((C48409 + C48410 + C48411) * C92102 +
            (C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058 +
             C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
             C44873 * C1457 - C45122 * C1378 - C44873 * C1589 +
             C92359 * C1658) *
                C92320) *
               C92188 * C2665) *
              C1969 +
          (((C44873 * C3439 - C45122 * C3357 - C44873 * C3587 + C92359 * C3661 +
             C44874 * C5799 - C45123 * C5702 - C44874 * C5971 + C92360 * C6058 +
             C44875 * C8588 - C45124 * C8454 - C44875 * C8800 +
             C44794 * C8918) *
                C92320 +
            (C44873 * C3440 - C45122 * C3358 - C44873 * C3588 + C92359 * C3662 +
             C44874 * C5800 - C45123 * C5701 - C44874 * C5972 + C92360 * C6057 +
             C44875 * C8589 - C45124 * C8455 - C44875 * C8801 +
             C44794 * C8919) *
                C92102) *
               C92188 * C2665 -
           ((C47477 + C47478 + C47479) * C92102 +
            (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
             C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
             C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
                C92320) *
               C92188 * C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C44873 +
             (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
             (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
                C92320 +
            ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
             C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C44873 +
             (C265 * C1589 - C92188 * C1713) * C92359 +
             (C8695 - C8696) * C44874 + (C9021 - C9022) * C92360 +
             (C8699 - C8700) * C44875 + (C9023 - C9024) * C44794) *
                C92320 +
            ((C2819 - C2820) * C44873 + (C3054 - C3055) * C92359 +
             (C7705 - C7706) * C44874 + (C8032 - C8033) * C92360 +
             (C7709 - C7710) * C44875 + (C8034 - C8035) * C44794) *
                C92102) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C44873 + (C5335 - C5334) * C92359 +
             (C5044 - C5043) * C44874 + (C5337 - C5336) * C92360 +
             (C5049 - C5050) * C44875 + (C5339 - C5340) * C44794) *
                C92320 +
            (C6734 * C44873 + C7074 * C92359 + C6736 * C44874 + C7075 * C92360 +
             (C5053 - C5054) * C44875 + (C5341 - C5342) * C44794) *
                C92102) *
               C2664 +
           (((C8696 - C8695) * C44873 + (C9022 - C9021) * C92359 +
             (C8700 - C8699) * C44874 + (C9024 - C9023) * C92360 +
             (C39156 - C39155) * C44875 + (C39374 - C39373) * C44794) *
                C92320 +
            ((C7706 - C7705) * C44873 + (C8033 - C8032) * C92359 +
             (C7710 - C7709) * C44874 + (C8035 - C8034) * C92360 +
             (C92188 * C8691 - C265 * C8455) * C44875 +
             (C92188 * C9019 - C265 * C8801) * C44794) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C265 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92188) *
                C92359 +
            ((C45829 - C45830 + C45831 - C45832) * C265 +
             (C46081 - C46082 + C46083 - C46084) * C92188) *
                C92360 +
            C46098 * C44794) *
               C2664 +
           (((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 -
              C92102 * C1387) *
                 C265 +
             (C90121 * C1771 - C92320 * C1779 + C90114 * C1772 -
              C92102 * C1780) *
                 C92188) *
                C92359 +
            ((C49233 - C49234 + C49235 - C49236) * C265 +
             (C49543 - C49544 + C49545 - C49546) * C92188) *
                C92360 +
            ((C49241 - C49242 + C49243 - C49244) * C265 +
             (C49547 - C49548 + C49549 - C49550) * C92188) *
                C44794) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C265 +
             (C46082 - C46081 + C46084 - C46083) * C92188) *
                C92359 +
            ((C45838 - C45837 + C45840 - C45839) * C265 +
             (C46087 - C46086 + C46089 - C46088) * C92188) *
                C92360 +
            ((C45845 - C45846 + C45847 - C45848) * C265 +
             (C46090 - C46091 + C46092 - C46093) * C92188) *
                C44794) *
               C2664 +
           (((C49234 - C49233 + C49236 - C49235) * C265 +
             (C49544 - C49543 + C49546 - C49545) * C92188) *
                C92359 +
            ((C49242 - C49241 + C49244 - C49243) * C265 +
             (C49548 - C49547 + C49550 - C49549) * C92188) *
                C92360 +
            ((C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
              C90114 * C8455) *
                 C265 +
             (C92320 * C9124 - C90121 * C9122 + C92102 * C9125 -
              C90114 * C9123) *
                 C92188) *
                C44794) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C265 +
             (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
              C44794 * C1260 - C44875 * C1194) *
                 C92188) *
                C92320 +
            ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
             (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
                C92102) *
               C2664 +
           (((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 -
              C92360 * C3439 + C44875 * C5702 - C44794 * C5799) *
                 C265 +
             (C44873 * C1771 - C92359 * C1837 + C44874 * C3801 -
              C92360 * C3875 + C44875 * C6217 - C44794 * C6303) *
                 C92188) *
                C92320 +
            ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C265 +
             (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92188) *
                C92102) *
               C2665) *
              C1969 +
          ((((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
              C44875 * C4815 - C44794 * C4948) *
                 C265 +
             (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 -
              C92360 * C1260 + C44875 * C5417 - C44794 * C5517) *
                 C92188) *
                C92320 +
            ((C47137 - C47138 + C47139 - C47140 + C47141 - C47142) * C265 +
             (C47782 - C47783 + C47784 - C47785 + C47786 - C47787) * C92188) *
                C92102) *
               C2664 +
           (((C92359 * C3439 - C44873 * C3357 + C92360 * C5799 -
              C44874 * C5702 + C44794 * C8588 - C44875 * C8454) *
                 C265 +
             (C92359 * C3875 - C44873 * C3801 + C92360 * C6303 -
              C44874 * C6217 + C44794 * C9232 - C44875 * C9122) *
                 C92188) *
                C92320 +
            ((C92359 * C3440 - C44873 * C3358 + C92360 * C5800 -
              C44874 * C5701 + C44794 * C8589 - C44875 * C8455) *
                 C265 +
             (C92359 * C3876 - C44873 * C3802 + C92360 * C6304 -
              C44874 * C6218 + C44794 * C9233 - C44875 * C9123) *
                 C92188) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92359 +
             C5624 * C92360 + C5625 * C44794) *
                C92320 +
            (C45476 + C45477 + C45478) * C92102) *
               C2664 -
           ((C48810 + C48811 + C48812) * C92102 +
            (C9347 * C44794 + C9348 * C92360 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C92359) *
                C92320) *
               C2665) *
              C1969 +
          (((C9348 * C92359 + C9347 * C92360 + C39589 * C44794) * C92320 +
            (C8354 * C92359 + C8353 * C92360 +
             (C265 * C8691 - C701 * C8455 - C265 * C9123 + C92188 * C9333) *
                 C44794) *
                C92102) *
               C2665 -
           ((C47886 + C47887 + C47888) * C92102 +
            (C5627 * C44794 + C5625 * C92360 + C5624 * C92359) * C92320) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92188 * C92359 +
           (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
              C92150 * C790 -
          ((C45596 + C45597) * C92188 * C44794 +
           (C45595 + C45594) * C92188 * C92360 +
           (C45593 + C45592) * C92188 * C92359) *
              C92150 * C791 +
          (C45599 * C92359 + (C45597 + C45596) * C92188 * C92360 +
           (C90121 * C4822 - C44796 * C4816 - C90121 * C4823 + C92320 * C4828 +
            C90114 * C4824 - C44798 * C4817 - C90114 * C4825 + C92102 * C4829) *
               C92188 * C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92188 * C92359 +
           (C90121 * C808 - C44796 * C797 - C90121 * C809 + C92320 * C821 +
            C90114 * C806 - C44798 * C796 - C90114 * C807 + C92102 * C820) *
               C92188 * C92360 +
           (C90121 * C810 - C44796 * C798 - C90121 * C811 + C92320 * C822 +
            C90114 * C812 - C44798 * C799 - C90114 * C813 + C92102 * C823) *
               C92188 * C44794) *
              C92150 * C92136 * C97 -
          ((C90114 * C814 - C44798 * C800 - C90114 * C815 + C92102 * C824 +
            C90121 * C812 - C44796 * C799 - C90121 * C813 + C92320 * C823) *
               C92188 * C44794 +
           (C90114 * C804 - C44798 * C795 - C90114 * C805 + C92102 * C819 +
            C90121 * C806 - C44796 * C796 - C90121 * C807 + C92320 * C820) *
               C92188 * C92360 +
           (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
            C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
               C92188 * C92359) *
              C92150 * C92136 * C98 +
          ((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
            C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
               C92188 * C92359 +
           (C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
            C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
               C92188 * C92360 +
           (C90121 * C814 - C44796 * C800 - C90121 * C815 + C92320 * C824 +
            C90114 * C816 - C44798 * C801 - C90114 * C817 + C92102 * C825) *
               C92188 * C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92188 * C92359 +
           (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
              C1372 -
          ((C90114 * C5707 - C44798 * C5701 - C90114 * C5708 + C92102 * C5719 +
            C90121 * C5709 - C44796 * C5702 - C90121 * C5710 + C92320 * C5720) *
               C92188 * C44794 +
           (C90114 * C3363 - C44798 * C3358 - C90114 * C3364 + C92102 * C3370 +
            C90121 * C3361 - C44796 * C3357 - C90121 * C3362 + C92320 * C3369) *
               C92188 * C92360 +
           (C90114 * C1387 - C44798 * C1377 - C90114 * C1388 + C92102 * C1401 +
            C90121 * C1389 - C44796 * C1378 - C90121 * C1390 + C92320 * C1402) *
               C92188 * C92359) *
              C1373 +
          ((C90121 * C1391 - C44796 * C1379 - C90121 * C1392 + C92320 * C1403 +
            C90114 * C1393 - C44798 * C1380 - C90114 * C1394 + C92102 * C1404) *
               C92188 * C92359 +
           (C90121 * C5711 - C44796 * C5703 - C90121 * C5712 + C92320 * C5721 +
            C90114 * C5713 - C44798 * C5704 - C90114 * C5714 + C92102 * C5722) *
               C92188 * C92360 +
           (C90121 * C5715 - C44796 * C5705 - C90121 * C5716 + C92320 * C5723 +
            C90114 * C5717 - C44798 * C5706 - C90114 * C5718 + C92102 * C5724) *
               C92188 * C44794) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C90121 +
           (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
            C44794 * C888 - C44875 * C811) *
               C92320 +
           (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
           (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
              C92188 * C92150 * C790 +
          ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
            C44875 * C4815 - C44794 * C4948) *
               C90121 +
           (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
            C44875 * C4821 - C44794 * C4952) *
               C92320 +
           (C44873 * C796 - C92359 * C877 + C44874 * C799 - C92360 * C881 +
            C44875 * C4814 - C44794 * C4949) *
               C90114 +
           (C44873 * C807 - C92359 * C885 + C44874 * C813 - C92360 * C889 +
            C44875 * C4819 - C44794 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
            C44794 * C4950 - C44875 * C4816) *
               C90121 +
           (C92359 * C888 - C44873 * C811 + C92360 * C4952 - C44874 * C4821 +
            C44794 * C4954 - C44875 * C4823) *
               C92320 +
           (C92359 * C881 - C44873 * C799 + C92360 * C4949 - C44874 * C4814 +
            C44794 * C4951 - C44875 * C4817) *
               C90114 +
           (C92359 * C889 - C44873 * C813 + C92360 * C4953 - C44874 * C4819 +
            C44794 * C4955 - C44875 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C90121 +
           (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
            C44794 * C888 - C44875 * C811) *
               C92320 +
           (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
           (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C90121 +
           (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92320 +
           (C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C90114 +
           (C44895 - C44896 + C44897 - C44898 + C44899 - C44900) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C90121 +
           (C44896 - C44895 + C44898 - C44897 + C44900 - C44899) * C92320 +
           (C92359 * C186 - C44873 * C111 + C92360 * C879 - C44874 * C794 +
            C44794 * C883 - C44875 * C801) *
               C90114 +
           (C92359 * C192 - C44873 * C121 + C92360 * C887 - C44874 * C803 +
            C44794 * C891 - C44875 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C90121 +
           (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
            C44794 * C888 - C44875 * C811) *
               C92320 +
           (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
           (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
              C92188 * C1372 +
          ((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 - C92360 * C3439 +
            C44875 * C5702 - C44794 * C5799) *
               C90121 +
           (C44873 * C1390 - C92359 * C1465 + C44874 * C3362 - C92360 * C3443 +
            C44875 * C5710 - C44794 * C5805) *
               C92320 +
           (C44873 * C1377 - C92359 * C1458 + C44874 * C3358 - C92360 * C3440 +
            C44875 * C5701 - C44794 * C5800) *
               C90114 +
           (C44873 * C1388 - C92359 * C1466 + C44874 * C3364 - C92360 * C3444 +
            C44875 * C5708 - C44794 * C5806) *
               C92102) *
              C92188 * C1373 +
          ((C92359 * C1461 - C44873 * C1379 + C92360 * C5801 - C44874 * C5703 +
            C44794 * C5802 - C44875 * C5705) *
               C90121 +
           (C92359 * C1469 - C44873 * C1392 + C92360 * C5807 - C44874 * C5712 +
            C44794 * C5808 - C44875 * C5716) *
               C92320 +
           (C92359 * C1462 - C44873 * C1380 + C92360 * C5803 - C44874 * C5704 +
            C44794 * C5804 - C44875 * C5706) *
               C90114 +
           (C92359 * C1470 - C44873 * C1394 + C92360 * C5809 - C44874 * C5714 +
            C44794 * C5810 - C44875 * C5718) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C90121 +
            (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
            (C281 - C282) * C92102) *
               C92359 +
           ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
            C6732 * C90114 + C6733 * C92102) *
               C92360 +
           C45754 * C44794) *
              C92150 * C790 +
          (((C5040 - C5039) * C90121 + (C5042 - C5041) * C92320 +
            C6734 * C90114 + C6735 * C92102) *
               C92359 +
           ((C5044 - C5043) * C90121 + (C5046 - C5045) * C92320 +
            C6736 * C90114 + C6737 * C92102) *
               C92360 +
           ((C5049 - C5050) * C90121 + (C5051 - C5052) * C92320 +
            (C5053 - C5054) * C90114 + (C5055 - C5056) * C92102) *
               C44794) *
              C92150 * C791 +
          (C45754 * C92359 +
           (C36865 * C90121 + C36866 * C92320 + (C5054 - C5053) * C90114 +
            (C5056 - C5055) * C92102) *
               C92360 +
           ((C36868 - C36867) * C90121 + (C36870 - C36869) * C92320 +
            (C92188 * C5033 - C265 * C4817) * C90114 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C90121 +
            (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
            (C281 - C282) * C92102) *
               C92359 +
           ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
            C6732 * C90114 + C6733 * C92102) *
               C92360 +
           (C5057 * C90121 + C5058 * C92320 + C5047 * C90114 + C5048 * C92102) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C90121 + (C282 - C281) * C92320 +
            (C284 - C283) * C90114 + (C286 - C285) * C92102) *
               C92359 +
           (C6734 * C90121 + C6735 * C92320 + C17152 * C90114 +
            C17153 * C92102) *
               C92360 +
           (C6736 * C90121 + C6737 * C92320 + (C4212 - C4213) * C90114 +
            (C4214 - C4215) * C92102) *
               C44794) *
              C92150 * C92136 * C98 +
          ((C295 * C90121 + C296 * C92320 + C297 * C90114 + C298 * C92102) *
               C92359 +
           (C14887 * C90121 + C14888 * C92320 + (C2135 - C2134) * C90114 +
            (C2137 - C2136) * C92102) *
               C92360 +
           ((C4213 - C4212) * C90121 + (C4215 - C4214) * C92320 +
            (C92188 * C949 - C265 * C801) * C90114 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C90121 +
            (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
            (C281 - C282) * C92102) *
               C92359 +
           ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
            C6732 * C90114 + C6733 * C92102) *
               C92360 +
           C45754 * C44794) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C90121 +
            (C265 * C1390 - C92188 * C1531) * C92320 +
            (C2819 - C2820) * C90114 + (C2821 - C2822) * C92102) *
               C92359 +
           ((C8695 - C8696) * C90121 + (C8697 - C8698) * C92320 +
            (C7705 - C7706) * C90114 + (C7707 - C7708) * C92102) *
               C92360 +
           ((C8699 - C8700) * C90121 + (C8701 - C8702) * C92320 +
            (C7709 - C7710) * C90114 + (C7711 - C7712) * C92102) *
               C44794) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C90121 +
            (C92188 * C1535 - C265 * C1392) * C92320 +
            (C92188 * C1528 - C265 * C1380) * C90114 +
            (C92188 * C1536 - C265 * C1394) * C92102) *
               C92359 +
           ((C92188 * C5887 - C265 * C5703) * C90121 +
            (C92188 * C5893 - C265 * C5712) * C92320 +
            (C92188 * C5888 - C265 * C5704) * C90114 +
            (C92188 * C5894 - C265 * C5714) * C92102) *
               C92360 +
           ((C92188 * C5889 - C265 * C5705) * C90121 +
            (C92188 * C5895 - C265 * C5716) * C92320 +
            (C92188 * C5890 - C265 * C5706) * C90114 +
            (C92188 * C5896 - C265 * C5718) * C92102) *
               C44794) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C44873 +
           (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
               C92359 +
           (C45829 - C45830 + C45831 - C45832) * C44874 +
           (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
           C45858 * C44794) *
              C92188 * C92150 * C790 +
          ((C45830 - C45829 + C45832 - C45831) * C44873 +
           (C45834 - C45833 + C45836 - C45835) * C92359 +
           (C45838 - C45837 + C45840 - C45839) * C44874 +
           (C45842 - C45841 + C45844 - C45843) * C92360 +
           (C45845 - C45846 + C45847 - C45848) * C44875 +
           (C45849 - C45850 + C45851 - C45852) * C44794) *
              C92188 * C92150 * C791 +
          (C45857 * C44873 + C45858 * C92359 +
           (C45846 - C45845 + C45848 - C45847) * C44874 +
           (C45850 - C45849 + C45852 - C45851) * C92360 +
           (C92320 * C4822 - C90121 * C4816 + C92102 * C4824 - C90114 * C4817) *
               C44875 +
           (C92320 * C5145 - C90121 * C5141 + C92102 * C5146 - C90114 * C5142) *
               C44794) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C44873 +
           (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
               C92359 +
           (C92320 * C808 - C90121 * C797 + C92102 * C806 - C90114 * C796) *
               C44874 +
           (C92320 * C1016 - C90121 * C1008 + C92102 * C1017 - C90114 * C1009) *
               C92360 +
           (C92320 * C810 - C90121 * C798 + C92102 * C812 - C90114 * C799) *
               C44875 +
           (C92320 * C1020 - C90121 * C1012 + C92102 * C1021 - C90114 * C1013) *
               C44794) *
              C92188 * C92150 * C92136 * C97 +
          ((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
               C44873 +
           (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
               C92359 +
           (C90121 * C796 - C92320 * C806 + C90114 * C795 - C92102 * C804) *
               C44874 +
           (C90121 * C1009 - C92320 * C1017 + C90114 * C1010 - C92102 * C1018) *
               C92360 +
           (C90121 * C799 - C92320 * C812 + C90114 * C800 - C92102 * C814) *
               C44875 +
           (C90121 * C1013 - C92320 * C1021 + C90114 * C1014 - C92102 * C1022) *
               C44794) *
              C92188 * C92150 * C92136 * C98 +
          ((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
               C44873 +
           (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
               C92359 +
           (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
               C44874 +
           (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 - C90114 * C1011) *
               C92360 +
           (C92320 * C814 - C90121 * C800 + C92102 * C816 - C90114 * C801) *
               C44875 +
           (C92320 * C1022 - C90121 * C1014 + C92102 * C1023 - C90114 * C1015) *
               C44794) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C44873 +
           (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
               C92359 +
           (C45829 - C45830 + C45831 - C45832) * C44874 +
           (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
           C45858 * C44794) *
              C92188 * C1372 +
          ((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 - C92102 * C1387) *
               C44873 +
           (C90121 * C1589 - C92320 * C1597 + C90114 * C1590 - C92102 * C1598) *
               C92359 +
           (C90121 * C3357 - C92320 * C3361 + C90114 * C3358 - C92102 * C3363) *
               C44874 +
           (C90121 * C3587 - C92320 * C3591 + C90114 * C3588 - C92102 * C3592) *
               C92360 +
           (C90121 * C5702 - C92320 * C5709 + C90114 * C5701 - C92102 * C5707) *
               C44875 +
           (C90121 * C5971 - C92320 * C5977 + C90114 * C5972 - C92102 * C5978) *
               C44794) *
              C92188 * C1373 +
          ((C92320 * C1391 - C90121 * C1379 + C92102 * C1393 - C90114 * C1380) *
               C44873 +
           (C92320 * C1601 - C90121 * C1593 + C92102 * C1602 - C90114 * C1594) *
               C92359 +
           (C92320 * C5711 - C90121 * C5703 + C92102 * C5713 - C90114 * C5704) *
               C44874 +
           (C92320 * C5979 - C90121 * C5973 + C92102 * C5980 - C90114 * C5974) *
               C92360 +
           (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 - C90114 * C5706) *
               C44875 +
           (C92320 * C5981 - C90121 * C5975 + C92102 * C5982 - C90114 * C5976) *
               C44794) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92320 +
           (C45162 + C45163 + C45164) * C92102) *
              C92188 * C92150 * C790 -
          ((C44875 * C4949 - C45124 * C4814 - C44875 * C5140 + C44794 * C5251 +
            C44874 * C881 - C45123 * C799 - C44874 * C1013 + C92360 * C1079 +
            C44873 * C877 - C45122 * C796 - C44873 * C1009 + C92359 * C1076) *
               C92102 +
           (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
            C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
            C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
               C92320) *
              C92188 * C92150 * C791 +
          ((C44873 * C880 - C45122 * C798 - C44873 * C1012 + C92359 * C1078 +
            C44874 * C4948 - C45123 * C4815 - C44874 * C5139 + C92360 * C5252 +
            C44875 * C4950 - C45124 * C4816 - C44875 * C5141 + C44794 * C5253) *
               C92320 +
           (C44873 * C881 - C45122 * C799 - C44873 * C1013 + C92359 * C1079 +
            C44874 * C4949 - C45123 * C4814 - C44874 * C5140 + C92360 * C5251 +
            C44875 * C4951 - C45124 * C4817 - C44875 * C5142 + C44794 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92320 +
           (C45162 + C45163 + C45164) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C45165 + C45166 + C45167) * C92102 +
           (C45164 + C45163 + C45162) * C92320) *
              C92188 * C92150 * C92136 * C98 +
          ((C45167 + C45166 + C45165) * C92320 +
           (C44873 * C186 - C45122 * C111 - C44873 * C351 + C92359 * C414 +
            C44874 * C879 - C45123 * C794 - C44874 * C1011 + C92360 * C1074 +
            C44875 * C883 - C45124 * C801 - C44875 * C1015 + C44794 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92320 +
           (C45162 + C45163 + C45164) * C92102) *
              C92188 * C1372 -
          ((C44875 * C5800 - C45124 * C5701 - C44875 * C5972 + C44794 * C6057 +
            C44874 * C3440 - C45123 * C3358 - C44874 * C3588 + C92360 * C3662 +
            C44873 * C1458 - C45122 * C1377 - C44873 * C1590 + C92359 * C1657) *
               C92102 +
           (C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058 +
            C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
            C44873 * C1457 - C45122 * C1378 - C44873 * C1589 + C92359 * C1658) *
               C92320) *
              C92188 * C1373 +
          ((C44873 * C1461 - C45122 * C1379 - C44873 * C1593 + C92359 * C1659 +
            C44874 * C5801 - C45123 * C5703 - C44874 * C5973 + C92360 * C6059 +
            C44875 * C5802 - C45124 * C5705 - C44875 * C5975 + C44794 * C6060) *
               C92320 +
           (C44873 * C1462 - C45122 * C1380 - C44873 * C1594 + C92359 * C1660 +
            C44874 * C5803 - C45123 * C5704 - C44874 * C5974 + C92360 * C6061 +
            C44875 * C5804 - C45124 * C5706 - C44875 * C5976 + C44794 * C6062) *
               C92102) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C44873 +
            (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
            (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
               C92320 +
           ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
            C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C44873 + (C5335 - C5334) * C92359 +
            (C5044 - C5043) * C44874 + (C5337 - C5336) * C92360 +
            (C5049 - C5050) * C44875 + (C5339 - C5340) * C44794) *
               C92320 +
           (C6734 * C44873 + C7074 * C92359 + C6736 * C44874 + C7075 * C92360 +
            (C5053 - C5054) * C44875 + (C5341 - C5342) * C44794) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C44873 + C5343 * C92359 + C36865 * C44874 +
            C37049 * C92360 + (C36868 - C36867) * C44875 +
            (C37051 - C37050) * C44794) *
               C92320 +
           (C5047 * C44873 + C5338 * C92359 + (C5054 - C5053) * C44874 +
            (C5342 - C5341) * C92360 +
            (C92188 * C5033 - C265 * C4817) * C44875 +
            (C92188 * C5332 - C265 * C5142) * C44794) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C44873 +
            (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
            (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
               C92320 +
           ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
            C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C44873 + (C503 - C502) * C92359 + C6734 * C44874 +
            C7074 * C92360 + C6736 * C44875 + C7075 * C44794) *
               C92320 +
           ((C284 - C283) * C44873 + (C506 - C505) * C92359 + C17152 * C44874 +
            C17488 * C92360 + (C4212 - C4213) * C44875 +
            (C4485 - C4486) * C44794) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C44873 + C512 * C92359 + C14887 * C44874 + C15159 * C92360 +
            (C4213 - C4212) * C44875 + (C4486 - C4485) * C44794) *
               C92320 +
           (C297 * C44873 + C513 * C92359 + (C2135 - C2134) * C44874 +
            (C2366 - C2365) * C92360 + (C92188 * C949 - C265 * C801) * C44875 +
            (C92188 * C1139 - C265 * C1015) * C44794) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C44873 +
            (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
            (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
               C92320 +
           ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
            C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
               C92102) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C44873 +
            (C265 * C1589 - C92188 * C1713) * C92359 +
            (C8695 - C8696) * C44874 + (C9021 - C9022) * C92360 +
            (C8699 - C8700) * C44875 + (C9023 - C9024) * C44794) *
               C92320 +
           ((C2819 - C2820) * C44873 + (C3054 - C3055) * C92359 +
            (C7705 - C7706) * C44874 + (C8032 - C8033) * C92360 +
            (C7709 - C7710) * C44875 + (C8034 - C8035) * C44794) *
               C92102) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C44873 +
            (C92188 * C1717 - C265 * C1593) * C92359 +
            (C92188 * C5887 - C265 * C5703) * C44874 +
            (C92188 * C6139 - C265 * C5973) * C92360 +
            (C92188 * C5889 - C265 * C5705) * C44875 +
            (C92188 * C6140 - C265 * C5975) * C44794) *
               C92320 +
           ((C92188 * C1528 - C265 * C1380) * C44873 +
            (C92188 * C1718 - C265 * C1594) * C92359 +
            (C92188 * C5888 - C265 * C5704) * C44874 +
            (C92188 * C6141 - C265 * C5974) * C92360 +
            (C92188 * C5890 - C265 * C5706) * C44875 +
            (C92188 * C6142 - C265 * C5976) * C44794) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C265 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92188) *
               C92359 +
           ((C45829 - C45830 + C45831 - C45832) * C265 +
            (C46081 - C46082 + C46083 - C46084) * C92188) *
               C92360 +
           C46098 * C44794) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C265 +
            (C46082 - C46081 + C46084 - C46083) * C92188) *
               C92359 +
           ((C45838 - C45837 + C45840 - C45839) * C265 +
            (C46087 - C46086 + C46089 - C46088) * C92188) *
               C92360 +
           ((C45845 - C45846 + C45847 - C45848) * C265 +
            (C46090 - C46091 + C46092 - C46093) * C92188) *
               C44794) *
              C92150 * C791 +
          (C46098 * C92359 +
           ((C45846 - C45845 + C45848 - C45847) * C265 +
            (C46091 - C46090 + C46093 - C46092) * C92188) *
               C92360 +
           ((C92320 * C4822 - C90121 * C4816 + C92102 * C4824 -
             C90114 * C4817) *
                C265 +
            (C92320 * C5423 - C90121 * C5419 + C92102 * C5424 -
             C90114 * C5420) *
                C92188) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C265 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92188) *
               C92359 +
           ((C92320 * C808 - C90121 * C797 + C92102 * C806 - C90114 * C796) *
                C265 +
            (C92320 * C1198 - C90121 * C1190 + C92102 * C1199 -
             C90114 * C1191) *
                C92188) *
               C92360 +
           ((C92320 * C810 - C90121 * C798 + C92102 * C812 - C90114 * C799) *
                C265 +
            (C92320 * C1202 - C90121 * C1194 + C92102 * C1203 -
             C90114 * C1195) *
                C92188) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C265 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92188) *
               C92359 +
           ((C90121 * C796 - C92320 * C806 + C90114 * C795 - C92102 * C804) *
                C265 +
            (C90121 * C1191 - C92320 * C1199 + C90114 * C1192 -
             C92102 * C1200) *
                C92188) *
               C92360 +
           ((C90121 * C799 - C92320 * C812 + C90114 * C800 - C92102 * C814) *
                C265 +
            (C90121 * C1195 - C92320 * C1203 + C90114 * C1196 -
             C92102 * C1204) *
                C92188) *
               C44794) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C265 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C92188) *
               C92359 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C265 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C92188) *
               C92360 +
           ((C92320 * C814 - C90121 * C800 + C92102 * C816 - C90114 * C801) *
                C265 +
            (C92320 * C1204 - C90121 * C1196 + C92102 * C1205 -
             C90114 * C1197) *
                C92188) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C265 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92188) *
               C92359 +
           ((C45829 - C45830 + C45831 - C45832) * C265 +
            (C46081 - C46082 + C46083 - C46084) * C92188) *
               C92360 +
           C46098 * C44794) *
              C1372 +
          (((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 -
             C92102 * C1387) *
                C265 +
            (C90121 * C1771 - C92320 * C1779 + C90114 * C1772 -
             C92102 * C1780) *
                C92188) *
               C92359 +
           ((C90121 * C3357 - C92320 * C3361 + C90114 * C3358 -
             C92102 * C3363) *
                C265 +
            (C90121 * C3801 - C92320 * C3805 + C90114 * C3802 -
             C92102 * C3806) *
                C92188) *
               C92360 +
           ((C90121 * C5702 - C92320 * C5709 + C90114 * C5701 -
             C92102 * C5707) *
                C265 +
            (C90121 * C6217 - C92320 * C6223 + C90114 * C6218 -
             C92102 * C6224) *
                C92188) *
               C44794) *
              C1373 +
          (((C92320 * C1391 - C90121 * C1379 + C92102 * C1393 -
             C90114 * C1380) *
                C265 +
            (C92320 * C1783 - C90121 * C1775 + C92102 * C1784 -
             C90114 * C1776) *
                C92188) *
               C92359 +
           ((C92320 * C5711 - C90121 * C5703 + C92102 * C5713 -
             C90114 * C5704) *
                C265 +
            (C92320 * C6225 - C90121 * C6219 + C92102 * C6226 -
             C90114 * C6220) *
                C92188) *
               C92360 +
           ((C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
             C90114 * C5706) *
                C265 +
            (C92320 * C6227 - C90121 * C6221 + C92102 * C6228 -
             C90114 * C6222) *
                C92188) *
               C44794) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C265 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92188) *
               C92320 +
           ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
            (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C265 +
            (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
             C44875 * C5417 - C44794 * C5517) *
                C92188) *
               C92320 +
           ((C44873 * C796 - C92359 * C877 + C44874 * C799 - C92360 * C881 +
             C44875 * C4814 - C44794 * C4949) *
                C265 +
            (C44873 * C1191 - C92359 * C1257 + C44874 * C1195 - C92360 * C1261 +
             C44875 * C5418 - C44794 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
             C44794 * C4950 - C44875 * C4816) *
                C265 +
            (C92359 * C1260 - C44873 * C1194 + C92360 * C5517 - C44874 * C5417 +
             C44794 * C5519 - C44875 * C5419) *
                C92188) *
               C92320 +
           ((C92359 * C881 - C44873 * C799 + C92360 * C4949 - C44874 * C4814 +
             C44794 * C4951 - C44875 * C4817) *
                C265 +
            (C92359 * C1261 - C44873 * C1195 + C92360 * C5518 - C44874 * C5418 +
             C44794 * C5520 - C44875 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C265 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92188) *
               C92320 +
           ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
            (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C265 +
            (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92188) *
               C92320 +
           ((C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C265 +
            (C45396 - C45397 + C45398 - C45399 + C45400 - C45401) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C265 +
            (C45397 - C45396 + C45399 - C45398 + C45401 - C45400) * C92188) *
               C92320 +
           ((C92359 * C186 - C44873 * C111 + C92360 * C879 - C44874 * C794 +
             C44794 * C883 - C44875 * C801) *
                C265 +
            (C92359 * C632 - C44873 * C570 + C92360 * C1259 - C44874 * C1193 +
             C44794 * C1263 - C44875 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C265 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92188) *
               C92320 +
           ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
            (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
               C92102) *
              C1372 +
          (((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 - C92360 * C3439 +
             C44875 * C5702 - C44794 * C5799) *
                C265 +
            (C44873 * C1771 - C92359 * C1837 + C44874 * C3801 - C92360 * C3875 +
             C44875 * C6217 - C44794 * C6303) *
                C92188) *
               C92320 +
           ((C44873 * C1377 - C92359 * C1458 + C44874 * C3358 - C92360 * C3440 +
             C44875 * C5701 - C44794 * C5800) *
                C265 +
            (C44873 * C1772 - C92359 * C1838 + C44874 * C3802 - C92360 * C3876 +
             C44875 * C6218 - C44794 * C6304) *
                C92188) *
               C92102) *
              C1373 +
          (((C92359 * C1461 - C44873 * C1379 + C92360 * C5801 - C44874 * C5703 +
             C44794 * C5802 - C44875 * C5705) *
                C265 +
            (C92359 * C1841 - C44873 * C1775 + C92360 * C6305 - C44874 * C6219 +
             C44794 * C6306 - C44875 * C6221) *
                C92188) *
               C92320 +
           ((C92359 * C1462 - C44873 * C1380 + C92360 * C5803 - C44874 * C5704 +
             C44794 * C5804 - C44875 * C5706) *
                C265 +
            (C92359 * C1842 - C44873 * C1776 + C92360 * C6307 - C44874 * C6220 +
             C44794 * C6308 - C44875 * C6222) *
                C92188) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92359 +
            C5624 * C92360 + C5625 * C44794) *
               C92320 +
           (C45476 + C45477 + C45478) * C92102) *
              C92150 * C790 -
          ((C5626 * C44794 + C4737 * C92360 + C2595 * C92359) * C92102 +
           (C5627 * C44794 + C5625 * C92360 + C5624 * C92359) * C92320) *
              C92150 * C791 +
          ((C5625 * C92359 + C5627 * C92360 + C37228 * C44794) * C92320 +
           (C4737 * C92359 + C5626 * C92360 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C44794) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92359 +
            C5624 * C92360 + C5625 * C44794) *
               C92320 +
           (C45476 + C45477 + C45478) * C92102) *
              C92150 * C92136 * C97 -
          ((C45479 + C45480 + C45481) * C92102 +
           (C45478 + C45477 + C45476) * C92320) *
              C92150 * C92136 * C98 +
          ((C45481 + C45480 + C45479) * C92320 +
           (C735 * C92359 + C2593 * C92360 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C44794) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92359 +
            C5624 * C92360 + C5625 * C44794) *
               C92320 +
           (C45476 + C45477 + C45478) * C92102) *
              C1372 -
          ((C8353 * C44794 + C8354 * C92360 + C3288 * C92359) * C92102 +
           (C9347 * C44794 + C9348 * C92360 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C92359) *
               C92320) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C92359 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C92360 +
            (C265 * C5889 - C701 * C5705 - C265 * C6221 + C92188 * C6386) *
                C44794) *
               C92320 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C92359 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C92360 +
            (C265 * C5890 - C701 * C5706 - C265 * C6222 + C92188 * C6388) *
                C44794) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92188 * C92359 +
            (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
               C2664 -
           ((C90114 * C5707 - C44798 * C5701 - C90114 * C5708 + C92102 * C5719 +
             C90121 * C5709 - C44796 * C5702 - C90121 * C5710 +
             C92320 * C5720) *
                C92188 * C44794 +
            (C90114 * C3363 - C44798 * C3358 - C90114 * C3364 + C92102 * C3370 +
             C90121 * C3361 - C44796 * C3357 - C90121 * C3362 +
             C92320 * C3369) *
                C92188 * C92360 +
            (C90114 * C1387 - C44798 * C1377 - C90114 * C1388 + C92102 * C1401 +
             C90121 * C1389 - C44796 * C1378 - C90121 * C1390 +
             C92320 * C1402) *
                C92188 * C92359) *
               C2665) *
              C92136 * C1971 +
          (((C90121 * C1387 - C44796 * C1377 - C90121 * C1388 + C92320 * C1401 +
             C90114 * C1385 - C44798 * C1376 - C90114 * C1386 +
             C92102 * C1400) *
                C92188 * C92359 +
            (C90121 * C3363 - C44796 * C3358 - C90121 * C3364 + C92320 * C3370 +
             C90114 * C3365 - C44798 * C3359 - C90114 * C3366 +
             C92102 * C3371) *
                C92188 * C92360 +
            (C90121 * C5707 - C44796 * C5701 - C90121 * C5708 + C92320 * C5719 +
             C90114 * C7489 - C44798 * C7488 - C90114 * C7490 +
             C92102 * C7491) *
                C92188 * C44794) *
               C2665 -
           ((C47038 + C47037) * C92188 * C44794 +
            (C47036 + C47035) * C92188 * C92360 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92188 * C92359) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C90121 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92320 +
            (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
            (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
               C92188 * C2664 +
           ((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 - C92360 * C3439 +
             C44875 * C5702 - C44794 * C5799) *
                C90121 +
            (C44873 * C1390 - C92359 * C1465 + C44874 * C3362 - C92360 * C3443 +
             C44875 * C5710 - C44794 * C5805) *
                C92320 +
            (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C90114 +
            (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92102) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C90121 +
            (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92320 +
            (C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C90114 +
            (C44895 - C44896 + C44897 - C44898 + C44899 - C44900) * C92102) *
               C92188 * C2664 +
           ((C48086 - C48085 + C48088 - C48087 + C48090 - C48089) * C90121 +
            (C48092 - C48091 + C48094 - C48093 + C48096 - C48095) * C92320 +
            (C92359 * C1459 - C44873 * C1376 + C92360 * C3441 - C44874 * C3359 +
             C44794 * C7590 - C44875 * C7488) *
                C90114 +
            (C92359 * C1467 - C44873 * C1386 + C92360 * C3445 - C44874 * C3366 +
             C44794 * C7591 - C44875 * C7490) *
                C92102) *
               C92188 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C90121 +
             (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
             (C281 - C282) * C92102) *
                C92359 +
            ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
             C6732 * C90114 + C6733 * C92102) *
                C92360 +
            C45754 * C44794) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C90121 +
             (C265 * C1390 - C92188 * C1531) * C92320 +
             (C2819 - C2820) * C90114 + (C2821 - C2822) * C92102) *
                C92359 +
            ((C8695 - C8696) * C90121 + (C8697 - C8698) * C92320 +
             (C7705 - C7706) * C90114 + (C7707 - C7708) * C92102) *
                C92360 +
            ((C8699 - C8700) * C90121 + (C8701 - C8702) * C92320 +
             (C7709 - C7710) * C90114 + (C7711 - C7712) * C92102) *
                C44794) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C90121 + (C282 - C281) * C92320 +
             (C284 - C283) * C90114 + (C286 - C285) * C92102) *
                C92359 +
            (C6734 * C90121 + C6735 * C92320 + C17152 * C90114 +
             C17153 * C92102) *
                C92360 +
            (C6736 * C90121 + C6737 * C92320 + (C4212 - C4213) * C90114 +
             (C4214 - C4215) * C92102) *
                C44794) *
               C2664 +
           (((C2820 - C2819) * C90121 + (C2822 - C2821) * C92320 +
             (C2824 - C2823) * C90114 + (C2826 - C2825) * C92102) *
                C92359 +
            ((C7706 - C7705) * C90121 + (C7708 - C7707) * C92320 +
             (C18112 - C18111) * C90114 + (C18114 - C18113) * C92102) *
                C92360 +
            ((C7710 - C7709) * C90121 + (C7712 - C7711) * C92320 +
             (C92188 * C7702 - C265 * C7488) * C90114 +
             (C92188 * C7703 - C265 * C7490) * C92102) *
                C44794) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C44873 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92359 +
            (C45829 - C45830 + C45831 - C45832) * C44874 +
            (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
            C45858 * C44794) *
               C92188 * C2664 +
           ((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 -
             C92102 * C1387) *
                C44873 +
            (C90121 * C1589 - C92320 * C1597 + C90114 * C1590 -
             C92102 * C1598) *
                C92359 +
            (C90121 * C3357 - C92320 * C3361 + C90114 * C3358 -
             C92102 * C3363) *
                C44874 +
            (C90121 * C3587 - C92320 * C3591 + C90114 * C3588 -
             C92102 * C3592) *
                C92360 +
            (C90121 * C5702 - C92320 * C5709 + C90114 * C5701 -
             C92102 * C5707) *
                C44875 +
            (C90121 * C5971 - C92320 * C5977 + C90114 * C5972 -
             C92102 * C5978) *
                C44794) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C44873 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92359 +
            (C47345 - C47346 + C47347 - C47348) * C44874 +
            (C47349 - C47350 + C47351 - C47352) * C92360 +
            (C47353 - C47354 + C47355 - C47356) * C44875 +
            (C47357 - C47358 + C47359 - C47360) * C44794) *
               C92188 * C2664 +
           ((C92320 * C1387 - C90121 * C1377 + C92102 * C1385 -
             C90114 * C1376) *
                C44873 +
            (C92320 * C1598 - C90121 * C1590 + C92102 * C1599 -
             C90114 * C1591) *
                C92359 +
            (C92320 * C3363 - C90121 * C3358 + C92102 * C3365 -
             C90114 * C3359) *
                C44874 +
            (C92320 * C3592 - C90121 * C3588 + C92102 * C3593 -
             C90114 * C3589) *
                C92360 +
            (C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
             C90114 * C7488) *
                C44875 +
            (C92320 * C5978 - C90121 * C5972 + C92102 * C7811 -
             C90114 * C7810) *
                C44794) *
               C92188 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92320 +
            (C45162 + C45163 + C45164) * C92102) *
               C92188 * C2664 -
           ((C48409 + C48410 + C48411) * C92102 +
            (C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058 +
             C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
             C44873 * C1457 - C45122 * C1378 - C44873 * C1589 +
             C92359 * C1658) *
                C92320) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C48411 + C48410 + C48409) * C92320 +
            (C44873 * C1459 - C45122 * C1376 - C44873 * C1591 + C92359 * C1656 +
             C44874 * C3441 - C45123 * C3359 - C44874 * C3589 + C92360 * C3663 +
             C44875 * C7590 - C45124 * C7488 - C44875 * C7810 +
             C44794 * C7910) *
                C92102) *
               C92188 * C2665 -
           ((C45165 + C45166 + C45167) * C92102 +
            (C45164 + C45163 + C45162) * C92320) *
               C92188 * C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C44873 +
             (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
             (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
                C92320 +
            ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
             C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
                C92102) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C44873 +
             (C265 * C1589 - C92188 * C1713) * C92359 +
             (C8695 - C8696) * C44874 + (C9021 - C9022) * C92360 +
             (C8699 - C8700) * C44875 + (C9023 - C9024) * C44794) *
                C92320 +
            ((C2819 - C2820) * C44873 + (C3054 - C3055) * C92359 +
             (C7705 - C7706) * C44874 + (C8032 - C8033) * C92360 +
             (C7709 - C7710) * C44875 + (C8034 - C8035) * C44794) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C44873 + (C503 - C502) * C92359 + C6734 * C44874 +
             C7074 * C92360 + C6736 * C44875 + C7075 * C44794) *
                C92320 +
            ((C284 - C283) * C44873 + (C506 - C505) * C92359 + C17152 * C44874 +
             C17488 * C92360 + (C4212 - C4213) * C44875 +
             (C4485 - C4486) * C44794) *
                C92102) *
               C2664 +
           (((C2820 - C2819) * C44873 + (C3055 - C3054) * C92359 +
             (C7706 - C7705) * C44874 + (C8033 - C8032) * C92360 +
             (C7710 - C7709) * C44875 + (C8035 - C8034) * C44794) *
                C92320 +
            ((C2824 - C2823) * C44873 + (C3057 - C3056) * C92359 +
             (C18112 - C18111) * C44874 + (C18438 - C18437) * C92360 +
             (C92188 * C7702 - C265 * C7488) * C44875 +
             (C92188 * C8030 - C265 * C7810) * C44794) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C265 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92188) *
                C92359 +
            ((C45829 - C45830 + C45831 - C45832) * C265 +
             (C46081 - C46082 + C46083 - C46084) * C92188) *
                C92360 +
            C46098 * C44794) *
               C2664 +
           (((C90121 * C1378 - C92320 * C1389 + C90114 * C1377 -
              C92102 * C1387) *
                 C265 +
             (C90121 * C1771 - C92320 * C1779 + C90114 * C1772 -
              C92102 * C1780) *
                 C92188) *
                C92359 +
            ((C90121 * C3357 - C92320 * C3361 + C90114 * C3358 -
              C92102 * C3363) *
                 C265 +
             (C90121 * C3801 - C92320 * C3805 + C90114 * C3802 -
              C92102 * C3806) *
                 C92188) *
                C92360 +
            ((C90121 * C5702 - C92320 * C5709 + C90114 * C5701 -
              C92102 * C5707) *
                 C265 +
             (C90121 * C6217 - C92320 * C6223 + C90114 * C6218 -
              C92102 * C6224) *
                 C92188) *
                C44794) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C265 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C92188) *
                C92359 +
            ((C47345 - C47346 + C47347 - C47348) * C265 +
             (C47676 - C47677 + C47678 - C47679) * C92188) *
                C92360 +
            ((C47353 - C47354 + C47355 - C47356) * C265 +
             (C47680 - C47681 + C47682 - C47683) * C92188) *
                C44794) *
               C2664 +
           (((C92320 * C1387 - C90121 * C1377 + C92102 * C1385 -
              C90114 * C1376) *
                 C265 +
             (C92320 * C1780 - C90121 * C1772 + C92102 * C1781 -
              C90114 * C1773) *
                 C92188) *
                C92359 +
            ((C92320 * C3363 - C90121 * C3358 + C92102 * C3365 -
              C90114 * C3359) *
                 C265 +
             (C92320 * C3806 - C90121 * C3802 + C92102 * C3807 -
              C90114 * C3803) *
                 C92188) *
                C92360 +
            ((C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
              C90114 * C7488) *
                 C265 +
             (C92320 * C6224 - C90121 * C6218 + C92102 * C8134 -
              C90114 * C8133) *
                 C92188) *
                C44794) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C265 +
             (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
              C44794 * C1260 - C44875 * C1194) *
                 C92188) *
                C92320 +
            ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
             (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
                C92102) *
               C2664 +
           (((C44873 * C1378 - C92359 * C1457 + C44874 * C3357 -
              C92360 * C3439 + C44875 * C5702 - C44794 * C5799) *
                 C265 +
             (C44873 * C1771 - C92359 * C1837 + C44874 * C3801 -
              C92360 * C3875 + C44875 * C6217 - C44794 * C6303) *
                 C92188) *
                C92320 +
            ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C265 +
             (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92188) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C265 +
             (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92188) *
                C92320 +
            ((C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C265 +
             (C45396 - C45397 + C45398 - C45399 + C45400 - C45401) * C92188) *
                C92102) *
               C2664 +
           (((C48086 - C48085 + C48088 - C48087 + C48090 - C48089) * C265 +
             (C48707 - C48706 + C48709 - C48708 + C48711 - C48710) * C92188) *
                C92320 +
            ((C92359 * C1459 - C44873 * C1376 + C92360 * C3441 -
              C44874 * C3359 + C44794 * C7590 - C44875 * C7488) *
                 C265 +
             (C92359 * C1839 - C44873 * C1773 + C92360 * C3877 -
              C44874 * C3803 + C44794 * C8233 - C44875 * C8133) *
                 C92188) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C92359 +
             C5624 * C92360 + C5625 * C44794) *
                C92320 +
            (C45476 + C45477 + C45478) * C92102) *
               C2664 -
           ((C48810 + C48811 + C48812) * C92102 +
            (C9347 * C44794 + C9348 * C92360 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C92359) *
                C92320) *
               C2665) *
              C92136 * C1971 +
          (((C48812 + C48811 + C48810) * C92320 +
            (C3287 * C92359 + C18750 * C92360 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C44794) *
                C92102) *
               C2665 -
           ((C45479 + C45480 + C45481) * C92102 +
            (C45478 + C45477 + C45476) * C92320) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92188 * C92359 +
           (C90121 * C808 - C44796 * C797 - C90121 * C809 + C92320 * C821 +
            C90114 * C806 - C44798 * C796 - C90114 * C807 + C92102 * C820) *
               C92188 * C92360 +
           (C90121 * C810 - C44796 * C798 - C90121 * C811 + C92320 * C822 +
            C90114 * C812 - C44798 * C799 - C90114 * C813 + C92102 * C823) *
               C92188 * C44794) *
              C92150 * C92136 * C97 -
          ((C90114 * C814 - C44798 * C800 - C90114 * C815 + C92102 * C824 +
            C90121 * C812 - C44796 * C799 - C90121 * C813 + C92320 * C823) *
               C92188 * C44794 +
           (C90114 * C804 - C44798 * C795 - C90114 * C805 + C92102 * C819 +
            C90121 * C806 - C44796 * C796 - C90121 * C807 + C92320 * C820) *
               C92188 * C92360 +
           (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
            C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
               C92188 * C92359) *
              C92150 * C92136 * C98 +
          ((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
            C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
               C92188 * C92359 +
           (C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
            C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
               C92188 * C92360 +
           (C90121 * C814 - C44796 * C800 - C90121 * C815 + C92320 * C824 +
            C90114 * C816 - C44798 * C801 - C90114 * C817 + C92102 * C825) *
               C92188 * C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92188 * C92359 +
           (C45592 + C45593) * C92188 * C92360 + C45599 * C44794) *
              C92150 * C790 -
          ((C45596 + C45597) * C92188 * C44794 +
           (C45595 + C45594) * C92188 * C92360 +
           (C45593 + C45592) * C92188 * C92359) *
              C92150 * C791 +
          (C45599 * C92359 + (C45597 + C45596) * C92188 * C92360 +
           (C90121 * C4822 - C44796 * C4816 - C90121 * C4823 + C92320 * C4828 +
            C90114 * C4824 - C44798 * C4817 - C90114 * C4825 + C92102 * C4829) *
               C92188 * C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C90121 +
           (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
            C44794 * C888 - C44875 * C811) *
               C92320 +
           (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
           (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
              C92188 * C92150 * C92136 * C97 +
          ((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C90121 +
           (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92320 +
           (C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C90114 +
           (C44895 - C44896 + C44897 - C44898 + C44899 - C44900) * C92102) *
              C92188 * C92150 * C92136 * C98 +
          ((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C90121 +
           (C44896 - C44895 + C44898 - C44897 + C44900 - C44899) * C92320 +
           (C92359 * C186 - C44873 * C111 + C92360 * C879 - C44874 * C794 +
            C44794 * C883 - C44875 * C801) *
               C90114 +
           (C92359 * C192 - C44873 * C121 + C92360 * C887 - C44874 * C803 +
            C44794 * C891 - C44875 * C817) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C90121 +
           (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
            C44794 * C888 - C44875 * C811) *
               C92320 +
           (C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C90114 +
           (C44883 - C44884 + C44885 - C44886 + C44887 - C44888) * C92102) *
              C92188 * C92150 * C790 +
          ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
            C44875 * C4815 - C44794 * C4948) *
               C90121 +
           (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
            C44875 * C4821 - C44794 * C4952) *
               C92320 +
           (C44873 * C796 - C92359 * C877 + C44874 * C799 - C92360 * C881 +
            C44875 * C4814 - C44794 * C4949) *
               C90114 +
           (C44873 * C807 - C92359 * C885 + C44874 * C813 - C92360 * C889 +
            C44875 * C4819 - C44794 * C4953) *
               C92102) *
              C92188 * C92150 * C791 +
          ((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
            C44794 * C4950 - C44875 * C4816) *
               C90121 +
           (C92359 * C888 - C44873 * C811 + C92360 * C4952 - C44874 * C4821 +
            C44794 * C4954 - C44875 * C4823) *
               C92320 +
           (C92359 * C881 - C44873 * C799 + C92360 * C4949 - C44874 * C4814 +
            C44794 * C4951 - C44875 * C4817) *
               C90114 +
           (C92359 * C889 - C44873 * C813 + C92360 * C4953 - C44874 * C4819 +
            C44794 * C4955 - C44875 * C4825) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C90121 +
            (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
            (C281 - C282) * C92102) *
               C92359 +
           ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
            C6732 * C90114 + C6733 * C92102) *
               C92360 +
           (C5057 * C90121 + C5058 * C92320 + C5047 * C90114 + C5048 * C92102) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C90121 + (C282 - C281) * C92320 +
            (C284 - C283) * C90114 + (C286 - C285) * C92102) *
               C92359 +
           (C6734 * C90121 + C6735 * C92320 + C17152 * C90114 +
            C17153 * C92102) *
               C92360 +
           (C6736 * C90121 + C6737 * C92320 + (C4212 - C4213) * C90114 +
            (C4214 - C4215) * C92102) *
               C44794) *
              C92150 * C92136 * C98 +
          ((C295 * C90121 + C296 * C92320 + C297 * C90114 + C298 * C92102) *
               C92359 +
           (C14887 * C90121 + C14888 * C92320 + (C2135 - C2134) * C90114 +
            (C2137 - C2136) * C92102) *
               C92360 +
           ((C4213 - C4212) * C90121 + (C4215 - C4214) * C92320 +
            (C92188 * C949 - C265 * C801) * C90114 +
            (C92188 * C957 - C265 * C817) * C92102) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C90121 +
            (C92188 * C272 - C265 * C115) * C92320 + (C279 - C280) * C90114 +
            (C281 - C282) * C92102) *
               C92359 +
           ((C5039 - C5040) * C90121 + (C5041 - C5042) * C92320 +
            C6732 * C90114 + C6733 * C92102) *
               C92360 +
           C45754 * C44794) *
              C92150 * C790 +
          (((C5040 - C5039) * C90121 + (C5042 - C5041) * C92320 +
            C6734 * C90114 + C6735 * C92102) *
               C92359 +
           ((C5044 - C5043) * C90121 + (C5046 - C5045) * C92320 +
            C6736 * C90114 + C6737 * C92102) *
               C92360 +
           ((C5049 - C5050) * C90121 + (C5051 - C5052) * C92320 +
            (C5053 - C5054) * C90114 + (C5055 - C5056) * C92102) *
               C44794) *
              C92150 * C791 +
          (C45754 * C92359 +
           (C36865 * C90121 + C36866 * C92320 + (C5054 - C5053) * C90114 +
            (C5056 - C5055) * C92102) *
               C92360 +
           ((C36868 - C36867) * C90121 + (C36870 - C36869) * C92320 +
            (C92188 * C5033 - C265 * C4817) * C90114 +
            (C92188 * C5037 - C265 * C4825) * C92102) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C44873 +
           (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
               C92359 +
           (C92320 * C808 - C90121 * C797 + C92102 * C806 - C90114 * C796) *
               C44874 +
           (C92320 * C1016 - C90121 * C1008 + C92102 * C1017 - C90114 * C1009) *
               C92360 +
           (C92320 * C810 - C90121 * C798 + C92102 * C812 - C90114 * C799) *
               C44875 +
           (C92320 * C1020 - C90121 * C1012 + C92102 * C1021 - C90114 * C1013) *
               C44794) *
              C92188 * C92150 * C92136 * C97 +
          ((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
               C44873 +
           (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
               C92359 +
           (C90121 * C796 - C92320 * C806 + C90114 * C795 - C92102 * C804) *
               C44874 +
           (C90121 * C1009 - C92320 * C1017 + C90114 * C1010 - C92102 * C1018) *
               C92360 +
           (C90121 * C799 - C92320 * C812 + C90114 * C800 - C92102 * C814) *
               C44875 +
           (C90121 * C1013 - C92320 * C1021 + C90114 * C1014 - C92102 * C1022) *
               C44794) *
              C92188 * C92150 * C92136 * C98 +
          ((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
               C44873 +
           (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
               C92359 +
           (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
               C44874 +
           (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 - C90114 * C1011) *
               C92360 +
           (C92320 * C814 - C90121 * C800 + C92102 * C816 - C90114 * C801) *
               C44875 +
           (C92320 * C1022 - C90121 * C1014 + C92102 * C1023 - C90114 * C1015) *
               C44794) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C44873 +
           (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
               C92359 +
           (C45829 - C45830 + C45831 - C45832) * C44874 +
           (C45833 - C45834 + C45835 - C45836) * C92360 + C45857 * C44875 +
           C45858 * C44794) *
              C92188 * C92150 * C790 +
          ((C45830 - C45829 + C45832 - C45831) * C44873 +
           (C45834 - C45833 + C45836 - C45835) * C92359 +
           (C45838 - C45837 + C45840 - C45839) * C44874 +
           (C45842 - C45841 + C45844 - C45843) * C92360 +
           (C45845 - C45846 + C45847 - C45848) * C44875 +
           (C45849 - C45850 + C45851 - C45852) * C44794) *
              C92188 * C92150 * C791 +
          (C45857 * C44873 + C45858 * C92359 +
           (C45846 - C45845 + C45848 - C45847) * C44874 +
           (C45850 - C45849 + C45852 - C45851) * C92360 +
           (C92320 * C4822 - C90121 * C4816 + C92102 * C4824 - C90114 * C4817) *
               C44875 +
           (C92320 * C5145 - C90121 * C5141 + C92102 * C5146 - C90114 * C5142) *
               C44794) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92320 +
           (C45162 + C45163 + C45164) * C92102) *
              C92188 * C92150 * C92136 * C97 -
          ((C45165 + C45166 + C45167) * C92102 +
           (C45164 + C45163 + C45162) * C92320) *
              C92188 * C92150 * C92136 * C98 +
          ((C45167 + C45166 + C45165) * C92320 +
           (C44873 * C186 - C45122 * C111 - C44873 * C351 + C92359 * C414 +
            C44874 * C879 - C45123 * C794 - C44874 * C1011 + C92360 * C1074 +
            C44875 * C883 - C45124 * C801 - C44875 * C1015 + C44794 * C1081) *
               C92102) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92320 +
           (C45162 + C45163 + C45164) * C92102) *
              C92188 * C92150 * C790 -
          ((C44875 * C4949 - C45124 * C4814 - C44875 * C5140 + C44794 * C5251 +
            C44874 * C881 - C45123 * C799 - C44874 * C1013 + C92360 * C1079 +
            C44873 * C877 - C45122 * C796 - C44873 * C1009 + C92359 * C1076) *
               C92102 +
           (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
            C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
            C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
               C92320) *
              C92188 * C92150 * C791 +
          ((C44873 * C880 - C45122 * C798 - C44873 * C1012 + C92359 * C1078 +
            C44874 * C4948 - C45123 * C4815 - C44874 * C5139 + C92360 * C5252 +
            C44875 * C4950 - C45124 * C4816 - C44875 * C5141 + C44794 * C5253) *
               C92320 +
           (C44873 * C881 - C45122 * C799 - C44873 * C1013 + C92359 * C1079 +
            C44874 * C4949 - C45123 * C4814 - C44874 * C5140 + C92360 * C5251 +
            C44875 * C4951 - C45124 * C4817 - C44875 * C5142 + C44794 * C5254) *
               C92102) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C44873 +
            (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
            (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
               C92320 +
           ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
            C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C44873 + (C503 - C502) * C92359 + C6734 * C44874 +
            C7074 * C92360 + C6736 * C44875 + C7075 * C44794) *
               C92320 +
           ((C284 - C283) * C44873 + (C506 - C505) * C92359 + C17152 * C44874 +
            C17488 * C92360 + (C4212 - C4213) * C44875 +
            (C4485 - C4486) * C44794) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C295 * C44873 + C512 * C92359 + C14887 * C44874 + C15159 * C92360 +
            (C4213 - C4212) * C44875 + (C4486 - C4485) * C44794) *
               C92320 +
           (C297 * C44873 + C513 * C92359 + (C2135 - C2134) * C44874 +
            (C2366 - C2365) * C92360 + (C92188 * C949 - C265 * C801) * C44875 +
            (C92188 * C1139 - C265 * C1015) * C44794) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C44873 +
            (C92188 * C495 - C265 * C348) * C92359 + (C5039 - C5040) * C44874 +
            (C5334 - C5335) * C92360 + C5057 * C44875 + C5343 * C44794) *
               C92320 +
           ((C279 - C280) * C44873 + (C502 - C503) * C92359 + C6732 * C44874 +
            C7073 * C92360 + C5047 * C44875 + C5338 * C44794) *
               C92102) *
              C92150 * C790 +
          (((C5040 - C5039) * C44873 + (C5335 - C5334) * C92359 +
            (C5044 - C5043) * C44874 + (C5337 - C5336) * C92360 +
            (C5049 - C5050) * C44875 + (C5339 - C5340) * C44794) *
               C92320 +
           (C6734 * C44873 + C7074 * C92359 + C6736 * C44874 + C7075 * C92360 +
            (C5053 - C5054) * C44875 + (C5341 - C5342) * C44794) *
               C92102) *
              C92150 * C791 +
          ((C5057 * C44873 + C5343 * C92359 + C36865 * C44874 +
            C37049 * C92360 + (C36868 - C36867) * C44875 +
            (C37051 - C37050) * C44794) *
               C92320 +
           (C5047 * C44873 + C5338 * C92359 + (C5054 - C5053) * C44874 +
            (C5342 - C5341) * C92360 +
            (C92188 * C5033 - C265 * C4817) * C44875 +
            (C92188 * C5332 - C265 * C5142) * C44794) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C265 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92188) *
               C92359 +
           ((C92320 * C808 - C90121 * C797 + C92102 * C806 - C90114 * C796) *
                C265 +
            (C92320 * C1198 - C90121 * C1190 + C92102 * C1199 -
             C90114 * C1191) *
                C92188) *
               C92360 +
           ((C92320 * C810 - C90121 * C798 + C92102 * C812 - C90114 * C799) *
                C265 +
            (C92320 * C1202 - C90121 * C1194 + C92102 * C1203 -
             C90114 * C1195) *
                C92188) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C265 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92188) *
               C92359 +
           ((C90121 * C796 - C92320 * C806 + C90114 * C795 - C92102 * C804) *
                C265 +
            (C90121 * C1191 - C92320 * C1199 + C90114 * C1192 -
             C92102 * C1200) *
                C92188) *
               C92360 +
           ((C90121 * C799 - C92320 * C812 + C90114 * C800 - C92102 * C814) *
                C265 +
            (C90121 * C1195 - C92320 * C1203 + C90114 * C1196 -
             C92102 * C1204) *
                C92188) *
               C44794) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C265 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C92188) *
               C92359 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C265 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C92188) *
               C92360 +
           ((C92320 * C814 - C90121 * C800 + C92102 * C816 - C90114 * C801) *
                C265 +
            (C92320 * C1204 - C90121 * C1196 + C92102 * C1205 -
             C90114 * C1197) *
                C92188) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C265 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92188) *
               C92359 +
           ((C45829 - C45830 + C45831 - C45832) * C265 +
            (C46081 - C46082 + C46083 - C46084) * C92188) *
               C92360 +
           C46098 * C44794) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C265 +
            (C46082 - C46081 + C46084 - C46083) * C92188) *
               C92359 +
           ((C45838 - C45837 + C45840 - C45839) * C265 +
            (C46087 - C46086 + C46089 - C46088) * C92188) *
               C92360 +
           ((C45845 - C45846 + C45847 - C45848) * C265 +
            (C46090 - C46091 + C46092 - C46093) * C92188) *
               C44794) *
              C92150 * C791 +
          (C46098 * C92359 +
           ((C45846 - C45845 + C45848 - C45847) * C265 +
            (C46091 - C46090 + C46093 - C46092) * C92188) *
               C92360 +
           ((C92320 * C4822 - C90121 * C4816 + C92102 * C4824 -
             C90114 * C4817) *
                C265 +
            (C92320 * C5423 - C90121 * C5419 + C92102 * C5424 -
             C90114 * C5420) *
                C92188) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C265 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92188) *
               C92320 +
           ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
            (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C265 +
            (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92188) *
               C92320 +
           ((C44889 - C44890 + C44891 - C44892 + C44893 - C44894) * C265 +
            (C45396 - C45397 + C45398 - C45399 + C45400 - C45401) * C92188) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C265 +
            (C45397 - C45396 + C45399 - C45398 + C45401 - C45400) * C92188) *
               C92320 +
           ((C92359 * C186 - C44873 * C111 + C92360 * C879 - C44874 * C794 +
             C44794 * C883 - C44875 * C801) *
                C265 +
            (C92359 * C632 - C44873 * C570 + C92360 * C1259 - C44874 * C1193 +
             C44794 * C1263 - C44875 * C1197) *
                C92188) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C265 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92188) *
               C92320 +
           ((C44877 - C44878 + C44879 - C44880 + C44881 - C44882) * C265 +
            (C45390 - C45391 + C45392 - C45393 + C45394 - C45395) * C92188) *
               C92102) *
              C92150 * C790 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C265 +
            (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
             C44875 * C5417 - C44794 * C5517) *
                C92188) *
               C92320 +
           ((C44873 * C796 - C92359 * C877 + C44874 * C799 - C92360 * C881 +
             C44875 * C4814 - C44794 * C4949) *
                C265 +
            (C44873 * C1191 - C92359 * C1257 + C44874 * C1195 - C92360 * C1261 +
             C44875 * C5418 - C44794 * C5518) *
                C92188) *
               C92102) *
              C92150 * C791 +
          (((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
             C44794 * C4950 - C44875 * C4816) *
                C265 +
            (C92359 * C1260 - C44873 * C1194 + C92360 * C5517 - C44874 * C5417 +
             C44794 * C5519 - C44875 * C5419) *
                C92188) *
               C92320 +
           ((C92359 * C881 - C44873 * C799 + C92360 * C4949 - C44874 * C4814 +
             C44794 * C4951 - C44875 * C4817) *
                C265 +
            (C92359 * C1261 - C44873 * C1195 + C92360 * C5518 - C44874 * C5418 +
             C44794 * C5520 - C44875 * C5420) *
                C92188) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92359 +
            C5624 * C92360 + C5625 * C44794) *
               C92320 +
           (C45476 + C45477 + C45478) * C92102) *
              C92150 * C92136 * C97 -
          ((C45479 + C45480 + C45481) * C92102 +
           (C45478 + C45477 + C45476) * C92320) *
              C92150 * C92136 * C98 +
          ((C45481 + C45480 + C45479) * C92320 +
           (C735 * C92359 + C2593 * C92360 +
            (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                C44794) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C92359 +
            C5624 * C92360 + C5625 * C44794) *
               C92320 +
           (C45476 + C45477 + C45478) * C92102) *
              C92150 * C790 -
          ((C5626 * C44794 + C4737 * C92360 + C2595 * C92359) * C92102 +
           (C5627 * C44794 + C5625 * C92360 + C5624 * C92359) * C92320) *
              C92150 * C791 +
          ((C5625 * C92359 + C5627 * C92360 + C37228 * C44794) * C92320 +
           (C4737 * C92359 + C5626 * C92360 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C44794) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92334 +
             C41134 * C92252) *
                C92359 +
            (C56839 + C56840) * C92360 + C56845 * C44794) *
               C92150 * C1969 -
           ((C56843 + C56844) * C44794 + (C56842 + C56841) * C92360 +
            (C56840 + C56839) * C92359) *
               C92150 * C1970) *
              C1971 +
          (((C58329 + C58330) * C92359 + (C58331 + C58339) * C92360 +
            (C37781 * C92334 + (C36262 * C8458 - C36263 * C8455 -
                                C36262 * C8459 + C92097 * C8461) *
                                   C92252) *
                C44794) *
               C92150 * C1970 -
           ((C58339 + C58331) * C44794 + (C58330 + C58329) * C92360 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C92334) *
                C92359) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C36262 +
             (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
              C44794 * C888 - C44875 * C811) *
                 C92097) *
                C92334 +
            ((C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C36262 +
             (C57641 - C57642 + C57643 - C57644 + C57645 - C57646) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
              C44875 * C4815 - C44794 * C4948) *
                 C36262 +
             (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
              C44875 * C4821 - C44794 * C4952) *
                 C92097) *
                C92334 +
            ((C44873 * C3357 - C92359 * C3439 + C44874 * C5702 -
              C92360 * C5799 + C44875 * C8454 - C44794 * C8588) *
                 C36262 +
             (C44873 * C3362 - C92359 * C3443 + C44874 * C5710 -
              C92360 * C5805 + C44875 * C8457 - C44794 * C8590) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C36262 +
             (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92097) *
                C92334 +
            ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C36262 +
             (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C47138 - C47137 + C47140 - C47139 + C47142 - C47141) * C36262 +
             (C47144 - C47143 + C47146 - C47145 + C47148 - C47147) * C92097) *
                C92334 +
            ((C92359 * C3440 - C44873 * C3358 + C92360 * C5800 -
              C44874 * C5701 + C44794 * C8589 - C44875 * C8455) *
                 C36262 +
             (C92359 * C3444 - C44873 * C3364 + C92360 * C5806 -
              C44874 * C5708 + C44794 * C8591 - C44875 * C8459) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C36262 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92097) *
                C92359 +
            ((C25850 - C25851 + C25852 - C25853) * C36262 +
             (C25854 - C25855 + C25856 - C25857) * C92097) *
                C92360 +
            C57010 * C44794) *
               C92150 * C1969 +
           (((C25851 - C25850 + C25853 - C25852) * C36262 +
             (C25855 - C25854 + C25857 - C25856) * C92097) *
                C92359 +
            ((C25858 - C25859 + C25860 - C25861) * C36262 +
             (C25862 - C25863 + C25864 - C25865) * C92097) *
                C92360 +
            ((C56998 - C56999 + C57000 - C57001) * C36262 +
             (C57002 - C57003 + C57004 - C57005) * C92097) *
                C44794) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C36262 +
             (C19906 - C19905 + C19908 - C19907) * C92097) *
                C92359 +
            (C27898 * C36262 + C27899 * C92097) * C92360 +
            ((C25866 - C25867 + C25868 - C25869) * C36262 +
             (C25870 - C25871 + C25872 - C25873) * C92097) *
                C44794) *
               C92150 * C1969 +
           ((C27896 * C36262 + C27897 * C92097) * C92359 +
            ((C25867 - C25866 + C25869 - C25868) * C36262 +
             (C25871 - C25870 + C25873 - C25872) * C92097) *
                C92360 +
            ((C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
              C19899 * C8455) *
                 C36262 +
             (C92334 * C5035 - C19898 * C4819 + C92252 * C8693 -
              C19899 * C8459) *
                 C92097) *
                C44794) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C44873 +
             (C92097 * C354 - C36262 * C348) * C92359 +
             (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
             C36943 * C44875 + C36944 * C44794) *
                C92334 +
            ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
             C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
             C57086 * C44794) *
                C92252) *
               C92150 * C1969 +
           (((C36928 - C36927) * C44873 + (C36930 - C36929) * C92359 +
             (C36932 - C36931) * C44874 + (C36934 - C36933) * C92360 +
             (C36936 - C36935) * C44875 + (C36938 - C36937) * C44794) *
                C92334 +
            (C44151 * C44873 + C44152 * C92359 + (C39231 - C39232) * C44874 +
             (C39233 - C39234) * C92360 + (C39235 - C39236) * C44875 +
             (C39237 - C39238) * C44794) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C44873 +
             (C36262 * C349 - C92097 * C355) * C92359 +
             (C37983 - C37984) * C44874 + (C37985 - C37986) * C92360 +
             (C37987 - C37988) * C44875 + (C37989 - C37990) * C44794) *
                C92334 +
            ((C43196 - C43197) * C44873 + (C43198 - C43199) * C92359 +
             (C42280 - C42281) * C44874 + (C42282 - C42283) * C92360 +
             (C58634 - C58635) * C44875 + (C58636 - C58637) * C44794) *
                C92252) *
               C92150 * C1969 +
           (((C37984 - C37983) * C44873 + (C37986 - C37985) * C92359 +
             (C37988 - C37987) * C44874 + (C37990 - C37989) * C92360 +
             (C37992 - C37991) * C44875 + (C37994 - C37993) * C44794) *
                C92334 +
            ((C42281 - C42280) * C44873 + (C42283 - C42282) * C92359 +
             (C58635 - C58634) * C44874 + (C58637 - C58636) * C92360 +
             (C92097 * C8458 - C36262 * C8455) * C44875 +
             (C92097 * C8803 - C36262 * C8801) * C44794) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92097 * C92334 +
            (C57917 + C57918 + C57919) * C92097 * C92252) *
               C92150 * C1969 -
           ((C44875 * C8588 - C45124 * C8454 - C44875 * C8800 + C44794 * C8918 +
             C44874 * C5799 - C45123 * C5702 - C44874 * C5971 + C92360 * C6058 +
             C44873 * C3439 - C45122 * C3357 - C44873 * C3587 +
             C92359 * C3661) *
                C92097 * C92252 +
            (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
             C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
             C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
                C92097 * C92334) *
               C92150 * C1970) *
              C1971 +
          (((C47479 + C47478 + C47477) * C92097 * C92334 +
            (C44873 * C3440 - C45122 * C3358 - C44873 * C3588 + C92359 * C3662 +
             C44874 * C5800 - C45123 * C5701 - C44874 * C5972 + C92360 * C6057 +
             C44875 * C8589 - C45124 * C8455 - C44875 * C8801 +
             C44794 * C8919) *
                C92097 * C92252) *
               C92150 * C1970 -
           ((C48409 + C48410 + C48411) * C92097 * C92252 +
            (C45164 + C45163 + C45162) * C92097 * C92334) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C44873 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92359 +
            (C25850 - C25851 + C25852 - C25853) * C44874 +
            (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
            C57241 * C44794) *
               C92097 * C92150 * C1969 +
           ((C25851 - C25850 + C25853 - C25852) * C44873 +
            (C26169 - C26168 + C26171 - C26170) * C92359 +
            (C25858 - C25859 + C25860 - C25861) * C44874 +
            (C26172 - C26173 + C26174 - C26175) * C92360 +
            (C56998 - C56999 + C57000 - C57001) * C44875 +
            (C57237 - C57238 + C57239 - C57240) * C44794) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C19902 - C19901 + C19904 - C19903) * C44873 +
            (C20154 - C20153 + C20156 - C20155) * C92359 + C27898 * C44874 +
            C28317 * C92360 + (C25866 - C25867 + C25868 - C25869) * C44875 +
            (C26176 - C26177 + C26178 - C26179) * C44794) *
               C92097 * C92150 * C1969 +
           (C27896 * C44873 + C28316 * C92359 +
            (C25867 - C25866 + C25869 - C25868) * C44874 +
            (C26177 - C26176 + C26179 - C26178) * C92360 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C44875 +
            (C92334 * C5330 - C19898 * C5140 + C92252 * C9019 -
             C19899 * C8801) *
                C44794) *
               C92097 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C19898 +
             (C92097 * C573 - C36262 * C567) * C92334 +
             (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                C92359 +
            ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
             C44149 * C19899 + C44487 * C92252) *
                C92360 +
            C57323 * C44794) *
               C92150 * C1969 +
           (((C36928 - C36927) * C19898 + (C37105 - C37104) * C92334 +
             C44151 * C19899 + C44488 * C92252) *
                C92359 +
            ((C36932 - C36931) * C19898 + (C37108 - C37107) * C92334 +
             (C39231 - C39232) * C19899 + (C39445 - C39446) * C92252) *
                C92360 +
            ((C36936 - C36935) * C19898 + (C37111 - C37110) * C92334 +
             (C39235 - C39236) * C19899 + (C39447 - C39448) * C92252) *
                C44794) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C19898 +
             (C36262 * C568 - C92097 * C574) * C92334 +
             (C43196 - C43197) * C19899 + (C43512 - C43513) * C92252) *
                C92359 +
            ((C37983 - C37984) * C19898 + (C38193 - C38194) * C92334 +
             (C42280 - C42281) * C19899 + (C42582 - C42583) * C92252) *
                C92360 +
            ((C37987 - C37988) * C19898 + (C38195 - C38196) * C92334 +
             (C58634 - C58635) * C19899 + (C58932 - C58933) * C92252) *
                C44794) *
               C92150 * C1969 +
           (((C37984 - C37983) * C19898 + (C38194 - C38193) * C92334 +
             (C42281 - C42280) * C19899 + (C42583 - C42582) * C92252) *
                C92359 +
            ((C37988 - C37987) * C19898 + (C38196 - C38195) * C92334 +
             (C58635 - C58634) * C19899 + (C58933 - C58932) * C92252) *
                C92360 +
            ((C37992 - C37991) * C19898 + (C38198 - C38197) * C92334 +
             (C92097 * C8458 - C36262 * C8455) * C19899 +
             (C92097 * C9125 - C36262 * C9123) * C92252) *
                C44794) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C19898 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92334 +
            (C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C19899 +
            (C58145 - C58146 + C58147 - C58148 + C58149 - C58150) * C92252) *
               C92097 * C92150 * C1969 +
           ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C19898 +
            (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
             C44875 * C5417 - C44794 * C5517) *
                C92334 +
            (C44873 * C3357 - C92359 * C3439 + C44874 * C5702 - C92360 * C5799 +
             C44875 * C8454 - C44794 * C8588) *
                C19899 +
            (C44873 * C3801 - C92359 * C3875 + C44874 * C6217 - C92360 * C6303 +
             C44875 * C9122 - C44794 * C9232) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C19898 +
            (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92334 +
            (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C19899 +
            (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92252) *
               C92097 * C92150 * C1969 +
           ((C47138 - C47137 + C47140 - C47139 + C47142 - C47141) * C19898 +
            (C47783 - C47782 + C47785 - C47784 + C47787 - C47786) * C92334 +
            (C92359 * C3440 - C44873 * C3358 + C92360 * C5800 - C44874 * C5701 +
             C44794 * C8589 - C44875 * C8455) *
                C19899 +
            (C92359 * C3876 - C44873 * C3802 + C92360 * C6304 - C44874 * C6218 +
             C44794 * C9233 - C44875 * C9123) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19898 * C266 - C20400 * C108 - C19898 * C567 +
                       C92334 * C702 + C19899 * C1523 - C20401 * C1378 -
                       C19899 * C1771 + C92252 * C1898) *
                          C92359 +
                      (C26510 + C26511) * C92360 + C57472 * C44794) *
                         C92097 * C92150 * C1969 -
                     ((C57485 + C57486) * C44794 + (C26514 + C26515) * C92360 +
                      (C26511 + C26510) * C92359) *
                         C92097 * C92150 * C1970) *
                        C1971 +
                    ((C28716 * C92359 + (C26513 + C26512) * C92360 +
                      (C19898 * C5031 - C20400 * C4814 - C19898 * C5418 +
                       C92334 * C5595 + C19899 * C8691 - C20401 * C8455 -
                       C19899 * C9123 + C92252 * C9333) *
                          C44794) *
                         C92097 * C92150 * C1970 -
                     ((C26512 + C26513) * C44794 + C28717 * C92360 +
                      (C20440 + C20439) * C92359) *
                         C92097 * C92150 * C1969) *
                        C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92334 +
             C41134 * C92252) *
                C92359 +
            (C56839 + C56840) * C92360 + C56845 * C44794) *
               C2664 -
           ((C60110 + C60111) * C44794 + (C60112 + C60113) * C92360 +
            (C41135 * C92252 + C41134 * C92334) * C92359) *
               C2665) *
              C1969 +
          (((C60113 + C60112) * C92359 + (C60111 + C60110) * C92360 +
            (C39013 * C92334 + (C36262 * C37279 - C36263 * C37278 -
                                C36262 * C37280 + C92097 * C37281) *
                                   C92252) *
                C44794) *
               C2665 -
           ((C56843 + C56844) * C44794 + (C56842 + C56841) * C92360 +
            (C56840 + C56839) * C92359) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C36262 +
             (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
              C44794 * C888 - C44875 * C811) *
                 C92097) *
                C92334 +
            ((C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C36262 +
             (C57641 - C57642 + C57643 - C57644 + C57645 - C57646) * C92097) *
                C92252) *
               C2664 +
           (((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C36262 +
             (C57642 - C57641 + C57644 - C57643 + C57646 - C57645) * C92097) *
                C92334 +
            ((C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C36262 +
             (C57653 - C57654 + C57655 - C57656 + C57657 - C57658) * C92097) *
                C92252) *
               C2665) *
              C1969 +
          ((((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
              C44875 * C4815 - C44794 * C4948) *
                 C36262 +
             (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
              C44875 * C4821 - C44794 * C4952) *
                 C92097) *
                C92334 +
            ((C60212 - C60213 + C60214 - C60215 + C60216 - C60217) * C36262 +
             (C60218 - C60219 + C60220 - C60221 + C60222 - C60223) * C92097) *
                C92252) *
               C2664 +
           (((C60213 - C60212 + C60215 - C60214 + C60217 - C60216) * C36262 +
             (C60219 - C60218 + C60221 - C60220 + C60223 - C60222) * C92097) *
                C92334 +
            ((C92359 * C5801 - C44873 * C5703 + C92360 * C5802 -
              C44874 * C5705 + C44794 * C37332 - C44875 * C37278) *
                 C36262 +
             (C92359 * C5807 - C44873 * C5712 + C92360 * C5808 -
              C44874 * C5716 + C44794 * C37333 - C44875 * C37280) *
                 C92097) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C36262 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92097) *
                C92359 +
            ((C25850 - C25851 + C25852 - C25853) * C36262 +
             (C25854 - C25855 + C25856 - C25857) * C92097) *
                C92360 +
            C57010 * C44794) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C92359 +
            ((C30334 - C30335 + C30336 - C30337) * C36262 +
             (C30338 - C30339 + C30340 - C30341) * C92097) *
                C92360 +
            ((C60322 - C60323 + C60324 - C60325) * C36262 +
             (C60326 - C60327 + C60328 - C60329) * C92097) *
                C44794) *
               C2665) *
              C1969 +
          ((((C25851 - C25850 + C25853 - C25852) * C36262 +
             (C25855 - C25854 + C25857 - C25856) * C92097) *
                C92359 +
            ((C25858 - C25859 + C25860 - C25861) * C36262 +
             (C25862 - C25863 + C25864 - C25865) * C92097) *
                C92360 +
            ((C56998 - C56999 + C57000 - C57001) * C36262 +
             (C57002 - C57003 + C57004 - C57005) * C92097) *
                C44794) *
               C2664 +
           (((C30335 - C30334 + C30337 - C30336) * C36262 +
             (C30339 - C30338 + C30341 - C30340) * C92097) *
                C92359 +
            ((C60323 - C60322 + C60325 - C60324) * C36262 +
             (C60327 - C60326 + C60329 - C60328) * C92097) *
                C92360 +
            ((C92334 * C8690 - C19898 * C8454 + C92252 * C37384 -
              C19899 * C37278) *
                 C36262 +
             (C92334 * C8692 - C19898 * C8457 + C92252 * C37385 -
              C19899 * C37280) *
                 C92097) *
                C44794) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C44873 +
             (C92097 * C354 - C36262 * C348) * C92359 +
             (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
             C36943 * C44875 + C36944 * C44794) *
                C92334 +
            ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
             C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
             C57086 * C44794) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C44873 + (C41402 - C41401) * C92359 +
             C44151 * C44874 + C44152 * C92360 + C60428 * C44875 +
             C60429 * C44794) *
                C92334 +
            ((C41404 - C41403) * C44873 + (C41406 - C41405) * C92359 +
             C44153 * C44874 + C44154 * C92360 + (C40600 - C40601) * C44875 +
             (C40602 - C40603) * C44794) *
                C92252) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C44873 + (C36930 - C36929) * C92359 +
             (C36932 - C36931) * C44874 + (C36934 - C36933) * C92360 +
             (C36936 - C36935) * C44875 + (C36938 - C36937) * C44794) *
                C92334 +
            (C44151 * C44873 + C44152 * C92359 + C60428 * C44874 +
             C60429 * C92360 + (C39235 - C39236) * C44875 +
             (C39237 - C39238) * C44794) *
                C92252) *
               C2664 +
           ((C44149 * C44873 + C44150 * C92359 + C57085 * C44874 +
             C57086 * C92360 + (C39236 - C39235) * C44875 +
             (C39238 - C39237) * C44794) *
                C92334 +
            (C41407 * C44873 + C41408 * C92359 + (C40601 - C40600) * C44874 +
             (C40603 - C40602) * C92360 +
             (C92097 * C37279 - C36262 * C37278) * C44875 +
             (C92097 * C37437 - C36262 * C37436) * C44794) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92097 * C92334 +
            (C57917 + C57918 + C57919) * C92097 * C92252) *
               C2664 -
           ((C57920 + C57921 + C57922) * C92097 * C92252 +
            (C57919 + C57918 + C57917) * C92097 * C92334) *
               C2665) *
              C1969 +
          (((C60546 + C60547 + C60548) * C92097 * C92334 +
            (C44873 * C5801 - C45122 * C5703 - C44873 * C5973 + C92359 * C6059 +
             C44874 * C5802 - C45123 * C5705 - C44874 * C5975 + C92360 * C6060 +
             C44875 * C37332 - C45124 * C37278 - C44875 * C37436 +
             C44794 * C37488) *
                C92097 * C92252) *
               C2665 -
           ((C60548 + C60547 + C60546) * C92097 * C92252 +
            (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
             C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
             C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
                C92097 * C92334) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C44873 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92359 +
            (C25850 - C25851 + C25852 - C25853) * C44874 +
            (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
            C57241 * C44794) *
               C92097 * C2664 +
           ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C44873 +
            (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
             C92252 * C1717) *
                C92359 +
            (C30334 - C30335 + C30336 - C30337) * C44874 +
            (C30758 - C30759 + C30760 - C30761) * C92360 +
            (C60322 - C60323 + C60324 - C60325) * C44875 +
            (C60647 - C60648 + C60649 - C60650) * C44794) *
               C92097 * C2665) *
              C1969 +
          (((C25851 - C25850 + C25853 - C25852) * C44873 +
            (C26169 - C26168 + C26171 - C26170) * C92359 +
            (C25858 - C25859 + C25860 - C25861) * C44874 +
            (C26172 - C26173 + C26174 - C26175) * C92360 +
            (C56998 - C56999 + C57000 - C57001) * C44875 +
            (C57237 - C57238 + C57239 - C57240) * C44794) *
               C92097 * C2664 +
           ((C30335 - C30334 + C30337 - C30336) * C44873 +
            (C30759 - C30758 + C30761 - C30760) * C92359 +
            (C60323 - C60322 + C60325 - C60324) * C44874 +
            (C60648 - C60647 + C60650 - C60649) * C92360 +
            (C92334 * C8690 - C19898 * C8454 + C92252 * C37384 -
             C19899 * C37278) *
                C44875 +
            (C92334 * C9018 - C19898 * C8800 + C92252 * C37539 -
             C19899 * C37436) *
                C44794) *
               C92097 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C19898 +
             (C92097 * C573 - C36262 * C567) * C92334 +
             (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                C92359 +
            ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
             C44149 * C19899 + C44487 * C92252) *
                C92360 +
            C57323 * C44794) *
               C2664 +
           (((C41400 - C41399) * C19898 + (C41697 - C41696) * C92334 +
             (C41404 - C41403) * C19899 + (C41699 - C41698) * C92252) *
                C92359 +
            (C44151 * C19898 + C44488 * C92334 + C44153 * C19899 +
             C44489 * C92252) *
                C92360 +
            (C60428 * C19898 + C60749 * C92334 + (C40600 - C40601) * C19899 +
             (C40840 - C40841) * C92252) *
                C44794) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C19898 + (C37105 - C37104) * C92334 +
             C44151 * C19899 + C44488 * C92252) *
                C92359 +
            ((C36932 - C36931) * C19898 + (C37108 - C37107) * C92334 +
             C60428 * C19899 + C60749 * C92252) *
                C92360 +
            ((C36936 - C36935) * C19898 + (C37111 - C37110) * C92334 +
             (C39235 - C39236) * C19899 + (C39447 - C39448) * C92252) *
                C44794) *
               C2664 +
           ((C44149 * C19898 + C44487 * C92334 + C41407 * C19899 +
             C41700 * C92252) *
                C92359 +
            (C57085 * C19898 + C57319 * C92334 + (C40601 - C40600) * C19899 +
             (C40841 - C40840) * C92252) *
                C92360 +
            ((C39236 - C39235) * C19898 + (C39448 - C39447) * C92334 +
             (C92097 * C37279 - C36262 * C37278) * C19899 +
             (C92097 * C37591 - C36262 * C37590) * C92252) *
                C44794) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C19898 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92334 +
            (C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C19899 +
            (C58145 - C58146 + C58147 - C58148 + C58149 - C58150) * C92252) *
               C92097 * C2664 +
           ((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C19898 +
            (C58146 - C58145 + C58148 - C58147 + C58150 - C58149) * C92334 +
            (C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C19899 +
            (C58151 - C58152 + C58153 - C58154 + C58155 - C58156) * C92252) *
               C92097 * C2665) *
              C1969 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C19898 +
            (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
             C44875 * C5417 - C44794 * C5517) *
                C92334 +
            (C60212 - C60213 + C60214 - C60215 + C60216 - C60217) * C19899 +
            (C60848 - C60849 + C60850 - C60851 + C60852 - C60853) * C92252) *
               C92097 * C2664 +
           ((C60213 - C60212 + C60215 - C60214 + C60217 - C60216) * C19898 +
            (C60849 - C60848 + C60851 - C60850 + C60853 - C60852) * C92334 +
            (C92359 * C5801 - C44873 * C5703 + C92360 * C5802 - C44874 * C5705 +
             C44794 * C37332 - C44875 * C37278) *
                C19899 +
            (C92359 * C6305 - C44873 * C6219 + C92360 * C6306 - C44874 * C6221 +
             C44794 * C37642 - C44875 * C37590) *
                C92252) *
               C92097 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19898 * C266 - C20400 * C108 - C19898 * C567 +
                       C92334 * C702 + C19899 * C1523 - C20401 * C1378 -
                       C19899 * C1771 + C92252 * C1898) *
                          C92359 +
                      (C26510 + C26511) * C92360 + C57472 * C44794) *
                         C92097 * C2664 -
                     ((C60964 + C60965) * C44794 + (C31174 + C31175) * C92360 +
                      (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
                       C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
                       C19898 * C1771 + C92334 * C1898) *
                          C92359) *
                         C92097 * C2665) *
                        C1969 +
                    (((C31175 + C31174) * C92359 + (C60965 + C60964) * C92360 +
                      (C19898 * C8690 - C20400 * C8454 - C19898 * C9122 +
                       C92334 * C9332 + C19899 * C37384 - C20401 * C37278 -
                       C19899 * C37590 + C92252 * C37693) *
                          C44794) *
                         C92097 * C2665 -
                     ((C57485 + C57486) * C44794 + (C26514 + C26515) * C92360 +
                      (C26511 + C26510) * C92359) *
                         C92097 * C2664) *
                        C1970) *
                   C92124) /
                  (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92334 +
            C41134 * C92252) *
               C92359 +
           (C56839 + C56840) * C92360 + C56845 * C44794) *
              C92150 * C790 -
          ((C56843 + C56844) * C44794 + (C56842 + C56841) * C92360 +
           (C56840 + C56839) * C92359) *
              C92150 * C791 +
          (C56845 * C92359 + (C56844 + C56843) * C92360 +
           (C36754 * C92334 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92334 +
            C41134 * C92252) *
               C92359 +
           (C36751 * C92334 + C39015 * C92252) * C92360 +
           (C36752 * C92334 + C39014 * C92252) * C44794) *
              C92150 * C92136 * C97 -
          (((C36262 * C5707 - C36263 * C5701 - C36262 * C5708 +
             C92097 * C5719) *
                C92252 +
            C37780 * C92334) *
               C44794 +
           (C41982 * C92252 + C37779 * C92334) * C92360 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92334) *
               C92359) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C92334 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C92359 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C92334 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C92360 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C92334 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92334 +
            C41134 * C92252) *
               C92359 +
           (C56839 + C56840) * C92360 + C56845 * C44794) *
              C1372 -
          ((C40347 * C92252 + C39014 * C92334) * C44794 +
           (C40346 * C92252 + C39015 * C92334) * C92360 +
           (C41135 * C92252 + C41134 * C92334) * C92359) *
              C1373 +
          ((C41135 * C92334 + C41137 * C92252) * C92359 +
           (C40346 * C92334 + C41136 * C92252) * C92360 +
           (C40347 * C92334 + (C36262 * C43814 - C36263 * C43813 -
                               C36262 * C43815 + C92097 * C43816) *
                                  C92252) *
               C44794) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C36262 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92097) *
               C92334 +
           ((C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
             C44794 * C5799 - C44875 * C5702) *
                C36262 +
            (C92359 * C1465 - C44873 * C1390 + C92360 * C3443 - C44874 * C3362 +
             C44794 * C5805 - C44875 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C36262 +
            (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
             C44875 * C4821 - C44794 * C4952) *
                C92097) *
               C92334 +
           ((C44873 * C3357 - C92359 * C3439 + C44874 * C5702 - C92360 * C5799 +
             C44875 * C8454 - C44794 * C8588) *
                C36262 +
            (C44873 * C3362 - C92359 * C3443 + C44874 * C5710 - C92360 * C5805 +
             C44875 * C8457 - C44794 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
             C44794 * C4950 - C44875 * C4816) *
                C36262 +
            (C92359 * C888 - C44873 * C811 + C92360 * C4952 - C44874 * C4821 +
             C44794 * C4954 - C44875 * C4823) *
                C92097) *
               C92334 +
           ((C92359 * C5799 - C44873 * C5702 + C92360 * C8588 - C44874 * C8454 +
             C44794 * C39084 - C44875 * C38990) *
                C36262 +
            (C92359 * C5805 - C44873 * C5710 + C92360 * C8590 - C44874 * C8457 +
             C44794 * C39085 - C44875 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C36262 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92097) *
               C92334 +
           ((C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
             C44794 * C5799 - C44875 * C5702) *
                C36262 +
            (C92359 * C1465 - C44873 * C1390 + C92360 * C3443 - C44874 * C3362 +
             C44794 * C5805 - C44875 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C36262 +
            (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92097) *
               C92334 +
           ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C36262 +
            (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C36262 +
            (C44896 - C44895 + C44898 - C44897 + C44900 - C44899) * C92097) *
               C92334 +
           ((C92359 * C1459 - C44873 * C1376 + C92360 * C3441 - C44874 * C3359 +
             C44794 * C7590 - C44875 * C7488) *
                C36262 +
            (C92359 * C1467 - C44873 * C1386 + C92360 * C3445 - C44874 * C3366 +
             C44794 * C7591 - C44875 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C36262 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92097) *
               C92334 +
           ((C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C36262 +
            (C57641 - C57642 + C57643 - C57644 + C57645 - C57646) * C92097) *
               C92252) *
              C1372 +
          (((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C36262 +
            (C57642 - C57641 + C57644 - C57643 + C57646 - C57645) * C92097) *
               C92334 +
           ((C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C36262 +
            (C57653 - C57654 + C57655 - C57656 + C57657 - C57658) * C92097) *
               C92252) *
              C1373 +
          (((C57648 - C57647 + C57650 - C57649 + C57652 - C57651) * C36262 +
            (C57654 - C57653 + C57656 - C57655 + C57658 - C57657) * C92097) *
               C92334 +
           ((C92359 * C11000 - C44873 * C10868 + C92360 * C13869 -
             C44874 * C13749 + C44794 * C43918 - C44875 * C43813) *
                C36262 +
            (C92359 * C11004 - C44873 * C10874 + C92360 * C13871 -
             C44874 * C13752 + C44794 * C43919 - C44875 * C43815) *
                C92097) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C36262 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92097) *
               C92359 +
           ((C25850 - C25851 + C25852 - C25853) * C36262 +
            (C25854 - C25855 + C25856 - C25857) * C92097) *
               C92360 +
           C57010 * C44794) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C36262 +
            (C25855 - C25854 + C25857 - C25856) * C92097) *
               C92359 +
           ((C25858 - C25859 + C25860 - C25861) * C36262 +
            (C25862 - C25863 + C25864 - C25865) * C92097) *
               C92360 +
           ((C56998 - C56999 + C57000 - C57001) * C36262 +
            (C57002 - C57003 + C57004 - C57005) * C92097) *
               C44794) *
              C92150 * C791 +
          (C57010 * C92359 +
           ((C56999 - C56998 + C57001 - C57000) * C36262 +
            (C57003 - C57002 + C57005 - C57004) * C92097) *
               C92360 +
           ((C92334 * C5032 - C19898 * C4816 + C92252 * C39152 -
             C19899 * C38990) *
                C36262 +
            (C92334 * C5036 - C19898 * C4823 + C92252 * C39153 -
             C19899 * C38992) *
                C92097) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C36262 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92097) *
               C92359 +
           ((C25850 - C25851 + C25852 - C25853) * C36262 +
            (C25854 - C25855 + C25856 - C25857) * C92097) *
               C92360 +
           ((C25859 - C25858 + C25861 - C25860) * C36262 +
            (C25863 - C25862 + C25865 - C25864) * C92097) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C36262 +
            (C19906 - C19905 + C19908 - C19907) * C92097) *
               C92359 +
           (C27898 * C36262 + C27899 * C92097) * C92360 +
           ((C25866 - C25867 + C25868 - C25869) * C36262 +
            (C25870 - C25871 + C25872 - C25873) * C92097) *
               C44794) *
              C92150 * C92136 * C98 +
          ((C19929 * C36262 + C19930 * C92097) * C92359 +
           ((C22170 - C22169 + C22172 - C22171) * C36262 +
            (C22174 - C22173 + C22176 - C22175) * C92097) *
               C92360 +
           ((C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                C36262 +
            (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
                C92097) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C36262 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92097) *
               C92359 +
           ((C25850 - C25851 + C25852 - C25853) * C36262 +
            (C25854 - C25855 + C25856 - C25857) * C92097) *
               C92360 +
           C57010 * C44794) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C36262 +
            (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
             C92252 * C1535) *
                C92097) *
               C92359 +
           ((C30334 - C30335 + C30336 - C30337) * C36262 +
            (C30338 - C30339 + C30340 - C30341) * C92097) *
               C92360 +
           ((C19898 * C5702 - C92334 * C5885 + C19899 * C5705 -
             C92252 * C5889) *
                C36262 +
            (C19898 * C5710 - C92334 * C5891 + C19899 * C5716 -
             C92252 * C5895) *
                C92097) *
               C44794) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C36262 +
            (C92334 * C1535 - C19898 * C1392 + C92252 * C11113 -
             C19899 * C10874) *
                C92097) *
               C92359 +
           ((C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
             C19899 * C13749) *
                C36262 +
            (C92334 * C5893 - C19898 * C5712 + C92252 * C13981 -
             C19899 * C13752) *
                C92097) *
               C92360 +
           ((C92334 * C5889 - C19898 * C5705 + C92252 * C44034 -
             C19899 * C43813) *
                C36262 +
            (C92334 * C5895 - C19898 * C5716 + C92252 * C44035 -
             C19899 * C43815) *
                C92097) *
               C44794) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C44873 +
                      (C92097 * C354 - C36262 * C348) * C92359 +
                      (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
                      C36943 * C44875 + C36944 * C44794) *
                         C92334 +
                     ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
                      C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
                      C57086 * C44794) *
                         C92252) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C44873 + (C36930 - C36929) * C92359 +
                      (C36932 - C36931) * C44874 + (C36934 - C36933) * C92360 +
                      (C36936 - C36935) * C44875 + (C36938 - C36937) * C44794) *
                         C92334 +
                     (C44151 * C44873 + C44152 * C92359 +
                      (C39231 - C39232) * C44874 + (C39233 - C39234) * C92360 +
                      (C39235 - C39236) * C44875 + (C39237 - C39238) * C44794) *
                         C92252) *
                        C92150 * C791 +
                    ((C36943 * C44873 + C36944 * C92359 + C36945 * C44874 +
                      C36946 * C92360 + (C36940 - C36939) * C44875 +
                      (C36942 - C36941) * C44794) *
                         C92334 +
                     (C57085 * C44873 + C57086 * C92359 +
                      (C39236 - C39235) * C44874 + (C39238 - C39237) * C92360 +
                      (C92097 * C38991 - C36262 * C38990) * C44875 +
                      (C92097 * C39225 - C36262 * C39224) * C44794) *
                         C92252) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C44873 +
                      (C92097 * C354 - C36262 * C348) * C92359 +
                      (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
                      C36943 * C44875 + C36944 * C44794) *
                         C92334 +
                     ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
                      C44149 * C44874 + C44150 * C92360 +
                      (C39232 - C39231) * C44875 + (C39234 - C39233) * C44794) *
                         C92252) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C44873 +
                      (C36262 * C349 - C92097 * C355) * C92359 +
                      (C37983 - C37984) * C44874 + (C37985 - C37986) * C92360 +
                      (C37987 - C37988) * C44875 + (C37989 - C37990) * C44794) *
                         C92334 +
                     ((C43196 - C43197) * C44873 + (C43198 - C43199) * C92359 +
                      (C42280 - C42281) * C44874 + (C42282 - C42283) * C92360 +
                      (C36262 * C5701 - C92097 * C5707) * C44875 +
                      (C36262 * C5972 - C92097 * C5978) * C44794) *
                         C92252) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C44873 +
                      (C92097 * C356 - C36262 * C350) * C92359 +
                      (C92097 * C804 - C36262 * C795) * C44874 +
                      (C92097 * C1018 - C36262 * C1010) * C92360 +
                      (C92097 * C814 - C36262 * C800) * C44875 +
                      (C92097 * C1022 - C36262 * C1014) * C44794) *
                         C92334 +
                     ((C92097 * C1385 - C36262 * C1376) * C44873 +
                      (C92097 * C1599 - C36262 * C1591) * C92359 +
                      (C92097 * C3365 - C36262 * C3359) * C44874 +
                      (C92097 * C3593 - C36262 * C3589) * C92360 +
                      (C92097 * C7489 - C36262 * C7488) * C44875 +
                      (C92097 * C7811 - C36262 * C7810) * C44794) *
                         C92252) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C44873 +
                      (C92097 * C354 - C36262 * C348) * C92359 +
                      (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
                      C36943 * C44875 + C36944 * C44794) *
                         C92334 +
                     ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
                      C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
                      C57086 * C44794) *
                         C92252) *
                        C1372 +
                    (((C41400 - C41399) * C44873 + (C41402 - C41401) * C92359 +
                      C44151 * C44874 + C44152 * C92360 +
                      (C39231 - C39232) * C44875 + (C39233 - C39234) * C44794) *
                         C92334 +
                     ((C41404 - C41403) * C44873 + (C41406 - C41405) * C92359 +
                      C44153 * C44874 + C44154 * C92360 +
                      (C40600 - C40601) * C44875 + (C40602 - C40603) * C44794) *
                         C92252) *
                        C1373 +
                    ((C41417 * C44873 + C41418 * C92359 + C41407 * C44874 +
                      C41408 * C92360 + (C40601 - C40600) * C44875 +
                      (C40603 - C40602) * C44794) *
                         C92334 +
                     ((C41410 - C41409) * C44873 + (C41412 - C41411) * C92359 +
                      (C41414 - C41413) * C44874 + (C41416 - C41415) * C92360 +
                      (C92097 * C43814 - C36262 * C43813) * C44875 +
                      (C92097 * C44147 - C36262 * C44146) * C44794) *
                         C92252) *
                        C1374) *
                   C92136 * C92124) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92097 * C92334 +
           (C44873 * C1457 - C45122 * C1378 - C44873 * C1589 + C92359 * C1658 +
            C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
            C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C44875 * C8588 - C45124 * C8454 - C44875 * C8800 + C44794 * C8918 +
            C44874 * C5799 - C45123 * C5702 - C44874 * C5971 + C92360 * C6058 +
            C44873 * C3439 - C45122 * C3357 - C44873 * C3587 + C92359 * C3661) *
               C92097 * C92252 +
           (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
            C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
            C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
               C92097 * C92334) *
              C92150 * C791 +
          ((C44873 * C880 - C45122 * C798 - C44873 * C1012 + C92359 * C1078 +
            C44874 * C4948 - C45123 * C4815 - C44874 * C5139 + C92360 * C5252 +
            C44875 * C4950 - C45124 * C4816 - C44875 * C5141 + C44794 * C5253) *
               C92097 * C92334 +
           (C44873 * C5799 - C45122 * C5702 - C44873 * C5971 + C92359 * C6058 +
            C44874 * C8588 - C45123 * C8454 - C44874 * C8800 + C92360 * C8918 +
            C44875 * C39084 - C45124 * C38990 - C44875 * C39224 +
            C44794 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92097 * C92334 +
           (C44873 * C1457 - C45122 * C1378 - C44873 * C1589 + C92359 * C1658 +
            C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
            C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C48409 + C48410 + C48411) * C92097 * C92252 +
           (C45164 + C45163 + C45162) * C92097 * C92334) *
              C92150 * C92136 * C98 +
          ((C45167 + C45166 + C45165) * C92097 * C92334 +
           (C44873 * C1459 - C45122 * C1376 - C44873 * C1591 + C92359 * C1656 +
            C44874 * C3441 - C45123 * C3359 - C44874 * C3589 + C92360 * C3663 +
            C44875 * C7590 - C45124 * C7488 - C44875 * C7810 + C44794 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92097 * C92334 +
           (C57917 + C57918 + C57919) * C92097 * C92252) *
              C1372 -
          ((C57920 + C57921 + C57922) * C92097 * C92252 +
           (C57919 + C57918 + C57917) * C92097 * C92334) *
              C1373 +
          ((C57922 + C57921 + C57920) * C92097 * C92334 +
           (C44873 * C11000 - C45122 * C10868 - C44873 * C11191 +
            C92359 * C11307 + C44874 * C13869 - C45123 * C13749 -
            C44874 * C14081 + C92360 * C14191 + C44875 * C43918 -
            C45124 * C43813 - C44875 * C44146 + C44794 * C44252) *
               C92097 * C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C44873 +
           (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
               C92359 +
           (C25850 - C25851 + C25852 - C25853) * C44874 +
           (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
           C57241 * C44794) *
              C92097 * C92150 * C790 +
          ((C25851 - C25850 + C25853 - C25852) * C44873 +
           (C26169 - C26168 + C26171 - C26170) * C92359 +
           (C25858 - C25859 + C25860 - C25861) * C44874 +
           (C26172 - C26173 + C26174 - C26175) * C92360 +
           (C56998 - C56999 + C57000 - C57001) * C44875 +
           (C57237 - C57238 + C57239 - C57240) * C44794) *
              C92097 * C92150 * C791 +
          (C57006 * C44873 + C57241 * C92359 +
           (C56999 - C56998 + C57001 - C57000) * C44874 +
           (C57238 - C57237 + C57240 - C57239) * C92360 +
           (C92334 * C5032 - C19898 * C4816 + C92252 * C39152 -
            C19899 * C38990) *
               C44875 +
           (C92334 * C5331 - C19898 * C5141 + C92252 * C39371 -
            C19899 * C39224) *
               C44794) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C44873 +
           (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
               C92359 +
           (C25850 - C25851 + C25852 - C25853) * C44874 +
           (C26168 - C26169 + C26170 - C26171) * C92360 +
           (C25859 - C25858 + C25861 - C25860) * C44875 +
           (C26173 - C26172 + C26175 - C26174) * C44794) *
              C92097 * C92150 * C92136 * C97 +
          ((C19902 - C19901 + C19904 - C19903) * C44873 +
           (C20154 - C20153 + C20156 - C20155) * C92359 + C27898 * C44874 +
           C28317 * C92360 + (C25866 - C25867 + C25868 - C25869) * C44875 +
           (C26176 - C26177 + C26178 - C26179) * C44794) *
              C92097 * C92150 * C92136 * C98 +
          (C19929 * C44873 + C20168 * C92359 +
           (C22170 - C22169 + C22172 - C22171) * C44874 +
           (C22483 - C22482 + C22485 - C22484) * C92360 +
           (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
               C44875 +
           (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 - C19899 * C7810) *
               C44794) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C44873 +
           (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
               C92359 +
           (C25850 - C25851 + C25852 - C25853) * C44874 +
           (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
           C57241 * C44794) *
              C92097 * C1372 +
          ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 - C92252 * C1527) *
               C44873 +
           (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 - C92252 * C1717) *
               C92359 +
           (C30334 - C30335 + C30336 - C30337) * C44874 +
           (C30758 - C30759 + C30760 - C30761) * C92360 +
           (C19898 * C5702 - C92334 * C5885 + C19899 * C5705 - C92252 * C5889) *
               C44875 +
           (C19898 * C5971 - C92334 * C6137 + C19899 * C5975 - C92252 * C6140) *
               C44794) *
              C92097 * C1373 +
          ((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
            C19899 * C10868) *
               C44873 +
           (C92334 * C1717 - C19898 * C1593 + C92252 * C11419 -
            C19899 * C11191) *
               C92359 +
           (C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
            C19899 * C13749) *
               C44874 +
           (C92334 * C6139 - C19898 * C5973 + C92252 * C14309 -
            C19899 * C14081) *
               C92360 +
           (C92334 * C5889 - C19898 * C5705 + C92252 * C44034 -
            C19899 * C43813) *
               C44875 +
           (C92334 * C6140 - C19898 * C5975 + C92252 * C44379 -
            C19899 * C44146) *
               C44794) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C19898 +
                      (C92097 * C573 - C36262 * C567) * C92334 +
                      (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                         C92359 +
                     ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
                      C44149 * C19899 + C44487 * C92252) *
                         C92360 +
                     C57323 * C44794) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C19898 + (C37105 - C37104) * C92334 +
                      C44151 * C19899 + C44488 * C92252) *
                         C92359 +
                     ((C36932 - C36931) * C19898 + (C37108 - C37107) * C92334 +
                      (C39231 - C39232) * C19899 + (C39445 - C39446) * C92252) *
                         C92360 +
                     ((C36936 - C36935) * C19898 + (C37111 - C37110) * C92334 +
                      (C39235 - C39236) * C19899 + (C39447 - C39448) * C92252) *
                         C44794) *
                        C92150 * C791 +
                    (C57323 * C92359 +
                     (C36945 * C19898 + C37115 * C92334 +
                      (C39236 - C39235) * C19899 + (C39448 - C39447) * C92252) *
                         C92360 +
                     ((C36940 - C36939) * C19898 + (C37113 - C37112) * C92334 +
                      (C92097 * C38991 - C36262 * C38990) * C19899 +
                      (C92097 * C39441 - C36262 * C39440) * C92252) *
                         C44794) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C19898 +
                      (C92097 * C573 - C36262 * C567) * C92334 +
                      (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                         C92359 +
                     ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
                      C44149 * C19899 + C44487 * C92252) *
                         C92360 +
                     (C36943 * C19898 + C37114 * C92334 +
                      (C39232 - C39231) * C19899 + (C39446 - C39445) * C92252) *
                         C44794) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C19898 +
                      (C36262 * C568 - C92097 * C574) * C92334 +
                      (C43196 - C43197) * C19899 + (C43512 - C43513) * C92252) *
                         C92359 +
                     ((C37983 - C37984) * C19898 + (C38193 - C38194) * C92334 +
                      (C42280 - C42281) * C19899 + (C42582 - C42583) * C92252) *
                         C92360 +
                     ((C37987 - C37988) * C19898 + (C38195 - C38196) * C92334 +
                      (C36262 * C5701 - C92097 * C5707) * C19899 +
                      (C36262 * C6218 - C92097 * C6224) * C92252) *
                         C44794) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C19898 +
                      (C92097 * C575 - C36262 * C569) * C92334 +
                      (C92097 * C1385 - C36262 * C1376) * C19899 +
                      (C92097 * C1781 - C36262 * C1773) * C92252) *
                         C92359 +
                     ((C92097 * C804 - C36262 * C795) * C19898 +
                      (C92097 * C1200 - C36262 * C1192) * C92334 +
                      (C92097 * C3365 - C36262 * C3359) * C19899 +
                      (C92097 * C3807 - C36262 * C3803) * C92252) *
                         C92360 +
                     ((C92097 * C814 - C36262 * C800) * C19898 +
                      (C92097 * C1204 - C36262 * C1196) * C92334 +
                      (C92097 * C7489 - C36262 * C7488) * C19899 +
                      (C92097 * C8134 - C36262 * C8133) * C92252) *
                         C44794) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C19898 +
                      (C92097 * C573 - C36262 * C567) * C92334 +
                      (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                         C92359 +
                     ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
                      C44149 * C19899 + C44487 * C92252) *
                         C92360 +
                     C57323 * C44794) *
                        C1372 +
                    (((C41400 - C41399) * C19898 + (C41697 - C41696) * C92334 +
                      (C41404 - C41403) * C19899 + (C41699 - C41698) * C92252) *
                         C92359 +
                     (C44151 * C19898 + C44488 * C92334 + C44153 * C19899 +
                      C44489 * C92252) *
                         C92360 +
                     ((C39231 - C39232) * C19898 + (C39445 - C39446) * C92334 +
                      (C40600 - C40601) * C19899 + (C40840 - C40841) * C92252) *
                         C44794) *
                        C1373 +
                    ((C41417 * C19898 + C41705 * C92334 +
                      (C41410 - C41409) * C19899 + (C41702 - C41701) * C92252) *
                         C92359 +
                     (C41407 * C19898 + C41700 * C92334 +
                      (C41414 - C41413) * C19899 + (C41704 - C41703) * C92252) *
                         C92360 +
                     ((C40601 - C40600) * C19898 + (C40841 - C40840) * C92334 +
                      (C92097 * C43814 - C36262 * C43813) * C19899 +
                      (C92097 * C44485 - C36262 * C44484) * C92252) *
                         C44794) *
                        C1374) *
                   C92136 * C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C19898 +
           (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
            C44794 * C1260 - C44875 * C1194) *
               C92334 +
           (C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
            C44794 * C5799 - C44875 * C5702) *
               C19899 +
           (C92359 * C1837 - C44873 * C1771 + C92360 * C3875 - C44874 * C3801 +
            C44794 * C6303 - C44875 * C6217) *
               C92252) *
              C92097 * C92150 * C790 +
          ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
            C44875 * C4815 - C44794 * C4948) *
               C19898 +
           (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
            C44875 * C5417 - C44794 * C5517) *
               C92334 +
           (C44873 * C3357 - C92359 * C3439 + C44874 * C5702 - C92360 * C5799 +
            C44875 * C8454 - C44794 * C8588) *
               C19899 +
           (C44873 * C3801 - C92359 * C3875 + C44874 * C6217 - C92360 * C6303 +
            C44875 * C9122 - C44794 * C9232) *
               C92252) *
              C92097 * C92150 * C791 +
          ((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
            C44794 * C4950 - C44875 * C4816) *
               C19898 +
           (C92359 * C1260 - C44873 * C1194 + C92360 * C5517 - C44874 * C5417 +
            C44794 * C5519 - C44875 * C5419) *
               C92334 +
           (C92359 * C5799 - C44873 * C5702 + C92360 * C8588 - C44874 * C8454 +
            C44794 * C39084 - C44875 * C38990) *
               C19899 +
           (C92359 * C6303 - C44873 * C6217 + C92360 * C9232 - C44874 * C9122 +
            C44794 * C39514 - C44875 * C39440) *
               C92252) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C19898 +
           (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
            C44794 * C1260 - C44875 * C1194) *
               C92334 +
           (C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
            C44794 * C5799 - C44875 * C5702) *
               C19899 +
           (C92359 * C1837 - C44873 * C1771 + C92360 * C3875 - C44874 * C3801 +
            C44794 * C6303 - C44875 * C6217) *
               C92252) *
              C92097 * C92150 * C92136 * C97 +
          ((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C19898 +
           (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92334 +
           (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C19899 +
           (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92252) *
              C92097 * C92150 * C92136 * C98 +
          ((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C19898 +
           (C45397 - C45396 + C45399 - C45398 + C45401 - C45400) * C92334 +
           (C92359 * C1459 - C44873 * C1376 + C92360 * C3441 - C44874 * C3359 +
            C44794 * C7590 - C44875 * C7488) *
               C19899 +
           (C92359 * C1839 - C44873 * C1773 + C92360 * C3877 - C44874 * C3803 +
            C44794 * C8233 - C44875 * C8133) *
               C92252) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C19898 +
           (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
            C44794 * C1260 - C44875 * C1194) *
               C92334 +
           (C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C19899 +
           (C58145 - C58146 + C58147 - C58148 + C58149 - C58150) * C92252) *
              C92097 * C1372 +
          ((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C19898 +
           (C58146 - C58145 + C58148 - C58147 + C58150 - C58149) * C92334 +
           (C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C19899 +
           (C58151 - C58152 + C58153 - C58154 + C58155 - C58156) * C92252) *
              C92097 * C1373 +
          ((C57648 - C57647 + C57650 - C57649 + C57652 - C57651) * C19898 +
           (C58152 - C58151 + C58154 - C58153 + C58156 - C58155) * C92334 +
           (C92359 * C11000 - C44873 * C10868 + C92360 * C13869 -
            C44874 * C13749 + C44794 * C43918 - C44875 * C43813) *
               C19899 +
           (C92359 * C11594 - C44873 * C11497 + C92360 * C14515 -
            C44874 * C14409 + C44794 * C44587 - C44875 * C44484) *
               C92252) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92359 +
           (C26510 + C26511) * C92360 + C57472 * C44794) *
              C92097 * C92150 * C790 -
          ((C57485 + C57486) * C44794 + (C26514 + C26515) * C92360 +
           (C26511 + C26510) * C92359) *
              C92097 * C92150 * C791 +
          (C57472 * C92359 + (C57486 + C57485) * C92360 +
           (C19898 * C5032 - C20400 * C4816 - C19898 * C5419 + C92334 * C5597 +
            C19899 * C39152 - C20401 * C38990 - C19899 * C39440 +
            C92252 * C39581) *
               C44794) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92359 +
           (C26510 + C26511) * C92360 + (C26515 + C26514) * C44794) *
              C92097 * C92150 * C92136 * C97 -
          ((C26512 + C26513) * C44794 + C28717 * C92360 +
           (C20440 + C20439) * C92359) *
              C92097 * C92150 * C92136 * C98 +
          (C20445 * C92359 + (C22807 + C22806) * C92360 +
           (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
            C19899 * C7702 - C20401 * C7488 - C19899 * C8133 + C92252 * C8338) *
               C44794) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92359 +
           (C26510 + C26511) * C92360 + C57472 * C44794) *
              C92097 * C1372 -
          ((C19899 * C5889 - C20401 * C5705 - C19899 * C6221 + C92252 * C6386 +
            C19898 * C5885 - C20400 * C5702 - C19898 * C6217 + C92334 * C6384) *
               C44794 +
           (C31174 + C31175) * C92360 +
           (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 + C92252 * C1899 +
            C19898 * C1523 - C20400 * C1378 - C19898 * C1771 + C92334 * C1898) *
               C92359) *
              C92097 * C1373 +
          ((C19898 * C1527 - C20400 * C1379 - C19898 * C1775 + C92334 * C1899 +
            C19899 * C11109 - C20401 * C10868 - C19899 * C11497 +
            C92252 * C11683) *
               C92359 +
           (C19898 * C5887 - C20400 * C5703 - C19898 * C6219 + C92334 * C6385 +
            C19899 * C13979 - C20401 * C13749 - C19899 * C14409 +
            C92252 * C14619) *
               C92360 +
           (C19898 * C5889 - C20400 * C5705 - C19898 * C6221 + C92334 * C6386 +
            C19899 * C44034 - C20401 * C43813 - C19899 * C44484 +
            C92252 * C44694) *
               C44794) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92334 +
             C41134 * C92252) *
                C92359 +
            (C56839 + C56840) * C92360 + C56845 * C44794) *
               C2664 -
           ((C40347 * C92252 + C39014 * C92334) * C44794 +
            (C40346 * C92252 + C39015 * C92334) * C92360 +
            (C41135 * C92252 + C41134 * C92334) * C92359) *
               C2665) *
              C92136 * C1971 +
          (((C42892 * C92334 + C42893 * C92252) * C92359 +
            (C41982 * C92334 + C41983 * C92252) * C92360 +
            (C58338 * C92334 + (C36262 * C5717 - C36263 * C5706 -
                                C36262 * C5718 + C92097 * C5724) *
                                   C92252) *
                C44794) *
               C2665 -
           ((C58339 + C58331) * C44794 + (C58330 + C58329) * C92360 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C92334) *
                C92359) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
              C44794 * C880 - C44875 * C798) *
                 C36262 +
             (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
              C44794 * C888 - C44875 * C811) *
                 C92097) *
                C92334 +
            ((C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C36262 +
             (C57641 - C57642 + C57643 - C57644 + C57645 - C57646) * C92097) *
                C92252) *
               C2664 +
           (((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C36262 +
             (C57642 - C57641 + C57644 - C57643 + C57646 - C57645) * C92097) *
                C92334 +
            ((C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C36262 +
             (C57653 - C57654 + C57655 - C57656 + C57657 - C57658) * C92097) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C36262 +
             (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92097) *
                C92334 +
            ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C36262 +
             (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92097) *
                C92252) *
               C2664 +
           (((C48086 - C48085 + C48088 - C48087 + C48090 - C48089) * C36262 +
             (C48092 - C48091 + C48094 - C48093 + C48096 - C48095) * C92097) *
                C92334 +
            ((C92359 * C1462 - C44873 * C1380 + C92360 * C5803 -
              C44874 * C5704 + C44794 * C5804 - C44875 * C5706) *
                 C36262 +
             (C92359 * C1470 - C44873 * C1394 + C92360 * C5809 -
              C44874 * C5714 + C44794 * C5810 - C44875 * C5718) *
                 C92097) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C36262 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92097) *
                C92359 +
            ((C25850 - C25851 + C25852 - C25853) * C36262 +
             (C25854 - C25855 + C25856 - C25857) * C92097) *
                C92360 +
            C57010 * C44794) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C92359 +
            ((C30334 - C30335 + C30336 - C30337) * C36262 +
             (C30338 - C30339 + C30340 - C30341) * C92097) *
                C92360 +
            ((C19898 * C5702 - C92334 * C5885 + C19899 * C5705 -
              C92252 * C5889) *
                 C36262 +
             (C19898 * C5710 - C92334 * C5891 + C19899 * C5716 -
              C92252 * C5895) *
                 C92097) *
                C44794) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C36262 +
             (C19906 - C19905 + C19908 - C19907) * C92097) *
                C92359 +
            (C27898 * C36262 + C27899 * C92097) * C92360 +
            ((C25866 - C25867 + C25868 - C25869) * C36262 +
             (C25870 - C25871 + C25872 - C25873) * C92097) *
                C44794) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C36262 +
             (C23132 - C23131 + C23134 - C23133) * C92097) *
                C92359 +
            ((C29121 - C29120 + C29123 - C29122) * C36262 +
             (C29125 - C29124 + C29127 - C29126) * C92097) *
                C92360 +
            ((C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
              C19899 * C5706) *
                 C36262 +
             (C92334 * C5892 - C19898 * C5708 + C92252 * C5896 -
              C19899 * C5718) *
                 C92097) *
                C44794) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C44873 +
             (C92097 * C354 - C36262 * C348) * C92359 +
             (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
             C36943 * C44875 + C36944 * C44794) *
                C92334 +
            ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
             C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
             C57086 * C44794) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C44873 + (C41402 - C41401) * C92359 +
             C44151 * C44874 + C44152 * C92360 + (C39231 - C39232) * C44875 +
             (C39233 - C39234) * C44794) *
                C92334 +
            ((C41404 - C41403) * C44873 + (C41406 - C41405) * C92359 +
             C44153 * C44874 + C44154 * C92360 + (C40600 - C40601) * C44875 +
             (C40602 - C40603) * C44794) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C44873 +
             (C36262 * C349 - C92097 * C355) * C92359 +
             (C37983 - C37984) * C44874 + (C37985 - C37986) * C92360 +
             (C37987 - C37988) * C44875 + (C37989 - C37990) * C44794) *
                C92334 +
            ((C43196 - C43197) * C44873 + (C43198 - C43199) * C92359 +
             (C42280 - C42281) * C44874 + (C42282 - C42283) * C92360 +
             (C58634 - C58635) * C44875 + (C58636 - C58637) * C44794) *
                C92252) *
               C2664 +
           (((C43197 - C43196) * C44873 + (C43199 - C43198) * C92359 +
             (C42281 - C42280) * C44874 + (C42283 - C42282) * C92360 +
             (C58635 - C58634) * C44875 + (C58637 - C58636) * C44794) *
                C92334 +
            ((C43201 - C43200) * C44873 + (C43203 - C43202) * C92359 +
             (C42285 - C42284) * C44874 + (C42287 - C42286) * C92360 +
             (C92097 * C5717 - C36262 * C5706) * C44875 +
             (C92097 * C5982 - C36262 * C5976) * C44794) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
             C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
             C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
                C92097 * C92334 +
            (C57917 + C57918 + C57919) * C92097 * C92252) *
               C2664 -
           ((C57920 + C57921 + C57922) * C92097 * C92252 +
            (C57919 + C57918 + C57917) * C92097 * C92334) *
               C2665) *
              C92136 * C1971 +
          (((C48411 + C48410 + C48409) * C92097 * C92334 +
            (C44873 * C1462 - C45122 * C1380 - C44873 * C1594 + C92359 * C1660 +
             C44874 * C5803 - C45123 * C5704 - C44874 * C5974 + C92360 * C6061 +
             C44875 * C5804 - C45124 * C5706 - C44875 * C5976 +
             C44794 * C6062) *
                C92097 * C92252) *
               C2665 -
           ((C48409 + C48410 + C48411) * C92097 * C92252 +
            (C45164 + C45163 + C45162) * C92097 * C92334) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C44873 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C92359 +
            (C25850 - C25851 + C25852 - C25853) * C44874 +
            (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
            C57241 * C44794) *
               C92097 * C2664 +
           ((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C44873 +
            (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
             C92252 * C1717) *
                C92359 +
            (C30334 - C30335 + C30336 - C30337) * C44874 +
            (C30758 - C30759 + C30760 - C30761) * C92360 +
            (C19898 * C5702 - C92334 * C5885 + C19899 * C5705 -
             C92252 * C5889) *
                C44875 +
            (C19898 * C5971 - C92334 * C6137 + C19899 * C5975 -
             C92252 * C6140) *
                C44794) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C19902 - C19901 + C19904 - C19903) * C44873 +
            (C20154 - C20153 + C20156 - C20155) * C92359 + C27898 * C44874 +
            C28317 * C92360 + (C25866 - C25867 + C25868 - C25869) * C44875 +
            (C26176 - C26177 + C26178 - C26179) * C44794) *
               C92097 * C2664 +
           ((C23128 - C23127 + C23130 - C23129) * C44873 +
            (C23453 - C23452 + C23455 - C23454) * C92359 +
            (C29121 - C29120 + C29123 - C29122) * C44874 +
            (C29521 - C29520 + C29523 - C29522) * C92360 +
            (C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
             C19899 * C5706) *
                C44875 +
            (C92334 * C6138 - C19898 * C5972 + C92252 * C6142 -
             C19899 * C5976) *
                C44794) *
               C92097 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C19898 +
             (C92097 * C573 - C36262 * C567) * C92334 +
             (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                C92359 +
            ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
             C44149 * C19899 + C44487 * C92252) *
                C92360 +
            C57323 * C44794) *
               C2664 +
           (((C41400 - C41399) * C19898 + (C41697 - C41696) * C92334 +
             (C41404 - C41403) * C19899 + (C41699 - C41698) * C92252) *
                C92359 +
            (C44151 * C19898 + C44488 * C92334 + C44153 * C19899 +
             C44489 * C92252) *
                C92360 +
            ((C39231 - C39232) * C19898 + (C39445 - C39446) * C92334 +
             (C40600 - C40601) * C19899 + (C40840 - C40841) * C92252) *
                C44794) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C19898 +
             (C36262 * C568 - C92097 * C574) * C92334 +
             (C43196 - C43197) * C19899 + (C43512 - C43513) * C92252) *
                C92359 +
            ((C37983 - C37984) * C19898 + (C38193 - C38194) * C92334 +
             (C42280 - C42281) * C19899 + (C42582 - C42583) * C92252) *
                C92360 +
            ((C37987 - C37988) * C19898 + (C38195 - C38196) * C92334 +
             (C58634 - C58635) * C19899 + (C58932 - C58933) * C92252) *
                C44794) *
               C2664 +
           (((C43197 - C43196) * C19898 + (C43513 - C43512) * C92334 +
             (C43201 - C43200) * C19899 + (C43515 - C43514) * C92252) *
                C92359 +
            ((C42281 - C42280) * C19898 + (C42583 - C42582) * C92334 +
             (C42285 - C42284) * C19899 + (C42585 - C42584) * C92252) *
                C92360 +
            ((C58635 - C58634) * C19898 + (C58933 - C58932) * C92334 +
             (C92097 * C5717 - C36262 * C5706) * C19899 +
             (C92097 * C6228 - C36262 * C6222) * C92252) *
                C44794) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C19898 +
            (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
             C44794 * C1260 - C44875 * C1194) *
                C92334 +
            (C57635 - C57636 + C57637 - C57638 + C57639 - C57640) * C19899 +
            (C58145 - C58146 + C58147 - C58148 + C58149 - C58150) * C92252) *
               C92097 * C2664 +
           ((C57636 - C57635 + C57638 - C57637 + C57640 - C57639) * C19898 +
            (C58146 - C58145 + C58148 - C58147 + C58150 - C58149) * C92334 +
            (C57647 - C57648 + C57649 - C57650 + C57651 - C57652) * C19899 +
            (C58151 - C58152 + C58153 - C58154 + C58155 - C58156) * C92252) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C19898 +
            (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92334 +
            (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C19899 +
            (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92252) *
               C92097 * C2664 +
           ((C48086 - C48085 + C48088 - C48087 + C48090 - C48089) * C19898 +
            (C48707 - C48706 + C48709 - C48708 + C48711 - C48710) * C92334 +
            (C92359 * C1462 - C44873 * C1380 + C92360 * C5803 - C44874 * C5704 +
             C44794 * C5804 - C44875 * C5706) *
                C19899 +
            (C92359 * C1842 - C44873 * C1776 + C92360 * C6307 - C44874 * C6220 +
             C44794 * C6308 - C44875 * C6222) *
                C92252) *
               C92097 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19898 * C266 - C20400 * C108 - C19898 * C567 +
                       C92334 * C702 + C19899 * C1523 - C20401 * C1378 -
                       C19899 * C1771 + C92252 * C1898) *
                          C92359 +
                      (C26510 + C26511) * C92360 + C57472 * C44794) *
                         C92097 * C2664 -
                     ((C19899 * C5889 - C20401 * C5705 - C19899 * C6221 +
                       C92252 * C6386 + C19898 * C5885 - C20400 * C5702 -
                       C19898 * C6217 + C92334 * C6384) *
                          C44794 +
                      (C31174 + C31175) * C92360 +
                      (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
                       C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
                       C19898 * C1771 + C92334 * C1898) *
                          C92359) *
                         C92097 * C2665) *
                        C92136 * C1971 +
                    (((C23788 + C23787) * C92359 + (C29933 + C29932) * C92360 +
                      (C19898 * C5886 - C20400 * C5701 - C19898 * C6218 +
                       C92334 * C6383 + C19899 * C5890 - C20401 * C5706 -
                       C19899 * C6222 + C92252 * C6388) *
                          C44794) *
                         C92097 * C2665 -
                     ((C26512 + C26513) * C44794 + C28717 * C92360 +
                      (C20440 + C20439) * C92359) *
                         C92097 * C2664) *
                        C92136 * C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92334 +
            C41134 * C92252) *
               C92359 +
           (C36751 * C92334 + C39015 * C92252) * C92360 +
           (C36752 * C92334 + C39014 * C92252) * C44794) *
              C92150 * C92136 * C97 -
          (((C36262 * C5707 - C36263 * C5701 - C36262 * C5708 +
             C92097 * C5719) *
                C92252 +
            C37780 * C92334) *
               C44794 +
           (C41982 * C92252 + C37779 * C92334) * C92360 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92334) *
               C92359) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C92334 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C92359 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C92334 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C92360 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C92334 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92334 +
            C41134 * C92252) *
               C92359 +
           (C56839 + C56840) * C92360 + C56845 * C44794) *
              C92150 * C790 -
          ((C56843 + C56844) * C44794 + (C56842 + C56841) * C92360 +
           (C56840 + C56839) * C92359) *
              C92150 * C791 +
          (C56845 * C92359 + (C56844 + C56843) * C92360 +
           (C36754 * C92334 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C36262 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92097) *
               C92334 +
           ((C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
             C44794 * C5799 - C44875 * C5702) *
                C36262 +
            (C92359 * C1465 - C44873 * C1390 + C92360 * C3443 - C44874 * C3362 +
             C44794 * C5805 - C44875 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C36262 +
            (C44884 - C44883 + C44886 - C44885 + C44888 - C44887) * C92097) *
               C92334 +
           ((C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C36262 +
            (C48091 - C48092 + C48093 - C48094 + C48095 - C48096) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C36262 +
            (C44896 - C44895 + C44898 - C44897 + C44900 - C44899) * C92097) *
               C92334 +
           ((C92359 * C1459 - C44873 * C1376 + C92360 * C3441 - C44874 * C3359 +
             C44794 * C7590 - C44875 * C7488) *
                C36262 +
            (C92359 * C1467 - C44873 * C1386 + C92360 * C3445 - C44874 * C3366 +
             C44794 * C7591 - C44875 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
             C44794 * C880 - C44875 * C798) *
                C36262 +
            (C92359 * C189 - C44873 * C115 + C92360 * C884 - C44874 * C809 +
             C44794 * C888 - C44875 * C811) *
                C92097) *
               C92334 +
           ((C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
             C44794 * C5799 - C44875 * C5702) *
                C36262 +
            (C92359 * C1465 - C44873 * C1390 + C92360 * C3443 - C44874 * C3362 +
             C44794 * C5805 - C44875 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
             C44875 * C4815 - C44794 * C4948) *
                C36262 +
            (C44873 * C809 - C92359 * C884 + C44874 * C811 - C92360 * C888 +
             C44875 * C4821 - C44794 * C4952) *
                C92097) *
               C92334 +
           ((C44873 * C3357 - C92359 * C3439 + C44874 * C5702 - C92360 * C5799 +
             C44875 * C8454 - C44794 * C8588) *
                C36262 +
            (C44873 * C3362 - C92359 * C3443 + C44874 * C5710 - C92360 * C5805 +
             C44875 * C8457 - C44794 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
             C44794 * C4950 - C44875 * C4816) *
                C36262 +
            (C92359 * C888 - C44873 * C811 + C92360 * C4952 - C44874 * C4821 +
             C44794 * C4954 - C44875 * C4823) *
                C92097) *
               C92334 +
           ((C92359 * C5799 - C44873 * C5702 + C92360 * C8588 - C44874 * C8454 +
             C44794 * C39084 - C44875 * C38990) *
                C36262 +
            (C92359 * C5805 - C44873 * C5710 + C92360 * C8590 - C44874 * C8457 +
             C44794 * C39085 - C44875 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C36262 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92097) *
               C92359 +
           ((C25850 - C25851 + C25852 - C25853) * C36262 +
            (C25854 - C25855 + C25856 - C25857) * C92097) *
               C92360 +
           ((C25859 - C25858 + C25861 - C25860) * C36262 +
            (C25863 - C25862 + C25865 - C25864) * C92097) *
               C44794) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C36262 +
            (C19906 - C19905 + C19908 - C19907) * C92097) *
               C92359 +
           (C27898 * C36262 + C27899 * C92097) * C92360 +
           ((C25866 - C25867 + C25868 - C25869) * C36262 +
            (C25870 - C25871 + C25872 - C25873) * C92097) *
               C44794) *
              C92150 * C92136 * C98 +
          ((C19929 * C36262 + C19930 * C92097) * C92359 +
           ((C22170 - C22169 + C22172 - C22171) * C36262 +
            (C22174 - C22173 + C22176 - C22175) * C92097) *
               C92360 +
           ((C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                C36262 +
            (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
                C92097) *
               C44794) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C36262 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92097) *
               C92359 +
           ((C25850 - C25851 + C25852 - C25853) * C36262 +
            (C25854 - C25855 + C25856 - C25857) * C92097) *
               C92360 +
           C57010 * C44794) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C36262 +
            (C25855 - C25854 + C25857 - C25856) * C92097) *
               C92359 +
           ((C25858 - C25859 + C25860 - C25861) * C36262 +
            (C25862 - C25863 + C25864 - C25865) * C92097) *
               C92360 +
           ((C56998 - C56999 + C57000 - C57001) * C36262 +
            (C57002 - C57003 + C57004 - C57005) * C92097) *
               C44794) *
              C92150 * C791 +
          (C57010 * C92359 +
           ((C56999 - C56998 + C57001 - C57000) * C36262 +
            (C57003 - C57002 + C57005 - C57004) * C92097) *
               C92360 +
           ((C92334 * C5032 - C19898 * C4816 + C92252 * C39152 -
             C19899 * C38990) *
                C36262 +
            (C92334 * C5036 - C19898 * C4823 + C92252 * C39153 -
             C19899 * C38992) *
                C92097) *
               C44794) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C44873 +
                      (C92097 * C354 - C36262 * C348) * C92359 +
                      (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
                      C36943 * C44875 + C36944 * C44794) *
                         C92334 +
                     ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
                      C44149 * C44874 + C44150 * C92360 +
                      (C39232 - C39231) * C44875 + (C39234 - C39233) * C44794) *
                         C92252) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C44873 +
                      (C36262 * C349 - C92097 * C355) * C92359 +
                      (C37983 - C37984) * C44874 + (C37985 - C37986) * C92360 +
                      (C37987 - C37988) * C44875 + (C37989 - C37990) * C44794) *
                         C92334 +
                     ((C43196 - C43197) * C44873 + (C43198 - C43199) * C92359 +
                      (C42280 - C42281) * C44874 + (C42282 - C42283) * C92360 +
                      (C36262 * C5701 - C92097 * C5707) * C44875 +
                      (C36262 * C5972 - C92097 * C5978) * C44794) *
                         C92252) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C44873 +
                      (C92097 * C356 - C36262 * C350) * C92359 +
                      (C92097 * C804 - C36262 * C795) * C44874 +
                      (C92097 * C1018 - C36262 * C1010) * C92360 +
                      (C92097 * C814 - C36262 * C800) * C44875 +
                      (C92097 * C1022 - C36262 * C1014) * C44794) *
                         C92334 +
                     ((C92097 * C1385 - C36262 * C1376) * C44873 +
                      (C92097 * C1599 - C36262 * C1591) * C92359 +
                      (C92097 * C3365 - C36262 * C3359) * C44874 +
                      (C92097 * C3593 - C36262 * C3589) * C92360 +
                      (C92097 * C7489 - C36262 * C7488) * C44875 +
                      (C92097 * C7811 - C36262 * C7810) * C44794) *
                         C92252) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C44873 +
                      (C92097 * C354 - C36262 * C348) * C92359 +
                      (C36927 - C36928) * C44874 + (C36929 - C36930) * C92360 +
                      C36943 * C44875 + C36944 * C44794) *
                         C92334 +
                     ((C41399 - C41400) * C44873 + (C41401 - C41402) * C92359 +
                      C44149 * C44874 + C44150 * C92360 + C57085 * C44875 +
                      C57086 * C44794) *
                         C92252) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C44873 + (C36930 - C36929) * C92359 +
                      (C36932 - C36931) * C44874 + (C36934 - C36933) * C92360 +
                      (C36936 - C36935) * C44875 + (C36938 - C36937) * C44794) *
                         C92334 +
                     (C44151 * C44873 + C44152 * C92359 +
                      (C39231 - C39232) * C44874 + (C39233 - C39234) * C92360 +
                      (C39235 - C39236) * C44875 + (C39237 - C39238) * C44794) *
                         C92252) *
                        C92150 * C791 +
                    ((C36943 * C44873 + C36944 * C92359 + C36945 * C44874 +
                      C36946 * C92360 + (C36940 - C36939) * C44875 +
                      (C36942 - C36941) * C44794) *
                         C92334 +
                     (C57085 * C44873 + C57086 * C92359 +
                      (C39236 - C39235) * C44874 + (C39238 - C39237) * C92360 +
                      (C92097 * C38991 - C36262 * C38990) * C44875 +
                      (C92097 * C39225 - C36262 * C39224) * C44794) *
                         C92252) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92097 * C92334 +
           (C44873 * C1457 - C45122 * C1378 - C44873 * C1589 + C92359 * C1658 +
            C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
            C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C48409 + C48410 + C48411) * C92097 * C92252 +
           (C45164 + C45163 + C45162) * C92097 * C92334) *
              C92150 * C92136 * C98 +
          ((C45167 + C45166 + C45165) * C92097 * C92334 +
           (C44873 * C1459 - C45122 * C1376 - C44873 * C1591 + C92359 * C1656 +
            C44874 * C3441 - C45123 * C3359 - C44874 * C3589 + C92360 * C3663 +
            C44875 * C7590 - C45124 * C7488 - C44875 * C7810 + C44794 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C44873 * C183 - C45122 * C108 - C44873 * C348 + C92359 * C411 +
            C44874 * C876 - C45123 * C797 - C44874 * C1008 + C92360 * C1077 +
            C44875 * C880 - C45124 * C798 - C44875 * C1012 + C44794 * C1078) *
               C92097 * C92334 +
           (C44873 * C1457 - C45122 * C1378 - C44873 * C1589 + C92359 * C1658 +
            C44874 * C3439 - C45123 * C3357 - C44874 * C3587 + C92360 * C3661 +
            C44875 * C5799 - C45124 * C5702 - C44875 * C5971 + C44794 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C44875 * C8588 - C45124 * C8454 - C44875 * C8800 + C44794 * C8918 +
            C44874 * C5799 - C45123 * C5702 - C44874 * C5971 + C92360 * C6058 +
            C44873 * C3439 - C45122 * C3357 - C44873 * C3587 + C92359 * C3661) *
               C92097 * C92252 +
           (C44875 * C4948 - C45124 * C4815 - C44875 * C5139 + C44794 * C5252 +
            C44874 * C880 - C45123 * C798 - C44874 * C1012 + C92360 * C1078 +
            C44873 * C876 - C45122 * C797 - C44873 * C1008 + C92359 * C1077) *
               C92097 * C92334) *
              C92150 * C791 +
          ((C44873 * C880 - C45122 * C798 - C44873 * C1012 + C92359 * C1078 +
            C44874 * C4948 - C45123 * C4815 - C44874 * C5139 + C92360 * C5252 +
            C44875 * C4950 - C45124 * C4816 - C44875 * C5141 + C44794 * C5253) *
               C92097 * C92334 +
           (C44873 * C5799 - C45122 * C5702 - C44873 * C5971 + C92359 * C6058 +
            C44874 * C8588 - C45123 * C8454 - C44874 * C8800 + C92360 * C8918 +
            C44875 * C39084 - C45124 * C38990 - C44875 * C39224 +
            C44794 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C44873 +
           (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
               C92359 +
           (C25850 - C25851 + C25852 - C25853) * C44874 +
           (C26168 - C26169 + C26170 - C26171) * C92360 +
           (C25859 - C25858 + C25861 - C25860) * C44875 +
           (C26173 - C26172 + C26175 - C26174) * C44794) *
              C92097 * C92150 * C92136 * C97 +
          ((C19902 - C19901 + C19904 - C19903) * C44873 +
           (C20154 - C20153 + C20156 - C20155) * C92359 + C27898 * C44874 +
           C28317 * C92360 + (C25866 - C25867 + C25868 - C25869) * C44875 +
           (C26176 - C26177 + C26178 - C26179) * C44794) *
              C92097 * C92150 * C92136 * C98 +
          (C19929 * C44873 + C20168 * C92359 +
           (C22170 - C22169 + C22172 - C22171) * C44874 +
           (C22483 - C22482 + C22485 - C22484) * C92360 +
           (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
               C44875 +
           (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 - C19899 * C7810) *
               C44794) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
               C44873 +
           (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
               C92359 +
           (C25850 - C25851 + C25852 - C25853) * C44874 +
           (C26168 - C26169 + C26170 - C26171) * C92360 + C57006 * C44875 +
           C57241 * C44794) *
              C92097 * C92150 * C790 +
          ((C25851 - C25850 + C25853 - C25852) * C44873 +
           (C26169 - C26168 + C26171 - C26170) * C92359 +
           (C25858 - C25859 + C25860 - C25861) * C44874 +
           (C26172 - C26173 + C26174 - C26175) * C92360 +
           (C56998 - C56999 + C57000 - C57001) * C44875 +
           (C57237 - C57238 + C57239 - C57240) * C44794) *
              C92097 * C92150 * C791 +
          (C57006 * C44873 + C57241 * C92359 +
           (C56999 - C56998 + C57001 - C57000) * C44874 +
           (C57238 - C57237 + C57240 - C57239) * C92360 +
           (C92334 * C5032 - C19898 * C4816 + C92252 * C39152 -
            C19899 * C38990) *
               C44875 +
           (C92334 * C5331 - C19898 * C5141 + C92252 * C39371 -
            C19899 * C39224) *
               C44794) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C19898 +
                      (C92097 * C573 - C36262 * C567) * C92334 +
                      (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                         C92359 +
                     ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
                      C44149 * C19899 + C44487 * C92252) *
                         C92360 +
                     (C36943 * C19898 + C37114 * C92334 +
                      (C39232 - C39231) * C19899 + (C39446 - C39445) * C92252) *
                         C44794) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C19898 +
                      (C36262 * C568 - C92097 * C574) * C92334 +
                      (C43196 - C43197) * C19899 + (C43512 - C43513) * C92252) *
                         C92359 +
                     ((C37983 - C37984) * C19898 + (C38193 - C38194) * C92334 +
                      (C42280 - C42281) * C19899 + (C42582 - C42583) * C92252) *
                         C92360 +
                     ((C37987 - C37988) * C19898 + (C38195 - C38196) * C92334 +
                      (C36262 * C5701 - C92097 * C5707) * C19899 +
                      (C36262 * C6218 - C92097 * C6224) * C92252) *
                         C44794) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C19898 +
                      (C92097 * C575 - C36262 * C569) * C92334 +
                      (C92097 * C1385 - C36262 * C1376) * C19899 +
                      (C92097 * C1781 - C36262 * C1773) * C92252) *
                         C92359 +
                     ((C92097 * C804 - C36262 * C795) * C19898 +
                      (C92097 * C1200 - C36262 * C1192) * C92334 +
                      (C92097 * C3365 - C36262 * C3359) * C19899 +
                      (C92097 * C3807 - C36262 * C3803) * C92252) *
                         C92360 +
                     ((C92097 * C814 - C36262 * C800) * C19898 +
                      (C92097 * C1204 - C36262 * C1196) * C92334 +
                      (C92097 * C7489 - C36262 * C7488) * C19899 +
                      (C92097 * C8134 - C36262 * C8133) * C92252) *
                         C44794) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C19898 +
                      (C92097 * C573 - C36262 * C567) * C92334 +
                      (C41399 - C41400) * C19899 + (C41696 - C41697) * C92252) *
                         C92359 +
                     ((C36927 - C36928) * C19898 + (C37104 - C37105) * C92334 +
                      C44149 * C19899 + C44487 * C92252) *
                         C92360 +
                     C57323 * C44794) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C19898 + (C37105 - C37104) * C92334 +
                      C44151 * C19899 + C44488 * C92252) *
                         C92359 +
                     ((C36932 - C36931) * C19898 + (C37108 - C37107) * C92334 +
                      (C39231 - C39232) * C19899 + (C39445 - C39446) * C92252) *
                         C92360 +
                     ((C36936 - C36935) * C19898 + (C37111 - C37110) * C92334 +
                      (C39235 - C39236) * C19899 + (C39447 - C39448) * C92252) *
                         C44794) *
                        C92150 * C791 +
                    (C57323 * C92359 +
                     (C36945 * C19898 + C37115 * C92334 +
                      (C39236 - C39235) * C19899 + (C39448 - C39447) * C92252) *
                         C92360 +
                     ((C36940 - C36939) * C19898 + (C37113 - C37112) * C92334 +
                      (C92097 * C38991 - C36262 * C38990) * C19899 +
                      (C92097 * C39441 - C36262 * C39440) * C92252) *
                         C44794) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C19898 +
           (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
            C44794 * C1260 - C44875 * C1194) *
               C92334 +
           (C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
            C44794 * C5799 - C44875 * C5702) *
               C19899 +
           (C92359 * C1837 - C44873 * C1771 + C92360 * C3875 - C44874 * C3801 +
            C44794 * C6303 - C44875 * C6217) *
               C92252) *
              C92097 * C92150 * C92136 * C97 +
          ((C44878 - C44877 + C44880 - C44879 + C44882 - C44881) * C19898 +
           (C45391 - C45390 + C45393 - C45392 + C45395 - C45394) * C92334 +
           (C48085 - C48086 + C48087 - C48088 + C48089 - C48090) * C19899 +
           (C48706 - C48707 + C48708 - C48709 + C48710 - C48711) * C92252) *
              C92097 * C92150 * C92136 * C98 +
          ((C44890 - C44889 + C44892 - C44891 + C44894 - C44893) * C19898 +
           (C45397 - C45396 + C45399 - C45398 + C45401 - C45400) * C92334 +
           (C92359 * C1459 - C44873 * C1376 + C92360 * C3441 - C44874 * C3359 +
            C44794 * C7590 - C44875 * C7488) *
               C19899 +
           (C92359 * C1839 - C44873 * C1773 + C92360 * C3877 - C44874 * C3803 +
            C44794 * C8233 - C44875 * C8133) *
               C92252) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92359 * C183 - C44873 * C108 + C92360 * C876 - C44874 * C797 +
            C44794 * C880 - C44875 * C798) *
               C19898 +
           (C92359 * C629 - C44873 * C567 + C92360 * C1256 - C44874 * C1190 +
            C44794 * C1260 - C44875 * C1194) *
               C92334 +
           (C92359 * C1457 - C44873 * C1378 + C92360 * C3439 - C44874 * C3357 +
            C44794 * C5799 - C44875 * C5702) *
               C19899 +
           (C92359 * C1837 - C44873 * C1771 + C92360 * C3875 - C44874 * C3801 +
            C44794 * C6303 - C44875 * C6217) *
               C92252) *
              C92097 * C92150 * C790 +
          ((C44873 * C797 - C92359 * C876 + C44874 * C798 - C92360 * C880 +
            C44875 * C4815 - C44794 * C4948) *
               C19898 +
           (C44873 * C1190 - C92359 * C1256 + C44874 * C1194 - C92360 * C1260 +
            C44875 * C5417 - C44794 * C5517) *
               C92334 +
           (C44873 * C3357 - C92359 * C3439 + C44874 * C5702 - C92360 * C5799 +
            C44875 * C8454 - C44794 * C8588) *
               C19899 +
           (C44873 * C3801 - C92359 * C3875 + C44874 * C6217 - C92360 * C6303 +
            C44875 * C9122 - C44794 * C9232) *
               C92252) *
              C92097 * C92150 * C791 +
          ((C92359 * C880 - C44873 * C798 + C92360 * C4948 - C44874 * C4815 +
            C44794 * C4950 - C44875 * C4816) *
               C19898 +
           (C92359 * C1260 - C44873 * C1194 + C92360 * C5517 - C44874 * C5417 +
            C44794 * C5519 - C44875 * C5419) *
               C92334 +
           (C92359 * C5799 - C44873 * C5702 + C92360 * C8588 - C44874 * C8454 +
            C44794 * C39084 - C44875 * C38990) *
               C19899 +
           (C92359 * C6303 - C44873 * C6217 + C92360 * C9232 - C44874 * C9122 +
            C44794 * C39514 - C44875 * C39440) *
               C92252) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92359 +
           (C26510 + C26511) * C92360 + (C26515 + C26514) * C44794) *
              C92097 * C92150 * C92136 * C97 -
          ((C26512 + C26513) * C44794 + C28717 * C92360 +
           (C20440 + C20439) * C92359) *
              C92097 * C92150 * C92136 * C98 +
          (C20445 * C92359 + (C22807 + C22806) * C92360 +
           (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
            C19899 * C7702 - C20401 * C7488 - C19899 * C8133 + C92252 * C8338) *
               C44794) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
            C19899 * C1523 - C20401 * C1378 - C19899 * C1771 + C92252 * C1898) *
               C92359 +
           (C26510 + C26511) * C92360 + C57472 * C44794) *
              C92097 * C92150 * C790 -
          ((C57485 + C57486) * C44794 + (C26514 + C26515) * C92360 +
           (C26511 + C26510) * C92359) *
              C92097 * C92150 * C791 +
          (C57472 * C92359 + (C57486 + C57485) * C92360 +
           (C19898 * C5032 - C20400 * C4816 - C19898 * C5419 + C92334 * C5597 +
            C19899 * C39152 - C20401 * C38990 - C19899 * C39440 +
            C92252 * C39581) *
               C44794) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C92150 * C1969 -
           (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
            C36755 * C36258) *
               C92150 * C1970) *
              C1971 +
          ((C37782 * C36258 + C37783 * C36259 + C37784 * C36260 +
            (C36262 * C4824 - C36263 * C4817 - C36262 * C4825 +
             C92097 * C4829) *
                C92188 * C36261) *
               C92150 * C1970 -
           (C37784 * C36261 + C37783 * C36260 + C37782 * C36259 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92188 * C36258) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C92150 * C1969 -
           ((C32075 + C32076 + C32077) * C92188 * C92226 +
            (C32074 + C32073 + C32072) * C92188 * C31252) *
               C92150 * C1970) *
              C1971 +
          (((C33488 + C33489 + C33490) * C92188 * C31252 +
            (C31254 * C812 - C31255 * C799 - C31254 * C813 + C31249 * C823 +
             C31256 * C814 - C31257 * C800 - C31256 * C815 + C31250 * C824 +
             C31258 * C816 - C31259 * C801 - C31258 * C817 + C31251 * C825) *
                C92188 * C92226) *
               C92150 * C1970 -
           ((C33490 + C33489 + C33488) * C92188 * C92226 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C92188 * C31252) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C9422 +
             C41134 * C9423 + C41135 * C9424) *
                C31252 +
            (C40330 + C40331 + C40348) * C92226) *
               C92150 * C1969 -
           ((C40349 + C40340 + C40341) * C92226 +
            (C40348 + C40331 + C40330) * C31252) *
               C92150 * C1970) *
              C1971 +
          (((C41969 + C41984 + C41985) * C31252 +
            (C37780 * C9422 +
             (C36262 * C5707 - C36263 * C5701 - C36262 * C5708 +
              C92097 * C5719) *
                 C9423 +
             (C36262 * C5717 - C36263 * C5706 - C36262 * C5718 +
              C92097 * C5724) *
                 C9424) *
                C92226) *
               C92150 * C1970 -
           ((C41985 + C41984 + C41969) * C92226 +
            ((C36262 * C1393 - C36263 * C1380 - C36262 * C1394 +
              C92097 * C1404) *
                 C9424 +
             (C36262 * C1387 - C36263 * C1377 - C36262 * C1388 +
              C92097 * C1401) *
                 C9423 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C9422) *
                C31252) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C92150 * C1969 +
           ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C36262 +
            (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
             C36316 * C4821 - C36260 * C4952 + C36317 * C4823 -
             C36261 * C4954) *
                C92097) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C36262 +
            (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
             C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
                C92097) *
               C92188 * C92150 * C1969 +
           ((C36258 * C877 - C36314 * C796 + C36259 * C881 - C36315 * C799 +
             C36260 * C4949 - C36316 * C4814 + C36261 * C4951 -
             C36317 * C4817) *
                C36262 +
            (C36258 * C885 - C36314 * C807 + C36259 * C889 - C36315 * C813 +
             C36260 * C4953 - C36316 * C4819 + C36261 * C4955 -
             C36317 * C4825) *
                C92097) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C92150 * C1969 +
           ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C31254 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C31249 +
            (C33589 - C33590 + C33591 - C33592) * C31256 +
            (C33593 - C33594 + C33595 - C33596) * C31250 +
            (C33597 - C33598 + C33599 - C33600) * C31258 +
            (C33601 - C33602 + C33603 - C33604) * C31251) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C31254 +
            (C31342 - C31341 + C31344 - C31343) * C31249 +
            (C31346 - C31345 + C31348 - C31347) * C31256 +
            (C31350 - C31349 + C31352 - C31351) * C31250 +
            (C31353 - C31354 + C31355 - C31356) * C31258 +
            (C31357 - C31358 + C31359 - C31360) * C31251) *
               C92188 * C92150 * C1969 +
           ((C33590 - C33589 + C33592 - C33591) * C31254 +
            (C33594 - C33593 + C33596 - C33595) * C31249 +
            (C33598 - C33597 + C33600 - C33599) * C31256 +
            (C33602 - C33601 + C33604 - C33603) * C31250 +
            (C31252 * C879 - C31334 * C794 + C92226 * C883 - C31335 * C801) *
                C31258 +
            (C31252 * C887 - C31334 * C803 + C92226 * C891 - C31335 * C817) *
                C31251) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C36262 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92097) *
                C9422 +
            ((C41214 - C41215 + C41216 - C41217) * C36262 +
             (C41218 - C41219 + C41220 - C41221) * C92097) *
                C9423 +
            C41246 * C9424) *
               C92150 * C1969 +
           (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C36262 +
             (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                 C92097) *
                C9422 +
            ((C31334 * C3357 - C31252 * C3439 + C31335 * C5702 -
              C92226 * C5799) *
                 C36262 +
             (C31334 * C3362 - C31252 * C3443 + C31335 * C5710 -
              C92226 * C5805) *
                 C92097) *
                C9423 +
            ((C31334 * C5703 - C31252 * C5801 + C31335 * C5705 -
              C92226 * C5802) *
                 C36262 +
             (C31334 * C5712 - C31252 * C5807 + C31335 * C5716 -
              C92226 * C5808) *
                 C92097) *
                C9424) *
               C92150 * C1970) *
              C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C36262 +
             (C31342 - C31341 + C31344 - C31343) * C92097) *
                C9422 +
            ((C34545 - C34546 + C34547 - C34548) * C36262 +
             (C34549 - C34550 + C34551 - C34552) * C92097) *
                C9423 +
            ((C31334 * C1380 - C31252 * C1462 + C31335 * C5704 -
              C92226 * C5803) *
                 C36262 +
             (C31334 * C1394 - C31252 * C1470 + C31335 * C5714 -
              C92226 * C5809) *
                 C92097) *
                C9424) *
               C92150 * C1969 +
           (((C33590 - C33589 + C33592 - C33591) * C36262 +
             (C33594 - C33593 + C33596 - C33595) * C92097) *
                C9422 +
            ((C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
              C31335 * C5701) *
                 C36262 +
             (C31252 * C3444 - C31334 * C3364 + C92226 * C5806 -
              C31335 * C5708) *
                 C92097) *
                C9423 +
            ((C31252 * C5803 - C31334 * C5704 + C92226 * C5804 -
              C31335 * C5706) *
                 C36262 +
             (C31252 * C5809 - C31334 * C5714 + C92226 * C5810 -
              C31335 * C5718) *
                 C92097) *
                C9424) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C92150 * C1969 +
           (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
            ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
            ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
            ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) *
                C36261) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
            (C6734 * C36262 + C6735 * C92097) * C36259 +
            (C6736 * C36262 + C6737 * C92097) * C36260 +
            ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
               C92150 * C1969 +
           ((C6732 * C36262 + C6733 * C92097) * C36258 +
            (C5047 * C36262 + C5048 * C92097) * C36259 +
            ((C5054 - C5053) * C36262 + (C5056 - C5055) * C92097) * C36260 +
            ((C92188 * C5033 - C265 * C4817) * C36262 +
             (C92188 * C5037 - C265 * C4825) * C92097) *
                C36261) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C92150 * C1969 +
           (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
             C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
             C17153 * C31251) *
                C31252 +
            ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
             C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
             (C4214 - C4215) * C31251) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C31254 + (C282 - C281) * C31249 +
             (C284 - C283) * C31256 + (C286 - C285) * C31250 +
             (C288 - C287) * C31258 + (C290 - C289) * C31251) *
                C31252 +
            (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
             C17153 * C31250 + (C2134 - C2135) * C31258 +
             (C2136 - C2137) * C31251) *
                C92226) *
               C92150 * C1969 +
           ((C6732 * C31254 + C6733 * C31249 + C14887 * C31256 +
             C14888 * C31250 + (C2135 - C2134) * C31258 +
             (C2137 - C2136) * C31251) *
                C31252 +
            (C5047 * C31254 + C5048 * C31249 + (C4213 - C4212) * C31256 +
             (C4215 - C4214) * C31250 + (C92188 * C949 - C265 * C801) * C31258 +
             (C92188 * C957 - C265 * C817) * C31251) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C36262 +
             (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
              C9424 * C1535 - C9583 * C1392) *
                 C92097) *
                C31252 +
            ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
             (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
                C92226) *
               C92150 * C1969 +
           (((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C36262 +
             (C40505 - C40504 + C40507 - C40506 + C40509 - C40508) * C92097) *
                C31252 +
            ((C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C36262 +
             (C40516 - C40517 + C40518 - C40519 + C40520 - C40521) * C92097) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C36262 +
             (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C92097) *
                C31252 +
            ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C36262 +
             (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92097) *
                C92226) *
               C92150 * C1969 +
           (((C11998 - C11997 + C12000 - C11999 + C12002 - C12001) * C36262 +
             (C12004 - C12003 + C12006 - C12005 + C12008 - C12007) * C92097) *
                C31252 +
            ((C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
              C9424 * C5890 - C9583 * C5706) *
                 C36262 +
             (C9422 * C955 - C9581 * C813 + C9423 * C5892 - C9582 * C5708 +
              C9424 * C5896 - C9583 * C5718) *
                 C92097) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C92150 * C1969 +
           ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
            (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
            (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
            (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C36262 * C109 - C92097 * C116) * C36314 +
            (C36262 * C349 - C92097 * C355) * C36258 +
            (C37983 - C37984) * C36315 + (C37985 - C37986) * C36259 +
            (C37987 - C37988) * C36316 + (C37989 - C37990) * C36260 +
            (C37991 - C37992) * C36317 + (C37993 - C37994) * C36261) *
               C92188 * C92150 * C1969 +
           ((C37984 - C37983) * C36314 + (C37986 - C37985) * C36258 +
            (C37988 - C37987) * C36315 + (C37990 - C37989) * C36259 +
            (C37992 - C37991) * C36316 + (C37994 - C37993) * C36260 +
            (C92097 * C4824 - C36262 * C4817) * C36317 +
            (C92097 * C5146 - C36262 * C5142) * C36261) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C92150 * C1969 +
           ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
            (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
            (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C31334 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C31252 +
            (C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C31335 +
            (C33807 - C33808 + C33809 - C33810 + C33811 - C33812) * C92226) *
               C92188 * C92150 * C1969 +
           ((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C31334 +
            (C33808 - C33807 + C33810 - C33809 + C33812 - C33811) * C31252 +
            (C31249 * C812 - C31254 * C799 + C31250 * C814 - C31256 * C800 +
             C31251 * C816 - C31258 * C801) *
                C31335 +
            (C31249 * C1021 - C31254 * C1013 + C31250 * C1022 - C31256 * C1014 +
             C31251 * C1023 - C31258 * C1015) *
                C92226) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C31334 +
             (C92097 * C354 - C36262 * C348) * C31252 +
             (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
                C9422 +
            ((C41399 - C41400) * C31334 + (C41401 - C41402) * C31252 +
             (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
                C9423 +
            C41425 * C9424) *
               C92150 * C1969 +
           (((C36928 - C36927) * C31334 + (C36930 - C36929) * C31252 +
             (C36932 - C36931) * C31335 + (C36934 - C36933) * C92226) *
                C9422 +
            ((C39227 - C39228) * C31334 + (C39229 - C39230) * C31252 +
             (C39231 - C39232) * C31335 + (C39233 - C39234) * C92226) *
                C9423 +
            ((C40597 - C40596) * C31334 + (C40599 - C40598) * C31252 +
             (C40600 - C40601) * C31335 + (C40602 - C40603) * C92226) *
                C9424) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C31334 +
             (C36262 * C349 - C92097 * C355) * C31252 +
             (C37983 - C37984) * C31335 + (C37985 - C37986) * C92226) *
                C9422 +
            ((C36262 * C1377 - C92097 * C1387) * C31334 +
             (C36262 * C1590 - C92097 * C1598) * C31252 +
             (C42280 - C42281) * C31335 + (C42282 - C42283) * C92226) *
                C9423 +
            ((C36262 * C1380 - C92097 * C1393) * C31334 +
             (C36262 * C1594 - C92097 * C1602) * C31252 +
             (C42284 - C42285) * C31335 + (C42286 - C42287) * C92226) *
                C9424) *
               C92150 * C1969 +
           (((C37984 - C37983) * C31334 + (C37986 - C37985) * C31252 +
             (C37988 - C37987) * C31335 + (C37990 - C37989) * C92226) *
                C9422 +
            ((C42281 - C42280) * C31334 + (C42283 - C42282) * C31252 +
             (C92097 * C5707 - C36262 * C5701) * C31335 +
             (C92097 * C5978 - C36262 * C5972) * C92226) *
                C9423 +
            ((C42285 - C42284) * C31334 + (C42287 - C42286) * C31252 +
             (C92097 * C5717 - C36262 * C5706) * C31335 +
             (C92097 * C5982 - C36262 * C5976) * C92226) *
                C9424) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C92150 * C1969 -
           (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
            C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
            C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
            C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
               C92097 * C92188 * C92150 * C1970) *
              C1971 +
          ((C36314 * C877 - C36468 * C796 - C36314 * C1009 + C36258 * C1076 +
            C36315 * C881 - C36469 * C799 - C36315 * C1013 + C36259 * C1079 +
            C36316 * C4949 - C36470 * C4814 - C36316 * C5140 + C36260 * C5251 +
            C36317 * C4951 - C36471 * C4817 - C36317 * C5142 + C36261 * C5254) *
               C92097 * C92188 * C92150 * C1970 -
           (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
            C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
            C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
            C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
               C92097 * C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C92150 * C1969 -
           ((C33935 + C33936) * C31251 + (C33937 + C33938) * C31250 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C31249) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C33938 + C33937) * C31249 + (C33936 + C33935) * C31250 +
            (C31334 * C879 - C31588 * C794 - C31334 * C1011 + C31252 * C1074 +
             C31335 * C883 - C31589 * C801 - C31335 * C1015 + C92226 * C1081) *
                C31251) *
               C92188 * C92150 * C1970 -
           ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
            (C31628 + C31627) * C31249) *
               C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92097 * C9422 +
            (C41537 + C41538) * C92097 * C9423 + C41544 * C9424) *
               C92150 * C1969 -
           ((C31335 * C5802 - C31589 * C5705 - C31335 * C5975 + C92226 * C6060 +
             C31334 * C5801 - C31588 * C5703 - C31334 * C5973 +
             C31252 * C6059) *
                C92097 * C9424 +
            (C31335 * C5799 - C31589 * C5702 - C31335 * C5971 + C92226 * C6058 +
             C31334 * C3439 - C31588 * C3357 - C31334 * C3587 +
             C31252 * C3661) *
                C92097 * C9423 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C92097 * C9422) *
               C92150 * C1970) *
              C1971 +
          (((C33938 + C33937) * C92097 * C9422 +
            (C31334 * C3440 - C31588 * C3358 - C31334 * C3588 + C31252 * C3662 +
             C31335 * C5800 - C31589 * C5701 - C31335 * C5972 +
             C92226 * C6057) *
                C92097 * C9423 +
            (C31334 * C5803 - C31588 * C5704 - C31334 * C5974 + C31252 * C6061 +
             C31335 * C5804 - C31589 * C5706 - C31335 * C5976 +
             C92226 * C6062) *
                C92097 * C9424) *
               C92150 * C1970 -
           ((C31335 * C5803 - C31589 * C5704 - C31335 * C5974 + C92226 * C6061 +
             C31334 * C1462 - C31588 * C1380 - C31334 * C1594 +
             C31252 * C1660) *
                C92097 * C9424 +
            (C34881 + C34882) * C92097 * C9423 +
            (C31628 + C31627) * C92097 * C9422) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C92150 * C1969 +
           ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
            (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
            (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
            (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
            C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
            (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
               C92097 * C92150 * C1969 +
           (C6732 * C36314 + C7073 * C36258 + C5047 * C36315 + C5338 * C36259 +
            (C5054 - C5053) * C36316 + (C5342 - C5341) * C36260 +
            (C92188 * C5033 - C265 * C4817) * C36317 +
            (C92188 * C5332 - C265 * C5142) * C36261) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C92150 * C1969 +
           (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
             (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
                C31249 +
            (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 +
             C7075 * C92226) *
                C31250 +
            (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
             (C4485 - C4486) * C92226) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
             C7074 * C92226) *
                C31249 +
            ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
             C17488 * C92226) *
                C31250 +
            ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
             (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
                C31251) *
               C92150 * C1969 +
           ((C6732 * C31334 + C7073 * C31252 + C5047 * C31335 +
             C5338 * C92226) *
                C31249 +
            (C14887 * C31334 + C15159 * C31252 + (C4213 - C4212) * C31335 +
             (C4486 - C4485) * C92226) *
                C31250 +
            ((C2135 - C2134) * C31334 + (C2366 - C2365) * C31252 +
             (C92188 * C949 - C265 * C801) * C31335 +
             (C92188 * C1139 - C265 * C1015) * C92226) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C31334 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C31252 +
            (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
            (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
               C92097 * C92150 * C1969 +
           ((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C31334 +
            (C40753 - C40752 + C40755 - C40754 + C40757 - C40756) * C31252 +
            (C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C31335 +
            (C40758 - C40759 + C40760 - C40761 + C40762 - C40763) * C92226) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C31334 +
            (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C31252 +
            (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C31335 +
            (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92226) *
               C92097 * C92150 * C1969 +
           ((C11998 - C11997 + C12000 - C11999 + C12002 - C12001) * C31334 +
            (C12322 - C12321 + C12324 - C12323 + C12326 - C12325) * C31252 +
            (C9422 * C947 - C9581 * C799 + C9423 * C5886 - C9582 * C5701 +
             C9424 * C5890 - C9583 * C5706) *
                C31335 +
            (C9422 * C1137 - C9581 * C1013 + C9423 * C6138 - C9582 * C5972 +
             C9424 * C6142 - C9583 * C5976) *
                C92226) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C92150 * C1969 +
           (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
            ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
            ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
            ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C265 +
             (C36262 * C568 - C92097 * C574) * C92188) *
                C36258 +
            ((C37983 - C37984) * C265 + (C38193 - C38194) * C92188) * C36259 +
            ((C37987 - C37988) * C265 + (C38195 - C38196) * C92188) * C36260 +
            ((C37991 - C37992) * C265 + (C38197 - C38198) * C92188) * C36261) *
               C92150 * C1969 +
           (((C37984 - C37983) * C265 + (C38194 - C38193) * C92188) * C36258 +
            ((C37988 - C37987) * C265 + (C38196 - C38195) * C92188) * C36259 +
            ((C37992 - C37991) * C265 + (C38198 - C38197) * C92188) * C36260 +
            ((C92097 * C4824 - C36262 * C4817) * C265 +
             (C92097 * C5424 - C36262 * C5420) * C92188) *
                C36261) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
             (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
                C31252 +
            ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
             (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C265 +
             (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
              C31258 * C570 - C31251 * C576) *
                 C92188) *
                C31252 +
            ((C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C265 +
             (C34135 - C34136 + C34137 - C34138 + C34139 - C34140) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C265 +
             (C34136 - C34135 + C34138 - C34137 + C34140 - C34139) * C92188) *
                C31252 +
            ((C31249 * C812 - C31254 * C799 + C31250 * C814 - C31256 * C800 +
              C31251 * C816 - C31258 * C801) *
                 C265 +
             (C31249 * C1203 - C31254 * C1195 + C31250 * C1204 -
              C31256 * C1196 + C31251 * C1205 - C31258 * C1197) *
                 C92188) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C9581 +
             (C92097 * C573 - C36262 * C567) * C9422 +
             (C41399 - C41400) * C9582 + (C41696 - C41697) * C9423 +
             C41417 * C9583 + C41705 * C9424) *
                C31252 +
            ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
             (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
             C41407 * C9583 + C41700 * C9424) *
                C92226) *
               C92150 * C1969 +
           (((C36928 - C36927) * C9581 + (C37105 - C37104) * C9422 +
             (C39227 - C39228) * C9582 + (C39443 - C39444) * C9423 +
             (C40597 - C40596) * C9583 + (C40839 - C40838) * C9424) *
                C31252 +
            ((C36932 - C36931) * C9581 + (C37108 - C37107) * C9422 +
             (C39231 - C39232) * C9582 + (C39445 - C39446) * C9423 +
             (C40600 - C40601) * C9583 + (C40840 - C40841) * C9424) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C9581 +
             (C36262 * C568 - C92097 * C574) * C9422 +
             (C36262 * C1377 - C92097 * C1387) * C9582 +
             (C36262 * C1772 - C92097 * C1780) * C9423 +
             (C36262 * C1380 - C92097 * C1393) * C9583 +
             (C36262 * C1776 - C92097 * C1784) * C9424) *
                C31252 +
            ((C37983 - C37984) * C9581 + (C38193 - C38194) * C9422 +
             (C42280 - C42281) * C9582 + (C42582 - C42583) * C9423 +
             (C42284 - C42285) * C9583 + (C42584 - C42585) * C9424) *
                C92226) *
               C92150 * C1969 +
           (((C37984 - C37983) * C9581 + (C38194 - C38193) * C9422 +
             (C42281 - C42280) * C9582 + (C42583 - C42582) * C9423 +
             (C42285 - C42284) * C9583 + (C42585 - C42584) * C9424) *
                C31252 +
            ((C37988 - C37987) * C9581 + (C38196 - C38195) * C9422 +
             (C92097 * C5707 - C36262 * C5701) * C9582 +
             (C92097 * C6224 - C36262 * C6218) * C9423 +
             (C92097 * C5717 - C36262 * C5706) * C9583 +
             (C92097 * C6228 - C36262 * C6222) * C9424) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C92150 * C1969 +
           ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C265 +
            (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
             C36316 * C5417 - C36260 * C5517 + C36317 * C5419 -
             C36261 * C5519) *
                C92188) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C265 +
            (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
             C36316 * C1195 - C36260 * C1261 + C36317 * C5418 -
             C36261 * C5518) *
                C92188) *
               C92097 * C92150 * C1969 +
           ((C36258 * C877 - C36314 * C796 + C36259 * C881 - C36315 * C799 +
             C36260 * C4949 - C36316 * C4814 + C36261 * C4951 -
             C36317 * C4817) *
                C265 +
            (C36258 * C1257 - C36314 * C1191 + C36259 * C1261 - C36315 * C1195 +
             C36260 * C5518 - C36316 * C5418 + C36261 * C5520 -
             C36317 * C5420) *
                C92188) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C92150 * C1969 +
           (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C265 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C31249 +
            ((C33589 - C33590 + C33591 - C33592) * C265 +
             (C34239 - C34240 + C34241 - C34242) * C92188) *
                C31250 +
            ((C33597 - C33598 + C33599 - C33600) * C265 +
             (C34243 - C34244 + C34245 - C34246) * C92188) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C265 +
             (C31864 - C31863 + C31866 - C31865) * C92188) *
                C31249 +
            ((C31346 - C31345 + C31348 - C31347) * C265 +
             (C31869 - C31868 + C31871 - C31870) * C92188) *
                C31250 +
            ((C31353 - C31354 + C31355 - C31356) * C265 +
             (C31872 - C31873 + C31874 - C31875) * C92188) *
                C31251) *
               C92150 * C1969 +
           (((C33590 - C33589 + C33592 - C33591) * C265 +
             (C34240 - C34239 + C34242 - C34241) * C92188) *
                C31249 +
            ((C33598 - C33597 + C33600 - C33599) * C265 +
             (C34244 - C34243 + C34246 - C34245) * C92188) *
                C31250 +
            ((C31252 * C879 - C31334 * C794 + C92226 * C883 - C31335 * C801) *
                 C265 +
             (C31252 * C1259 - C31334 * C1193 + C92226 * C1263 -
              C31335 * C1197) *
                 C92188) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C9581 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C9422 +
            (C41214 - C41215 + C41216 - C41217) * C9582 +
            (C41781 - C41782 + C41783 - C41784) * C9423 + C41242 * C9583 +
            C41795 * C9424) *
               C92097 * C92150 * C1969 +
           ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C9581 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C9422 +
            (C31334 * C3357 - C31252 * C3439 + C31335 * C5702 -
             C92226 * C5799) *
                C9582 +
            (C31334 * C3801 - C31252 * C3875 + C31335 * C6217 -
             C92226 * C6303) *
                C9423 +
            (C31334 * C5703 - C31252 * C5801 + C31335 * C5705 -
             C92226 * C5802) *
                C9583 +
            (C31334 * C6219 - C31252 * C6305 + C31335 * C6221 -
             C92226 * C6306) *
                C9424) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C9581 +
            (C31864 - C31863 + C31866 - C31865) * C9422 +
            (C34545 - C34546 + C34547 - C34548) * C9582 +
            (C35177 - C35178 + C35179 - C35180) * C9423 +
            (C31334 * C1380 - C31252 * C1462 + C31335 * C5704 -
             C92226 * C5803) *
                C9583 +
            (C31334 * C1776 - C31252 * C1842 + C31335 * C6220 -
             C92226 * C6307) *
                C9424) *
               C92097 * C92150 * C1969 +
           ((C33590 - C33589 + C33592 - C33591) * C9581 +
            (C34240 - C34239 + C34242 - C34241) * C9422 +
            (C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
             C31335 * C5701) *
                C9582 +
            (C31252 * C3876 - C31334 * C3802 + C92226 * C6304 -
             C31335 * C6218) *
                C9423 +
            (C31252 * C5803 - C31334 * C5704 + C92226 * C5804 -
             C31335 * C5706) *
                C9583 +
            (C31252 * C6307 - C31334 * C6220 + C92226 * C6308 -
             C31335 * C6222) *
                C9424) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C92150 * C1969 -
           (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 +
            C5624 * C36258) *
               C92097 * C92150 * C1970) *
              C1971 +
          ((C2595 * C36258 + C4737 * C36259 + C5626 * C36260 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C36261) *
               C92097 * C92150 * C1970 -
           (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
               C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C92150 * C1969 -
           ((C34345 + C34346) * C31251 + (C34347 + C34348) * C31250 +
            (C5625 * C92226 + C5624 * C31252) * C31249) *
               C92150 * C1970) *
              C1971 +
          (((C34348 + C34347) * C31249 + (C34346 + C34345) * C31250 +
            (C2593 * C31252 +
             (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                 C92226) *
                C31251) *
               C92150 * C1970 -
           ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
            (C31956 + C31955) * C31249) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C31252 +
            (C41026 + C41027 + C41028) * C92226) *
               C92097 * C92150 * C1969 -
           ((C41029 + C41030 + C41031) * C92226 +
            (C41028 + C41027 + C41026) * C31252) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C12649 + C12648 + C12647) * C31252 +
            (C9581 * C947 - C10082 * C799 - C9581 * C1195 + C9422 * C1319 +
             C9582 * C5886 - C10083 * C5701 - C9582 * C6218 + C9423 * C6383 +
             C9583 * C5890 - C10084 * C5706 - C9583 * C6222 + C9424 * C6388) *
                C92226) *
               C92097 * C92150 * C1970 -
           ((C12647 + C12648 + C12649) * C92226 +
            (C10124 + C10123 + C10122) * C31252) *
               C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C2664 -
           (C39016 * C36261 + C39017 * C36260 + C39018 * C36259 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C92188 * C36258) *
               C2665) *
              C1969 +
          ((C39018 * C36258 + C39017 * C36259 + C39016 * C36260 +
            (C36262 * C38991 - C36263 * C38990 - C36262 * C38992 +
             C92097 * C38993) *
                C92188 * C36261) *
               C2665 -
           (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
            C36755 * C36258) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C2664 -
           ((C35403 + C35404 + C35405) * C92188 * C92226 +
            (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
             C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
             C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
             C31249 * C1402) *
                C92188 * C31252) *
               C2665) *
              C1969 +
          (((C35405 + C35404 + C35403) * C92188 * C31252 +
            (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 + C31249 * C5720 +
             C31256 * C5707 - C31257 * C5701 - C31256 * C5708 + C31250 * C5719 +
             C31258 * C7489 - C31259 * C7488 - C31258 * C7490 +
             C31251 * C7491) *
                C92188 * C92226) *
               C2665 -
           ((C32075 + C32076 + C32077) * C92188 * C92226 +
            (C32074 + C32073 + C32072) * C92188 * C31252) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C9422 +
             C41134 * C9423 + C41135 * C9424) *
                C31252 +
            (C40330 + C40331 + C40348) * C92226) *
               C2664 -
           ((C43818 + C43819 + C43820) * C92226 +
            (C41137 * C9424 + C41135 * C9423 + C41134 * C9422) * C31252) *
               C2665) *
              C1969 +
          (((C43820 + C43819 + C43818) * C31252 +
            (C39014 * C9422 + C40347 * C9423 +
             (C36262 * C43814 - C36263 * C43813 - C36262 * C43815 +
              C92097 * C43816) *
                 C9424) *
                C92226) *
               C2665 -
           ((C40349 + C40340 + C40341) * C92226 +
            (C40348 + C40331 + C40330) * C31252) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C36262 +
            (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
             C36316 * C5710 - C36260 * C5805 + C36317 * C8457 -
             C36261 * C8590) *
                C92097) *
               C92188 * C2665) *
              C1969 +
          (((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C36262 +
            (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
             C36316 * C4821 - C36260 * C4952 + C36317 * C4823 -
             C36261 * C4954) *
                C92097) *
               C92188 * C2664 +
           ((C36258 * C3439 - C36314 * C3357 + C36259 * C5799 - C36315 * C5702 +
             C36260 * C8588 - C36316 * C8454 + C36261 * C39084 -
             C36317 * C38990) *
                C36262 +
            (C36258 * C3443 - C36314 * C3362 + C36259 * C5805 - C36315 * C5710 +
             C36260 * C8590 - C36316 * C8457 + C36261 * C39085 -
             C36317 * C38992) *
                C92097) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C2664 +
           ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C31254 +
            (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 -
             C92226 * C3443) *
                C31249 +
            (C34545 - C34546 + C34547 - C34548) * C31256 +
            (C34549 - C34550 + C34551 - C34552) * C31250 +
            (C34553 - C34554 + C34555 - C34556) * C31258 +
            (C34557 - C34558 + C34559 - C34560) * C31251) *
               C92188 * C2665) *
              C1969 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C31254 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C31249 +
            (C33589 - C33590 + C33591 - C33592) * C31256 +
            (C33593 - C33594 + C33595 - C33596) * C31250 +
            (C33597 - C33598 + C33599 - C33600) * C31258 +
            (C33601 - C33602 + C33603 - C33604) * C31251) *
               C92188 * C2664 +
           ((C31252 * C3439 - C31334 * C3357 + C92226 * C5799 -
             C31335 * C5702) *
                C31254 +
            (C31252 * C3443 - C31334 * C3362 + C92226 * C5805 -
             C31335 * C5710) *
                C31249 +
            (C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
             C31335 * C5701) *
                C31256 +
            (C31252 * C3444 - C31334 * C3364 + C92226 * C5806 -
             C31335 * C5708) *
                C31250 +
            (C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
             C31335 * C7488) *
                C31258 +
            (C31252 * C3445 - C31334 * C3366 + C92226 * C7591 -
             C31335 * C7490) *
                C31251) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C36262 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92097) *
                C9422 +
            ((C41214 - C41215 + C41216 - C41217) * C36262 +
             (C41218 - C41219 + C41220 - C41221) * C92097) *
                C9423 +
            C41246 * C9424) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C36262 +
             (C41219 - C41218 + C41221 - C41220) * C92097) *
                C9422 +
            ((C41223 - C41222 + C41225 - C41224) * C36262 +
             (C41227 - C41226 + C41229 - C41228) * C92097) *
                C9423 +
            ((C41230 - C41231 + C41232 - C41233) * C36262 +
             (C41234 - C41235 + C41236 - C41237) * C92097) *
                C9424) *
               C2665) *
              C1969 +
          ((((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C36262 +
             (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                 C92097) *
                C9422 +
            ((C43921 - C43922 + C43923 - C43924) * C36262 +
             (C43925 - C43926 + C43927 - C43928) * C92097) *
                C9423 +
            ((C43929 - C43930 + C43931 - C43932) * C36262 +
             (C43933 - C43934 + C43935 - C43936) * C92097) *
                C9424) *
               C2664 +
           (((C43922 - C43921 + C43924 - C43923) * C36262 +
             (C43926 - C43925 + C43928 - C43927) * C92097) *
                C9422 +
            ((C43930 - C43929 + C43932 - C43931) * C36262 +
             (C43934 - C43933 + C43936 - C43935) * C92097) *
                C9423 +
            ((C31252 * C13869 - C31334 * C13749 + C92226 * C43918 -
              C31335 * C43813) *
                 C36262 +
             (C31252 * C13871 - C31334 * C13752 + C92226 * C43919 -
              C31335 * C43815) *
                 C92097) *
                C9424) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C36262 +
             (C265 * C1390 - C92188 * C1531) * C92097) *
                C36258 +
            ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
            ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
            ((C39155 - C39156) * C36262 + (C39157 - C39158) * C92097) *
                C36261) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
            ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
            ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
            ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) *
                C36261) *
               C2664 +
           (((C8696 - C8695) * C36262 + (C8698 - C8697) * C92097) * C36258 +
            ((C8700 - C8699) * C36262 + (C8702 - C8701) * C92097) * C36259 +
            ((C39156 - C39155) * C36262 + (C39158 - C39157) * C92097) * C36260 +
            ((C92188 * C39152 - C265 * C38990) * C36262 +
             (C92188 * C39153 - C265 * C38992) * C92097) *
                C36261) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31254 +
             (C265 * C1390 - C92188 * C1531) * C31249 +
             (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
             (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
                C31252 +
            ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
             (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
             (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
                C92226) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
             C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
             C17153 * C31251) *
                C31252 +
            ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
             C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
             (C4214 - C4215) * C31251) *
                C92226) *
               C2664 +
           (((C8696 - C8695) * C31254 + (C8698 - C8697) * C31249 +
             (C7706 - C7705) * C31256 + (C7708 - C7707) * C31250 +
             (C18112 - C18111) * C31258 + (C18114 - C18113) * C31251) *
                C31252 +
            ((C8700 - C8699) * C31254 + (C8702 - C8701) * C31249 +
             (C7710 - C7709) * C31256 + (C7712 - C7711) * C31250 +
             (C92188 * C7702 - C265 * C7488) * C31258 +
             (C92188 * C7703 - C265 * C7490) * C31251) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C36262 +
             (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
              C9424 * C1535 - C9583 * C1392) *
                 C92097) *
                C31252 +
            ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
             (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
                C92226) *
               C2664 +
           (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
              C9583 * C10868 - C9424 * C11109) *
                 C36262 +
             (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
              C9583 * C10874 - C9424 * C11113) *
                 C92097) *
                C31252 +
            ((C44037 - C44038 + C44039 - C44040 + C44041 - C44042) * C36262 +
             (C44043 - C44044 + C44045 - C44046 + C44047 - C44048) * C92097) *
                C92226) *
               C2665) *
              C1969 +
          ((((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C36262 +
             (C40505 - C40504 + C40507 - C40506 + C40509 - C40508) * C92097) *
                C31252 +
            ((C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C36262 +
             (C40516 - C40517 + C40518 - C40519 + C40520 - C40521) * C92097) *
                C92226) *
               C2664 +
           (((C44038 - C44037 + C44040 - C44039 + C44042 - C44041) * C36262 +
             (C44044 - C44043 + C44046 - C44045 + C44048 - C44047) * C92097) *
                C31252 +
            ((C9422 * C5885 - C9581 * C5702 + C9423 * C5889 - C9582 * C5705 +
              C9424 * C44034 - C9583 * C43813) *
                 C36262 +
             (C9422 * C5891 - C9581 * C5710 + C9423 * C5895 - C9582 * C5716 +
              C9424 * C44035 - C9583 * C43815) *
                 C92097) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C2664 +
           ((C36262 * C1378 - C92097 * C1389) * C36314 +
            (C36262 * C1589 - C92097 * C1597) * C36258 +
            (C39227 - C39228) * C36315 + (C39229 - C39230) * C36259 +
            (C39231 - C39232) * C36316 + (C39233 - C39234) * C36260 +
            (C39235 - C39236) * C36317 + (C39237 - C39238) * C36261) *
               C92188 * C2665) *
              C1969 +
          (((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
            (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
            (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
            (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
               C92188 * C2664 +
           ((C39228 - C39227) * C36314 + (C39230 - C39229) * C36258 +
            (C39232 - C39231) * C36315 + (C39234 - C39233) * C36259 +
            (C39236 - C39235) * C36316 + (C39238 - C39237) * C36260 +
            (C92097 * C38991 - C36262 * C38990) * C36317 +
            (C92097 * C39225 - C36262 * C39224) * C36261) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C2664 +
           ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C31334 +
            (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
             C31258 * C1591 - C31251 * C1599) *
                C31252 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C31335 +
            (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92226) *
               C92188 * C2665) *
              C1969 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
            (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
            (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
               C92188 * C2664 +
           ((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C31334 +
            (C35707 - C35706 + C35709 - C35708 + C35711 - C35710) * C31252 +
            (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
             C31251 * C7489 - C31258 * C7488) *
                C31335 +
            (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 - C31256 * C5972 +
             C31251 * C7811 - C31258 * C7810) *
                C92226) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C31334 +
             (C92097 * C354 - C36262 * C348) * C31252 +
             (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
                C9422 +
            ((C41399 - C41400) * C31334 + (C41401 - C41402) * C31252 +
             C44149 * C31335 + C44150 * C92226) *
                C9423 +
            C41425 * C9424) *
               C2664 +
           (((C41400 - C41399) * C31334 + (C41402 - C41401) * C31252 +
             C44151 * C31335 + C44152 * C92226) *
                C9422 +
            ((C41404 - C41403) * C31334 + (C41406 - C41405) * C31252 +
             C44153 * C31335 + C44154 * C92226) *
                C9423 +
            ((C41409 - C41410) * C31334 + (C41411 - C41412) * C31252 +
             (C41413 - C41414) * C31335 + (C41415 - C41416) * C92226) *
                C9424) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C31334 + (C36930 - C36929) * C31252 +
             (C36932 - C36931) * C31335 + (C36934 - C36933) * C92226) *
                C9422 +
            (C44151 * C31334 + C44152 * C31252 + (C39231 - C39232) * C31335 +
             (C39233 - C39234) * C92226) *
                C9423 +
            (C44153 * C31334 + C44154 * C31252 + (C40600 - C40601) * C31335 +
             (C40602 - C40603) * C92226) *
                C9424) *
               C2664 +
           ((C44149 * C31334 + C44150 * C31252 + (C39232 - C39231) * C31335 +
             (C39234 - C39233) * C92226) *
                C9422 +
            (C41407 * C31334 + C41408 * C31252 + (C40601 - C40600) * C31335 +
             (C40603 - C40602) * C92226) *
                C9423 +
            ((C41414 - C41413) * C31334 + (C41416 - C41415) * C31252 +
             (C92097 * C43814 - C36262 * C43813) * C31335 +
             (C92097 * C44147 - C36262 * C44146) * C92226) *
                C9424) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C2664 -
           (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
            C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
            C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
            C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
               C92097 * C92188 * C2665) *
              C1969 +
          ((C36314 * C3439 - C36468 * C3357 - C36314 * C3587 + C36258 * C3661 +
            C36315 * C5799 - C36469 * C5702 - C36315 * C5971 + C36259 * C6058 +
            C36316 * C8588 - C36470 * C8454 - C36316 * C8800 + C36260 * C8918 +
            C36317 * C39084 - C36471 * C38990 - C36317 * C39224 +
            C36261 * C39304) *
               C92097 * C92188 * C2665 -
           (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
            C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
            C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
            C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
               C92097 * C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C2664 -
           ((C34879 + C34880) * C31251 + (C34881 + C34882) * C31250 +
            (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
             C31334 * C1457 - C31588 * C1378 - C31334 * C1589 +
             C31252 * C1658) *
                C31249) *
               C92188 * C2665) *
              C1969 +
          (((C31334 * C3439 - C31588 * C3357 - C31334 * C3587 + C31252 * C3661 +
             C31335 * C5799 - C31589 * C5702 - C31335 * C5971 +
             C92226 * C6058) *
                C31249 +
            (C31334 * C3440 - C31588 * C3358 - C31334 * C3588 + C31252 * C3662 +
             C31335 * C5800 - C31589 * C5701 - C31335 * C5972 +
             C92226 * C6057) *
                C31250 +
            (C31334 * C3441 - C31588 * C3359 - C31334 * C3589 + C31252 * C3663 +
             C31335 * C7590 - C31589 * C7488 - C31335 * C7810 +
             C92226 * C7910) *
                C31251) *
               C92188 * C2665 -
           ((C33935 + C33936) * C31251 + (C33937 + C33938) * C31250 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C31249) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92097 * C9422 +
            (C41537 + C41538) * C92097 * C9423 + C41544 * C9424) *
               C2664 -
           ((C41541 + C41542) * C92097 * C9424 +
            (C41540 + C41539) * C92097 * C9423 +
            (C41538 + C41537) * C92097 * C9422) *
               C2665) *
              C1969 +
          (((C44278 + C44279) * C92097 * C9422 +
            (C44280 + C44281) * C92097 * C9423 +
            (C31334 * C13869 - C31588 * C13749 - C31334 * C14081 +
             C31252 * C14191 + C31335 * C43918 - C31589 * C43813 -
             C31335 * C44146 + C92226 * C44252) *
                C92097 * C9424) *
               C2665 -
           ((C44281 + C44280) * C92097 * C9424 +
            (C44279 + C44278) * C92097 * C9423 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C92097 * C9422) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C36314 +
            (C265 * C1589 - C92188 * C1713) * C36258 +
            (C8695 - C8696) * C36315 + (C9021 - C9022) * C36259 +
            (C8699 - C8700) * C36316 + (C9023 - C9024) * C36260 +
            (C39155 - C39156) * C36317 + (C39373 - C39374) * C36261) *
               C92097 * C2665) *
              C1969 +
          (((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
            (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
            (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
            (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
               C92097 * C2664 +
           ((C8696 - C8695) * C36314 + (C9022 - C9021) * C36258 +
            (C8700 - C8699) * C36315 + (C9024 - C9023) * C36259 +
            (C39156 - C39155) * C36316 + (C39374 - C39373) * C36260 +
            (C92188 * C39152 - C265 * C38990) * C36317 +
            (C92188 * C39371 - C265 * C39224) * C36261) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31334 +
             (C265 * C1589 - C92188 * C1713) * C31252 +
             (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
                C31249 +
            ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
             (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
                C31250 +
            ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
             (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
                C31251) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
             (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
                C31249 +
            (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 +
             C7075 * C92226) *
                C31250 +
            (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
             (C4485 - C4486) * C92226) *
                C31251) *
               C2664 +
           (((C8696 - C8695) * C31334 + (C9022 - C9021) * C31252 +
             (C8700 - C8699) * C31335 + (C9024 - C9023) * C92226) *
                C31249 +
            ((C7706 - C7705) * C31334 + (C8033 - C8032) * C31252 +
             (C7710 - C7709) * C31335 + (C8035 - C8034) * C92226) *
                C31250 +
            ((C18112 - C18111) * C31334 + (C18438 - C18437) * C31252 +
             (C92188 * C7702 - C265 * C7488) * C31335 +
             (C92188 * C8030 - C265 * C7810) * C92226) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C31334 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C31252 +
            (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
            (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
               C92097 * C2664 +
           ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C31334 +
            (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
             C9583 * C11191 - C9424 * C11419) *
                C31252 +
            (C44037 - C44038 + C44039 - C44040 + C44041 - C44042) * C31335 +
            (C44381 - C44382 + C44383 - C44384 + C44385 - C44386) * C92226) *
               C92097 * C2665) *
              C1969 +
          (((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C31334 +
            (C40753 - C40752 + C40755 - C40754 + C40757 - C40756) * C31252 +
            (C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C31335 +
            (C40758 - C40759 + C40760 - C40761 + C40762 - C40763) * C92226) *
               C92097 * C2664 +
           ((C44038 - C44037 + C44040 - C44039 + C44042 - C44041) * C31334 +
            (C44382 - C44381 + C44384 - C44383 + C44386 - C44385) * C31252 +
            (C9422 * C5885 - C9581 * C5702 + C9423 * C5889 - C9582 * C5705 +
             C9424 * C44034 - C9583 * C43813) *
                C31335 +
            (C9422 * C6137 - C9581 * C5971 + C9423 * C6140 - C9582 * C5975 +
             C9424 * C44379 - C9583 * C44146) *
                C92226) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C2664 +
           (((C36262 * C1378 - C92097 * C1389) * C265 +
             (C36262 * C1771 - C92097 * C1779) * C92188) *
                C36258 +
            ((C39227 - C39228) * C265 + (C39443 - C39444) * C92188) * C36259 +
            ((C39231 - C39232) * C265 + (C39445 - C39446) * C92188) * C36260 +
            ((C39235 - C39236) * C265 + (C39447 - C39448) * C92188) * C36261) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
            ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
            ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
            ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
               C2664 +
           (((C39228 - C39227) * C265 + (C39444 - C39443) * C92188) * C36258 +
            ((C39232 - C39231) * C265 + (C39446 - C39445) * C92188) * C36259 +
            ((C39236 - C39235) * C265 + (C39448 - C39447) * C92188) * C36260 +
            ((C92097 * C38991 - C36262 * C38990) * C265 +
             (C92097 * C39441 - C36262 * C39440) * C92188) *
                C36261) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C2664 +
           (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 -
              C31250 * C1387 + C31258 * C1376 - C31251 * C1385) *
                 C265 +
             (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 -
              C31250 * C1780 + C31258 * C1773 - C31251 * C1781) *
                 C92188) *
                C31252 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C265 +
             (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92188) *
                C92226) *
               C2665) *
              C1969 +
          ((((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
             (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
                C31252 +
            ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
             (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
                C92226) *
               C2664 +
           (((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C265 +
             (C36007 - C36006 + C36009 - C36008 + C36011 - C36010) * C92188) *
                C31252 +
            ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 -
              C31256 * C5701 + C31251 * C7489 - C31258 * C7488) *
                 C265 +
             (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 -
              C31256 * C6218 + C31251 * C8134 - C31258 * C8133) *
                 C92188) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C9581 +
             (C92097 * C573 - C36262 * C567) * C9422 +
             (C41399 - C41400) * C9582 + (C41696 - C41697) * C9423 +
             C41417 * C9583 + C41705 * C9424) *
                C31252 +
            ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
             C44149 * C9582 + C44487 * C9423 + C41407 * C9583 +
             C41700 * C9424) *
                C92226) *
               C2664 +
           (((C41400 - C41399) * C9581 + (C41697 - C41696) * C9422 +
             (C41404 - C41403) * C9582 + (C41699 - C41698) * C9423 +
             (C41409 - C41410) * C9583 + (C41701 - C41702) * C9424) *
                C31252 +
            (C44151 * C9581 + C44488 * C9422 + C44153 * C9582 + C44489 * C9423 +
             (C41413 - C41414) * C9583 + (C41703 - C41704) * C9424) *
                C92226) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C9581 + (C37105 - C37104) * C9422 +
             C44151 * C9582 + C44488 * C9423 + C44153 * C9583 +
             C44489 * C9424) *
                C31252 +
            ((C36932 - C36931) * C9581 + (C37108 - C37107) * C9422 +
             (C39231 - C39232) * C9582 + (C39445 - C39446) * C9423 +
             (C40600 - C40601) * C9583 + (C40840 - C40841) * C9424) *
                C92226) *
               C2664 +
           ((C44149 * C9581 + C44487 * C9422 + C41407 * C9582 + C41700 * C9423 +
             (C41414 - C41413) * C9583 + (C41704 - C41703) * C9424) *
                C31252 +
            ((C39232 - C39231) * C9581 + (C39446 - C39445) * C9422 +
             (C40601 - C40600) * C9582 + (C40841 - C40840) * C9423 +
             (C92097 * C43814 - C36262 * C43813) * C9583 +
             (C92097 * C44485 - C36262 * C44484) * C9424) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C265 +
            (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
             C36316 * C6217 - C36260 * C6303 + C36317 * C9122 -
             C36261 * C9232) *
                C92188) *
               C92097 * C2665) *
              C1969 +
          (((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C265 +
            (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
             C36316 * C5417 - C36260 * C5517 + C36317 * C5419 -
             C36261 * C5519) *
                C92188) *
               C92097 * C2664 +
           ((C36258 * C3439 - C36314 * C3357 + C36259 * C5799 - C36315 * C5702 +
             C36260 * C8588 - C36316 * C8454 + C36261 * C39084 -
             C36317 * C38990) *
                C265 +
            (C36258 * C3875 - C36314 * C3801 + C36259 * C6303 - C36315 * C6217 +
             C36260 * C9232 - C36316 * C9122 + C36261 * C39514 -
             C36317 * C39440) *
                C92188) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C2664 +
           (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C31249 +
            ((C34545 - C34546 + C34547 - C34548) * C265 +
             (C35177 - C35178 + C35179 - C35180) * C92188) *
                C31250 +
            ((C34553 - C34554 + C34555 - C34556) * C265 +
             (C35181 - C35182 + C35183 - C35184) * C92188) *
                C31251) *
               C2665) *
              C1969 +
          ((((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C265 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C31249 +
            ((C33589 - C33590 + C33591 - C33592) * C265 +
             (C34239 - C34240 + C34241 - C34242) * C92188) *
                C31250 +
            ((C33597 - C33598 + C33599 - C33600) * C265 +
             (C34243 - C34244 + C34245 - C34246) * C92188) *
                C31251) *
               C2664 +
           (((C31252 * C3439 - C31334 * C3357 + C92226 * C5799 -
              C31335 * C5702) *
                 C265 +
             (C31252 * C3875 - C31334 * C3801 + C92226 * C6303 -
              C31335 * C6217) *
                 C92188) *
                C31249 +
            ((C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
              C31335 * C5701) *
                 C265 +
             (C31252 * C3876 - C31334 * C3802 + C92226 * C6304 -
              C31335 * C6218) *
                 C92188) *
                C31250 +
            ((C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
              C31335 * C7488) *
                 C265 +
             (C31252 * C3877 - C31334 * C3803 + C92226 * C8233 -
              C31335 * C8133) *
                 C92188) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C9581 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C9422 +
            (C41214 - C41215 + C41216 - C41217) * C9582 +
            (C41781 - C41782 + C41783 - C41784) * C9423 + C41242 * C9583 +
            C41795 * C9424) *
               C92097 * C2664 +
           ((C41215 - C41214 + C41217 - C41216) * C9581 +
            (C41782 - C41781 + C41784 - C41783) * C9422 +
            (C41223 - C41222 + C41225 - C41224) * C9582 +
            (C41786 - C41785 + C41788 - C41787) * C9423 +
            (C41230 - C41231 + C41232 - C41233) * C9583 +
            (C41789 - C41790 + C41791 - C41792) * C9424) *
               C92097 * C2665) *
              C1969 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C9581 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C9422 +
            (C43921 - C43922 + C43923 - C43924) * C9582 +
            (C44589 - C44590 + C44591 - C44592) * C9423 +
            (C43929 - C43930 + C43931 - C43932) * C9583 +
            (C44593 - C44594 + C44595 - C44596) * C9424) *
               C92097 * C2664 +
           ((C43922 - C43921 + C43924 - C43923) * C9581 +
            (C44590 - C44589 + C44592 - C44591) * C9422 +
            (C43930 - C43929 + C43932 - C43931) * C9582 +
            (C44594 - C44593 + C44596 - C44595) * C9423 +
            (C31252 * C13869 - C31334 * C13749 + C92226 * C43918 -
             C31335 * C43813) *
                C9583 +
            (C31252 * C14515 - C31334 * C14409 + C92226 * C44587 -
             C31335 * C44484) *
                C9424) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C2664 -
           (C39589 * C36261 + C9347 * C36260 + C9348 * C36259 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C36258) *
               C92097 * C2665) *
              C1969 +
          ((C9348 * C36258 + C9347 * C36259 + C39589 * C36260 +
            (C265 * C39152 - C701 * C38990 - C265 * C39440 + C92188 * C39581) *
                C36261) *
               C92097 * C2665 -
           (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 +
            C5624 * C36258) *
               C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C2664 -
           ((C35283 + C35284) * C31251 + (C35285 + C35286) * C31250 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C31252) *
                C31249) *
               C2665) *
              C1969 +
          (((C9348 * C31252 + C9347 * C92226) * C31249 +
            (C8354 * C31252 + C8353 * C92226) * C31250 +
            (C18750 * C31252 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C92226) *
                C31251) *
               C2665 -
           ((C34345 + C34346) * C31251 + (C34347 + C34348) * C31250 +
            (C5625 * C92226 + C5624 * C31252) * C31249) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C31252 +
            (C41026 + C41027 + C41028) * C92226) *
               C92097 * C2664 -
           ((C44714 + C44715 + C44716) * C92226 +
            (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 +
             C9424 * C11683 + C9582 * C1527 - C10083 * C1379 - C9582 * C1775 +
             C9423 * C1899 + C9581 * C1523 - C10082 * C1378 - C9581 * C1771 +
             C9422 * C1898) *
                C31252) *
               C92097 * C2665) *
              C1969 +
          (((C44716 + C44715 + C44714) * C31252 +
            (C9581 * C5885 - C10082 * C5702 - C9581 * C6217 + C9422 * C6384 +
             C9582 * C5889 - C10083 * C5705 - C9582 * C6221 + C9423 * C6386 +
             C9583 * C44034 - C10084 * C43813 - C9583 * C44484 +
             C9424 * C44694) *
                C92226) *
               C92097 * C2665 -
           ((C41029 + C41030 + C41031) * C92226 +
            (C41028 + C41027 + C41026) * C31252) *
               C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
                C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
                C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                   C92188 * C31252 +
               (C31254 * C808 - C31255 * C797 - C31254 * C809 + C31249 * C821 +
                C31256 * C806 - C31257 * C796 - C31256 * C807 + C31250 * C820 +
                C31258 * C804 - C31259 * C795 - C31258 * C805 + C31251 * C819) *
                   C92188 * C92226) *
                  C92150 * C92136 * C97 -
              ((C31258 * C802 - C31259 * C794 - C31258 * C803 + C31251 * C818 +
                C31256 * C804 - C31257 * C795 - C31256 * C805 + C31250 * C819 +
                C31254 * C806 - C31255 * C796 - C31254 * C807 + C31249 * C820) *
                   C92188 * C92226 +
               (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
                C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
                C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                   C92188 * C31252) *
                  C92150 * C92136 * C98 +
              ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
                C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
                C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
                   C92188 * C31252 +
               (C31254 * C804 - C31255 * C795 - C31254 * C805 + C31249 * C819 +
                C31256 * C802 - C31257 * C794 - C31256 * C803 + C31250 * C818 +
                C31258 * C1974 - C31259 * C1973 - C31258 * C1975 +
                C31251 * C1976) *
                   C92188 * C92226) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
                C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
                C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                   C92188 * C31252 +
               (C32072 + C32073 + C32074) * C92188 * C92226) *
                  C92150 * C790 -
              ((C32075 + C32076 + C32077) * C92188 * C92226 +
               (C32074 + C32073 + C32072) * C92188 * C31252) *
                  C92150 * C791 +
              ((C32077 + C32076 + C32075) * C92188 * C31252 +
               (C31254 * C4820 - C31255 * C4815 - C31254 * C4821 +
                C31249 * C4827 + C31256 * C4818 - C31257 * C4814 -
                C31256 * C4819 + C31250 * C4826 + C31258 * C6488 -
                C31259 * C6487 - C31258 * C6489 + C31251 * C6490) *
                   C92188 * C92226) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C32072 + C32073 + C32074) * C92188 * C92226) *
              C1372 -
          ((C31258 * C3365 - C31259 * C3359 - C31258 * C3366 + C31251 * C3371 +
            C31256 * C3363 - C31257 * C3358 - C31256 * C3364 + C31250 * C3370 +
            C31254 * C3361 - C31255 * C3357 - C31254 * C3362 + C31249 * C3369) *
               C92188 * C92226 +
           (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402) *
               C92188 * C31252) *
              C1373 +
          ((C31254 * C1391 - C31255 * C1379 - C31254 * C1392 + C31249 * C1403 +
            C31256 * C1393 - C31257 * C1380 - C31256 * C1394 + C31250 * C1404 +
            C31258 * C1395 - C31259 * C1381 - C31258 * C1396 + C31251 * C1405) *
               C92188 * C31252 +
           (C31254 * C5711 - C31255 * C5703 - C31254 * C5712 + C31249 * C5721 +
            C31256 * C5713 - C31257 * C5704 - C31256 * C5714 + C31250 * C5722 +
            C31258 * C11785 - C31259 * C11784 - C31258 * C11786 +
            C31251 * C11787) *
               C92188 * C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           (C36262 * C808 - C36263 * C797 - C36262 * C809 + C92097 * C821) *
               C92188 * C36259 +
           (C36262 * C810 - C36263 * C798 - C36262 * C811 + C92097 * C822) *
               C92188 * C36260 +
           (C36262 * C4820 - C36263 * C4815 - C36262 * C4821 + C92097 * C4827) *
               C92188 * C36261) *
              C92150 * C92136 * C97 -
          ((C36262 * C4818 - C36263 * C4814 - C36262 * C4819 + C92097 * C4826) *
               C92188 * C36261 +
           (C36262 * C812 - C36263 * C799 - C36262 * C813 + C92097 * C823) *
               C92188 * C36260 +
           (C36262 * C806 - C36263 * C796 - C36262 * C807 + C92097 * C820) *
               C92188 * C36259 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C92188 * C36258) *
              C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C92188 * C36258 +
           (C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
               C92188 * C36259 +
           (C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
               C92188 * C36260 +
           (C36262 * C6488 - C36263 * C6487 - C36262 * C6489 + C92097 * C6490) *
               C92188 * C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C92150 * C790 -
          (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
           C36755 * C36258) *
              C92150 * C791 +
          (C36756 * C36258 + C36757 * C36259 + C36758 * C36260 +
           (C36262 * C36723 - C36263 * C36722 - C36262 * C36724 +
            C92097 * C36725) *
               C92188 * C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C1372 -
          ((C36262 * C8456 - C36263 * C8454 - C36262 * C8457 + C92097 * C8460) *
               C92188 * C36261 +
           (C36262 * C5709 - C36263 * C5702 - C36262 * C5710 + C92097 * C5720) *
               C92188 * C36260 +
           (C36262 * C3361 - C36263 * C3357 - C36262 * C3362 + C92097 * C3369) *
               C92188 * C36259 +
           (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 + C92097 * C1402) *
               C92188 * C36258) *
              C1373 +
          ((C36262 * C1391 - C36263 * C1379 - C36262 * C1392 + C92097 * C1403) *
               C92188 * C36258 +
           (C36262 * C5711 - C36263 * C5703 - C36262 * C5712 + C92097 * C5721) *
               C92188 * C36259 +
           (C36262 * C5715 - C36263 * C5705 - C36262 * C5716 + C92097 * C5723) *
               C92188 * C36260 +
           (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
            C92097 * C37281) *
               C92188 * C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C9422 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C9423 +
            (C36262 * C1391 - C36263 * C1379 - C36262 * C1392 +
             C92097 * C1403) *
                C9424) *
               C31252 +
           (C36751 * C9422 + C39015 * C9423 +
            (C36262 * C5711 - C36263 * C5703 - C36262 * C5712 +
             C92097 * C5721) *
                C9424) *
               C92226) *
              C92150 * C92136 * C97 -
          (((C36262 * C5713 - C36263 * C5704 - C36262 * C5714 +
             C92097 * C5722) *
                C9424 +
            (C36262 * C3363 - C36263 * C3358 - C36262 * C3364 +
             C92097 * C3370) *
                C9423 +
            C37779 * C9422) *
               C92226 +
           ((C36262 * C1393 - C36263 * C1380 - C36262 * C1394 +
             C92097 * C1404) *
                C9424 +
            (C36262 * C1387 - C36263 * C1377 - C36262 * C1388 +
             C92097 * C1401) *
                C9423 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C9422) *
               C31252) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C9422 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C9423 +
            (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 +
             C92097 * C1405) *
                C9424) *
               C31252 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C9422 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C9423 +
            (C36262 * C11785 - C36263 * C11784 - C36262 * C11786 +
             C92097 * C11787) *
                C9424) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C9422 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C9423 +
            (C36262 * C1391 - C36263 * C1379 - C36262 * C1392 +
             C92097 * C1403) *
                C9424) *
               C31252 +
           (C40330 + C40331 + C40348) * C92226) *
              C92150 * C790 -
          ((C40349 + C40340 + C40341) * C92226 +
           (C40348 + C40331 + C40330) * C31252) *
              C92150 * C791 +
          ((C40341 + C40340 + C40349) * C31252 +
           (C36753 * C9422 + C39013 * C9423 +
            (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
             C92097 * C37281) *
                C9424) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C9422 +
            C41134 * C9423 + C41135 * C9424) *
               C31252 +
           (C40330 + C40331 + C40348) * C92226) *
              C1372 -
          ((C41136 * C9424 + C40346 * C9423 + C39015 * C9422) * C92226 +
           (C41137 * C9424 + C41135 * C9423 + C41134 * C9422) * C31252) *
              C1373 +
          ((C41135 * C9422 + C41137 * C9423 +
            (C36262 * C10875 - C36263 * C10869 - C36262 * C10876 +
             C92097 * C10881) *
                C9424) *
               C31252 +
           (C40346 * C9422 + C41136 * C9423 +
            (C36262 * C41106 - C36263 * C41105 - C36262 * C41107 +
             C92097 * C41108) *
                C9424) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                   C31254 +
               (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                   C31249 +
               (C31337 - C31338 + C31339 - C31340) * C31256 +
               (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
               C31366 * C31251) *
                  C92188 * C92150 * C92136 * C97 +
              ((C31338 - C31337 + C31340 - C31339) * C31254 +
               (C31342 - C31341 + C31344 - C31343) * C31249 +
               (C31346 - C31345 + C31348 - C31347) * C31256 +
               (C31350 - C31349 + C31352 - C31351) * C31250 +
               (C31353 - C31354 + C31355 - C31356) * C31258 +
               (C31357 - C31358 + C31359 - C31360) * C31251) *
                  C92188 * C92150 * C92136 * C98 +
              (C31365 * C31254 + C31366 * C31249 +
               (C31354 - C31353 + C31356 - C31355) * C31256 +
               (C31358 - C31357 + C31360 - C31359) * C31250 +
               (C31252 * C187 - C31334 * C112 + C92226 * C2043 -
                C31335 * C1973) *
                   C31258 +
               (C31252 * C193 - C31334 * C123 + C92226 * C2044 -
                C31335 * C1975) *
                   C31251) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                   C31254 +
               (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                   C31249 +
               (C31337 - C31338 + C31339 - C31340) * C31256 +
               (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
               C31366 * C31251) *
                  C92188 * C92150 * C790 +
              ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                   C31254 +
               (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                   C31249 +
               (C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
                   C31256 +
               (C31334 * C807 - C31252 * C885 + C31335 * C813 - C92226 * C889) *
                   C31250 +
               (C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
                   C31258 +
               (C31334 * C805 - C31252 * C886 + C31335 * C815 - C92226 * C890) *
                   C31251) *
                  C92188 * C92150 * C791 +
              ((C31252 * C880 - C31334 * C798 + C92226 * C4948 -
                C31335 * C4815) *
                   C31254 +
               (C31252 * C888 - C31334 * C811 + C92226 * C4952 -
                C31335 * C4821) *
                   C31249 +
               (C31252 * C881 - C31334 * C799 + C92226 * C4949 -
                C31335 * C4814) *
                   C31256 +
               (C31252 * C889 - C31334 * C813 + C92226 * C4953 -
                C31335 * C4819) *
                   C31250 +
               (C31252 * C882 - C31334 * C800 + C92226 * C6617 -
                C31335 * C6487) *
                   C31258 +
               (C31252 * C890 - C31334 * C815 + C92226 * C6618 -
                C31335 * C6489) *
                   C31251) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C1372 +
          ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 - C92226 * C3439) *
               C31254 +
           (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 - C92226 * C3443) *
               C31249 +
           (C31334 * C1377 - C31252 * C1458 + C31335 * C3358 - C92226 * C3440) *
               C31256 +
           (C31334 * C1388 - C31252 * C1466 + C31335 * C3364 - C92226 * C3444) *
               C31250 +
           (C31334 * C1376 - C31252 * C1459 + C31335 * C3359 - C92226 * C3441) *
               C31258 +
           (C31334 * C1386 - C31252 * C1467 + C31335 * C3366 - C92226 * C3445) *
               C31251) *
              C92188 * C1373 +
          ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C31254 +
           (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 - C31335 * C5712) *
               C31249 +
           (C31252 * C1462 - C31334 * C1380 + C92226 * C5803 - C31335 * C5704) *
               C31256 +
           (C31252 * C1470 - C31334 * C1394 + C92226 * C5809 - C31335 * C5714) *
               C31250 +
           (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
            C31335 * C11784) *
               C31258 +
           (C31252 * C1471 - C31334 * C1396 + C92226 * C11887 -
            C31335 * C11786) *
               C31251) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C36262 +
           (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
            C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
               C92097) *
              C92188 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C36262 +
           (C36258 * C191 - C36314 * C119 + C36259 * C886 - C36315 * C805 +
            C36260 * C890 - C36316 * C815 + C36261 * C6618 - C36317 * C6489) *
               C92097) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C36262 +
           (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
            C36316 * C4821 - C36260 * C4952 + C36317 * C4823 - C36261 * C4954) *
               C92097) *
              C92188 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C36262 +
           (C36258 * C888 - C36314 * C811 + C36259 * C4952 - C36315 * C4821 +
            C36260 * C4954 - C36316 * C4823 + C36261 * C36809 -
            C36317 * C36724) *
               C92097) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C1372 +
          ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
            C36316 * C5702 - C36260 * C5799 + C36317 * C8454 - C36261 * C8588) *
               C36262 +
           (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
            C36316 * C5710 - C36260 * C5805 + C36317 * C8457 - C36261 * C8590) *
               C92097) *
              C92188 * C1373 +
          ((C36258 * C1461 - C36314 * C1379 + C36259 * C5801 - C36315 * C5703 +
            C36260 * C5802 - C36316 * C5705 + C36261 * C37332 -
            C36317 * C37278) *
               C36262 +
           (C36258 * C1469 - C36314 * C1392 + C36259 * C5807 - C36315 * C5712 +
            C36260 * C5808 - C36316 * C5716 + C36261 * C37333 -
            C36317 * C37280) *
               C92097) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C36262 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92097) *
               C9422 +
           ((C31252 * C1457 - C31334 * C1378 + C92226 * C3439 -
             C31335 * C3357) *
                C36262 +
            (C31252 * C1465 - C31334 * C1390 + C92226 * C3443 -
             C31335 * C3362) *
                C92097) *
               C9423 +
           ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C36262 +
            (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 -
             C31335 * C5712) *
                C92097) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C36262 +
            (C31342 - C31341 + C31344 - C31343) * C92097) *
               C9422 +
           ((C34545 - C34546 + C34547 - C34548) * C36262 +
            (C34549 - C34550 + C34551 - C34552) * C92097) *
               C9423 +
           ((C31334 * C1380 - C31252 * C1462 + C31335 * C5704 -
             C92226 * C5803) *
                C36262 +
            (C31334 * C1394 - C31252 * C1470 + C31335 * C5714 -
             C92226 * C5809) *
                C92097) *
               C9424) *
              C92150 * C92136 * C98 +
          ((C31365 * C36262 + C31366 * C92097) * C9422 +
           ((C34554 - C34553 + C34556 - C34555) * C36262 +
            (C34558 - C34557 + C34560 - C34559) * C92097) *
               C9423 +
           ((C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
             C31335 * C11784) *
                C36262 +
            (C31252 * C1471 - C31334 * C1396 + C92226 * C11887 -
             C31335 * C11786) *
                C92097) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C36262 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92097) *
               C9422 +
           ((C31252 * C1457 - C31334 * C1378 + C92226 * C3439 -
             C31335 * C3357) *
                C36262 +
            (C31252 * C1465 - C31334 * C1390 + C92226 * C3443 -
             C31335 * C3362) *
                C92097) *
               C9423 +
           ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C36262 +
            (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 -
             C31335 * C5712) *
                C92097) *
               C9424) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C36262 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C92097) *
               C9422 +
           ((C31334 * C3357 - C31252 * C3439 + C31335 * C5702 -
             C92226 * C5799) *
                C36262 +
            (C31334 * C3362 - C31252 * C3443 + C31335 * C5710 -
             C92226 * C5805) *
                C92097) *
               C9423 +
           ((C31334 * C5703 - C31252 * C5801 + C31335 * C5705 -
             C92226 * C5802) *
                C36262 +
            (C31334 * C5712 - C31252 * C5807 + C31335 * C5716 -
             C92226 * C5808) *
                C92097) *
               C9424) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C36262 +
            (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
                C92097) *
               C9422 +
           ((C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C36262 +
            (C31252 * C5805 - C31334 * C5710 + C92226 * C8590 -
             C31335 * C8457) *
                C92097) *
               C9423 +
           ((C31252 * C5802 - C31334 * C5705 + C92226 * C37332 -
             C31335 * C37278) *
                C36262 +
            (C31252 * C5808 - C31334 * C5716 + C92226 * C37333 -
             C31335 * C37280) *
                C92097) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C36262 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92097) *
               C9422 +
           ((C41214 - C41215 + C41216 - C41217) * C36262 +
            (C41218 - C41219 + C41220 - C41221) * C92097) *
               C9423 +
           C41246 * C9424) *
              C1372 +
          (((C41215 - C41214 + C41217 - C41216) * C36262 +
            (C41219 - C41218 + C41221 - C41220) * C92097) *
               C9422 +
           ((C41223 - C41222 + C41225 - C41224) * C36262 +
            (C41227 - C41226 + C41229 - C41228) * C92097) *
               C9423 +
           ((C41230 - C41231 + C41232 - C41233) * C36262 +
            (C41234 - C41235 + C41236 - C41237) * C92097) *
               C9424) *
              C1373 +
          (C41246 * C9422 +
           ((C41231 - C41230 + C41233 - C41232) * C36262 +
            (C41235 - C41234 + C41237 - C41236) * C92097) *
               C9423 +
           ((C31252 * C11002 - C31334 * C10869 + C92226 * C41211 -
             C31335 * C41105) *
                C36262 +
            (C31252 * C11006 - C31334 * C10876 + C92226 * C41212 -
             C31335 * C41107) *
                C92097) *
               C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C31254 +
                (C92188 * C272 - C265 * C115) * C31249 +
                (C279 - C280) * C31256 + (C281 - C282) * C31250 +
                C295 * C31258 + C296 * C31251) *
                   C31252 +
               ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
                C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
                C14888 * C31251) *
                   C92226) *
                  C92150 * C92136 * C97 +
              (((C280 - C279) * C31254 + (C282 - C281) * C31249 +
                (C284 - C283) * C31256 + (C286 - C285) * C31250 +
                (C288 - C287) * C31258 + (C290 - C289) * C31251) *
                   C31252 +
               (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
                C17153 * C31250 + (C2134 - C2135) * C31258 +
                (C2136 - C2137) * C31251) *
                   C92226) *
                  C92150 * C92136 * C98 +
              ((C295 * C31254 + C296 * C31249 + C297 * C31256 + C298 * C31250 +
                (C292 - C291) * C31258 + (C294 - C293) * C31251) *
                   C31252 +
               (C14887 * C31254 + C14888 * C31249 + (C2135 - C2134) * C31256 +
                (C2137 - C2136) * C31250 +
                (C92188 * C2123 - C265 * C1973) * C31258 +
                (C92188 * C2124 - C265 * C1975) * C31251) *
                   C92226) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C31254 +
                (C92188 * C272 - C265 * C115) * C31249 +
                (C279 - C280) * C31256 + (C281 - C282) * C31250 +
                C295 * C31258 + C296 * C31251) *
                   C31252 +
               ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
                C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
                C14888 * C31251) *
                   C92226) *
                  C92150 * C790 +
              (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
                C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
                C17153 * C31251) *
                   C31252 +
               ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
                C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
                (C4214 - C4215) * C31251) *
                   C92226) *
                  C92150 * C791 +
              ((C5057 * C31254 + C5058 * C31249 + C5047 * C31256 +
                C5048 * C31250 + (C4213 - C4212) * C31258 +
                (C4215 - C4214) * C31251) *
                   C31252 +
               ((C5050 - C5049) * C31254 + (C5052 - C5051) * C31249 +
                (C5054 - C5053) * C31256 + (C5056 - C5055) * C31250 +
                (C92188 * C6729 - C265 * C6487) * C31258 +
                (C92188 * C6730 - C265 * C6489) * C31251) *
                   C92226) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C31254 +
            (C265 * C1390 - C92188 * C1531) * C31249 +
            (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
            (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
               C31252 +
           ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
            (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
            (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
               C92226) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C31254 +
            (C92188 * C1535 - C265 * C1392) * C31249 +
            (C92188 * C1528 - C265 * C1380) * C31256 +
            (C92188 * C1536 - C265 * C1394) * C31250 +
            (C92188 * C1529 - C265 * C1381) * C31258 +
            (C92188 * C1537 - C265 * C1396) * C31251) *
               C31252 +
           ((C92188 * C5887 - C265 * C5703) * C31254 +
            (C92188 * C5893 - C265 * C5712) * C31249 +
            (C92188 * C5888 - C265 * C5704) * C31256 +
            (C92188 * C5894 - C265 * C5714) * C31250 +
            (C92188 * C11994 - C265 * C11784) * C31258 +
            (C92188 * C11995 - C265 * C11786) * C31251) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           (C5057 * C36262 + C5058 * C92097) * C36260 +
           ((C5050 - C5049) * C36262 + (C5052 - C5051) * C92097) * C36261) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
           (C6734 * C36262 + C6735 * C92097) * C36259 +
           (C6736 * C36262 + C6737 * C92097) * C36260 +
           ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
              C92150 * C92136 * C98 +
          ((C295 * C36262 + C296 * C92097) * C36258 +
           (C14887 * C36262 + C14888 * C92097) * C36259 +
           ((C4213 - C4212) * C36262 + (C4215 - C4214) * C92097) * C36260 +
           ((C92188 * C6729 - C265 * C6487) * C36262 +
            (C92188 * C6730 - C265 * C6489) * C92097) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C92150 * C790 +
          (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
           ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
           ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
           ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) * C36261) *
              C92150 * C791 +
          (C36871 * C36258 + C36874 * C36259 +
           ((C36868 - C36867) * C36262 + (C36870 - C36869) * C92097) * C36260 +
           ((C92188 * C36860 - C265 * C36722) * C36262 +
            (C92188 * C36861 - C265 * C36724) * C92097) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C36262 +
            (C265 * C1390 - C92188 * C1531) * C92097) *
               C36258 +
           ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
           ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
           ((C265 * C8454 - C92188 * C8690) * C36262 +
            (C265 * C8457 - C92188 * C8692) * C92097) *
               C36261) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C36262 +
            (C92188 * C1535 - C265 * C1392) * C92097) *
               C36258 +
           ((C92188 * C5887 - C265 * C5703) * C36262 +
            (C92188 * C5893 - C265 * C5712) * C92097) *
               C36259 +
           ((C92188 * C5889 - C265 * C5705) * C36262 +
            (C92188 * C5895 - C265 * C5716) * C92097) *
               C36260 +
           ((C92188 * C37384 - C265 * C37278) * C36262 +
            (C92188 * C37385 - C265 * C37280) * C92097) *
               C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C36262 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C92097) *
               C31252 +
           ((C9422 * C942 - C9581 * C797 + C9423 * C3513 - C9582 * C3357 +
             C9424 * C5887 - C9583 * C5703) *
                C36262 +
            (C9422 * C950 - C9581 * C809 + C9423 * C3517 - C9582 * C3362 +
             C9424 * C5893 - C9583 * C5712) *
                C92097) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C36262 +
            (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C92097) *
               C31252 +
           ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C36262 +
            (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92097) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C36262 +
            (C9604 - C9603 + C9606 - C9605 + C9608 - C9607) * C92097) *
               C31252 +
           ((C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
             C9424 * C11994 - C9583 * C11784) *
                C36262 +
            (C9422 * C952 - C9581 * C805 + C9423 * C3519 - C9582 * C3366 +
             C9424 * C11995 - C9583 * C11786) *
                C92097) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C36262 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C92097) *
               C31252 +
           ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
            (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
               C92226) *
              C92150 * C790 +
          (((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C36262 +
            (C40505 - C40504 + C40507 - C40506 + C40509 - C40508) * C92097) *
               C31252 +
           ((C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C36262 +
            (C40516 - C40517 + C40518 - C40519 + C40520 - C40521) * C92097) *
               C92226) *
              C92150 * C791 +
          (((C40511 - C40510 + C40513 - C40512 + C40515 - C40514) * C36262 +
            (C40517 - C40516 + C40519 - C40518 + C40521 - C40520) * C92097) *
               C31252 +
           ((C9422 * C5030 - C9581 * C4815 + C9423 * C8690 - C9582 * C8454 +
             C9424 * C37384 - C9583 * C37278) *
                C36262 +
            (C9422 * C5034 - C9581 * C4821 + C9423 * C8692 - C9582 * C8457 +
             C9424 * C37385 - C9583 * C37280) *
                C92097) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C36262 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C92097) *
               C31252 +
           ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
            (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
               C92226) *
              C1372 +
          (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C36262 +
            (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
             C9583 * C10874 - C9424 * C11113) *
                C92097) *
               C31252 +
           ((C9581 * C3357 - C9422 * C3513 + C9582 * C5703 - C9423 * C5887 +
             C9583 * C13749 - C9424 * C13979) *
                C36262 +
            (C9581 * C3362 - C9422 * C3517 + C9582 * C5712 - C9423 * C5893 +
             C9583 * C13752 - C9424 * C13981) *
                C92097) *
               C92226) *
              C1373 +
          (((C9422 * C1527 - C9581 * C1379 + C9423 * C11109 - C9582 * C10868 +
             C9424 * C11111 - C9583 * C10869) *
                C36262 +
            (C9422 * C1535 - C9581 * C1392 + C9423 * C11113 - C9582 * C10874 +
             C9424 * C11115 - C9583 * C10876) *
                C92097) *
               C31252 +
           ((C9422 * C5887 - C9581 * C5703 + C9423 * C13979 - C9582 * C13749 +
             C9424 * C41320 - C9583 * C41105) *
                C36262 +
            (C9422 * C5893 - C9581 * C5712 + C9423 * C13981 - C9582 * C13752 +
             C9424 * C41321 - C9583 * C41107) *
                C92097) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                C31251 * C118 - C31258 * C110) *
                   C31334 +
               (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
                C31251 * C356 - C31258 * C350) *
                   C31252 +
               (C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
                C31251 * C804 - C31258 * C795) *
                   C31335 +
               (C31249 * C1016 - C31254 * C1008 + C31250 * C1017 -
                C31256 * C1009 + C31251 * C1018 - C31258 * C1010) *
                   C92226) *
                  C92188 * C92150 * C92136 * C97 +
              ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
                C31258 * C111 - C31251 * C120) *
                   C31334 +
               (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
                C31258 * C351 - C31251 * C357) *
                   C31252 +
               (C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
                C31258 * C794 - C31251 * C802) *
                   C31335 +
               (C31254 * C1009 - C31249 * C1017 + C31256 * C1010 -
                C31250 * C1018 + C31258 * C1011 - C31251 * C1019) *
                   C92226) *
                  C92188 * C92150 * C92136 * C98 +
              ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
                C31251 * C122 - C31258 * C112) *
                   C31334 +
               (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
                C31251 * C358 - C31258 * C352) *
                   C31252 +
               (C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
                C31251 * C1974 - C31258 * C1973) *
                   C31335 +
               (C31249 * C1018 - C31254 * C1010 + C31250 * C1019 -
                C31256 * C1011 + C31251 * C2204 - C31258 * C2203) *
                   C92226) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                C31251 * C118 - C31258 * C110) *
                   C31334 +
               (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
                C31251 * C356 - C31258 * C350) *
                   C31252 +
               (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
               (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
                  C92188 * C92150 * C790 +
              ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
               (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
               (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
               (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
                  C92188 * C92150 * C791 +
              ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C31334 +
               (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C31252 +
               (C31249 * C4820 - C31254 * C4815 + C31250 * C4818 -
                C31256 * C4814 + C31251 * C6488 - C31258 * C6487) *
                   C31335 +
               (C31249 * C5143 - C31254 * C5139 + C31250 * C5144 -
                C31256 * C5140 + C31251 * C6836 - C31258 * C6835) *
                   C92226) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
           (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
              C92188 * C1372 +
          ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
            C31258 * C1376 - C31251 * C1385) *
               C31334 +
           (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
            C31258 * C1591 - C31251 * C1599) *
               C31252 +
           (C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
            C31258 * C3359 - C31251 * C3365) *
               C31335 +
           (C31254 * C3587 - C31249 * C3591 + C31256 * C3588 - C31250 * C3592 +
            C31258 * C3589 - C31251 * C3593) *
               C92226) *
              C92188 * C1373 +
          ((C31249 * C1391 - C31254 * C1379 + C31250 * C1393 - C31256 * C1380 +
            C31251 * C1395 - C31258 * C1381) *
               C31334 +
           (C31249 * C1601 - C31254 * C1593 + C31250 * C1602 - C31256 * C1594 +
            C31251 * C1603 - C31258 * C1595) *
               C31252 +
           (C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
            C31251 * C11785 - C31258 * C11784) *
               C31335 +
           (C31249 * C5979 - C31254 * C5973 + C31250 * C5980 - C31256 * C5974 +
            C31251 * C12107 - C31258 * C12106) *
               C92226) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C92097 * C808 - C36262 * C797) * C36315 +
           (C92097 * C1016 - C36262 * C1008) * C36259 +
           (C92097 * C810 - C36262 * C798) * C36316 +
           (C92097 * C1020 - C36262 * C1012) * C36260 +
           (C92097 * C4820 - C36262 * C4815) * C36317 +
           (C92097 * C5143 - C36262 * C5139) * C36261) *
              C92188 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C36314 +
           (C36262 * C349 - C92097 * C355) * C36258 +
           (C36262 * C796 - C92097 * C806) * C36315 +
           (C36262 * C1009 - C92097 * C1017) * C36259 +
           (C36262 * C799 - C92097 * C812) * C36316 +
           (C36262 * C1013 - C92097 * C1021) * C36260 +
           (C36262 * C4814 - C92097 * C4818) * C36317 +
           (C36262 * C5140 - C92097 * C5144) * C36261) *
              C92188 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C36314 +
           (C92097 * C356 - C36262 * C350) * C36258 +
           (C92097 * C804 - C36262 * C795) * C36315 +
           (C92097 * C1018 - C36262 * C1010) * C36259 +
           (C92097 * C814 - C36262 * C800) * C36316 +
           (C92097 * C1022 - C36262 * C1014) * C36260 +
           (C92097 * C6488 - C36262 * C6487) * C36317 +
           (C92097 * C6836 - C36262 * C6835) * C36261) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C92150 * C790 +
          ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
           (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
           (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
           (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
              C92188 * C92150 * C791 +
          (C36943 * C36314 + C36944 * C36258 + C36945 * C36315 +
           C36946 * C36259 + (C36940 - C36939) * C36316 +
           (C36942 - C36941) * C36260 +
           (C92097 * C36723 - C36262 * C36722) * C36317 +
           (C92097 * C36925 - C36262 * C36924) * C36261) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C1372 +
          ((C36262 * C1378 - C92097 * C1389) * C36314 +
           (C36262 * C1589 - C92097 * C1597) * C36258 +
           (C36262 * C3357 - C92097 * C3361) * C36315 +
           (C36262 * C3587 - C92097 * C3591) * C36259 +
           (C36262 * C5702 - C92097 * C5709) * C36316 +
           (C36262 * C5971 - C92097 * C5977) * C36260 +
           (C36262 * C8454 - C92097 * C8456) * C36317 +
           (C36262 * C8800 - C92097 * C8802) * C36261) *
              C92188 * C1373 +
          ((C92097 * C1391 - C36262 * C1379) * C36314 +
           (C92097 * C1601 - C36262 * C1593) * C36258 +
           (C92097 * C5711 - C36262 * C5703) * C36315 +
           (C92097 * C5979 - C36262 * C5973) * C36259 +
           (C92097 * C5715 - C36262 * C5705) * C36316 +
           (C92097 * C5981 - C36262 * C5975) * C36260 +
           (C92097 * C37279 - C36262 * C37278) * C36317 +
           (C92097 * C37437 - C36262 * C37436) * C36261) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C31334 +
            (C92097 * C354 - C36262 * C348) * C31252 +
            (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
               C9422 +
           ((C92097 * C1389 - C36262 * C1378) * C31334 +
            (C92097 * C1597 - C36262 * C1589) * C31252 +
            (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
               C9423 +
           ((C92097 * C1391 - C36262 * C1379) * C31334 +
            (C92097 * C1601 - C36262 * C1593) * C31252 +
            (C92097 * C5711 - C36262 * C5703) * C31335 +
            (C92097 * C5979 - C36262 * C5973) * C92226) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C31334 +
            (C36262 * C349 - C92097 * C355) * C31252 +
            (C37983 - C37984) * C31335 + (C37985 - C37986) * C92226) *
               C9422 +
           ((C36262 * C1377 - C92097 * C1387) * C31334 +
            (C36262 * C1590 - C92097 * C1598) * C31252 +
            (C36262 * C3358 - C92097 * C3363) * C31335 +
            (C36262 * C3588 - C92097 * C3592) * C92226) *
               C9423 +
           ((C36262 * C1380 - C92097 * C1393) * C31334 +
            (C36262 * C1594 - C92097 * C1602) * C31252 +
            (C36262 * C5704 - C92097 * C5713) * C31335 +
            (C36262 * C5974 - C92097 * C5980) * C92226) *
               C9424) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C31334 +
            (C92097 * C356 - C36262 * C350) * C31252 +
            (C92097 * C804 - C36262 * C795) * C31335 +
            (C92097 * C1018 - C36262 * C1010) * C92226) *
               C9422 +
           ((C92097 * C1385 - C36262 * C1376) * C31334 +
            (C92097 * C1599 - C36262 * C1591) * C31252 +
            (C92097 * C3365 - C36262 * C3359) * C31335 +
            (C92097 * C3593 - C36262 * C3589) * C92226) *
               C9423 +
           ((C92097 * C1395 - C36262 * C1381) * C31334 +
            (C92097 * C1603 - C36262 * C1595) * C31252 +
            (C92097 * C11785 - C36262 * C11784) * C31335 +
            (C92097 * C12107 - C36262 * C12106) * C92226) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C31334 +
            (C92097 * C354 - C36262 * C348) * C31252 +
            (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
               C9422 +
           ((C92097 * C1389 - C36262 * C1378) * C31334 +
            (C92097 * C1597 - C36262 * C1589) * C31252 +
            (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
               C9423 +
           ((C92097 * C1391 - C36262 * C1379) * C31334 +
            (C92097 * C1601 - C36262 * C1593) * C31252 +
            (C40596 - C40597) * C31335 + (C40598 - C40599) * C92226) *
               C9424) *
              C92150 * C790 +
          (((C36928 - C36927) * C31334 + (C36930 - C36929) * C31252 +
            (C36932 - C36931) * C31335 + (C36934 - C36933) * C92226) *
               C9422 +
           ((C39227 - C39228) * C31334 + (C39229 - C39230) * C31252 +
            (C39231 - C39232) * C31335 + (C39233 - C39234) * C92226) *
               C9423 +
           ((C40597 - C40596) * C31334 + (C40599 - C40598) * C31252 +
            (C40600 - C40601) * C31335 + (C40602 - C40603) * C92226) *
               C9424) *
              C92150 * C791 +
          ((C36943 * C31334 + C36944 * C31252 + C36945 * C31335 +
            C36946 * C92226) *
               C9422 +
           ((C39232 - C39231) * C31334 + (C39234 - C39233) * C31252 +
            (C39236 - C39235) * C31335 + (C39238 - C39237) * C92226) *
               C9423 +
           ((C40601 - C40600) * C31334 + (C40603 - C40602) * C31252 +
            (C92097 * C37279 - C36262 * C37278) * C31335 +
            (C92097 * C37437 - C36262 * C37436) * C92226) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C31334 +
            (C92097 * C354 - C36262 * C348) * C31252 +
            (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
               C9422 +
           ((C41399 - C41400) * C31334 + (C41401 - C41402) * C31252 +
            (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
               C9423 +
           C41425 * C9424) *
              C1372 +
          (((C41400 - C41399) * C31334 + (C41402 - C41401) * C31252 +
            (C39227 - C39228) * C31335 + (C39229 - C39230) * C92226) *
               C9422 +
           ((C41404 - C41403) * C31334 + (C41406 - C41405) * C31252 +
            (C40597 - C40596) * C31335 + (C40599 - C40598) * C92226) *
               C9423 +
           ((C41409 - C41410) * C31334 + (C41411 - C41412) * C31252 +
            (C41413 - C41414) * C31335 + (C41415 - C41416) * C92226) *
               C9424) *
              C1373 +
          (C41425 * C9422 +
           ((C41410 - C41409) * C31334 + (C41412 - C41411) * C31252 +
            (C41414 - C41413) * C31335 + (C41416 - C41415) * C92226) *
               C9423 +
           ((C92097 * C10875 - C36262 * C10869) * C31334 +
            (C92097 * C11197 - C36262 * C11193) * C31252 +
            (C92097 * C41106 - C36262 * C41105) * C31335 +
            (C92097 * C41397 - C36262 * C41396) * C92226) *
               C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
                C31335 * C876 - C31589 * C797 - C31335 * C1008 +
                C92226 * C1077) *
                   C31249 +
               (C31627 + C31628) * C31250 + C31633 * C31251) *
                  C92188 * C92150 * C92136 * C97 -
              ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
               (C31628 + C31627) * C31249) *
                  C92188 * C92150 * C92136 * C98 +
              (C31633 * C31249 + (C31632 + C31631) * C31250 +
               (C31334 * C187 - C31588 * C112 - C31334 * C352 + C31252 * C415 +
                C31335 * C2043 - C31589 * C1973 - C31335 * C2203 +
                C92226 * C2271) *
                   C31251) *
                  C92188 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
                C31335 * C876 - C31589 * C797 - C31335 * C1008 +
                C92226 * C1077) *
                   C31249 +
               (C31627 + C31628) * C31250 + C31633 * C31251) *
                  C92188 * C92150 * C790 -
              ((C31335 * C882 - C31589 * C800 - C31335 * C1014 +
                C92226 * C1080 + C31334 * C878 - C31588 * C795 -
                C31334 * C1010 + C31252 * C1075) *
                   C31251 +
               (C31335 * C881 - C31589 * C799 - C31335 * C1013 +
                C92226 * C1079 + C31334 * C877 - C31588 * C796 -
                C31334 * C1009 + C31252 * C1076) *
                   C31250 +
               (C31335 * C880 - C31589 * C798 - C31335 * C1012 +
                C92226 * C1078 + C31334 * C876 - C31588 * C797 -
                C31334 * C1008 + C31252 * C1077) *
                   C31249) *
                  C92188 * C92150 * C791 +
              ((C31334 * C880 - C31588 * C798 - C31334 * C1012 +
                C31252 * C1078 + C31335 * C4948 - C31589 * C4815 -
                C31335 * C5139 + C92226 * C5252) *
                   C31249 +
               (C31334 * C881 - C31588 * C799 - C31334 * C1013 +
                C31252 * C1079 + C31335 * C4949 - C31589 * C4814 -
                C31335 * C5140 + C92226 * C5251) *
                   C31250 +
               (C31334 * C882 - C31588 * C800 - C31334 * C1014 +
                C31252 * C1080 + C31335 * C6617 - C31589 * C6487 -
                C31335 * C6835 + C92226 * C6951) *
                   C31251) *
                  C92188 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C1372 -
          ((C31335 * C3441 - C31589 * C3359 - C31335 * C3589 + C92226 * C3663 +
            C31334 * C1459 - C31588 * C1376 - C31334 * C1591 + C31252 * C1656) *
               C31251 +
           (C31335 * C3440 - C31589 * C3358 - C31335 * C3588 + C92226 * C3662 +
            C31334 * C1458 - C31588 * C1377 - C31334 * C1590 + C31252 * C1657) *
               C31250 +
           (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
            C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658) *
               C31249) *
              C92188 * C1373 +
          ((C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C31249 +
           (C31334 * C1462 - C31588 * C1380 - C31334 * C1594 + C31252 * C1660 +
            C31335 * C5803 - C31589 * C5704 - C31335 * C5974 + C92226 * C6061) *
               C31250 +
           (C31334 * C1463 - C31588 * C1381 - C31334 * C1595 + C31252 * C1661 +
            C31335 * C11886 - C31589 * C11784 - C31335 * C12106 +
            C92226 * C12206) *
               C31251) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C92136 * C97 -
          (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
           C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
           C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
           C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
              C92097 * C92188 * C92150 * C92136 * C98 +
          (C36314 * C185 - C36468 * C110 - C36314 * C350 + C36258 * C413 +
           C36315 * C878 - C36469 * C795 - C36315 * C1010 + C36259 * C1075 +
           C36316 * C882 - C36470 * C800 - C36316 * C1014 + C36260 * C1080 +
           C36317 * C6617 - C36471 * C6487 - C36317 * C6835 + C36261 * C6951) *
              C92097 * C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C790 -
          (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
           C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
           C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
           C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
              C92097 * C92188 * C92150 * C791 +
          (C36314 * C880 - C36468 * C798 - C36314 * C1012 + C36258 * C1078 +
           C36315 * C4948 - C36469 * C4815 - C36315 * C5139 + C36259 * C5252 +
           C36316 * C4950 - C36470 * C4816 - C36316 * C5141 + C36260 * C5253 +
           C36317 * C36808 - C36471 * C36722 - C36317 * C36924 +
           C36261 * C36996) *
              C92097 * C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C1372 -
          (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
           C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
           C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
           C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
              C92097 * C92188 * C1373 +
          (C36314 * C1461 - C36468 * C1379 - C36314 * C1593 + C36258 * C1659 +
           C36315 * C5801 - C36469 * C5703 - C36315 * C5973 + C36259 * C6059 +
           C36316 * C5802 - C36470 * C5705 - C36316 * C5975 + C36260 * C6060 +
           C36317 * C37332 - C36471 * C37278 - C36317 * C37436 +
           C36261 * C37488) *
              C92097 * C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C92097 * C9422 +
           (C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658 +
            C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661) *
               C92097 * C9423 +
           (C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C92097 * C9424) *
              C92150 * C92136 * C97 -
          ((C31335 * C5803 - C31589 * C5704 - C31335 * C5974 + C92226 * C6061 +
            C31334 * C1462 - C31588 * C1380 - C31334 * C1594 + C31252 * C1660) *
               C92097 * C9424 +
           (C34881 + C34882) * C92097 * C9423 +
           (C31628 + C31627) * C92097 * C9422) *
              C92150 * C92136 * C98 +
          (C31633 * C92097 * C9422 + (C34880 + C34879) * C92097 * C9423 +
           (C31334 * C1463 - C31588 * C1381 - C31334 * C1595 + C31252 * C1661 +
            C31335 * C11886 - C31589 * C11784 - C31335 * C12106 +
            C92226 * C12206) *
               C92097 * C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C92097 * C9422 +
           (C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658 +
            C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661) *
               C92097 * C9423 +
           (C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C92097 * C9424) *
              C92150 * C790 -
          ((C31335 * C5802 - C31589 * C5705 - C31335 * C5975 + C92226 * C6060 +
            C31334 * C5801 - C31588 * C5703 - C31334 * C5973 + C31252 * C6059) *
               C92097 * C9424 +
           (C31335 * C5799 - C31589 * C5702 - C31335 * C5971 + C92226 * C6058 +
            C31334 * C3439 - C31588 * C3357 - C31334 * C3587 + C31252 * C3661) *
               C92097 * C9423 +
           (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
            C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
               C92097 * C9422) *
              C92150 * C791 +
          ((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
            C31335 * C4948 - C31589 * C4815 - C31335 * C5139 + C92226 * C5252) *
               C92097 * C9422 +
           (C31334 * C5799 - C31588 * C5702 - C31334 * C5971 + C31252 * C6058 +
            C31335 * C8588 - C31589 * C8454 - C31335 * C8800 + C92226 * C8918) *
               C92097 * C9423 +
           (C31334 * C5802 - C31588 * C5705 - C31334 * C5975 + C31252 * C6060 +
            C31335 * C37332 - C31589 * C37278 - C31335 * C37436 +
            C92226 * C37488) *
               C92097 * C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C92097 * C9422 +
           (C41537 + C41538) * C92097 * C9423 + C41544 * C9424) *
              C1372 -
          ((C41541 + C41542) * C92097 * C9424 +
           (C41540 + C41539) * C92097 * C9423 +
           (C41538 + C41537) * C92097 * C9422) *
              C1373 +
          (C41544 * C9422 + (C41542 + C41541) * C92097 * C9423 +
           (C31334 * C11002 - C31588 * C10869 - C31334 * C11193 +
            C31252 * C11308 + C31335 * C41211 - C31589 * C41105 -
            C31335 * C41396 + C92226 * C41499) *
               C92097 * C9424) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C31334 +
                (C92188 * C495 - C265 * C348) * C31252 +
                (C5039 - C5040) * C31335 + (C5334 - C5335) * C92226) *
                   C31249 +
               ((C279 - C280) * C31334 + (C502 - C503) * C31252 +
                C6732 * C31335 + C7073 * C92226) *
                   C31250 +
               C31714 * C31251) *
                  C92150 * C92136 * C97 +
              (((C280 - C279) * C31334 + (C503 - C502) * C31252 +
                C6734 * C31335 + C7074 * C92226) *
                   C31249 +
               ((C284 - C283) * C31334 + (C506 - C505) * C31252 +
                C17152 * C31335 + C17488 * C92226) *
                   C31250 +
               ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
                (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
                   C31251) *
                  C92150 * C92136 * C98 +
              (C31714 * C31249 +
               (C297 * C31334 + C513 * C31252 + (C2135 - C2134) * C31335 +
                (C2366 - C2365) * C92226) *
                   C31250 +
               ((C292 - C291) * C31334 + (C511 - C510) * C31252 +
                (C92188 * C2123 - C265 * C1973) * C31335 +
                (C92188 * C2359 - C265 * C2203) * C92226) *
                   C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92188 * C266 - C265 * C108) * C31334 +
                (C92188 * C495 - C265 * C348) * C31252 +
                (C5039 - C5040) * C31335 + (C5334 - C5335) * C92226) *
                   C31249 +
               ((C279 - C280) * C31334 + (C502 - C503) * C31252 +
                C6732 * C31335 + C7073 * C92226) *
                   C31250 +
               C31714 * C31251) *
                  C92150 * C790 +
              (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
                (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
                   C31249 +
               (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 +
                C7075 * C92226) *
                   C31250 +
               (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
                (C4485 - C4486) * C92226) *
                   C31251) *
                  C92150 * C791 +
              ((C5057 * C31334 + C5343 * C31252 + (C5050 - C5049) * C31335 +
                (C5340 - C5339) * C92226) *
                   C31249 +
               (C5047 * C31334 + C5338 * C31252 + (C5054 - C5053) * C31335 +
                (C5342 - C5341) * C92226) *
                   C31250 +
               ((C4213 - C4212) * C31334 + (C4486 - C4485) * C31252 +
                (C92188 * C6729 - C265 * C6487) * C31335 +
                (C92188 * C7071 - C265 * C6835) * C92226) *
                   C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C31334 +
            (C265 * C1589 - C92188 * C1713) * C31252 +
            (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
               C31249 +
           ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
            (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
               C31250 +
           ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
            (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
               C31251) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C31334 +
            (C92188 * C1717 - C265 * C1593) * C31252 +
            (C92188 * C5887 - C265 * C5703) * C31335 +
            (C92188 * C6139 - C265 * C5973) * C92226) *
               C31249 +
           ((C92188 * C1528 - C265 * C1380) * C31334 +
            (C92188 * C1718 - C265 * C1594) * C31252 +
            (C92188 * C5888 - C265 * C5704) * C31335 +
            (C92188 * C6141 - C265 * C5974) * C92226) *
               C31250 +
           ((C92188 * C1529 - C265 * C1381) * C31334 +
            (C92188 * C1719 - C265 * C1595) * C31252 +
            (C92188 * C11994 - C265 * C11784) * C31335 +
            (C92188 * C12319 - C265 * C12106) * C92226) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           (C5050 - C5049) * C36317 + (C5340 - C5339) * C36261) *
              C92097 * C92150 * C92136 * C97 +
          ((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
           C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
           (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
              C92097 * C92150 * C92136 * C98 +
          (C295 * C36314 + C512 * C36258 + C14887 * C36315 + C15159 * C36259 +
           (C4213 - C4212) * C36316 + (C4486 - C4485) * C36260 +
           (C92188 * C6729 - C265 * C6487) * C36317 +
           (C92188 * C7071 - C265 * C6835) * C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C92150 * C790 +
          ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
           (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
           (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
           (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
              C92097 * C92150 * C791 +
          (C5057 * C36314 + C5343 * C36258 + C36865 * C36315 + C37049 * C36259 +
           (C36868 - C36867) * C36316 + (C37051 - C37050) * C36260 +
           (C92188 * C36860 - C265 * C36722) * C36317 +
           (C92188 * C37047 - C265 * C36924) * C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C1372 +
          ((C265 * C1378 - C92188 * C1523) * C36314 +
           (C265 * C1589 - C92188 * C1713) * C36258 + (C8695 - C8696) * C36315 +
           (C9021 - C9022) * C36259 + (C8699 - C8700) * C36316 +
           (C9023 - C9024) * C36260 + (C265 * C8454 - C92188 * C8690) * C36317 +
           (C265 * C8800 - C92188 * C9018) * C36261) *
              C92097 * C1373 +
          ((C92188 * C1527 - C265 * C1379) * C36314 +
           (C92188 * C1717 - C265 * C1593) * C36258 +
           (C92188 * C5887 - C265 * C5703) * C36315 +
           (C92188 * C6139 - C265 * C5973) * C36259 +
           (C92188 * C5889 - C265 * C5705) * C36316 +
           (C92188 * C6140 - C265 * C5975) * C36260 +
           (C92188 * C37384 - C265 * C37278) * C36317 +
           (C92188 * C37539 - C265 * C37436) * C36261) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C31334 +
           (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
            C9424 * C1717 - C9583 * C1593) *
               C31252 +
           (C9422 * C942 - C9581 * C797 + C9423 * C3513 - C9582 * C3357 +
            C9424 * C5887 - C9583 * C5703) *
               C31335 +
           (C9422 * C1132 - C9581 * C1008 + C9423 * C3731 - C9582 * C3587 +
            C9424 * C6139 - C9583 * C5973) *
               C92226) *
              C92097 * C92150 * C92136 * C97 +
          ((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C31334 +
           (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C31252 +
           (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C31335 +
           (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92226) *
              C92097 * C92150 * C92136 * C98 +
          ((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C31334 +
           (C9852 - C9851 + C9854 - C9853 + C9856 - C9855) * C31252 +
           (C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
            C9424 * C11994 - C9583 * C11784) *
               C31335 +
           (C9422 * C1134 - C9581 * C1010 + C9423 * C3733 - C9582 * C3589 +
            C9424 * C12319 - C9583 * C12106) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C31334 +
           (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
            C9424 * C1717 - C9583 * C1593) *
               C31252 +
           (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
           (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
              C92097 * C92150 * C790 +
          ((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C31334 +
           (C40753 - C40752 + C40755 - C40754 + C40757 - C40756) * C31252 +
           (C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C31335 +
           (C40758 - C40759 + C40760 - C40761 + C40762 - C40763) * C92226) *
              C92097 * C92150 * C791 +
          ((C40511 - C40510 + C40513 - C40512 + C40515 - C40514) * C31334 +
           (C40759 - C40758 + C40761 - C40760 + C40763 - C40762) * C31252 +
           (C9422 * C5030 - C9581 * C4815 + C9423 * C8690 - C9582 * C8454 +
            C9424 * C37384 - C9583 * C37278) *
               C31335 +
           (C9422 * C5329 - C9581 * C5139 + C9423 * C9018 - C9582 * C8800 +
            C9424 * C37539 - C9583 * C37436) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C31334 +
           (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
            C9424 * C1717 - C9583 * C1593) *
               C31252 +
           (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
           (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
              C92097 * C1372 +
          ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
            C9583 * C10868 - C9424 * C11109) *
               C31334 +
           (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
            C9583 * C11191 - C9424 * C11419) *
               C31252 +
           (C9581 * C3357 - C9422 * C3513 + C9582 * C5703 - C9423 * C5887 +
            C9583 * C13749 - C9424 * C13979) *
               C31335 +
           (C9581 * C3587 - C9422 * C3731 + C9582 * C5973 - C9423 * C6139 +
            C9583 * C14081 - C9424 * C14309) *
               C92226) *
              C92097 * C1373 +
          ((C9422 * C1527 - C9581 * C1379 + C9423 * C11109 - C9582 * C10868 +
            C9424 * C11111 - C9583 * C10869) *
               C31334 +
           (C9422 * C1717 - C9581 * C1593 + C9423 * C11419 - C9582 * C11191 +
            C9424 * C11421 - C9583 * C11193) *
               C31252 +
           (C9422 * C5887 - C9581 * C5703 + C9423 * C13979 - C9582 * C13749 +
            C9424 * C41320 - C9583 * C41105) *
               C31335 +
           (C9422 * C6139 - C9581 * C5973 + C9423 * C14309 - C9582 * C14081 +
            C9424 * C41618 - C9583 * C41396) *
               C92226) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                 C31251 * C118 - C31258 * C110) *
                    C265 +
                (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
                 C31251 * C575 - C31258 * C569) *
                    C92188) *
                   C31252 +
               ((C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
                 C31251 * C804 - C31258 * C795) *
                    C265 +
                (C31249 * C1198 - C31254 * C1190 + C31250 * C1199 -
                 C31256 * C1191 + C31251 * C1200 - C31258 * C1192) *
                    C92188) *
                   C92226) *
                  C92150 * C92136 * C97 +
              (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
                 C31258 * C111 - C31251 * C120) *
                    C265 +
                (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
                 C31258 * C570 - C31251 * C576) *
                    C92188) *
                   C31252 +
               ((C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
                 C31258 * C794 - C31251 * C802) *
                    C265 +
                (C31254 * C1191 - C31249 * C1199 + C31256 * C1192 -
                 C31250 * C1200 + C31258 * C1193 - C31251 * C1201) *
                    C92188) *
                   C92226) *
                  C92150 * C92136 * C98 +
              (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
                 C31251 * C122 - C31258 * C112) *
                    C265 +
                (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
                 C31251 * C577 - C31258 * C571) *
                    C92188) *
                   C31252 +
               ((C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
                 C31251 * C1974 - C31258 * C1973) *
                    C265 +
                (C31249 * C1200 - C31254 * C1192 + C31250 * C1201 -
                 C31256 * C1193 + C31251 * C2433 - C31258 * C2432) *
                    C92188) *
                   C92226) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                 C31251 * C118 - C31258 * C110) *
                    C265 +
                (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
                 C31251 * C575 - C31258 * C569) *
                    C92188) *
                   C31252 +
               ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
                (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) *
                    C92188) *
                   C92226) *
                  C92150 * C790 +
              (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
                (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) *
                    C92188) *
                   C31252 +
               ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
                (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) *
                    C92188) *
                   C92226) *
                  C92150 * C791 +
              (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C265 +
                (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) *
                    C92188) *
                   C31252 +
               ((C31249 * C4820 - C31254 * C4815 + C31250 * C4818 -
                 C31256 * C4814 + C31251 * C6488 - C31258 * C6487) *
                    C265 +
                (C31249 * C5421 - C31254 * C5417 + C31250 * C5422 -
                 C31256 * C5418 + C31251 * C7174 - C31258 * C7173) *
                    C92188) *
                   C92226) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
            (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
               C92226) *
              C1372 +
          (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C265 +
            (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 - C31250 * C1780 +
             C31258 * C1773 - C31251 * C1781) *
                C92188) *
               C31252 +
           ((C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
             C31258 * C3359 - C31251 * C3365) *
                C265 +
            (C31254 * C3801 - C31249 * C3805 + C31256 * C3802 - C31250 * C3806 +
             C31258 * C3803 - C31251 * C3807) *
                C92188) *
               C92226) *
              C1373 +
          (((C31249 * C1391 - C31254 * C1379 + C31250 * C1393 - C31256 * C1380 +
             C31251 * C1395 - C31258 * C1381) *
                C265 +
            (C31249 * C1783 - C31254 * C1775 + C31250 * C1784 - C31256 * C1776 +
             C31251 * C1785 - C31258 * C1777) *
                C92188) *
               C31252 +
           ((C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
             C31251 * C11785 - C31258 * C11784) *
                C265 +
            (C31249 * C6225 - C31254 * C6219 + C31250 * C6226 - C31256 * C6220 +
             C31251 * C12425 - C31258 * C12424) *
                C92188) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C92097 * C808 - C36262 * C797) * C265 +
            (C92097 * C1198 - C36262 * C1190) * C92188) *
               C36259 +
           ((C92097 * C810 - C36262 * C798) * C265 +
            (C92097 * C1202 - C36262 * C1194) * C92188) *
               C36260 +
           ((C92097 * C4820 - C36262 * C4815) * C265 +
            (C92097 * C5421 - C36262 * C5417) * C92188) *
               C36261) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C265 +
            (C36262 * C568 - C92097 * C574) * C92188) *
               C36258 +
           ((C36262 * C796 - C92097 * C806) * C265 +
            (C36262 * C1191 - C92097 * C1199) * C92188) *
               C36259 +
           ((C36262 * C799 - C92097 * C812) * C265 +
            (C36262 * C1195 - C92097 * C1203) * C92188) *
               C36260 +
           ((C36262 * C4814 - C92097 * C4818) * C265 +
            (C36262 * C5418 - C92097 * C5422) * C92188) *
               C36261) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C265 +
            (C92097 * C575 - C36262 * C569) * C92188) *
               C36258 +
           ((C92097 * C804 - C36262 * C795) * C265 +
            (C92097 * C1200 - C36262 * C1192) * C92188) *
               C36259 +
           ((C92097 * C814 - C36262 * C800) * C265 +
            (C92097 * C1204 - C36262 * C1196) * C92188) *
               C36260 +
           ((C92097 * C6488 - C36262 * C6487) * C265 +
            (C92097 * C7174 - C36262 * C7173) * C92188) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C92150 * C790 +
          (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
           ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
           ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
           ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
              C92150 * C791 +
          (C37118 * C36258 + C37119 * C36259 +
           ((C36940 - C36939) * C265 + (C37113 - C37112) * C92188) * C36260 +
           ((C92097 * C36723 - C36262 * C36722) * C265 +
            (C92097 * C37102 - C36262 * C37101) * C92188) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C1372 +
          (((C36262 * C1378 - C92097 * C1389) * C265 +
            (C36262 * C1771 - C92097 * C1779) * C92188) *
               C36258 +
           ((C36262 * C3357 - C92097 * C3361) * C265 +
            (C36262 * C3801 - C92097 * C3805) * C92188) *
               C36259 +
           ((C36262 * C5702 - C92097 * C5709) * C265 +
            (C36262 * C6217 - C92097 * C6223) * C92188) *
               C36260 +
           ((C36262 * C8454 - C92097 * C8456) * C265 +
            (C36262 * C9122 - C92097 * C9124) * C92188) *
               C36261) *
              C1373 +
          (((C92097 * C1391 - C36262 * C1379) * C265 +
            (C92097 * C1783 - C36262 * C1775) * C92188) *
               C36258 +
           ((C92097 * C5711 - C36262 * C5703) * C265 +
            (C92097 * C6225 - C36262 * C6219) * C92188) *
               C36259 +
           ((C92097 * C5715 - C36262 * C5705) * C265 +
            (C92097 * C6227 - C36262 * C6221) * C92188) *
               C36260 +
           ((C92097 * C37279 - C36262 * C37278) * C265 +
            (C92097 * C37591 - C36262 * C37590) * C92188) *
               C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C9581 +
            (C92097 * C573 - C36262 * C567) * C9422 +
            (C92097 * C1389 - C36262 * C1378) * C9582 +
            (C92097 * C1779 - C36262 * C1771) * C9423 +
            (C92097 * C1391 - C36262 * C1379) * C9583 +
            (C92097 * C1783 - C36262 * C1775) * C9424) *
               C31252 +
           ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
            (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
            (C92097 * C5711 - C36262 * C5703) * C9583 +
            (C92097 * C6225 - C36262 * C6219) * C9424) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C9581 +
            (C36262 * C568 - C92097 * C574) * C9422 +
            (C36262 * C1377 - C92097 * C1387) * C9582 +
            (C36262 * C1772 - C92097 * C1780) * C9423 +
            (C36262 * C1380 - C92097 * C1393) * C9583 +
            (C36262 * C1776 - C92097 * C1784) * C9424) *
               C31252 +
           ((C37983 - C37984) * C9581 + (C38193 - C38194) * C9422 +
            (C36262 * C3358 - C92097 * C3363) * C9582 +
            (C36262 * C3802 - C92097 * C3806) * C9423 +
            (C36262 * C5704 - C92097 * C5713) * C9583 +
            (C36262 * C6220 - C92097 * C6226) * C9424) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C9581 +
            (C92097 * C575 - C36262 * C569) * C9422 +
            (C92097 * C1385 - C36262 * C1376) * C9582 +
            (C92097 * C1781 - C36262 * C1773) * C9423 +
            (C92097 * C1395 - C36262 * C1381) * C9583 +
            (C92097 * C1785 - C36262 * C1777) * C9424) *
               C31252 +
           ((C92097 * C804 - C36262 * C795) * C9581 +
            (C92097 * C1200 - C36262 * C1192) * C9422 +
            (C92097 * C3365 - C36262 * C3359) * C9582 +
            (C92097 * C3807 - C36262 * C3803) * C9423 +
            (C92097 * C11785 - C36262 * C11784) * C9583 +
            (C92097 * C12425 - C36262 * C12424) * C9424) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C9581 +
            (C92097 * C573 - C36262 * C567) * C9422 +
            (C92097 * C1389 - C36262 * C1378) * C9582 +
            (C92097 * C1779 - C36262 * C1771) * C9423 +
            (C92097 * C1391 - C36262 * C1379) * C9583 +
            (C92097 * C1783 - C36262 * C1775) * C9424) *
               C31252 +
           ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
            (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
            (C40596 - C40597) * C9583 + (C40838 - C40839) * C9424) *
               C92226) *
              C92150 * C790 +
          (((C36928 - C36927) * C9581 + (C37105 - C37104) * C9422 +
            (C39227 - C39228) * C9582 + (C39443 - C39444) * C9423 +
            (C40597 - C40596) * C9583 + (C40839 - C40838) * C9424) *
               C31252 +
           ((C36932 - C36931) * C9581 + (C37108 - C37107) * C9422 +
            (C39231 - C39232) * C9582 + (C39445 - C39446) * C9423 +
            (C40600 - C40601) * C9583 + (C40840 - C40841) * C9424) *
               C92226) *
              C92150 * C791 +
          ((C36943 * C9581 + C37114 * C9422 + (C39232 - C39231) * C9582 +
            (C39446 - C39445) * C9423 + (C40601 - C40600) * C9583 +
            (C40841 - C40840) * C9424) *
               C31252 +
           (C36945 * C9581 + C37115 * C9422 + (C39236 - C39235) * C9582 +
            (C39448 - C39447) * C9423 +
            (C92097 * C37279 - C36262 * C37278) * C9583 +
            (C92097 * C37591 - C36262 * C37590) * C9424) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C9581 +
            (C92097 * C573 - C36262 * C567) * C9422 +
            (C41399 - C41400) * C9582 + (C41696 - C41697) * C9423 +
            C41417 * C9583 + C41705 * C9424) *
               C31252 +
           ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
            (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
            C41407 * C9583 + C41700 * C9424) *
               C92226) *
              C1372 +
          (((C41400 - C41399) * C9581 + (C41697 - C41696) * C9422 +
            (C41404 - C41403) * C9582 + (C41699 - C41698) * C9423 +
            (C41409 - C41410) * C9583 + (C41701 - C41702) * C9424) *
               C31252 +
           ((C39227 - C39228) * C9581 + (C39443 - C39444) * C9422 +
            (C40597 - C40596) * C9582 + (C40839 - C40838) * C9423 +
            (C41413 - C41414) * C9583 + (C41703 - C41704) * C9424) *
               C92226) *
              C1373 +
          ((C41417 * C9581 + C41705 * C9422 + (C41410 - C41409) * C9582 +
            (C41702 - C41701) * C9423 +
            (C92097 * C10875 - C36262 * C10869) * C9583 +
            (C92097 * C11503 - C36262 * C11499) * C9424) *
               C31252 +
           (C41407 * C9581 + C41700 * C9422 + (C41414 - C41413) * C9582 +
            (C41704 - C41703) * C9423 +
            (C92097 * C41106 - C36262 * C41105) * C9583 +
            (C92097 * C41694 - C36262 * C41693) * C9424) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31252 * C183 - C31334 * C108 + C92226 * C876 -
                 C31335 * C797) *
                    C265 +
                (C31252 * C629 - C31334 * C567 + C92226 * C1256 -
                 C31335 * C1190) *
                    C92188) *
                   C31249 +
               ((C31337 - C31338 + C31339 - C31340) * C265 +
                (C31863 - C31864 + C31865 - C31866) * C92188) *
                   C31250 +
               C31880 * C31251) *
                  C92150 * C92136 * C97 +
              (((C31338 - C31337 + C31340 - C31339) * C265 +
                (C31864 - C31863 + C31866 - C31865) * C92188) *
                   C31249 +
               ((C31346 - C31345 + C31348 - C31347) * C265 +
                (C31869 - C31868 + C31871 - C31870) * C92188) *
                   C31250 +
               ((C31353 - C31354 + C31355 - C31356) * C265 +
                (C31872 - C31873 + C31874 - C31875) * C92188) *
                   C31251) *
                  C92150 * C92136 * C98 +
              (C31880 * C31249 +
               ((C31354 - C31353 + C31356 - C31355) * C265 +
                (C31873 - C31872 + C31875 - C31874) * C92188) *
                   C31250 +
               ((C31252 * C187 - C31334 * C112 + C92226 * C2043 -
                 C31335 * C1973) *
                    C265 +
                (C31252 * C633 - C31334 * C571 + C92226 * C2500 -
                 C31335 * C2432) *
                    C92188) *
                   C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31252 * C183 - C31334 * C108 + C92226 * C876 -
                 C31335 * C797) *
                    C265 +
                (C31252 * C629 - C31334 * C567 + C92226 * C1256 -
                 C31335 * C1190) *
                    C92188) *
                   C31249 +
               ((C31337 - C31338 + C31339 - C31340) * C265 +
                (C31863 - C31864 + C31865 - C31866) * C92188) *
                   C31250 +
               C31880 * C31251) *
                  C92150 * C790 +
              (((C31334 * C797 - C31252 * C876 + C31335 * C798 -
                 C92226 * C880) *
                    C265 +
                (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
                 C92226 * C1260) *
                    C92188) *
                   C31249 +
               ((C31334 * C796 - C31252 * C877 + C31335 * C799 -
                 C92226 * C881) *
                    C265 +
                (C31334 * C1191 - C31252 * C1257 + C31335 * C1195 -
                 C92226 * C1261) *
                    C92188) *
                   C31250 +
               ((C31334 * C795 - C31252 * C878 + C31335 * C800 -
                 C92226 * C882) *
                    C265 +
                (C31334 * C1192 - C31252 * C1258 + C31335 * C1196 -
                 C92226 * C1262) *
                    C92188) *
                   C31251) *
                  C92150 * C791 +
              (((C31252 * C880 - C31334 * C798 + C92226 * C4948 -
                 C31335 * C4815) *
                    C265 +
                (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
                 C31335 * C5417) *
                    C92188) *
                   C31249 +
               ((C31252 * C881 - C31334 * C799 + C92226 * C4949 -
                 C31335 * C4814) *
                    C265 +
                (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
                 C31335 * C5418) *
                    C92188) *
                   C31250 +
               ((C31252 * C882 - C31334 * C800 + C92226 * C6617 -
                 C31335 * C6487) *
                    C265 +
                (C31252 * C1262 - C31334 * C1196 + C92226 * C7281 -
                 C31335 * C7173) *
                    C92188) *
                   C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C1372 +
          (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C265 +
            (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
             C92226 * C3875) *
                C92188) *
               C31249 +
           ((C31334 * C1377 - C31252 * C1458 + C31335 * C3358 -
             C92226 * C3440) *
                C265 +
            (C31334 * C1772 - C31252 * C1838 + C31335 * C3802 -
             C92226 * C3876) *
                C92188) *
               C31250 +
           ((C31334 * C1376 - C31252 * C1459 + C31335 * C3359 -
             C92226 * C3441) *
                C265 +
            (C31334 * C1773 - C31252 * C1839 + C31335 * C3803 -
             C92226 * C3877) *
                C92188) *
               C31251) *
              C1373 +
          (((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C265 +
            (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 -
             C31335 * C6219) *
                C92188) *
               C31249 +
           ((C31252 * C1462 - C31334 * C1380 + C92226 * C5803 -
             C31335 * C5704) *
                C265 +
            (C31252 * C1842 - C31334 * C1776 + C92226 * C6307 -
             C31335 * C6220) *
                C92188) *
               C31250 +
           ((C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
             C31335 * C11784) *
                C265 +
            (C31252 * C1843 - C31334 * C1777 + C92226 * C12524 -
             C31335 * C12424) *
                C92188) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C265 +
           (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
            C36316 * C1195 - C36260 * C1261 + C36317 * C5418 - C36261 * C5518) *
               C92188) *
              C92097 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C265 +
           (C36258 * C631 - C36314 * C569 + C36259 * C1258 - C36315 * C1192 +
            C36260 * C1262 - C36316 * C1196 + C36261 * C7281 - C36317 * C7173) *
               C92188) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C265 +
           (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
            C36316 * C5417 - C36260 * C5517 + C36317 * C5419 - C36261 * C5519) *
               C92188) *
              C92097 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C265 +
           (C36258 * C1260 - C36314 * C1194 + C36259 * C5517 - C36315 * C5417 +
            C36260 * C5519 - C36316 * C5419 + C36261 * C37169 -
            C36317 * C37101) *
               C92188) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C1372 +
          ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
            C36316 * C5702 - C36260 * C5799 + C36317 * C8454 - C36261 * C8588) *
               C265 +
           (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
            C36316 * C6217 - C36260 * C6303 + C36317 * C9122 - C36261 * C9232) *
               C92188) *
              C92097 * C1373 +
          ((C36258 * C1461 - C36314 * C1379 + C36259 * C5801 - C36315 * C5703 +
            C36260 * C5802 - C36316 * C5705 + C36261 * C37332 -
            C36317 * C37278) *
               C265 +
           (C36258 * C1841 - C36314 * C1775 + C36259 * C6305 - C36315 * C6219 +
            C36260 * C6306 - C36316 * C6221 + C36261 * C37642 -
            C36317 * C37590) *
               C92188) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C9581 +
           (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
               C9422 +
           (C31252 * C1457 - C31334 * C1378 + C92226 * C3439 - C31335 * C3357) *
               C9582 +
           (C31252 * C1837 - C31334 * C1771 + C92226 * C3875 - C31335 * C3801) *
               C9423 +
           (C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C9583 +
           (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 - C31335 * C6219) *
               C9424) *
              C92097 * C92150 * C92136 * C97 +
          ((C31338 - C31337 + C31340 - C31339) * C9581 +
           (C31864 - C31863 + C31866 - C31865) * C9422 +
           (C34545 - C34546 + C34547 - C34548) * C9582 +
           (C35177 - C35178 + C35179 - C35180) * C9423 +
           (C31334 * C1380 - C31252 * C1462 + C31335 * C5704 - C92226 * C5803) *
               C9583 +
           (C31334 * C1776 - C31252 * C1842 + C31335 * C6220 - C92226 * C6307) *
               C9424) *
              C92097 * C92150 * C92136 * C98 +
          (C31365 * C9581 + C31878 * C9422 +
           (C34554 - C34553 + C34556 - C34555) * C9582 +
           (C35182 - C35181 + C35184 - C35183) * C9423 +
           (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
            C31335 * C11784) *
               C9583 +
           (C31252 * C1843 - C31334 * C1777 + C92226 * C12524 -
            C31335 * C12424) *
               C9424) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C9581 +
           (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
               C9422 +
           (C31252 * C1457 - C31334 * C1378 + C92226 * C3439 - C31335 * C3357) *
               C9582 +
           (C31252 * C1837 - C31334 * C1771 + C92226 * C3875 - C31335 * C3801) *
               C9423 +
           (C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C9583 +
           (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 - C31335 * C6219) *
               C9424) *
              C92097 * C92150 * C790 +
          ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
               C9581 +
           (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 - C92226 * C1260) *
               C9422 +
           (C31334 * C3357 - C31252 * C3439 + C31335 * C5702 - C92226 * C5799) *
               C9582 +
           (C31334 * C3801 - C31252 * C3875 + C31335 * C6217 - C92226 * C6303) *
               C9423 +
           (C31334 * C5703 - C31252 * C5801 + C31335 * C5705 - C92226 * C5802) *
               C9583 +
           (C31334 * C6219 - C31252 * C6305 + C31335 * C6221 - C92226 * C6306) *
               C9424) *
              C92097 * C92150 * C791 +
          ((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
               C9581 +
           (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 - C31335 * C5417) *
               C9422 +
           (C31252 * C5799 - C31334 * C5702 + C92226 * C8588 - C31335 * C8454) *
               C9582 +
           (C31252 * C6303 - C31334 * C6217 + C92226 * C9232 - C31335 * C9122) *
               C9423 +
           (C31252 * C5802 - C31334 * C5705 + C92226 * C37332 -
            C31335 * C37278) *
               C9583 +
           (C31252 * C6306 - C31334 * C6221 + C92226 * C37642 -
            C31335 * C37590) *
               C9424) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C9581 +
           (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
               C9422 +
           (C41214 - C41215 + C41216 - C41217) * C9582 +
           (C41781 - C41782 + C41783 - C41784) * C9423 + C41242 * C9583 +
           C41795 * C9424) *
              C92097 * C1372 +
          ((C41215 - C41214 + C41217 - C41216) * C9581 +
           (C41782 - C41781 + C41784 - C41783) * C9422 +
           (C41223 - C41222 + C41225 - C41224) * C9582 +
           (C41786 - C41785 + C41788 - C41787) * C9423 +
           (C41230 - C41231 + C41232 - C41233) * C9583 +
           (C41789 - C41790 + C41791 - C41792) * C9424) *
              C92097 * C1373 +
          (C41242 * C9581 + C41795 * C9422 +
           (C41231 - C41230 + C41233 - C41232) * C9582 +
           (C41790 - C41789 + C41792 - C41791) * C9423 +
           (C31252 * C11002 - C31334 * C10869 + C92226 * C41211 -
            C31335 * C41105) *
               C9583 +
           (C31252 * C11596 - C31334 * C11499 + C92226 * C41779 -
            C31335 * C41693) *
               C9424) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                    C31252 +
                C5624 * C92226) *
                   C31249 +
               (C31955 + C31956) * C31250 + C31961 * C31251) *
                  C92150 * C92136 * C97 -
              ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
               (C31956 + C31955) * C31249) *
                  C92150 * C92136 * C98 +
              (C31961 * C31249 + (C31960 + C31959) * C31250 +
               (C736 * C31252 +
                (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                    C92226) *
                   C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                    C31252 +
                C5624 * C92226) *
                   C31249 +
               (C31955 + C31956) * C31250 + C31961 * C31251) *
                  C92150 * C790 -
              ((C4738 * C92226 + C2594 * C31252) * C31251 +
               (C4737 * C92226 + C2595 * C31252) * C31250 +
               (C5625 * C92226 + C5624 * C31252) * C31249) *
                  C92150 * C791 +
              ((C5625 * C31252 + C5627 * C92226) * C31249 +
               (C4737 * C31252 + C5626 * C92226) * C31250 +
               (C4738 * C31252 +
                (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                    C92226) *
                   C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C1372 -
          ((C18750 * C92226 + C3287 * C31252) * C31251 +
           (C8354 * C92226 + C3288 * C31252) * C31250 +
           (C9348 * C92226 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C31252) *
               C31249) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C31252 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C92226) *
               C31249 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C31252 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C92226) *
               C31250 +
           ((C265 * C1529 - C701 * C1381 - C265 * C1777 + C92188 * C1901) *
                C31252 +
            (C265 * C11994 - C701 * C11784 - C265 * C12424 + C92188 * C12627) *
                C92226) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C92136 * C97 -
          (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
              C92097 * C92150 * C92136 * C98 +
          (C734 * C36258 + C2594 * C36259 + C4738 * C36260 +
           (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
               C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C790 -
          (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 + C5624 * C36258) *
              C92097 * C92150 * C791 +
          (C5625 * C36258 + C5627 * C36259 + C37228 * C36260 +
           (C265 * C36860 - C701 * C36722 - C265 * C37101 + C92188 * C37220) *
               C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C1372 -
          ((C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
               C36261 +
           C9347 * C36260 + C9348 * C36259 +
           (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
               C36258) *
              C92097 * C1373 +
          ((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
               C36258 +
           (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
               C36259 +
           (C265 * C5889 - C701 * C5705 - C265 * C6221 + C92188 * C6386) *
               C36260 +
           (C265 * C37384 - C701 * C37278 - C265 * C37590 + C92188 * C37693) *
               C36261) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C31252 +
           (C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317 +
            C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
            C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385) *
               C92226) *
              C92097 * C92150 * C92136 * C97 -
          ((C12647 + C12648 + C12649) * C92226 +
           (C10124 + C10123 + C10122) * C31252) *
              C92097 * C92150 * C92136 * C98 +
          ((C10127 + C10126 + C10125) * C31252 +
           (C9581 * C944 - C10082 * C795 - C9581 * C1192 + C9422 * C1315 +
            C9582 * C3515 - C10083 * C3359 - C9582 * C3803 + C9423 * C3947 +
            C9583 * C11994 - C10084 * C11784 - C9583 * C12424 +
            C9424 * C12627) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C31252 +
           (C41026 + C41027 + C41028) * C92226) *
              C92097 * C92150 * C790 -
          ((C41029 + C41030 + C41031) * C92226 +
           (C41028 + C41027 + C41026) * C31252) *
              C92097 * C92150 * C791 +
          ((C41031 + C41030 + C41029) * C31252 +
           (C9581 * C5030 - C10082 * C4815 - C9581 * C5417 + C9422 * C5596 +
            C9582 * C8690 - C10083 * C8454 - C9582 * C9122 + C9423 * C9332 +
            C9583 * C37384 - C10084 * C37278 - C9583 * C37590 +
            C9424 * C37693) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C31252 +
           (C41026 + C41027 + C41028) * C92226) *
              C92097 * C1372 -
          ((C9583 * C13979 - C10084 * C13749 - C9583 * C14409 + C9424 * C14619 +
            C9582 * C5887 - C10083 * C5703 - C9582 * C6219 + C9423 * C6385 +
            C9581 * C3513 - C10082 * C3357 - C9581 * C3801 + C9422 * C3945) *
               C92226 +
           (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 + C9424 * C11683 +
            C9582 * C1527 - C10083 * C1379 - C9582 * C1775 + C9423 * C1899 +
            C9581 * C1523 - C10082 * C1378 - C9581 * C1771 + C9422 * C1898) *
               C31252) *
              C92097 * C1373 +
          ((C9581 * C1527 - C10082 * C1379 - C9581 * C1775 + C9422 * C1899 +
            C9582 * C11109 - C10083 * C10868 - C9582 * C11497 + C9423 * C11683 +
            C9583 * C11111 - C10084 * C10869 - C9583 * C11499 +
            C9424 * C11684) *
               C31252 +
           (C9581 * C5887 - C10082 * C5703 - C9581 * C6219 + C9422 * C6385 +
            C9582 * C13979 - C10083 * C13749 - C9582 * C14409 + C9423 * C14619 +
            C9583 * C41320 - C10084 * C41105 - C9583 * C41693 +
            C9424 * C41869) *
               C92226) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C2664 -
           ((C36262 * C8456 - C36263 * C8454 - C36262 * C8457 +
             C92097 * C8460) *
                C92188 * C36261 +
            (C36262 * C5709 - C36263 * C5702 - C36262 * C5710 +
             C92097 * C5720) *
                C92188 * C36260 +
            (C36262 * C3361 - C36263 * C3357 - C36262 * C3362 +
             C92097 * C3369) *
                C92188 * C36259 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C92188 * C36258) *
               C2665) *
              C92136 * C1971 +
          (((C36262 * C1387 - C36263 * C1377 - C36262 * C1388 +
             C92097 * C1401) *
                C92188 * C36258 +
            (C36262 * C3363 - C36263 * C3358 - C36262 * C3364 +
             C92097 * C3370) *
                C92188 * C36259 +
            (C36262 * C5707 - C36263 * C5701 - C36262 * C5708 +
             C92097 * C5719) *
                C92188 * C36260 +
            (C36262 * C8458 - C36263 * C8455 - C36262 * C8459 +
             C92097 * C8461) *
                C92188 * C36261) *
               C2665 -
           (C37784 * C36261 + C37783 * C36260 + C37782 * C36259 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92188 * C36258) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C2664 -
           ((C31258 * C3365 - C31259 * C3359 - C31258 * C3366 + C31251 * C3371 +
             C31256 * C3363 - C31257 * C3358 - C31256 * C3364 + C31250 * C3370 +
             C31254 * C3361 - C31255 * C3357 - C31254 * C3362 +
             C31249 * C3369) *
                C92188 * C92226 +
            (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
             C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
             C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
             C31249 * C1402) *
                C92188 * C31252) *
               C2665) *
              C92136 * C1971 +
          (((C31254 * C1387 - C31255 * C1377 - C31254 * C1388 + C31249 * C1401 +
             C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
             C31258 * C1383 - C31259 * C1375 - C31258 * C1384 +
             C31251 * C1399) *
                C92188 * C31252 +
            (C31254 * C3363 - C31255 * C3358 - C31254 * C3364 + C31249 * C3370 +
             C31256 * C3365 - C31257 * C3359 - C31256 * C3366 + C31250 * C3371 +
             C31258 * C3367 - C31259 * C3360 - C31258 * C3368 +
             C31251 * C3372) *
                C92188 * C92226) *
               C2665 -
           ((C33490 + C33489 + C33488) * C92188 * C92226 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C92188 * C31252) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C9422 +
             C41134 * C9423 + C41135 * C9424) *
                C31252 +
            (C40330 + C40331 + C40348) * C92226) *
               C2664 -
           ((C41136 * C9424 + C40346 * C9423 + C39015 * C9422) * C92226 +
            (C41137 * C9424 + C41135 * C9423 + C41134 * C9422) * C31252) *
               C2665) *
              C92136 * C1971 +
          (((C42892 * C9422 + C42893 * C9423 +
             (C36262 * C10871 - C36263 * C10867 - C36262 * C10872 +
              C92097 * C10879) *
                 C9424) *
                C31252 +
            (C41982 * C9422 + C41983 * C9423 +
             (C36262 * C13753 - C36263 * C13750 - C36262 * C13754 +
              C92097 * C13756) *
                 C9424) *
                C92226) *
               C2665 -
           ((C41985 + C41984 + C41969) * C92226 +
            (C42893 * C9424 + C42892 * C9423 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C9422) *
                C31252) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C36262 +
            (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
             C36316 * C5710 - C36260 * C5805 + C36317 * C8457 -
             C36261 * C8590) *
                C92097) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C36262 +
            (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
             C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
                C92097) *
               C92188 * C2664 +
           ((C36258 * C1458 - C36314 * C1377 + C36259 * C3440 - C36315 * C3358 +
             C36260 * C5800 - C36316 * C5701 + C36261 * C8589 -
             C36317 * C8455) *
                C36262 +
            (C36258 * C1466 - C36314 * C1388 + C36259 * C3444 - C36315 * C3364 +
             C36260 * C5806 - C36316 * C5708 + C36261 * C8591 -
             C36317 * C8459) *
                C92097) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C2664 +
           ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C31254 +
            (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 -
             C92226 * C3443) *
                C31249 +
            (C34545 - C34546 + C34547 - C34548) * C31256 +
            (C34549 - C34550 + C34551 - C34552) * C31250 +
            (C34553 - C34554 + C34555 - C34556) * C31258 +
            (C34557 - C34558 + C34559 - C34560) * C31251) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C31254 +
            (C31342 - C31341 + C31344 - C31343) * C31249 +
            (C31346 - C31345 + C31348 - C31347) * C31256 +
            (C31350 - C31349 + C31352 - C31351) * C31250 +
            (C31353 - C31354 + C31355 - C31356) * C31258 +
            (C31357 - C31358 + C31359 - C31360) * C31251) *
               C92188 * C2664 +
           ((C34546 - C34545 + C34548 - C34547) * C31254 +
            (C34550 - C34549 + C34552 - C34551) * C31249 +
            (C34554 - C34553 + C34556 - C34555) * C31256 +
            (C34558 - C34557 + C34560 - C34559) * C31250 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C31258 +
            (C31252 * C1468 - C31334 * C1384 + C92226 * C3446 -
             C31335 * C3368) *
                C31251) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C36262 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92097) *
                C9422 +
            ((C41214 - C41215 + C41216 - C41217) * C36262 +
             (C41218 - C41219 + C41220 - C41221) * C92097) *
                C9423 +
            C41246 * C9424) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C36262 +
             (C41219 - C41218 + C41221 - C41220) * C92097) *
                C9422 +
            ((C41223 - C41222 + C41225 - C41224) * C36262 +
             (C41227 - C41226 + C41229 - C41228) * C92097) *
                C9423 +
            ((C41230 - C41231 + C41232 - C41233) * C36262 +
             (C41234 - C41235 + C41236 - C41237) * C92097) *
                C9424) *
               C2665) *
              C92136 * C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C36262 +
             (C31342 - C31341 + C31344 - C31343) * C92097) *
                C9422 +
            ((C34545 - C34546 + C34547 - C34548) * C36262 +
             (C34549 - C34550 + C34551 - C34552) * C92097) *
                C9423 +
            ((C42992 - C42993 + C42994 - C42995) * C36262 +
             (C42996 - C42997 + C42998 - C42999) * C92097) *
                C9424) *
               C2664 +
           (((C34546 - C34545 + C34548 - C34547) * C36262 +
             (C34550 - C34549 + C34552 - C34551) * C92097) *
                C9422 +
            ((C42993 - C42992 + C42995 - C42994) * C36262 +
             (C42997 - C42996 + C42999 - C42998) * C92097) *
                C9423 +
            ((C31252 * C11001 - C31334 * C10867 + C92226 * C13870 -
              C31335 * C13750) *
                 C36262 +
             (C31252 * C11005 - C31334 * C10872 + C92226 * C13872 -
              C31335 * C13754) *
                 C92097) *
                C9424) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C36262 +
             (C265 * C1390 - C92188 * C1531) * C92097) *
                C36258 +
            ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
            ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
            ((C265 * C8454 - C92188 * C8690) * C36262 +
             (C265 * C8457 - C92188 * C8692) * C92097) *
                C36261) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
            (C6734 * C36262 + C6735 * C92097) * C36259 +
            (C6736 * C36262 + C6737 * C92097) * C36260 +
            ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
               C2664 +
           (((C2820 - C2819) * C36262 + (C2822 - C2821) * C92097) * C36258 +
            ((C7706 - C7705) * C36262 + (C7708 - C7707) * C92097) * C36259 +
            ((C7710 - C7709) * C36262 + (C7712 - C7711) * C92097) * C36260 +
            ((C92188 * C8691 - C265 * C8455) * C36262 +
             (C92188 * C8693 - C265 * C8459) * C92097) *
                C36261) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31254 +
             (C265 * C1390 - C92188 * C1531) * C31249 +
             (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
             (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
                C31252 +
            ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
             (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
             (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C31254 + (C282 - C281) * C31249 +
             (C284 - C283) * C31256 + (C286 - C285) * C31250 +
             (C288 - C287) * C31258 + (C290 - C289) * C31251) *
                C31252 +
            (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
             C17153 * C31250 + (C2134 - C2135) * C31258 +
             (C2136 - C2137) * C31251) *
                C92226) *
               C2664 +
           (((C2820 - C2819) * C31254 + (C2822 - C2821) * C31249 +
             (C2824 - C2823) * C31256 + (C2826 - C2825) * C31250 +
             (C2828 - C2827) * C31258 + (C2830 - C2829) * C31251) *
                C31252 +
            ((C7706 - C7705) * C31254 + (C7708 - C7707) * C31249 +
             (C18112 - C18111) * C31256 + (C18114 - C18113) * C31250 +
             (C92188 * C3516 - C265 * C3360) * C31258 +
             (C92188 * C3520 - C265 * C3368) * C31251) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
              C9424 * C1527 - C9583 * C1379) *
                 C36262 +
             (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
              C9424 * C1535 - C9583 * C1392) *
                 C92097) *
                C31252 +
            ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
             (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
                C92226) *
               C2664 +
           (((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
              C9583 * C10868 - C9424 * C11109) *
                 C36262 +
             (C9581 * C1390 - C9422 * C1531 + C9582 * C1392 - C9423 * C1535 +
              C9583 * C10874 - C9424 * C11113) *
                 C92097) *
                C31252 +
            ((C9581 * C3357 - C9422 * C3513 + C9582 * C5703 - C9423 * C5887 +
              C9583 * C13749 - C9424 * C13979) *
                 C36262 +
             (C9581 * C3362 - C9422 * C3517 + C9582 * C5712 - C9423 * C5893 +
              C9583 * C13752 - C9424 * C13981) *
                 C92097) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C36262 +
             (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C92097) *
                C31252 +
            ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C36262 +
             (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92097) *
                C92226) *
               C2664 +
           (((C12987 - C12986 + C12989 - C12988 + C12991 - C12990) * C36262 +
             (C12993 - C12992 + C12995 - C12994 + C12997 - C12996) * C92097) *
                C31252 +
            ((C9422 * C3514 - C9581 * C3358 + C9423 * C5888 - C9582 * C5704 +
              C9424 * C13980 - C9583 * C13750) *
                 C36262 +
             (C9422 * C3518 - C9581 * C3364 + C9423 * C5894 - C9582 * C5714 +
              C9424 * C13982 - C9583 * C13754) *
                 C92097) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C2664 +
           ((C36262 * C1378 - C92097 * C1389) * C36314 +
            (C36262 * C1589 - C92097 * C1597) * C36258 +
            (C36262 * C3357 - C92097 * C3361) * C36315 +
            (C36262 * C3587 - C92097 * C3591) * C36259 +
            (C36262 * C5702 - C92097 * C5709) * C36316 +
            (C36262 * C5971 - C92097 * C5977) * C36260 +
            (C36262 * C8454 - C92097 * C8456) * C36317 +
            (C36262 * C8800 - C92097 * C8802) * C36261) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C36262 * C109 - C92097 * C116) * C36314 +
            (C36262 * C349 - C92097 * C355) * C36258 +
            (C37983 - C37984) * C36315 + (C37985 - C37986) * C36259 +
            (C37987 - C37988) * C36316 + (C37989 - C37990) * C36260 +
            (C37991 - C37992) * C36317 + (C37993 - C37994) * C36261) *
               C92188 * C2664 +
           ((C92097 * C1387 - C36262 * C1377) * C36314 +
            (C92097 * C1598 - C36262 * C1590) * C36258 +
            (C92097 * C3363 - C36262 * C3358) * C36315 +
            (C92097 * C3592 - C36262 * C3588) * C36259 +
            (C92097 * C5707 - C36262 * C5701) * C36316 +
            (C92097 * C5978 - C36262 * C5972) * C36260 +
            (C92097 * C8458 - C36262 * C8455) * C36317 +
            (C92097 * C8803 - C36262 * C8801) * C36261) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C2664 +
           ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C31334 +
            (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
             C31258 * C1591 - C31251 * C1599) *
                C31252 +
            (C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
             C31258 * C3359 - C31251 * C3365) *
                C31335 +
            (C31254 * C3587 - C31249 * C3591 + C31256 * C3588 - C31250 * C3592 +
             C31258 * C3589 - C31251 * C3593) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C31334 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C31252 +
            (C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C31335 +
            (C33807 - C33808 + C33809 - C33810 + C33811 - C33812) * C92226) *
               C92188 * C2664 +
           ((C31249 * C1387 - C31254 * C1377 + C31250 * C1385 - C31256 * C1376 +
             C31251 * C1383 - C31258 * C1375) *
                C31334 +
            (C31249 * C1598 - C31254 * C1590 + C31250 * C1599 - C31256 * C1591 +
             C31251 * C1600 - C31258 * C1592) *
                C31252 +
            (C31249 * C3363 - C31254 * C3358 + C31250 * C3365 - C31256 * C3359 +
             C31251 * C3367 - C31258 * C3360) *
                C31335 +
            (C31249 * C3592 - C31254 * C3588 + C31250 * C3593 - C31256 * C3589 +
             C31251 * C3594 - C31258 * C3590) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C31334 +
             (C92097 * C354 - C36262 * C348) * C31252 +
             (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
                C9422 +
            ((C41399 - C41400) * C31334 + (C41401 - C41402) * C31252 +
             (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
                C9423 +
            C41425 * C9424) *
               C2664 +
           (((C41400 - C41399) * C31334 + (C41402 - C41401) * C31252 +
             (C39227 - C39228) * C31335 + (C39229 - C39230) * C92226) *
                C9422 +
            ((C41404 - C41403) * C31334 + (C41406 - C41405) * C31252 +
             (C40597 - C40596) * C31335 + (C40599 - C40598) * C92226) *
                C9423 +
            ((C41409 - C41410) * C31334 + (C41411 - C41412) * C31252 +
             (C41413 - C41414) * C31335 + (C41415 - C41416) * C92226) *
                C9424) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C31334 +
             (C36262 * C349 - C92097 * C355) * C31252 +
             (C37983 - C37984) * C31335 + (C37985 - C37986) * C92226) *
                C9422 +
            ((C43196 - C43197) * C31334 + (C43198 - C43199) * C31252 +
             (C42280 - C42281) * C31335 + (C42282 - C42283) * C92226) *
                C9423 +
            ((C43200 - C43201) * C31334 + (C43202 - C43203) * C31252 +
             (C42284 - C42285) * C31335 + (C42286 - C42287) * C92226) *
                C9424) *
               C2664 +
           (((C43197 - C43196) * C31334 + (C43199 - C43198) * C31252 +
             (C42281 - C42280) * C31335 + (C42283 - C42282) * C92226) *
                C9422 +
            ((C43201 - C43200) * C31334 + (C43203 - C43202) * C31252 +
             (C42285 - C42284) * C31335 + (C42287 - C42286) * C92226) *
                C9423 +
            ((C92097 * C10871 - C36262 * C10867) * C31334 +
             (C92097 * C11196 - C36262 * C11192) * C31252 +
             (C92097 * C13753 - C36262 * C13750) * C31335 +
             (C92097 * C14084 - C36262 * C14082) * C92226) *
                C9424) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C2664 -
           (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
            C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
            C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
            C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
               C92097 * C92188 * C2665) *
              C92136 * C1971 +
          ((C36314 * C1458 - C36468 * C1377 - C36314 * C1590 + C36258 * C1657 +
            C36315 * C3440 - C36469 * C3358 - C36315 * C3588 + C36259 * C3662 +
            C36316 * C5800 - C36470 * C5701 - C36316 * C5972 + C36260 * C6057 +
            C36317 * C8589 - C36471 * C8455 - C36317 * C8801 + C36261 * C8919) *
               C92097 * C92188 * C2665 -
           (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
            C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
            C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
            C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
               C92097 * C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C2664 -
           ((C34879 + C34880) * C31251 + (C34881 + C34882) * C31250 +
            (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
             C31334 * C1457 - C31588 * C1378 - C31334 * C1589 +
             C31252 * C1658) *
                C31249) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C34882 + C34881) * C31249 + (C34880 + C34879) * C31250 +
            (C31334 * C1460 - C31588 * C1375 - C31334 * C1592 + C31252 * C1655 +
             C31335 * C3442 - C31589 * C3360 - C31335 * C3590 +
             C92226 * C3664) *
                C31251) *
               C92188 * C2665 -
           ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
            (C31628 + C31627) * C31249) *
               C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92097 * C9422 +
            (C41537 + C41538) * C92097 * C9423 + C41544 * C9424) *
               C2664 -
           ((C41541 + C41542) * C92097 * C9424 +
            (C41540 + C41539) * C92097 * C9423 +
            (C41538 + C41537) * C92097 * C9422) *
               C2665) *
              C92136 * C1971 +
          (((C34882 + C34881) * C92097 * C9422 +
            (C43314 + C43315) * C92097 * C9423 +
            (C31334 * C11001 - C31588 * C10867 - C31334 * C11192 +
             C31252 * C11306 + C31335 * C13870 - C31589 * C13750 -
             C31335 * C14082 + C92226 * C14192) *
                C92097 * C9424) *
               C2665 -
           ((C43315 + C43314) * C92097 * C9424 +
            (C34881 + C34882) * C92097 * C9423 +
            (C31628 + C31627) * C92097 * C9422) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C36314 +
            (C265 * C1589 - C92188 * C1713) * C36258 +
            (C8695 - C8696) * C36315 + (C9021 - C9022) * C36259 +
            (C8699 - C8700) * C36316 + (C9023 - C9024) * C36260 +
            (C265 * C8454 - C92188 * C8690) * C36317 +
            (C265 * C8800 - C92188 * C9018) * C36261) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
            C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
            (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
               C92097 * C2664 +
           ((C2820 - C2819) * C36314 + (C3055 - C3054) * C36258 +
            (C7706 - C7705) * C36315 + (C8033 - C8032) * C36259 +
            (C7710 - C7709) * C36316 + (C8035 - C8034) * C36260 +
            (C92188 * C8691 - C265 * C8455) * C36317 +
            (C92188 * C9019 - C265 * C8801) * C36261) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31334 +
             (C265 * C1589 - C92188 * C1713) * C31252 +
             (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
                C31249 +
            ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
             (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
                C31250 +
            ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
             (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
             C7074 * C92226) *
                C31249 +
            ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
             C17488 * C92226) *
                C31250 +
            ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
             (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
                C31251) *
               C2664 +
           (((C2820 - C2819) * C31334 + (C3055 - C3054) * C31252 +
             (C7706 - C7705) * C31335 + (C8033 - C8032) * C92226) *
                C31249 +
            ((C2824 - C2823) * C31334 + (C3057 - C3056) * C31252 +
             (C18112 - C18111) * C31335 + (C18438 - C18437) * C92226) *
                C31250 +
            ((C2828 - C2827) * C31334 + (C3059 - C3058) * C31252 +
             (C92188 * C3516 - C265 * C3360) * C31335 +
             (C92188 * C3734 - C265 * C3590) * C92226) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C31334 +
            (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
             C9424 * C1717 - C9583 * C1593) *
                C31252 +
            (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
            (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
               C92097 * C2664 +
           ((C9581 * C1378 - C9422 * C1523 + C9582 * C1379 - C9423 * C1527 +
             C9583 * C10868 - C9424 * C11109) *
                C31334 +
            (C9581 * C1589 - C9422 * C1713 + C9582 * C1593 - C9423 * C1717 +
             C9583 * C11191 - C9424 * C11419) *
                C31252 +
            (C9581 * C3357 - C9422 * C3513 + C9582 * C5703 - C9423 * C5887 +
             C9583 * C13749 - C9424 * C13979) *
                C31335 +
            (C9581 * C3587 - C9422 * C3731 + C9582 * C5973 - C9423 * C6139 +
             C9583 * C14081 - C9424 * C14309) *
                C92226) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C31334 +
            (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C31252 +
            (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C31335 +
            (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92226) *
               C92097 * C2664 +
           ((C12987 - C12986 + C12989 - C12988 + C12991 - C12990) * C31334 +
            (C13317 - C13316 + C13319 - C13318 + C13321 - C13320) * C31252 +
            (C9422 * C3514 - C9581 * C3358 + C9423 * C5888 - C9582 * C5704 +
             C9424 * C13980 - C9583 * C13750) *
                C31335 +
            (C9422 * C3732 - C9581 * C3588 + C9423 * C6141 - C9582 * C5974 +
             C9424 * C14310 - C9583 * C14082) *
                C92226) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C2664 +
           (((C36262 * C1378 - C92097 * C1389) * C265 +
             (C36262 * C1771 - C92097 * C1779) * C92188) *
                C36258 +
            ((C36262 * C3357 - C92097 * C3361) * C265 +
             (C36262 * C3801 - C92097 * C3805) * C92188) *
                C36259 +
            ((C36262 * C5702 - C92097 * C5709) * C265 +
             (C36262 * C6217 - C92097 * C6223) * C92188) *
                C36260 +
            ((C36262 * C8454 - C92097 * C8456) * C265 +
             (C36262 * C9122 - C92097 * C9124) * C92188) *
                C36261) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C265 +
             (C36262 * C568 - C92097 * C574) * C92188) *
                C36258 +
            ((C37983 - C37984) * C265 + (C38193 - C38194) * C92188) * C36259 +
            ((C37987 - C37988) * C265 + (C38195 - C38196) * C92188) * C36260 +
            ((C37991 - C37992) * C265 + (C38197 - C38198) * C92188) * C36261) *
               C2664 +
           (((C92097 * C1387 - C36262 * C1377) * C265 +
             (C92097 * C1780 - C36262 * C1772) * C92188) *
                C36258 +
            ((C92097 * C3363 - C36262 * C3358) * C265 +
             (C92097 * C3806 - C36262 * C3802) * C92188) *
                C36259 +
            ((C92097 * C5707 - C36262 * C5701) * C265 +
             (C92097 * C6224 - C36262 * C6218) * C92188) *
                C36260 +
            ((C92097 * C8458 - C36262 * C8455) * C265 +
             (C92097 * C9125 - C36262 * C9123) * C92188) *
                C36261) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C2664 +
           (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 -
              C31250 * C1387 + C31258 * C1376 - C31251 * C1385) *
                 C265 +
             (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 -
              C31250 * C1780 + C31258 * C1773 - C31251 * C1781) *
                 C92188) *
                C31252 +
            ((C31254 * C3357 - C31249 * C3361 + C31256 * C3358 -
              C31250 * C3363 + C31258 * C3359 - C31251 * C3365) *
                 C265 +
             (C31254 * C3801 - C31249 * C3805 + C31256 * C3802 -
              C31250 * C3806 + C31258 * C3803 - C31251 * C3807) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C265 +
             (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
              C31258 * C570 - C31251 * C576) *
                 C92188) *
                C31252 +
            ((C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C265 +
             (C34135 - C34136 + C34137 - C34138 + C34139 - C34140) * C92188) *
                C92226) *
               C2664 +
           (((C31249 * C1387 - C31254 * C1377 + C31250 * C1385 -
              C31256 * C1376 + C31251 * C1383 - C31258 * C1375) *
                 C265 +
             (C31249 * C1780 - C31254 * C1772 + C31250 * C1781 -
              C31256 * C1773 + C31251 * C1782 - C31258 * C1774) *
                 C92188) *
                C31252 +
            ((C31249 * C3363 - C31254 * C3358 + C31250 * C3365 -
              C31256 * C3359 + C31251 * C3367 - C31258 * C3360) *
                 C265 +
             (C31249 * C3806 - C31254 * C3802 + C31250 * C3807 -
              C31256 * C3803 + C31251 * C3808 - C31258 * C3804) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C9581 +
             (C92097 * C573 - C36262 * C567) * C9422 +
             (C41399 - C41400) * C9582 + (C41696 - C41697) * C9423 +
             C41417 * C9583 + C41705 * C9424) *
                C31252 +
            ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
             (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
             C41407 * C9583 + C41700 * C9424) *
                C92226) *
               C2664 +
           (((C41400 - C41399) * C9581 + (C41697 - C41696) * C9422 +
             (C41404 - C41403) * C9582 + (C41699 - C41698) * C9423 +
             (C41409 - C41410) * C9583 + (C41701 - C41702) * C9424) *
                C31252 +
            ((C39227 - C39228) * C9581 + (C39443 - C39444) * C9422 +
             (C40597 - C40596) * C9582 + (C40839 - C40838) * C9423 +
             (C41413 - C41414) * C9583 + (C41703 - C41704) * C9424) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C9581 +
             (C36262 * C568 - C92097 * C574) * C9422 +
             (C43196 - C43197) * C9582 + (C43512 - C43513) * C9423 +
             (C43200 - C43201) * C9583 + (C43514 - C43515) * C9424) *
                C31252 +
            ((C37983 - C37984) * C9581 + (C38193 - C38194) * C9422 +
             (C42280 - C42281) * C9582 + (C42582 - C42583) * C9423 +
             (C42284 - C42285) * C9583 + (C42584 - C42585) * C9424) *
                C92226) *
               C2664 +
           (((C43197 - C43196) * C9581 + (C43513 - C43512) * C9422 +
             (C43201 - C43200) * C9582 + (C43515 - C43514) * C9423 +
             (C92097 * C10871 - C36262 * C10867) * C9583 +
             (C92097 * C11502 - C36262 * C11498) * C9424) *
                C31252 +
            ((C42281 - C42280) * C9581 + (C42583 - C42582) * C9422 +
             (C42285 - C42284) * C9582 + (C42585 - C42584) * C9423 +
             (C92097 * C13753 - C36262 * C13750) * C9583 +
             (C92097 * C14412 - C36262 * C14410) * C9424) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C265 +
            (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
             C36316 * C6217 - C36260 * C6303 + C36317 * C9122 -
             C36261 * C9232) *
                C92188) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C265 +
            (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
             C36316 * C1195 - C36260 * C1261 + C36317 * C5418 -
             C36261 * C5518) *
                C92188) *
               C92097 * C2664 +
           ((C36258 * C1458 - C36314 * C1377 + C36259 * C3440 - C36315 * C3358 +
             C36260 * C5800 - C36316 * C5701 + C36261 * C8589 -
             C36317 * C8455) *
                C265 +
            (C36258 * C1838 - C36314 * C1772 + C36259 * C3876 - C36315 * C3802 +
             C36260 * C6304 - C36316 * C6218 + C36261 * C9233 -
             C36317 * C9123) *
                C92188) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C2664 +
           (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C31249 +
            ((C34545 - C34546 + C34547 - C34548) * C265 +
             (C35177 - C35178 + C35179 - C35180) * C92188) *
                C31250 +
            ((C34553 - C34554 + C34555 - C34556) * C265 +
             (C35181 - C35182 + C35183 - C35184) * C92188) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C265 +
             (C31864 - C31863 + C31866 - C31865) * C92188) *
                C31249 +
            ((C31346 - C31345 + C31348 - C31347) * C265 +
             (C31869 - C31868 + C31871 - C31870) * C92188) *
                C31250 +
            ((C31353 - C31354 + C31355 - C31356) * C265 +
             (C31872 - C31873 + C31874 - C31875) * C92188) *
                C31251) *
               C2664 +
           (((C34546 - C34545 + C34548 - C34547) * C265 +
             (C35178 - C35177 + C35180 - C35179) * C92188) *
                C31249 +
            ((C34554 - C34553 + C34556 - C34555) * C265 +
             (C35182 - C35181 + C35184 - C35183) * C92188) *
                C31250 +
            ((C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
              C31335 * C3360) *
                 C265 +
             (C31252 * C1840 - C31334 * C1774 + C92226 * C3878 -
              C31335 * C3804) *
                 C92188) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C9581 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C9422 +
            (C41214 - C41215 + C41216 - C41217) * C9582 +
            (C41781 - C41782 + C41783 - C41784) * C9423 + C41242 * C9583 +
            C41795 * C9424) *
               C92097 * C2664 +
           ((C41215 - C41214 + C41217 - C41216) * C9581 +
            (C41782 - C41781 + C41784 - C41783) * C9422 +
            (C41223 - C41222 + C41225 - C41224) * C9582 +
            (C41786 - C41785 + C41788 - C41787) * C9423 +
            (C41230 - C41231 + C41232 - C41233) * C9583 +
            (C41789 - C41790 + C41791 - C41792) * C9424) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C9581 +
            (C31864 - C31863 + C31866 - C31865) * C9422 +
            (C34545 - C34546 + C34547 - C34548) * C9582 +
            (C35177 - C35178 + C35179 - C35180) * C9423 +
            (C42992 - C42993 + C42994 - C42995) * C9583 +
            (C43614 - C43615 + C43616 - C43617) * C9424) *
               C92097 * C2664 +
           ((C34546 - C34545 + C34548 - C34547) * C9581 +
            (C35178 - C35177 + C35180 - C35179) * C9422 +
            (C42993 - C42992 + C42995 - C42994) * C9582 +
            (C43615 - C43614 + C43617 - C43616) * C9423 +
            (C31252 * C11001 - C31334 * C10867 + C92226 * C13870 -
             C31335 * C13750) *
                C9583 +
            (C31252 * C11595 - C31334 * C11498 + C92226 * C14516 -
             C31335 * C14410) *
                C9424) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C2664 -
           ((C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
                C36261 +
            C9347 * C36260 + C9348 * C36259 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C36258) *
               C92097 * C2665) *
              C92136 * C1971 +
          ((C3288 * C36258 + C8354 * C36259 + C8353 * C36260 +
            (C265 * C8691 - C701 * C8455 - C265 * C9123 + C92188 * C9333) *
                C36261) *
               C92097 * C2665 -
           (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
               C92097 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C2664 -
           ((C35283 + C35284) * C31251 + (C35285 + C35286) * C31250 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C31252) *
                C31249) *
               C2665) *
              C92136 * C1971 +
          (((C35286 + C35285) * C31249 + (C35284 + C35283) * C31250 +
            (C3286 * C31252 +
             (C265 * C3516 - C701 * C3360 - C265 * C3804 + C92188 * C3948) *
                 C92226) *
                C31251) *
               C2665 -
           ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
            (C31956 + C31955) * C31249) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
             C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
             C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
                C31252 +
            (C41026 + C41027 + C41028) * C92226) *
               C92097 * C2664 -
           ((C9583 * C13979 - C10084 * C13749 - C9583 * C14409 +
             C9424 * C14619 + C9582 * C5887 - C10083 * C5703 - C9582 * C6219 +
             C9423 * C6385 + C9581 * C3513 - C10082 * C3357 - C9581 * C3801 +
             C9422 * C3945) *
                C92226 +
            (C9583 * C11109 - C10084 * C10868 - C9583 * C11497 +
             C9424 * C11683 + C9582 * C1527 - C10083 * C1379 - C9582 * C1775 +
             C9423 * C1899 + C9581 * C1523 - C10082 * C1378 - C9581 * C1771 +
             C9422 * C1898) *
                C31252) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C13651 + C13650 + C13649) * C31252 +
            (C9581 * C3514 - C10082 * C3358 - C9581 * C3802 + C9422 * C3946 +
             C9582 * C5888 - C10083 * C5704 - C9582 * C6220 + C9423 * C6387 +
             C9583 * C13980 - C10084 * C13750 - C9583 * C14410 +
             C9424 * C14620) *
                C92226) *
               C92097 * C2665 -
           ((C12647 + C12648 + C12649) * C92226 +
            (C10124 + C10123 + C10122) * C31252) *
               C92097 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C32072 + C32073 + C32074) * C92188 * C92226) *
              C92150 * C790 -
          ((C32075 + C32076 + C32077) * C92188 * C92226 +
           (C32074 + C32073 + C32072) * C92188 * C31252) *
              C92150 * C791 +
          ((C32077 + C32076 + C32075) * C92188 * C31252 +
           (C31254 * C4820 - C31255 * C4815 - C31254 * C4821 + C31249 * C4827 +
            C31256 * C4818 - C31257 * C4814 - C31256 * C4819 + C31250 * C4826 +
            C31258 * C6488 - C31259 * C6487 - C31258 * C6489 + C31251 * C6490) *
               C92188 * C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C31254 * C808 - C31255 * C797 - C31254 * C809 + C31249 * C821 +
            C31256 * C806 - C31257 * C796 - C31256 * C807 + C31250 * C820 +
            C31258 * C804 - C31259 * C795 - C31258 * C805 + C31251 * C819) *
               C92188 * C92226) *
              C92150 * C92136 * C97 -
          ((C31258 * C802 - C31259 * C794 - C31258 * C803 + C31251 * C818 +
            C31256 * C804 - C31257 * C795 - C31256 * C805 + C31250 * C819 +
            C31254 * C806 - C31255 * C796 - C31254 * C807 + C31249 * C820) *
               C92188 * C92226 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C92188 * C31252) *
              C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C92188 * C31252 +
           (C31254 * C804 - C31255 * C795 - C31254 * C805 + C31249 * C819 +
            C31256 * C802 - C31257 * C794 - C31256 * C803 + C31250 * C818 +
            C31258 * C1974 - C31259 * C1973 - C31258 * C1975 + C31251 * C1976) *
               C92188 * C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           (C36262 * C808 - C36263 * C797 - C36262 * C809 + C92097 * C821) *
               C92188 * C36259 +
           (C36262 * C810 - C36263 * C798 - C36262 * C811 + C92097 * C822) *
               C92188 * C36260 +
           (C36262 * C4820 - C36263 * C4815 - C36262 * C4821 + C92097 * C4827) *
               C92188 * C36261) *
              C92150 * C92136 * C97 -
          ((C36262 * C4818 - C36263 * C4814 - C36262 * C4819 + C92097 * C4826) *
               C92188 * C36261 +
           (C36262 * C812 - C36263 * C799 - C36262 * C813 + C92097 * C823) *
               C92188 * C36260 +
           (C36262 * C806 - C36263 * C796 - C36262 * C807 + C92097 * C820) *
               C92188 * C36259 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C92188 * C36258) *
              C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C92188 * C36258 +
           (C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
               C92188 * C36259 +
           (C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
               C92188 * C36260 +
           (C36262 * C6488 - C36263 * C6487 - C36262 * C6489 + C92097 * C6490) *
               C92188 * C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C92150 * C790 -
          (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
           C36755 * C36258) *
              C92150 * C791 +
          (C36756 * C36258 + C36757 * C36259 + C36758 * C36260 +
           (C36262 * C36723 - C36263 * C36722 - C36262 * C36724 +
            C92097 * C36725) *
               C92188 * C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C9422 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C9423 +
            (C36262 * C1391 - C36263 * C1379 - C36262 * C1392 +
             C92097 * C1403) *
                C9424) *
               C31252 +
           (C36751 * C9422 + C39015 * C9423 +
            (C36262 * C5711 - C36263 * C5703 - C36262 * C5712 +
             C92097 * C5721) *
                C9424) *
               C92226) *
              C92150 * C92136 * C97 -
          (((C36262 * C5713 - C36263 * C5704 - C36262 * C5714 +
             C92097 * C5722) *
                C9424 +
            (C36262 * C3363 - C36263 * C3358 - C36262 * C3364 +
             C92097 * C3370) *
                C9423 +
            C37779 * C9422) *
               C92226 +
           ((C36262 * C1393 - C36263 * C1380 - C36262 * C1394 +
             C92097 * C1404) *
                C9424 +
            (C36262 * C1387 - C36263 * C1377 - C36262 * C1388 +
             C92097 * C1401) *
                C9423 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C9422) *
               C31252) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C9422 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C9423 +
            (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 +
             C92097 * C1405) *
                C9424) *
               C31252 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C9422 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C9423 +
            (C36262 * C11785 - C36263 * C11784 - C36262 * C11786 +
             C92097 * C11787) *
                C9424) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C9422 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C9423 +
            (C36262 * C1391 - C36263 * C1379 - C36262 * C1392 +
             C92097 * C1403) *
                C9424) *
               C31252 +
           (C40330 + C40331 + C40348) * C92226) *
              C92150 * C790 -
          ((C40349 + C40340 + C40341) * C92226 +
           (C40348 + C40331 + C40330) * C31252) *
              C92150 * C791 +
          ((C40341 + C40340 + C40349) * C31252 +
           (C36753 * C9422 + C39013 * C9423 +
            (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
             C92097 * C37281) *
                C9424) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C790 +
          ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
               C31254 +
           (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
               C31249 +
           (C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
               C31256 +
           (C31334 * C807 - C31252 * C885 + C31335 * C813 - C92226 * C889) *
               C31250 +
           (C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
               C31258 +
           (C31334 * C805 - C31252 * C886 + C31335 * C815 - C92226 * C890) *
               C31251) *
              C92188 * C92150 * C791 +
          ((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
               C31254 +
           (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
               C31249 +
           (C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
               C31256 +
           (C31252 * C889 - C31334 * C813 + C92226 * C4953 - C31335 * C4819) *
               C31250 +
           (C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
               C31258 +
           (C31252 * C890 - C31334 * C815 + C92226 * C6618 - C31335 * C6489) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C92136 * C97 +
          ((C31338 - C31337 + C31340 - C31339) * C31254 +
           (C31342 - C31341 + C31344 - C31343) * C31249 +
           (C31346 - C31345 + C31348 - C31347) * C31256 +
           (C31350 - C31349 + C31352 - C31351) * C31250 +
           (C31353 - C31354 + C31355 - C31356) * C31258 +
           (C31357 - C31358 + C31359 - C31360) * C31251) *
              C92188 * C92150 * C92136 * C98 +
          (C31365 * C31254 + C31366 * C31249 +
           (C31354 - C31353 + C31356 - C31355) * C31256 +
           (C31358 - C31357 + C31360 - C31359) * C31250 +
           (C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
               C31258 +
           (C31252 * C193 - C31334 * C123 + C92226 * C2044 - C31335 * C1975) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C36262 +
           (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
            C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
               C92097) *
              C92188 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C36262 +
           (C36258 * C191 - C36314 * C119 + C36259 * C886 - C36315 * C805 +
            C36260 * C890 - C36316 * C815 + C36261 * C6618 - C36317 * C6489) *
               C92097) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C36262 +
           (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
            C36316 * C4821 - C36260 * C4952 + C36317 * C4823 - C36261 * C4954) *
               C92097) *
              C92188 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C36262 +
           (C36258 * C888 - C36314 * C811 + C36259 * C4952 - C36315 * C4821 +
            C36260 * C4954 - C36316 * C4823 + C36261 * C36809 -
            C36317 * C36724) *
               C92097) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C36262 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92097) *
               C9422 +
           ((C31252 * C1457 - C31334 * C1378 + C92226 * C3439 -
             C31335 * C3357) *
                C36262 +
            (C31252 * C1465 - C31334 * C1390 + C92226 * C3443 -
             C31335 * C3362) *
                C92097) *
               C9423 +
           ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C36262 +
            (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 -
             C31335 * C5712) *
                C92097) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C36262 +
            (C31342 - C31341 + C31344 - C31343) * C92097) *
               C9422 +
           ((C34545 - C34546 + C34547 - C34548) * C36262 +
            (C34549 - C34550 + C34551 - C34552) * C92097) *
               C9423 +
           ((C31334 * C1380 - C31252 * C1462 + C31335 * C5704 -
             C92226 * C5803) *
                C36262 +
            (C31334 * C1394 - C31252 * C1470 + C31335 * C5714 -
             C92226 * C5809) *
                C92097) *
               C9424) *
              C92150 * C92136 * C98 +
          ((C31365 * C36262 + C31366 * C92097) * C9422 +
           ((C34554 - C34553 + C34556 - C34555) * C36262 +
            (C34558 - C34557 + C34560 - C34559) * C92097) *
               C9423 +
           ((C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
             C31335 * C11784) *
                C36262 +
            (C31252 * C1471 - C31334 * C1396 + C92226 * C11887 -
             C31335 * C11786) *
                C92097) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C36262 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92097) *
               C9422 +
           ((C31252 * C1457 - C31334 * C1378 + C92226 * C3439 -
             C31335 * C3357) *
                C36262 +
            (C31252 * C1465 - C31334 * C1390 + C92226 * C3443 -
             C31335 * C3362) *
                C92097) *
               C9423 +
           ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C36262 +
            (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 -
             C31335 * C5712) *
                C92097) *
               C9424) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C36262 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C92097) *
               C9422 +
           ((C31334 * C3357 - C31252 * C3439 + C31335 * C5702 -
             C92226 * C5799) *
                C36262 +
            (C31334 * C3362 - C31252 * C3443 + C31335 * C5710 -
             C92226 * C5805) *
                C92097) *
               C9423 +
           ((C31334 * C5703 - C31252 * C5801 + C31335 * C5705 -
             C92226 * C5802) *
                C36262 +
            (C31334 * C5712 - C31252 * C5807 + C31335 * C5716 -
             C92226 * C5808) *
                C92097) *
               C9424) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C36262 +
            (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
                C92097) *
               C9422 +
           ((C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C36262 +
            (C31252 * C5805 - C31334 * C5710 + C92226 * C8590 -
             C31335 * C8457) *
                C92097) *
               C9423 +
           ((C31252 * C5802 - C31334 * C5705 + C92226 * C37332 -
             C31335 * C37278) *
                C36262 +
            (C31252 * C5808 - C31334 * C5716 + C92226 * C37333 -
             C31335 * C37280) *
                C92097) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C790 +
          (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
            C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
            C17153 * C31251) *
               C31252 +
           ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
            C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
            (C4214 - C4215) * C31251) *
               C92226) *
              C92150 * C791 +
          ((C5057 * C31254 + C5058 * C31249 + C5047 * C31256 + C5048 * C31250 +
            (C4213 - C4212) * C31258 + (C4215 - C4214) * C31251) *
               C31252 +
           ((C5050 - C5049) * C31254 + (C5052 - C5051) * C31249 +
            (C5054 - C5053) * C31256 + (C5056 - C5055) * C31250 +
            (C92188 * C6729 - C265 * C6487) * C31258 +
            (C92188 * C6730 - C265 * C6489) * C31251) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31254 + (C282 - C281) * C31249 +
            (C284 - C283) * C31256 + (C286 - C285) * C31250 +
            (C288 - C287) * C31258 + (C290 - C289) * C31251) *
               C31252 +
           (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
            C17153 * C31250 + (C2134 - C2135) * C31258 +
            (C2136 - C2137) * C31251) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C295 * C31254 + C296 * C31249 + C297 * C31256 + C298 * C31250 +
            (C292 - C291) * C31258 + (C294 - C293) * C31251) *
               C31252 +
           (C14887 * C31254 + C14888 * C31249 + (C2135 - C2134) * C31256 +
            (C2137 - C2136) * C31250 +
            (C92188 * C2123 - C265 * C1973) * C31258 +
            (C92188 * C2124 - C265 * C1975) * C31251) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           (C5057 * C36262 + C5058 * C92097) * C36260 +
           ((C5050 - C5049) * C36262 + (C5052 - C5051) * C92097) * C36261) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
           (C6734 * C36262 + C6735 * C92097) * C36259 +
           (C6736 * C36262 + C6737 * C92097) * C36260 +
           ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
              C92150 * C92136 * C98 +
          ((C295 * C36262 + C296 * C92097) * C36258 +
           (C14887 * C36262 + C14888 * C92097) * C36259 +
           ((C4213 - C4212) * C36262 + (C4215 - C4214) * C92097) * C36260 +
           ((C92188 * C6729 - C265 * C6487) * C36262 +
            (C92188 * C6730 - C265 * C6489) * C92097) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C92150 * C790 +
          (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
           ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
           ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
           ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) * C36261) *
              C92150 * C791 +
          (C36871 * C36258 + C36874 * C36259 +
           ((C36868 - C36867) * C36262 + (C36870 - C36869) * C92097) * C36260 +
           ((C92188 * C36860 - C265 * C36722) * C36262 +
            (C92188 * C36861 - C265 * C36724) * C92097) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C36262 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C92097) *
               C31252 +
           ((C9422 * C942 - C9581 * C797 + C9423 * C3513 - C9582 * C3357 +
             C9424 * C5887 - C9583 * C5703) *
                C36262 +
            (C9422 * C950 - C9581 * C809 + C9423 * C3517 - C9582 * C3362 +
             C9424 * C5893 - C9583 * C5712) *
                C92097) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C36262 +
            (C9592 - C9591 + C9594 - C9593 + C9596 - C9595) * C92097) *
               C31252 +
           ((C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C36262 +
            (C12003 - C12004 + C12005 - C12006 + C12007 - C12008) * C92097) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C36262 +
            (C9604 - C9603 + C9606 - C9605 + C9608 - C9607) * C92097) *
               C31252 +
           ((C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
             C9424 * C11994 - C9583 * C11784) *
                C36262 +
            (C9422 * C952 - C9581 * C805 + C9423 * C3519 - C9582 * C3366 +
             C9424 * C11995 - C9583 * C11786) *
                C92097) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
             C9424 * C1527 - C9583 * C1379) *
                C36262 +
            (C9422 * C272 - C9581 * C115 + C9423 * C1531 - C9582 * C1390 +
             C9424 * C1535 - C9583 * C1392) *
                C92097) *
               C31252 +
           ((C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C36262 +
            (C40504 - C40505 + C40506 - C40507 + C40508 - C40509) * C92097) *
               C92226) *
              C92150 * C790 +
          (((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C36262 +
            (C40505 - C40504 + C40507 - C40506 + C40509 - C40508) * C92097) *
               C31252 +
           ((C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C36262 +
            (C40516 - C40517 + C40518 - C40519 + C40520 - C40521) * C92097) *
               C92226) *
              C92150 * C791 +
          (((C40511 - C40510 + C40513 - C40512 + C40515 - C40514) * C36262 +
            (C40517 - C40516 + C40519 - C40518 + C40521 - C40520) * C92097) *
               C31252 +
           ((C9422 * C5030 - C9581 * C4815 + C9423 * C8690 - C9582 * C8454 +
             C9424 * C37384 - C9583 * C37278) *
                C36262 +
            (C9422 * C5034 - C9581 * C4821 + C9423 * C8692 - C9582 * C8457 +
             C9424 * C37385 - C9583 * C37280) *
                C92097) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
           (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
              C92188 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
           (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
           (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
           (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
              C92188 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C31334 +
           (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C31252 +
           (C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
            C31251 * C6488 - C31258 * C6487) *
               C31335 +
           (C31249 * C5143 - C31254 * C5139 + C31250 * C5144 - C31256 * C5140 +
            C31251 * C6836 - C31258 * C6835) *
               C92226) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
            C31251 * C804 - C31258 * C795) *
               C31335 +
           (C31249 * C1016 - C31254 * C1008 + C31250 * C1017 - C31256 * C1009 +
            C31251 * C1018 - C31258 * C1010) *
               C92226) *
              C92188 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C31334 +
           (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
            C31258 * C351 - C31251 * C357) *
               C31252 +
           (C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
            C31258 * C794 - C31251 * C802) *
               C31335 +
           (C31254 * C1009 - C31249 * C1017 + C31256 * C1010 - C31250 * C1018 +
            C31258 * C1011 - C31251 * C1019) *
               C92226) *
              C92188 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C31334 +
           (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
            C31251 * C358 - C31258 * C352) *
               C31252 +
           (C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
            C31251 * C1974 - C31258 * C1973) *
               C31335 +
           (C31249 * C1018 - C31254 * C1010 + C31250 * C1019 - C31256 * C1011 +
            C31251 * C2204 - C31258 * C2203) *
               C92226) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C92097 * C808 - C36262 * C797) * C36315 +
           (C92097 * C1016 - C36262 * C1008) * C36259 +
           (C92097 * C810 - C36262 * C798) * C36316 +
           (C92097 * C1020 - C36262 * C1012) * C36260 +
           (C92097 * C4820 - C36262 * C4815) * C36317 +
           (C92097 * C5143 - C36262 * C5139) * C36261) *
              C92188 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C36314 +
           (C36262 * C349 - C92097 * C355) * C36258 +
           (C36262 * C796 - C92097 * C806) * C36315 +
           (C36262 * C1009 - C92097 * C1017) * C36259 +
           (C36262 * C799 - C92097 * C812) * C36316 +
           (C36262 * C1013 - C92097 * C1021) * C36260 +
           (C36262 * C4814 - C92097 * C4818) * C36317 +
           (C36262 * C5140 - C92097 * C5144) * C36261) *
              C92188 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C36314 +
           (C92097 * C356 - C36262 * C350) * C36258 +
           (C92097 * C804 - C36262 * C795) * C36315 +
           (C92097 * C1018 - C36262 * C1010) * C36259 +
           (C92097 * C814 - C36262 * C800) * C36316 +
           (C92097 * C1022 - C36262 * C1014) * C36260 +
           (C92097 * C6488 - C36262 * C6487) * C36317 +
           (C92097 * C6836 - C36262 * C6835) * C36261) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C92150 * C790 +
          ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
           (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
           (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
           (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
              C92188 * C92150 * C791 +
          (C36943 * C36314 + C36944 * C36258 + C36945 * C36315 +
           C36946 * C36259 + (C36940 - C36939) * C36316 +
           (C36942 - C36941) * C36260 +
           (C92097 * C36723 - C36262 * C36722) * C36317 +
           (C92097 * C36925 - C36262 * C36924) * C36261) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C31334 +
            (C92097 * C354 - C36262 * C348) * C31252 +
            (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
               C9422 +
           ((C92097 * C1389 - C36262 * C1378) * C31334 +
            (C92097 * C1597 - C36262 * C1589) * C31252 +
            (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
               C9423 +
           ((C92097 * C1391 - C36262 * C1379) * C31334 +
            (C92097 * C1601 - C36262 * C1593) * C31252 +
            (C92097 * C5711 - C36262 * C5703) * C31335 +
            (C92097 * C5979 - C36262 * C5973) * C92226) *
               C9424) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C31334 +
            (C36262 * C349 - C92097 * C355) * C31252 +
            (C37983 - C37984) * C31335 + (C37985 - C37986) * C92226) *
               C9422 +
           ((C36262 * C1377 - C92097 * C1387) * C31334 +
            (C36262 * C1590 - C92097 * C1598) * C31252 +
            (C36262 * C3358 - C92097 * C3363) * C31335 +
            (C36262 * C3588 - C92097 * C3592) * C92226) *
               C9423 +
           ((C36262 * C1380 - C92097 * C1393) * C31334 +
            (C36262 * C1594 - C92097 * C1602) * C31252 +
            (C36262 * C5704 - C92097 * C5713) * C31335 +
            (C36262 * C5974 - C92097 * C5980) * C92226) *
               C9424) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C31334 +
            (C92097 * C356 - C36262 * C350) * C31252 +
            (C92097 * C804 - C36262 * C795) * C31335 +
            (C92097 * C1018 - C36262 * C1010) * C92226) *
               C9422 +
           ((C92097 * C1385 - C36262 * C1376) * C31334 +
            (C92097 * C1599 - C36262 * C1591) * C31252 +
            (C92097 * C3365 - C36262 * C3359) * C31335 +
            (C92097 * C3593 - C36262 * C3589) * C92226) *
               C9423 +
           ((C92097 * C1395 - C36262 * C1381) * C31334 +
            (C92097 * C1603 - C36262 * C1595) * C31252 +
            (C92097 * C11785 - C36262 * C11784) * C31335 +
            (C92097 * C12107 - C36262 * C12106) * C92226) *
               C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C31334 +
            (C92097 * C354 - C36262 * C348) * C31252 +
            (C36927 - C36928) * C31335 + (C36929 - C36930) * C92226) *
               C9422 +
           ((C92097 * C1389 - C36262 * C1378) * C31334 +
            (C92097 * C1597 - C36262 * C1589) * C31252 +
            (C39228 - C39227) * C31335 + (C39230 - C39229) * C92226) *
               C9423 +
           ((C92097 * C1391 - C36262 * C1379) * C31334 +
            (C92097 * C1601 - C36262 * C1593) * C31252 +
            (C40596 - C40597) * C31335 + (C40598 - C40599) * C92226) *
               C9424) *
              C92150 * C790 +
          (((C36928 - C36927) * C31334 + (C36930 - C36929) * C31252 +
            (C36932 - C36931) * C31335 + (C36934 - C36933) * C92226) *
               C9422 +
           ((C39227 - C39228) * C31334 + (C39229 - C39230) * C31252 +
            (C39231 - C39232) * C31335 + (C39233 - C39234) * C92226) *
               C9423 +
           ((C40597 - C40596) * C31334 + (C40599 - C40598) * C31252 +
            (C40600 - C40601) * C31335 + (C40602 - C40603) * C92226) *
               C9424) *
              C92150 * C791 +
          ((C36943 * C31334 + C36944 * C31252 + C36945 * C31335 +
            C36946 * C92226) *
               C9422 +
           ((C39232 - C39231) * C31334 + (C39234 - C39233) * C31252 +
            (C39236 - C39235) * C31335 + (C39238 - C39237) * C92226) *
               C9423 +
           ((C40601 - C40600) * C31334 + (C40603 - C40602) * C31252 +
            (C92097 * C37279 - C36262 * C37278) * C31335 +
            (C92097 * C37437 - C36262 * C37436) * C92226) *
               C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C790 -
          ((C31335 * C882 - C31589 * C800 - C31335 * C1014 + C92226 * C1080 +
            C31334 * C878 - C31588 * C795 - C31334 * C1010 + C31252 * C1075) *
               C31251 +
           (C31335 * C881 - C31589 * C799 - C31335 * C1013 + C92226 * C1079 +
            C31334 * C877 - C31588 * C796 - C31334 * C1009 + C31252 * C1076) *
               C31250 +
           (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
            C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
               C31249) *
              C92188 * C92150 * C791 +
          ((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
            C31335 * C4948 - C31589 * C4815 - C31335 * C5139 + C92226 * C5252) *
               C31249 +
           (C31334 * C881 - C31588 * C799 - C31334 * C1013 + C31252 * C1079 +
            C31335 * C4949 - C31589 * C4814 - C31335 * C5140 + C92226 * C5251) *
               C31250 +
           (C31334 * C882 - C31588 * C800 - C31334 * C1014 + C31252 * C1080 +
            C31335 * C6617 - C31589 * C6487 - C31335 * C6835 + C92226 * C6951) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C92136 * C97 -
          ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
           (C31628 + C31627) * C31249) *
              C92188 * C92150 * C92136 * C98 +
          (C31633 * C31249 + (C31632 + C31631) * C31250 +
           (C31334 * C187 - C31588 * C112 - C31334 * C352 + C31252 * C415 +
            C31335 * C2043 - C31589 * C1973 - C31335 * C2203 + C92226 * C2271) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C92136 * C97 -
          (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
           C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
           C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
           C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
              C92097 * C92188 * C92150 * C92136 * C98 +
          (C36314 * C185 - C36468 * C110 - C36314 * C350 + C36258 * C413 +
           C36315 * C878 - C36469 * C795 - C36315 * C1010 + C36259 * C1075 +
           C36316 * C882 - C36470 * C800 - C36316 * C1014 + C36260 * C1080 +
           C36317 * C6617 - C36471 * C6487 - C36317 * C6835 + C36261 * C6951) *
              C92097 * C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C790 -
          (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
           C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
           C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
           C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
              C92097 * C92188 * C92150 * C791 +
          (C36314 * C880 - C36468 * C798 - C36314 * C1012 + C36258 * C1078 +
           C36315 * C4948 - C36469 * C4815 - C36315 * C5139 + C36259 * C5252 +
           C36316 * C4950 - C36470 * C4816 - C36316 * C5141 + C36260 * C5253 +
           C36317 * C36808 - C36471 * C36722 - C36317 * C36924 +
           C36261 * C36996) *
              C92097 * C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C92097 * C9422 +
           (C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658 +
            C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661) *
               C92097 * C9423 +
           (C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C92097 * C9424) *
              C92150 * C92136 * C97 -
          ((C31335 * C5803 - C31589 * C5704 - C31335 * C5974 + C92226 * C6061 +
            C31334 * C1462 - C31588 * C1380 - C31334 * C1594 + C31252 * C1660) *
               C92097 * C9424 +
           (C34881 + C34882) * C92097 * C9423 +
           (C31628 + C31627) * C92097 * C9422) *
              C92150 * C92136 * C98 +
          (C31633 * C92097 * C9422 + (C34880 + C34879) * C92097 * C9423 +
           (C31334 * C1463 - C31588 * C1381 - C31334 * C1595 + C31252 * C1661 +
            C31335 * C11886 - C31589 * C11784 - C31335 * C12106 +
            C92226 * C12206) *
               C92097 * C9424) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C92097 * C9422 +
           (C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658 +
            C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661) *
               C92097 * C9423 +
           (C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C92097 * C9424) *
              C92150 * C790 -
          ((C31335 * C5802 - C31589 * C5705 - C31335 * C5975 + C92226 * C6060 +
            C31334 * C5801 - C31588 * C5703 - C31334 * C5973 + C31252 * C6059) *
               C92097 * C9424 +
           (C31335 * C5799 - C31589 * C5702 - C31335 * C5971 + C92226 * C6058 +
            C31334 * C3439 - C31588 * C3357 - C31334 * C3587 + C31252 * C3661) *
               C92097 * C9423 +
           (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
            C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
               C92097 * C9422) *
              C92150 * C791 +
          ((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
            C31335 * C4948 - C31589 * C4815 - C31335 * C5139 + C92226 * C5252) *
               C92097 * C9422 +
           (C31334 * C5799 - C31588 * C5702 - C31334 * C5971 + C31252 * C6058 +
            C31335 * C8588 - C31589 * C8454 - C31335 * C8800 + C92226 * C8918) *
               C92097 * C9423 +
           (C31334 * C5802 - C31588 * C5705 - C31334 * C5975 + C31252 * C6060 +
            C31335 * C37332 - C31589 * C37278 - C31335 * C37436 +
            C92226 * C37488) *
               C92097 * C9424) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C790 +
          (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
            (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
               C31249 +
           (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 + C7075 * C92226) *
               C31250 +
           (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
            (C4485 - C4486) * C92226) *
               C31251) *
              C92150 * C791 +
          ((C5057 * C31334 + C5343 * C31252 + (C5050 - C5049) * C31335 +
            (C5340 - C5339) * C92226) *
               C31249 +
           (C5047 * C31334 + C5338 * C31252 + (C5054 - C5053) * C31335 +
            (C5342 - C5341) * C92226) *
               C31250 +
           ((C4213 - C4212) * C31334 + (C4486 - C4485) * C31252 +
            (C92188 * C6729 - C265 * C6487) * C31335 +
            (C92188 * C7071 - C265 * C6835) * C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
            C7074 * C92226) *
               C31249 +
           ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
            C17488 * C92226) *
               C31250 +
           ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
            (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31714 * C31249 +
           (C297 * C31334 + C513 * C31252 + (C2135 - C2134) * C31335 +
            (C2366 - C2365) * C92226) *
               C31250 +
           ((C292 - C291) * C31334 + (C511 - C510) * C31252 +
            (C92188 * C2123 - C265 * C1973) * C31335 +
            (C92188 * C2359 - C265 * C2203) * C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           (C5050 - C5049) * C36317 + (C5340 - C5339) * C36261) *
              C92097 * C92150 * C92136 * C97 +
          ((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
           C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
           (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
              C92097 * C92150 * C92136 * C98 +
          (C295 * C36314 + C512 * C36258 + C14887 * C36315 + C15159 * C36259 +
           (C4213 - C4212) * C36316 + (C4486 - C4485) * C36260 +
           (C92188 * C6729 - C265 * C6487) * C36317 +
           (C92188 * C7071 - C265 * C6835) * C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C92150 * C790 +
          ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
           (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
           (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
           (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
              C92097 * C92150 * C791 +
          (C5057 * C36314 + C5343 * C36258 + C36865 * C36315 + C37049 * C36259 +
           (C36868 - C36867) * C36316 + (C37051 - C37050) * C36260 +
           (C92188 * C36860 - C265 * C36722) * C36317 +
           (C92188 * C37047 - C265 * C36924) * C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C31334 +
           (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
            C9424 * C1717 - C9583 * C1593) *
               C31252 +
           (C9422 * C942 - C9581 * C797 + C9423 * C3513 - C9582 * C3357 +
            C9424 * C5887 - C9583 * C5703) *
               C31335 +
           (C9422 * C1132 - C9581 * C1008 + C9423 * C3731 - C9582 * C3587 +
            C9424 * C6139 - C9583 * C5973) *
               C92226) *
              C92097 * C92150 * C92136 * C97 +
          ((C9586 - C9585 + C9588 - C9587 + C9590 - C9589) * C31334 +
           (C9846 - C9845 + C9848 - C9847 + C9850 - C9849) * C31252 +
           (C11997 - C11998 + C11999 - C12000 + C12001 - C12002) * C31335 +
           (C12321 - C12322 + C12323 - C12324 + C12325 - C12326) * C92226) *
              C92097 * C92150 * C92136 * C98 +
          ((C9598 - C9597 + C9600 - C9599 + C9602 - C9601) * C31334 +
           (C9852 - C9851 + C9854 - C9853 + C9856 - C9855) * C31252 +
           (C9422 * C944 - C9581 * C795 + C9423 * C3515 - C9582 * C3359 +
            C9424 * C11994 - C9583 * C11784) *
               C31335 +
           (C9422 * C1134 - C9581 * C1010 + C9423 * C3733 - C9582 * C3589 +
            C9424 * C12319 - C9583 * C12106) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9422 * C266 - C9581 * C108 + C9423 * C1523 - C9582 * C1378 +
            C9424 * C1527 - C9583 * C1379) *
               C31334 +
           (C9422 * C495 - C9581 * C348 + C9423 * C1713 - C9582 * C1589 +
            C9424 * C1717 - C9583 * C1593) *
               C31252 +
           (C40498 - C40499 + C40500 - C40501 + C40502 - C40503) * C31335 +
           (C40752 - C40753 + C40754 - C40755 + C40756 - C40757) * C92226) *
              C92097 * C92150 * C790 +
          ((C40499 - C40498 + C40501 - C40500 + C40503 - C40502) * C31334 +
           (C40753 - C40752 + C40755 - C40754 + C40757 - C40756) * C31252 +
           (C40510 - C40511 + C40512 - C40513 + C40514 - C40515) * C31335 +
           (C40758 - C40759 + C40760 - C40761 + C40762 - C40763) * C92226) *
              C92097 * C92150 * C791 +
          ((C40511 - C40510 + C40513 - C40512 + C40515 - C40514) * C31334 +
           (C40759 - C40758 + C40761 - C40760 + C40763 - C40762) * C31252 +
           (C9422 * C5030 - C9581 * C4815 + C9423 * C8690 - C9582 * C8454 +
            C9424 * C37384 - C9583 * C37278) *
               C31335 +
           (C9422 * C5329 - C9581 * C5139 + C9423 * C9018 - C9582 * C8800 +
            C9424 * C37539 - C9583 * C37436) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
            (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
               C92226) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
               C31252 +
           ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
            (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
               C92226) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C265 +
            (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C92188) *
               C31252 +
           ((C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
             C31251 * C6488 - C31258 * C6487) *
                C265 +
            (C31249 * C5421 - C31254 * C5417 + C31250 * C5422 - C31256 * C5418 +
             C31251 * C7174 - C31258 * C7173) *
                C92188) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
             C31251 * C804 - C31258 * C795) *
                C265 +
            (C31249 * C1198 - C31254 * C1190 + C31250 * C1199 - C31256 * C1191 +
             C31251 * C1200 - C31258 * C1192) *
                C92188) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C265 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C92188) *
               C31252 +
           ((C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
             C31258 * C794 - C31251 * C802) *
                C265 +
            (C31254 * C1191 - C31249 * C1199 + C31256 * C1192 - C31250 * C1200 +
             C31258 * C1193 - C31251 * C1201) *
                C92188) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C265 +
            (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
             C31251 * C577 - C31258 * C571) *
                C92188) *
               C31252 +
           ((C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
             C31251 * C1974 - C31258 * C1973) *
                C265 +
            (C31249 * C1200 - C31254 * C1192 + C31250 * C1201 - C31256 * C1193 +
             C31251 * C2433 - C31258 * C2432) *
                C92188) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C92097 * C808 - C36262 * C797) * C265 +
            (C92097 * C1198 - C36262 * C1190) * C92188) *
               C36259 +
           ((C92097 * C810 - C36262 * C798) * C265 +
            (C92097 * C1202 - C36262 * C1194) * C92188) *
               C36260 +
           ((C92097 * C4820 - C36262 * C4815) * C265 +
            (C92097 * C5421 - C36262 * C5417) * C92188) *
               C36261) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C265 +
            (C36262 * C568 - C92097 * C574) * C92188) *
               C36258 +
           ((C36262 * C796 - C92097 * C806) * C265 +
            (C36262 * C1191 - C92097 * C1199) * C92188) *
               C36259 +
           ((C36262 * C799 - C92097 * C812) * C265 +
            (C36262 * C1195 - C92097 * C1203) * C92188) *
               C36260 +
           ((C36262 * C4814 - C92097 * C4818) * C265 +
            (C36262 * C5418 - C92097 * C5422) * C92188) *
               C36261) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C265 +
            (C92097 * C575 - C36262 * C569) * C92188) *
               C36258 +
           ((C92097 * C804 - C36262 * C795) * C265 +
            (C92097 * C1200 - C36262 * C1192) * C92188) *
               C36259 +
           ((C92097 * C814 - C36262 * C800) * C265 +
            (C92097 * C1204 - C36262 * C1196) * C92188) *
               C36260 +
           ((C92097 * C6488 - C36262 * C6487) * C265 +
            (C92097 * C7174 - C36262 * C7173) * C92188) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C92150 * C790 +
          (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
           ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
           ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
           ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
              C92150 * C791 +
          (C37118 * C36258 + C37119 * C36259 +
           ((C36940 - C36939) * C265 + (C37113 - C37112) * C92188) * C36260 +
           ((C92097 * C36723 - C36262 * C36722) * C265 +
            (C92097 * C37102 - C36262 * C37101) * C92188) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C9581 +
            (C92097 * C573 - C36262 * C567) * C9422 +
            (C92097 * C1389 - C36262 * C1378) * C9582 +
            (C92097 * C1779 - C36262 * C1771) * C9423 +
            (C92097 * C1391 - C36262 * C1379) * C9583 +
            (C92097 * C1783 - C36262 * C1775) * C9424) *
               C31252 +
           ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
            (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
            (C92097 * C5711 - C36262 * C5703) * C9583 +
            (C92097 * C6225 - C36262 * C6219) * C9424) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C9581 +
            (C36262 * C568 - C92097 * C574) * C9422 +
            (C36262 * C1377 - C92097 * C1387) * C9582 +
            (C36262 * C1772 - C92097 * C1780) * C9423 +
            (C36262 * C1380 - C92097 * C1393) * C9583 +
            (C36262 * C1776 - C92097 * C1784) * C9424) *
               C31252 +
           ((C37983 - C37984) * C9581 + (C38193 - C38194) * C9422 +
            (C36262 * C3358 - C92097 * C3363) * C9582 +
            (C36262 * C3802 - C92097 * C3806) * C9423 +
            (C36262 * C5704 - C92097 * C5713) * C9583 +
            (C36262 * C6220 - C92097 * C6226) * C9424) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C9581 +
            (C92097 * C575 - C36262 * C569) * C9422 +
            (C92097 * C1385 - C36262 * C1376) * C9582 +
            (C92097 * C1781 - C36262 * C1773) * C9423 +
            (C92097 * C1395 - C36262 * C1381) * C9583 +
            (C92097 * C1785 - C36262 * C1777) * C9424) *
               C31252 +
           ((C92097 * C804 - C36262 * C795) * C9581 +
            (C92097 * C1200 - C36262 * C1192) * C9422 +
            (C92097 * C3365 - C36262 * C3359) * C9582 +
            (C92097 * C3807 - C36262 * C3803) * C9423 +
            (C92097 * C11785 - C36262 * C11784) * C9583 +
            (C92097 * C12425 - C36262 * C12424) * C9424) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C9581 +
            (C92097 * C573 - C36262 * C567) * C9422 +
            (C92097 * C1389 - C36262 * C1378) * C9582 +
            (C92097 * C1779 - C36262 * C1771) * C9423 +
            (C92097 * C1391 - C36262 * C1379) * C9583 +
            (C92097 * C1783 - C36262 * C1775) * C9424) *
               C31252 +
           ((C36927 - C36928) * C9581 + (C37104 - C37105) * C9422 +
            (C39228 - C39227) * C9582 + (C39444 - C39443) * C9423 +
            (C40596 - C40597) * C9583 + (C40838 - C40839) * C9424) *
               C92226) *
              C92150 * C790 +
          (((C36928 - C36927) * C9581 + (C37105 - C37104) * C9422 +
            (C39227 - C39228) * C9582 + (C39443 - C39444) * C9423 +
            (C40597 - C40596) * C9583 + (C40839 - C40838) * C9424) *
               C31252 +
           ((C36932 - C36931) * C9581 + (C37108 - C37107) * C9422 +
            (C39231 - C39232) * C9582 + (C39445 - C39446) * C9423 +
            (C40600 - C40601) * C9583 + (C40840 - C40841) * C9424) *
               C92226) *
              C92150 * C791 +
          ((C36943 * C9581 + C37114 * C9422 + (C39232 - C39231) * C9582 +
            (C39446 - C39445) * C9423 + (C40601 - C40600) * C9583 +
            (C40841 - C40840) * C9424) *
               C31252 +
           (C36945 * C9581 + C37115 * C9422 + (C39236 - C39235) * C9582 +
            (C39448 - C39447) * C9423 +
            (C92097 * C37279 - C36262 * C37278) * C9583 +
            (C92097 * C37591 - C36262 * C37590) * C9424) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C265 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C92188) *
               C31249 +
           ((C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
                C265 +
            (C31334 * C1191 - C31252 * C1257 + C31335 * C1195 -
             C92226 * C1261) *
                C92188) *
               C31250 +
           ((C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
                C265 +
            (C31334 * C1192 - C31252 * C1258 + C31335 * C1196 -
             C92226 * C1262) *
                C92188) *
               C31251) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C265 +
            (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
             C31335 * C5417) *
                C92188) *
               C31249 +
           ((C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C265 +
            (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
             C31335 * C5418) *
                C92188) *
               C31250 +
           ((C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
                C265 +
            (C31252 * C1262 - C31334 * C1196 + C92226 * C7281 -
             C31335 * C7173) *
                C92188) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C265 +
            (C31864 - C31863 + C31866 - C31865) * C92188) *
               C31249 +
           ((C31346 - C31345 + C31348 - C31347) * C265 +
            (C31869 - C31868 + C31871 - C31870) * C92188) *
               C31250 +
           ((C31353 - C31354 + C31355 - C31356) * C265 +
            (C31872 - C31873 + C31874 - C31875) * C92188) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31880 * C31249 +
           ((C31354 - C31353 + C31356 - C31355) * C265 +
            (C31873 - C31872 + C31875 - C31874) * C92188) *
               C31250 +
           ((C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
                C265 +
            (C31252 * C633 - C31334 * C571 + C92226 * C2500 - C31335 * C2432) *
                C92188) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C265 +
           (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
            C36316 * C1195 - C36260 * C1261 + C36317 * C5418 - C36261 * C5518) *
               C92188) *
              C92097 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C265 +
           (C36258 * C631 - C36314 * C569 + C36259 * C1258 - C36315 * C1192 +
            C36260 * C1262 - C36316 * C1196 + C36261 * C7281 - C36317 * C7173) *
               C92188) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C265 +
           (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
            C36316 * C5417 - C36260 * C5517 + C36317 * C5419 - C36261 * C5519) *
               C92188) *
              C92097 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C265 +
           (C36258 * C1260 - C36314 * C1194 + C36259 * C5517 - C36315 * C5417 +
            C36260 * C5519 - C36316 * C5419 + C36261 * C37169 -
            C36317 * C37101) *
               C92188) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C9581 +
           (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
               C9422 +
           (C31252 * C1457 - C31334 * C1378 + C92226 * C3439 - C31335 * C3357) *
               C9582 +
           (C31252 * C1837 - C31334 * C1771 + C92226 * C3875 - C31335 * C3801) *
               C9423 +
           (C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C9583 +
           (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 - C31335 * C6219) *
               C9424) *
              C92097 * C92150 * C92136 * C97 +
          ((C31338 - C31337 + C31340 - C31339) * C9581 +
           (C31864 - C31863 + C31866 - C31865) * C9422 +
           (C34545 - C34546 + C34547 - C34548) * C9582 +
           (C35177 - C35178 + C35179 - C35180) * C9423 +
           (C31334 * C1380 - C31252 * C1462 + C31335 * C5704 - C92226 * C5803) *
               C9583 +
           (C31334 * C1776 - C31252 * C1842 + C31335 * C6220 - C92226 * C6307) *
               C9424) *
              C92097 * C92150 * C92136 * C98 +
          (C31365 * C9581 + C31878 * C9422 +
           (C34554 - C34553 + C34556 - C34555) * C9582 +
           (C35182 - C35181 + C35184 - C35183) * C9423 +
           (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
            C31335 * C11784) *
               C9583 +
           (C31252 * C1843 - C31334 * C1777 + C92226 * C12524 -
            C31335 * C12424) *
               C9424) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C9581 +
           (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
               C9422 +
           (C31252 * C1457 - C31334 * C1378 + C92226 * C3439 - C31335 * C3357) *
               C9582 +
           (C31252 * C1837 - C31334 * C1771 + C92226 * C3875 - C31335 * C3801) *
               C9423 +
           (C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C9583 +
           (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 - C31335 * C6219) *
               C9424) *
              C92097 * C92150 * C790 +
          ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
               C9581 +
           (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 - C92226 * C1260) *
               C9422 +
           (C31334 * C3357 - C31252 * C3439 + C31335 * C5702 - C92226 * C5799) *
               C9582 +
           (C31334 * C3801 - C31252 * C3875 + C31335 * C6217 - C92226 * C6303) *
               C9423 +
           (C31334 * C5703 - C31252 * C5801 + C31335 * C5705 - C92226 * C5802) *
               C9583 +
           (C31334 * C6219 - C31252 * C6305 + C31335 * C6221 - C92226 * C6306) *
               C9424) *
              C92097 * C92150 * C791 +
          ((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
               C9581 +
           (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 - C31335 * C5417) *
               C9422 +
           (C31252 * C5799 - C31334 * C5702 + C92226 * C8588 - C31335 * C8454) *
               C9582 +
           (C31252 * C6303 - C31334 * C6217 + C92226 * C9232 - C31335 * C9122) *
               C9423 +
           (C31252 * C5802 - C31334 * C5705 + C92226 * C37332 -
            C31335 * C37278) *
               C9583 +
           (C31252 * C6306 - C31334 * C6221 + C92226 * C37642 -
            C31335 * C37590) *
               C9424) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C790 -
          ((C4738 * C92226 + C2594 * C31252) * C31251 +
           (C4737 * C92226 + C2595 * C31252) * C31250 +
           (C5625 * C92226 + C5624 * C31252) * C31249) *
              C92150 * C791 +
          ((C5625 * C31252 + C5627 * C92226) * C31249 +
           (C4737 * C31252 + C5626 * C92226) * C31250 +
           (C4738 * C31252 +
            (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C92136 * C97 -
          ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
           (C31956 + C31955) * C31249) *
              C92150 * C92136 * C98 +
          (C31961 * C31249 + (C31960 + C31959) * C31250 +
           (C736 * C31252 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C92136 * C97 -
          (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
              C92097 * C92150 * C92136 * C98 +
          (C734 * C36258 + C2594 * C36259 + C4738 * C36260 +
           (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
               C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C790 -
          (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 + C5624 * C36258) *
              C92097 * C92150 * C791 +
          (C5625 * C36258 + C5627 * C36259 + C37228 * C36260 +
           (C265 * C36860 - C701 * C36722 - C265 * C37101 + C92188 * C37220) *
               C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C31252 +
           (C9581 * C942 - C10082 * C797 - C9581 * C1190 + C9422 * C1317 +
            C9582 * C3513 - C10083 * C3357 - C9582 * C3801 + C9423 * C3945 +
            C9583 * C5887 - C10084 * C5703 - C9583 * C6219 + C9424 * C6385) *
               C92226) *
              C92097 * C92150 * C92136 * C97 -
          ((C12647 + C12648 + C12649) * C92226 +
           (C10124 + C10123 + C10122) * C31252) *
              C92097 * C92150 * C92136 * C98 +
          ((C10127 + C10126 + C10125) * C31252 +
           (C9581 * C944 - C10082 * C795 - C9581 * C1192 + C9422 * C1315 +
            C9582 * C3515 - C10083 * C3359 - C9582 * C3803 + C9423 * C3947 +
            C9583 * C11994 - C10084 * C11784 - C9583 * C12424 +
            C9424 * C12627) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9581 * C266 - C10082 * C108 - C9581 * C567 + C9422 * C702 +
            C9582 * C1523 - C10083 * C1378 - C9582 * C1771 + C9423 * C1898 +
            C9583 * C1527 - C10084 * C1379 - C9583 * C1775 + C9424 * C1899) *
               C31252 +
           (C41026 + C41027 + C41028) * C92226) *
              C92097 * C92150 * C790 -
          ((C41029 + C41030 + C41031) * C92226 +
           (C41028 + C41027 + C41026) * C31252) *
              C92097 * C92150 * C791 +
          ((C41031 + C41030 + C41029) * C31252 +
           (C9581 * C5030 - C10082 * C4815 - C9581 * C5417 + C9422 * C5596 +
            C9582 * C8690 - C10083 * C8454 - C9582 * C9122 + C9423 * C9332 +
            C9583 * C37384 - C10084 * C37278 - C9583 * C37590 +
            C9424 * C37693) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C92334 +
             (C51645 + C51646) * C92252) *
                C31252 +
            ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) *
                C92226) *
               C92150 * C1969 -
           (((C48935 + C48936) * C92252 + (C45595 + C45594) * C92334) * C92226 +
            ((C48937 + C48938) * C92252 + (C45593 + C45592) * C92334) *
                C31252) *
               C92150 * C1970) *
              C1971 +
          ((((C47035 + C47036) * C92334 + (C52613 + C52614) * C92252) * C31252 +
            ((C47037 + C47038) * C92334 +
             (C90121 * C5707 - C44796 * C5701 - C90121 * C5708 +
              C92320 * C5719 + C90114 * C7489 - C44798 * C7488 -
              C90114 * C7490 + C92102 * C7491) *
                 C92252) *
                C92226) *
               C92150 * C1970 -
           (((C52614 + C52613) * C92252 + (C47036 + C47035) * C92334) * C92226 +
            ((C90114 * C1385 - C44798 * C1376 - C90114 * C1386 +
              C92102 * C1400 + C90121 * C1387 - C44796 * C1377 -
              C90121 * C1388 + C92320 * C1401) *
                 C92252 +
             (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
              C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                 C92334) *
                C31252) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C90121 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92320 +
             (C31337 - C31338 + C31339 - C31340) * C90114 +
             (C31341 - C31342 + C31343 - C31344) * C92102) *
                C92334 +
            ((C41214 - C41215 + C41216 - C41217) * C90121 +
             (C41218 - C41219 + C41220 - C41221) * C92320 +
             (C34546 - C34545 + C34548 - C34547) * C90114 +
             (C34550 - C34549 + C34552 - C34551) * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C90121 +
             (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                 C92320 +
             (C33589 - C33590 + C33591 - C33592) * C90114 +
             (C33593 - C33594 + C33595 - C33596) * C92102) *
                C92334 +
            ((C43921 - C43922 + C43923 - C43924) * C90121 +
             (C43925 - C43926 + C43927 - C43928) * C92320 +
             (C52745 - C52746 + C52747 - C52748) * C90114 +
             (C52749 - C52750 + C52751 - C52752) * C92102) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C90121 +
             (C31342 - C31341 + C31344 - C31343) * C92320 +
             (C31346 - C31345 + C31348 - C31347) * C90114 +
             (C31350 - C31349 + C31352 - C31351) * C92102) *
                C92334 +
            ((C34545 - C34546 + C34547 - C34548) * C90121 +
             (C34549 - C34550 + C34551 - C34552) * C92320 +
             (C34553 - C34554 + C34555 - C34556) * C90114 +
             (C34557 - C34558 + C34559 - C34560) * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C33590 - C33589 + C33592 - C33591) * C90121 +
             (C33594 - C33593 + C33596 - C33595) * C92320 +
             (C33598 - C33597 + C33600 - C33599) * C90114 +
             (C33602 - C33601 + C33604 - C33603) * C92102) *
                C92334 +
            ((C52746 - C52745 + C52748 - C52747) * C90121 +
             (C52750 - C52749 + C52752 - C52751) * C92320 +
             (C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
              C31335 * C7488) *
                 C90114 +
             (C31252 * C3445 - C31334 * C3366 + C92226 * C7591 -
              C31335 * C7490) *
                 C92102) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C90121 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92320 +
             (C19901 - C19902 + C19903 - C19904) * C90114 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C31252 +
            ((C25850 - C25851 + C25852 - C25853) * C90121 +
             (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
             C27897 * C92102) *
                C92226) *
               C92150 * C1969 +
           (((C25851 - C25850 + C25853 - C25852) * C90121 +
             (C25855 - C25854 + C25857 - C25856) * C92320 + C27898 * C90114 +
             C27899 * C92102) *
                C31252 +
            ((C25858 - C25859 + C25860 - C25861) * C90121 +
             (C25862 - C25863 + C25864 - C25865) * C92320 +
             (C25866 - C25867 + C25868 - C25869) * C90114 +
             (C25870 - C25871 + C25872 - C25873) * C92102) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C90121 +
             (C19906 - C19905 + C19908 - C19907) * C92320 +
             (C19910 - C19909 + C19912 - C19911) * C90114 +
             (C19914 - C19913 + C19916 - C19915) * C92102) *
                C31252 +
            (C27898 * C90121 + C27899 * C92320 +
             (C22169 - C22170 + C22171 - C22172) * C90114 +
             (C22173 - C22174 + C22175 - C22176) * C92102) *
                C92226) *
               C92150 * C1969 +
           ((C27896 * C90121 + C27897 * C92320 +
             (C22170 - C22169 + C22172 - C22171) * C90114 +
             (C22174 - C22173 + C22176 - C22175) * C92102) *
                C31252 +
            ((C25867 - C25866 + C25869 - C25868) * C90121 +
             (C25871 - C25870 + C25873 - C25872) * C92320 +
             (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                 C90114 +
             (C92334 * C956 - C19898 * C815 + C92252 * C7703 - C19899 * C7490) *
                 C92102) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C31334 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C31252 +
             (C45829 - C45830 + C45831 - C45832) * C31335 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C92334 +
            ((C51945 - C51946 + C51947 - C51948) * C31334 +
             (C51949 - C51950 + C51951 - C51952) * C31252 +
             (C49234 - C49233 + C49236 - C49235) * C31335 +
             (C49238 - C49237 + C49240 - C49239) * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C31334 +
             (C45834 - C45833 + C45836 - C45835) * C31252 +
             (C45838 - C45837 + C45840 - C45839) * C31335 +
             (C45842 - C45841 + C45844 - C45843) * C92226) *
                C92334 +
            ((C49233 - C49234 + C49235 - C49236) * C31334 +
             (C49237 - C49238 + C49239 - C49240) * C31252 +
             (C49241 - C49242 + C49243 - C49244) * C31335 +
             (C49245 - C49246 + C49247 - C49248) * C92226) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C31334 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C31252 +
             (C47345 - C47346 + C47347 - C47348) * C31335 +
             (C47349 - C47350 + C47351 - C47352) * C92226) *
                C92334 +
            ((C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
              C92102 * C1385) *
                 C31334 +
             (C90121 * C1590 - C92320 * C1598 + C90114 * C1591 -
              C92102 * C1599) *
                 C31252 +
             (C53013 - C53014 + C53015 - C53016) * C31335 +
             (C53017 - C53018 + C53019 - C53020) * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C31334 +
             (C47350 - C47349 + C47352 - C47351) * C31252 +
             (C47354 - C47353 + C47356 - C47355) * C31335 +
             (C47358 - C47357 + C47360 - C47359) * C92226) *
                C92334 +
            ((C53014 - C53013 + C53016 - C53015) * C31334 +
             (C53018 - C53017 + C53020 - C53019) * C31252 +
             (C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
              C90114 * C7488) *
                 C31335 +
             (C92320 * C5978 - C90121 * C5972 + C92102 * C7811 -
              C90114 * C7810) *
                 C92226) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
              C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                 C92320 +
             (C31627 + C31628) * C92102) *
                C92334 +
            ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) *
                C92252) *
               C92150 * C1969 -
           (((C53163 + C53164) * C92102 + (C44279 + C44278) * C92320) * C92252 +
            ((C33937 + C33938) * C92102 +
             (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
              C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                 C92320) *
                C92334) *
               C92150 * C1970) *
              C1971 +
          ((((C33938 + C33937) * C92320 + (C33936 + C33935) * C92102) * C92334 +
            ((C53164 + C53163) * C92320 +
             (C31334 * C3441 - C31588 * C3359 - C31334 * C3589 +
              C31252 * C3663 + C31335 * C7590 - C31589 * C7488 -
              C31335 * C7810 + C92226 * C7910) *
                 C92102) *
                C92252) *
               C92150 * C1970 -
           (((C34879 + C34880) * C92102 + (C34881 + C34882) * C92320) * C92252 +
            ((C31630 + C31629) * C92102 + (C31628 + C31627) * C92320) *
                C92334) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C31334 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C31252 +
             (C25850 - C25851 + C25852 - C25853) * C31335 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C92320 +
            ((C19901 - C19902 + C19903 - C19904) * C31334 +
             (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
             C28316 * C92226) *
                C92102) *
               C92150 * C1969 +
           (((C25851 - C25850 + C25853 - C25852) * C31334 +
             (C26169 - C26168 + C26171 - C26170) * C31252 +
             (C25858 - C25859 + C25860 - C25861) * C31335 +
             (C26172 - C26173 + C26174 - C26175) * C92226) *
                C92320 +
            (C27898 * C31334 + C28317 * C31252 +
             (C25866 - C25867 + C25868 - C25869) * C31335 +
             (C26176 - C26177 + C26178 - C26179) * C92226) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C31334 +
             (C20154 - C20153 + C20156 - C20155) * C31252 + C27898 * C31335 +
             C28317 * C92226) *
                C92320 +
            ((C19910 - C19909 + C19912 - C19911) * C31334 +
             (C20159 - C20158 + C20161 - C20160) * C31252 +
             (C22169 - C22170 + C22171 - C22172) * C31335 +
             (C22482 - C22483 + C22484 - C22485) * C92226) *
                C92102) *
               C92150 * C1969 +
           ((C27896 * C31334 + C28316 * C31252 +
             (C25867 - C25866 + C25869 - C25868) * C31335 +
             (C26177 - C26176 + C26179 - C26178) * C92226) *
                C92320 +
            ((C22170 - C22169 + C22172 - C22171) * C31334 +
             (C22483 - C22482 + C22485 - C22484) * C31252 +
             (C92334 * C948 - C19898 * C800 + C92252 * C7702 - C19899 * C7488) *
                 C31335 +
             (C92334 * C1138 - C19898 * C1014 + C92252 * C8030 -
              C19899 * C7810) *
                 C92226) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C19898 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92334 +
             (C51945 - C51946 + C51947 - C51948) * C19899 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C31252 +
            ((C45829 - C45830 + C45831 - C45832) * C19898 +
             (C46081 - C46082 + C46083 - C46084) * C92334 +
             (C49234 - C49233 + C49236 - C49235) * C19899 +
             (C49544 - C49543 + C49546 - C49545) * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C19898 +
             (C46082 - C46081 + C46084 - C46083) * C92334 +
             (C49233 - C49234 + C49235 - C49236) * C19899 +
             (C49543 - C49544 + C49545 - C49546) * C92252) *
                C31252 +
            ((C45838 - C45837 + C45840 - C45839) * C19898 +
             (C46087 - C46086 + C46089 - C46088) * C92334 +
             (C49241 - C49242 + C49243 - C49244) * C19899 +
             (C49547 - C49548 + C49549 - C49550) * C92252) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C19898 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C92334 +
             (C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
              C92102 * C1385) *
                 C19899 +
             (C90121 * C1772 - C92320 * C1780 + C90114 * C1773 -
              C92102 * C1781) *
                 C92252) *
                C31252 +
            ((C47345 - C47346 + C47347 - C47348) * C19898 +
             (C47676 - C47677 + C47678 - C47679) * C92334 +
             (C53013 - C53014 + C53015 - C53016) * C19899 +
             (C53425 - C53426 + C53427 - C53428) * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C19898 +
             (C47677 - C47676 + C47679 - C47678) * C92334 +
             (C53014 - C53013 + C53016 - C53015) * C19899 +
             (C53426 - C53425 + C53428 - C53427) * C92252) *
                C31252 +
            ((C47354 - C47353 + C47356 - C47355) * C19898 +
             (C47681 - C47680 + C47683 - C47682) * C92334 +
             (C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
              C90114 * C7488) *
                 C19899 +
             (C92320 * C6224 - C90121 * C6218 + C92102 * C8134 -
              C90114 * C8133) *
                 C92252) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C19898 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92334 +
             (C41214 - C41215 + C41216 - C41217) * C19899 +
             (C41781 - C41782 + C41783 - C41784) * C92252) *
                C92320 +
            ((C31337 - C31338 + C31339 - C31340) * C19898 +
             (C31863 - C31864 + C31865 - C31866) * C92334 +
             (C34546 - C34545 + C34548 - C34547) * C19899 +
             (C35178 - C35177 + C35180 - C35179) * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C19898 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92334 +
             (C43921 - C43922 + C43923 - C43924) * C19899 +
             (C44589 - C44590 + C44591 - C44592) * C92252) *
                C92320 +
            ((C33589 - C33590 + C33591 - C33592) * C19898 +
             (C34239 - C34240 + C34241 - C34242) * C92334 +
             (C52745 - C52746 + C52747 - C52748) * C19899 +
             (C53559 - C53560 + C53561 - C53562) * C92252) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C19898 +
             (C31864 - C31863 + C31866 - C31865) * C92334 +
             (C34545 - C34546 + C34547 - C34548) * C19899 +
             (C35177 - C35178 + C35179 - C35180) * C92252) *
                C92320 +
            ((C31346 - C31345 + C31348 - C31347) * C19898 +
             (C31869 - C31868 + C31871 - C31870) * C92334 +
             (C34553 - C34554 + C34555 - C34556) * C19899 +
             (C35181 - C35182 + C35183 - C35184) * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C33590 - C33589 + C33592 - C33591) * C19898 +
             (C34240 - C34239 + C34242 - C34241) * C92334 +
             (C52746 - C52745 + C52748 - C52747) * C19899 +
             (C53560 - C53559 + C53562 - C53561) * C92252) *
                C92320 +
            ((C33598 - C33597 + C33600 - C33599) * C19898 +
             (C34244 - C34243 + C34246 - C34245) * C92334 +
             (C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
              C31335 * C7488) *
                 C19899 +
             (C31252 * C3877 - C31334 * C3803 + C92226 * C8233 -
              C31335 * C8133) *
                 C92252) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C31252 +
             (C26510 + C26511) * C92226) *
                C92320 +
            ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
               C92150 * C1969 -
           (((C26512 + C26513) * C92226 + C28717 * C31252) * C92102 +
            ((C26514 + C26515) * C92226 + (C26511 + C26510) * C31252) *
                C92320) *
               C92150 * C1970) *
              C1971 +
          (((C28716 * C31252 + (C26513 + C26512) * C92226) * C92320 +
            ((C22807 + C22806) * C31252 +
             (C19898 * C948 - C20400 * C800 - C19898 * C1196 + C92334 * C1320 +
              C19899 * C7702 - C20401 * C7488 - C19899 * C8133 +
              C92252 * C8338) *
                 C92226) *
                C92102) *
               C92150 * C1970 -
           (((C22806 + C22807) * C92226 + (C20442 + C20441) * C31252) * C92102 +
            (C28717 * C92226 + (C20440 + C20439) * C31252) * C92320) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C92334 +
             (C51645 + C51646) * C92252) *
                C31252 +
            ((C45592 + C45593) * C92334 + C55039 * C92252) * C92226) *
               C2664 -
           (((C51647 + C51648) * C92252 + C55040 * C92334) * C92226 +
            ((C51649 + C51650) * C92252 + (C51646 + C51645) * C92334) *
                C31252) *
               C2665) *
              C1969 +
          (((C55039 * C92334 + (C51648 + C51647) * C92252) * C31252 +
            ((C48936 + C48935) * C92334 +
             (C90121 * C5715 - C44796 * C5705 - C90121 * C5716 +
              C92320 * C5723 + C90114 * C5717 - C44798 * C5706 -
              C90114 * C5718 + C92102 * C5724) *
                 C92252) *
                C92226) *
               C2665 -
           (((C48935 + C48936) * C92252 + (C45595 + C45594) * C92334) * C92226 +
            (C55040 * C92252 + (C45593 + C45592) * C92334) * C31252) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C90121 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92320 +
             (C31337 - C31338 + C31339 - C31340) * C90114 +
             (C31341 - C31342 + C31343 - C31344) * C92102) *
                C92334 +
            ((C41214 - C41215 + C41216 - C41217) * C90121 +
             (C41218 - C41219 + C41220 - C41221) * C92320 + C53975 * C90114 +
             C53976 * C92102) *
                C92252) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C90121 +
             (C41219 - C41218 + C41221 - C41220) * C92320 + C53977 * C90114 +
             C53978 * C92102) *
                C92334 +
            ((C41223 - C41222 + C41225 - C41224) * C90121 +
             (C41227 - C41226 + C41229 - C41228) * C92320 +
             (C42992 - C42993 + C42994 - C42995) * C90114 +
             (C42996 - C42997 + C42998 - C42999) * C92102) *
                C92252) *
               C2665) *
              C1969 +
          ((((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C90121 +
             (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                 C92320 +
             (C33589 - C33590 + C33591 - C33592) * C90114 +
             (C33593 - C33594 + C33595 - C33596) * C92102) *
                C92334 +
            ((C43921 - C43922 + C43923 - C43924) * C90121 +
             (C43925 - C43926 + C43927 - C43928) * C92320 +
             (C52745 - C52746 + C52747 - C52748) * C90114 +
             (C52749 - C52750 + C52751 - C52752) * C92102) *
                C92252) *
               C2664 +
           (((C43922 - C43921 + C43924 - C43923) * C90121 +
             (C43926 - C43925 + C43928 - C43927) * C92320 +
             (C52746 - C52745 + C52748 - C52747) * C90114 +
             (C52750 - C52749 + C52752 - C52751) * C92102) *
                C92334 +
            ((C43930 - C43929 + C43932 - C43931) * C90121 +
             (C43934 - C43933 + C43936 - C43935) * C92320 +
             (C31252 * C5803 - C31334 * C5704 + C92226 * C5804 -
              C31335 * C5706) *
                 C90114 +
             (C31252 * C5809 - C31334 * C5714 + C92226 * C5810 -
              C31335 * C5718) *
                 C92102) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C90121 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92320 +
             (C19901 - C19902 + C19903 - C19904) * C90114 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C31252 +
            ((C25850 - C25851 + C25852 - C25853) * C90121 +
             (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
             C27897 * C92102) *
                C92226) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C90121 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C92320 +
             (C23127 - C23128 + C23129 - C23130) * C90114 +
             (C23131 - C23132 + C23133 - C23134) * C92102) *
                C31252 +
            ((C30334 - C30335 + C30336 - C30337) * C90121 +
             (C30338 - C30339 + C30340 - C30341) * C92320 +
             (C29120 - C29121 + C29122 - C29123) * C90114 +
             (C29124 - C29125 + C29126 - C29127) * C92102) *
                C92226) *
               C2665) *
              C1969 +
          ((((C25851 - C25850 + C25853 - C25852) * C90121 +
             (C25855 - C25854 + C25857 - C25856) * C92320 + C27898 * C90114 +
             C27899 * C92102) *
                C31252 +
            ((C25858 - C25859 + C25860 - C25861) * C90121 +
             (C25862 - C25863 + C25864 - C25865) * C92320 +
             (C25866 - C25867 + C25868 - C25869) * C90114 +
             (C25870 - C25871 + C25872 - C25873) * C92102) *
                C92226) *
               C2664 +
           (((C30335 - C30334 + C30337 - C30336) * C90121 +
             (C30339 - C30338 + C30341 - C30340) * C92320 +
             (C29121 - C29120 + C29123 - C29122) * C90114 +
             (C29125 - C29124 + C29127 - C29126) * C92102) *
                C31252 +
            ((C92334 * C5885 - C19898 * C5702 + C92252 * C5889 -
              C19899 * C5705) *
                 C90121 +
             (C92334 * C5891 - C19898 * C5710 + C92252 * C5895 -
              C19899 * C5716) *
                 C92320 +
             (C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
              C19899 * C5706) *
                 C90114 +
             (C92334 * C5892 - C19898 * C5708 + C92252 * C5896 -
              C19899 * C5718) *
                 C92102) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C31334 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C31252 +
             (C45829 - C45830 + C45831 - C45832) * C31335 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C92334 +
            ((C51945 - C51946 + C51947 - C51948) * C31334 +
             (C51949 - C51950 + C51951 - C51952) * C31252 + C55439 * C31335 +
             C55440 * C92226) *
                C92252) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C31334 +
             (C51950 - C51949 + C51952 - C51951) * C31252 + C55441 * C31335 +
             C55442 * C92226) *
                C92334 +
            ((C51953 - C51954 + C51955 - C51956) * C31334 +
             (C51957 - C51958 + C51959 - C51960) * C31252 +
             (C51961 - C51962 + C51963 - C51964) * C31335 +
             (C51965 - C51966 + C51967 - C51968) * C92226) *
                C92252) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C31334 +
             (C45834 - C45833 + C45836 - C45835) * C31252 +
             (C45838 - C45837 + C45840 - C45839) * C31335 +
             (C45842 - C45841 + C45844 - C45843) * C92226) *
                C92334 +
            (C55441 * C31334 + C55442 * C31252 +
             (C49241 - C49242 + C49243 - C49244) * C31335 +
             (C49245 - C49246 + C49247 - C49248) * C92226) *
                C92252) *
               C2664 +
           ((C55439 * C31334 + C55440 * C31252 +
             (C49242 - C49241 + C49244 - C49243) * C31335 +
             (C49246 - C49245 + C49248 - C49247) * C92226) *
                C92334 +
            ((C51962 - C51961 + C51964 - C51963) * C31334 +
             (C51966 - C51965 + C51968 - C51967) * C31252 +
             (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
              C90114 * C5706) *
                 C31335 +
             (C92320 * C5981 - C90121 * C5975 + C92102 * C5982 -
              C90114 * C5976) *
                 C92226) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
              C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                 C92320 +
             (C31627 + C31628) * C92102) *
                C92334 +
            ((C41537 + C41538) * C92320 + C54377 * C92102) * C92252) *
               C2664 -
           (((C43315 + C43314) * C92102 + (C41540 + C41539) * C92320) * C92252 +
            (C54378 * C92102 + (C41538 + C41537) * C92320) * C92334) *
               C2665) *
              C1969 +
          ((((C44278 + C44279) * C92320 + (C53164 + C53163) * C92102) * C92334 +
            ((C44280 + C44281) * C92320 +
             (C31334 * C5803 - C31588 * C5704 - C31334 * C5974 +
              C31252 * C6061 + C31335 * C5804 - C31589 * C5706 -
              C31335 * C5976 + C92226 * C6062) *
                 C92102) *
                C92252) *
               C2665 -
           (((C53163 + C53164) * C92102 + (C44279 + C44278) * C92320) * C92252 +
            ((C33937 + C33938) * C92102 +
             (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
              C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                 C92320) *
                C92334) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C31334 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C31252 +
             (C25850 - C25851 + C25852 - C25853) * C31335 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C92320 +
            ((C19901 - C19902 + C19903 - C19904) * C31334 +
             (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
             C28316 * C92226) *
                C92102) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C31334 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C31252 +
             (C30334 - C30335 + C30336 - C30337) * C31335 +
             (C30758 - C30759 + C30760 - C30761) * C92226) *
                C92320 +
            ((C23127 - C23128 + C23129 - C23130) * C31334 +
             (C23452 - C23453 + C23454 - C23455) * C31252 +
             (C29120 - C29121 + C29122 - C29123) * C31335 +
             (C29520 - C29521 + C29522 - C29523) * C92226) *
                C92102) *
               C2665) *
              C1969 +
          ((((C25851 - C25850 + C25853 - C25852) * C31334 +
             (C26169 - C26168 + C26171 - C26170) * C31252 +
             (C25858 - C25859 + C25860 - C25861) * C31335 +
             (C26172 - C26173 + C26174 - C26175) * C92226) *
                C92320 +
            (C27898 * C31334 + C28317 * C31252 +
             (C25866 - C25867 + C25868 - C25869) * C31335 +
             (C26176 - C26177 + C26178 - C26179) * C92226) *
                C92102) *
               C2664 +
           (((C30335 - C30334 + C30337 - C30336) * C31334 +
             (C30759 - C30758 + C30761 - C30760) * C31252 +
             (C92334 * C5885 - C19898 * C5702 + C92252 * C5889 -
              C19899 * C5705) *
                 C31335 +
             (C92334 * C6137 - C19898 * C5971 + C92252 * C6140 -
              C19899 * C5975) *
                 C92226) *
                C92320 +
            ((C29121 - C29120 + C29123 - C29122) * C31334 +
             (C29521 - C29520 + C29523 - C29522) * C31252 +
             (C92334 * C5886 - C19898 * C5701 + C92252 * C5890 -
              C19899 * C5706) *
                 C31335 +
             (C92334 * C6138 - C19898 * C5972 + C92252 * C6142 -
              C19899 * C5976) *
                 C92226) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C19898 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92334 +
             (C51945 - C51946 + C51947 - C51948) * C19899 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C31252 +
            ((C45829 - C45830 + C45831 - C45832) * C19898 +
             (C46081 - C46082 + C46083 - C46084) * C92334 + C55439 * C19899 +
             C55837 * C92252) *
                C92226) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C19898 +
             (C52264 - C52263 + C52266 - C52265) * C92334 +
             (C51953 - C51954 + C51955 - C51956) * C19899 +
             (C52267 - C52268 + C52269 - C52270) * C92252) *
                C31252 +
            (C55441 * C19898 + C55838 * C92334 +
             (C51961 - C51962 + C51963 - C51964) * C19899 +
             (C52271 - C52272 + C52273 - C52274) * C92252) *
                C92226) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C19898 +
             (C46082 - C46081 + C46084 - C46083) * C92334 + C55441 * C19899 +
             C55838 * C92252) *
                C31252 +
            ((C45838 - C45837 + C45840 - C45839) * C19898 +
             (C46087 - C46086 + C46089 - C46088) * C92334 +
             (C49241 - C49242 + C49243 - C49244) * C19899 +
             (C49547 - C49548 + C49549 - C49550) * C92252) *
                C92226) *
               C2664 +
           ((C55439 * C19898 + C55837 * C92334 +
             (C51962 - C51961 + C51964 - C51963) * C19899 +
             (C52272 - C52271 + C52274 - C52273) * C92252) *
                C31252 +
            ((C49242 - C49241 + C49244 - C49243) * C19898 +
             (C49548 - C49547 + C49550 - C49549) * C92334 +
             (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
              C90114 * C5706) *
                 C19899 +
             (C92320 * C6227 - C90121 * C6221 + C92102 * C6228 -
              C90114 * C6222) *
                 C92252) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C19898 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92334 +
             (C41214 - C41215 + C41216 - C41217) * C19899 +
             (C41781 - C41782 + C41783 - C41784) * C92252) *
                C92320 +
            ((C31337 - C31338 + C31339 - C31340) * C19898 +
             (C31863 - C31864 + C31865 - C31866) * C92334 + C53975 * C19899 +
             C54777 * C92252) *
                C92102) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C19898 +
             (C41782 - C41781 + C41784 - C41783) * C92334 +
             (C41223 - C41222 + C41225 - C41224) * C19899 +
             (C41786 - C41785 + C41788 - C41787) * C92252) *
                C92320 +
            (C53977 * C19898 + C54778 * C92334 +
             (C42992 - C42993 + C42994 - C42995) * C19899 +
             (C43614 - C43615 + C43616 - C43617) * C92252) *
                C92102) *
               C2665) *
              C1969 +
          ((((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C19898 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92334 +
             (C43921 - C43922 + C43923 - C43924) * C19899 +
             (C44589 - C44590 + C44591 - C44592) * C92252) *
                C92320 +
            ((C33589 - C33590 + C33591 - C33592) * C19898 +
             (C34239 - C34240 + C34241 - C34242) * C92334 +
             (C52745 - C52746 + C52747 - C52748) * C19899 +
             (C53559 - C53560 + C53561 - C53562) * C92252) *
                C92102) *
               C2664 +
           (((C43922 - C43921 + C43924 - C43923) * C19898 +
             (C44590 - C44589 + C44592 - C44591) * C92334 +
             (C43930 - C43929 + C43932 - C43931) * C19899 +
             (C44594 - C44593 + C44596 - C44595) * C92252) *
                C92320 +
            ((C52746 - C52745 + C52748 - C52747) * C19898 +
             (C53560 - C53559 + C53562 - C53561) * C92334 +
             (C31252 * C5803 - C31334 * C5704 + C92226 * C5804 -
              C31335 * C5706) *
                 C19899 +
             (C31252 * C6307 - C31334 * C6220 + C92226 * C6308 -
              C31335 * C6222) *
                 C92252) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C31252 +
             (C26510 + C26511) * C92226) *
                C92320 +
            ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
               C2664 -
           (((C29932 + C29933) * C92226 + (C23787 + C23788) * C31252) * C92102 +
            ((C31174 + C31175) * C92226 +
             (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
              C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
              C19898 * C1771 + C92334 * C1898) *
                 C31252) *
                C92320) *
               C2665) *
              C1969 +
          ((((C31175 + C31174) * C31252 +
             (C19898 * C5885 - C20400 * C5702 - C19898 * C6217 +
              C92334 * C6384 + C19899 * C5889 - C20401 * C5705 -
              C19899 * C6221 + C92252 * C6386) *
                 C92226) *
                C92320 +
            ((C29933 + C29932) * C31252 +
             (C19898 * C5886 - C20400 * C5701 - C19898 * C6218 +
              C92334 * C6383 + C19899 * C5890 - C20401 * C5706 -
              C19899 * C6222 + C92252 * C6388) *
                 C92226) *
                C92102) *
               C2665 -
           (((C26512 + C26513) * C92226 + C28717 * C31252) * C92102 +
            ((C26514 + C26515) * C92226 + (C26511 + C26510) * C31252) *
                C92320) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92334 +
            (C90121 * C1389 - C44796 * C1378 - C90121 * C1390 + C92320 * C1402 +
             C90114 * C1387 - C44798 * C1377 - C90114 * C1388 +
             C92102 * C1401) *
                C92252) *
               C31252 +
           ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) * C92226) *
              C92150 * C790 -
          (((C48935 + C48936) * C92252 + (C45595 + C45594) * C92334) * C92226 +
           ((C48937 + C48938) * C92252 + (C45593 + C45592) * C92334) * C31252) *
              C92150 * C791 +
          ((C45598 * C92334 + (C48936 + C48935) * C92252) * C31252 +
           ((C45597 + C45596) * C92334 +
            (C90121 * C8456 - C44796 * C8454 - C90121 * C8457 + C92320 * C8460 +
             C90114 * C8458 - C44798 * C8455 - C90114 * C8459 +
             C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92334 +
            (C90121 * C1389 - C44796 * C1378 - C90121 * C1390 + C92320 * C1402 +
             C90114 * C1387 - C44798 * C1377 - C90114 * C1388 +
             C92102 * C1401) *
                C92252) *
               C31252 +
           ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C90114 * C3365 - C44798 * C3359 - C90114 * C3366 + C92102 * C3371 +
             C90121 * C3363 - C44796 * C3358 - C90121 * C3364 +
             C92320 * C3370) *
                C92252 +
            (C47036 + C47035) * C92334) *
               C92226 +
           ((C90114 * C1385 - C44798 * C1376 - C90114 * C1386 + C92102 * C1400 +
             C90121 * C1387 - C44796 * C1377 - C90121 * C1388 +
             C92320 * C1401) *
                C92252 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92334) *
               C31252) *
              C92150 * C92136 * C98 +
          (((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
             C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
                C92334 +
            (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
             C90114 * C1383 - C44798 * C1375 - C90114 * C1384 +
             C92102 * C1399) *
                C92252) *
               C31252 +
           ((C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
             C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
                C92334 +
            (C90121 * C3365 - C44796 * C3359 - C90121 * C3366 + C92320 * C3371 +
             C90114 * C3367 - C44798 * C3360 - C90114 * C3368 +
             C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92334 +
            (C51645 + C51646) * C92252) *
               C31252 +
           ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) * C92226) *
              C1372 -
          (((C51647 + C51648) * C92252 + (C48937 + C48938) * C92334) * C92226 +
           ((C51649 + C51650) * C92252 + (C51646 + C51645) * C92334) * C31252) *
              C1373 +
          (((C51650 + C51649) * C92334 +
            (C90121 * C10873 - C44796 * C10868 - C90121 * C10874 +
             C92320 * C10880 + C90114 * C10871 - C44798 * C10867 -
             C90114 * C10872 + C92102 * C10879) *
                C92252) *
               C31252 +
           ((C51648 + C51647) * C92334 +
            (C90121 * C13751 - C44796 * C13749 - C90121 * C13752 +
             C92320 * C13755 + C90114 * C13753 - C44798 * C13750 -
             C90114 * C13754 + C92102 * C13756) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C90121 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92320 +
            (C31337 - C31338 + C31339 - C31340) * C90114 +
            (C31341 - C31342 + C31343 - C31344) * C92102) *
               C92334 +
           ((C41214 - C41215 + C41216 - C41217) * C90121 +
            (C41218 - C41219 + C41220 - C41221) * C92320 +
            (C34546 - C34545 + C34548 - C34547) * C90114 +
            (C34550 - C34549 + C34552 - C34551) * C92102) *
               C92252) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C90121 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C92320 +
            (C33589 - C33590 + C33591 - C33592) * C90114 +
            (C33593 - C33594 + C33595 - C33596) * C92102) *
               C92334 +
           ((C43921 - C43922 + C43923 - C43924) * C90121 +
            (C43925 - C43926 + C43927 - C43928) * C92320 +
            (C31334 * C3358 - C31252 * C3440 + C31335 * C5701 -
             C92226 * C5800) *
                C90114 +
            (C31334 * C3364 - C31252 * C3444 + C31335 * C5708 -
             C92226 * C5806) *
                C92102) *
               C92252) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C90121 +
            (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
                C92320 +
            (C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C90114 +
            (C31252 * C889 - C31334 * C813 + C92226 * C4953 - C31335 * C4819) *
                C92102) *
               C92334 +
           ((C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C90121 +
            (C31252 * C5805 - C31334 * C5710 + C92226 * C8590 -
             C31335 * C8457) *
                C92320 +
            (C31252 * C5800 - C31334 * C5701 + C92226 * C8589 -
             C31335 * C8455) *
                C90114 +
            (C31252 * C5806 - C31334 * C5708 + C92226 * C8591 -
             C31335 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C90121 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92320 +
            (C31337 - C31338 + C31339 - C31340) * C90114 +
            (C31341 - C31342 + C31343 - C31344) * C92102) *
               C92334 +
           ((C41214 - C41215 + C41216 - C41217) * C90121 +
            (C41218 - C41219 + C41220 - C41221) * C92320 +
            (C34546 - C34545 + C34548 - C34547) * C90114 +
            (C34550 - C34549 + C34552 - C34551) * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C90121 +
            (C31342 - C31341 + C31344 - C31343) * C92320 +
            (C31346 - C31345 + C31348 - C31347) * C90114 +
            (C31350 - C31349 + C31352 - C31351) * C92102) *
               C92334 +
           ((C34545 - C34546 + C34547 - C34548) * C90121 +
            (C34549 - C34550 + C34551 - C34552) * C92320 +
            (C34553 - C34554 + C34555 - C34556) * C90114 +
            (C34557 - C34558 + C34559 - C34560) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C31365 * C90121 + C31366 * C92320 +
            (C31354 - C31353 + C31356 - C31355) * C90114 +
            (C31358 - C31357 + C31360 - C31359) * C92102) *
               C92334 +
           ((C34554 - C34553 + C34556 - C34555) * C90121 +
            (C34558 - C34557 + C34560 - C34559) * C92320 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C90114 +
            (C31252 * C1468 - C31334 * C1384 + C92226 * C3446 -
             C31335 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C90121 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92320 +
            (C31337 - C31338 + C31339 - C31340) * C90114 +
            (C31341 - C31342 + C31343 - C31344) * C92102) *
               C92334 +
           ((C41214 - C41215 + C41216 - C41217) * C90121 +
            (C41218 - C41219 + C41220 - C41221) * C92320 +
            (C34546 - C34545 + C34548 - C34547) * C90114 +
            (C34550 - C34549 + C34552 - C34551) * C92102) *
               C92252) *
              C1372 +
          (((C41215 - C41214 + C41217 - C41216) * C90121 +
            (C41219 - C41218 + C41221 - C41220) * C92320 +
            (C34545 - C34546 + C34547 - C34548) * C90114 +
            (C34549 - C34550 + C34551 - C34552) * C92102) *
               C92334 +
           ((C41223 - C41222 + C41225 - C41224) * C90121 +
            (C41227 - C41226 + C41229 - C41228) * C92320 +
            (C42992 - C42993 + C42994 - C42995) * C90114 +
            (C42996 - C42997 + C42998 - C42999) * C92102) *
               C92252) *
              C1373 +
          ((C41242 * C90121 + C41243 * C92320 +
            (C42993 - C42992 + C42995 - C42994) * C90114 +
            (C42997 - C42996 + C42999 - C42998) * C92102) *
               C92334 +
           ((C41231 - C41230 + C41233 - C41232) * C90121 +
            (C41235 - C41234 + C41237 - C41236) * C92320 +
            (C31252 * C11001 - C31334 * C10867 + C92226 * C13870 -
             C31335 * C13750) *
                C90114 +
            (C31252 * C11005 - C31334 * C10872 + C92226 * C13872 -
             C31335 * C13754) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C90121 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92320 +
            (C19901 - C19902 + C19903 - C19904) * C90114 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C31252 +
           ((C25850 - C25851 + C25852 - C25853) * C90121 +
            (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
            C27897 * C92102) *
               C92226) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C90121 +
            (C25855 - C25854 + C25857 - C25856) * C92320 + C27898 * C90114 +
            C27899 * C92102) *
               C31252 +
           ((C25858 - C25859 + C25860 - C25861) * C90121 +
            (C25862 - C25863 + C25864 - C25865) * C92320 +
            (C25866 - C25867 + C25868 - C25869) * C90114 +
            (C25870 - C25871 + C25872 - C25873) * C92102) *
               C92226) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C90121 +
            (C25863 - C25862 + C25865 - C25864) * C92320 +
            (C25867 - C25866 + C25869 - C25868) * C90114 +
            (C25871 - C25870 + C25873 - C25872) * C92102) *
               C31252 +
           ((C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C90121 +
            (C92334 * C5034 - C19898 * C4821 + C92252 * C8692 -
             C19899 * C8457) *
                C92320 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C90114 +
            (C92334 * C5035 - C19898 * C4819 + C92252 * C8693 -
             C19899 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C90121 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92320 +
            (C19901 - C19902 + C19903 - C19904) * C90114 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C31252 +
           ((C25850 - C25851 + C25852 - C25853) * C90121 +
            (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
            C27897 * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C90121 +
            (C19906 - C19905 + C19908 - C19907) * C92320 +
            (C19910 - C19909 + C19912 - C19911) * C90114 +
            (C19914 - C19913 + C19916 - C19915) * C92102) *
               C31252 +
           (C27898 * C90121 + C27899 * C92320 +
            (C22169 - C22170 + C22171 - C22172) * C90114 +
            (C22173 - C22174 + C22175 - C22176) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C19929 * C90121 + C19930 * C92320 +
            (C19918 - C19917 + C19920 - C19919) * C90114 +
            (C19922 - C19921 + C19924 - C19923) * C92102) *
               C31252 +
           ((C22170 - C22169 + C22172 - C22171) * C90121 +
            (C22174 - C22173 + C22176 - C22175) * C92320 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C90114 +
            (C92334 * C953 - C19898 * C803 + C92252 * C3520 - C19899 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C90121 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92320 +
            (C19901 - C19902 + C19903 - C19904) * C90114 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C31252 +
           ((C25850 - C25851 + C25852 - C25853) * C90121 +
            (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
            C27897 * C92102) *
               C92226) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C90121 +
            (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
             C92252 * C1535) *
                C92320 +
            (C23127 - C23128 + C23129 - C23130) * C90114 +
            (C23131 - C23132 + C23133 - C23134) * C92102) *
               C31252 +
           ((C30334 - C30335 + C30336 - C30337) * C90121 +
            (C30338 - C30339 + C30340 - C30341) * C92320 +
            (C29120 - C29121 + C29122 - C29123) * C90114 +
            (C29124 - C29125 + C29126 - C29127) * C92102) *
               C92226) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C90121 +
            (C92334 * C1535 - C19898 * C1392 + C92252 * C11113 -
             C19899 * C10874) *
                C92320 +
            (C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
             C19899 * C10867) *
                C90114 +
            (C92334 * C1536 - C19898 * C1394 + C92252 * C11114 -
             C19899 * C10872) *
                C92102) *
               C31252 +
           ((C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
             C19899 * C13749) *
                C90121 +
            (C92334 * C5893 - C19898 * C5712 + C92252 * C13981 -
             C19899 * C13752) *
                C92320 +
            (C92334 * C5888 - C19898 * C5704 + C92252 * C13980 -
             C19899 * C13750) *
                C90114 +
            (C92334 * C5894 - C19898 * C5714 + C92252 * C13982 -
             C19899 * C13754) *
                C92102) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C31334 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C31252 +
            (C45829 - C45830 + C45831 - C45832) * C31335 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C92334 +
           ((C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C31334 +
            (C92320 * C1597 - C90121 * C1589 + C92102 * C1598 -
             C90114 * C1590) *
                C31252 +
            (C49234 - C49233 + C49236 - C49235) * C31335 +
            (C49238 - C49237 + C49240 - C49239) * C92226) *
               C92252) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C31334 +
            (C45834 - C45833 + C45836 - C45835) * C31252 +
            (C45838 - C45837 + C45840 - C45839) * C31335 +
            (C45842 - C45841 + C45844 - C45843) * C92226) *
               C92334 +
           ((C49233 - C49234 + C49235 - C49236) * C31334 +
            (C49237 - C49238 + C49239 - C49240) * C31252 +
            (C49241 - C49242 + C49243 - C49244) * C31335 +
            (C49245 - C49246 + C49247 - C49248) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C45857 * C31334 + C45858 * C31252 +
            (C45846 - C45845 + C45848 - C45847) * C31335 +
            (C45850 - C45849 + C45852 - C45851) * C92226) *
               C92334 +
           ((C49242 - C49241 + C49244 - C49243) * C31334 +
            (C49246 - C49245 + C49248 - C49247) * C31252 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C31335 +
            (C92320 * C8802 - C90121 * C8800 + C92102 * C8803 -
             C90114 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C31334 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C31252 +
            (C45829 - C45830 + C45831 - C45832) * C31335 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C92334 +
           ((C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C31334 +
            (C92320 * C1597 - C90121 * C1589 + C92102 * C1598 -
             C90114 * C1590) *
                C31252 +
            (C49234 - C49233 + C49236 - C49235) * C31335 +
            (C49238 - C49237 + C49240 - C49239) * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C31334 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C31252 +
            (C47345 - C47346 + C47347 - C47348) * C31335 +
            (C47349 - C47350 + C47351 - C47352) * C92226) *
               C92334 +
           ((C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
             C92102 * C1385) *
                C31334 +
            (C90121 * C1590 - C92320 * C1598 + C90114 * C1591 -
             C92102 * C1599) *
                C31252 +
            (C90121 * C3358 - C92320 * C3363 + C90114 * C3359 -
             C92102 * C3365) *
                C31335 +
            (C90121 * C3588 - C92320 * C3592 + C90114 * C3589 -
             C92102 * C3593) *
                C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C31334 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C31252 +
            (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C31335 +
            (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 -
             C90114 * C1011) *
                C92226) *
               C92334 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C31334 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C31252 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C31335 +
            (C92320 * C3593 - C90121 * C3589 + C92102 * C3594 -
             C90114 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C31334 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C31252 +
            (C45829 - C45830 + C45831 - C45832) * C31335 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C92334 +
           ((C51945 - C51946 + C51947 - C51948) * C31334 +
            (C51949 - C51950 + C51951 - C51952) * C31252 +
            (C49234 - C49233 + C49236 - C49235) * C31335 +
            (C49238 - C49237 + C49240 - C49239) * C92226) *
               C92252) *
              C1372 +
          (((C51946 - C51945 + C51948 - C51947) * C31334 +
            (C51950 - C51949 + C51952 - C51951) * C31252 +
            (C49233 - C49234 + C49235 - C49236) * C31335 +
            (C49237 - C49238 + C49239 - C49240) * C92226) *
               C92334 +
           ((C51953 - C51954 + C51955 - C51956) * C31334 +
            (C51957 - C51958 + C51959 - C51960) * C31252 +
            (C51961 - C51962 + C51963 - C51964) * C31335 +
            (C51965 - C51966 + C51967 - C51968) * C92226) *
               C92252) *
              C1373 +
          (((C51954 - C51953 + C51956 - C51955) * C31334 +
            (C51958 - C51957 + C51960 - C51959) * C31252 +
            (C51962 - C51961 + C51964 - C51963) * C31335 +
            (C51966 - C51965 + C51968 - C51967) * C92226) *
               C92334 +
           ((C92320 * C10873 - C90121 * C10868 + C92102 * C10871 -
             C90114 * C10867) *
                C31334 +
            (C92320 * C11195 - C90121 * C11191 + C92102 * C11196 -
             C90114 * C11192) *
                C31252 +
            (C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
             C90114 * C13750) *
                C31335 +
            (C92320 * C14083 - C90121 * C14081 + C92102 * C14084 -
             C90114 * C14082) *
                C92226) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92320 +
            (C31627 + C31628) * C92102) *
               C92334 +
           ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) * C92252) *
              C92150 * C790 -
          (((C31335 * C5800 - C31589 * C5701 - C31335 * C5972 + C92226 * C6057 +
             C31334 * C3440 - C31588 * C3358 - C31334 * C3588 +
             C31252 * C3662) *
                C92102 +
            (C44279 + C44278) * C92320) *
               C92252 +
           ((C33937 + C33938) * C92102 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C92320) *
               C92334) *
              C92150 * C791 +
          (((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
             C31335 * C4948 - C31589 * C4815 - C31335 * C5139 +
             C92226 * C5252) *
                C92320 +
            (C31334 * C881 - C31588 * C799 - C31334 * C1013 + C31252 * C1079 +
             C31335 * C4949 - C31589 * C4814 - C31335 * C5140 +
             C92226 * C5251) *
                C92102) *
               C92334 +
           ((C31334 * C5799 - C31588 * C5702 - C31334 * C5971 + C31252 * C6058 +
             C31335 * C8588 - C31589 * C8454 - C31335 * C8800 +
             C92226 * C8918) *
                C92320 +
            (C31334 * C5800 - C31588 * C5701 - C31334 * C5972 + C31252 * C6057 +
             C31335 * C8589 - C31589 * C8455 - C31335 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92320 +
            (C31627 + C31628) * C92102) *
               C92334 +
           ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) * C92252) *
              C92150 * C92136 * C97 -
          (((C34879 + C34880) * C92102 + (C34881 + C34882) * C92320) * C92252 +
           ((C31630 + C31629) * C92102 + (C31628 + C31627) * C92320) * C92334) *
              C92150 * C92136 * C98 +
          ((C31633 * C92320 + (C31632 + C31631) * C92102) * C92334 +
           ((C34880 + C34879) * C92320 +
            (C31334 * C1460 - C31588 * C1375 - C31334 * C1592 + C31252 * C1655 +
             C31335 * C3442 - C31589 * C3360 - C31335 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92320 +
            (C31627 + C31628) * C92102) *
               C92334 +
           ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) * C92252) *
              C1372 -
          (((C43315 + C43314) * C92102 + (C41540 + C41539) * C92320) * C92252 +
           ((C34881 + C34882) * C92102 + (C41538 + C41537) * C92320) * C92334) *
              C1373 +
          ((C41543 * C92320 + (C43314 + C43315) * C92102) * C92334 +
           ((C41542 + C41541) * C92320 +
            (C31334 * C11001 - C31588 * C10867 - C31334 * C11192 +
             C31252 * C11306 + C31335 * C13870 - C31589 * C13750 -
             C31335 * C14082 + C92226 * C14192) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C31334 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C31252 +
            (C25850 - C25851 + C25852 - C25853) * C31335 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C92320 +
           ((C19901 - C19902 + C19903 - C19904) * C31334 +
            (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
            C28316 * C92226) *
               C92102) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C31334 +
            (C26169 - C26168 + C26171 - C26170) * C31252 +
            (C25858 - C25859 + C25860 - C25861) * C31335 +
            (C26172 - C26173 + C26174 - C26175) * C92226) *
               C92320 +
           (C27898 * C31334 + C28317 * C31252 +
            (C25866 - C25867 + C25868 - C25869) * C31335 +
            (C26176 - C26177 + C26178 - C26179) * C92226) *
               C92102) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C31334 +
            (C26173 - C26172 + C26175 - C26174) * C31252 +
            (C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C31335 +
            (C92334 * C5329 - C19898 * C5139 + C92252 * C9018 -
             C19899 * C8800) *
                C92226) *
               C92320 +
           ((C25867 - C25866 + C25869 - C25868) * C31334 +
            (C26177 - C26176 + C26179 - C26178) * C31252 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C31335 +
            (C92334 * C5330 - C19898 * C5140 + C92252 * C9019 -
             C19899 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C31334 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C31252 +
            (C25850 - C25851 + C25852 - C25853) * C31335 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C92320 +
           ((C19901 - C19902 + C19903 - C19904) * C31334 +
            (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
            C28316 * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C31334 +
            (C20154 - C20153 + C20156 - C20155) * C31252 + C27898 * C31335 +
            C28317 * C92226) *
               C92320 +
           ((C19910 - C19909 + C19912 - C19911) * C31334 +
            (C20159 - C20158 + C20161 - C20160) * C31252 +
            (C22169 - C22170 + C22171 - C22172) * C31335 +
            (C22482 - C22483 + C22484 - C22485) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C19929 * C31334 + C20168 * C31252 +
            (C22170 - C22169 + C22172 - C22171) * C31335 +
            (C22483 - C22482 + C22485 - C22484) * C92226) *
               C92320 +
           ((C19918 - C19917 + C19920 - C19919) * C31334 +
            (C20163 - C20162 + C20165 - C20164) * C31252 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C31335 +
            (C92334 * C1135 - C19898 * C1011 + C92252 * C3734 -
             C19899 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C31334 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C31252 +
            (C25850 - C25851 + C25852 - C25853) * C31335 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C92320 +
           ((C19901 - C19902 + C19903 - C19904) * C31334 +
            (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
            C28316 * C92226) *
               C92102) *
              C1372 +
          (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
             C92252 * C1527) *
                C31334 +
            (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
             C92252 * C1717) *
                C31252 +
            (C30334 - C30335 + C30336 - C30337) * C31335 +
            (C30758 - C30759 + C30760 - C30761) * C92226) *
               C92320 +
           ((C23127 - C23128 + C23129 - C23130) * C31334 +
            (C23452 - C23453 + C23454 - C23455) * C31252 +
            (C29120 - C29121 + C29122 - C29123) * C31335 +
            (C29520 - C29521 + C29522 - C29523) * C92226) *
               C92102) *
              C1373 +
          (((C92334 * C1527 - C19898 * C1379 + C92252 * C11109 -
             C19899 * C10868) *
                C31334 +
            (C92334 * C1717 - C19898 * C1593 + C92252 * C11419 -
             C19899 * C11191) *
                C31252 +
            (C92334 * C5887 - C19898 * C5703 + C92252 * C13979 -
             C19899 * C13749) *
                C31335 +
            (C92334 * C6139 - C19898 * C5973 + C92252 * C14309 -
             C19899 * C14081) *
                C92226) *
               C92320 +
           ((C92334 * C1528 - C19898 * C1380 + C92252 * C11110 -
             C19899 * C10867) *
                C31334 +
            (C92334 * C1718 - C19898 * C1594 + C92252 * C11420 -
             C19899 * C11192) *
                C31252 +
            (C92334 * C5888 - C19898 * C5704 + C92252 * C13980 -
             C19899 * C13750) *
                C31335 +
            (C92334 * C6141 - C19898 * C5974 + C92252 * C14310 -
             C19899 * C14082) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C19898 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92334 +
            (C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C19899 +
            (C92320 * C1779 - C90121 * C1771 + C92102 * C1780 -
             C90114 * C1772) *
                C92252) *
               C31252 +
           ((C45829 - C45830 + C45831 - C45832) * C19898 +
            (C46081 - C46082 + C46083 - C46084) * C92334 +
            (C49234 - C49233 + C49236 - C49235) * C19899 +
            (C49544 - C49543 + C49546 - C49545) * C92252) *
               C92226) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C19898 +
            (C46082 - C46081 + C46084 - C46083) * C92334 +
            (C49233 - C49234 + C49235 - C49236) * C19899 +
            (C49543 - C49544 + C49545 - C49546) * C92252) *
               C31252 +
           ((C45838 - C45837 + C45840 - C45839) * C19898 +
            (C46087 - C46086 + C46089 - C46088) * C92334 +
            (C49241 - C49242 + C49243 - C49244) * C19899 +
            (C49547 - C49548 + C49549 - C49550) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C45857 * C19898 + C46096 * C92334 +
            (C49242 - C49241 + C49244 - C49243) * C19899 +
            (C49548 - C49547 + C49550 - C49549) * C92252) *
               C31252 +
           ((C45846 - C45845 + C45848 - C45847) * C19898 +
            (C46091 - C46090 + C46093 - C46092) * C92334 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C19899 +
            (C92320 * C9124 - C90121 * C9122 + C92102 * C9125 -
             C90114 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C19898 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92334 +
            (C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C19899 +
            (C92320 * C1779 - C90121 * C1771 + C92102 * C1780 -
             C90114 * C1772) *
                C92252) *
               C31252 +
           ((C45829 - C45830 + C45831 - C45832) * C19898 +
            (C46081 - C46082 + C46083 - C46084) * C92334 +
            (C49234 - C49233 + C49236 - C49235) * C19899 +
            (C49544 - C49543 + C49546 - C49545) * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C19898 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92334 +
            (C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
             C92102 * C1385) *
                C19899 +
            (C90121 * C1772 - C92320 * C1780 + C90114 * C1773 -
             C92102 * C1781) *
                C92252) *
               C31252 +
           ((C47345 - C47346 + C47347 - C47348) * C19898 +
            (C47676 - C47677 + C47678 - C47679) * C92334 +
            (C90121 * C3358 - C92320 * C3363 + C90114 * C3359 -
             C92102 * C3365) *
                C19899 +
            (C90121 * C3802 - C92320 * C3806 + C90114 * C3803 -
             C92102 * C3807) *
                C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C19898 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C92334 +
            (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C19899 +
            (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 -
             C90114 * C1774) *
                C92252) *
               C31252 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C19898 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C92334 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C19899 +
            (C92320 * C3807 - C90121 * C3803 + C92102 * C3808 -
             C90114 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C19898 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92334 +
            (C51945 - C51946 + C51947 - C51948) * C19899 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C31252 +
           ((C45829 - C45830 + C45831 - C45832) * C19898 +
            (C46081 - C46082 + C46083 - C46084) * C92334 +
            (C49234 - C49233 + C49236 - C49235) * C19899 +
            (C49544 - C49543 + C49546 - C49545) * C92252) *
               C92226) *
              C1372 +
          (((C51946 - C51945 + C51948 - C51947) * C19898 +
            (C52264 - C52263 + C52266 - C52265) * C92334 +
            (C51953 - C51954 + C51955 - C51956) * C19899 +
            (C52267 - C52268 + C52269 - C52270) * C92252) *
               C31252 +
           ((C49233 - C49234 + C49235 - C49236) * C19898 +
            (C49543 - C49544 + C49545 - C49546) * C92334 +
            (C51961 - C51962 + C51963 - C51964) * C19899 +
            (C52271 - C52272 + C52273 - C52274) * C92252) *
               C92226) *
              C1373 +
          (((C51954 - C51953 + C51956 - C51955) * C19898 +
            (C52268 - C52267 + C52270 - C52269) * C92334 +
            (C92320 * C10873 - C90121 * C10868 + C92102 * C10871 -
             C90114 * C10867) *
                C19899 +
            (C92320 * C11501 - C90121 * C11497 + C92102 * C11502 -
             C90114 * C11498) *
                C92252) *
               C31252 +
           ((C51962 - C51961 + C51964 - C51963) * C19898 +
            (C52272 - C52271 + C52274 - C52273) * C92334 +
            (C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
             C90114 * C13750) *
                C19899 +
            (C92320 * C14411 - C90121 * C14409 + C92102 * C14412 -
             C90114 * C14410) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C19898 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92334 +
            (C41214 - C41215 + C41216 - C41217) * C19899 +
            (C41781 - C41782 + C41783 - C41784) * C92252) *
               C92320 +
           ((C31337 - C31338 + C31339 - C31340) * C19898 +
            (C31863 - C31864 + C31865 - C31866) * C92334 +
            (C34546 - C34545 + C34548 - C34547) * C19899 +
            (C35178 - C35177 + C35180 - C35179) * C92252) *
               C92102) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C19898 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C92334 +
            (C43921 - C43922 + C43923 - C43924) * C19899 +
            (C44589 - C44590 + C44591 - C44592) * C92252) *
               C92320 +
           ((C33589 - C33590 + C33591 - C33592) * C19898 +
            (C34239 - C34240 + C34241 - C34242) * C92334 +
            (C31334 * C3358 - C31252 * C3440 + C31335 * C5701 -
             C92226 * C5800) *
                C19899 +
            (C31334 * C3802 - C31252 * C3876 + C31335 * C6218 -
             C92226 * C6304) *
                C92252) *
               C92102) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C19898 +
            (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
             C31335 * C5417) *
                C92334 +
            (C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C19899 +
            (C31252 * C6303 - C31334 * C6217 + C92226 * C9232 -
             C31335 * C9122) *
                C92252) *
               C92320 +
           ((C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C19898 +
            (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
             C31335 * C5418) *
                C92334 +
            (C31252 * C5800 - C31334 * C5701 + C92226 * C8589 -
             C31335 * C8455) *
                C19899 +
            (C31252 * C6304 - C31334 * C6218 + C92226 * C9233 -
             C31335 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C19898 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92334 +
            (C41214 - C41215 + C41216 - C41217) * C19899 +
            (C41781 - C41782 + C41783 - C41784) * C92252) *
               C92320 +
           ((C31337 - C31338 + C31339 - C31340) * C19898 +
            (C31863 - C31864 + C31865 - C31866) * C92334 +
            (C34546 - C34545 + C34548 - C34547) * C19899 +
            (C35178 - C35177 + C35180 - C35179) * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C19898 +
            (C31864 - C31863 + C31866 - C31865) * C92334 +
            (C34545 - C34546 + C34547 - C34548) * C19899 +
            (C35177 - C35178 + C35179 - C35180) * C92252) *
               C92320 +
           ((C31346 - C31345 + C31348 - C31347) * C19898 +
            (C31869 - C31868 + C31871 - C31870) * C92334 +
            (C34553 - C34554 + C34555 - C34556) * C19899 +
            (C35181 - C35182 + C35183 - C35184) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C31365 * C19898 + C31878 * C92334 +
            (C34554 - C34553 + C34556 - C34555) * C19899 +
            (C35182 - C35181 + C35184 - C35183) * C92252) *
               C92320 +
           ((C31354 - C31353 + C31356 - C31355) * C19898 +
            (C31873 - C31872 + C31875 - C31874) * C92334 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C19899 +
            (C31252 * C1840 - C31334 * C1774 + C92226 * C3878 -
             C31335 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C19898 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92334 +
            (C41214 - C41215 + C41216 - C41217) * C19899 +
            (C41781 - C41782 + C41783 - C41784) * C92252) *
               C92320 +
           ((C31337 - C31338 + C31339 - C31340) * C19898 +
            (C31863 - C31864 + C31865 - C31866) * C92334 +
            (C34546 - C34545 + C34548 - C34547) * C19899 +
            (C35178 - C35177 + C35180 - C35179) * C92252) *
               C92102) *
              C1372 +
          (((C41215 - C41214 + C41217 - C41216) * C19898 +
            (C41782 - C41781 + C41784 - C41783) * C92334 +
            (C41223 - C41222 + C41225 - C41224) * C19899 +
            (C41786 - C41785 + C41788 - C41787) * C92252) *
               C92320 +
           ((C34545 - C34546 + C34547 - C34548) * C19898 +
            (C35177 - C35178 + C35179 - C35180) * C92334 +
            (C42992 - C42993 + C42994 - C42995) * C19899 +
            (C43614 - C43615 + C43616 - C43617) * C92252) *
               C92102) *
              C1373 +
          ((C41242 * C19898 + C41795 * C92334 +
            (C41231 - C41230 + C41233 - C41232) * C19899 +
            (C41790 - C41789 + C41792 - C41791) * C92252) *
               C92320 +
           ((C42993 - C42992 + C42995 - C42994) * C19898 +
            (C43615 - C43614 + C43617 - C43616) * C92334 +
            (C31252 * C11001 - C31334 * C10867 + C92226 * C13870 -
             C31335 * C13750) *
                C19899 +
            (C31252 * C11595 - C31334 * C11498 + C92226 * C14516 -
             C31335 * C14410) *
                C92252) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C31252 +
            (C26510 + C26511) * C92226) *
               C92320 +
           ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
              C92150 * C790 -
          (((C26512 + C26513) * C92226 + C28717 * C31252) * C92102 +
           ((C26514 + C26515) * C92226 + (C26511 + C26510) * C31252) * C92320) *
              C92150 * C791 +
          (((C26515 + C26514) * C31252 +
            (C19898 * C5030 - C20400 * C4815 - C19898 * C5417 + C92334 * C5596 +
             C19899 * C8690 - C20401 * C8454 - C19899 * C9122 +
             C92252 * C9332) *
                C92226) *
               C92320 +
           ((C26513 + C26512) * C31252 +
            (C19898 * C5031 - C20400 * C4814 - C19898 * C5418 + C92334 * C5595 +
             C19899 * C8691 - C20401 * C8455 - C19899 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C31252 +
            (C26510 + C26511) * C92226) *
               C92320 +
           ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C22806 + C22807) * C92226 + (C20442 + C20441) * C31252) * C92102 +
           (C28717 * C92226 + (C20440 + C20439) * C31252) * C92320) *
              C92150 * C92136 * C98 +
          ((C20445 * C31252 + (C22807 + C22806) * C92226) * C92320 +
           ((C20444 + C20443) * C31252 +
            (C19898 * C945 - C20400 * C794 - C19898 * C1193 + C92334 * C1314 +
             C19899 * C3516 - C20401 * C3360 - C19899 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C31252 +
            (C26510 + C26511) * C92226) *
               C92320 +
           ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
              C1372 -
          (((C29932 + C29933) * C92226 + (C23787 + C23788) * C31252) * C92102 +
           ((C31174 + C31175) * C92226 +
            (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 + C92252 * C1899 +
             C19898 * C1523 - C20400 * C1378 - C19898 * C1771 +
             C92334 * C1898) *
                C31252) *
               C92320) *
              C1373 +
          (((C19898 * C1527 - C20400 * C1379 - C19898 * C1775 + C92334 * C1899 +
             C19899 * C11109 - C20401 * C10868 - C19899 * C11497 +
             C92252 * C11683) *
                C31252 +
            (C19898 * C5887 - C20400 * C5703 - C19898 * C6219 + C92334 * C6385 +
             C19899 * C13979 - C20401 * C13749 - C19899 * C14409 +
             C92252 * C14619) *
                C92226) *
               C92320 +
           ((C19898 * C1528 - C20400 * C1380 - C19898 * C1776 + C92334 * C1900 +
             C19899 * C11110 - C20401 * C10867 - C19899 * C11498 +
             C92252 * C11682) *
                C31252 +
            (C19898 * C5888 - C20400 * C5704 - C19898 * C6220 + C92334 * C6387 +
             C19899 * C13980 - C20401 * C13750 - C19899 * C14410 +
             C92252 * C14620) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C92334 +
             (C51645 + C51646) * C92252) *
                C31252 +
            ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) *
                C92226) *
               C2664 -
           (((C51647 + C51648) * C92252 + (C48937 + C48938) * C92334) * C92226 +
            ((C51649 + C51650) * C92252 + (C51646 + C51645) * C92334) *
                C31252) *
               C2665) *
              C92136 * C1971 +
          ((((C53835 + C53836) * C92334 +
             (C90121 * C1393 - C44796 * C1380 - C90121 * C1394 +
              C92320 * C1404 + C90114 * C1395 - C44798 * C1381 -
              C90114 * C1396 + C92102 * C1405) *
                 C92252) *
                C31252 +
            ((C52613 + C52614) * C92334 +
             (C90121 * C5713 - C44796 * C5704 - C90121 * C5714 +
              C92320 * C5722 + C90114 * C11785 - C44798 * C11784 -
              C90114 * C11786 + C92102 * C11787) *
                 C92252) *
                C92226) *
               C2665 -
           (((C52614 + C52613) * C92252 + (C47036 + C47035) * C92334) * C92226 +
            ((C53836 + C53835) * C92252 +
             (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
              C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                 C92334) *
                C31252) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C90121 +
             (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                 C92320 +
             (C31337 - C31338 + C31339 - C31340) * C90114 +
             (C31341 - C31342 + C31343 - C31344) * C92102) *
                C92334 +
            ((C41214 - C41215 + C41216 - C41217) * C90121 +
             (C41218 - C41219 + C41220 - C41221) * C92320 + C53975 * C90114 +
             C53976 * C92102) *
                C92252) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C90121 +
             (C41219 - C41218 + C41221 - C41220) * C92320 + C53977 * C90114 +
             C53978 * C92102) *
                C92334 +
            ((C41223 - C41222 + C41225 - C41224) * C90121 +
             (C41227 - C41226 + C41229 - C41228) * C92320 +
             (C42992 - C42993 + C42994 - C42995) * C90114 +
             (C42996 - C42997 + C42998 - C42999) * C92102) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C90121 +
             (C31342 - C31341 + C31344 - C31343) * C92320 +
             (C31346 - C31345 + C31348 - C31347) * C90114 +
             (C31350 - C31349 + C31352 - C31351) * C92102) *
                C92334 +
            (C53977 * C90121 + C53978 * C92320 +
             (C34553 - C34554 + C34555 - C34556) * C90114 +
             (C34557 - C34558 + C34559 - C34560) * C92102) *
                C92252) *
               C2664 +
           ((C53975 * C90121 + C53976 * C92320 +
             (C34554 - C34553 + C34556 - C34555) * C90114 +
             (C34558 - C34557 + C34560 - C34559) * C92102) *
                C92334 +
            ((C42993 - C42992 + C42995 - C42994) * C90121 +
             (C42997 - C42996 + C42999 - C42998) * C92320 +
             (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
              C31335 * C11784) *
                 C90114 +
             (C31252 * C1471 - C31334 * C1396 + C92226 * C11887 -
              C31335 * C11786) *
                 C92102) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C90121 +
             (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                 C92320 +
             (C19901 - C19902 + C19903 - C19904) * C90114 +
             (C19905 - C19906 + C19907 - C19908) * C92102) *
                C31252 +
            ((C25850 - C25851 + C25852 - C25853) * C90121 +
             (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
             C27897 * C92102) *
                C92226) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C90121 +
             (C19898 * C1390 - C92334 * C1531 + C19899 * C1392 -
              C92252 * C1535) *
                 C92320 +
             (C23127 - C23128 + C23129 - C23130) * C90114 +
             (C23131 - C23132 + C23133 - C23134) * C92102) *
                C31252 +
            ((C30334 - C30335 + C30336 - C30337) * C90121 +
             (C30338 - C30339 + C30340 - C30341) * C92320 +
             (C29120 - C29121 + C29122 - C29123) * C90114 +
             (C29124 - C29125 + C29126 - C29127) * C92102) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C90121 +
             (C19906 - C19905 + C19908 - C19907) * C92320 +
             (C19910 - C19909 + C19912 - C19911) * C90114 +
             (C19914 - C19913 + C19916 - C19915) * C92102) *
                C31252 +
            (C27898 * C90121 + C27899 * C92320 +
             (C22169 - C22170 + C22171 - C22172) * C90114 +
             (C22173 - C22174 + C22175 - C22176) * C92102) *
                C92226) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C90121 +
             (C23132 - C23131 + C23134 - C23133) * C92320 +
             (C23136 - C23135 + C23138 - C23137) * C90114 +
             (C23140 - C23139 + C23142 - C23141) * C92102) *
                C31252 +
            ((C29121 - C29120 + C29123 - C29122) * C90121 +
             (C29125 - C29124 + C29127 - C29126) * C92320 +
             (C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
              C19899 * C11784) *
                 C90114 +
             (C92334 * C3519 - C19898 * C3366 + C92252 * C11995 -
              C19899 * C11786) *
                 C92102) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C31334 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C31252 +
             (C45829 - C45830 + C45831 - C45832) * C31335 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C92334 +
            ((C51945 - C51946 + C51947 - C51948) * C31334 +
             (C51949 - C51950 + C51951 - C51952) * C31252 +
             (C49234 - C49233 + C49236 - C49235) * C31335 +
             (C49238 - C49237 + C49240 - C49239) * C92226) *
                C92252) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C31334 +
             (C51950 - C51949 + C51952 - C51951) * C31252 +
             (C49233 - C49234 + C49235 - C49236) * C31335 +
             (C49237 - C49238 + C49239 - C49240) * C92226) *
                C92334 +
            ((C51953 - C51954 + C51955 - C51956) * C31334 +
             (C51957 - C51958 + C51959 - C51960) * C31252 +
             (C51961 - C51962 + C51963 - C51964) * C31335 +
             (C51965 - C51966 + C51967 - C51968) * C92226) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C31334 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C31252 +
             (C47345 - C47346 + C47347 - C47348) * C31335 +
             (C47349 - C47350 + C47351 - C47352) * C92226) *
                C92334 +
            ((C54239 - C54240 + C54241 - C54242) * C31334 +
             (C54243 - C54244 + C54245 - C54246) * C31252 +
             (C53013 - C53014 + C53015 - C53016) * C31335 +
             (C53017 - C53018 + C53019 - C53020) * C92226) *
                C92252) *
               C2664 +
           (((C54240 - C54239 + C54242 - C54241) * C31334 +
             (C54244 - C54243 + C54246 - C54245) * C31252 +
             (C53014 - C53013 + C53016 - C53015) * C31335 +
             (C53018 - C53017 + C53020 - C53019) * C92226) *
                C92334 +
            ((C92320 * C1393 - C90121 * C1380 + C92102 * C1395 -
              C90114 * C1381) *
                 C31334 +
             (C92320 * C1602 - C90121 * C1594 + C92102 * C1603 -
              C90114 * C1595) *
                 C31252 +
             (C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
              C90114 * C11784) *
                 C31335 +
             (C92320 * C5980 - C90121 * C5974 + C92102 * C12107 -
              C90114 * C12106) *
                 C92226) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
              C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                 C92320 +
             (C31627 + C31628) * C92102) *
                C92334 +
            ((C41537 + C41538) * C92320 + C54377 * C92102) * C92252) *
               C2664 -
           (((C43315 + C43314) * C92102 + (C41540 + C41539) * C92320) * C92252 +
            (C54378 * C92102 + (C41538 + C41537) * C92320) * C92334) *
               C2665) *
              C92136 * C1971 +
          (((C54377 * C92320 + (C34880 + C34879) * C92102) * C92334 +
            ((C43314 + C43315) * C92320 +
             (C31334 * C1463 - C31588 * C1381 - C31334 * C1595 +
              C31252 * C1661 + C31335 * C11886 - C31589 * C11784 -
              C31335 * C12106 + C92226 * C12206) *
                 C92102) *
                C92252) *
               C2665 -
           (((C34879 + C34880) * C92102 + C54378 * C92320) * C92252 +
            ((C31630 + C31629) * C92102 + (C31628 + C31627) * C92320) *
                C92334) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                 C31334 +
             (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                 C31252 +
             (C25850 - C25851 + C25852 - C25853) * C31335 +
             (C26168 - C26169 + C26170 - C26171) * C92226) *
                C92320 +
            ((C19901 - C19902 + C19903 - C19904) * C31334 +
             (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
             C28316 * C92226) *
                C92102) *
               C2664 +
           (((C19898 * C1378 - C92334 * C1523 + C19899 * C1379 -
              C92252 * C1527) *
                 C31334 +
             (C19898 * C1589 - C92334 * C1713 + C19899 * C1593 -
              C92252 * C1717) *
                 C31252 +
             (C30334 - C30335 + C30336 - C30337) * C31335 +
             (C30758 - C30759 + C30760 - C30761) * C92226) *
                C92320 +
            ((C23127 - C23128 + C23129 - C23130) * C31334 +
             (C23452 - C23453 + C23454 - C23455) * C31252 +
             (C29120 - C29121 + C29122 - C29123) * C31335 +
             (C29520 - C29521 + C29522 - C29523) * C92226) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C19902 - C19901 + C19904 - C19903) * C31334 +
             (C20154 - C20153 + C20156 - C20155) * C31252 + C27898 * C31335 +
             C28317 * C92226) *
                C92320 +
            ((C19910 - C19909 + C19912 - C19911) * C31334 +
             (C20159 - C20158 + C20161 - C20160) * C31252 +
             (C22169 - C22170 + C22171 - C22172) * C31335 +
             (C22482 - C22483 + C22484 - C22485) * C92226) *
                C92102) *
               C2664 +
           (((C23128 - C23127 + C23130 - C23129) * C31334 +
             (C23453 - C23452 + C23455 - C23454) * C31252 +
             (C29121 - C29120 + C29123 - C29122) * C31335 +
             (C29521 - C29520 + C29523 - C29522) * C92226) *
                C92320 +
            ((C23136 - C23135 + C23138 - C23137) * C31334 +
             (C23457 - C23456 + C23459 - C23458) * C31252 +
             (C92334 * C3515 - C19898 * C3359 + C92252 * C11994 -
              C19899 * C11784) *
                 C31335 +
             (C92334 * C3733 - C19898 * C3589 + C92252 * C12319 -
              C19899 * C12106) *
                 C92226) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C19898 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C92334 +
             (C51945 - C51946 + C51947 - C51948) * C19899 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C31252 +
            ((C45829 - C45830 + C45831 - C45832) * C19898 +
             (C46081 - C46082 + C46083 - C46084) * C92334 +
             (C49234 - C49233 + C49236 - C49235) * C19899 +
             (C49544 - C49543 + C49546 - C49545) * C92252) *
                C92226) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C19898 +
             (C52264 - C52263 + C52266 - C52265) * C92334 +
             (C51953 - C51954 + C51955 - C51956) * C19899 +
             (C52267 - C52268 + C52269 - C52270) * C92252) *
                C31252 +
            ((C49233 - C49234 + C49235 - C49236) * C19898 +
             (C49543 - C49544 + C49545 - C49546) * C92334 +
             (C51961 - C51962 + C51963 - C51964) * C19899 +
             (C52271 - C52272 + C52273 - C52274) * C92252) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C19898 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C92334 +
             (C54239 - C54240 + C54241 - C54242) * C19899 +
             (C54639 - C54640 + C54641 - C54642) * C92252) *
                C31252 +
            ((C47345 - C47346 + C47347 - C47348) * C19898 +
             (C47676 - C47677 + C47678 - C47679) * C92334 +
             (C53013 - C53014 + C53015 - C53016) * C19899 +
             (C53425 - C53426 + C53427 - C53428) * C92252) *
                C92226) *
               C2664 +
           (((C54240 - C54239 + C54242 - C54241) * C19898 +
             (C54640 - C54639 + C54642 - C54641) * C92334 +
             (C92320 * C1393 - C90121 * C1380 + C92102 * C1395 -
              C90114 * C1381) *
                 C19899 +
             (C92320 * C1784 - C90121 * C1776 + C92102 * C1785 -
              C90114 * C1777) *
                 C92252) *
                C31252 +
            ((C53014 - C53013 + C53016 - C53015) * C19898 +
             (C53426 - C53425 + C53428 - C53427) * C92334 +
             (C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
              C90114 * C11784) *
                 C19899 +
             (C92320 * C6226 - C90121 * C6220 + C92102 * C12425 -
              C90114 * C12424) *
                 C92252) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C19898 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92334 +
             (C41214 - C41215 + C41216 - C41217) * C19899 +
             (C41781 - C41782 + C41783 - C41784) * C92252) *
                C92320 +
            ((C31337 - C31338 + C31339 - C31340) * C19898 +
             (C31863 - C31864 + C31865 - C31866) * C92334 + C53975 * C19899 +
             C54777 * C92252) *
                C92102) *
               C2664 +
           (((C41215 - C41214 + C41217 - C41216) * C19898 +
             (C41782 - C41781 + C41784 - C41783) * C92334 +
             (C41223 - C41222 + C41225 - C41224) * C19899 +
             (C41786 - C41785 + C41788 - C41787) * C92252) *
                C92320 +
            (C53977 * C19898 + C54778 * C92334 +
             (C42992 - C42993 + C42994 - C42995) * C19899 +
             (C43614 - C43615 + C43616 - C43617) * C92252) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C19898 +
             (C31864 - C31863 + C31866 - C31865) * C92334 + C53977 * C19899 +
             C54778 * C92252) *
                C92320 +
            ((C31346 - C31345 + C31348 - C31347) * C19898 +
             (C31869 - C31868 + C31871 - C31870) * C92334 +
             (C34553 - C34554 + C34555 - C34556) * C19899 +
             (C35181 - C35182 + C35183 - C35184) * C92252) *
                C92102) *
               C2664 +
           ((C53975 * C19898 + C54777 * C92334 +
             (C42993 - C42992 + C42995 - C42994) * C19899 +
             (C43615 - C43614 + C43617 - C43616) * C92252) *
                C92320 +
            ((C34554 - C34553 + C34556 - C34555) * C19898 +
             (C35182 - C35181 + C35184 - C35183) * C92334 +
             (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
              C31335 * C11784) *
                 C19899 +
             (C31252 * C1843 - C31334 * C1777 + C92226 * C12524 -
              C31335 * C12424) *
                 C92252) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
              C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
              C92252 * C1898) *
                 C31252 +
             (C26510 + C26511) * C92226) *
                C92320 +
            ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
               C2664 -
           (((C29932 + C29933) * C92226 + (C23787 + C23788) * C31252) * C92102 +
            ((C31174 + C31175) * C92226 +
             (C19899 * C1527 - C20401 * C1379 - C19899 * C1775 +
              C92252 * C1899 + C19898 * C1523 - C20400 * C1378 -
              C19898 * C1771 + C92334 * C1898) *
                 C31252) *
                C92320) *
               C2665) *
              C92136 * C1971 +
          ((((C23788 + C23787) * C31252 + (C29933 + C29932) * C92226) * C92320 +
            ((C23786 + C23785) * C31252 +
             (C19898 * C3515 - C20400 * C3359 - C19898 * C3803 +
              C92334 * C3947 + C19899 * C11994 - C20401 * C11784 -
              C19899 * C12424 + C92252 * C12627) *
                 C92226) *
                C92102) *
               C2665 -
           (((C22806 + C22807) * C92226 + (C20442 + C20441) * C31252) * C92102 +
            (C28717 * C92226 + (C20440 + C20439) * C31252) * C92320) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92334 +
            (C90121 * C1389 - C44796 * C1378 - C90121 * C1390 + C92320 * C1402 +
             C90114 * C1387 - C44798 * C1377 - C90114 * C1388 +
             C92102 * C1401) *
                C92252) *
               C31252 +
           ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C90114 * C3365 - C44798 * C3359 - C90114 * C3366 + C92102 * C3371 +
             C90121 * C3363 - C44796 * C3358 - C90121 * C3364 +
             C92320 * C3370) *
                C92252 +
            (C47036 + C47035) * C92334) *
               C92226 +
           ((C90114 * C1385 - C44798 * C1376 - C90114 * C1386 + C92102 * C1400 +
             C90121 * C1387 - C44796 * C1377 - C90121 * C1388 +
             C92320 * C1401) *
                C92252 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92334) *
               C31252) *
              C92150 * C92136 * C98 +
          (((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
             C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
                C92334 +
            (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
             C90114 * C1383 - C44798 * C1375 - C90114 * C1384 +
             C92102 * C1399) *
                C92252) *
               C31252 +
           ((C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
             C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
                C92334 +
            (C90121 * C3365 - C44796 * C3359 - C90121 * C3366 + C92320 * C3371 +
             C90114 * C3367 - C44798 * C3360 - C90114 * C3368 +
             C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92334 +
            (C90121 * C1389 - C44796 * C1378 - C90121 * C1390 + C92320 * C1402 +
             C90114 * C1387 - C44798 * C1377 - C90114 * C1388 +
             C92102 * C1401) *
                C92252) *
               C31252 +
           ((C45592 + C45593) * C92334 + (C48938 + C48937) * C92252) * C92226) *
              C92150 * C790 -
          (((C48935 + C48936) * C92252 + (C45595 + C45594) * C92334) * C92226 +
           ((C48937 + C48938) * C92252 + (C45593 + C45592) * C92334) * C31252) *
              C92150 * C791 +
          ((C45598 * C92334 + (C48936 + C48935) * C92252) * C31252 +
           ((C45597 + C45596) * C92334 +
            (C90121 * C8456 - C44796 * C8454 - C90121 * C8457 + C92320 * C8460 +
             C90114 * C8458 - C44798 * C8455 - C90114 * C8459 +
             C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C90121 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92320 +
            (C31337 - C31338 + C31339 - C31340) * C90114 +
            (C31341 - C31342 + C31343 - C31344) * C92102) *
               C92334 +
           ((C41214 - C41215 + C41216 - C41217) * C90121 +
            (C41218 - C41219 + C41220 - C41221) * C92320 +
            (C34546 - C34545 + C34548 - C34547) * C90114 +
            (C34550 - C34549 + C34552 - C34551) * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C90121 +
            (C31342 - C31341 + C31344 - C31343) * C92320 +
            (C31346 - C31345 + C31348 - C31347) * C90114 +
            (C31350 - C31349 + C31352 - C31351) * C92102) *
               C92334 +
           ((C34545 - C34546 + C34547 - C34548) * C90121 +
            (C34549 - C34550 + C34551 - C34552) * C92320 +
            (C34553 - C34554 + C34555 - C34556) * C90114 +
            (C34557 - C34558 + C34559 - C34560) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C31365 * C90121 + C31366 * C92320 +
            (C31354 - C31353 + C31356 - C31355) * C90114 +
            (C31358 - C31357 + C31360 - C31359) * C92102) *
               C92334 +
           ((C34554 - C34553 + C34556 - C34555) * C90121 +
            (C34558 - C34557 + C34560 - C34559) * C92320 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C90114 +
            (C31252 * C1468 - C31334 * C1384 + C92226 * C3446 -
             C31335 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C90121 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C92320 +
            (C31337 - C31338 + C31339 - C31340) * C90114 +
            (C31341 - C31342 + C31343 - C31344) * C92102) *
               C92334 +
           ((C41214 - C41215 + C41216 - C41217) * C90121 +
            (C41218 - C41219 + C41220 - C41221) * C92320 +
            (C34546 - C34545 + C34548 - C34547) * C90114 +
            (C34550 - C34549 + C34552 - C34551) * C92102) *
               C92252) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C90121 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C92320 +
            (C33589 - C33590 + C33591 - C33592) * C90114 +
            (C33593 - C33594 + C33595 - C33596) * C92102) *
               C92334 +
           ((C43921 - C43922 + C43923 - C43924) * C90121 +
            (C43925 - C43926 + C43927 - C43928) * C92320 +
            (C31334 * C3358 - C31252 * C3440 + C31335 * C5701 -
             C92226 * C5800) *
                C90114 +
            (C31334 * C3364 - C31252 * C3444 + C31335 * C5708 -
             C92226 * C5806) *
                C92102) *
               C92252) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C90121 +
            (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
                C92320 +
            (C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C90114 +
            (C31252 * C889 - C31334 * C813 + C92226 * C4953 - C31335 * C4819) *
                C92102) *
               C92334 +
           ((C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C90121 +
            (C31252 * C5805 - C31334 * C5710 + C92226 * C8590 -
             C31335 * C8457) *
                C92320 +
            (C31252 * C5800 - C31334 * C5701 + C92226 * C8589 -
             C31335 * C8455) *
                C90114 +
            (C31252 * C5806 - C31334 * C5708 + C92226 * C8591 -
             C31335 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C90121 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92320 +
            (C19901 - C19902 + C19903 - C19904) * C90114 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C31252 +
           ((C25850 - C25851 + C25852 - C25853) * C90121 +
            (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
            C27897 * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C90121 +
            (C19906 - C19905 + C19908 - C19907) * C92320 +
            (C19910 - C19909 + C19912 - C19911) * C90114 +
            (C19914 - C19913 + C19916 - C19915) * C92102) *
               C31252 +
           (C27898 * C90121 + C27899 * C92320 +
            (C22169 - C22170 + C22171 - C22172) * C90114 +
            (C22173 - C22174 + C22175 - C22176) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C19929 * C90121 + C19930 * C92320 +
            (C19918 - C19917 + C19920 - C19919) * C90114 +
            (C19922 - C19921 + C19924 - C19923) * C92102) *
               C31252 +
           ((C22170 - C22169 + C22172 - C22171) * C90121 +
            (C22174 - C22173 + C22176 - C22175) * C92320 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C90114 +
            (C92334 * C953 - C19898 * C803 + C92252 * C3520 - C19899 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C90121 +
            (C92334 * C272 - C19898 * C115 + C92252 * C1531 - C19899 * C1390) *
                C92320 +
            (C19901 - C19902 + C19903 - C19904) * C90114 +
            (C19905 - C19906 + C19907 - C19908) * C92102) *
               C31252 +
           ((C25850 - C25851 + C25852 - C25853) * C90121 +
            (C25854 - C25855 + C25856 - C25857) * C92320 + C27896 * C90114 +
            C27897 * C92102) *
               C92226) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C90121 +
            (C25855 - C25854 + C25857 - C25856) * C92320 + C27898 * C90114 +
            C27899 * C92102) *
               C31252 +
           ((C25858 - C25859 + C25860 - C25861) * C90121 +
            (C25862 - C25863 + C25864 - C25865) * C92320 +
            (C25866 - C25867 + C25868 - C25869) * C90114 +
            (C25870 - C25871 + C25872 - C25873) * C92102) *
               C92226) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C90121 +
            (C25863 - C25862 + C25865 - C25864) * C92320 +
            (C25867 - C25866 + C25869 - C25868) * C90114 +
            (C25871 - C25870 + C25873 - C25872) * C92102) *
               C31252 +
           ((C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C90121 +
            (C92334 * C5034 - C19898 * C4821 + C92252 * C8692 -
             C19899 * C8457) *
                C92320 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C90114 +
            (C92334 * C5035 - C19898 * C4819 + C92252 * C8693 -
             C19899 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C31334 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C31252 +
            (C45829 - C45830 + C45831 - C45832) * C31335 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C92334 +
           ((C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C31334 +
            (C92320 * C1597 - C90121 * C1589 + C92102 * C1598 -
             C90114 * C1590) *
                C31252 +
            (C49234 - C49233 + C49236 - C49235) * C31335 +
            (C49238 - C49237 + C49240 - C49239) * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C31334 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C31252 +
            (C47345 - C47346 + C47347 - C47348) * C31335 +
            (C47349 - C47350 + C47351 - C47352) * C92226) *
               C92334 +
           ((C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
             C92102 * C1385) *
                C31334 +
            (C90121 * C1590 - C92320 * C1598 + C90114 * C1591 -
             C92102 * C1599) *
                C31252 +
            (C90121 * C3358 - C92320 * C3363 + C90114 * C3359 -
             C92102 * C3365) *
                C31335 +
            (C90121 * C3588 - C92320 * C3592 + C90114 * C3589 -
             C92102 * C3593) *
                C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C31334 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C31252 +
            (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C31335 +
            (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 -
             C90114 * C1011) *
                C92226) *
               C92334 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C31334 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C31252 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C31335 +
            (C92320 * C3593 - C90121 * C3589 + C92102 * C3594 -
             C90114 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C31334 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C31252 +
            (C45829 - C45830 + C45831 - C45832) * C31335 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C92334 +
           ((C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C31334 +
            (C92320 * C1597 - C90121 * C1589 + C92102 * C1598 -
             C90114 * C1590) *
                C31252 +
            (C49234 - C49233 + C49236 - C49235) * C31335 +
            (C49238 - C49237 + C49240 - C49239) * C92226) *
               C92252) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C31334 +
            (C45834 - C45833 + C45836 - C45835) * C31252 +
            (C45838 - C45837 + C45840 - C45839) * C31335 +
            (C45842 - C45841 + C45844 - C45843) * C92226) *
               C92334 +
           ((C49233 - C49234 + C49235 - C49236) * C31334 +
            (C49237 - C49238 + C49239 - C49240) * C31252 +
            (C49241 - C49242 + C49243 - C49244) * C31335 +
            (C49245 - C49246 + C49247 - C49248) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C45857 * C31334 + C45858 * C31252 +
            (C45846 - C45845 + C45848 - C45847) * C31335 +
            (C45850 - C45849 + C45852 - C45851) * C92226) *
               C92334 +
           ((C49242 - C49241 + C49244 - C49243) * C31334 +
            (C49246 - C49245 + C49248 - C49247) * C31252 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C31335 +
            (C92320 * C8802 - C90121 * C8800 + C92102 * C8803 -
             C90114 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92320 +
            (C31627 + C31628) * C92102) *
               C92334 +
           ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) * C92252) *
              C92150 * C92136 * C97 -
          (((C34879 + C34880) * C92102 + (C34881 + C34882) * C92320) * C92252 +
           ((C31630 + C31629) * C92102 + (C31628 + C31627) * C92320) * C92334) *
              C92150 * C92136 * C98 +
          ((C31633 * C92320 + (C31632 + C31631) * C92102) * C92334 +
           ((C34880 + C34879) * C92320 +
            (C31334 * C1460 - C31588 * C1375 - C31334 * C1592 + C31252 * C1655 +
             C31335 * C3442 - C31589 * C3360 - C31335 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C92320 +
            (C31627 + C31628) * C92102) *
               C92334 +
           ((C41537 + C41538) * C92320 + (C34882 + C34881) * C92102) * C92252) *
              C92150 * C790 -
          (((C31335 * C5800 - C31589 * C5701 - C31335 * C5972 + C92226 * C6057 +
             C31334 * C3440 - C31588 * C3358 - C31334 * C3588 +
             C31252 * C3662) *
                C92102 +
            (C44279 + C44278) * C92320) *
               C92252 +
           ((C33937 + C33938) * C92102 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C92320) *
               C92334) *
              C92150 * C791 +
          (((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
             C31335 * C4948 - C31589 * C4815 - C31335 * C5139 +
             C92226 * C5252) *
                C92320 +
            (C31334 * C881 - C31588 * C799 - C31334 * C1013 + C31252 * C1079 +
             C31335 * C4949 - C31589 * C4814 - C31335 * C5140 +
             C92226 * C5251) *
                C92102) *
               C92334 +
           ((C31334 * C5799 - C31588 * C5702 - C31334 * C5971 + C31252 * C6058 +
             C31335 * C8588 - C31589 * C8454 - C31335 * C8800 +
             C92226 * C8918) *
                C92320 +
            (C31334 * C5800 - C31588 * C5701 - C31334 * C5972 + C31252 * C6057 +
             C31335 * C8589 - C31589 * C8455 - C31335 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C31334 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C31252 +
            (C25850 - C25851 + C25852 - C25853) * C31335 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C92320 +
           ((C19901 - C19902 + C19903 - C19904) * C31334 +
            (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
            C28316 * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C19902 - C19901 + C19904 - C19903) * C31334 +
            (C20154 - C20153 + C20156 - C20155) * C31252 + C27898 * C31335 +
            C28317 * C92226) *
               C92320 +
           ((C19910 - C19909 + C19912 - C19911) * C31334 +
            (C20159 - C20158 + C20161 - C20160) * C31252 +
            (C22169 - C22170 + C22171 - C22172) * C31335 +
            (C22482 - C22483 + C22484 - C22485) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C19929 * C31334 + C20168 * C31252 +
            (C22170 - C22169 + C22172 - C22171) * C31335 +
            (C22483 - C22482 + C22485 - C22484) * C92226) *
               C92320 +
           ((C19918 - C19917 + C19920 - C19919) * C31334 +
            (C20163 - C20162 + C20165 - C20164) * C31252 +
            (C92334 * C945 - C19898 * C794 + C92252 * C3516 - C19899 * C3360) *
                C31335 +
            (C92334 * C1135 - C19898 * C1011 + C92252 * C3734 -
             C19899 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92334 * C266 - C19898 * C108 + C92252 * C1523 - C19899 * C1378) *
                C31334 +
            (C92334 * C495 - C19898 * C348 + C92252 * C1713 - C19899 * C1589) *
                C31252 +
            (C25850 - C25851 + C25852 - C25853) * C31335 +
            (C26168 - C26169 + C26170 - C26171) * C92226) *
               C92320 +
           ((C19901 - C19902 + C19903 - C19904) * C31334 +
            (C20153 - C20154 + C20155 - C20156) * C31252 + C27896 * C31335 +
            C28316 * C92226) *
               C92102) *
              C92150 * C790 +
          (((C25851 - C25850 + C25853 - C25852) * C31334 +
            (C26169 - C26168 + C26171 - C26170) * C31252 +
            (C25858 - C25859 + C25860 - C25861) * C31335 +
            (C26172 - C26173 + C26174 - C26175) * C92226) *
               C92320 +
           (C27898 * C31334 + C28317 * C31252 +
            (C25866 - C25867 + C25868 - C25869) * C31335 +
            (C26176 - C26177 + C26178 - C26179) * C92226) *
               C92102) *
              C92150 * C791 +
          (((C25859 - C25858 + C25861 - C25860) * C31334 +
            (C26173 - C26172 + C26175 - C26174) * C31252 +
            (C92334 * C5030 - C19898 * C4815 + C92252 * C8690 -
             C19899 * C8454) *
                C31335 +
            (C92334 * C5329 - C19898 * C5139 + C92252 * C9018 -
             C19899 * C8800) *
                C92226) *
               C92320 +
           ((C25867 - C25866 + C25869 - C25868) * C31334 +
            (C26177 - C26176 + C26179 - C26178) * C31252 +
            (C92334 * C5031 - C19898 * C4814 + C92252 * C8691 -
             C19899 * C8455) *
                C31335 +
            (C92334 * C5330 - C19898 * C5140 + C92252 * C9019 -
             C19899 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C19898 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92334 +
            (C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C19899 +
            (C92320 * C1779 - C90121 * C1771 + C92102 * C1780 -
             C90114 * C1772) *
                C92252) *
               C31252 +
           ((C45829 - C45830 + C45831 - C45832) * C19898 +
            (C46081 - C46082 + C46083 - C46084) * C92334 +
            (C49234 - C49233 + C49236 - C49235) * C19899 +
            (C49544 - C49543 + C49546 - C49545) * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C19898 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92334 +
            (C90121 * C1377 - C92320 * C1387 + C90114 * C1376 -
             C92102 * C1385) *
                C19899 +
            (C90121 * C1772 - C92320 * C1780 + C90114 * C1773 -
             C92102 * C1781) *
                C92252) *
               C31252 +
           ((C47345 - C47346 + C47347 - C47348) * C19898 +
            (C47676 - C47677 + C47678 - C47679) * C92334 +
            (C90121 * C3358 - C92320 * C3363 + C90114 * C3359 -
             C92102 * C3365) *
                C19899 +
            (C90121 * C3802 - C92320 * C3806 + C90114 * C3803 -
             C92102 * C3807) *
                C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C19898 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C92334 +
            (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C19899 +
            (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 -
             C90114 * C1774) *
                C92252) *
               C31252 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C19898 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C92334 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C19899 +
            (C92320 * C3807 - C90121 * C3803 + C92102 * C3808 -
             C90114 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C19898 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92334 +
            (C92320 * C1389 - C90121 * C1378 + C92102 * C1387 -
             C90114 * C1377) *
                C19899 +
            (C92320 * C1779 - C90121 * C1771 + C92102 * C1780 -
             C90114 * C1772) *
                C92252) *
               C31252 +
           ((C45829 - C45830 + C45831 - C45832) * C19898 +
            (C46081 - C46082 + C46083 - C46084) * C92334 +
            (C49234 - C49233 + C49236 - C49235) * C19899 +
            (C49544 - C49543 + C49546 - C49545) * C92252) *
               C92226) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C19898 +
            (C46082 - C46081 + C46084 - C46083) * C92334 +
            (C49233 - C49234 + C49235 - C49236) * C19899 +
            (C49543 - C49544 + C49545 - C49546) * C92252) *
               C31252 +
           ((C45838 - C45837 + C45840 - C45839) * C19898 +
            (C46087 - C46086 + C46089 - C46088) * C92334 +
            (C49241 - C49242 + C49243 - C49244) * C19899 +
            (C49547 - C49548 + C49549 - C49550) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C45857 * C19898 + C46096 * C92334 +
            (C49242 - C49241 + C49244 - C49243) * C19899 +
            (C49548 - C49547 + C49550 - C49549) * C92252) *
               C31252 +
           ((C45846 - C45845 + C45848 - C45847) * C19898 +
            (C46091 - C46090 + C46093 - C46092) * C92334 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C19899 +
            (C92320 * C9124 - C90121 * C9122 + C92102 * C9125 -
             C90114 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C19898 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92334 +
            (C41214 - C41215 + C41216 - C41217) * C19899 +
            (C41781 - C41782 + C41783 - C41784) * C92252) *
               C92320 +
           ((C31337 - C31338 + C31339 - C31340) * C19898 +
            (C31863 - C31864 + C31865 - C31866) * C92334 +
            (C34546 - C34545 + C34548 - C34547) * C19899 +
            (C35178 - C35177 + C35180 - C35179) * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C19898 +
            (C31864 - C31863 + C31866 - C31865) * C92334 +
            (C34545 - C34546 + C34547 - C34548) * C19899 +
            (C35177 - C35178 + C35179 - C35180) * C92252) *
               C92320 +
           ((C31346 - C31345 + C31348 - C31347) * C19898 +
            (C31869 - C31868 + C31871 - C31870) * C92334 +
            (C34553 - C34554 + C34555 - C34556) * C19899 +
            (C35181 - C35182 + C35183 - C35184) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C31365 * C19898 + C31878 * C92334 +
            (C34554 - C34553 + C34556 - C34555) * C19899 +
            (C35182 - C35181 + C35184 - C35183) * C92252) *
               C92320 +
           ((C31354 - C31353 + C31356 - C31355) * C19898 +
            (C31873 - C31872 + C31875 - C31874) * C92334 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C19899 +
            (C31252 * C1840 - C31334 * C1774 + C92226 * C3878 -
             C31335 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C19898 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92334 +
            (C41214 - C41215 + C41216 - C41217) * C19899 +
            (C41781 - C41782 + C41783 - C41784) * C92252) *
               C92320 +
           ((C31337 - C31338 + C31339 - C31340) * C19898 +
            (C31863 - C31864 + C31865 - C31866) * C92334 +
            (C34546 - C34545 + C34548 - C34547) * C19899 +
            (C35178 - C35177 + C35180 - C35179) * C92252) *
               C92102) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C19898 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C92334 +
            (C43921 - C43922 + C43923 - C43924) * C19899 +
            (C44589 - C44590 + C44591 - C44592) * C92252) *
               C92320 +
           ((C33589 - C33590 + C33591 - C33592) * C19898 +
            (C34239 - C34240 + C34241 - C34242) * C92334 +
            (C31334 * C3358 - C31252 * C3440 + C31335 * C5701 -
             C92226 * C5800) *
                C19899 +
            (C31334 * C3802 - C31252 * C3876 + C31335 * C6218 -
             C92226 * C6304) *
                C92252) *
               C92102) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C19898 +
            (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
             C31335 * C5417) *
                C92334 +
            (C31252 * C5799 - C31334 * C5702 + C92226 * C8588 -
             C31335 * C8454) *
                C19899 +
            (C31252 * C6303 - C31334 * C6217 + C92226 * C9232 -
             C31335 * C9122) *
                C92252) *
               C92320 +
           ((C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C19898 +
            (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
             C31335 * C5418) *
                C92334 +
            (C31252 * C5800 - C31334 * C5701 + C92226 * C8589 -
             C31335 * C8455) *
                C19899 +
            (C31252 * C6304 - C31334 * C6218 + C92226 * C9233 -
             C31335 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C31252 +
            (C26510 + C26511) * C92226) *
               C92320 +
           ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C22806 + C22807) * C92226 + (C20442 + C20441) * C31252) * C92102 +
           (C28717 * C92226 + (C20440 + C20439) * C31252) * C92320) *
              C92150 * C92136 * C98 +
          ((C20445 * C31252 + (C22807 + C22806) * C92226) * C92320 +
           ((C20444 + C20443) * C31252 +
            (C19898 * C945 - C20400 * C794 - C19898 * C1193 + C92334 * C1314 +
             C19899 * C3516 - C20401 * C3360 - C19899 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19898 * C266 - C20400 * C108 - C19898 * C567 + C92334 * C702 +
             C19899 * C1523 - C20401 * C1378 - C19899 * C1771 +
             C92252 * C1898) *
                C31252 +
            (C26510 + C26511) * C92226) *
               C92320 +
           ((C20439 + C20440) * C31252 + C28716 * C92226) * C92102) *
              C92150 * C790 -
          (((C26512 + C26513) * C92226 + C28717 * C31252) * C92102 +
           ((C26514 + C26515) * C92226 + (C26511 + C26510) * C31252) * C92320) *
              C92150 * C791 +
          (((C26515 + C26514) * C31252 +
            (C19898 * C5030 - C20400 * C4815 - C19898 * C5417 + C92334 * C5596 +
             C19899 * C8690 - C20401 * C8454 - C19899 * C9122 +
             C92252 * C9332) *
                C92226) *
               C92320 +
           ((C26513 + C26512) * C31252 +
            (C19898 * C5031 - C20400 * C4814 - C19898 * C5418 + C92334 * C5595 +
             C19899 * C8691 - C20401 * C8455 - C19899 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C92150 * C1969 -
           ((C32075 + C32076 + C32077) * C92188 * C92226 +
            (C32074 + C32073 + C32072) * C92188 * C31252) *
               C92150 * C1970) *
              C1971 +
          (((C33488 + C33489 + C33490) * C92188 * C31252 +
            (C31254 * C812 - C31255 * C799 - C31254 * C813 + C31249 * C823 +
             C31256 * C814 - C31257 * C800 - C31256 * C815 + C31250 * C824 +
             C31258 * C816 - C31259 * C801 - C31258 * C817 + C31251 * C825) *
                C92188 * C92226) *
               C92150 * C1970 -
           ((C33490 + C33489 + C33488) * C92188 * C92226 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C92188 * C31252) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C92150 * C1969 -
           (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
            C36755 * C36258) *
               C92150 * C1970) *
              C1971 +
          ((C37782 * C36258 + C37783 * C36259 + C37784 * C36260 +
            (C36262 * C4824 - C36263 * C4817 - C36262 * C4825 +
             C92097 * C4829) *
                C92188 * C36261) *
               C92150 * C1970 -
           (C37784 * C36261 + C37783 * C36260 + C37782 * C36259 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92188 * C36258) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C92150 * C1969 +
           ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C31254 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C31249 +
            (C33589 - C33590 + C33591 - C33592) * C31256 +
            (C33593 - C33594 + C33595 - C33596) * C31250 +
            (C33597 - C33598 + C33599 - C33600) * C31258 +
            (C33601 - C33602 + C33603 - C33604) * C31251) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C31254 +
            (C31342 - C31341 + C31344 - C31343) * C31249 +
            (C31346 - C31345 + C31348 - C31347) * C31256 +
            (C31350 - C31349 + C31352 - C31351) * C31250 +
            (C31353 - C31354 + C31355 - C31356) * C31258 +
            (C31357 - C31358 + C31359 - C31360) * C31251) *
               C92188 * C92150 * C1969 +
           ((C33590 - C33589 + C33592 - C33591) * C31254 +
            (C33594 - C33593 + C33596 - C33595) * C31249 +
            (C33598 - C33597 + C33600 - C33599) * C31256 +
            (C33602 - C33601 + C33604 - C33603) * C31250 +
            (C31252 * C879 - C31334 * C794 + C92226 * C883 - C31335 * C801) *
                C31258 +
            (C31252 * C887 - C31334 * C803 + C92226 * C891 - C31335 * C817) *
                C31251) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C92150 * C1969 +
           ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C36262 +
            (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
             C36316 * C4821 - C36260 * C4952 + C36317 * C4823 -
             C36261 * C4954) *
                C92097) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C36262 +
            (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
             C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
                C92097) *
               C92188 * C92150 * C1969 +
           ((C36258 * C877 - C36314 * C796 + C36259 * C881 - C36315 * C799 +
             C36260 * C4949 - C36316 * C4814 + C36261 * C4951 -
             C36317 * C4817) *
                C36262 +
            (C36258 * C885 - C36314 * C807 + C36259 * C889 - C36315 * C813 +
             C36260 * C4953 - C36316 * C4819 + C36261 * C4955 -
             C36317 * C4825) *
                C92097) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C92150 * C1969 +
           (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
             C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
             C17153 * C31251) *
                C31252 +
            ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
             C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
             (C4214 - C4215) * C31251) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C31254 + (C282 - C281) * C31249 +
             (C284 - C283) * C31256 + (C286 - C285) * C31250 +
             (C288 - C287) * C31258 + (C290 - C289) * C31251) *
                C31252 +
            (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
             C17153 * C31250 + (C2134 - C2135) * C31258 +
             (C2136 - C2137) * C31251) *
                C92226) *
               C92150 * C1969 +
           ((C6732 * C31254 + C6733 * C31249 + C14887 * C31256 +
             C14888 * C31250 + (C2135 - C2134) * C31258 +
             (C2137 - C2136) * C31251) *
                C31252 +
            (C5047 * C31254 + C5048 * C31249 + (C4213 - C4212) * C31256 +
             (C4215 - C4214) * C31250 + (C92188 * C949 - C265 * C801) * C31258 +
             (C92188 * C957 - C265 * C817) * C31251) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C92150 * C1969 +
           (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
            ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
            ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
            ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) *
                C36261) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
            (C6734 * C36262 + C6735 * C92097) * C36259 +
            (C6736 * C36262 + C6737 * C92097) * C36260 +
            ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
               C92150 * C1969 +
           ((C6732 * C36262 + C6733 * C92097) * C36258 +
            (C5047 * C36262 + C5048 * C92097) * C36259 +
            ((C5054 - C5053) * C36262 + (C5056 - C5055) * C92097) * C36260 +
            ((C92188 * C5033 - C265 * C4817) * C36262 +
             (C92188 * C5037 - C265 * C4825) * C92097) *
                C36261) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C92150 * C1969 +
           ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
            (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
            (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C31334 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C31252 +
            (C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C31335 +
            (C33807 - C33808 + C33809 - C33810 + C33811 - C33812) * C92226) *
               C92188 * C92150 * C1969 +
           ((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C31334 +
            (C33808 - C33807 + C33810 - C33809 + C33812 - C33811) * C31252 +
            (C31249 * C812 - C31254 * C799 + C31250 * C814 - C31256 * C800 +
             C31251 * C816 - C31258 * C801) *
                C31335 +
            (C31249 * C1021 - C31254 * C1013 + C31250 * C1022 - C31256 * C1014 +
             C31251 * C1023 - C31258 * C1015) *
                C92226) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C92150 * C1969 +
           ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
            (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
            (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
            (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C36262 * C109 - C92097 * C116) * C36314 +
            (C36262 * C349 - C92097 * C355) * C36258 +
            (C37983 - C37984) * C36315 + (C37985 - C37986) * C36259 +
            (C37987 - C37988) * C36316 + (C37989 - C37990) * C36260 +
            (C37991 - C37992) * C36317 + (C37993 - C37994) * C36261) *
               C92188 * C92150 * C1969 +
           ((C37984 - C37983) * C36314 + (C37986 - C37985) * C36258 +
            (C37988 - C37987) * C36315 + (C37990 - C37989) * C36259 +
            (C37992 - C37991) * C36316 + (C37994 - C37993) * C36260 +
            (C92097 * C4824 - C36262 * C4817) * C36317 +
            (C92097 * C5146 - C36262 * C5142) * C36261) *
               C92188 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C92150 * C1969 -
           ((C33935 + C33936) * C31251 + (C33937 + C33938) * C31250 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C31249) *
               C92188 * C92150 * C1970) *
              C1971 +
          (((C33938 + C33937) * C31249 + (C33936 + C33935) * C31250 +
            (C31334 * C879 - C31588 * C794 - C31334 * C1011 + C31252 * C1074 +
             C31335 * C883 - C31589 * C801 - C31335 * C1015 + C92226 * C1081) *
                C31251) *
               C92188 * C92150 * C1970 -
           ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
            (C31628 + C31627) * C31249) *
               C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C92150 * C1969 -
           (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
            C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
            C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
            C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
               C92097 * C92188 * C92150 * C1970) *
              C1971 +
          ((C36314 * C877 - C36468 * C796 - C36314 * C1009 + C36258 * C1076 +
            C36315 * C881 - C36469 * C799 - C36315 * C1013 + C36259 * C1079 +
            C36316 * C4949 - C36470 * C4814 - C36316 * C5140 + C36260 * C5251 +
            C36317 * C4951 - C36471 * C4817 - C36317 * C5142 + C36261 * C5254) *
               C92097 * C92188 * C92150 * C1970 -
           (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
            C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
            C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
            C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
               C92097 * C92188 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C92150 * C1969 +
           (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
             (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
                C31249 +
            (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 +
             C7075 * C92226) *
                C31250 +
            (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
             (C4485 - C4486) * C92226) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
             C7074 * C92226) *
                C31249 +
            ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
             C17488 * C92226) *
                C31250 +
            ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
             (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
                C31251) *
               C92150 * C1969 +
           ((C6732 * C31334 + C7073 * C31252 + C5047 * C31335 +
             C5338 * C92226) *
                C31249 +
            (C14887 * C31334 + C15159 * C31252 + (C4213 - C4212) * C31335 +
             (C4486 - C4485) * C92226) *
                C31250 +
            ((C2135 - C2134) * C31334 + (C2366 - C2365) * C31252 +
             (C92188 * C949 - C265 * C801) * C31335 +
             (C92188 * C1139 - C265 * C1015) * C92226) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C92150 * C1969 +
           ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
            (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
            (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
            (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
            C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
            (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
               C92097 * C92150 * C1969 +
           (C6732 * C36314 + C7073 * C36258 + C5047 * C36315 + C5338 * C36259 +
            (C5054 - C5053) * C36316 + (C5342 - C5341) * C36260 +
            (C92188 * C5033 - C265 * C4817) * C36317 +
            (C92188 * C5332 - C265 * C5142) * C36261) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
             (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
                C31252 +
            ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
             (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C265 +
             (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
              C31258 * C570 - C31251 * C576) *
                 C92188) *
                C31252 +
            ((C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C265 +
             (C34135 - C34136 + C34137 - C34138 + C34139 - C34140) * C92188) *
                C92226) *
               C92150 * C1969 +
           (((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C265 +
             (C34136 - C34135 + C34138 - C34137 + C34140 - C34139) * C92188) *
                C31252 +
            ((C31249 * C812 - C31254 * C799 + C31250 * C814 - C31256 * C800 +
              C31251 * C816 - C31258 * C801) *
                 C265 +
             (C31249 * C1203 - C31254 * C1195 + C31250 * C1204 -
              C31256 * C1196 + C31251 * C1205 - C31258 * C1197) *
                 C92188) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C92150 * C1969 +
           (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
            ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
            ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
            ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C265 +
             (C36262 * C568 - C92097 * C574) * C92188) *
                C36258 +
            ((C37983 - C37984) * C265 + (C38193 - C38194) * C92188) * C36259 +
            ((C37987 - C37988) * C265 + (C38195 - C38196) * C92188) * C36260 +
            ((C37991 - C37992) * C265 + (C38197 - C38198) * C92188) * C36261) *
               C92150 * C1969 +
           (((C37984 - C37983) * C265 + (C38194 - C38193) * C92188) * C36258 +
            ((C37988 - C37987) * C265 + (C38196 - C38195) * C92188) * C36259 +
            ((C37992 - C37991) * C265 + (C38198 - C38197) * C92188) * C36260 +
            ((C92097 * C4824 - C36262 * C4817) * C265 +
             (C92097 * C5424 - C36262 * C5420) * C92188) *
                C36261) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C92150 * C1969 +
           (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C265 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C31249 +
            ((C33589 - C33590 + C33591 - C33592) * C265 +
             (C34239 - C34240 + C34241 - C34242) * C92188) *
                C31250 +
            ((C33597 - C33598 + C33599 - C33600) * C265 +
             (C34243 - C34244 + C34245 - C34246) * C92188) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C265 +
             (C31864 - C31863 + C31866 - C31865) * C92188) *
                C31249 +
            ((C31346 - C31345 + C31348 - C31347) * C265 +
             (C31869 - C31868 + C31871 - C31870) * C92188) *
                C31250 +
            ((C31353 - C31354 + C31355 - C31356) * C265 +
             (C31872 - C31873 + C31874 - C31875) * C92188) *
                C31251) *
               C92150 * C1969 +
           (((C33590 - C33589 + C33592 - C33591) * C265 +
             (C34240 - C34239 + C34242 - C34241) * C92188) *
                C31249 +
            ((C33598 - C33597 + C33600 - C33599) * C265 +
             (C34244 - C34243 + C34246 - C34245) * C92188) *
                C31250 +
            ((C31252 * C879 - C31334 * C794 + C92226 * C883 - C31335 * C801) *
                 C265 +
             (C31252 * C1259 - C31334 * C1193 + C92226 * C1263 -
              C31335 * C1197) *
                 C92188) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C92150 * C1969 +
           ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C265 +
            (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
             C36316 * C5417 - C36260 * C5517 + C36317 * C5419 -
             C36261 * C5519) *
                C92188) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C265 +
            (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
             C36316 * C1195 - C36260 * C1261 + C36317 * C5418 -
             C36261 * C5518) *
                C92188) *
               C92097 * C92150 * C1969 +
           ((C36258 * C877 - C36314 * C796 + C36259 * C881 - C36315 * C799 +
             C36260 * C4949 - C36316 * C4814 + C36261 * C4951 -
             C36317 * C4817) *
                C265 +
            (C36258 * C1257 - C36314 * C1191 + C36259 * C1261 - C36315 * C1195 +
             C36260 * C5518 - C36316 * C5418 + C36261 * C5520 -
             C36317 * C5420) *
                C92188) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C92150 * C1969 -
           ((C34345 + C34346) * C31251 + (C34347 + C34348) * C31250 +
            (C5625 * C92226 + C5624 * C31252) * C31249) *
               C92150 * C1970) *
              C1971 +
          (((C34348 + C34347) * C31249 + (C34346 + C34345) * C31250 +
            (C2593 * C31252 +
             (C265 * C949 - C701 * C801 - C265 * C1197 + C92188 * C1321) *
                 C92226) *
                C31251) *
               C92150 * C1970 -
           ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
            (C31956 + C31955) * C31249) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C92150 * C1969 -
           (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 +
            C5624 * C36258) *
               C92097 * C92150 * C1970) *
              C1971 +
          ((C2595 * C36258 + C4737 * C36259 + C5626 * C36260 +
            (C265 * C5033 - C701 * C4817 - C265 * C5420 + C92188 * C5598) *
                C36261) *
               C92097 * C92150 * C1970 -
           (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
               C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C2664 -
           ((C35403 + C35404 + C35405) * C92188 * C92226 +
            (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
             C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
             C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
             C31249 * C1402) *
                C92188 * C31252) *
               C2665) *
              C1969 +
          (((C35405 + C35404 + C35403) * C92188 * C31252 +
            (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 + C31249 * C5720 +
             C31256 * C5707 - C31257 * C5701 - C31256 * C5708 + C31250 * C5719 +
             C31258 * C7489 - C31259 * C7488 - C31258 * C7490 +
             C31251 * C7491) *
                C92188 * C92226) *
               C2665 -
           ((C32075 + C32076 + C32077) * C92188 * C92226 +
            (C32074 + C32073 + C32072) * C92188 * C31252) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C2664 -
           (C39016 * C36261 + C39017 * C36260 + C39018 * C36259 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C92188 * C36258) *
               C2665) *
              C1969 +
          ((C39018 * C36258 + C39017 * C36259 + C39016 * C36260 +
            (C36262 * C38991 - C36263 * C38990 - C36262 * C38992 +
             C92097 * C38993) *
                C92188 * C36261) *
               C2665 -
           (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
            C36755 * C36258) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C2664 +
           ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C31254 +
            (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 -
             C92226 * C3443) *
                C31249 +
            (C34545 - C34546 + C34547 - C34548) * C31256 +
            (C34549 - C34550 + C34551 - C34552) * C31250 +
            (C34553 - C34554 + C34555 - C34556) * C31258 +
            (C34557 - C34558 + C34559 - C34560) * C31251) *
               C92188 * C2665) *
              C1969 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C31254 +
            (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
                C31249 +
            (C33589 - C33590 + C33591 - C33592) * C31256 +
            (C33593 - C33594 + C33595 - C33596) * C31250 +
            (C33597 - C33598 + C33599 - C33600) * C31258 +
            (C33601 - C33602 + C33603 - C33604) * C31251) *
               C92188 * C2664 +
           ((C31252 * C3439 - C31334 * C3357 + C92226 * C5799 -
             C31335 * C5702) *
                C31254 +
            (C31252 * C3443 - C31334 * C3362 + C92226 * C5805 -
             C31335 * C5710) *
                C31249 +
            (C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
             C31335 * C5701) *
                C31256 +
            (C31252 * C3444 - C31334 * C3364 + C92226 * C5806 -
             C31335 * C5708) *
                C31250 +
            (C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
             C31335 * C7488) *
                C31258 +
            (C31252 * C3445 - C31334 * C3366 + C92226 * C7591 -
             C31335 * C7490) *
                C31251) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C36262 +
            (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
             C36316 * C5710 - C36260 * C5805 + C36317 * C8457 -
             C36261 * C8590) *
                C92097) *
               C92188 * C2665) *
              C1969 +
          (((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C36262 +
            (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
             C36316 * C4821 - C36260 * C4952 + C36317 * C4823 -
             C36261 * C4954) *
                C92097) *
               C92188 * C2664 +
           ((C36258 * C3439 - C36314 * C3357 + C36259 * C5799 - C36315 * C5702 +
             C36260 * C8588 - C36316 * C8454 + C36261 * C39084 -
             C36317 * C38990) *
                C36262 +
            (C36258 * C3443 - C36314 * C3362 + C36259 * C5805 - C36315 * C5710 +
             C36260 * C8590 - C36316 * C8457 + C36261 * C39085 -
             C36317 * C38992) *
                C92097) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31254 +
             (C265 * C1390 - C92188 * C1531) * C31249 +
             (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
             (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
                C31252 +
            ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
             (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
             (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
                C92226) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
             C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
             C17153 * C31251) *
                C31252 +
            ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
             C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
             (C4214 - C4215) * C31251) *
                C92226) *
               C2664 +
           (((C8696 - C8695) * C31254 + (C8698 - C8697) * C31249 +
             (C7706 - C7705) * C31256 + (C7708 - C7707) * C31250 +
             (C18112 - C18111) * C31258 + (C18114 - C18113) * C31251) *
                C31252 +
            ((C8700 - C8699) * C31254 + (C8702 - C8701) * C31249 +
             (C7710 - C7709) * C31256 + (C7712 - C7711) * C31250 +
             (C92188 * C7702 - C265 * C7488) * C31258 +
             (C92188 * C7703 - C265 * C7490) * C31251) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C36262 +
             (C265 * C1390 - C92188 * C1531) * C92097) *
                C36258 +
            ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
            ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
            ((C39155 - C39156) * C36262 + (C39157 - C39158) * C92097) *
                C36261) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
            ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
            ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
            ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) *
                C36261) *
               C2664 +
           (((C8696 - C8695) * C36262 + (C8698 - C8697) * C92097) * C36258 +
            ((C8700 - C8699) * C36262 + (C8702 - C8701) * C92097) * C36259 +
            ((C39156 - C39155) * C36262 + (C39158 - C39157) * C92097) * C36260 +
            ((C92188 * C39152 - C265 * C38990) * C36262 +
             (C92188 * C39153 - C265 * C38992) * C92097) *
                C36261) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C2664 +
           ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C31334 +
            (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
             C31258 * C1591 - C31251 * C1599) *
                C31252 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C31335 +
            (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92226) *
               C92188 * C2665) *
              C1969 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
            (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
            (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
               C92188 * C2664 +
           ((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C31334 +
            (C35707 - C35706 + C35709 - C35708 + C35711 - C35710) * C31252 +
            (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
             C31251 * C7489 - C31258 * C7488) *
                C31335 +
            (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 - C31256 * C5972 +
             C31251 * C7811 - C31258 * C7810) *
                C92226) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C2664 +
           ((C36262 * C1378 - C92097 * C1389) * C36314 +
            (C36262 * C1589 - C92097 * C1597) * C36258 +
            (C39227 - C39228) * C36315 + (C39229 - C39230) * C36259 +
            (C39231 - C39232) * C36316 + (C39233 - C39234) * C36260 +
            (C39235 - C39236) * C36317 + (C39237 - C39238) * C36261) *
               C92188 * C2665) *
              C1969 +
          (((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
            (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
            (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
            (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
               C92188 * C2664 +
           ((C39228 - C39227) * C36314 + (C39230 - C39229) * C36258 +
            (C39232 - C39231) * C36315 + (C39234 - C39233) * C36259 +
            (C39236 - C39235) * C36316 + (C39238 - C39237) * C36260 +
            (C92097 * C38991 - C36262 * C38990) * C36317 +
            (C92097 * C39225 - C36262 * C39224) * C36261) *
               C92188 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C2664 -
           ((C34879 + C34880) * C31251 + (C34881 + C34882) * C31250 +
            (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
             C31334 * C1457 - C31588 * C1378 - C31334 * C1589 +
             C31252 * C1658) *
                C31249) *
               C92188 * C2665) *
              C1969 +
          (((C31334 * C3439 - C31588 * C3357 - C31334 * C3587 + C31252 * C3661 +
             C31335 * C5799 - C31589 * C5702 - C31335 * C5971 +
             C92226 * C6058) *
                C31249 +
            (C31334 * C3440 - C31588 * C3358 - C31334 * C3588 + C31252 * C3662 +
             C31335 * C5800 - C31589 * C5701 - C31335 * C5972 +
             C92226 * C6057) *
                C31250 +
            (C31334 * C3441 - C31588 * C3359 - C31334 * C3589 + C31252 * C3663 +
             C31335 * C7590 - C31589 * C7488 - C31335 * C7810 +
             C92226 * C7910) *
                C31251) *
               C92188 * C2665 -
           ((C33935 + C33936) * C31251 + (C33937 + C33938) * C31250 +
            (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
             C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
                C31249) *
               C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C2664 -
           (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
            C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
            C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
            C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
               C92097 * C92188 * C2665) *
              C1969 +
          ((C36314 * C3439 - C36468 * C3357 - C36314 * C3587 + C36258 * C3661 +
            C36315 * C5799 - C36469 * C5702 - C36315 * C5971 + C36259 * C6058 +
            C36316 * C8588 - C36470 * C8454 - C36316 * C8800 + C36260 * C8918 +
            C36317 * C39084 - C36471 * C38990 - C36317 * C39224 +
            C36261 * C39304) *
               C92097 * C92188 * C2665 -
           (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
            C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
            C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
            C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
               C92097 * C92188 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31334 +
             (C265 * C1589 - C92188 * C1713) * C31252 +
             (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
                C31249 +
            ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
             (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
                C31250 +
            ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
             (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
                C31251) *
               C2665) *
              C1969 +
          ((((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
             (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
                C31249 +
            (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 +
             C7075 * C92226) *
                C31250 +
            (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
             (C4485 - C4486) * C92226) *
                C31251) *
               C2664 +
           (((C8696 - C8695) * C31334 + (C9022 - C9021) * C31252 +
             (C8700 - C8699) * C31335 + (C9024 - C9023) * C92226) *
                C31249 +
            ((C7706 - C7705) * C31334 + (C8033 - C8032) * C31252 +
             (C7710 - C7709) * C31335 + (C8035 - C8034) * C92226) *
                C31250 +
            ((C18112 - C18111) * C31334 + (C18438 - C18437) * C31252 +
             (C92188 * C7702 - C265 * C7488) * C31335 +
             (C92188 * C8030 - C265 * C7810) * C92226) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C36314 +
            (C265 * C1589 - C92188 * C1713) * C36258 +
            (C8695 - C8696) * C36315 + (C9021 - C9022) * C36259 +
            (C8699 - C8700) * C36316 + (C9023 - C9024) * C36260 +
            (C39155 - C39156) * C36317 + (C39373 - C39374) * C36261) *
               C92097 * C2665) *
              C1969 +
          (((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
            (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
            (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
            (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
               C92097 * C2664 +
           ((C8696 - C8695) * C36314 + (C9022 - C9021) * C36258 +
            (C8700 - C8699) * C36315 + (C9024 - C9023) * C36259 +
            (C39156 - C39155) * C36316 + (C39374 - C39373) * C36260 +
            (C92188 * C39152 - C265 * C38990) * C36317 +
            (C92188 * C39371 - C265 * C39224) * C36261) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C2664 +
           (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 -
              C31250 * C1387 + C31258 * C1376 - C31251 * C1385) *
                 C265 +
             (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 -
              C31250 * C1780 + C31258 * C1773 - C31251 * C1781) *
                 C92188) *
                C31252 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C265 +
             (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92188) *
                C92226) *
               C2665) *
              C1969 +
          ((((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
             (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
                C31252 +
            ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
             (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
                C92226) *
               C2664 +
           (((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C265 +
             (C36007 - C36006 + C36009 - C36008 + C36011 - C36010) * C92188) *
                C31252 +
            ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 -
              C31256 * C5701 + C31251 * C7489 - C31258 * C7488) *
                 C265 +
             (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 -
              C31256 * C6218 + C31251 * C8134 - C31258 * C8133) *
                 C92188) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C2664 +
           (((C36262 * C1378 - C92097 * C1389) * C265 +
             (C36262 * C1771 - C92097 * C1779) * C92188) *
                C36258 +
            ((C39227 - C39228) * C265 + (C39443 - C39444) * C92188) * C36259 +
            ((C39231 - C39232) * C265 + (C39445 - C39446) * C92188) * C36260 +
            ((C39235 - C39236) * C265 + (C39447 - C39448) * C92188) * C36261) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
            ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
            ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
            ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
               C2664 +
           (((C39228 - C39227) * C265 + (C39444 - C39443) * C92188) * C36258 +
            ((C39232 - C39231) * C265 + (C39446 - C39445) * C92188) * C36259 +
            ((C39236 - C39235) * C265 + (C39448 - C39447) * C92188) * C36260 +
            ((C92097 * C38991 - C36262 * C38990) * C265 +
             (C92097 * C39441 - C36262 * C39440) * C92188) *
                C36261) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C2664 +
           (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C31249 +
            ((C34545 - C34546 + C34547 - C34548) * C265 +
             (C35177 - C35178 + C35179 - C35180) * C92188) *
                C31250 +
            ((C34553 - C34554 + C34555 - C34556) * C265 +
             (C35181 - C35182 + C35183 - C35184) * C92188) *
                C31251) *
               C2665) *
              C1969 +
          ((((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                 C265 +
             (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
              C92226 * C1260) *
                 C92188) *
                C31249 +
            ((C33589 - C33590 + C33591 - C33592) * C265 +
             (C34239 - C34240 + C34241 - C34242) * C92188) *
                C31250 +
            ((C33597 - C33598 + C33599 - C33600) * C265 +
             (C34243 - C34244 + C34245 - C34246) * C92188) *
                C31251) *
               C2664 +
           (((C31252 * C3439 - C31334 * C3357 + C92226 * C5799 -
              C31335 * C5702) *
                 C265 +
             (C31252 * C3875 - C31334 * C3801 + C92226 * C6303 -
              C31335 * C6217) *
                 C92188) *
                C31249 +
            ((C31252 * C3440 - C31334 * C3358 + C92226 * C5800 -
              C31335 * C5701) *
                 C265 +
             (C31252 * C3876 - C31334 * C3802 + C92226 * C6304 -
              C31335 * C6218) *
                 C92188) *
                C31250 +
            ((C31252 * C3441 - C31334 * C3359 + C92226 * C7590 -
              C31335 * C7488) *
                 C265 +
             (C31252 * C3877 - C31334 * C3803 + C92226 * C8233 -
              C31335 * C8133) *
                 C92188) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C265 +
            (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
             C36316 * C6217 - C36260 * C6303 + C36317 * C9122 -
             C36261 * C9232) *
                C92188) *
               C92097 * C2665) *
              C1969 +
          (((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
             C36316 * C4815 - C36260 * C4948 + C36317 * C4816 -
             C36261 * C4950) *
                C265 +
            (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
             C36316 * C5417 - C36260 * C5517 + C36317 * C5419 -
             C36261 * C5519) *
                C92188) *
               C92097 * C2664 +
           ((C36258 * C3439 - C36314 * C3357 + C36259 * C5799 - C36315 * C5702 +
             C36260 * C8588 - C36316 * C8454 + C36261 * C39084 -
             C36317 * C38990) *
                C265 +
            (C36258 * C3875 - C36314 * C3801 + C36259 * C6303 - C36315 * C6217 +
             C36260 * C9232 - C36316 * C9122 + C36261 * C39514 -
             C36317 * C39440) *
                C92188) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C2664 -
           ((C35283 + C35284) * C31251 + (C35285 + C35286) * C31250 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C31252) *
                C31249) *
               C2665) *
              C1969 +
          (((C9348 * C31252 + C9347 * C92226) * C31249 +
            (C8354 * C31252 + C8353 * C92226) * C31250 +
            (C18750 * C31252 +
             (C265 * C7702 - C701 * C7488 - C265 * C8133 + C92188 * C8338) *
                 C92226) *
                C31251) *
               C2665 -
           ((C34345 + C34346) * C31251 + (C34347 + C34348) * C31250 +
            (C5625 * C92226 + C5624 * C31252) * C31249) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C2664 -
           (C39589 * C36261 + C9347 * C36260 + C9348 * C36259 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C36258) *
               C92097 * C2665) *
              C1969 +
          ((C9348 * C36258 + C9347 * C36259 + C39589 * C36260 +
            (C265 * C39152 - C701 * C38990 - C265 * C39440 + C92188 * C39581) *
                C36261) *
               C92097 * C2665 -
           (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 +
            C5624 * C36258) *
               C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C32072 + C32073 + C32074) * C92188 * C92226) *
              C92150 * C790 -
          ((C32075 + C32076 + C32077) * C92188 * C92226 +
           (C32074 + C32073 + C32072) * C92188 * C31252) *
              C92150 * C791 +
          ((C32077 + C32076 + C32075) * C92188 * C31252 +
           (C31254 * C4820 - C31255 * C4815 - C31254 * C4821 + C31249 * C4827 +
            C31256 * C4818 - C31257 * C4814 - C31256 * C4819 + C31250 * C4826 +
            C31258 * C6488 - C31259 * C6487 - C31258 * C6489 + C31251 * C6490) *
               C92188 * C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C31254 * C808 - C31255 * C797 - C31254 * C809 + C31249 * C821 +
            C31256 * C806 - C31257 * C796 - C31256 * C807 + C31250 * C820 +
            C31258 * C804 - C31259 * C795 - C31258 * C805 + C31251 * C819) *
               C92188 * C92226) *
              C92150 * C92136 * C97 -
          ((C31258 * C802 - C31259 * C794 - C31258 * C803 + C31251 * C818 +
            C31256 * C804 - C31257 * C795 - C31256 * C805 + C31250 * C819 +
            C31254 * C806 - C31255 * C796 - C31254 * C807 + C31249 * C820) *
               C92188 * C92226 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C92188 * C31252) *
              C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C92188 * C31252 +
           (C31254 * C804 - C31255 * C795 - C31254 * C805 + C31249 * C819 +
            C31256 * C802 - C31257 * C794 - C31256 * C803 + C31250 * C818 +
            C31258 * C1974 - C31259 * C1973 - C31258 * C1975 + C31251 * C1976) *
               C92188 * C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C32072 + C32073 + C32074) * C92188 * C92226) *
              C1372 -
          ((C31258 * C3365 - C31259 * C3359 - C31258 * C3366 + C31251 * C3371 +
            C31256 * C3363 - C31257 * C3358 - C31256 * C3364 + C31250 * C3370 +
            C31254 * C3361 - C31255 * C3357 - C31254 * C3362 + C31249 * C3369) *
               C92188 * C92226 +
           (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402) *
               C92188 * C31252) *
              C1373 +
          ((C31254 * C1391 - C31255 * C1379 - C31254 * C1392 + C31249 * C1403 +
            C31256 * C1393 - C31257 * C1380 - C31256 * C1394 + C31250 * C1404 +
            C31258 * C1395 - C31259 * C1381 - C31258 * C1396 + C31251 * C1405) *
               C92188 * C31252 +
           (C31254 * C5711 - C31255 * C5703 - C31254 * C5712 + C31249 * C5721 +
            C31256 * C5713 - C31257 * C5704 - C31256 * C5714 + C31250 * C5722 +
            C31258 * C11785 - C31259 * C11784 - C31258 * C11786 +
            C31251 * C11787) *
               C92188 * C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           (C36262 * C808 - C36263 * C797 - C36262 * C809 + C92097 * C821) *
               C92188 * C36259 +
           (C36262 * C810 - C36263 * C798 - C36262 * C811 + C92097 * C822) *
               C92188 * C36260 +
           (C36262 * C4820 - C36263 * C4815 - C36262 * C4821 + C92097 * C4827) *
               C92188 * C36261) *
              C92150 * C92136 * C97 -
          ((C36262 * C4818 - C36263 * C4814 - C36262 * C4819 + C92097 * C4826) *
               C92188 * C36261 +
           (C36262 * C812 - C36263 * C799 - C36262 * C813 + C92097 * C823) *
               C92188 * C36260 +
           (C36262 * C806 - C36263 * C796 - C36262 * C807 + C92097 * C820) *
               C92188 * C36259 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C92188 * C36258) *
              C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C92188 * C36258 +
           (C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
               C92188 * C36259 +
           (C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
               C92188 * C36260 +
           (C36262 * C6488 - C36263 * C6487 - C36262 * C6489 + C92097 * C6490) *
               C92188 * C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C92150 * C790 -
          (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
           C36755 * C36258) *
              C92150 * C791 +
          (C36756 * C36258 + C36757 * C36259 + C36758 * C36260 +
           (C36262 * C36723 - C36263 * C36722 - C36262 * C36724 +
            C92097 * C36725) *
               C92188 * C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C1372 -
          ((C36262 * C8456 - C36263 * C8454 - C36262 * C8457 + C92097 * C8460) *
               C92188 * C36261 +
           (C36262 * C5709 - C36263 * C5702 - C36262 * C5710 + C92097 * C5720) *
               C92188 * C36260 +
           (C36262 * C3361 - C36263 * C3357 - C36262 * C3362 + C92097 * C3369) *
               C92188 * C36259 +
           (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 + C92097 * C1402) *
               C92188 * C36258) *
              C1373 +
          ((C36262 * C1391 - C36263 * C1379 - C36262 * C1392 + C92097 * C1403) *
               C92188 * C36258 +
           (C36262 * C5711 - C36263 * C5703 - C36262 * C5712 + C92097 * C5721) *
               C92188 * C36259 +
           (C36262 * C5715 - C36263 * C5705 - C36262 * C5716 + C92097 * C5723) *
               C92188 * C36260 +
           (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
            C92097 * C37281) *
               C92188 * C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C790 +
          ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
               C31254 +
           (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
               C31249 +
           (C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
               C31256 +
           (C31334 * C807 - C31252 * C885 + C31335 * C813 - C92226 * C889) *
               C31250 +
           (C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
               C31258 +
           (C31334 * C805 - C31252 * C886 + C31335 * C815 - C92226 * C890) *
               C31251) *
              C92188 * C92150 * C791 +
          ((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
               C31254 +
           (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
               C31249 +
           (C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
               C31256 +
           (C31252 * C889 - C31334 * C813 + C92226 * C4953 - C31335 * C4819) *
               C31250 +
           (C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
               C31258 +
           (C31252 * C890 - C31334 * C815 + C92226 * C6618 - C31335 * C6489) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C92136 * C97 +
          ((C31338 - C31337 + C31340 - C31339) * C31254 +
           (C31342 - C31341 + C31344 - C31343) * C31249 +
           (C31346 - C31345 + C31348 - C31347) * C31256 +
           (C31350 - C31349 + C31352 - C31351) * C31250 +
           (C31353 - C31354 + C31355 - C31356) * C31258 +
           (C31357 - C31358 + C31359 - C31360) * C31251) *
              C92188 * C92150 * C92136 * C98 +
          (C31365 * C31254 + C31366 * C31249 +
           (C31354 - C31353 + C31356 - C31355) * C31256 +
           (C31358 - C31357 + C31360 - C31359) * C31250 +
           (C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
               C31258 +
           (C31252 * C193 - C31334 * C123 + C92226 * C2044 - C31335 * C1975) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C1372 +
          ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 - C92226 * C3439) *
               C31254 +
           (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 - C92226 * C3443) *
               C31249 +
           (C31334 * C1377 - C31252 * C1458 + C31335 * C3358 - C92226 * C3440) *
               C31256 +
           (C31334 * C1388 - C31252 * C1466 + C31335 * C3364 - C92226 * C3444) *
               C31250 +
           (C31334 * C1376 - C31252 * C1459 + C31335 * C3359 - C92226 * C3441) *
               C31258 +
           (C31334 * C1386 - C31252 * C1467 + C31335 * C3366 - C92226 * C3445) *
               C31251) *
              C92188 * C1373 +
          ((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 - C31335 * C5703) *
               C31254 +
           (C31252 * C1469 - C31334 * C1392 + C92226 * C5807 - C31335 * C5712) *
               C31249 +
           (C31252 * C1462 - C31334 * C1380 + C92226 * C5803 - C31335 * C5704) *
               C31256 +
           (C31252 * C1470 - C31334 * C1394 + C92226 * C5809 - C31335 * C5714) *
               C31250 +
           (C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
            C31335 * C11784) *
               C31258 +
           (C31252 * C1471 - C31334 * C1396 + C92226 * C11887 -
            C31335 * C11786) *
               C31251) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C36262 +
           (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
            C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
               C92097) *
              C92188 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C36262 +
           (C36258 * C191 - C36314 * C119 + C36259 * C886 - C36315 * C805 +
            C36260 * C890 - C36316 * C815 + C36261 * C6618 - C36317 * C6489) *
               C92097) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C36262 +
           (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
            C36316 * C4821 - C36260 * C4952 + C36317 * C4823 - C36261 * C4954) *
               C92097) *
              C92188 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C36262 +
           (C36258 * C888 - C36314 * C811 + C36259 * C4952 - C36315 * C4821 +
            C36260 * C4954 - C36316 * C4823 + C36261 * C36809 -
            C36317 * C36724) *
               C92097) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C1372 +
          ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
            C36316 * C5702 - C36260 * C5799 + C36317 * C8454 - C36261 * C8588) *
               C36262 +
           (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
            C36316 * C5710 - C36260 * C5805 + C36317 * C8457 - C36261 * C8590) *
               C92097) *
              C92188 * C1373 +
          ((C36258 * C1461 - C36314 * C1379 + C36259 * C5801 - C36315 * C5703 +
            C36260 * C5802 - C36316 * C5705 + C36261 * C37332 -
            C36317 * C37278) *
               C36262 +
           (C36258 * C1469 - C36314 * C1392 + C36259 * C5807 - C36315 * C5712 +
            C36260 * C5808 - C36316 * C5716 + C36261 * C37333 -
            C36317 * C37280) *
               C92097) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C790 +
          (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
            C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
            C17153 * C31251) *
               C31252 +
           ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
            C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
            (C4214 - C4215) * C31251) *
               C92226) *
              C92150 * C791 +
          ((C5057 * C31254 + C5058 * C31249 + C5047 * C31256 + C5048 * C31250 +
            (C4213 - C4212) * C31258 + (C4215 - C4214) * C31251) *
               C31252 +
           ((C5050 - C5049) * C31254 + (C5052 - C5051) * C31249 +
            (C5054 - C5053) * C31256 + (C5056 - C5055) * C31250 +
            (C92188 * C6729 - C265 * C6487) * C31258 +
            (C92188 * C6730 - C265 * C6489) * C31251) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31254 + (C282 - C281) * C31249 +
            (C284 - C283) * C31256 + (C286 - C285) * C31250 +
            (C288 - C287) * C31258 + (C290 - C289) * C31251) *
               C31252 +
           (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
            C17153 * C31250 + (C2134 - C2135) * C31258 +
            (C2136 - C2137) * C31251) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C295 * C31254 + C296 * C31249 + C297 * C31256 + C298 * C31250 +
            (C292 - C291) * C31258 + (C294 - C293) * C31251) *
               C31252 +
           (C14887 * C31254 + C14888 * C31249 + (C2135 - C2134) * C31256 +
            (C2137 - C2136) * C31250 +
            (C92188 * C2123 - C265 * C1973) * C31258 +
            (C92188 * C2124 - C265 * C1975) * C31251) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C31254 +
            (C265 * C1390 - C92188 * C1531) * C31249 +
            (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
            (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
               C31252 +
           ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
            (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
            (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
               C92226) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C31254 +
            (C92188 * C1535 - C265 * C1392) * C31249 +
            (C92188 * C1528 - C265 * C1380) * C31256 +
            (C92188 * C1536 - C265 * C1394) * C31250 +
            (C92188 * C1529 - C265 * C1381) * C31258 +
            (C92188 * C1537 - C265 * C1396) * C31251) *
               C31252 +
           ((C92188 * C5887 - C265 * C5703) * C31254 +
            (C92188 * C5893 - C265 * C5712) * C31249 +
            (C92188 * C5888 - C265 * C5704) * C31256 +
            (C92188 * C5894 - C265 * C5714) * C31250 +
            (C92188 * C11994 - C265 * C11784) * C31258 +
            (C92188 * C11995 - C265 * C11786) * C31251) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           (C5057 * C36262 + C5058 * C92097) * C36260 +
           ((C5050 - C5049) * C36262 + (C5052 - C5051) * C92097) * C36261) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
           (C6734 * C36262 + C6735 * C92097) * C36259 +
           (C6736 * C36262 + C6737 * C92097) * C36260 +
           ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
              C92150 * C92136 * C98 +
          ((C295 * C36262 + C296 * C92097) * C36258 +
           (C14887 * C36262 + C14888 * C92097) * C36259 +
           ((C4213 - C4212) * C36262 + (C4215 - C4214) * C92097) * C36260 +
           ((C92188 * C6729 - C265 * C6487) * C36262 +
            (C92188 * C6730 - C265 * C6489) * C92097) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C92150 * C790 +
          (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
           ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
           ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
           ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) * C36261) *
              C92150 * C791 +
          (C36871 * C36258 + C36874 * C36259 +
           ((C36868 - C36867) * C36262 + (C36870 - C36869) * C92097) * C36260 +
           ((C92188 * C36860 - C265 * C36722) * C36262 +
            (C92188 * C36861 - C265 * C36724) * C92097) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C36262 +
            (C265 * C1390 - C92188 * C1531) * C92097) *
               C36258 +
           ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
           ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
           ((C265 * C8454 - C92188 * C8690) * C36262 +
            (C265 * C8457 - C92188 * C8692) * C92097) *
               C36261) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C36262 +
            (C92188 * C1535 - C265 * C1392) * C92097) *
               C36258 +
           ((C92188 * C5887 - C265 * C5703) * C36262 +
            (C92188 * C5893 - C265 * C5712) * C92097) *
               C36259 +
           ((C92188 * C5889 - C265 * C5705) * C36262 +
            (C92188 * C5895 - C265 * C5716) * C92097) *
               C36260 +
           ((C92188 * C37384 - C265 * C37278) * C36262 +
            (C92188 * C37385 - C265 * C37280) * C92097) *
               C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
           (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
              C92188 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
           (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
           (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
           (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
              C92188 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C31334 +
           (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C31252 +
           (C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
            C31251 * C6488 - C31258 * C6487) *
               C31335 +
           (C31249 * C5143 - C31254 * C5139 + C31250 * C5144 - C31256 * C5140 +
            C31251 * C6836 - C31258 * C6835) *
               C92226) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
            C31251 * C804 - C31258 * C795) *
               C31335 +
           (C31249 * C1016 - C31254 * C1008 + C31250 * C1017 - C31256 * C1009 +
            C31251 * C1018 - C31258 * C1010) *
               C92226) *
              C92188 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C31334 +
           (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
            C31258 * C351 - C31251 * C357) *
               C31252 +
           (C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
            C31258 * C794 - C31251 * C802) *
               C31335 +
           (C31254 * C1009 - C31249 * C1017 + C31256 * C1010 - C31250 * C1018 +
            C31258 * C1011 - C31251 * C1019) *
               C92226) *
              C92188 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C31334 +
           (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
            C31251 * C358 - C31258 * C352) *
               C31252 +
           (C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
            C31251 * C1974 - C31258 * C1973) *
               C31335 +
           (C31249 * C1018 - C31254 * C1010 + C31250 * C1019 - C31256 * C1011 +
            C31251 * C2204 - C31258 * C2203) *
               C92226) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
           (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
              C92188 * C1372 +
          ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
            C31258 * C1376 - C31251 * C1385) *
               C31334 +
           (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
            C31258 * C1591 - C31251 * C1599) *
               C31252 +
           (C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
            C31258 * C3359 - C31251 * C3365) *
               C31335 +
           (C31254 * C3587 - C31249 * C3591 + C31256 * C3588 - C31250 * C3592 +
            C31258 * C3589 - C31251 * C3593) *
               C92226) *
              C92188 * C1373 +
          ((C31249 * C1391 - C31254 * C1379 + C31250 * C1393 - C31256 * C1380 +
            C31251 * C1395 - C31258 * C1381) *
               C31334 +
           (C31249 * C1601 - C31254 * C1593 + C31250 * C1602 - C31256 * C1594 +
            C31251 * C1603 - C31258 * C1595) *
               C31252 +
           (C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
            C31251 * C11785 - C31258 * C11784) *
               C31335 +
           (C31249 * C5979 - C31254 * C5973 + C31250 * C5980 - C31256 * C5974 +
            C31251 * C12107 - C31258 * C12106) *
               C92226) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C92097 * C808 - C36262 * C797) * C36315 +
           (C92097 * C1016 - C36262 * C1008) * C36259 +
           (C92097 * C810 - C36262 * C798) * C36316 +
           (C92097 * C1020 - C36262 * C1012) * C36260 +
           (C92097 * C4820 - C36262 * C4815) * C36317 +
           (C92097 * C5143 - C36262 * C5139) * C36261) *
              C92188 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C36314 +
           (C36262 * C349 - C92097 * C355) * C36258 +
           (C36262 * C796 - C92097 * C806) * C36315 +
           (C36262 * C1009 - C92097 * C1017) * C36259 +
           (C36262 * C799 - C92097 * C812) * C36316 +
           (C36262 * C1013 - C92097 * C1021) * C36260 +
           (C36262 * C4814 - C92097 * C4818) * C36317 +
           (C36262 * C5140 - C92097 * C5144) * C36261) *
              C92188 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C36314 +
           (C92097 * C356 - C36262 * C350) * C36258 +
           (C92097 * C804 - C36262 * C795) * C36315 +
           (C92097 * C1018 - C36262 * C1010) * C36259 +
           (C92097 * C814 - C36262 * C800) * C36316 +
           (C92097 * C1022 - C36262 * C1014) * C36260 +
           (C92097 * C6488 - C36262 * C6487) * C36317 +
           (C92097 * C6836 - C36262 * C6835) * C36261) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C92150 * C790 +
          ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
           (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
           (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
           (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
              C92188 * C92150 * C791 +
          (C36943 * C36314 + C36944 * C36258 + C36945 * C36315 +
           C36946 * C36259 + (C36940 - C36939) * C36316 +
           (C36942 - C36941) * C36260 +
           (C92097 * C36723 - C36262 * C36722) * C36317 +
           (C92097 * C36925 - C36262 * C36924) * C36261) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C1372 +
          ((C36262 * C1378 - C92097 * C1389) * C36314 +
           (C36262 * C1589 - C92097 * C1597) * C36258 +
           (C36262 * C3357 - C92097 * C3361) * C36315 +
           (C36262 * C3587 - C92097 * C3591) * C36259 +
           (C36262 * C5702 - C92097 * C5709) * C36316 +
           (C36262 * C5971 - C92097 * C5977) * C36260 +
           (C36262 * C8454 - C92097 * C8456) * C36317 +
           (C36262 * C8800 - C92097 * C8802) * C36261) *
              C92188 * C1373 +
          ((C92097 * C1391 - C36262 * C1379) * C36314 +
           (C92097 * C1601 - C36262 * C1593) * C36258 +
           (C92097 * C5711 - C36262 * C5703) * C36315 +
           (C92097 * C5979 - C36262 * C5973) * C36259 +
           (C92097 * C5715 - C36262 * C5705) * C36316 +
           (C92097 * C5981 - C36262 * C5975) * C36260 +
           (C92097 * C37279 - C36262 * C37278) * C36317 +
           (C92097 * C37437 - C36262 * C37436) * C36261) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C790 -
          ((C31335 * C882 - C31589 * C800 - C31335 * C1014 + C92226 * C1080 +
            C31334 * C878 - C31588 * C795 - C31334 * C1010 + C31252 * C1075) *
               C31251 +
           (C31335 * C881 - C31589 * C799 - C31335 * C1013 + C92226 * C1079 +
            C31334 * C877 - C31588 * C796 - C31334 * C1009 + C31252 * C1076) *
               C31250 +
           (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
            C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
               C31249) *
              C92188 * C92150 * C791 +
          ((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
            C31335 * C4948 - C31589 * C4815 - C31335 * C5139 + C92226 * C5252) *
               C31249 +
           (C31334 * C881 - C31588 * C799 - C31334 * C1013 + C31252 * C1079 +
            C31335 * C4949 - C31589 * C4814 - C31335 * C5140 + C92226 * C5251) *
               C31250 +
           (C31334 * C882 - C31588 * C800 - C31334 * C1014 + C31252 * C1080 +
            C31335 * C6617 - C31589 * C6487 - C31335 * C6835 + C92226 * C6951) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C92136 * C97 -
          ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
           (C31628 + C31627) * C31249) *
              C92188 * C92150 * C92136 * C98 +
          (C31633 * C31249 + (C31632 + C31631) * C31250 +
           (C31334 * C187 - C31588 * C112 - C31334 * C352 + C31252 * C415 +
            C31335 * C2043 - C31589 * C1973 - C31335 * C2203 + C92226 * C2271) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C1372 -
          ((C31335 * C3441 - C31589 * C3359 - C31335 * C3589 + C92226 * C3663 +
            C31334 * C1459 - C31588 * C1376 - C31334 * C1591 + C31252 * C1656) *
               C31251 +
           (C31335 * C3440 - C31589 * C3358 - C31335 * C3588 + C92226 * C3662 +
            C31334 * C1458 - C31588 * C1377 - C31334 * C1590 + C31252 * C1657) *
               C31250 +
           (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
            C31334 * C1457 - C31588 * C1378 - C31334 * C1589 + C31252 * C1658) *
               C31249) *
              C92188 * C1373 +
          ((C31334 * C1461 - C31588 * C1379 - C31334 * C1593 + C31252 * C1659 +
            C31335 * C5801 - C31589 * C5703 - C31335 * C5973 + C92226 * C6059) *
               C31249 +
           (C31334 * C1462 - C31588 * C1380 - C31334 * C1594 + C31252 * C1660 +
            C31335 * C5803 - C31589 * C5704 - C31335 * C5974 + C92226 * C6061) *
               C31250 +
           (C31334 * C1463 - C31588 * C1381 - C31334 * C1595 + C31252 * C1661 +
            C31335 * C11886 - C31589 * C11784 - C31335 * C12106 +
            C92226 * C12206) *
               C31251) *
              C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C92136 * C97 -
          (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
           C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
           C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
           C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
              C92097 * C92188 * C92150 * C92136 * C98 +
          (C36314 * C185 - C36468 * C110 - C36314 * C350 + C36258 * C413 +
           C36315 * C878 - C36469 * C795 - C36315 * C1010 + C36259 * C1075 +
           C36316 * C882 - C36470 * C800 - C36316 * C1014 + C36260 * C1080 +
           C36317 * C6617 - C36471 * C6487 - C36317 * C6835 + C36261 * C6951) *
              C92097 * C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C790 -
          (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
           C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
           C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
           C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
              C92097 * C92188 * C92150 * C791 +
          (C36314 * C880 - C36468 * C798 - C36314 * C1012 + C36258 * C1078 +
           C36315 * C4948 - C36469 * C4815 - C36315 * C5139 + C36259 * C5252 +
           C36316 * C4950 - C36470 * C4816 - C36316 * C5141 + C36260 * C5253 +
           C36317 * C36808 - C36471 * C36722 - C36317 * C36924 +
           C36261 * C36996) *
              C92097 * C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C1372 -
          (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
           C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
           C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
           C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
              C92097 * C92188 * C1373 +
          (C36314 * C1461 - C36468 * C1379 - C36314 * C1593 + C36258 * C1659 +
           C36315 * C5801 - C36469 * C5703 - C36315 * C5973 + C36259 * C6059 +
           C36316 * C5802 - C36470 * C5705 - C36316 * C5975 + C36260 * C6060 +
           C36317 * C37332 - C36471 * C37278 - C36317 * C37436 +
           C36261 * C37488) *
              C92097 * C92188 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C790 +
          (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
            (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
               C31249 +
           (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 + C7075 * C92226) *
               C31250 +
           (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
            (C4485 - C4486) * C92226) *
               C31251) *
              C92150 * C791 +
          ((C5057 * C31334 + C5343 * C31252 + (C5050 - C5049) * C31335 +
            (C5340 - C5339) * C92226) *
               C31249 +
           (C5047 * C31334 + C5338 * C31252 + (C5054 - C5053) * C31335 +
            (C5342 - C5341) * C92226) *
               C31250 +
           ((C4213 - C4212) * C31334 + (C4486 - C4485) * C31252 +
            (C92188 * C6729 - C265 * C6487) * C31335 +
            (C92188 * C7071 - C265 * C6835) * C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
            C7074 * C92226) *
               C31249 +
           ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
            C17488 * C92226) *
               C31250 +
           ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
            (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31714 * C31249 +
           (C297 * C31334 + C513 * C31252 + (C2135 - C2134) * C31335 +
            (C2366 - C2365) * C92226) *
               C31250 +
           ((C292 - C291) * C31334 + (C511 - C510) * C31252 +
            (C92188 * C2123 - C265 * C1973) * C31335 +
            (C92188 * C2359 - C265 * C2203) * C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C1372 +
          (((C265 * C1378 - C92188 * C1523) * C31334 +
            (C265 * C1589 - C92188 * C1713) * C31252 +
            (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
               C31249 +
           ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
            (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
               C31250 +
           ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
            (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
               C31251) *
              C1373 +
          (((C92188 * C1527 - C265 * C1379) * C31334 +
            (C92188 * C1717 - C265 * C1593) * C31252 +
            (C92188 * C5887 - C265 * C5703) * C31335 +
            (C92188 * C6139 - C265 * C5973) * C92226) *
               C31249 +
           ((C92188 * C1528 - C265 * C1380) * C31334 +
            (C92188 * C1718 - C265 * C1594) * C31252 +
            (C92188 * C5888 - C265 * C5704) * C31335 +
            (C92188 * C6141 - C265 * C5974) * C92226) *
               C31250 +
           ((C92188 * C1529 - C265 * C1381) * C31334 +
            (C92188 * C1719 - C265 * C1595) * C31252 +
            (C92188 * C11994 - C265 * C11784) * C31335 +
            (C92188 * C12319 - C265 * C12106) * C92226) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           (C5050 - C5049) * C36317 + (C5340 - C5339) * C36261) *
              C92097 * C92150 * C92136 * C97 +
          ((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
           C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
           (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
              C92097 * C92150 * C92136 * C98 +
          (C295 * C36314 + C512 * C36258 + C14887 * C36315 + C15159 * C36259 +
           (C4213 - C4212) * C36316 + (C4486 - C4485) * C36260 +
           (C92188 * C6729 - C265 * C6487) * C36317 +
           (C92188 * C7071 - C265 * C6835) * C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C92150 * C790 +
          ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
           (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
           (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
           (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
              C92097 * C92150 * C791 +
          (C5057 * C36314 + C5343 * C36258 + C36865 * C36315 + C37049 * C36259 +
           (C36868 - C36867) * C36316 + (C37051 - C37050) * C36260 +
           (C92188 * C36860 - C265 * C36722) * C36317 +
           (C92188 * C37047 - C265 * C36924) * C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C1372 +
          ((C265 * C1378 - C92188 * C1523) * C36314 +
           (C265 * C1589 - C92188 * C1713) * C36258 + (C8695 - C8696) * C36315 +
           (C9021 - C9022) * C36259 + (C8699 - C8700) * C36316 +
           (C9023 - C9024) * C36260 + (C265 * C8454 - C92188 * C8690) * C36317 +
           (C265 * C8800 - C92188 * C9018) * C36261) *
              C92097 * C1373 +
          ((C92188 * C1527 - C265 * C1379) * C36314 +
           (C92188 * C1717 - C265 * C1593) * C36258 +
           (C92188 * C5887 - C265 * C5703) * C36315 +
           (C92188 * C6139 - C265 * C5973) * C36259 +
           (C92188 * C5889 - C265 * C5705) * C36316 +
           (C92188 * C6140 - C265 * C5975) * C36260 +
           (C92188 * C37384 - C265 * C37278) * C36317 +
           (C92188 * C37539 - C265 * C37436) * C36261) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
            (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
               C92226) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
               C31252 +
           ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
            (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
               C92226) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C265 +
            (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C92188) *
               C31252 +
           ((C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
             C31251 * C6488 - C31258 * C6487) *
                C265 +
            (C31249 * C5421 - C31254 * C5417 + C31250 * C5422 - C31256 * C5418 +
             C31251 * C7174 - C31258 * C7173) *
                C92188) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
             C31251 * C804 - C31258 * C795) *
                C265 +
            (C31249 * C1198 - C31254 * C1190 + C31250 * C1199 - C31256 * C1191 +
             C31251 * C1200 - C31258 * C1192) *
                C92188) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C265 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C92188) *
               C31252 +
           ((C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
             C31258 * C794 - C31251 * C802) *
                C265 +
            (C31254 * C1191 - C31249 * C1199 + C31256 * C1192 - C31250 * C1200 +
             C31258 * C1193 - C31251 * C1201) *
                C92188) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C265 +
            (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
             C31251 * C577 - C31258 * C571) *
                C92188) *
               C31252 +
           ((C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
             C31251 * C1974 - C31258 * C1973) *
                C265 +
            (C31249 * C1200 - C31254 * C1192 + C31250 * C1201 - C31256 * C1193 +
             C31251 * C2433 - C31258 * C2432) *
                C92188) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
            (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
               C92226) *
              C1372 +
          (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C265 +
            (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 - C31250 * C1780 +
             C31258 * C1773 - C31251 * C1781) *
                C92188) *
               C31252 +
           ((C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
             C31258 * C3359 - C31251 * C3365) *
                C265 +
            (C31254 * C3801 - C31249 * C3805 + C31256 * C3802 - C31250 * C3806 +
             C31258 * C3803 - C31251 * C3807) *
                C92188) *
               C92226) *
              C1373 +
          (((C31249 * C1391 - C31254 * C1379 + C31250 * C1393 - C31256 * C1380 +
             C31251 * C1395 - C31258 * C1381) *
                C265 +
            (C31249 * C1783 - C31254 * C1775 + C31250 * C1784 - C31256 * C1776 +
             C31251 * C1785 - C31258 * C1777) *
                C92188) *
               C31252 +
           ((C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
             C31251 * C11785 - C31258 * C11784) *
                C265 +
            (C31249 * C6225 - C31254 * C6219 + C31250 * C6226 - C31256 * C6220 +
             C31251 * C12425 - C31258 * C12424) *
                C92188) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C92097 * C808 - C36262 * C797) * C265 +
            (C92097 * C1198 - C36262 * C1190) * C92188) *
               C36259 +
           ((C92097 * C810 - C36262 * C798) * C265 +
            (C92097 * C1202 - C36262 * C1194) * C92188) *
               C36260 +
           ((C92097 * C4820 - C36262 * C4815) * C265 +
            (C92097 * C5421 - C36262 * C5417) * C92188) *
               C36261) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C265 +
            (C36262 * C568 - C92097 * C574) * C92188) *
               C36258 +
           ((C36262 * C796 - C92097 * C806) * C265 +
            (C36262 * C1191 - C92097 * C1199) * C92188) *
               C36259 +
           ((C36262 * C799 - C92097 * C812) * C265 +
            (C36262 * C1195 - C92097 * C1203) * C92188) *
               C36260 +
           ((C36262 * C4814 - C92097 * C4818) * C265 +
            (C36262 * C5418 - C92097 * C5422) * C92188) *
               C36261) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C265 +
            (C92097 * C575 - C36262 * C569) * C92188) *
               C36258 +
           ((C92097 * C804 - C36262 * C795) * C265 +
            (C92097 * C1200 - C36262 * C1192) * C92188) *
               C36259 +
           ((C92097 * C814 - C36262 * C800) * C265 +
            (C92097 * C1204 - C36262 * C1196) * C92188) *
               C36260 +
           ((C92097 * C6488 - C36262 * C6487) * C265 +
            (C92097 * C7174 - C36262 * C7173) * C92188) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C92150 * C790 +
          (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
           ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
           ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
           ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
              C92150 * C791 +
          (C37118 * C36258 + C37119 * C36259 +
           ((C36940 - C36939) * C265 + (C37113 - C37112) * C92188) * C36260 +
           ((C92097 * C36723 - C36262 * C36722) * C265 +
            (C92097 * C37102 - C36262 * C37101) * C92188) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C1372 +
          (((C36262 * C1378 - C92097 * C1389) * C265 +
            (C36262 * C1771 - C92097 * C1779) * C92188) *
               C36258 +
           ((C36262 * C3357 - C92097 * C3361) * C265 +
            (C36262 * C3801 - C92097 * C3805) * C92188) *
               C36259 +
           ((C36262 * C5702 - C92097 * C5709) * C265 +
            (C36262 * C6217 - C92097 * C6223) * C92188) *
               C36260 +
           ((C36262 * C8454 - C92097 * C8456) * C265 +
            (C36262 * C9122 - C92097 * C9124) * C92188) *
               C36261) *
              C1373 +
          (((C92097 * C1391 - C36262 * C1379) * C265 +
            (C92097 * C1783 - C36262 * C1775) * C92188) *
               C36258 +
           ((C92097 * C5711 - C36262 * C5703) * C265 +
            (C92097 * C6225 - C36262 * C6219) * C92188) *
               C36259 +
           ((C92097 * C5715 - C36262 * C5705) * C265 +
            (C92097 * C6227 - C36262 * C6221) * C92188) *
               C36260 +
           ((C92097 * C37279 - C36262 * C37278) * C265 +
            (C92097 * C37591 - C36262 * C37590) * C92188) *
               C36261) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C265 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C92188) *
               C31249 +
           ((C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
                C265 +
            (C31334 * C1191 - C31252 * C1257 + C31335 * C1195 -
             C92226 * C1261) *
                C92188) *
               C31250 +
           ((C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
                C265 +
            (C31334 * C1192 - C31252 * C1258 + C31335 * C1196 -
             C92226 * C1262) *
                C92188) *
               C31251) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C265 +
            (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
             C31335 * C5417) *
                C92188) *
               C31249 +
           ((C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C265 +
            (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
             C31335 * C5418) *
                C92188) *
               C31250 +
           ((C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
                C265 +
            (C31252 * C1262 - C31334 * C1196 + C92226 * C7281 -
             C31335 * C7173) *
                C92188) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C265 +
            (C31864 - C31863 + C31866 - C31865) * C92188) *
               C31249 +
           ((C31346 - C31345 + C31348 - C31347) * C265 +
            (C31869 - C31868 + C31871 - C31870) * C92188) *
               C31250 +
           ((C31353 - C31354 + C31355 - C31356) * C265 +
            (C31872 - C31873 + C31874 - C31875) * C92188) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31880 * C31249 +
           ((C31354 - C31353 + C31356 - C31355) * C265 +
            (C31873 - C31872 + C31875 - C31874) * C92188) *
               C31250 +
           ((C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
                C265 +
            (C31252 * C633 - C31334 * C571 + C92226 * C2500 - C31335 * C2432) *
                C92188) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C1372 +
          (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C265 +
            (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
             C92226 * C3875) *
                C92188) *
               C31249 +
           ((C31334 * C1377 - C31252 * C1458 + C31335 * C3358 -
             C92226 * C3440) *
                C265 +
            (C31334 * C1772 - C31252 * C1838 + C31335 * C3802 -
             C92226 * C3876) *
                C92188) *
               C31250 +
           ((C31334 * C1376 - C31252 * C1459 + C31335 * C3359 -
             C92226 * C3441) *
                C265 +
            (C31334 * C1773 - C31252 * C1839 + C31335 * C3803 -
             C92226 * C3877) *
                C92188) *
               C31251) *
              C1373 +
          (((C31252 * C1461 - C31334 * C1379 + C92226 * C5801 -
             C31335 * C5703) *
                C265 +
            (C31252 * C1841 - C31334 * C1775 + C92226 * C6305 -
             C31335 * C6219) *
                C92188) *
               C31249 +
           ((C31252 * C1462 - C31334 * C1380 + C92226 * C5803 -
             C31335 * C5704) *
                C265 +
            (C31252 * C1842 - C31334 * C1776 + C92226 * C6307 -
             C31335 * C6220) *
                C92188) *
               C31250 +
           ((C31252 * C1463 - C31334 * C1381 + C92226 * C11886 -
             C31335 * C11784) *
                C265 +
            (C31252 * C1843 - C31334 * C1777 + C92226 * C12524 -
             C31335 * C12424) *
                C92188) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C265 +
           (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
            C36316 * C1195 - C36260 * C1261 + C36317 * C5418 - C36261 * C5518) *
               C92188) *
              C92097 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C265 +
           (C36258 * C631 - C36314 * C569 + C36259 * C1258 - C36315 * C1192 +
            C36260 * C1262 - C36316 * C1196 + C36261 * C7281 - C36317 * C7173) *
               C92188) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C265 +
           (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
            C36316 * C5417 - C36260 * C5517 + C36317 * C5419 - C36261 * C5519) *
               C92188) *
              C92097 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C265 +
           (C36258 * C1260 - C36314 * C1194 + C36259 * C5517 - C36315 * C5417 +
            C36260 * C5519 - C36316 * C5419 + C36261 * C37169 -
            C36317 * C37101) *
               C92188) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C1372 +
          ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
            C36316 * C5702 - C36260 * C5799 + C36317 * C8454 - C36261 * C8588) *
               C265 +
           (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
            C36316 * C6217 - C36260 * C6303 + C36317 * C9122 - C36261 * C9232) *
               C92188) *
              C92097 * C1373 +
          ((C36258 * C1461 - C36314 * C1379 + C36259 * C5801 - C36315 * C5703 +
            C36260 * C5802 - C36316 * C5705 + C36261 * C37332 -
            C36317 * C37278) *
               C265 +
           (C36258 * C1841 - C36314 * C1775 + C36259 * C6305 - C36315 * C6219 +
            C36260 * C6306 - C36316 * C6221 + C36261 * C37642 -
            C36317 * C37590) *
               C92188) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C790 -
          ((C4738 * C92226 + C2594 * C31252) * C31251 +
           (C4737 * C92226 + C2595 * C31252) * C31250 +
           (C5625 * C92226 + C5624 * C31252) * C31249) *
              C92150 * C791 +
          ((C5625 * C31252 + C5627 * C92226) * C31249 +
           (C4737 * C31252 + C5626 * C92226) * C31250 +
           (C4738 * C31252 +
            (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C92136 * C97 -
          ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
           (C31956 + C31955) * C31249) *
              C92150 * C92136 * C98 +
          (C31961 * C31249 + (C31960 + C31959) * C31250 +
           (C736 * C31252 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C1372 -
          ((C18750 * C92226 + C3287 * C31252) * C31251 +
           (C8354 * C92226 + C3288 * C31252) * C31250 +
           (C9348 * C92226 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C31252) *
               C31249) *
              C1373 +
          (((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
                C31252 +
            (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
                C92226) *
               C31249 +
           ((C265 * C1528 - C701 * C1380 - C265 * C1776 + C92188 * C1900) *
                C31252 +
            (C265 * C5888 - C701 * C5704 - C265 * C6220 + C92188 * C6387) *
                C92226) *
               C31250 +
           ((C265 * C1529 - C701 * C1381 - C265 * C1777 + C92188 * C1901) *
                C31252 +
            (C265 * C11994 - C701 * C11784 - C265 * C12424 + C92188 * C12627) *
                C92226) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C92136 * C97 -
          (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
              C92097 * C92150 * C92136 * C98 +
          (C734 * C36258 + C2594 * C36259 + C4738 * C36260 +
           (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
               C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C790 -
          (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 + C5624 * C36258) *
              C92097 * C92150 * C791 +
          (C5625 * C36258 + C5627 * C36259 + C37228 * C36260 +
           (C265 * C36860 - C701 * C36722 - C265 * C37101 + C92188 * C37220) *
               C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C1372 -
          ((C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
               C36261 +
           C9347 * C36260 + C9348 * C36259 +
           (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
               C36258) *
              C92097 * C1373 +
          ((C265 * C1527 - C701 * C1379 - C265 * C1775 + C92188 * C1899) *
               C36258 +
           (C265 * C5887 - C701 * C5703 - C265 * C6219 + C92188 * C6385) *
               C36259 +
           (C265 * C5889 - C701 * C5705 - C265 * C6221 + C92188 * C6386) *
               C36260 +
           (C265 * C37384 - C701 * C37278 - C265 * C37590 + C92188 * C37693) *
               C36261) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C92188 * C31252 +
            (C32072 + C32073 + C32074) * C92188 * C92226) *
               C2664 -
           ((C31258 * C3365 - C31259 * C3359 - C31258 * C3366 + C31251 * C3371 +
             C31256 * C3363 - C31257 * C3358 - C31256 * C3364 + C31250 * C3370 +
             C31254 * C3361 - C31255 * C3357 - C31254 * C3362 +
             C31249 * C3369) *
                C92188 * C92226 +
            (C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400 +
             C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
             C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
             C31249 * C1402) *
                C92188 * C31252) *
               C2665) *
              C92136 * C1971 +
          (((C31254 * C1387 - C31255 * C1377 - C31254 * C1388 + C31249 * C1401 +
             C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
             C31258 * C1383 - C31259 * C1375 - C31258 * C1384 +
             C31251 * C1399) *
                C92188 * C31252 +
            (C31254 * C3363 - C31255 * C3358 - C31254 * C3364 + C31249 * C3370 +
             C31256 * C3365 - C31257 * C3359 - C31256 * C3366 + C31250 * C3371 +
             C31258 * C3367 - C31259 * C3360 - C31258 * C3368 +
             C31251 * C3372) *
                C92188 * C92226) *
               C2665 -
           ((C33490 + C33489 + C33488) * C92188 * C92226 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C92188 * C31252) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92188 * C36258 +
            C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
               C2664 -
           ((C36262 * C8456 - C36263 * C8454 - C36262 * C8457 +
             C92097 * C8460) *
                C92188 * C36261 +
            (C36262 * C5709 - C36263 * C5702 - C36262 * C5710 +
             C92097 * C5720) *
                C92188 * C36260 +
            (C36262 * C3361 - C36263 * C3357 - C36262 * C3362 +
             C92097 * C3369) *
                C92188 * C36259 +
            (C36262 * C1389 - C36263 * C1378 - C36262 * C1390 +
             C92097 * C1402) *
                C92188 * C36258) *
               C2665) *
              C92136 * C1971 +
          (((C36262 * C1387 - C36263 * C1377 - C36262 * C1388 +
             C92097 * C1401) *
                C92188 * C36258 +
            (C36262 * C3363 - C36263 * C3358 - C36262 * C3364 +
             C92097 * C3370) *
                C92188 * C36259 +
            (C36262 * C5707 - C36263 * C5701 - C36262 * C5708 +
             C92097 * C5719) *
                C92188 * C36260 +
            (C36262 * C8458 - C36263 * C8455 - C36262 * C8459 +
             C92097 * C8461) *
                C92188 * C36261) *
               C2665 -
           (C37784 * C36261 + C37783 * C36260 + C37782 * C36259 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92188 * C36258) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C31254 +
            (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
                C31249 +
            (C31337 - C31338 + C31339 - C31340) * C31256 +
            (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
            C31366 * C31251) *
               C92188 * C2664 +
           ((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
             C92226 * C3439) *
                C31254 +
            (C31334 * C1390 - C31252 * C1465 + C31335 * C3362 -
             C92226 * C3443) *
                C31249 +
            (C34545 - C34546 + C34547 - C34548) * C31256 +
            (C34549 - C34550 + C34551 - C34552) * C31250 +
            (C34553 - C34554 + C34555 - C34556) * C31258 +
            (C34557 - C34558 + C34559 - C34560) * C31251) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C31338 - C31337 + C31340 - C31339) * C31254 +
            (C31342 - C31341 + C31344 - C31343) * C31249 +
            (C31346 - C31345 + C31348 - C31347) * C31256 +
            (C31350 - C31349 + C31352 - C31351) * C31250 +
            (C31353 - C31354 + C31355 - C31356) * C31258 +
            (C31357 - C31358 + C31359 - C31360) * C31251) *
               C92188 * C2664 +
           ((C34546 - C34545 + C34548 - C34547) * C31254 +
            (C34550 - C34549 + C34552 - C34551) * C31249 +
            (C34554 - C34553 + C34556 - C34555) * C31256 +
            (C34558 - C34557 + C34560 - C34559) * C31250 +
            (C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
             C31335 * C3360) *
                C31258 +
            (C31252 * C1468 - C31334 * C1384 + C92226 * C3446 -
             C31335 * C3368) *
                C31251) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C36262 +
            (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
             C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
                C92097) *
               C92188 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C36262 +
            (C36314 * C1390 - C36258 * C1465 + C36315 * C3362 - C36259 * C3443 +
             C36316 * C5710 - C36260 * C5805 + C36317 * C8457 -
             C36261 * C8590) *
                C92097) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C36262 +
            (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
             C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
                C92097) *
               C92188 * C2664 +
           ((C36258 * C1458 - C36314 * C1377 + C36259 * C3440 - C36315 * C3358 +
             C36260 * C5800 - C36316 * C5701 + C36261 * C8589 -
             C36317 * C8455) *
                C36262 +
            (C36258 * C1466 - C36314 * C1388 + C36259 * C3444 - C36315 * C3364 +
             C36260 * C5806 - C36316 * C5708 + C36261 * C8591 -
             C36317 * C8459) *
                C92097) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31254 +
             (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
             (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
                C31252 +
            ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
             C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
             C14888 * C31251) *
                C92226) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31254 +
             (C265 * C1390 - C92188 * C1531) * C31249 +
             (C2819 - C2820) * C31256 + (C2821 - C2822) * C31250 +
             (C2823 - C2824) * C31258 + (C2825 - C2826) * C31251) *
                C31252 +
            ((C8695 - C8696) * C31254 + (C8697 - C8698) * C31249 +
             (C7705 - C7706) * C31256 + (C7707 - C7708) * C31250 +
             (C18111 - C18112) * C31258 + (C18113 - C18114) * C31251) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C31254 + (C282 - C281) * C31249 +
             (C284 - C283) * C31256 + (C286 - C285) * C31250 +
             (C288 - C287) * C31258 + (C290 - C289) * C31251) *
                C31252 +
            (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
             C17153 * C31250 + (C2134 - C2135) * C31258 +
             (C2136 - C2137) * C31251) *
                C92226) *
               C2664 +
           (((C2820 - C2819) * C31254 + (C2822 - C2821) * C31249 +
             (C2824 - C2823) * C31256 + (C2826 - C2825) * C31250 +
             (C2828 - C2827) * C31258 + (C2830 - C2829) * C31251) *
                C31252 +
            ((C7706 - C7705) * C31254 + (C7708 - C7707) * C31249 +
             (C18112 - C18111) * C31256 + (C18114 - C18113) * C31250 +
             (C92188 * C3516 - C265 * C3360) * C31258 +
             (C92188 * C3520 - C265 * C3368) * C31251) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C36262 +
             (C92188 * C272 - C265 * C115) * C92097) *
                C36258 +
            ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
            C36871 * C36260 + C36874 * C36261) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C36262 +
             (C265 * C1390 - C92188 * C1531) * C92097) *
                C36258 +
            ((C8695 - C8696) * C36262 + (C8697 - C8698) * C92097) * C36259 +
            ((C8699 - C8700) * C36262 + (C8701 - C8702) * C92097) * C36260 +
            ((C265 * C8454 - C92188 * C8690) * C36262 +
             (C265 * C8457 - C92188 * C8692) * C92097) *
                C36261) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
            (C6734 * C36262 + C6735 * C92097) * C36259 +
            (C6736 * C36262 + C6737 * C92097) * C36260 +
            ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
               C2664 +
           (((C2820 - C2819) * C36262 + (C2822 - C2821) * C92097) * C36258 +
            ((C7706 - C7705) * C36262 + (C7708 - C7707) * C92097) * C36259 +
            ((C7710 - C7709) * C36262 + (C7712 - C7711) * C92097) * C36260 +
            ((C92188 * C8691 - C265 * C8455) * C36262 +
             (C92188 * C8693 - C265 * C8459) * C92097) *
                C36261) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C31334 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C31252 +
            (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
            (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
               C92188 * C2664 +
           ((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 - C31250 * C1387 +
             C31258 * C1376 - C31251 * C1385) *
                C31334 +
            (C31254 * C1589 - C31249 * C1597 + C31256 * C1590 - C31250 * C1598 +
             C31258 * C1591 - C31251 * C1599) *
                C31252 +
            (C31254 * C3357 - C31249 * C3361 + C31256 * C3358 - C31250 * C3363 +
             C31258 * C3359 - C31251 * C3365) *
                C31335 +
            (C31254 * C3587 - C31249 * C3591 + C31256 * C3588 - C31250 * C3592 +
             C31258 * C3589 - C31251 * C3593) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C31334 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C31252 +
            (C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C31335 +
            (C33807 - C33808 + C33809 - C33810 + C33811 - C33812) * C92226) *
               C92188 * C2664 +
           ((C31249 * C1387 - C31254 * C1377 + C31250 * C1385 - C31256 * C1376 +
             C31251 * C1383 - C31258 * C1375) *
                C31334 +
            (C31249 * C1598 - C31254 * C1590 + C31250 * C1599 - C31256 * C1591 +
             C31251 * C1600 - C31258 * C1592) *
                C31252 +
            (C31249 * C3363 - C31254 * C3358 + C31250 * C3365 - C31256 * C3359 +
             C31251 * C3367 - C31258 * C3360) *
                C31335 +
            (C31249 * C3592 - C31254 * C3588 + C31250 * C3593 - C31256 * C3589 +
             C31251 * C3594 - C31258 * C3590) *
                C92226) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C36314 +
            (C92097 * C354 - C36262 * C348) * C36258 +
            (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
            C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
            C36946 * C36261) *
               C92188 * C2664 +
           ((C36262 * C1378 - C92097 * C1389) * C36314 +
            (C36262 * C1589 - C92097 * C1597) * C36258 +
            (C36262 * C3357 - C92097 * C3361) * C36315 +
            (C36262 * C3587 - C92097 * C3591) * C36259 +
            (C36262 * C5702 - C92097 * C5709) * C36316 +
            (C36262 * C5971 - C92097 * C5977) * C36260 +
            (C36262 * C8454 - C92097 * C8456) * C36317 +
            (C36262 * C8800 - C92097 * C8802) * C36261) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C36262 * C109 - C92097 * C116) * C36314 +
            (C36262 * C349 - C92097 * C355) * C36258 +
            (C37983 - C37984) * C36315 + (C37985 - C37986) * C36259 +
            (C37987 - C37988) * C36316 + (C37989 - C37990) * C36260 +
            (C37991 - C37992) * C36317 + (C37993 - C37994) * C36261) *
               C92188 * C2664 +
           ((C92097 * C1387 - C36262 * C1377) * C36314 +
            (C92097 * C1598 - C36262 * C1590) * C36258 +
            (C92097 * C3363 - C36262 * C3358) * C36315 +
            (C92097 * C3592 - C36262 * C3588) * C36259 +
            (C92097 * C5707 - C36262 * C5701) * C36316 +
            (C92097 * C5978 - C36262 * C5972) * C36260 +
            (C92097 * C8458 - C36262 * C8455) * C36317 +
            (C92097 * C8803 - C36262 * C8801) * C36261) *
               C92188 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
             C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
                C31249 +
            (C31627 + C31628) * C31250 + C31633 * C31251) *
               C92188 * C2664 -
           ((C34879 + C34880) * C31251 + (C34881 + C34882) * C31250 +
            (C31335 * C3439 - C31589 * C3357 - C31335 * C3587 + C92226 * C3661 +
             C31334 * C1457 - C31588 * C1378 - C31334 * C1589 +
             C31252 * C1658) *
                C31249) *
               C92188 * C2665) *
              C92136 * C1971 +
          (((C34882 + C34881) * C31249 + (C34880 + C34879) * C31250 +
            (C31334 * C1460 - C31588 * C1375 - C31334 * C1592 + C31252 * C1655 +
             C31335 * C3442 - C31589 * C3360 - C31335 * C3590 +
             C92226 * C3664) *
                C31251) *
               C92188 * C2665 -
           ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
            (C31628 + C31627) * C31249) *
               C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
            C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
            C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
            C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
               C92097 * C92188 * C2664 -
           (C36317 * C8588 - C36471 * C8454 - C36317 * C8800 + C36261 * C8918 +
            C36316 * C5799 - C36470 * C5702 - C36316 * C5971 + C36260 * C6058 +
            C36315 * C3439 - C36469 * C3357 - C36315 * C3587 + C36259 * C3661 +
            C36314 * C1457 - C36468 * C1378 - C36314 * C1589 + C36258 * C1658) *
               C92097 * C92188 * C2665) *
              C92136 * C1971 +
          ((C36314 * C1458 - C36468 * C1377 - C36314 * C1590 + C36258 * C1657 +
            C36315 * C3440 - C36469 * C3358 - C36315 * C3588 + C36259 * C3662 +
            C36316 * C5800 - C36470 * C5701 - C36316 * C5972 + C36260 * C6057 +
            C36317 * C8589 - C36471 * C8455 - C36317 * C8801 + C36261 * C8919) *
               C92097 * C92188 * C2665 -
           (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
            C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
            C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
            C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
               C92097 * C92188 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92188 * C266 - C265 * C108) * C31334 +
             (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
             (C5334 - C5335) * C92226) *
                C31249 +
            ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
             C7073 * C92226) *
                C31250 +
            C31714 * C31251) *
               C2664 +
           (((C265 * C1378 - C92188 * C1523) * C31334 +
             (C265 * C1589 - C92188 * C1713) * C31252 +
             (C8695 - C8696) * C31335 + (C9021 - C9022) * C92226) *
                C31249 +
            ((C2819 - C2820) * C31334 + (C3054 - C3055) * C31252 +
             (C7705 - C7706) * C31335 + (C8032 - C8033) * C92226) *
                C31250 +
            ((C2823 - C2824) * C31334 + (C3056 - C3057) * C31252 +
             (C18111 - C18112) * C31335 + (C18437 - C18438) * C92226) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
             C7074 * C92226) *
                C31249 +
            ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
             C17488 * C92226) *
                C31250 +
            ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
             (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
                C31251) *
               C2664 +
           (((C2820 - C2819) * C31334 + (C3055 - C3054) * C31252 +
             (C7706 - C7705) * C31335 + (C8033 - C8032) * C92226) *
                C31249 +
            ((C2824 - C2823) * C31334 + (C3057 - C3056) * C31252 +
             (C18112 - C18111) * C31335 + (C18438 - C18437) * C92226) *
                C31250 +
            ((C2828 - C2827) * C31334 + (C3059 - C3058) * C31252 +
             (C92188 * C3516 - C265 * C3360) * C31335 +
             (C92188 * C3734 - C265 * C3590) * C92226) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36314 +
            (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
            (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
            C36865 * C36317 + C37049 * C36261) *
               C92097 * C2664 +
           ((C265 * C1378 - C92188 * C1523) * C36314 +
            (C265 * C1589 - C92188 * C1713) * C36258 +
            (C8695 - C8696) * C36315 + (C9021 - C9022) * C36259 +
            (C8699 - C8700) * C36316 + (C9023 - C9024) * C36260 +
            (C265 * C8454 - C92188 * C8690) * C36317 +
            (C265 * C8800 - C92188 * C9018) * C36261) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
            C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
            (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
               C92097 * C2664 +
           ((C2820 - C2819) * C36314 + (C3055 - C3054) * C36258 +
            (C7706 - C7705) * C36315 + (C8033 - C8032) * C36259 +
            (C7710 - C7709) * C36316 + (C8035 - C8034) * C36260 +
            (C92188 * C8691 - C265 * C8455) * C36317 +
            (C92188 * C9019 - C265 * C8801) * C36261) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C265 +
             (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
              C31251 * C575 - C31258 * C569) *
                 C92188) *
                C31252 +
            ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
             (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
                C92226) *
               C2664 +
           (((C31254 * C1378 - C31249 * C1389 + C31256 * C1377 -
              C31250 * C1387 + C31258 * C1376 - C31251 * C1385) *
                 C265 +
             (C31254 * C1771 - C31249 * C1779 + C31256 * C1772 -
              C31250 * C1780 + C31258 * C1773 - C31251 * C1781) *
                 C92188) *
                C31252 +
            ((C31254 * C3357 - C31249 * C3361 + C31256 * C3358 -
              C31250 * C3363 + C31258 * C3359 - C31251 * C3365) *
                 C265 +
             (C31254 * C3801 - C31249 * C3805 + C31256 * C3802 -
              C31250 * C3806 + C31258 * C3803 - C31251 * C3807) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C265 +
             (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
              C31258 * C570 - C31251 * C576) *
                 C92188) *
                C31252 +
            ((C33801 - C33802 + C33803 - C33804 + C33805 - C33806) * C265 +
             (C34135 - C34136 + C34137 - C34138 + C34139 - C34140) * C92188) *
                C92226) *
               C2664 +
           (((C31249 * C1387 - C31254 * C1377 + C31250 * C1385 -
              C31256 * C1376 + C31251 * C1383 - C31258 * C1375) *
                 C265 +
             (C31249 * C1780 - C31254 * C1772 + C31250 * C1781 -
              C31256 * C1773 + C31251 * C1782 - C31258 * C1774) *
                 C92188) *
                C31252 +
            ((C31249 * C3363 - C31254 * C3358 + C31250 * C3365 -
              C31256 * C3359 + C31251 * C3367 - C31258 * C3360) *
                 C265 +
             (C31249 * C3806 - C31254 * C3802 + C31250 * C3807 -
              C31256 * C3803 + C31251 * C3808 - C31258 * C3804) *
                 C92188) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C265 +
             (C92097 * C573 - C36262 * C567) * C92188) *
                C36258 +
            ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
            C37118 * C36260 + C37119 * C36261) *
               C2664 +
           (((C36262 * C1378 - C92097 * C1389) * C265 +
             (C36262 * C1771 - C92097 * C1779) * C92188) *
                C36258 +
            ((C36262 * C3357 - C92097 * C3361) * C265 +
             (C36262 * C3801 - C92097 * C3805) * C92188) *
                C36259 +
            ((C36262 * C5702 - C92097 * C5709) * C265 +
             (C36262 * C6217 - C92097 * C6223) * C92188) *
                C36260 +
            ((C36262 * C8454 - C92097 * C8456) * C265 +
             (C36262 * C9122 - C92097 * C9124) * C92188) *
                C36261) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C265 +
             (C36262 * C568 - C92097 * C574) * C92188) *
                C36258 +
            ((C37983 - C37984) * C265 + (C38193 - C38194) * C92188) * C36259 +
            ((C37987 - C37988) * C265 + (C38195 - C38196) * C92188) * C36260 +
            ((C37991 - C37992) * C265 + (C38197 - C38198) * C92188) * C36261) *
               C2664 +
           (((C92097 * C1387 - C36262 * C1377) * C265 +
             (C92097 * C1780 - C36262 * C1772) * C92188) *
                C36258 +
            ((C92097 * C3363 - C36262 * C3358) * C265 +
             (C92097 * C3806 - C36262 * C3802) * C92188) *
                C36259 +
            ((C92097 * C5707 - C36262 * C5701) * C265 +
             (C92097 * C6224 - C36262 * C6218) * C92188) *
                C36260 +
            ((C92097 * C8458 - C36262 * C8455) * C265 +
             (C92097 * C9125 - C36262 * C9123) * C92188) *
                C36261) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                 C265 +
             (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                 C92188) *
                C31249 +
            ((C31337 - C31338 + C31339 - C31340) * C265 +
             (C31863 - C31864 + C31865 - C31866) * C92188) *
                C31250 +
            C31880 * C31251) *
               C2664 +
           (((C31334 * C1378 - C31252 * C1457 + C31335 * C3357 -
              C92226 * C3439) *
                 C265 +
             (C31334 * C1771 - C31252 * C1837 + C31335 * C3801 -
              C92226 * C3875) *
                 C92188) *
                C31249 +
            ((C34545 - C34546 + C34547 - C34548) * C265 +
             (C35177 - C35178 + C35179 - C35180) * C92188) *
                C31250 +
            ((C34553 - C34554 + C34555 - C34556) * C265 +
             (C35181 - C35182 + C35183 - C35184) * C92188) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C31338 - C31337 + C31340 - C31339) * C265 +
             (C31864 - C31863 + C31866 - C31865) * C92188) *
                C31249 +
            ((C31346 - C31345 + C31348 - C31347) * C265 +
             (C31869 - C31868 + C31871 - C31870) * C92188) *
                C31250 +
            ((C31353 - C31354 + C31355 - C31356) * C265 +
             (C31872 - C31873 + C31874 - C31875) * C92188) *
                C31251) *
               C2664 +
           (((C34546 - C34545 + C34548 - C34547) * C265 +
             (C35178 - C35177 + C35180 - C35179) * C92188) *
                C31249 +
            ((C34554 - C34553 + C34556 - C34555) * C265 +
             (C35182 - C35181 + C35184 - C35183) * C92188) *
                C31250 +
            ((C31252 * C1460 - C31334 * C1375 + C92226 * C3442 -
              C31335 * C3360) *
                 C265 +
             (C31252 * C1840 - C31334 * C1774 + C92226 * C3878 -
              C31335 * C3804) *
                 C92188) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
             C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
                C265 +
            (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
             C36260 * C1260 - C36316 * C1194 + C36261 * C5517 -
             C36317 * C5417) *
                C92188) *
               C92097 * C2664 +
           ((C36314 * C1378 - C36258 * C1457 + C36315 * C3357 - C36259 * C3439 +
             C36316 * C5702 - C36260 * C5799 + C36317 * C8454 -
             C36261 * C8588) *
                C265 +
            (C36314 * C1771 - C36258 * C1837 + C36315 * C3801 - C36259 * C3875 +
             C36316 * C6217 - C36260 * C6303 + C36317 * C9122 -
             C36261 * C9232) *
                C92188) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
             C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
                C265 +
            (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
             C36316 * C1195 - C36260 * C1261 + C36317 * C5418 -
             C36261 * C5518) *
                C92188) *
               C92097 * C2664 +
           ((C36258 * C1458 - C36314 * C1377 + C36259 * C3440 - C36315 * C3358 +
             C36260 * C5800 - C36316 * C5701 + C36261 * C8589 -
             C36317 * C8455) *
                C265 +
            (C36258 * C1838 - C36314 * C1772 + C36259 * C3876 - C36315 * C3802 +
             C36260 * C6304 - C36316 * C6218 + C36261 * C9233 -
             C36317 * C9123) *
                C92188) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) *
                 C31252 +
             C5624 * C92226) *
                C31249 +
            (C31955 + C31956) * C31250 + C31961 * C31251) *
               C2664 -
           ((C35283 + C35284) * C31251 + (C35285 + C35286) * C31250 +
            (C9348 * C92226 +
             (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                 C31252) *
                C31249) *
               C2665) *
              C92136 * C1971 +
          (((C35286 + C35285) * C31249 + (C35284 + C35283) * C31250 +
            (C3286 * C31252 +
             (C265 * C3516 - C701 * C3360 - C265 * C3804 + C92188 * C3948) *
                 C92226) *
                C31251) *
               C2665 -
           ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
            (C31956 + C31955) * C31249) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
            C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
               C92097 * C2664 -
           ((C265 * C8690 - C701 * C8454 - C265 * C9122 + C92188 * C9332) *
                C36261 +
            C9347 * C36260 + C9348 * C36259 +
            (C265 * C1523 - C701 * C1378 - C265 * C1771 + C92188 * C1898) *
                C36258) *
               C92097 * C2665) *
              C92136 * C1971 +
          ((C3288 * C36258 + C8354 * C36259 + C8353 * C36260 +
            (C265 * C8691 - C701 * C8455 - C265 * C9123 + C92188 * C9333) *
                C36261) *
               C92097 * C2665 -
           (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
               C92097 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C31254 * C808 - C31255 * C797 - C31254 * C809 + C31249 * C821 +
            C31256 * C806 - C31257 * C796 - C31256 * C807 + C31250 * C820 +
            C31258 * C804 - C31259 * C795 - C31258 * C805 + C31251 * C819) *
               C92188 * C92226) *
              C92150 * C92136 * C97 -
          ((C31258 * C802 - C31259 * C794 - C31258 * C803 + C31251 * C818 +
            C31256 * C804 - C31257 * C795 - C31256 * C805 + C31250 * C819 +
            C31254 * C806 - C31255 * C796 - C31254 * C807 + C31249 * C820) *
               C92188 * C92226 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C92188 * C31252) *
              C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C92188 * C31252 +
           (C31254 * C804 - C31255 * C795 - C31254 * C805 + C31249 * C819 +
            C31256 * C802 - C31257 * C794 - C31256 * C803 + C31250 * C818 +
            C31258 * C1974 - C31259 * C1973 - C31258 * C1975 + C31251 * C1976) *
               C92188 * C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C92188 * C31252 +
           (C32072 + C32073 + C32074) * C92188 * C92226) *
              C92150 * C790 -
          ((C32075 + C32076 + C32077) * C92188 * C92226 +
           (C32074 + C32073 + C32072) * C92188 * C31252) *
              C92150 * C791 +
          ((C32077 + C32076 + C32075) * C92188 * C31252 +
           (C31254 * C4820 - C31255 * C4815 - C31254 * C4821 + C31249 * C4827 +
            C31256 * C4818 - C31257 * C4814 - C31256 * C4819 + C31250 * C4826 +
            C31258 * C6488 - C31259 * C6487 - C31258 * C6489 + C31251 * C6490) *
               C92188 * C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           (C36262 * C808 - C36263 * C797 - C36262 * C809 + C92097 * C821) *
               C92188 * C36259 +
           (C36262 * C810 - C36263 * C798 - C36262 * C811 + C92097 * C822) *
               C92188 * C36260 +
           (C36262 * C4820 - C36263 * C4815 - C36262 * C4821 + C92097 * C4827) *
               C92188 * C36261) *
              C92150 * C92136 * C97 -
          ((C36262 * C4818 - C36263 * C4814 - C36262 * C4819 + C92097 * C4826) *
               C92188 * C36261 +
           (C36262 * C812 - C36263 * C799 - C36262 * C813 + C92097 * C823) *
               C92188 * C36260 +
           (C36262 * C806 - C36263 * C796 - C36262 * C807 + C92097 * C820) *
               C92188 * C36259 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C92188 * C36258) *
              C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C92188 * C36258 +
           (C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
               C92188 * C36259 +
           (C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
               C92188 * C36260 +
           (C36262 * C6488 - C36263 * C6487 - C36262 * C6489 + C92097 * C6490) *
               C92188 * C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C92188 * C36258 +
           C36755 * C36259 + C36756 * C36260 + C36757 * C36261) *
              C92150 * C790 -
          (C36758 * C36261 + C36757 * C36260 + C36756 * C36259 +
           C36755 * C36258) *
              C92150 * C791 +
          (C36756 * C36258 + C36757 * C36259 + C36758 * C36260 +
           (C36262 * C36723 - C36263 * C36722 - C36262 * C36724 +
            C92097 * C36725) *
               C92188 * C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C92136 * C97 +
          ((C31338 - C31337 + C31340 - C31339) * C31254 +
           (C31342 - C31341 + C31344 - C31343) * C31249 +
           (C31346 - C31345 + C31348 - C31347) * C31256 +
           (C31350 - C31349 + C31352 - C31351) * C31250 +
           (C31353 - C31354 + C31355 - C31356) * C31258 +
           (C31357 - C31358 + C31359 - C31360) * C31251) *
              C92188 * C92150 * C92136 * C98 +
          (C31365 * C31254 + C31366 * C31249 +
           (C31354 - C31353 + C31356 - C31355) * C31256 +
           (C31358 - C31357 + C31360 - C31359) * C31250 +
           (C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
               C31258 +
           (C31252 * C193 - C31334 * C123 + C92226 * C2044 - C31335 * C1975) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
               C31254 +
           (C31252 * C189 - C31334 * C115 + C92226 * C884 - C31335 * C809) *
               C31249 +
           (C31337 - C31338 + C31339 - C31340) * C31256 +
           (C31341 - C31342 + C31343 - C31344) * C31250 + C31365 * C31258 +
           C31366 * C31251) *
              C92188 * C92150 * C790 +
          ((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
               C31254 +
           (C31334 * C809 - C31252 * C884 + C31335 * C811 - C92226 * C888) *
               C31249 +
           (C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
               C31256 +
           (C31334 * C807 - C31252 * C885 + C31335 * C813 - C92226 * C889) *
               C31250 +
           (C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
               C31258 +
           (C31334 * C805 - C31252 * C886 + C31335 * C815 - C92226 * C890) *
               C31251) *
              C92188 * C92150 * C791 +
          ((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
               C31254 +
           (C31252 * C888 - C31334 * C811 + C92226 * C4952 - C31335 * C4821) *
               C31249 +
           (C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
               C31256 +
           (C31252 * C889 - C31334 * C813 + C92226 * C4953 - C31335 * C4819) *
               C31250 +
           (C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
               C31258 +
           (C31252 * C890 - C31334 * C815 + C92226 * C6618 - C31335 * C6489) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C36262 +
           (C36314 * C117 - C36258 * C190 + C36315 * C807 - C36259 * C885 +
            C36316 * C813 - C36260 * C889 + C36317 * C4819 - C36261 * C4953) *
               C92097) *
              C92188 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C36262 +
           (C36258 * C191 - C36314 * C119 + C36259 * C886 - C36315 * C805 +
            C36260 * C890 - C36316 * C815 + C36261 * C6618 - C36317 * C6489) *
               C92097) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C36262 +
           (C36258 * C189 - C36314 * C115 + C36259 * C884 - C36315 * C809 +
            C36260 * C888 - C36316 * C811 + C36261 * C4952 - C36317 * C4821) *
               C92097) *
              C92188 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C36262 +
           (C36314 * C809 - C36258 * C884 + C36315 * C811 - C36259 * C888 +
            C36316 * C4821 - C36260 * C4952 + C36317 * C4823 - C36261 * C4954) *
               C92097) *
              C92188 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C36262 +
           (C36258 * C888 - C36314 * C811 + C36259 * C4952 - C36315 * C4821 +
            C36260 * C4954 - C36316 * C4823 + C36261 * C36809 -
            C36317 * C36724) *
               C92097) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31254 + (C282 - C281) * C31249 +
            (C284 - C283) * C31256 + (C286 - C285) * C31250 +
            (C288 - C287) * C31258 + (C290 - C289) * C31251) *
               C31252 +
           (C6734 * C31254 + C6735 * C31249 + C17152 * C31256 +
            C17153 * C31250 + (C2134 - C2135) * C31258 +
            (C2136 - C2137) * C31251) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C295 * C31254 + C296 * C31249 + C297 * C31256 + C298 * C31250 +
            (C292 - C291) * C31258 + (C294 - C293) * C31251) *
               C31252 +
           (C14887 * C31254 + C14888 * C31249 + (C2135 - C2134) * C31256 +
            (C2137 - C2136) * C31250 +
            (C92188 * C2123 - C265 * C1973) * C31258 +
            (C92188 * C2124 - C265 * C1975) * C31251) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31254 +
            (C92188 * C272 - C265 * C115) * C31249 + (C279 - C280) * C31256 +
            (C281 - C282) * C31250 + C295 * C31258 + C296 * C31251) *
               C31252 +
           ((C5039 - C5040) * C31254 + (C5041 - C5042) * C31249 +
            C6732 * C31256 + C6733 * C31250 + C14887 * C31258 +
            C14888 * C31251) *
               C92226) *
              C92150 * C790 +
          (((C5040 - C5039) * C31254 + (C5042 - C5041) * C31249 +
            C6734 * C31256 + C6735 * C31250 + C17152 * C31258 +
            C17153 * C31251) *
               C31252 +
           ((C5044 - C5043) * C31254 + (C5046 - C5045) * C31249 +
            C6736 * C31256 + C6737 * C31250 + (C4212 - C4213) * C31258 +
            (C4214 - C4215) * C31251) *
               C92226) *
              C92150 * C791 +
          ((C5057 * C31254 + C5058 * C31249 + C5047 * C31256 + C5048 * C31250 +
            (C4213 - C4212) * C31258 + (C4215 - C4214) * C31251) *
               C31252 +
           ((C5050 - C5049) * C31254 + (C5052 - C5051) * C31249 +
            (C5054 - C5053) * C31256 + (C5056 - C5055) * C31250 +
            (C92188 * C6729 - C265 * C6487) * C31258 +
            (C92188 * C6730 - C265 * C6489) * C31251) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           (C5057 * C36262 + C5058 * C92097) * C36260 +
           ((C5050 - C5049) * C36262 + (C5052 - C5051) * C92097) * C36261) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C36262 + (C282 - C281) * C92097) * C36258 +
           (C6734 * C36262 + C6735 * C92097) * C36259 +
           (C6736 * C36262 + C6737 * C92097) * C36260 +
           ((C5053 - C5054) * C36262 + (C5055 - C5056) * C92097) * C36261) *
              C92150 * C92136 * C98 +
          ((C295 * C36262 + C296 * C92097) * C36258 +
           (C14887 * C36262 + C14888 * C92097) * C36259 +
           ((C4213 - C4212) * C36262 + (C4215 - C4214) * C92097) * C36260 +
           ((C92188 * C6729 - C265 * C6487) * C36262 +
            (C92188 * C6730 - C265 * C6489) * C92097) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C36262 +
            (C92188 * C272 - C265 * C115) * C92097) *
               C36258 +
           ((C5039 - C5040) * C36262 + (C5041 - C5042) * C92097) * C36259 +
           C36871 * C36260 + C36874 * C36261) *
              C92150 * C790 +
          (((C5040 - C5039) * C36262 + (C5042 - C5041) * C92097) * C36258 +
           ((C5044 - C5043) * C36262 + (C5046 - C5045) * C92097) * C36259 +
           ((C5049 - C5050) * C36262 + (C5051 - C5052) * C92097) * C36260 +
           ((C36867 - C36868) * C36262 + (C36869 - C36870) * C92097) * C36261) *
              C92150 * C791 +
          (C36871 * C36258 + C36874 * C36259 +
           ((C36868 - C36867) * C36262 + (C36870 - C36869) * C92097) * C36260 +
           ((C92188 * C36860 - C265 * C36722) * C36262 +
            (C92188 * C36861 - C265 * C36724) * C92097) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
            C31251 * C804 - C31258 * C795) *
               C31335 +
           (C31249 * C1016 - C31254 * C1008 + C31250 * C1017 - C31256 * C1009 +
            C31251 * C1018 - C31258 * C1010) *
               C92226) *
              C92188 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C31334 +
           (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
            C31258 * C351 - C31251 * C357) *
               C31252 +
           (C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
            C31258 * C794 - C31251 * C802) *
               C31335 +
           (C31254 * C1009 - C31249 * C1017 + C31256 * C1010 - C31250 * C1018 +
            C31258 * C1011 - C31251 * C1019) *
               C92226) *
              C92188 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C31334 +
           (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
            C31251 * C358 - C31258 * C352) *
               C31252 +
           (C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
            C31251 * C1974 - C31258 * C1973) *
               C31335 +
           (C31249 * C1018 - C31254 * C1010 + C31250 * C1019 - C31256 * C1011 +
            C31251 * C2204 - C31258 * C2203) *
               C92226) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C31334 +
           (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
            C31251 * C356 - C31258 * C350) *
               C31252 +
           (C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C31335 +
           (C32306 - C32307 + C32308 - C32309 + C32310 - C32311) * C92226) *
              C92188 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C31334 +
           (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C31252 +
           (C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C31335 +
           (C32318 - C32319 + C32320 - C32321 + C32322 - C32323) * C92226) *
              C92188 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C31334 +
           (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C31252 +
           (C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
            C31251 * C6488 - C31258 * C6487) *
               C31335 +
           (C31249 * C5143 - C31254 * C5139 + C31250 * C5144 - C31256 * C5140 +
            C31251 * C6836 - C31258 * C6835) *
               C92226) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C92097 * C808 - C36262 * C797) * C36315 +
           (C92097 * C1016 - C36262 * C1008) * C36259 +
           (C92097 * C810 - C36262 * C798) * C36316 +
           (C92097 * C1020 - C36262 * C1012) * C36260 +
           (C92097 * C4820 - C36262 * C4815) * C36317 +
           (C92097 * C5143 - C36262 * C5139) * C36261) *
              C92188 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C36314 +
           (C36262 * C349 - C92097 * C355) * C36258 +
           (C36262 * C796 - C92097 * C806) * C36315 +
           (C36262 * C1009 - C92097 * C1017) * C36259 +
           (C36262 * C799 - C92097 * C812) * C36316 +
           (C36262 * C1013 - C92097 * C1021) * C36260 +
           (C36262 * C4814 - C92097 * C4818) * C36317 +
           (C36262 * C5140 - C92097 * C5144) * C36261) *
              C92188 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C36314 +
           (C92097 * C356 - C36262 * C350) * C36258 +
           (C92097 * C804 - C36262 * C795) * C36315 +
           (C92097 * C1018 - C36262 * C1010) * C36259 +
           (C92097 * C814 - C36262 * C800) * C36316 +
           (C92097 * C1022 - C36262 * C1014) * C36260 +
           (C92097 * C6488 - C36262 * C6487) * C36317 +
           (C92097 * C6836 - C36262 * C6835) * C36261) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C36314 +
           (C92097 * C354 - C36262 * C348) * C36258 +
           (C36927 - C36928) * C36315 + (C36929 - C36930) * C36259 +
           C36943 * C36316 + C36944 * C36260 + C36945 * C36317 +
           C36946 * C36261) *
              C92188 * C92150 * C790 +
          ((C36928 - C36927) * C36314 + (C36930 - C36929) * C36258 +
           (C36932 - C36931) * C36315 + (C36934 - C36933) * C36259 +
           (C36936 - C36935) * C36316 + (C36938 - C36937) * C36260 +
           (C36939 - C36940) * C36317 + (C36941 - C36942) * C36261) *
              C92188 * C92150 * C791 +
          (C36943 * C36314 + C36944 * C36258 + C36945 * C36315 +
           C36946 * C36259 + (C36940 - C36939) * C36316 +
           (C36942 - C36941) * C36260 +
           (C92097 * C36723 - C36262 * C36722) * C36317 +
           (C92097 * C36925 - C36262 * C36924) * C36261) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C92136 * C97 -
          ((C31631 + C31632) * C31251 + (C31630 + C31629) * C31250 +
           (C31628 + C31627) * C31249) *
              C92188 * C92150 * C92136 * C98 +
          (C31633 * C31249 + (C31632 + C31631) * C31250 +
           (C31334 * C187 - C31588 * C112 - C31334 * C352 + C31252 * C415 +
            C31335 * C2043 - C31589 * C1973 - C31335 * C2203 + C92226 * C2271) *
               C31251) *
              C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31334 * C183 - C31588 * C108 - C31334 * C348 + C31252 * C411 +
            C31335 * C876 - C31589 * C797 - C31335 * C1008 + C92226 * C1077) *
               C31249 +
           (C31627 + C31628) * C31250 + C31633 * C31251) *
              C92188 * C92150 * C790 -
          ((C31335 * C882 - C31589 * C800 - C31335 * C1014 + C92226 * C1080 +
            C31334 * C878 - C31588 * C795 - C31334 * C1010 + C31252 * C1075) *
               C31251 +
           (C31335 * C881 - C31589 * C799 - C31335 * C1013 + C92226 * C1079 +
            C31334 * C877 - C31588 * C796 - C31334 * C1009 + C31252 * C1076) *
               C31250 +
           (C31335 * C880 - C31589 * C798 - C31335 * C1012 + C92226 * C1078 +
            C31334 * C876 - C31588 * C797 - C31334 * C1008 + C31252 * C1077) *
               C31249) *
              C92188 * C92150 * C791 +
          ((C31334 * C880 - C31588 * C798 - C31334 * C1012 + C31252 * C1078 +
            C31335 * C4948 - C31589 * C4815 - C31335 * C5139 + C92226 * C5252) *
               C31249 +
           (C31334 * C881 - C31588 * C799 - C31334 * C1013 + C31252 * C1079 +
            C31335 * C4949 - C31589 * C4814 - C31335 * C5140 + C92226 * C5251) *
               C31250 +
           (C31334 * C882 - C31588 * C800 - C31334 * C1014 + C31252 * C1080 +
            C31335 * C6617 - C31589 * C6487 - C31335 * C6835 + C92226 * C6951) *
               C31251) *
              C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C92136 * C97 -
          (C36317 * C4949 - C36471 * C4814 - C36317 * C5140 + C36261 * C5251 +
           C36316 * C881 - C36470 * C799 - C36316 * C1013 + C36260 * C1079 +
           C36315 * C877 - C36469 * C796 - C36315 * C1009 + C36259 * C1076 +
           C36314 * C184 - C36468 * C109 - C36314 * C349 + C36258 * C412) *
              C92097 * C92188 * C92150 * C92136 * C98 +
          (C36314 * C185 - C36468 * C110 - C36314 * C350 + C36258 * C413 +
           C36315 * C878 - C36469 * C795 - C36315 * C1010 + C36259 * C1075 +
           C36316 * C882 - C36470 * C800 - C36316 * C1014 + C36260 * C1080 +
           C36317 * C6617 - C36471 * C6487 - C36317 * C6835 + C36261 * C6951) *
              C92097 * C92188 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C36314 * C183 - C36468 * C108 - C36314 * C348 + C36258 * C411 +
           C36315 * C876 - C36469 * C797 - C36315 * C1008 + C36259 * C1077 +
           C36316 * C880 - C36470 * C798 - C36316 * C1012 + C36260 * C1078 +
           C36317 * C4948 - C36471 * C4815 - C36317 * C5139 + C36261 * C5252) *
              C92097 * C92188 * C92150 * C790 -
          (C36317 * C4950 - C36471 * C4816 - C36317 * C5141 + C36261 * C5253 +
           C36316 * C4948 - C36470 * C4815 - C36316 * C5139 + C36260 * C5252 +
           C36315 * C880 - C36469 * C798 - C36315 * C1012 + C36259 * C1078 +
           C36314 * C876 - C36468 * C797 - C36314 * C1008 + C36258 * C1077) *
              C92097 * C92188 * C92150 * C791 +
          (C36314 * C880 - C36468 * C798 - C36314 * C1012 + C36258 * C1078 +
           C36315 * C4948 - C36469 * C4815 - C36315 * C5139 + C36259 * C5252 +
           C36316 * C4950 - C36470 * C4816 - C36316 * C5141 + C36260 * C5253 +
           C36317 * C36808 - C36471 * C36722 - C36317 * C36924 +
           C36261 * C36996) *
              C92097 * C92188 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C92136 * C97 +
          (((C280 - C279) * C31334 + (C503 - C502) * C31252 + C6734 * C31335 +
            C7074 * C92226) *
               C31249 +
           ((C284 - C283) * C31334 + (C506 - C505) * C31252 + C17152 * C31335 +
            C17488 * C92226) *
               C31250 +
           ((C288 - C287) * C31334 + (C509 - C508) * C31252 +
            (C2134 - C2135) * C31335 + (C2365 - C2366) * C92226) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31714 * C31249 +
           (C297 * C31334 + C513 * C31252 + (C2135 - C2134) * C31335 +
            (C2366 - C2365) * C92226) *
               C31250 +
           ((C292 - C291) * C31334 + (C511 - C510) * C31252 +
            (C92188 * C2123 - C265 * C1973) * C31335 +
            (C92188 * C2359 - C265 * C2203) * C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92188 * C266 - C265 * C108) * C31334 +
            (C92188 * C495 - C265 * C348) * C31252 + (C5039 - C5040) * C31335 +
            (C5334 - C5335) * C92226) *
               C31249 +
           ((C279 - C280) * C31334 + (C502 - C503) * C31252 + C6732 * C31335 +
            C7073 * C92226) *
               C31250 +
           C31714 * C31251) *
              C92150 * C790 +
          (((C5040 - C5039) * C31334 + (C5335 - C5334) * C31252 +
            (C5044 - C5043) * C31335 + (C5337 - C5336) * C92226) *
               C31249 +
           (C6734 * C31334 + C7074 * C31252 + C6736 * C31335 + C7075 * C92226) *
               C31250 +
           (C17152 * C31334 + C17488 * C31252 + (C4212 - C4213) * C31335 +
            (C4485 - C4486) * C92226) *
               C31251) *
              C92150 * C791 +
          ((C5057 * C31334 + C5343 * C31252 + (C5050 - C5049) * C31335 +
            (C5340 - C5339) * C92226) *
               C31249 +
           (C5047 * C31334 + C5338 * C31252 + (C5054 - C5053) * C31335 +
            (C5342 - C5341) * C92226) *
               C31250 +
           ((C4213 - C4212) * C31334 + (C4486 - C4485) * C31252 +
            (C92188 * C6729 - C265 * C6487) * C31335 +
            (C92188 * C7071 - C265 * C6835) * C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           (C5050 - C5049) * C36317 + (C5340 - C5339) * C36261) *
              C92097 * C92150 * C92136 * C97 +
          ((C280 - C279) * C36314 + (C503 - C502) * C36258 + C6734 * C36315 +
           C7074 * C36259 + C6736 * C36316 + C7075 * C36260 +
           (C5053 - C5054) * C36317 + (C5341 - C5342) * C36261) *
              C92097 * C92150 * C92136 * C98 +
          (C295 * C36314 + C512 * C36258 + C14887 * C36315 + C15159 * C36259 +
           (C4213 - C4212) * C36316 + (C4486 - C4485) * C36260 +
           (C92188 * C6729 - C265 * C6487) * C36317 +
           (C92188 * C7071 - C265 * C6835) * C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C92188 * C266 - C265 * C108) * C36314 +
           (C92188 * C495 - C265 * C348) * C36258 + (C5039 - C5040) * C36315 +
           (C5334 - C5335) * C36259 + C5057 * C36316 + C5343 * C36260 +
           C36865 * C36317 + C37049 * C36261) *
              C92097 * C92150 * C790 +
          ((C5040 - C5039) * C36314 + (C5335 - C5334) * C36258 +
           (C5044 - C5043) * C36315 + (C5337 - C5336) * C36259 +
           (C5049 - C5050) * C36316 + (C5339 - C5340) * C36260 +
           (C36867 - C36868) * C36317 + (C37050 - C37051) * C36261) *
              C92097 * C92150 * C791 +
          (C5057 * C36314 + C5343 * C36258 + C36865 * C36315 + C37049 * C36259 +
           (C36868 - C36867) * C36316 + (C37051 - C37050) * C36260 +
           (C92188 * C36860 - C265 * C36722) * C36317 +
           (C92188 * C37047 - C265 * C36924) * C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C31249 * C808 - C31254 * C797 + C31250 * C806 - C31256 * C796 +
             C31251 * C804 - C31258 * C795) *
                C265 +
            (C31249 * C1198 - C31254 * C1190 + C31250 * C1199 - C31256 * C1191 +
             C31251 * C1200 - C31258 * C1192) *
                C92188) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C265 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C92188) *
               C31252 +
           ((C31254 * C796 - C31249 * C806 + C31256 * C795 - C31250 * C804 +
             C31258 * C794 - C31251 * C802) *
                C265 +
            (C31254 * C1191 - C31249 * C1199 + C31256 * C1192 - C31250 * C1200 +
             C31258 * C1193 - C31251 * C1201) *
                C92188) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C265 +
            (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
             C31251 * C577 - C31258 * C571) *
                C92188) *
               C31252 +
           ((C31249 * C804 - C31254 * C795 + C31250 * C802 - C31256 * C794 +
             C31251 * C1974 - C31258 * C1973) *
                C265 +
            (C31249 * C1200 - C31254 * C1192 + C31250 * C1201 - C31256 * C1193 +
             C31251 * C2433 - C31258 * C2432) *
                C92188) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C265 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C92188) *
               C31252 +
           ((C32300 - C32301 + C32302 - C32303 + C32304 - C32305) * C265 +
            (C32546 - C32547 + C32548 - C32549 + C32550 - C32551) * C92188) *
               C92226) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C265 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C92188) *
               C31252 +
           ((C32312 - C32313 + C32314 - C32315 + C32316 - C32317) * C265 +
            (C32552 - C32553 + C32554 - C32555 + C32556 - C32557) * C92188) *
               C92226) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C265 +
            (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C92188) *
               C31252 +
           ((C31249 * C4820 - C31254 * C4815 + C31250 * C4818 - C31256 * C4814 +
             C31251 * C6488 - C31258 * C6487) *
                C265 +
            (C31249 * C5421 - C31254 * C5417 + C31250 * C5422 - C31256 * C5418 +
             C31251 * C7174 - C31258 * C7173) *
                C92188) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C92097 * C808 - C36262 * C797) * C265 +
            (C92097 * C1198 - C36262 * C1190) * C92188) *
               C36259 +
           ((C92097 * C810 - C36262 * C798) * C265 +
            (C92097 * C1202 - C36262 * C1194) * C92188) *
               C36260 +
           ((C92097 * C4820 - C36262 * C4815) * C265 +
            (C92097 * C5421 - C36262 * C5417) * C92188) *
               C36261) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C265 +
            (C36262 * C568 - C92097 * C574) * C92188) *
               C36258 +
           ((C36262 * C796 - C92097 * C806) * C265 +
            (C36262 * C1191 - C92097 * C1199) * C92188) *
               C36259 +
           ((C36262 * C799 - C92097 * C812) * C265 +
            (C36262 * C1195 - C92097 * C1203) * C92188) *
               C36260 +
           ((C36262 * C4814 - C92097 * C4818) * C265 +
            (C36262 * C5418 - C92097 * C5422) * C92188) *
               C36261) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C265 +
            (C92097 * C575 - C36262 * C569) * C92188) *
               C36258 +
           ((C92097 * C804 - C36262 * C795) * C265 +
            (C92097 * C1200 - C36262 * C1192) * C92188) *
               C36259 +
           ((C92097 * C814 - C36262 * C800) * C265 +
            (C92097 * C1204 - C36262 * C1196) * C92188) *
               C36260 +
           ((C92097 * C6488 - C36262 * C6487) * C265 +
            (C92097 * C7174 - C36262 * C7173) * C92188) *
               C36261) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C265 +
            (C92097 * C573 - C36262 * C567) * C92188) *
               C36258 +
           ((C36927 - C36928) * C265 + (C37104 - C37105) * C92188) * C36259 +
           C37118 * C36260 + C37119 * C36261) *
              C92150 * C790 +
          (((C36928 - C36927) * C265 + (C37105 - C37104) * C92188) * C36258 +
           ((C36932 - C36931) * C265 + (C37108 - C37107) * C92188) * C36259 +
           ((C36936 - C36935) * C265 + (C37111 - C37110) * C92188) * C36260 +
           ((C36939 - C36940) * C265 + (C37112 - C37113) * C92188) * C36261) *
              C92150 * C791 +
          (C37118 * C36258 + C37119 * C36259 +
           ((C36940 - C36939) * C265 + (C37113 - C37112) * C92188) * C36260 +
           ((C92097 * C36723 - C36262 * C36722) * C265 +
            (C92097 * C37102 - C36262 * C37101) * C92188) *
               C36261) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C92136 * C97 +
          (((C31338 - C31337 + C31340 - C31339) * C265 +
            (C31864 - C31863 + C31866 - C31865) * C92188) *
               C31249 +
           ((C31346 - C31345 + C31348 - C31347) * C265 +
            (C31869 - C31868 + C31871 - C31870) * C92188) *
               C31250 +
           ((C31353 - C31354 + C31355 - C31356) * C265 +
            (C31872 - C31873 + C31874 - C31875) * C92188) *
               C31251) *
              C92150 * C92136 * C98 +
          (C31880 * C31249 +
           ((C31354 - C31353 + C31356 - C31355) * C265 +
            (C31873 - C31872 + C31875 - C31874) * C92188) *
               C31250 +
           ((C31252 * C187 - C31334 * C112 + C92226 * C2043 - C31335 * C1973) *
                C265 +
            (C31252 * C633 - C31334 * C571 + C92226 * C2500 - C31335 * C2432) *
                C92188) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31252 * C183 - C31334 * C108 + C92226 * C876 - C31335 * C797) *
                C265 +
            (C31252 * C629 - C31334 * C567 + C92226 * C1256 - C31335 * C1190) *
                C92188) *
               C31249 +
           ((C31337 - C31338 + C31339 - C31340) * C265 +
            (C31863 - C31864 + C31865 - C31866) * C92188) *
               C31250 +
           C31880 * C31251) *
              C92150 * C790 +
          (((C31334 * C797 - C31252 * C876 + C31335 * C798 - C92226 * C880) *
                C265 +
            (C31334 * C1190 - C31252 * C1256 + C31335 * C1194 -
             C92226 * C1260) *
                C92188) *
               C31249 +
           ((C31334 * C796 - C31252 * C877 + C31335 * C799 - C92226 * C881) *
                C265 +
            (C31334 * C1191 - C31252 * C1257 + C31335 * C1195 -
             C92226 * C1261) *
                C92188) *
               C31250 +
           ((C31334 * C795 - C31252 * C878 + C31335 * C800 - C92226 * C882) *
                C265 +
            (C31334 * C1192 - C31252 * C1258 + C31335 * C1196 -
             C92226 * C1262) *
                C92188) *
               C31251) *
              C92150 * C791 +
          (((C31252 * C880 - C31334 * C798 + C92226 * C4948 - C31335 * C4815) *
                C265 +
            (C31252 * C1260 - C31334 * C1194 + C92226 * C5517 -
             C31335 * C5417) *
                C92188) *
               C31249 +
           ((C31252 * C881 - C31334 * C799 + C92226 * C4949 - C31335 * C4814) *
                C265 +
            (C31252 * C1261 - C31334 * C1195 + C92226 * C5518 -
             C31335 * C5418) *
                C92188) *
               C31250 +
           ((C31252 * C882 - C31334 * C800 + C92226 * C6617 - C31335 * C6487) *
                C265 +
            (C31252 * C1262 - C31334 * C1196 + C92226 * C7281 -
             C31335 * C7173) *
                C92188) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C92136 * C97 +
          ((C36314 * C109 - C36258 * C184 + C36315 * C796 - C36259 * C877 +
            C36316 * C799 - C36260 * C881 + C36317 * C4814 - C36261 * C4949) *
               C265 +
           (C36314 * C568 - C36258 * C630 + C36315 * C1191 - C36259 * C1257 +
            C36316 * C1195 - C36260 * C1261 + C36317 * C5418 - C36261 * C5518) *
               C92188) *
              C92097 * C92150 * C92136 * C98 +
          ((C36258 * C185 - C36314 * C110 + C36259 * C878 - C36315 * C795 +
            C36260 * C882 - C36316 * C800 + C36261 * C6617 - C36317 * C6487) *
               C265 +
           (C36258 * C631 - C36314 * C569 + C36259 * C1258 - C36315 * C1192 +
            C36260 * C1262 - C36316 * C1196 + C36261 * C7281 - C36317 * C7173) *
               C92188) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C36258 * C183 - C36314 * C108 + C36259 * C876 - C36315 * C797 +
            C36260 * C880 - C36316 * C798 + C36261 * C4948 - C36317 * C4815) *
               C265 +
           (C36258 * C629 - C36314 * C567 + C36259 * C1256 - C36315 * C1190 +
            C36260 * C1260 - C36316 * C1194 + C36261 * C5517 - C36317 * C5417) *
               C92188) *
              C92097 * C92150 * C790 +
          ((C36314 * C797 - C36258 * C876 + C36315 * C798 - C36259 * C880 +
            C36316 * C4815 - C36260 * C4948 + C36317 * C4816 - C36261 * C4950) *
               C265 +
           (C36314 * C1190 - C36258 * C1256 + C36315 * C1194 - C36259 * C1260 +
            C36316 * C5417 - C36260 * C5517 + C36317 * C5419 - C36261 * C5519) *
               C92188) *
              C92097 * C92150 * C791 +
          ((C36258 * C880 - C36314 * C798 + C36259 * C4948 - C36315 * C4815 +
            C36260 * C4950 - C36316 * C4816 + C36261 * C36808 -
            C36317 * C36722) *
               C265 +
           (C36258 * C1260 - C36314 * C1194 + C36259 * C5517 - C36315 * C5417 +
            C36260 * C5519 - C36316 * C5419 + C36261 * C37169 -
            C36317 * C37101) *
               C92188) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C92136 * C97 -
          ((C31959 + C31960) * C31251 + (C31958 + C31957) * C31250 +
           (C31956 + C31955) * C31249) *
              C92150 * C92136 * C98 +
          (C31961 * C31249 + (C31960 + C31959) * C31250 +
           (C736 * C31252 +
            (C265 * C2123 - C701 * C1973 - C265 * C2432 + C92188 * C2573) *
                C92226) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C31252 +
            C5624 * C92226) *
               C31249 +
           (C31955 + C31956) * C31250 + C31961 * C31251) *
              C92150 * C790 -
          ((C4738 * C92226 + C2594 * C31252) * C31251 +
           (C4737 * C92226 + C2595 * C31252) * C31250 +
           (C5625 * C92226 + C5624 * C31252) * C31249) *
              C92150 * C791 +
          ((C5625 * C31252 + C5627 * C92226) * C31249 +
           (C4737 * C31252 + C5626 * C92226) * C31250 +
           (C4738 * C31252 +
            (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
                C92226) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C92136 * C97 -
          (C5626 * C36261 + C4737 * C36260 + C2595 * C36259 + C733 * C36258) *
              C92097 * C92150 * C92136 * C98 +
          (C734 * C36258 + C2594 * C36259 + C4738 * C36260 +
           (C265 * C6729 - C701 * C6487 - C265 * C7173 + C92188 * C7386) *
               C36261) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C265 * C266 - C701 * C108 - C265 * C567 + C92188 * C702) * C36258 +
           C5624 * C36259 + C5625 * C36260 + C5627 * C36261) *
              C92097 * C92150 * C790 -
          (C37228 * C36261 + C5627 * C36260 + C5625 * C36259 + C5624 * C36258) *
              C92097 * C92150 * C791 +
          (C5625 * C36258 + C5627 * C36259 + C37228 * C36260 +
           (C265 * C36860 - C701 * C36722 - C265 * C37101 + C92188 * C37220) *
               C36261) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C61039 +
             (C51645 + C51646) * C92252) *
                C92333 +
            ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
               C92150 * C1969 -
           (((C48935 + C48936) * C92252 + (C45595 + C45594) * C61039) * C92226 +
            (C55040 * C92252 + (C45593 + C45592) * C61039) * C92333) *
               C92150 * C1970) *
              C1971 +
          ((((C47035 + C47036) * C61039 + (C52613 + C52614) * C92252) * C92333 +
            ((C47037 + C47038) * C61039 +
             (C90121 * C5707 - C44796 * C5701 - C90121 * C5708 +
              C92320 * C5719 + C90114 * C7489 - C44798 * C7488 -
              C90114 * C7490 + C92102 * C7491) *
                 C92252) *
                C92226) *
               C92150 * C1970 -
           (((C52614 + C52613) * C92252 + (C47036 + C47035) * C61039) * C92226 +
            ((C53836 + C53835) * C92252 +
             (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
              C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                 C61039) *
                C92333) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C90121 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92320 +
             (C14783 - C14784 + C14785 - C14786) * C90114 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C61039 +
            ((C26712 - C26713 + C26714 - C26715) * C90121 +
             (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
             C28987 * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C90121 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C92320 +
             (C17038 - C17039 + C17040 - C17041) * C90114 +
             (C17042 - C17043 + C17044 - C17045) * C92102) *
                C61039 +
            ((C30196 - C30197 + C30198 - C30199) * C90121 +
             (C30200 - C30201 + C30202 - C30203) * C92320 +
             (C27750 - C27751 + C27752 - C27753) * C90114 +
             (C27754 - C27755 + C27756 - C27757) * C92102) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C90121 +
             (C14788 - C14787 + C14790 - C14789) * C92320 +
             (C14792 - C14791 + C14794 - C14793) * C90114 +
             (C14796 - C14795 + C14798 - C14797) * C92102) *
                C61039 +
            (C28988 * C90121 + C28989 * C92320 +
             (C18005 - C18006 + C18007 - C18008) * C90114 +
             (C18009 - C18010 + C18011 - C18012) * C92102) *
                C92252) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C90121 +
             (C17043 - C17042 + C17045 - C17044) * C92320 +
             (C17047 - C17046 + C17049 - C17048) * C90114 +
             (C17051 - C17050 + C17053 - C17052) * C92102) *
                C61039 +
            ((C27751 - C27750 + C27753 - C27752) * C90121 +
             (C27755 - C27754 + C27757 - C27756) * C92320 +
             (C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
              C14781 * C7488) *
                 C90114 +
             (C92333 * C3445 - C14780 * C3366 + C92226 * C7591 -
              C14781 * C7490) *
                 C92102) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C90121 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92320 +
             (C61192 - C61193 + C61194 - C61195) * C90114 +
             (C61196 - C61197 + C61198 - C61199) * C92102) *
                C92333 +
            ((C66843 - C66844 + C66845 - C66846) * C90121 +
             (C66847 - C66848 + C66849 - C66850) * C92320 + C77184 * C90114 +
             C77185 * C92102) *
                C92226) *
               C92150 * C1969 +
           (((C66844 - C66843 + C66846 - C66845) * C90121 +
             (C66848 - C66847 + C66850 - C66849) * C92320 + C77186 * C90114 +
             C77187 * C92102) *
                C92333 +
            ((C66852 - C66851 + C66854 - C66853) * C90121 +
             (C66856 - C66855 + C66858 - C66857) * C92320 +
             (C68427 - C68428 + C68429 - C68430) * C90114 +
             (C68431 - C68432 + C68433 - C68434) * C92102) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C90121 +
             (C61197 - C61196 + C61199 - C61198) * C92320 +
             (C61201 - C61200 + C61203 - C61202) * C90114 +
             (C61205 - C61204 + C61207 - C61206) * C92102) *
                C92333 +
            (C77186 * C90121 + C77187 * C92320 +
             (C63455 - C63456 + C63457 - C63458) * C90114 +
             (C63459 - C63460 + C63461 - C63462) * C92102) *
                C92226) *
               C92150 * C1969 +
           ((C77184 * C90121 + C77185 * C92320 +
             (C63456 - C63455 + C63458 - C63457) * C90114 +
             (C63460 - C63459 + C63462 - C63461) * C92102) *
                C92333 +
            ((C68428 - C68427 + C68430 - C68429) * C90121 +
             (C68432 - C68431 + C68434 - C68433) * C92320 +
             (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                 C90114 +
             (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
                 C92102) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C14780 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92333 +
             (C45829 - C45830 + C45831 - C45832) * C14781 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C61039 +
            ((C51945 - C51946 + C51947 - C51948) * C14780 +
             (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
             C55440 * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C14780 +
             (C45834 - C45833 + C45836 - C45835) * C92333 +
             (C45838 - C45837 + C45840 - C45839) * C14781 +
             (C45842 - C45841 + C45844 - C45843) * C92226) *
                C61039 +
            (C55441 * C14780 + C55442 * C92333 +
             (C49241 - C49242 + C49243 - C49244) * C14781 +
             (C49245 - C49246 + C49247 - C49248) * C92226) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C14780 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C92333 +
             (C47345 - C47346 + C47347 - C47348) * C14781 +
             (C47349 - C47350 + C47351 - C47352) * C92226) *
                C61039 +
            ((C54239 - C54240 + C54241 - C54242) * C14780 +
             (C54243 - C54244 + C54245 - C54246) * C92333 +
             (C53013 - C53014 + C53015 - C53016) * C14781 +
             (C53017 - C53018 + C53019 - C53020) * C92226) *
                C92252) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C14780 +
             (C47350 - C47349 + C47352 - C47351) * C92333 +
             (C47354 - C47353 + C47356 - C47355) * C14781 +
             (C47358 - C47357 + C47360 - C47359) * C92226) *
                C61039 +
            ((C53014 - C53013 + C53016 - C53015) * C14780 +
             (C53018 - C53017 + C53020 - C53019) * C92333 +
             (C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
              C90114 * C7488) *
                 C14781 +
             (C92320 * C5978 - C90121 * C5972 + C92102 * C7811 -
              C90114 * C7810) *
                 C92226) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C92320 +
             (C15075 + C15076) * C92102) *
                C61039 +
            ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
               C92150 * C1969 -
           (((C28180 + C28181) * C92102 + (C30627 + C30626) * C92320) * C92252 +
            ((C17388 + C17389) * C92102 +
             (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
              C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                 C92320) *
                C61039) *
               C92150 * C1970) *
              C1971 +
          ((((C17389 + C17388) * C92320 + (C17387 + C17386) * C92102) * C61039 +
            ((C28181 + C28180) * C92320 +
             (C14780 * C3441 - C15036 * C3359 - C14780 * C3589 +
              C92333 * C3663 + C14781 * C7590 - C15037 * C7488 -
              C14781 * C7810 + C92226 * C7910) *
                 C92102) *
                C92252) *
               C92150 * C1970 -
           (((C18335 + C18336) * C92102 + C29389 * C92320) * C92252 +
            ((C15078 + C15077) * C92102 + (C15076 + C15075) * C92320) *
                C61039) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C14780 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92333 +
             (C66843 - C66844 + C66845 - C66846) * C14781 +
             (C67098 - C67099 + C67100 - C67101) * C92226) *
                C92320 +
            ((C61192 - C61193 + C61194 - C61195) * C14780 +
             (C61444 - C61445 + C61446 - C61447) * C92333 + C77184 * C14781 +
             C77582 * C92226) *
                C92102) *
               C92150 * C1969 +
           (((C66844 - C66843 + C66846 - C66845) * C14780 +
             (C67099 - C67098 + C67101 - C67100) * C92333 +
             (C66852 - C66851 + C66854 - C66853) * C14781 +
             (C67103 - C67102 + C67105 - C67104) * C92226) *
                C92320 +
            (C77186 * C14780 + C77583 * C92333 +
             (C68427 - C68428 + C68429 - C68430) * C14781 +
             (C68729 - C68730 + C68731 - C68732) * C92226) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C14780 +
             (C61445 - C61444 + C61447 - C61446) * C92333 + C77186 * C14781 +
             C77583 * C92226) *
                C92320 +
            ((C61201 - C61200 + C61203 - C61202) * C14780 +
             (C61450 - C61449 + C61452 - C61451) * C92333 +
             (C63455 - C63456 + C63457 - C63458) * C14781 +
             (C63761 - C63762 + C63763 - C63764) * C92226) *
                C92102) *
               C92150 * C1969 +
           ((C77184 * C14780 + C77582 * C92333 +
             (C68428 - C68427 + C68430 - C68429) * C14781 +
             (C68730 - C68729 + C68732 - C68731) * C92226) *
                C92320 +
            ((C63456 - C63455 + C63458 - C63457) * C14780 +
             (C63762 - C63761 + C63764 - C63763) * C92333 +
             (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                 C14781 +
             (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 -
              C61190 * C7810) *
                 C92226) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C61189 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C61039 +
             (C51945 - C51946 + C51947 - C51948) * C61190 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C92333 +
            ((C45829 - C45830 + C45831 - C45832) * C61189 +
             (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
             C55837 * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C61189 +
             (C46082 - C46081 + C46084 - C46083) * C61039 + C55441 * C61190 +
             C55838 * C92252) *
                C92333 +
            ((C45838 - C45837 + C45840 - C45839) * C61189 +
             (C46087 - C46086 + C46089 - C46088) * C61039 +
             (C49241 - C49242 + C49243 - C49244) * C61190 +
             (C49547 - C49548 + C49549 - C49550) * C92252) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C61189 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C61039 +
             (C54239 - C54240 + C54241 - C54242) * C61190 +
             (C54639 - C54640 + C54641 - C54642) * C92252) *
                C92333 +
            ((C47345 - C47346 + C47347 - C47348) * C61189 +
             (C47676 - C47677 + C47678 - C47679) * C61039 +
             (C53013 - C53014 + C53015 - C53016) * C61190 +
             (C53425 - C53426 + C53427 - C53428) * C92252) *
                C92226) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C61189 +
             (C47677 - C47676 + C47679 - C47678) * C61039 +
             (C53014 - C53013 + C53016 - C53015) * C61190 +
             (C53426 - C53425 + C53428 - C53427) * C92252) *
                C92333 +
            ((C47354 - C47353 + C47356 - C47355) * C61189 +
             (C47681 - C47680 + C47683 - C47682) * C61039 +
             (C92320 * C5707 - C90121 * C5701 + C92102 * C7489 -
              C90114 * C7488) *
                 C61190 +
             (C92320 * C6224 - C90121 * C6218 + C92102 * C8134 -
              C90114 * C8133) *
                 C92252) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C61189 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C61039 +
             (C26712 - C26713 + C26714 - C26715) * C61190 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C92320 +
            ((C14783 - C14784 + C14785 - C14786) * C61189 +
             (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
             C29788 * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C61189 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C61039 +
             (C30196 - C30197 + C30198 - C30199) * C61190 +
             (C31028 - C31029 + C31030 - C31031) * C92252) *
                C92320 +
            ((C17038 - C17039 + C17040 - C17041) * C61189 +
             (C17691 - C17692 + C17693 - C17694) * C61039 +
             (C27750 - C27751 + C27752 - C27753) * C61190 +
             (C28582 - C28583 + C28584 - C28585) * C92252) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C61189 +
             (C15313 - C15312 + C15315 - C15314) * C61039 + C28988 * C61190 +
             C29789 * C92252) *
                C92320 +
            ((C14792 - C14791 + C14794 - C14793) * C61189 +
             (C15318 - C15317 + C15320 - C15319) * C61039 +
             (C18005 - C18006 + C18007 - C18008) * C61190 +
             (C18639 - C18640 + C18641 - C18642) * C92252) *
                C92102) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C61189 +
             (C17692 - C17691 + C17694 - C17693) * C61039 +
             (C27751 - C27750 + C27753 - C27752) * C61190 +
             (C28583 - C28582 + C28585 - C28584) * C92252) *
                C92320 +
            ((C17047 - C17046 + C17049 - C17048) * C61189 +
             (C17696 - C17695 + C17698 - C17697) * C61039 +
             (C92333 * C3441 - C14780 * C3359 + C92226 * C7590 -
              C14781 * C7488) *
                 C61190 +
             (C92333 * C3877 - C14780 * C3803 + C92226 * C8233 -
              C14781 * C8133) *
                 C92252) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
              C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C67378 + C67379) * C92226) *
                C92320 +
            ((C61729 + C61730) * C92333 + C77974 * C92226) * C92102) *
               C92150 * C1969 -
           (((C69040 + C69039) * C92226 + C77975 * C92333) * C92102 +
            ((C67381 + C67380) * C92226 + (C67379 + C67378) * C92333) *
                C92320) *
               C92150 * C1970) *
              C1971 +
          (((C77974 * C92333 + (C69039 + C69040) * C92226) * C92320 +
            ((C64084 + C64083) * C92333 +
             (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
              C61190 * C7702 - C61691 * C7488 - C61190 * C8133 +
              C92252 * C8338) *
                 C92226) *
                C92102) *
               C92150 * C1970 -
           (((C64083 + C64084) * C92226 + (C61732 + C61731) * C92333) * C92102 +
            (C77975 * C92226 + (C61730 + C61729) * C92333) * C92320) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C61039 +
             (C51645 + C51646) * C92252) *
                C92333 +
            ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
               C2664 -
           (((C51647 + C51648) * C92252 + C55040 * C61039) * C92226 +
            ((C51649 + C51650) * C92252 + (C51646 + C51645) * C61039) *
                C92333) *
               C2665) *
              C1969 +
          (((C55039 * C61039 + (C51648 + C51647) * C92252) * C92333 +
            ((C48936 + C48935) * C61039 +
             (C90121 * C5715 - C44796 * C5705 - C90121 * C5716 +
              C92320 * C5723 + C90114 * C5717 - C44798 * C5706 -
              C90114 * C5718 + C92102 * C5724) *
                 C92252) *
                C92226) *
               C2665 -
           (((C48935 + C48936) * C92252 + (C45595 + C45594) * C61039) * C92226 +
            (C55040 * C92252 + (C45593 + C45592) * C61039) * C92333) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C90121 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92320 +
             (C14783 - C14784 + C14785 - C14786) * C90114 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C61039 +
            ((C26712 - C26713 + C26714 - C26715) * C90121 +
             (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
             C28987 * C92102) *
                C92252) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C90121 +
             (C26717 - C26716 + C26719 - C26718) * C92320 + C28988 * C90114 +
             C28989 * C92102) *
                C61039 +
            ((C26720 - C26721 + C26722 - C26723) * C90121 +
             (C26724 - C26725 + C26726 - C26727) * C92320 +
             (C26728 - C26729 + C26730 - C26731) * C90114 +
             (C26732 - C26733 + C26734 - C26735) * C92102) *
                C92252) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C90121 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C92320 +
             (C17038 - C17039 + C17040 - C17041) * C90114 +
             (C17042 - C17043 + C17044 - C17045) * C92102) *
                C61039 +
            ((C30196 - C30197 + C30198 - C30199) * C90121 +
             (C30200 - C30201 + C30202 - C30203) * C92320 +
             (C27750 - C27751 + C27752 - C27753) * C90114 +
             (C27754 - C27755 + C27756 - C27757) * C92102) *
                C92252) *
               C2664 +
           (((C30197 - C30196 + C30199 - C30198) * C90121 +
             (C30201 - C30200 + C30203 - C30202) * C92320 +
             (C27751 - C27750 + C27753 - C27752) * C90114 +
             (C27755 - C27754 + C27757 - C27756) * C92102) *
                C61039 +
            ((C92333 * C5801 - C14780 * C5703 + C92226 * C5802 -
              C14781 * C5705) *
                 C90121 +
             (C92333 * C5807 - C14780 * C5712 + C92226 * C5808 -
              C14781 * C5716) *
                 C92320 +
             (C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
              C14781 * C5706) *
                 C90114 +
             (C92333 * C5809 - C14780 * C5714 + C92226 * C5810 -
              C14781 * C5718) *
                 C92102) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C90121 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92320 +
             (C61192 - C61193 + C61194 - C61195) * C90114 +
             (C61196 - C61197 + C61198 - C61199) * C92102) *
                C92333 +
            ((C66843 - C66844 + C66845 - C66846) * C90121 +
             (C66847 - C66848 + C66849 - C66850) * C92320 + C77184 * C90114 +
             C77185 * C92102) *
                C92226) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C90121 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92320 +
             (C64402 - C64403 + C64404 - C64405) * C90114 +
             (C64406 - C64407 + C64408 - C64409) * C92102) *
                C92333 +
            ((C70233 - C70234 + C70235 - C70236) * C90121 +
             (C70237 - C70238 + C70239 - C70240) * C92320 +
             (C78366 - C78367 + C78368 - C78369) * C90114 +
             (C78370 - C78371 + C78372 - C78373) * C92102) *
                C92226) *
               C2665) *
              C1969 +
          ((((C66844 - C66843 + C66846 - C66845) * C90121 +
             (C66848 - C66847 + C66850 - C66849) * C92320 + C77186 * C90114 +
             C77187 * C92102) *
                C92333 +
            ((C66852 - C66851 + C66854 - C66853) * C90121 +
             (C66856 - C66855 + C66858 - C66857) * C92320 +
             (C68427 - C68428 + C68429 - C68430) * C90114 +
             (C68431 - C68432 + C68433 - C68434) * C92102) *
                C92226) *
               C2664 +
           (((C70234 - C70233 + C70236 - C70235) * C90121 +
             (C70238 - C70237 + C70240 - C70239) * C92320 +
             (C78367 - C78366 + C78369 - C78368) * C90114 +
             (C78371 - C78370 + C78373 - C78372) * C92102) *
                C92333 +
            ((C70242 - C70241 + C70244 - C70243) * C90121 +
             (C70246 - C70245 + C70248 - C70247) * C92320 +
             (C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
              C61190 * C5706) *
                 C90114 +
             (C61039 * C5892 - C61189 * C5708 + C92252 * C5896 -
              C61190 * C5718) *
                 C92102) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C14780 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92333 +
             (C45829 - C45830 + C45831 - C45832) * C14781 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C61039 +
            ((C51945 - C51946 + C51947 - C51948) * C14780 +
             (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
             C55440 * C92226) *
                C92252) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C14780 +
             (C51950 - C51949 + C51952 - C51951) * C92333 + C55441 * C14781 +
             C55442 * C92226) *
                C61039 +
            ((C51953 - C51954 + C51955 - C51956) * C14780 +
             (C51957 - C51958 + C51959 - C51960) * C92333 +
             (C51961 - C51962 + C51963 - C51964) * C14781 +
             (C51965 - C51966 + C51967 - C51968) * C92226) *
                C92252) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C14780 +
             (C45834 - C45833 + C45836 - C45835) * C92333 +
             (C45838 - C45837 + C45840 - C45839) * C14781 +
             (C45842 - C45841 + C45844 - C45843) * C92226) *
                C61039 +
            (C55441 * C14780 + C55442 * C92333 +
             (C49241 - C49242 + C49243 - C49244) * C14781 +
             (C49245 - C49246 + C49247 - C49248) * C92226) *
                C92252) *
               C2664 +
           ((C55439 * C14780 + C55440 * C92333 +
             (C49242 - C49241 + C49244 - C49243) * C14781 +
             (C49246 - C49245 + C49248 - C49247) * C92226) *
                C61039 +
            ((C51962 - C51961 + C51964 - C51963) * C14780 +
             (C51966 - C51965 + C51968 - C51967) * C92333 +
             (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
              C90114 * C5706) *
                 C14781 +
             (C92320 * C5981 - C90121 * C5975 + C92102 * C5982 -
              C90114 * C5976) *
                 C92226) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C92320 +
             (C15075 + C15076) * C92102) *
                C61039 +
            ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
               C2664 -
           (((C27068 + C27069) * C92102 + (C27070 + C27071) * C92320) * C92252 +
            (C29389 * C92102 + (C27067 + C27066) * C92320) * C61039) *
               C2665) *
              C1969 +
          ((((C30626 + C30627) * C92320 + (C28181 + C28180) * C92102) * C61039 +
            ((C14780 * C5801 - C15036 * C5703 - C14780 * C5973 +
              C92333 * C6059 + C14781 * C5802 - C15037 * C5705 -
              C14781 * C5975 + C92226 * C6060) *
                 C92320 +
             (C14780 * C5803 - C15036 * C5704 - C14780 * C5974 +
              C92333 * C6061 + C14781 * C5804 - C15037 * C5706 -
              C14781 * C5976 + C92226 * C6062) *
                 C92102) *
                C92252) *
               C2665 -
           (((C28180 + C28181) * C92102 + (C30627 + C30626) * C92320) * C92252 +
            ((C17388 + C17389) * C92102 +
             (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
              C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                 C92320) *
                C61039) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C14780 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92333 +
             (C66843 - C66844 + C66845 - C66846) * C14781 +
             (C67098 - C67099 + C67100 - C67101) * C92226) *
                C92320 +
            ((C61192 - C61193 + C61194 - C61195) * C14780 +
             (C61444 - C61445 + C61446 - C61447) * C92333 + C77184 * C14781 +
             C77582 * C92226) *
                C92102) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C14780 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92333 +
             (C70233 - C70234 + C70235 - C70236) * C14781 +
             (C70564 - C70565 + C70566 - C70567) * C92226) *
                C92320 +
            ((C64402 - C64403 + C64404 - C64405) * C14780 +
             (C64727 - C64728 + C64729 - C64730) * C92333 +
             (C78366 - C78367 + C78368 - C78369) * C14781 +
             (C78764 - C78765 + C78766 - C78767) * C92226) *
                C92102) *
               C2665) *
              C1969 +
          ((((C66844 - C66843 + C66846 - C66845) * C14780 +
             (C67099 - C67098 + C67101 - C67100) * C92333 +
             (C66852 - C66851 + C66854 - C66853) * C14781 +
             (C67103 - C67102 + C67105 - C67104) * C92226) *
                C92320 +
            (C77186 * C14780 + C77583 * C92333 +
             (C68427 - C68428 + C68429 - C68430) * C14781 +
             (C68729 - C68730 + C68731 - C68732) * C92226) *
                C92102) *
               C2664 +
           (((C70234 - C70233 + C70236 - C70235) * C14780 +
             (C70565 - C70564 + C70567 - C70566) * C92333 +
             (C70242 - C70241 + C70244 - C70243) * C14781 +
             (C70569 - C70568 + C70571 - C70570) * C92226) *
                C92320 +
            ((C78367 - C78366 + C78369 - C78368) * C14780 +
             (C78765 - C78764 + C78767 - C78766) * C92333 +
             (C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
              C61190 * C5706) *
                 C14781 +
             (C61039 * C6138 - C61189 * C5972 + C92252 * C6142 -
              C61190 * C5976) *
                 C92226) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C61189 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C61039 +
             (C51945 - C51946 + C51947 - C51948) * C61190 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C92333 +
            ((C45829 - C45830 + C45831 - C45832) * C61189 +
             (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
             C55837 * C92252) *
                C92226) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C61189 +
             (C52264 - C52263 + C52266 - C52265) * C61039 +
             (C51953 - C51954 + C51955 - C51956) * C61190 +
             (C52267 - C52268 + C52269 - C52270) * C92252) *
                C92333 +
            (C55441 * C61189 + C55838 * C61039 +
             (C51961 - C51962 + C51963 - C51964) * C61190 +
             (C52271 - C52272 + C52273 - C52274) * C92252) *
                C92226) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C61189 +
             (C46082 - C46081 + C46084 - C46083) * C61039 + C55441 * C61190 +
             C55838 * C92252) *
                C92333 +
            ((C45838 - C45837 + C45840 - C45839) * C61189 +
             (C46087 - C46086 + C46089 - C46088) * C61039 +
             (C49241 - C49242 + C49243 - C49244) * C61190 +
             (C49547 - C49548 + C49549 - C49550) * C92252) *
                C92226) *
               C2664 +
           ((C55439 * C61189 + C55837 * C61039 +
             (C51962 - C51961 + C51964 - C51963) * C61190 +
             (C52272 - C52271 + C52274 - C52273) * C92252) *
                C92333 +
            ((C49242 - C49241 + C49244 - C49243) * C61189 +
             (C49548 - C49547 + C49550 - C49549) * C61039 +
             (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
              C90114 * C5706) *
                 C61190 +
             (C92320 * C6227 - C90121 * C6221 + C92102 * C6228 -
              C90114 * C6222) *
                 C92252) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C61189 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C61039 +
             (C26712 - C26713 + C26714 - C26715) * C61190 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C92320 +
            ((C14783 - C14784 + C14785 - C14786) * C61189 +
             (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
             C29788 * C92252) *
                C92102) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C61189 +
             (C27367 - C27366 + C27369 - C27368) * C61039 +
             (C26720 - C26721 + C26722 - C26723) * C61190 +
             (C27370 - C27371 + C27372 - C27373) * C92252) *
                C92320 +
            (C28988 * C61189 + C29789 * C61039 +
             (C26728 - C26729 + C26730 - C26731) * C61190 +
             (C27374 - C27375 + C27376 - C27377) * C92252) *
                C92102) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C61189 +
             (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
              C92226 * C1260) *
                 C61039 +
             (C30196 - C30197 + C30198 - C30199) * C61190 +
             (C31028 - C31029 + C31030 - C31031) * C92252) *
                C92320 +
            ((C17038 - C17039 + C17040 - C17041) * C61189 +
             (C17691 - C17692 + C17693 - C17694) * C61039 +
             (C27750 - C27751 + C27752 - C27753) * C61190 +
             (C28582 - C28583 + C28584 - C28585) * C92252) *
                C92102) *
               C2664 +
           (((C30197 - C30196 + C30199 - C30198) * C61189 +
             (C31029 - C31028 + C31031 - C31030) * C61039 +
             (C92333 * C5801 - C14780 * C5703 + C92226 * C5802 -
              C14781 * C5705) *
                 C61190 +
             (C92333 * C6305 - C14780 * C6219 + C92226 * C6306 -
              C14781 * C6221) *
                 C92252) *
                C92320 +
            ((C27751 - C27750 + C27753 - C27752) * C61189 +
             (C28583 - C28582 + C28585 - C28584) * C61039 +
             (C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
              C14781 * C5706) *
                 C61190 +
             (C92333 * C6307 - C14780 * C6220 + C92226 * C6308 -
              C14781 * C6222) *
                 C92252) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
              C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C67378 + C67379) * C92226) *
                C92320 +
            ((C61729 + C61730) * C92333 + C77974 * C92226) * C92102) *
               C2664 -
           (((C79170 + C79171) * C92226 + (C65061 + C65062) * C92333) * C92102 +
            ((C70898 + C70899) * C92226 +
             (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 +
              C92252 * C1899 + C61189 * C1523 - C61690 * C1378 -
              C61189 * C1771 + C61039 * C1898) *
                 C92333) *
                C92320) *
               C2665) *
              C1969 +
          ((((C70899 + C70898) * C92333 + (C70897 + C70896) * C92226) * C92320 +
            ((C79171 + C79170) * C92333 +
             (C61189 * C5886 - C61690 * C5701 - C61189 * C6218 +
              C61039 * C6383 + C61190 * C5890 - C61691 * C5706 -
              C61190 * C6222 + C92252 * C6388) *
                 C92226) *
                C92102) *
               C2665 -
           (((C69040 + C69039) * C92226 + C77975 * C92333) * C92102 +
            ((C67381 + C67380) * C92226 + (C67379 + C67378) * C92333) *
                C92320) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C61039 +
            (C51645 + C51646) * C92252) *
               C92333 +
           ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
              C92150 * C790 -
          (((C48935 + C48936) * C92252 + (C45595 + C45594) * C61039) * C92226 +
           (C55040 * C92252 + (C45593 + C45592) * C61039) * C92333) *
              C92150 * C791 +
          ((C45598 * C61039 + (C48936 + C48935) * C92252) * C92333 +
           ((C45597 + C45596) * C61039 +
            (C90121 * C8456 - C44796 * C8454 - C90121 * C8457 + C92320 * C8460 +
             C90114 * C8458 - C44798 * C8455 - C90114 * C8459 +
             C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C61039 +
            (C51645 + C51646) * C92252) *
               C92333 +
           ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C52614 + C52613) * C92252 + (C47036 + C47035) * C61039) * C92226 +
           ((C53836 + C53835) * C92252 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C61039) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
             C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
                C61039 +
            (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
             C90114 * C1383 - C44798 * C1375 - C90114 * C1384 +
             C92102 * C1399) *
                C92252) *
               C92333 +
           ((C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
             C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
                C61039 +
            (C90121 * C3365 - C44796 * C3359 - C90121 * C3366 + C92320 * C3371 +
             C90114 * C3367 - C44798 * C3360 - C90114 * C3368 +
             C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C61039 +
            (C51645 + C51646) * C92252) *
               C92333 +
           ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
              C1372 -
          (((C51647 + C51648) * C92252 + C55040 * C61039) * C92226 +
           ((C51649 + C51650) * C92252 + (C51646 + C51645) * C61039) * C92333) *
              C1373 +
          (((C51650 + C51649) * C61039 +
            (C90121 * C10873 - C44796 * C10868 - C90121 * C10874 +
             C92320 * C10880 + C90114 * C10871 - C44798 * C10867 -
             C90114 * C10872 + C92102 * C10879) *
                C92252) *
               C92333 +
           ((C51648 + C51647) * C61039 +
            (C90121 * C13751 - C44796 * C13749 - C90121 * C13752 +
             C92320 * C13755 + C90114 * C13753 - C44798 * C13750 -
             C90114 * C13754 + C92102 * C13756) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C90121 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92320 +
            (C14783 - C14784 + C14785 - C14786) * C90114 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C61039 +
           ((C26712 - C26713 + C26714 - C26715) * C90121 +
            (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
            C28987 * C92102) *
               C92252) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C90121 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92320 +
            (C17038 - C17039 + C17040 - C17041) * C90114 +
            (C17042 - C17043 + C17044 - C17045) * C92102) *
               C61039 +
           ((C30196 - C30197 + C30198 - C30199) * C90121 +
            (C30200 - C30201 + C30202 - C30203) * C92320 +
            (C27750 - C27751 + C27752 - C27753) * C90114 +
            (C27754 - C27755 + C27756 - C27757) * C92102) *
               C92252) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C90121 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C92320 +
            (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C90114 +
            (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
                C92102) *
               C61039 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C90121 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C92320 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C90114 +
            (C92333 * C5806 - C14780 * C5708 + C92226 * C8591 -
             C14781 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C90121 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92320 +
            (C14783 - C14784 + C14785 - C14786) * C90114 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C61039 +
           ((C26712 - C26713 + C26714 - C26715) * C90121 +
            (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
            C28987 * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C90121 +
            (C14788 - C14787 + C14790 - C14789) * C92320 +
            (C14792 - C14791 + C14794 - C14793) * C90114 +
            (C14796 - C14795 + C14798 - C14797) * C92102) *
               C61039 +
           (C28988 * C90121 + C28989 * C92320 +
            (C18005 - C18006 + C18007 - C18008) * C90114 +
            (C18009 - C18010 + C18011 - C18012) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C14811 * C90121 + C14812 * C92320 +
            (C14800 - C14799 + C14802 - C14801) * C90114 +
            (C14804 - C14803 + C14806 - C14805) * C92102) *
               C61039 +
           ((C18006 - C18005 + C18008 - C18007) * C90121 +
            (C18010 - C18009 + C18012 - C18011) * C92320 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C90114 +
            (C92333 * C1468 - C14780 * C1384 + C92226 * C3446 -
             C14781 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C90121 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92320 +
            (C14783 - C14784 + C14785 - C14786) * C90114 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C61039 +
           ((C26712 - C26713 + C26714 - C26715) * C90121 +
            (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
            C28987 * C92102) *
               C92252) *
              C1372 +
          (((C26713 - C26712 + C26715 - C26714) * C90121 +
            (C26717 - C26716 + C26719 - C26718) * C92320 + C28988 * C90114 +
            C28989 * C92102) *
               C61039 +
           ((C26720 - C26721 + C26722 - C26723) * C90121 +
            (C26724 - C26725 + C26726 - C26727) * C92320 +
            (C26728 - C26729 + C26730 - C26731) * C90114 +
            (C26732 - C26733 + C26734 - C26735) * C92102) *
               C92252) *
              C1373 +
          (((C26721 - C26720 + C26723 - C26722) * C90121 +
            (C26725 - C26724 + C26727 - C26726) * C92320 +
            (C26729 - C26728 + C26731 - C26730) * C90114 +
            (C26733 - C26732 + C26735 - C26734) * C92102) *
               C61039 +
           ((C92333 * C11000 - C14780 * C10868 + C92226 * C13869 -
             C14781 * C13749) *
                C90121 +
            (C92333 * C11004 - C14780 * C10874 + C92226 * C13871 -
             C14781 * C13752) *
                C92320 +
            (C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
             C14781 * C13750) *
                C90114 +
            (C92333 * C11005 - C14780 * C10872 + C92226 * C13872 -
             C14781 * C13754) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C90121 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92320 +
            (C61192 - C61193 + C61194 - C61195) * C90114 +
            (C61196 - C61197 + C61198 - C61199) * C92102) *
               C92333 +
           ((C66843 - C66844 + C66845 - C66846) * C90121 +
            (C66847 - C66848 + C66849 - C66850) * C92320 +
            (C63448 - C63447 + C63450 - C63449) * C90114 +
            (C63452 - C63451 + C63454 - C63453) * C92102) *
               C92226) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C90121 +
            (C66848 - C66847 + C66850 - C66849) * C92320 +
            (C63447 - C63448 + C63449 - C63450) * C90114 +
            (C63451 - C63452 + C63453 - C63454) * C92102) *
               C92333 +
           ((C66852 - C66851 + C66854 - C66853) * C90121 +
            (C66856 - C66855 + C66858 - C66857) * C92320 +
            (C68427 - C68428 + C68429 - C68430) * C90114 +
            (C68431 - C68432 + C68433 - C68434) * C92102) *
               C92226) *
              C92150 * C791 +
          ((C66871 * C90121 + C66872 * C92320 +
            (C68428 - C68427 + C68430 - C68429) * C90114 +
            (C68432 - C68431 + C68434 - C68433) * C92102) *
               C92333 +
           ((C66860 - C66859 + C66862 - C66861) * C90121 +
            (C66864 - C66863 + C66866 - C66865) * C92320 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C90114 +
            (C61039 * C5035 - C61189 * C4819 + C92252 * C8693 -
             C61190 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C90121 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92320 +
            (C61192 - C61193 + C61194 - C61195) * C90114 +
            (C61196 - C61197 + C61198 - C61199) * C92102) *
               C92333 +
           ((C66843 - C66844 + C66845 - C66846) * C90121 +
            (C66847 - C66848 + C66849 - C66850) * C92320 +
            (C63448 - C63447 + C63450 - C63449) * C90114 +
            (C63452 - C63451 + C63454 - C63453) * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C90121 +
            (C61197 - C61196 + C61199 - C61198) * C92320 +
            (C61201 - C61200 + C61203 - C61202) * C90114 +
            (C61205 - C61204 + C61207 - C61206) * C92102) *
               C92333 +
           ((C63447 - C63448 + C63449 - C63450) * C90121 +
            (C63451 - C63452 + C63453 - C63454) * C92320 +
            (C63455 - C63456 + C63457 - C63458) * C90114 +
            (C63459 - C63460 + C63461 - C63462) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C61220 * C90121 + C61221 * C92320 +
            (C61209 - C61208 + C61211 - C61210) * C90114 +
            (C61213 - C61212 + C61215 - C61214) * C92102) *
               C92333 +
           ((C63456 - C63455 + C63458 - C63457) * C90121 +
            (C63460 - C63459 + C63462 - C63461) * C92320 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C90114 +
            (C61039 * C953 - C61189 * C803 + C92252 * C3520 - C61190 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C90121 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92320 +
            (C61192 - C61193 + C61194 - C61195) * C90114 +
            (C61196 - C61197 + C61198 - C61199) * C92102) *
               C92333 +
           ((C66843 - C66844 + C66845 - C66846) * C90121 +
            (C66847 - C66848 + C66849 - C66850) * C92320 +
            (C63448 - C63447 + C63450 - C63449) * C90114 +
            (C63452 - C63451 + C63454 - C63453) * C92102) *
               C92226) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C90121 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C92320 +
            (C64402 - C64403 + C64404 - C64405) * C90114 +
            (C64406 - C64407 + C64408 - C64409) * C92102) *
               C92333 +
           ((C70233 - C70234 + C70235 - C70236) * C90121 +
            (C70237 - C70238 + C70239 - C70240) * C92320 +
            (C61189 * C3358 - C61039 * C3514 + C61190 * C5704 -
             C92252 * C5888) *
                C90114 +
            (C61189 * C3364 - C61039 * C3518 + C61190 * C5714 -
             C92252 * C5894) *
                C92102) *
               C92226) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C90121 +
            (C61039 * C1535 - C61189 * C1392 + C92252 * C11113 -
             C61190 * C10874) *
                C92320 +
            (C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
             C61190 * C10867) *
                C90114 +
            (C61039 * C1536 - C61189 * C1394 + C92252 * C11114 -
             C61190 * C10872) *
                C92102) *
               C92333 +
           ((C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
             C61190 * C13749) *
                C90121 +
            (C61039 * C5893 - C61189 * C5712 + C92252 * C13981 -
             C61190 * C13752) *
                C92320 +
            (C61039 * C5888 - C61189 * C5704 + C92252 * C13980 -
             C61190 * C13750) *
                C90114 +
            (C61039 * C5894 - C61189 * C5714 + C92252 * C13982 -
             C61190 * C13754) *
                C92102) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C14780 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92333 +
            (C45829 - C45830 + C45831 - C45832) * C14781 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C61039 +
           ((C51945 - C51946 + C51947 - C51948) * C14780 +
            (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
            C55440 * C92226) *
               C92252) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C14780 +
            (C45834 - C45833 + C45836 - C45835) * C92333 +
            (C45838 - C45837 + C45840 - C45839) * C14781 +
            (C45842 - C45841 + C45844 - C45843) * C92226) *
               C61039 +
           (C55441 * C14780 + C55442 * C92333 +
            (C49241 - C49242 + C49243 - C49244) * C14781 +
            (C49245 - C49246 + C49247 - C49248) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C45857 * C14780 + C45858 * C92333 +
            (C45846 - C45845 + C45848 - C45847) * C14781 +
            (C45850 - C45849 + C45852 - C45851) * C92226) *
               C61039 +
           ((C49242 - C49241 + C49244 - C49243) * C14780 +
            (C49246 - C49245 + C49248 - C49247) * C92333 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C14781 +
            (C92320 * C8802 - C90121 * C8800 + C92102 * C8803 -
             C90114 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C14780 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92333 +
            (C45829 - C45830 + C45831 - C45832) * C14781 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C61039 +
           ((C51945 - C51946 + C51947 - C51948) * C14780 +
            (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
            C55440 * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C14780 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92333 +
            (C47345 - C47346 + C47347 - C47348) * C14781 +
            (C47349 - C47350 + C47351 - C47352) * C92226) *
               C61039 +
           ((C54239 - C54240 + C54241 - C54242) * C14780 +
            (C54243 - C54244 + C54245 - C54246) * C92333 +
            (C53013 - C53014 + C53015 - C53016) * C14781 +
            (C53017 - C53018 + C53019 - C53020) * C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C14780 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C92333 +
            (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C14781 +
            (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 -
             C90114 * C1011) *
                C92226) *
               C61039 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C14780 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C92333 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C14781 +
            (C92320 * C3593 - C90121 * C3589 + C92102 * C3594 -
             C90114 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C14780 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92333 +
            (C45829 - C45830 + C45831 - C45832) * C14781 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C61039 +
           ((C51945 - C51946 + C51947 - C51948) * C14780 +
            (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
            C55440 * C92226) *
               C92252) *
              C1372 +
          (((C51946 - C51945 + C51948 - C51947) * C14780 +
            (C51950 - C51949 + C51952 - C51951) * C92333 + C55441 * C14781 +
            C55442 * C92226) *
               C61039 +
           ((C51953 - C51954 + C51955 - C51956) * C14780 +
            (C51957 - C51958 + C51959 - C51960) * C92333 +
            (C51961 - C51962 + C51963 - C51964) * C14781 +
            (C51965 - C51966 + C51967 - C51968) * C92226) *
               C92252) *
              C1373 +
          (((C51954 - C51953 + C51956 - C51955) * C14780 +
            (C51958 - C51957 + C51960 - C51959) * C92333 +
            (C51962 - C51961 + C51964 - C51963) * C14781 +
            (C51966 - C51965 + C51968 - C51967) * C92226) *
               C61039 +
           ((C92320 * C10873 - C90121 * C10868 + C92102 * C10871 -
             C90114 * C10867) *
                C14780 +
            (C92320 * C11195 - C90121 * C11191 + C92102 * C11196 -
             C90114 * C11192) *
                C92333 +
            (C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
             C90114 * C13750) *
                C14781 +
            (C92320 * C14083 - C90121 * C14081 + C92102 * C14084 -
             C90114 * C14082) *
                C92226) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92320 +
            (C15075 + C15076) * C92102) *
               C61039 +
           ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
              C92150 * C790 -
          (((C28180 + C28181) * C92102 + (C30627 + C30626) * C92320) * C92252 +
           ((C17388 + C17389) * C92102 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92320) *
               C61039) *
              C92150 * C791 +
          (((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
             C14781 * C4948 - C15037 * C4815 - C14781 * C5139 +
             C92226 * C5252) *
                C92320 +
            (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
             C14781 * C4949 - C15037 * C4814 - C14781 * C5140 +
             C92226 * C5251) *
                C92102) *
               C61039 +
           ((C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
             C14781 * C8588 - C15037 * C8454 - C14781 * C8800 +
             C92226 * C8918) *
                C92320 +
            (C14780 * C5800 - C15036 * C5701 - C14780 * C5972 + C92333 * C6057 +
             C14781 * C8589 - C15037 * C8455 - C14781 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92320 +
            (C15075 + C15076) * C92102) *
               C61039 +
           ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
              C92150 * C92136 * C97 -
          (((C18335 + C18336) * C92102 + C29389 * C92320) * C92252 +
           ((C15078 + C15077) * C92102 + (C15076 + C15075) * C92320) * C61039) *
              C92150 * C92136 * C98 +
          ((C15081 * C92320 + (C15080 + C15079) * C92102) * C61039 +
           ((C18336 + C18335) * C92320 +
            (C14780 * C1460 - C15036 * C1375 - C14780 * C1592 + C92333 * C1655 +
             C14781 * C3442 - C15037 * C3360 - C14781 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92320 +
            (C15075 + C15076) * C92102) *
               C61039 +
           ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
              C1372 -
          (((C27068 + C27069) * C92102 + (C27070 + C27071) * C92320) * C92252 +
           (C29389 * C92102 + (C27067 + C27066) * C92320) * C61039) *
              C1373 +
          (((C27071 + C27070) * C92320 + (C27069 + C27068) * C92102) * C61039 +
           ((C14780 * C11000 - C15036 * C10868 - C14780 * C11191 +
             C92333 * C11307 + C14781 * C13869 - C15037 * C13749 -
             C14781 * C14081 + C92226 * C14191) *
                C92320 +
            (C14780 * C11001 - C15036 * C10867 - C14780 * C11192 +
             C92333 * C11306 + C14781 * C13870 - C15037 * C13750 -
             C14781 * C14082 + C92226 * C14192) *
                C92102) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C14780 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92333 +
            (C66843 - C66844 + C66845 - C66846) * C14781 +
            (C67098 - C67099 + C67100 - C67101) * C92226) *
               C92320 +
           ((C61192 - C61193 + C61194 - C61195) * C14780 +
            (C61444 - C61445 + C61446 - C61447) * C92333 +
            (C63448 - C63447 + C63450 - C63449) * C14781 +
            (C63758 - C63757 + C63760 - C63759) * C92226) *
               C92102) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C14780 +
            (C67099 - C67098 + C67101 - C67100) * C92333 +
            (C66852 - C66851 + C66854 - C66853) * C14781 +
            (C67103 - C67102 + C67105 - C67104) * C92226) *
               C92320 +
           ((C63447 - C63448 + C63449 - C63450) * C14780 +
            (C63757 - C63758 + C63759 - C63760) * C92333 +
            (C68427 - C68428 + C68429 - C68430) * C14781 +
            (C68729 - C68730 + C68731 - C68732) * C92226) *
               C92102) *
              C92150 * C791 +
          ((C66871 * C14780 + C67112 * C92333 +
            (C66860 - C66859 + C66862 - C66861) * C14781 +
            (C67107 - C67106 + C67109 - C67108) * C92226) *
               C92320 +
           ((C68428 - C68427 + C68430 - C68429) * C14780 +
            (C68730 - C68729 + C68732 - C68731) * C92333 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C14781 +
            (C61039 * C5330 - C61189 * C5140 + C92252 * C9019 -
             C61190 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C14780 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92333 +
            (C66843 - C66844 + C66845 - C66846) * C14781 +
            (C67098 - C67099 + C67100 - C67101) * C92226) *
               C92320 +
           ((C61192 - C61193 + C61194 - C61195) * C14780 +
            (C61444 - C61445 + C61446 - C61447) * C92333 +
            (C63448 - C63447 + C63450 - C63449) * C14781 +
            (C63758 - C63757 + C63760 - C63759) * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C14780 +
            (C61445 - C61444 + C61447 - C61446) * C92333 +
            (C63447 - C63448 + C63449 - C63450) * C14781 +
            (C63757 - C63758 + C63759 - C63760) * C92226) *
               C92320 +
           ((C61201 - C61200 + C61203 - C61202) * C14780 +
            (C61450 - C61449 + C61452 - C61451) * C92333 +
            (C63455 - C63456 + C63457 - C63458) * C14781 +
            (C63761 - C63762 + C63763 - C63764) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C61220 * C14780 + C61459 * C92333 +
            (C63456 - C63455 + C63458 - C63457) * C14781 +
            (C63762 - C63761 + C63764 - C63763) * C92226) *
               C92320 +
           ((C61209 - C61208 + C61211 - C61210) * C14780 +
            (C61454 - C61453 + C61456 - C61455) * C92333 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C14781 +
            (C61039 * C1135 - C61189 * C1011 + C92252 * C3734 -
             C61190 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C14780 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92333 +
            (C66843 - C66844 + C66845 - C66846) * C14781 +
            (C67098 - C67099 + C67100 - C67101) * C92226) *
               C92320 +
           ((C61192 - C61193 + C61194 - C61195) * C14780 +
            (C61444 - C61445 + C61446 - C61447) * C92333 +
            (C63448 - C63447 + C63450 - C63449) * C14781 +
            (C63758 - C63757 + C63760 - C63759) * C92226) *
               C92102) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C14780 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C92333 +
            (C70233 - C70234 + C70235 - C70236) * C14781 +
            (C70564 - C70565 + C70566 - C70567) * C92226) *
               C92320 +
           ((C64402 - C64403 + C64404 - C64405) * C14780 +
            (C64727 - C64728 + C64729 - C64730) * C92333 +
            (C61189 * C3358 - C61039 * C3514 + C61190 * C5704 -
             C92252 * C5888) *
                C14781 +
            (C61189 * C3588 - C61039 * C3732 + C61190 * C5974 -
             C92252 * C6141) *
                C92226) *
               C92102) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C14780 +
            (C61039 * C1717 - C61189 * C1593 + C92252 * C11419 -
             C61190 * C11191) *
                C92333 +
            (C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
             C61190 * C13749) *
                C14781 +
            (C61039 * C6139 - C61189 * C5973 + C92252 * C14309 -
             C61190 * C14081) *
                C92226) *
               C92320 +
           ((C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
             C61190 * C10867) *
                C14780 +
            (C61039 * C1718 - C61189 * C1594 + C92252 * C11420 -
             C61190 * C11192) *
                C92333 +
            (C61039 * C5888 - C61189 * C5704 + C92252 * C13980 -
             C61190 * C13750) *
                C14781 +
            (C61039 * C6141 - C61189 * C5974 + C92252 * C14310 -
             C61190 * C14082) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C61189 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C61039 +
            (C51945 - C51946 + C51947 - C51948) * C61190 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C92333 +
           ((C45829 - C45830 + C45831 - C45832) * C61189 +
            (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
            C55837 * C92252) *
               C92226) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C61189 +
            (C46082 - C46081 + C46084 - C46083) * C61039 + C55441 * C61190 +
            C55838 * C92252) *
               C92333 +
           ((C45838 - C45837 + C45840 - C45839) * C61189 +
            (C46087 - C46086 + C46089 - C46088) * C61039 +
            (C49241 - C49242 + C49243 - C49244) * C61190 +
            (C49547 - C49548 + C49549 - C49550) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C45857 * C61189 + C46096 * C61039 +
            (C49242 - C49241 + C49244 - C49243) * C61190 +
            (C49548 - C49547 + C49550 - C49549) * C92252) *
               C92333 +
           ((C45846 - C45845 + C45848 - C45847) * C61189 +
            (C46091 - C46090 + C46093 - C46092) * C61039 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C61190 +
            (C92320 * C9124 - C90121 * C9122 + C92102 * C9125 -
             C90114 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C61189 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C61039 +
            (C51945 - C51946 + C51947 - C51948) * C61190 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C92333 +
           ((C45829 - C45830 + C45831 - C45832) * C61189 +
            (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
            C55837 * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C61189 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C61039 +
            (C54239 - C54240 + C54241 - C54242) * C61190 +
            (C54639 - C54640 + C54641 - C54642) * C92252) *
               C92333 +
           ((C47345 - C47346 + C47347 - C47348) * C61189 +
            (C47676 - C47677 + C47678 - C47679) * C61039 +
            (C53013 - C53014 + C53015 - C53016) * C61190 +
            (C53425 - C53426 + C53427 - C53428) * C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C61189 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C61039 +
            (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C61190 +
            (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 -
             C90114 * C1774) *
                C92252) *
               C92333 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C61189 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C61039 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C61190 +
            (C92320 * C3807 - C90121 * C3803 + C92102 * C3808 -
             C90114 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C61189 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C61039 +
            (C51945 - C51946 + C51947 - C51948) * C61190 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C92333 +
           ((C45829 - C45830 + C45831 - C45832) * C61189 +
            (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
            C55837 * C92252) *
               C92226) *
              C1372 +
          (((C51946 - C51945 + C51948 - C51947) * C61189 +
            (C52264 - C52263 + C52266 - C52265) * C61039 +
            (C51953 - C51954 + C51955 - C51956) * C61190 +
            (C52267 - C52268 + C52269 - C52270) * C92252) *
               C92333 +
           (C55441 * C61189 + C55838 * C61039 +
            (C51961 - C51962 + C51963 - C51964) * C61190 +
            (C52271 - C52272 + C52273 - C52274) * C92252) *
               C92226) *
              C1373 +
          (((C51954 - C51953 + C51956 - C51955) * C61189 +
            (C52268 - C52267 + C52270 - C52269) * C61039 +
            (C92320 * C10873 - C90121 * C10868 + C92102 * C10871 -
             C90114 * C10867) *
                C61190 +
            (C92320 * C11501 - C90121 * C11497 + C92102 * C11502 -
             C90114 * C11498) *
                C92252) *
               C92333 +
           ((C51962 - C51961 + C51964 - C51963) * C61189 +
            (C52272 - C52271 + C52274 - C52273) * C61039 +
            (C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
             C90114 * C13750) *
                C61190 +
            (C92320 * C14411 - C90121 * C14409 + C92102 * C14412 -
             C90114 * C14410) *
                C92252) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C61189 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C61039 +
            (C26712 - C26713 + C26714 - C26715) * C61190 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C92320 +
           ((C14783 - C14784 + C14785 - C14786) * C61189 +
            (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
            C29788 * C92252) *
               C92102) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C61189 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C61039 +
            (C30196 - C30197 + C30198 - C30199) * C61190 +
            (C31028 - C31029 + C31030 - C31031) * C92252) *
               C92320 +
           ((C17038 - C17039 + C17040 - C17041) * C61189 +
            (C17691 - C17692 + C17693 - C17694) * C61039 +
            (C27750 - C27751 + C27752 - C27753) * C61190 +
            (C28582 - C28583 + C28584 - C28585) * C92252) *
               C92102) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C61189 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C61039 +
            (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C61190 +
            (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 -
             C14781 * C9122) *
                C92252) *
               C92320 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C61189 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C61039 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C61190 +
            (C92333 * C6304 - C14780 * C6218 + C92226 * C9233 -
             C14781 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C61189 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C61039 +
            (C26712 - C26713 + C26714 - C26715) * C61190 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C92320 +
           ((C14783 - C14784 + C14785 - C14786) * C61189 +
            (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
            C29788 * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C61189 +
            (C15313 - C15312 + C15315 - C15314) * C61039 + C28988 * C61190 +
            C29789 * C92252) *
               C92320 +
           ((C14792 - C14791 + C14794 - C14793) * C61189 +
            (C15318 - C15317 + C15320 - C15319) * C61039 +
            (C18005 - C18006 + C18007 - C18008) * C61190 +
            (C18639 - C18640 + C18641 - C18642) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C14811 * C61189 + C15327 * C61039 +
            (C18006 - C18005 + C18008 - C18007) * C61190 +
            (C18640 - C18639 + C18642 - C18641) * C92252) *
               C92320 +
           ((C14800 - C14799 + C14802 - C14801) * C61189 +
            (C15322 - C15321 + C15324 - C15323) * C61039 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C61190 +
            (C92333 * C1840 - C14780 * C1774 + C92226 * C3878 -
             C14781 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C61189 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C61039 +
            (C26712 - C26713 + C26714 - C26715) * C61190 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C92320 +
           ((C14783 - C14784 + C14785 - C14786) * C61189 +
            (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
            C29788 * C92252) *
               C92102) *
              C1372 +
          (((C26713 - C26712 + C26715 - C26714) * C61189 +
            (C27367 - C27366 + C27369 - C27368) * C61039 +
            (C26720 - C26721 + C26722 - C26723) * C61190 +
            (C27370 - C27371 + C27372 - C27373) * C92252) *
               C92320 +
           (C28988 * C61189 + C29789 * C61039 +
            (C26728 - C26729 + C26730 - C26731) * C61190 +
            (C27374 - C27375 + C27376 - C27377) * C92252) *
               C92102) *
              C1373 +
          (((C26721 - C26720 + C26723 - C26722) * C61189 +
            (C27371 - C27370 + C27373 - C27372) * C61039 +
            (C92333 * C11000 - C14780 * C10868 + C92226 * C13869 -
             C14781 * C13749) *
                C61190 +
            (C92333 * C11594 - C14780 * C11497 + C92226 * C14515 -
             C14781 * C14409) *
                C92252) *
               C92320 +
           ((C26729 - C26728 + C26731 - C26730) * C61189 +
            (C27375 - C27374 + C27377 - C27376) * C61039 +
            (C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
             C14781 * C13750) *
                C61190 +
            (C92333 * C11595 - C14780 * C11498 + C92226 * C14516 -
             C14781 * C14410) *
                C92252) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C67378 + C67379) * C92226) *
               C92320 +
           ((C61729 + C61730) * C92333 + (C64086 + C64085) * C92226) * C92102) *
              C92150 * C790 -
          (((C69040 + C69039) * C92226 + (C64085 + C64086) * C92333) * C92102 +
           ((C67381 + C67380) * C92226 + (C67379 + C67378) * C92333) * C92320) *
              C92150 * C791 +
          ((C67384 * C92333 + (C67383 + C67382) * C92226) * C92320 +
           ((C69039 + C69040) * C92333 +
            (C61189 * C5031 - C61690 * C4814 - C61189 * C5418 + C61039 * C5595 +
             C61190 * C8691 - C61691 * C8455 - C61190 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C67378 + C67379) * C92226) *
               C92320 +
           ((C61729 + C61730) * C92333 + (C64086 + C64085) * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C64083 + C64084) * C92226 + (C61732 + C61731) * C92333) * C92102 +
           ((C64085 + C64086) * C92226 + (C61730 + C61729) * C92333) * C92320) *
              C92150 * C92136 * C98 +
          ((C61735 * C92333 + (C64084 + C64083) * C92226) * C92320 +
           ((C61734 + C61733) * C92333 +
            (C61189 * C945 - C61690 * C794 - C61189 * C1193 + C61039 * C1314 +
             C61190 * C3516 - C61691 * C3360 - C61190 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C67378 + C67379) * C92226) *
               C92320 +
           ((C61729 + C61730) * C92333 + (C64086 + C64085) * C92226) * C92102) *
              C1372 -
          (((C61190 * C5888 - C61691 * C5704 - C61190 * C6220 + C92252 * C6387 +
             C61189 * C3514 - C61690 * C3358 - C61189 * C3802 +
             C61039 * C3946) *
                C92226 +
            (C65061 + C65062) * C92333) *
               C92102 +
           ((C70898 + C70899) * C92226 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C92333) *
               C92320) *
              C1373 +
          (((C61189 * C1527 - C61690 * C1379 - C61189 * C1775 + C61039 * C1899 +
             C61190 * C11109 - C61691 * C10868 - C61190 * C11497 +
             C92252 * C11683) *
                C92333 +
            (C61189 * C5887 - C61690 * C5703 - C61189 * C6219 + C61039 * C6385 +
             C61190 * C13979 - C61691 * C13749 - C61190 * C14409 +
             C92252 * C14619) *
                C92226) *
               C92320 +
           ((C61189 * C1528 - C61690 * C1380 - C61189 * C1776 + C61039 * C1900 +
             C61190 * C11110 - C61691 * C10867 - C61190 * C11498 +
             C92252 * C11682) *
                C92333 +
            (C61189 * C5888 - C61690 * C5704 - C61189 * C6220 + C61039 * C6387 +
             C61190 * C13980 - C61691 * C13750 - C61190 * C14410 +
             C92252 * C14620) *
                C92226) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
              C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                 C61039 +
             (C51645 + C51646) * C92252) *
                C92333 +
            ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
               C2664 -
           (((C51647 + C51648) * C92252 + C55040 * C61039) * C92226 +
            ((C51649 + C51650) * C92252 + (C51646 + C51645) * C61039) *
                C92333) *
               C2665) *
              C92136 * C1971 +
          ((((C53835 + C53836) * C61039 +
             (C90121 * C1393 - C44796 * C1380 - C90121 * C1394 +
              C92320 * C1404 + C90114 * C1395 - C44798 * C1381 -
              C90114 * C1396 + C92102 * C1405) *
                 C92252) *
                C92333 +
            ((C52613 + C52614) * C61039 +
             (C90121 * C5713 - C44796 * C5704 - C90121 * C5714 +
              C92320 * C5722 + C90114 * C11785 - C44798 * C11784 -
              C90114 * C11786 + C92102 * C11787) *
                 C92252) *
                C92226) *
               C2665 -
           (((C52614 + C52613) * C92252 + (C47036 + C47035) * C61039) * C92226 +
            ((C53836 + C53835) * C92252 +
             (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
              C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                 C61039) *
                C92333) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C90121 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92320 +
             (C14783 - C14784 + C14785 - C14786) * C90114 +
             (C14787 - C14788 + C14789 - C14790) * C92102) *
                C61039 +
            ((C26712 - C26713 + C26714 - C26715) * C90121 +
             (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
             C28987 * C92102) *
                C92252) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C90121 +
             (C26717 - C26716 + C26719 - C26718) * C92320 + C28988 * C90114 +
             C28989 * C92102) *
                C61039 +
            ((C26720 - C26721 + C26722 - C26723) * C90121 +
             (C26724 - C26725 + C26726 - C26727) * C92320 +
             (C26728 - C26729 + C26730 - C26731) * C90114 +
             (C26732 - C26733 + C26734 - C26735) * C92102) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C90121 +
             (C14788 - C14787 + C14790 - C14789) * C92320 +
             (C14792 - C14791 + C14794 - C14793) * C90114 +
             (C14796 - C14795 + C14798 - C14797) * C92102) *
                C61039 +
            (C28988 * C90121 + C28989 * C92320 +
             (C18005 - C18006 + C18007 - C18008) * C90114 +
             (C18009 - C18010 + C18011 - C18012) * C92102) *
                C92252) *
               C2664 +
           ((C28986 * C90121 + C28987 * C92320 +
             (C18006 - C18005 + C18008 - C18007) * C90114 +
             (C18010 - C18009 + C18012 - C18011) * C92102) *
                C61039 +
            ((C26729 - C26728 + C26731 - C26730) * C90121 +
             (C26733 - C26732 + C26735 - C26734) * C92320 +
             (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
              C14781 * C11784) *
                 C90114 +
             (C92333 * C1471 - C14780 * C1396 + C92226 * C11887 -
              C14781 * C11786) *
                 C92102) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C90121 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92320 +
             (C61192 - C61193 + C61194 - C61195) * C90114 +
             (C61196 - C61197 + C61198 - C61199) * C92102) *
                C92333 +
            ((C66843 - C66844 + C66845 - C66846) * C90121 +
             (C66847 - C66848 + C66849 - C66850) * C92320 + C77184 * C90114 +
             C77185 * C92102) *
                C92226) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C90121 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92320 +
             (C64402 - C64403 + C64404 - C64405) * C90114 +
             (C64406 - C64407 + C64408 - C64409) * C92102) *
                C92333 +
            ((C70233 - C70234 + C70235 - C70236) * C90121 +
             (C70237 - C70238 + C70239 - C70240) * C92320 +
             (C78366 - C78367 + C78368 - C78369) * C90114 +
             (C78370 - C78371 + C78372 - C78373) * C92102) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C90121 +
             (C61197 - C61196 + C61199 - C61198) * C92320 +
             (C61201 - C61200 + C61203 - C61202) * C90114 +
             (C61205 - C61204 + C61207 - C61206) * C92102) *
                C92333 +
            (C77186 * C90121 + C77187 * C92320 +
             (C63455 - C63456 + C63457 - C63458) * C90114 +
             (C63459 - C63460 + C63461 - C63462) * C92102) *
                C92226) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C90121 +
             (C64407 - C64406 + C64409 - C64408) * C92320 +
             (C64411 - C64410 + C64413 - C64412) * C90114 +
             (C64415 - C64414 + C64417 - C64416) * C92102) *
                C92333 +
            ((C78367 - C78366 + C78369 - C78368) * C90121 +
             (C78371 - C78370 + C78373 - C78372) * C92320 +
             (C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
              C61190 * C11784) *
                 C90114 +
             (C61039 * C3519 - C61189 * C3366 + C92252 * C11995 -
              C61190 * C11786) *
                 C92102) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C14780 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92333 +
             (C45829 - C45830 + C45831 - C45832) * C14781 +
             (C45833 - C45834 + C45835 - C45836) * C92226) *
                C61039 +
            ((C51945 - C51946 + C51947 - C51948) * C14780 +
             (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
             C55440 * C92226) *
                C92252) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C14780 +
             (C51950 - C51949 + C51952 - C51951) * C92333 + C55441 * C14781 +
             C55442 * C92226) *
                C61039 +
            ((C51953 - C51954 + C51955 - C51956) * C14780 +
             (C51957 - C51958 + C51959 - C51960) * C92333 +
             (C51961 - C51962 + C51963 - C51964) * C14781 +
             (C51965 - C51966 + C51967 - C51968) * C92226) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C14780 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C92333 +
             (C47345 - C47346 + C47347 - C47348) * C14781 +
             (C47349 - C47350 + C47351 - C47352) * C92226) *
                C61039 +
            ((C54239 - C54240 + C54241 - C54242) * C14780 +
             (C54243 - C54244 + C54245 - C54246) * C92333 +
             (C53013 - C53014 + C53015 - C53016) * C14781 +
             (C53017 - C53018 + C53019 - C53020) * C92226) *
                C92252) *
               C2664 +
           (((C54240 - C54239 + C54242 - C54241) * C14780 +
             (C54244 - C54243 + C54246 - C54245) * C92333 +
             (C53014 - C53013 + C53016 - C53015) * C14781 +
             (C53018 - C53017 + C53020 - C53019) * C92226) *
                C61039 +
            ((C92320 * C1393 - C90121 * C1380 + C92102 * C1395 -
              C90114 * C1381) *
                 C14780 +
             (C92320 * C1602 - C90121 * C1594 + C92102 * C1603 -
              C90114 * C1595) *
                 C92333 +
             (C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
              C90114 * C11784) *
                 C14781 +
             (C92320 * C5980 - C90121 * C5974 + C92102 * C12107 -
              C90114 * C12106) *
                 C92226) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
              C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                 C92320 +
             (C15075 + C15076) * C92102) *
                C61039 +
            ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
               C2664 -
           (((C27068 + C27069) * C92102 + (C27070 + C27071) * C92320) * C92252 +
            (C29389 * C92102 + (C27067 + C27066) * C92320) * C61039) *
               C2665) *
              C92136 * C1971 +
          (((C29388 * C92320 + (C18336 + C18335) * C92102) * C61039 +
            ((C27069 + C27068) * C92320 +
             (C14780 * C1463 - C15036 * C1381 - C14780 * C1595 +
              C92333 * C1661 + C14781 * C11886 - C15037 * C11784 -
              C14781 * C12106 + C92226 * C12206) *
                 C92102) *
                C92252) *
               C2665 -
           (((C18335 + C18336) * C92102 + C29389 * C92320) * C92252 +
            ((C15078 + C15077) * C92102 + (C15076 + C15075) * C92320) *
                C61039) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C14780 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92333 +
             (C66843 - C66844 + C66845 - C66846) * C14781 +
             (C67098 - C67099 + C67100 - C67101) * C92226) *
                C92320 +
            ((C61192 - C61193 + C61194 - C61195) * C14780 +
             (C61444 - C61445 + C61446 - C61447) * C92333 + C77184 * C14781 +
             C77582 * C92226) *
                C92102) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C14780 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92333 +
             (C70233 - C70234 + C70235 - C70236) * C14781 +
             (C70564 - C70565 + C70566 - C70567) * C92226) *
                C92320 +
            ((C64402 - C64403 + C64404 - C64405) * C14780 +
             (C64727 - C64728 + C64729 - C64730) * C92333 +
             (C78366 - C78367 + C78368 - C78369) * C14781 +
             (C78764 - C78765 + C78766 - C78767) * C92226) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C14780 +
             (C61445 - C61444 + C61447 - C61446) * C92333 + C77186 * C14781 +
             C77583 * C92226) *
                C92320 +
            ((C61201 - C61200 + C61203 - C61202) * C14780 +
             (C61450 - C61449 + C61452 - C61451) * C92333 +
             (C63455 - C63456 + C63457 - C63458) * C14781 +
             (C63761 - C63762 + C63763 - C63764) * C92226) *
                C92102) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C14780 +
             (C64728 - C64727 + C64730 - C64729) * C92333 +
             (C78367 - C78366 + C78369 - C78368) * C14781 +
             (C78765 - C78764 + C78767 - C78766) * C92226) *
                C92320 +
            ((C64411 - C64410 + C64413 - C64412) * C14780 +
             (C64732 - C64731 + C64734 - C64733) * C92333 +
             (C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
              C61190 * C11784) *
                 C14781 +
             (C61039 * C3733 - C61189 * C3589 + C92252 * C12319 -
              C61190 * C12106) *
                 C92226) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C61189 +
             (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                 C61039 +
             (C51945 - C51946 + C51947 - C51948) * C61190 +
             (C52263 - C52264 + C52265 - C52266) * C92252) *
                C92333 +
            ((C45829 - C45830 + C45831 - C45832) * C61189 +
             (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
             C55837 * C92252) *
                C92226) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C61189 +
             (C52264 - C52263 + C52266 - C52265) * C61039 +
             (C51953 - C51954 + C51955 - C51956) * C61190 +
             (C52267 - C52268 + C52269 - C52270) * C92252) *
                C92333 +
            (C55441 * C61189 + C55838 * C61039 +
             (C51961 - C51962 + C51963 - C51964) * C61190 +
             (C52271 - C52272 + C52273 - C52274) * C92252) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C61189 +
             (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                 C61039 +
             (C54239 - C54240 + C54241 - C54242) * C61190 +
             (C54639 - C54640 + C54641 - C54642) * C92252) *
                C92333 +
            ((C47345 - C47346 + C47347 - C47348) * C61189 +
             (C47676 - C47677 + C47678 - C47679) * C61039 +
             (C53013 - C53014 + C53015 - C53016) * C61190 +
             (C53425 - C53426 + C53427 - C53428) * C92252) *
                C92226) *
               C2664 +
           (((C54240 - C54239 + C54242 - C54241) * C61189 +
             (C54640 - C54639 + C54642 - C54641) * C61039 +
             (C92320 * C1393 - C90121 * C1380 + C92102 * C1395 -
              C90114 * C1381) *
                 C61190 +
             (C92320 * C1784 - C90121 * C1776 + C92102 * C1785 -
              C90114 * C1777) *
                 C92252) *
                C92333 +
            ((C53014 - C53013 + C53016 - C53015) * C61189 +
             (C53426 - C53425 + C53428 - C53427) * C61039 +
             (C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
              C90114 * C11784) *
                 C61190 +
             (C92320 * C6226 - C90121 * C6220 + C92102 * C12425 -
              C90114 * C12424) *
                 C92252) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C61189 +
             (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                 C61039 +
             (C26712 - C26713 + C26714 - C26715) * C61190 +
             (C27366 - C27367 + C27368 - C27369) * C92252) *
                C92320 +
            ((C14783 - C14784 + C14785 - C14786) * C61189 +
             (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
             C29788 * C92252) *
                C92102) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C61189 +
             (C27367 - C27366 + C27369 - C27368) * C61039 +
             (C26720 - C26721 + C26722 - C26723) * C61190 +
             (C27370 - C27371 + C27372 - C27373) * C92252) *
                C92320 +
            (C28988 * C61189 + C29789 * C61039 +
             (C26728 - C26729 + C26730 - C26731) * C61190 +
             (C27374 - C27375 + C27376 - C27377) * C92252) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C61189 +
             (C15313 - C15312 + C15315 - C15314) * C61039 + C28988 * C61190 +
             C29789 * C92252) *
                C92320 +
            ((C14792 - C14791 + C14794 - C14793) * C61189 +
             (C15318 - C15317 + C15320 - C15319) * C61039 +
             (C18005 - C18006 + C18007 - C18008) * C61190 +
             (C18639 - C18640 + C18641 - C18642) * C92252) *
                C92102) *
               C2664 +
           ((C28986 * C61189 + C29788 * C61039 +
             (C26729 - C26728 + C26731 - C26730) * C61190 +
             (C27375 - C27374 + C27377 - C27376) * C92252) *
                C92320 +
            ((C18006 - C18005 + C18008 - C18007) * C61189 +
             (C18640 - C18639 + C18642 - C18641) * C61039 +
             (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
              C14781 * C11784) *
                 C61190 +
             (C92333 * C1843 - C14780 * C1777 + C92226 * C12524 -
              C14781 * C12424) *
                 C92252) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
              C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
              C92252 * C1898) *
                 C92333 +
             (C67378 + C67379) * C92226) *
                C92320 +
            ((C61729 + C61730) * C92333 + C77974 * C92226) * C92102) *
               C2664 -
           (((C79170 + C79171) * C92226 + (C65061 + C65062) * C92333) * C92102 +
            ((C70898 + C70899) * C92226 +
             (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 +
              C92252 * C1899 + C61189 * C1523 - C61690 * C1378 -
              C61189 * C1771 + C61039 * C1898) *
                 C92333) *
                C92320) *
               C2665) *
              C92136 * C1971 +
          ((((C65062 + C65061) * C92333 + (C79171 + C79170) * C92226) * C92320 +
            ((C65060 + C65059) * C92333 +
             (C61189 * C3515 - C61690 * C3359 - C61189 * C3803 +
              C61039 * C3947 + C61190 * C11994 - C61691 * C11784 -
              C61190 * C12424 + C92252 * C12627) *
                 C92226) *
                C92102) *
               C2665 -
           (((C64083 + C64084) * C92226 + (C61732 + C61731) * C92333) * C92102 +
            (C77975 * C92226 + (C61730 + C61729) * C92333) * C92320) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C61039 +
            (C51645 + C51646) * C92252) *
               C92333 +
           ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
              C92150 * C92136 * C97 -
          (((C52614 + C52613) * C92252 + (C47036 + C47035) * C61039) * C92226 +
           ((C53836 + C53835) * C92252 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C61039) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
             C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
                C61039 +
            (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
             C90114 * C1383 - C44798 * C1375 - C90114 * C1384 +
             C92102 * C1399) *
                C92252) *
               C92333 +
           ((C90121 * C804 - C44796 * C795 - C90121 * C805 + C92320 * C819 +
             C90114 * C802 - C44798 * C794 - C90114 * C803 + C92102 * C818) *
                C61039 +
            (C90121 * C3365 - C44796 * C3359 - C90121 * C3366 + C92320 * C3371 +
             C90114 * C3367 - C44798 * C3360 - C90114 * C3368 +
             C92102 * C3372) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C61039 +
            (C51645 + C51646) * C92252) *
               C92333 +
           ((C45592 + C45593) * C61039 + C55039 * C92252) * C92226) *
              C92150 * C790 -
          (((C48935 + C48936) * C92252 + (C45595 + C45594) * C61039) * C92226 +
           (C55040 * C92252 + (C45593 + C45592) * C61039) * C92333) *
              C92150 * C791 +
          ((C45598 * C61039 + (C48936 + C48935) * C92252) * C92333 +
           ((C45597 + C45596) * C61039 +
            (C90121 * C8456 - C44796 * C8454 - C90121 * C8457 + C92320 * C8460 +
             C90114 * C8458 - C44798 * C8455 - C90114 * C8459 +
             C92102 * C8461) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C90121 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92320 +
            (C14783 - C14784 + C14785 - C14786) * C90114 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C61039 +
           ((C26712 - C26713 + C26714 - C26715) * C90121 +
            (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
            C28987 * C92102) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C90121 +
            (C14788 - C14787 + C14790 - C14789) * C92320 +
            (C14792 - C14791 + C14794 - C14793) * C90114 +
            (C14796 - C14795 + C14798 - C14797) * C92102) *
               C61039 +
           (C28988 * C90121 + C28989 * C92320 +
            (C18005 - C18006 + C18007 - C18008) * C90114 +
            (C18009 - C18010 + C18011 - C18012) * C92102) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C14811 * C90121 + C14812 * C92320 +
            (C14800 - C14799 + C14802 - C14801) * C90114 +
            (C14804 - C14803 + C14806 - C14805) * C92102) *
               C61039 +
           ((C18006 - C18005 + C18008 - C18007) * C90121 +
            (C18010 - C18009 + C18012 - C18011) * C92320 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C90114 +
            (C92333 * C1468 - C14780 * C1384 + C92226 * C3446 -
             C14781 * C3368) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C90121 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92320 +
            (C14783 - C14784 + C14785 - C14786) * C90114 +
            (C14787 - C14788 + C14789 - C14790) * C92102) *
               C61039 +
           ((C26712 - C26713 + C26714 - C26715) * C90121 +
            (C26716 - C26717 + C26718 - C26719) * C92320 + C28986 * C90114 +
            C28987 * C92102) *
               C92252) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C90121 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92320 +
            (C17038 - C17039 + C17040 - C17041) * C90114 +
            (C17042 - C17043 + C17044 - C17045) * C92102) *
               C61039 +
           ((C30196 - C30197 + C30198 - C30199) * C90121 +
            (C30200 - C30201 + C30202 - C30203) * C92320 +
            (C27750 - C27751 + C27752 - C27753) * C90114 +
            (C27754 - C27755 + C27756 - C27757) * C92102) *
               C92252) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C90121 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C92320 +
            (C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C90114 +
            (C92333 * C889 - C14780 * C813 + C92226 * C4953 - C14781 * C4819) *
                C92102) *
               C61039 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C90121 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C92320 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C90114 +
            (C92333 * C5806 - C14780 * C5708 + C92226 * C8591 -
             C14781 * C8459) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C90121 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92320 +
            (C61192 - C61193 + C61194 - C61195) * C90114 +
            (C61196 - C61197 + C61198 - C61199) * C92102) *
               C92333 +
           ((C66843 - C66844 + C66845 - C66846) * C90121 +
            (C66847 - C66848 + C66849 - C66850) * C92320 +
            (C63448 - C63447 + C63450 - C63449) * C90114 +
            (C63452 - C63451 + C63454 - C63453) * C92102) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C90121 +
            (C61197 - C61196 + C61199 - C61198) * C92320 +
            (C61201 - C61200 + C61203 - C61202) * C90114 +
            (C61205 - C61204 + C61207 - C61206) * C92102) *
               C92333 +
           ((C63447 - C63448 + C63449 - C63450) * C90121 +
            (C63451 - C63452 + C63453 - C63454) * C92320 +
            (C63455 - C63456 + C63457 - C63458) * C90114 +
            (C63459 - C63460 + C63461 - C63462) * C92102) *
               C92226) *
              C92150 * C92136 * C98 +
          ((C61220 * C90121 + C61221 * C92320 +
            (C61209 - C61208 + C61211 - C61210) * C90114 +
            (C61213 - C61212 + C61215 - C61214) * C92102) *
               C92333 +
           ((C63456 - C63455 + C63458 - C63457) * C90121 +
            (C63460 - C63459 + C63462 - C63461) * C92320 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C90114 +
            (C61039 * C953 - C61189 * C803 + C92252 * C3520 - C61190 * C3368) *
                C92102) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C90121 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92320 +
            (C61192 - C61193 + C61194 - C61195) * C90114 +
            (C61196 - C61197 + C61198 - C61199) * C92102) *
               C92333 +
           ((C66843 - C66844 + C66845 - C66846) * C90121 +
            (C66847 - C66848 + C66849 - C66850) * C92320 +
            (C63448 - C63447 + C63450 - C63449) * C90114 +
            (C63452 - C63451 + C63454 - C63453) * C92102) *
               C92226) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C90121 +
            (C66848 - C66847 + C66850 - C66849) * C92320 +
            (C63447 - C63448 + C63449 - C63450) * C90114 +
            (C63451 - C63452 + C63453 - C63454) * C92102) *
               C92333 +
           ((C66852 - C66851 + C66854 - C66853) * C90121 +
            (C66856 - C66855 + C66858 - C66857) * C92320 +
            (C68427 - C68428 + C68429 - C68430) * C90114 +
            (C68431 - C68432 + C68433 - C68434) * C92102) *
               C92226) *
              C92150 * C791 +
          ((C66871 * C90121 + C66872 * C92320 +
            (C68428 - C68427 + C68430 - C68429) * C90114 +
            (C68432 - C68431 + C68434 - C68433) * C92102) *
               C92333 +
           ((C66860 - C66859 + C66862 - C66861) * C90121 +
            (C66864 - C66863 + C66866 - C66865) * C92320 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C90114 +
            (C61039 * C5035 - C61189 * C4819 + C92252 * C8693 -
             C61190 * C8459) *
                C92102) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C14780 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92333 +
            (C45829 - C45830 + C45831 - C45832) * C14781 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C61039 +
           ((C51945 - C51946 + C51947 - C51948) * C14780 +
            (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
            C55440 * C92226) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C14780 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92333 +
            (C47345 - C47346 + C47347 - C47348) * C14781 +
            (C47349 - C47350 + C47351 - C47352) * C92226) *
               C61039 +
           ((C54239 - C54240 + C54241 - C54242) * C14780 +
            (C54243 - C54244 + C54245 - C54246) * C92333 +
            (C53013 - C53014 + C53015 - C53016) * C14781 +
            (C53017 - C53018 + C53019 - C53020) * C92226) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C14780 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C92333 +
            (C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C14781 +
            (C92320 * C1018 - C90121 * C1010 + C92102 * C1019 -
             C90114 * C1011) *
                C92226) *
               C61039 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C14780 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C92333 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C14781 +
            (C92320 * C3593 - C90121 * C3589 + C92102 * C3594 -
             C90114 * C3590) *
                C92226) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C14780 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92333 +
            (C45829 - C45830 + C45831 - C45832) * C14781 +
            (C45833 - C45834 + C45835 - C45836) * C92226) *
               C61039 +
           ((C51945 - C51946 + C51947 - C51948) * C14780 +
            (C51949 - C51950 + C51951 - C51952) * C92333 + C55439 * C14781 +
            C55440 * C92226) *
               C92252) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C14780 +
            (C45834 - C45833 + C45836 - C45835) * C92333 +
            (C45838 - C45837 + C45840 - C45839) * C14781 +
            (C45842 - C45841 + C45844 - C45843) * C92226) *
               C61039 +
           (C55441 * C14780 + C55442 * C92333 +
            (C49241 - C49242 + C49243 - C49244) * C14781 +
            (C49245 - C49246 + C49247 - C49248) * C92226) *
               C92252) *
              C92150 * C791 +
          ((C45857 * C14780 + C45858 * C92333 +
            (C45846 - C45845 + C45848 - C45847) * C14781 +
            (C45850 - C45849 + C45852 - C45851) * C92226) *
               C61039 +
           ((C49242 - C49241 + C49244 - C49243) * C14780 +
            (C49246 - C49245 + C49248 - C49247) * C92333 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C14781 +
            (C92320 * C8802 - C90121 * C8800 + C92102 * C8803 -
             C90114 * C8801) *
                C92226) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92320 +
            (C15075 + C15076) * C92102) *
               C61039 +
           ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
              C92150 * C92136 * C97 -
          (((C18335 + C18336) * C92102 + C29389 * C92320) * C92252 +
           ((C15078 + C15077) * C92102 + (C15076 + C15075) * C92320) * C61039) *
              C92150 * C92136 * C98 +
          ((C15081 * C92320 + (C15080 + C15079) * C92102) * C61039 +
           ((C18336 + C18335) * C92320 +
            (C14780 * C1460 - C15036 * C1375 - C14780 * C1592 + C92333 * C1655 +
             C14781 * C3442 - C15037 * C3360 - C14781 * C3590 +
             C92226 * C3664) *
                C92102) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92320 +
            (C15075 + C15076) * C92102) *
               C61039 +
           ((C27066 + C27067) * C92320 + C29388 * C92102) * C92252) *
              C92150 * C790 -
          (((C28180 + C28181) * C92102 + (C30627 + C30626) * C92320) * C92252 +
           ((C17388 + C17389) * C92102 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92320) *
               C61039) *
              C92150 * C791 +
          (((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
             C14781 * C4948 - C15037 * C4815 - C14781 * C5139 +
             C92226 * C5252) *
                C92320 +
            (C14780 * C881 - C15036 * C799 - C14780 * C1013 + C92333 * C1079 +
             C14781 * C4949 - C15037 * C4814 - C14781 * C5140 +
             C92226 * C5251) *
                C92102) *
               C61039 +
           ((C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
             C14781 * C8588 - C15037 * C8454 - C14781 * C8800 +
             C92226 * C8918) *
                C92320 +
            (C14780 * C5800 - C15036 * C5701 - C14780 * C5972 + C92333 * C6057 +
             C14781 * C8589 - C15037 * C8455 - C14781 * C8801 +
             C92226 * C8919) *
                C92102) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C14780 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92333 +
            (C66843 - C66844 + C66845 - C66846) * C14781 +
            (C67098 - C67099 + C67100 - C67101) * C92226) *
               C92320 +
           ((C61192 - C61193 + C61194 - C61195) * C14780 +
            (C61444 - C61445 + C61446 - C61447) * C92333 +
            (C63448 - C63447 + C63450 - C63449) * C14781 +
            (C63758 - C63757 + C63760 - C63759) * C92226) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C14780 +
            (C61445 - C61444 + C61447 - C61446) * C92333 +
            (C63447 - C63448 + C63449 - C63450) * C14781 +
            (C63757 - C63758 + C63759 - C63760) * C92226) *
               C92320 +
           ((C61201 - C61200 + C61203 - C61202) * C14780 +
            (C61450 - C61449 + C61452 - C61451) * C92333 +
            (C63455 - C63456 + C63457 - C63458) * C14781 +
            (C63761 - C63762 + C63763 - C63764) * C92226) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C61220 * C14780 + C61459 * C92333 +
            (C63456 - C63455 + C63458 - C63457) * C14781 +
            (C63762 - C63761 + C63764 - C63763) * C92226) *
               C92320 +
           ((C61209 - C61208 + C61211 - C61210) * C14780 +
            (C61454 - C61453 + C61456 - C61455) * C92333 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C14781 +
            (C61039 * C1135 - C61189 * C1011 + C92252 * C3734 -
             C61190 * C3590) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C14780 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92333 +
            (C66843 - C66844 + C66845 - C66846) * C14781 +
            (C67098 - C67099 + C67100 - C67101) * C92226) *
               C92320 +
           ((C61192 - C61193 + C61194 - C61195) * C14780 +
            (C61444 - C61445 + C61446 - C61447) * C92333 +
            (C63448 - C63447 + C63450 - C63449) * C14781 +
            (C63758 - C63757 + C63760 - C63759) * C92226) *
               C92102) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C14780 +
            (C67099 - C67098 + C67101 - C67100) * C92333 +
            (C66852 - C66851 + C66854 - C66853) * C14781 +
            (C67103 - C67102 + C67105 - C67104) * C92226) *
               C92320 +
           ((C63447 - C63448 + C63449 - C63450) * C14780 +
            (C63757 - C63758 + C63759 - C63760) * C92333 +
            (C68427 - C68428 + C68429 - C68430) * C14781 +
            (C68729 - C68730 + C68731 - C68732) * C92226) *
               C92102) *
              C92150 * C791 +
          ((C66871 * C14780 + C67112 * C92333 +
            (C66860 - C66859 + C66862 - C66861) * C14781 +
            (C67107 - C67106 + C67109 - C67108) * C92226) *
               C92320 +
           ((C68428 - C68427 + C68430 - C68429) * C14780 +
            (C68730 - C68729 + C68732 - C68731) * C92333 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C14781 +
            (C61039 * C5330 - C61189 * C5140 + C92252 * C9019 -
             C61190 * C8801) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C61189 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C61039 +
            (C51945 - C51946 + C51947 - C51948) * C61190 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C92333 +
           ((C45829 - C45830 + C45831 - C45832) * C61189 +
            (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
            C55837 * C92252) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C61189 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C61039 +
            (C54239 - C54240 + C54241 - C54242) * C61190 +
            (C54639 - C54640 + C54641 - C54642) * C92252) *
               C92333 +
           ((C47345 - C47346 + C47347 - C47348) * C61189 +
            (C47676 - C47677 + C47678 - C47679) * C61039 +
            (C53013 - C53014 + C53015 - C53016) * C61190 +
            (C53425 - C53426 + C53427 - C53428) * C92252) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C61189 +
            (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
                C61039 +
            (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C61190 +
            (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 -
             C90114 * C1774) *
                C92252) *
               C92333 +
           ((C92320 * C804 - C90121 * C795 + C92102 * C802 - C90114 * C794) *
                C61189 +
            (C92320 * C1200 - C90121 * C1192 + C92102 * C1201 -
             C90114 * C1193) *
                C61039 +
            (C92320 * C3365 - C90121 * C3359 + C92102 * C3367 -
             C90114 * C3360) *
                C61190 +
            (C92320 * C3807 - C90121 * C3803 + C92102 * C3808 -
             C90114 * C3804) *
                C92252) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C61189 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C61039 +
            (C51945 - C51946 + C51947 - C51948) * C61190 +
            (C52263 - C52264 + C52265 - C52266) * C92252) *
               C92333 +
           ((C45829 - C45830 + C45831 - C45832) * C61189 +
            (C46081 - C46082 + C46083 - C46084) * C61039 + C55439 * C61190 +
            C55837 * C92252) *
               C92226) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C61189 +
            (C46082 - C46081 + C46084 - C46083) * C61039 + C55441 * C61190 +
            C55838 * C92252) *
               C92333 +
           ((C45838 - C45837 + C45840 - C45839) * C61189 +
            (C46087 - C46086 + C46089 - C46088) * C61039 +
            (C49241 - C49242 + C49243 - C49244) * C61190 +
            (C49547 - C49548 + C49549 - C49550) * C92252) *
               C92226) *
              C92150 * C791 +
          ((C45857 * C61189 + C46096 * C61039 +
            (C49242 - C49241 + C49244 - C49243) * C61190 +
            (C49548 - C49547 + C49550 - C49549) * C92252) *
               C92333 +
           ((C45846 - C45845 + C45848 - C45847) * C61189 +
            (C46091 - C46090 + C46093 - C46092) * C61039 +
            (C92320 * C8456 - C90121 * C8454 + C92102 * C8458 -
             C90114 * C8455) *
                C61190 +
            (C92320 * C9124 - C90121 * C9122 + C92102 * C9125 -
             C90114 * C9123) *
                C92252) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C61189 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C61039 +
            (C26712 - C26713 + C26714 - C26715) * C61190 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C92320 +
           ((C14783 - C14784 + C14785 - C14786) * C61189 +
            (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
            C29788 * C92252) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C61189 +
            (C15313 - C15312 + C15315 - C15314) * C61039 + C28988 * C61190 +
            C29789 * C92252) *
               C92320 +
           ((C14792 - C14791 + C14794 - C14793) * C61189 +
            (C15318 - C15317 + C15320 - C15319) * C61039 +
            (C18005 - C18006 + C18007 - C18008) * C61190 +
            (C18639 - C18640 + C18641 - C18642) * C92252) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C14811 * C61189 + C15327 * C61039 +
            (C18006 - C18005 + C18008 - C18007) * C61190 +
            (C18640 - C18639 + C18642 - C18641) * C92252) *
               C92320 +
           ((C14800 - C14799 + C14802 - C14801) * C61189 +
            (C15322 - C15321 + C15324 - C15323) * C61039 +
            (C92333 * C1460 - C14780 * C1375 + C92226 * C3442 -
             C14781 * C3360) *
                C61190 +
            (C92333 * C1840 - C14780 * C1774 + C92226 * C3878 -
             C14781 * C3804) *
                C92252) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C61189 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C61039 +
            (C26712 - C26713 + C26714 - C26715) * C61190 +
            (C27366 - C27367 + C27368 - C27369) * C92252) *
               C92320 +
           ((C14783 - C14784 + C14785 - C14786) * C61189 +
            (C15312 - C15313 + C15314 - C15315) * C61039 + C28986 * C61190 +
            C29788 * C92252) *
               C92102) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C61189 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C61039 +
            (C30196 - C30197 + C30198 - C30199) * C61190 +
            (C31028 - C31029 + C31030 - C31031) * C92252) *
               C92320 +
           ((C17038 - C17039 + C17040 - C17041) * C61189 +
            (C17691 - C17692 + C17693 - C17694) * C61039 +
            (C27750 - C27751 + C27752 - C27753) * C61190 +
            (C28582 - C28583 + C28584 - C28585) * C92252) *
               C92102) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C61189 +
            (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 -
             C14781 * C5417) *
                C61039 +
            (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C61190 +
            (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 -
             C14781 * C9122) *
                C92252) *
               C92320 +
           ((C92333 * C881 - C14780 * C799 + C92226 * C4949 - C14781 * C4814) *
                C61189 +
            (C92333 * C1261 - C14780 * C1195 + C92226 * C5518 -
             C14781 * C5418) *
                C61039 +
            (C92333 * C5800 - C14780 * C5701 + C92226 * C8589 -
             C14781 * C8455) *
                C61190 +
            (C92333 * C6304 - C14780 * C6218 + C92226 * C9233 -
             C14781 * C9123) *
                C92252) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C67378 + C67379) * C92226) *
               C92320 +
           ((C61729 + C61730) * C92333 + (C64086 + C64085) * C92226) * C92102) *
              C92150 * C92136 * C97 -
          (((C64083 + C64084) * C92226 + (C61732 + C61731) * C92333) * C92102 +
           ((C64085 + C64086) * C92226 + (C61730 + C61729) * C92333) * C92320) *
              C92150 * C92136 * C98 +
          ((C61735 * C92333 + (C64084 + C64083) * C92226) * C92320 +
           ((C61734 + C61733) * C92333 +
            (C61189 * C945 - C61690 * C794 - C61189 * C1193 + C61039 * C1314 +
             C61190 * C3516 - C61691 * C3360 - C61190 * C3804 +
             C92252 * C3948) *
                C92226) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92333 +
            (C67378 + C67379) * C92226) *
               C92320 +
           ((C61729 + C61730) * C92333 + (C64086 + C64085) * C92226) * C92102) *
              C92150 * C790 -
          (((C69040 + C69039) * C92226 + (C64085 + C64086) * C92333) * C92102 +
           ((C67381 + C67380) * C92226 + (C67379 + C67378) * C92333) * C92320) *
              C92150 * C791 +
          ((C67384 * C92333 + (C67383 + C67382) * C92226) * C92320 +
           ((C69039 + C69040) * C92333 +
            (C61189 * C5031 - C61690 * C4814 - C61189 * C5418 + C61039 * C5595 +
             C61190 * C8691 - C61691 * C8455 - C61190 * C9123 +
             C92252 * C9333) *
                C92226) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92361 +
             C41134 * C92362 + C41135 * C80417) *
                C92333 +
            (C85978 + C85979 + C85980) * C92226) *
               C92150 * C1969 -
           ((C85981 + C85982 + C85983) * C92226 +
            (C85980 + C85979 + C85978) * C92333) *
               C92150 * C1970) *
              C1971 +
          (((C87465 + C87466 + C87467) * C92333 +
            (C37780 * C92361 + C58338 * C92362 +
             (C36262 * C5717 - C36263 * C5706 - C36262 * C5718 +
              C92097 * C5724) *
                 C80417) *
                C92226) *
               C92150 * C1970 -
           ((C87467 + C87466 + C87465) * C92226 +
            (C42893 * C80417 + C42892 * C92362 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C92361) *
                C92333) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C36262 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92097) *
                C92361 +
            ((C26712 - C26713 + C26714 - C26715) * C36262 +
             (C26716 - C26717 + C26718 - C26719) * C92097) *
                C92362 +
            C86818 * C80417) *
               C92150 * C1969 +
           (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C36262 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C92097) *
                C92361 +
            ((C30196 - C30197 + C30198 - C30199) * C36262 +
             (C30200 - C30201 + C30202 - C30203) * C92097) *
                C92362 +
            ((C14780 * C5703 - C92333 * C5801 + C14781 * C5705 -
              C92226 * C5802) *
                 C36262 +
             (C14780 * C5712 - C92333 * C5807 + C14781 * C5716 -
              C92226 * C5808) *
                 C92097) *
                C80417) *
               C92150 * C1970) *
              C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C36262 +
             (C14788 - C14787 + C14790 - C14789) * C92097) *
                C92361 +
            (C28988 * C36262 + C28989 * C92097) * C92362 +
            ((C26728 - C26729 + C26730 - C26731) * C36262 +
             (C26732 - C26733 + C26734 - C26735) * C92097) *
                C80417) *
               C92150 * C1969 +
           (((C17039 - C17038 + C17041 - C17040) * C36262 +
             (C17043 - C17042 + C17045 - C17044) * C92097) *
                C92361 +
            ((C27751 - C27750 + C27753 - C27752) * C36262 +
             (C27755 - C27754 + C27757 - C27756) * C92097) *
                C92362 +
            ((C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
              C14781 * C5706) *
                 C36262 +
             (C92333 * C5809 - C14780 * C5714 + C92226 * C5810 -
              C14781 * C5718) *
                 C92097) *
                C80417) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C36262 +
             (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
              C80417 * C1535 - C80568 * C1392) *
                 C92097) *
                C92333 +
            ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
             (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
                C92226) *
               C92150 * C1969 +
           (((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C36262 +
             (C86139 - C86138 + C86141 - C86140 + C86143 - C86142) * C92097) *
                C92333 +
            ((C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C36262 +
             (C86150 - C86151 + C86152 - C86153 + C86154 - C86155) * C92097) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C36262 +
             (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92097) *
                C92333 +
            ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C36262 +
             (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92097) *
                C92226) *
               C92150 * C1969 +
           (((C82775 - C82774 + C82777 - C82776 + C82779 - C82778) * C36262 +
             (C82781 - C82780 + C82783 - C82782 + C82785 - C82784) * C92097) *
                C92333 +
            ((C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
              C80417 * C5890 - C80568 * C5706) *
                 C36262 +
             (C92361 * C955 - C80566 * C813 + C92362 * C5892 - C80567 * C5708 +
              C80417 * C5896 - C80568 * C5718) *
                 C92097) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C14780 +
             (C92097 * C354 - C36262 * C348) * C92333 +
             (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                C92361 +
            ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
             C44149 * C14781 + C44150 * C92226) *
                C92362 +
            C86973 * C80417) *
               C92150 * C1969 +
           (((C36928 - C36927) * C14780 + (C36930 - C36929) * C92333 +
             (C36932 - C36931) * C14781 + (C36934 - C36933) * C92226) *
                C92361 +
            (C44151 * C14780 + C44152 * C92333 + C60428 * C14781 +
             C60429 * C92226) *
                C92362 +
            (C44153 * C14780 + C44154 * C92333 + (C40600 - C40601) * C14781 +
             (C40602 - C40603) * C92226) *
                C80417) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C14780 +
             (C36262 * C349 - C92097 * C355) * C92333 +
             (C37983 - C37984) * C14781 + (C37985 - C37986) * C92226) *
                C92361 +
            ((C43196 - C43197) * C14780 + (C43198 - C43199) * C92333 +
             (C42280 - C42281) * C14781 + (C42282 - C42283) * C92226) *
                C92362 +
            ((C43200 - C43201) * C14780 + (C43202 - C43203) * C92333 +
             (C42284 - C42285) * C14781 + (C42286 - C42287) * C92226) *
                C80417) *
               C92150 * C1969 +
           (((C37984 - C37983) * C14780 + (C37986 - C37985) * C92333 +
             (C37988 - C37987) * C14781 + (C37990 - C37989) * C92226) *
                C92361 +
            ((C42281 - C42280) * C14780 + (C42283 - C42282) * C92333 +
             (C58635 - C58634) * C14781 + (C58637 - C58636) * C92226) *
                C92362 +
            ((C42285 - C42284) * C14780 + (C42287 - C42286) * C92333 +
             (C92097 * C5717 - C36262 * C5706) * C14781 +
             (C92097 * C5982 - C36262 * C5976) * C92226) *
                C80417) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92097 * C92361 +
            (C27066 + C27067) * C92097 * C92362 + C87057 * C80417) *
               C92150 * C1969 -
           ((C14781 * C5802 - C15037 * C5705 - C14781 * C5975 + C92226 * C6060 +
             C14780 * C5801 - C15036 * C5703 - C14780 * C5973 +
             C92333 * C6059) *
                C92097 * C80417 +
            (C30627 + C30626) * C92097 * C92362 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92097 * C92361) *
               C92150 * C1970) *
              C1971 +
          (((C17389 + C17388) * C92097 * C92361 +
            (C28181 + C28180) * C92097 * C92362 +
            (C14780 * C5803 - C15036 * C5704 - C14780 * C5974 + C92333 * C6061 +
             C14781 * C5804 - C15037 * C5706 - C14781 * C5976 +
             C92226 * C6062) *
                C92097 * C80417) *
               C92150 * C1970 -
           ((C27068 + C27069) * C92097 * C80417 + C29389 * C92097 * C92362 +
            (C15076 + C15075) * C92097 * C92361) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C14780 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92333 +
            (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
            (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
               C92097 * C92150 * C1969 +
           ((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C14780 +
            (C86379 - C86378 + C86381 - C86380 + C86383 - C86382) * C92333 +
            (C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C14781 +
            (C86384 - C86385 + C86386 - C86387 + C86388 - C86389) * C92226) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C14780 +
            (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92333 +
            (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C14781 +
            (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92226) *
               C92097 * C92150 * C1969 +
           ((C82775 - C82774 + C82777 - C82776 + C82779 - C82778) * C14780 +
            (C83081 - C83080 + C83083 - C83082 + C83085 - C83084) * C92333 +
            (C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
             C80417 * C5890 - C80568 * C5706) *
                C14781 +
            (C92361 * C1137 - C80566 * C1013 + C92362 * C6138 - C80567 * C5972 +
             C80417 * C6142 - C80568 * C5976) *
                C92226) *
               C92097 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C80566 +
             (C92097 * C573 - C36262 * C567) * C92361 +
             (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
             C41417 * C80568 + C41705 * C80417) *
                C92333 +
            ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
             C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
             C41700 * C80417) *
                C92226) *
               C92150 * C1969 +
           (((C36928 - C36927) * C80566 + (C37105 - C37104) * C92361 +
             C44151 * C80567 + C44488 * C92362 + C44153 * C80568 +
             C44489 * C80417) *
                C92333 +
            ((C36932 - C36931) * C80566 + (C37108 - C37107) * C92361 +
             C60428 * C80567 + C60749 * C92362 + (C40600 - C40601) * C80568 +
             (C40840 - C40841) * C80417) *
                C92226) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C80566 +
             (C36262 * C568 - C92097 * C574) * C92361 +
             (C43196 - C43197) * C80567 + (C43512 - C43513) * C92362 +
             (C43200 - C43201) * C80568 + (C43514 - C43515) * C80417) *
                C92333 +
            ((C37983 - C37984) * C80566 + (C38193 - C38194) * C92361 +
             (C42280 - C42281) * C80567 + (C42582 - C42583) * C92362 +
             (C42284 - C42285) * C80568 + (C42584 - C42585) * C80417) *
                C92226) *
               C92150 * C1969 +
           (((C37984 - C37983) * C80566 + (C38194 - C38193) * C92361 +
             (C42281 - C42280) * C80567 + (C42583 - C42582) * C92362 +
             (C42285 - C42284) * C80568 + (C42585 - C42584) * C80417) *
                C92333 +
            ((C37988 - C37987) * C80566 + (C38196 - C38195) * C92361 +
             (C58635 - C58634) * C80567 + (C58933 - C58932) * C92362 +
             (C92097 * C5717 - C36262 * C5706) * C80568 +
             (C92097 * C6228 - C36262 * C6222) * C80417) *
                C92226) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C80566 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92361 +
            (C26712 - C26713 + C26714 - C26715) * C80567 +
            (C27366 - C27367 + C27368 - C27369) * C92362 + C86814 * C80568 +
            C87292 * C80417) *
               C92097 * C92150 * C1969 +
           ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C80566 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92361 +
            (C30196 - C30197 + C30198 - C30199) * C80567 +
            (C31028 - C31029 + C31030 - C31031) * C92362 +
            (C14780 * C5703 - C92333 * C5801 + C14781 * C5705 -
             C92226 * C5802) *
                C80568 +
            (C14780 * C6219 - C92333 * C6305 + C14781 * C6221 -
             C92226 * C6306) *
                C80417) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C14784 - C14783 + C14786 - C14785) * C80566 +
            (C15313 - C15312 + C15315 - C15314) * C92361 + C28988 * C80567 +
            C29789 * C92362 + (C26728 - C26729 + C26730 - C26731) * C80568 +
            (C27374 - C27375 + C27376 - C27377) * C80417) *
               C92097 * C92150 * C1969 +
           ((C17039 - C17038 + C17041 - C17040) * C80566 +
            (C17692 - C17691 + C17694 - C17693) * C92361 +
            (C27751 - C27750 + C27753 - C27752) * C80567 +
            (C28583 - C28582 + C28585 - C28584) * C92362 +
            (C92333 * C5803 - C14780 * C5704 + C92226 * C5804 -
             C14781 * C5706) *
                C80568 +
            (C92333 * C6307 - C14780 * C6220 + C92226 * C6308 -
             C14781 * C6222) *
                C80417) *
               C92097 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80566 * C266 - C81049 * C108 - C80566 * C567 +
                       C92361 * C702 + C80567 * C1523 - C81050 * C1378 -
                       C80567 * C1771 + C92362 * C1898 + C80568 * C1527 -
                       C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
                          C92333 +
                      (C86648 + C86649 + C86650) * C92226) *
                         C92097 * C92150 * C1969 -
                     ((C86651 + C86652 + C86653) * C92226 +
                      (C86650 + C86649 + C86648) * C92333) *
                         C92097 * C92150 * C1970) *
                        C1971 +
                    (((C83400 + C83399 + C83398) * C92333 +
                      (C80566 * C947 - C81049 * C799 - C80566 * C1195 +
                       C92361 * C1319 + C80567 * C5886 - C81050 * C5701 -
                       C80567 * C6218 + C92362 * C6383 + C80568 * C5890 -
                       C81051 * C5706 - C80568 * C6222 + C80417 * C6388) *
                          C92226) *
                         C92097 * C92150 * C1970 -
                     ((C83398 + C83399 + C83400) * C92226 +
                      (C81091 + C81090 + C81089) * C92333) *
                         C92097 * C92150 * C1969) *
                        C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92361 +
             C41134 * C92362 + C41135 * C80417) *
                C92333 +
            (C85978 + C85979 + C85980) * C92226) *
               C2664 -
           ((C89232 + C89233 + C89234) * C92226 +
            (C41137 * C80417 + C41135 * C92362 + C41134 * C92361) * C92333) *
               C2665) *
              C1969 +
          (((C89234 + C89233 + C89232) * C92333 +
            (C39014 * C92361 + C40347 * C92362 +
             (C36262 * C43814 - C36263 * C43813 - C36262 * C43815 +
              C92097 * C43816) *
                 C80417) *
                C92226) *
               C2665 -
           ((C85981 + C85982 + C85983) * C92226 +
            (C85980 + C85979 + C85978) * C92333) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C36262 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92097) *
                C92361 +
            ((C26712 - C26713 + C26714 - C26715) * C36262 +
             (C26716 - C26717 + C26718 - C26719) * C92097) *
                C92362 +
            C86818 * C80417) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C36262 +
             (C26717 - C26716 + C26719 - C26718) * C92097) *
                C92361 +
            ((C26720 - C26721 + C26722 - C26723) * C36262 +
             (C26724 - C26725 + C26726 - C26727) * C92097) *
                C92362 +
            ((C86806 - C86807 + C86808 - C86809) * C36262 +
             (C86810 - C86811 + C86812 - C86813) * C92097) *
                C80417) *
               C2665) *
              C1969 +
          ((((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                 C36262 +
             (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                 C92097) *
                C92361 +
            ((C30196 - C30197 + C30198 - C30199) * C36262 +
             (C30200 - C30201 + C30202 - C30203) * C92097) *
                C92362 +
            ((C89333 - C89334 + C89335 - C89336) * C36262 +
             (C89337 - C89338 + C89339 - C89340) * C92097) *
                C80417) *
               C2664 +
           (((C30197 - C30196 + C30199 - C30198) * C36262 +
             (C30201 - C30200 + C30203 - C30202) * C92097) *
                C92361 +
            ((C89334 - C89333 + C89336 - C89335) * C36262 +
             (C89338 - C89337 + C89340 - C89339) * C92097) *
                C92362 +
            ((C92333 * C13869 - C14780 * C13749 + C92226 * C43918 -
              C14781 * C43813) *
                 C36262 +
             (C92333 * C13871 - C14780 * C13752 + C92226 * C43919 -
              C14781 * C43815) *
                 C92097) *
                C80417) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C36262 +
             (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
              C80417 * C1535 - C80568 * C1392) *
                 C92097) *
                C92333 +
            ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
             (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
                C92226) *
               C2664 +
           (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 -
              C92362 * C1527 + C80568 * C10868 - C80417 * C11109) *
                 C36262 +
             (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 -
              C92362 * C1535 + C80568 * C10874 - C80417 * C11113) *
                 C92097) *
                C92333 +
            ((C89439 - C89440 + C89441 - C89442 + C89443 - C89444) * C36262 +
             (C89445 - C89446 + C89447 - C89448 + C89449 - C89450) * C92097) *
                C92226) *
               C2665) *
              C1969 +
          ((((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C36262 +
             (C86139 - C86138 + C86141 - C86140 + C86143 - C86142) * C92097) *
                C92333 +
            ((C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C36262 +
             (C86150 - C86151 + C86152 - C86153 + C86154 - C86155) * C92097) *
                C92226) *
               C2664 +
           (((C89440 - C89439 + C89442 - C89441 + C89444 - C89443) * C36262 +
             (C89446 - C89445 + C89448 - C89447 + C89450 - C89449) * C92097) *
                C92333 +
            ((C92361 * C5885 - C80566 * C5702 + C92362 * C5889 -
              C80567 * C5705 + C80417 * C44034 - C80568 * C43813) *
                 C36262 +
             (C92361 * C5891 - C80566 * C5710 + C92362 * C5895 -
              C80567 * C5716 + C80417 * C44035 - C80568 * C43815) *
                 C92097) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C14780 +
             (C92097 * C354 - C36262 * C348) * C92333 +
             (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                C92361 +
            ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
             C44149 * C14781 + C44150 * C92226) *
                C92362 +
            C86973 * C80417) *
               C2664 +
           (((C41400 - C41399) * C14780 + (C41402 - C41401) * C92333 +
             C44151 * C14781 + C44152 * C92226) *
                C92361 +
            ((C41404 - C41403) * C14780 + (C41406 - C41405) * C92333 +
             C44153 * C14781 + C44154 * C92226) *
                C92362 +
            ((C41409 - C41410) * C14780 + (C41411 - C41412) * C92333 +
             (C41413 - C41414) * C14781 + (C41415 - C41416) * C92226) *
                C80417) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C14780 + (C36930 - C36929) * C92333 +
             (C36932 - C36931) * C14781 + (C36934 - C36933) * C92226) *
                C92361 +
            (C44151 * C14780 + C44152 * C92333 + C60428 * C14781 +
             C60429 * C92226) *
                C92362 +
            (C44153 * C14780 + C44154 * C92333 + (C40600 - C40601) * C14781 +
             (C40602 - C40603) * C92226) *
                C80417) *
               C2664 +
           ((C44149 * C14780 + C44150 * C92333 + C57085 * C14781 +
             C57086 * C92226) *
                C92361 +
            (C41407 * C14780 + C41408 * C92333 + (C40601 - C40600) * C14781 +
             (C40603 - C40602) * C92226) *
                C92362 +
            ((C41414 - C41413) * C14780 + (C41416 - C41415) * C92333 +
             (C92097 * C43814 - C36262 * C43813) * C14781 +
             (C92097 * C44147 - C36262 * C44146) * C92226) *
                C80417) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92097 * C92361 +
            (C27066 + C27067) * C92097 * C92362 + C87057 * C80417) *
               C2664 -
           ((C87062 + C87063) * C92097 * C80417 +
            (C27070 + C27071) * C92097 * C92362 +
            (C27067 + C27066) * C92097 * C92361) *
               C2665) *
              C1969 +
          (((C30626 + C30627) * C92097 * C92361 +
            (C89659 + C89660) * C92097 * C92362 +
            (C14780 * C13869 - C15036 * C13749 - C14780 * C14081 +
             C92333 * C14191 + C14781 * C43918 - C15037 * C43813 -
             C14781 * C44146 + C92226 * C44252) *
                C92097 * C80417) *
               C2665 -
           ((C89660 + C89659) * C92097 * C80417 +
            (C30627 + C30626) * C92097 * C92362 +
            (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
             C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
                C92097 * C92361) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C14780 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92333 +
            (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
            (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
               C92097 * C2664 +
           ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C14780 +
            (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 - C92362 * C1717 +
             C80568 * C11191 - C80417 * C11419) *
                C92333 +
            (C89439 - C89440 + C89441 - C89442 + C89443 - C89444) * C14781 +
            (C89759 - C89760 + C89761 - C89762 + C89763 - C89764) * C92226) *
               C92097 * C2665) *
              C1969 +
          (((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C14780 +
            (C86379 - C86378 + C86381 - C86380 + C86383 - C86382) * C92333 +
            (C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C14781 +
            (C86384 - C86385 + C86386 - C86387 + C86388 - C86389) * C92226) *
               C92097 * C2664 +
           ((C89440 - C89439 + C89442 - C89441 + C89444 - C89443) * C14780 +
            (C89760 - C89759 + C89762 - C89761 + C89764 - C89763) * C92333 +
            (C92361 * C5885 - C80566 * C5702 + C92362 * C5889 - C80567 * C5705 +
             C80417 * C44034 - C80568 * C43813) *
                C14781 +
            (C92361 * C6137 - C80566 * C5971 + C92362 * C6140 - C80567 * C5975 +
             C80417 * C44379 - C80568 * C44146) *
                C92226) *
               C92097 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C80566 +
             (C92097 * C573 - C36262 * C567) * C92361 +
             (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
             C41417 * C80568 + C41705 * C80417) *
                C92333 +
            ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
             C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
             C41700 * C80417) *
                C92226) *
               C2664 +
           (((C41400 - C41399) * C80566 + (C41697 - C41696) * C92361 +
             (C41404 - C41403) * C80567 + (C41699 - C41698) * C92362 +
             (C41409 - C41410) * C80568 + (C41701 - C41702) * C80417) *
                C92333 +
            (C44151 * C80566 + C44488 * C92361 + C44153 * C80567 +
             C44489 * C92362 + (C41413 - C41414) * C80568 +
             (C41703 - C41704) * C80417) *
                C92226) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C80566 + (C37105 - C37104) * C92361 +
             C44151 * C80567 + C44488 * C92362 + C44153 * C80568 +
             C44489 * C80417) *
                C92333 +
            ((C36932 - C36931) * C80566 + (C37108 - C37107) * C92361 +
             C60428 * C80567 + C60749 * C92362 + (C40600 - C40601) * C80568 +
             (C40840 - C40841) * C80417) *
                C92226) *
               C2664 +
           ((C44149 * C80566 + C44487 * C92361 + C41407 * C80567 +
             C41700 * C92362 + (C41414 - C41413) * C80568 +
             (C41704 - C41703) * C80417) *
                C92333 +
            (C57085 * C80566 + C57319 * C92361 + (C40601 - C40600) * C80567 +
             (C40841 - C40840) * C92362 +
             (C92097 * C43814 - C36262 * C43813) * C80568 +
             (C92097 * C44485 - C36262 * C44484) * C80417) *
                C92226) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C80566 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92361 +
            (C26712 - C26713 + C26714 - C26715) * C80567 +
            (C27366 - C27367 + C27368 - C27369) * C92362 + C86814 * C80568 +
            C87292 * C80417) *
               C92097 * C2664 +
           ((C26713 - C26712 + C26715 - C26714) * C80566 +
            (C27367 - C27366 + C27369 - C27368) * C92361 +
            (C26720 - C26721 + C26722 - C26723) * C80567 +
            (C27370 - C27371 + C27372 - C27373) * C92362 +
            (C86806 - C86807 + C86808 - C86809) * C80568 +
            (C87288 - C87289 + C87290 - C87291) * C80417) *
               C92097 * C2665) *
              C1969 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C80566 +
            (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 -
             C92226 * C1260) *
                C92361 +
            (C30196 - C30197 + C30198 - C30199) * C80567 +
            (C31028 - C31029 + C31030 - C31031) * C92362 +
            (C89333 - C89334 + C89335 - C89336) * C80568 +
            (C89961 - C89962 + C89963 - C89964) * C80417) *
               C92097 * C2664 +
           ((C30197 - C30196 + C30199 - C30198) * C80566 +
            (C31029 - C31028 + C31031 - C31030) * C92361 +
            (C89334 - C89333 + C89336 - C89335) * C80567 +
            (C89962 - C89961 + C89964 - C89963) * C92362 +
            (C92333 * C13869 - C14780 * C13749 + C92226 * C43918 -
             C14781 * C43813) *
                C80568 +
            (C92333 * C14515 - C14780 * C14409 + C92226 * C44587 -
             C14781 * C44484) *
                C80417) *
               C92097 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80566 * C266 - C81049 * C108 - C80566 * C567 +
                       C92361 * C702 + C80567 * C1523 - C81050 * C1378 -
                       C80567 * C1771 + C92362 * C1898 + C80568 * C1527 -
                       C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
                          C92333 +
                      (C86648 + C86649 + C86650) * C92226) *
                         C92097 * C2664 -
                     ((C90081 + C90082 + C90083) * C92226 +
                      (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
                       C80417 * C11683 + C80567 * C1527 - C81050 * C1379 -
                       C80567 * C1775 + C92362 * C1899 + C80566 * C1523 -
                       C81049 * C1378 - C80566 * C1771 + C92361 * C1898) *
                          C92333) *
                         C92097 * C2665) *
                        C1969 +
                    (((C90083 + C90082 + C90081) * C92333 +
                      (C80566 * C5885 - C81049 * C5702 - C80566 * C6217 +
                       C92361 * C6384 + C80567 * C5889 - C81050 * C5705 -
                       C80567 * C6221 + C92362 * C6386 + C80568 * C44034 -
                       C81051 * C43813 - C80568 * C44484 + C80417 * C44694) *
                          C92226) *
                         C92097 * C2665 -
                     ((C86651 + C86652 + C86653) * C92226 +
                      (C86650 + C86649 + C86648) * C92333) *
                         C92097 * C2664) *
                        C1970) *
                   C92124) /
                  (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92361 +
            C41134 * C92362 + C41135 * C80417) *
               C92333 +
           (C85978 + C85979 + C85980) * C92226) *
              C92150 * C790 -
          ((C85981 + C85982 + C85983) * C92226 +
           (C85980 + C85979 + C85978) * C92333) *
              C92150 * C791 +
          ((C85983 + C85982 + C85981) * C92333 +
           (C36753 * C92361 + C39013 * C92362 +
            (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
             C92097 * C37281) *
                C80417) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92361 +
            C41134 * C92362 + C41135 * C80417) *
               C92333 +
           (C36751 * C92361 + C39015 * C92362 + C40346 * C80417) * C92226) *
              C92150 * C92136 * C97 -
          ((C41983 * C80417 + C41982 * C92362 + C37779 * C92361) * C92226 +
           (C42893 * C80417 + C42892 * C92362 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92361) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C92361 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92362 +
            (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 +
             C92097 * C1405) *
                C80417) *
               C92333 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C92361 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92362 +
            (C36262 * C11785 - C36263 * C11784 - C36262 * C11786 +
             C92097 * C11787) *
                C80417) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92361 +
            C41134 * C92362 + C41135 * C80417) *
               C92333 +
           (C85978 + C85979 + C85980) * C92226) *
              C1372 -
          ((C41136 * C80417 + C40346 * C92362 + C39015 * C92361) * C92226 +
           (C41137 * C80417 + C41135 * C92362 + C41134 * C92361) * C92333) *
              C1373 +
          ((C41135 * C92361 + C41137 * C92362 + C71872 * C80417) * C92333 +
           (C40346 * C92361 + C41136 * C92362 +
            (C36262 * C41106 - C36263 * C41105 - C36262 * C41107 +
             C92097 * C41108) *
                C80417) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C36262 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92097) *
               C92361 +
           ((C26712 - C26713 + C26714 - C26715) * C36262 +
            (C26716 - C26717 + C26718 - C26719) * C92097) *
               C92362 +
           ((C26721 - C26720 + C26723 - C26722) * C36262 +
            (C26725 - C26724 + C26727 - C26726) * C92097) *
               C80417) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C36262 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92097) *
               C92361 +
           ((C30196 - C30197 + C30198 - C30199) * C36262 +
            (C30200 - C30201 + C30202 - C30203) * C92097) *
               C92362 +
           ((C14780 * C5703 - C92333 * C5801 + C14781 * C5705 -
             C92226 * C5802) *
                C36262 +
            (C14780 * C5712 - C92333 * C5807 + C14781 * C5716 -
             C92226 * C5808) *
                C92097) *
               C80417) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C36262 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C92097) *
               C92361 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C36262 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C92097) *
               C92362 +
           ((C92333 * C5802 - C14780 * C5705 + C92226 * C37332 -
             C14781 * C37278) *
                C36262 +
            (C92333 * C5808 - C14780 * C5716 + C92226 * C37333 -
             C14781 * C37280) *
                C92097) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C36262 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92097) *
               C92361 +
           ((C26712 - C26713 + C26714 - C26715) * C36262 +
            (C26716 - C26717 + C26718 - C26719) * C92097) *
               C92362 +
           ((C26721 - C26720 + C26723 - C26722) * C36262 +
            (C26725 - C26724 + C26727 - C26726) * C92097) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C36262 +
            (C14788 - C14787 + C14790 - C14789) * C92097) *
               C92361 +
           (C28988 * C36262 + C28989 * C92097) * C92362 +
           ((C26728 - C26729 + C26730 - C26731) * C36262 +
            (C26732 - C26733 + C26734 - C26735) * C92097) *
               C80417) *
              C92150 * C92136 * C98 +
          ((C14811 * C36262 + C14812 * C92097) * C92361 +
           ((C18006 - C18005 + C18008 - C18007) * C36262 +
            (C18010 - C18009 + C18012 - C18011) * C92097) *
               C92362 +
           ((C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
             C14781 * C11784) *
                C36262 +
            (C92333 * C1471 - C14780 * C1396 + C92226 * C11887 -
             C14781 * C11786) *
                C92097) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C36262 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92097) *
               C92361 +
           ((C26712 - C26713 + C26714 - C26715) * C36262 +
            (C26716 - C26717 + C26718 - C26719) * C92097) *
               C92362 +
           C86818 * C80417) *
              C1372 +
          (((C26713 - C26712 + C26715 - C26714) * C36262 +
            (C26717 - C26716 + C26719 - C26718) * C92097) *
               C92361 +
           ((C26720 - C26721 + C26722 - C26723) * C36262 +
            (C26724 - C26725 + C26726 - C26727) * C92097) *
               C92362 +
           ((C86806 - C86807 + C86808 - C86809) * C36262 +
            (C86810 - C86811 + C86812 - C86813) * C92097) *
               C80417) *
              C1373 +
          (C86818 * C92361 +
           ((C86807 - C86806 + C86809 - C86808) * C36262 +
            (C86811 - C86810 + C86813 - C86812) * C92097) *
               C92362 +
           ((C92333 * C11002 - C14780 * C10869 + C92226 * C41211 -
             C14781 * C41105) *
                C36262 +
            (C92333 * C11006 - C14780 * C10876 + C92226 * C41212 -
             C14781 * C41107) *
                C92097) *
               C80417) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C36262 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92097) *
               C92333 +
           ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
            (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
               C92226) *
              C92150 * C790 +
          (((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C36262 +
            (C86139 - C86138 + C86141 - C86140 + C86143 - C86142) * C92097) *
               C92333 +
           ((C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C36262 +
            (C86150 - C86151 + C86152 - C86153 + C86154 - C86155) * C92097) *
               C92226) *
              C92150 * C791 +
          (((C86145 - C86144 + C86147 - C86146 + C86149 - C86148) * C36262 +
            (C86151 - C86150 + C86153 - C86152 + C86155 - C86154) * C92097) *
               C92333 +
           ((C92361 * C5030 - C80566 * C4815 + C92362 * C8690 - C80567 * C8454 +
             C80417 * C37384 - C80568 * C37278) *
                C36262 +
            (C92361 * C5034 - C80566 * C4821 + C92362 * C8692 - C80567 * C8457 +
             C80417 * C37385 - C80568 * C37280) *
                C92097) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C36262 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92097) *
               C92333 +
           ((C92361 * C942 - C80566 * C797 + C92362 * C3513 - C80567 * C3357 +
             C80417 * C5887 - C80568 * C5703) *
                C36262 +
            (C92361 * C950 - C80566 * C809 + C92362 * C3517 - C80567 * C3362 +
             C80417 * C5893 - C80568 * C5712) *
                C92097) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C36262 +
            (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92097) *
               C92333 +
           ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C36262 +
            (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92097) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C36262 +
            (C80589 - C80588 + C80591 - C80590 + C80593 - C80592) * C92097) *
               C92333 +
           ((C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
             C80417 * C11994 - C80568 * C11784) *
                C36262 +
            (C92361 * C952 - C80566 * C805 + C92362 * C3519 - C80567 * C3366 +
             C80417 * C11995 - C80568 * C11786) *
                C92097) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C36262 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92097) *
               C92333 +
           ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
            (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
               C92226) *
              C1372 +
          (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C36262 +
            (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 - C92362 * C1535 +
             C80568 * C10874 - C80417 * C11113) *
                C92097) *
               C92333 +
           ((C80566 * C3357 - C92361 * C3513 + C80567 * C5703 - C92362 * C5887 +
             C80568 * C13749 - C80417 * C13979) *
                C36262 +
            (C80566 * C3362 - C92361 * C3517 + C80567 * C5712 - C92362 * C5893 +
             C80568 * C13752 - C80417 * C13981) *
                C92097) *
               C92226) *
              C1373 +
          (((C92361 * C1527 - C80566 * C1379 + C92362 * C11109 -
             C80567 * C10868 + C80417 * C11111 - C80568 * C10869) *
                C36262 +
            (C92361 * C1535 - C80566 * C1392 + C92362 * C11113 -
             C80567 * C10874 + C80417 * C11115 - C80568 * C10876) *
                C92097) *
               C92333 +
           ((C92361 * C5887 - C80566 * C5703 + C92362 * C13979 -
             C80567 * C13749 + C80417 * C41320 - C80568 * C41105) *
                C36262 +
            (C92361 * C5893 - C80566 * C5712 + C92362 * C13981 -
             C80567 * C13752 + C80417 * C41321 - C80568 * C41107) *
                C92097) *
               C92226) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C14780 +
                      (C92097 * C354 - C36262 * C348) * C92333 +
                      (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                         C92361 +
                     ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
                      C44149 * C14781 + C44150 * C92226) *
                         C92362 +
                     (C41417 * C14780 + C41418 * C92333 + C41407 * C14781 +
                      C41408 * C92226) *
                         C80417) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C14780 + (C36930 - C36929) * C92333 +
                      (C36932 - C36931) * C14781 + (C36934 - C36933) * C92226) *
                         C92361 +
                     (C44151 * C14780 + C44152 * C92333 + C60428 * C14781 +
                      C60429 * C92226) *
                         C92362 +
                     (C44153 * C14780 + C44154 * C92333 +
                      (C40600 - C40601) * C14781 + (C40602 - C40603) * C92226) *
                         C80417) *
                        C92150 * C791 +
                    ((C36943 * C14780 + C36944 * C92333 + C36945 * C14781 +
                      C36946 * C92226) *
                         C92361 +
                     (C57085 * C14780 + C57086 * C92333 +
                      (C39236 - C39235) * C14781 + (C39238 - C39237) * C92226) *
                         C92362 +
                     ((C40601 - C40600) * C14780 + (C40603 - C40602) * C92333 +
                      (C92097 * C37279 - C36262 * C37278) * C14781 +
                      (C92097 * C37437 - C36262 * C37436) * C92226) *
                         C80417) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C14780 +
                      (C92097 * C354 - C36262 * C348) * C92333 +
                      (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                         C92361 +
                     ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
                      C44149 * C14781 + C44150 * C92226) *
                         C92362 +
                     (C41417 * C14780 + C41418 * C92333 + C41407 * C14781 +
                      C41408 * C92226) *
                         C80417) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C14780 +
                      (C36262 * C349 - C92097 * C355) * C92333 +
                      (C37983 - C37984) * C14781 + (C37985 - C37986) * C92226) *
                         C92361 +
                     ((C43196 - C43197) * C14780 + (C43198 - C43199) * C92333 +
                      (C42280 - C42281) * C14781 + (C42282 - C42283) * C92226) *
                         C92362 +
                     ((C43200 - C43201) * C14780 + (C43202 - C43203) * C92333 +
                      (C42284 - C42285) * C14781 + (C42286 - C42287) * C92226) *
                         C80417) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C14780 +
                      (C92097 * C356 - C36262 * C350) * C92333 +
                      (C92097 * C804 - C36262 * C795) * C14781 +
                      (C92097 * C1018 - C36262 * C1010) * C92226) *
                         C92361 +
                     ((C92097 * C1385 - C36262 * C1376) * C14780 +
                      (C92097 * C1599 - C36262 * C1591) * C92333 +
                      (C92097 * C3365 - C36262 * C3359) * C14781 +
                      (C92097 * C3593 - C36262 * C3589) * C92226) *
                         C92362 +
                     ((C92097 * C1395 - C36262 * C1381) * C14780 +
                      (C92097 * C1603 - C36262 * C1595) * C92333 +
                      (C92097 * C11785 - C36262 * C11784) * C14781 +
                      (C92097 * C12107 - C36262 * C12106) * C92226) *
                         C80417) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C14780 +
                      (C92097 * C354 - C36262 * C348) * C92333 +
                      (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                         C92361 +
                     ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
                      C44149 * C14781 + C44150 * C92226) *
                         C92362 +
                     C86973 * C80417) *
                        C1372 +
                    (((C41400 - C41399) * C14780 + (C41402 - C41401) * C92333 +
                      C44151 * C14781 + C44152 * C92226) *
                         C92361 +
                     ((C41404 - C41403) * C14780 + (C41406 - C41405) * C92333 +
                      C44153 * C14781 + C44154 * C92226) *
                         C92362 +
                     ((C41409 - C41410) * C14780 + (C41411 - C41412) * C92333 +
                      (C41413 - C41414) * C14781 + (C41415 - C41416) * C92226) *
                         C80417) *
                        C1373 +
                    (C86973 * C92361 +
                     (C72043 * C14780 + C72044 * C92333 +
                      (C41414 - C41413) * C14781 + (C41416 - C41415) * C92226) *
                         C92362 +
                     ((C72046 - C72045) * C14780 + (C72048 - C72047) * C92333 +
                      (C92097 * C41106 - C36262 * C41105) * C14781 +
                      (C92097 * C41397 - C36262 * C41396) * C92226) *
                         C80417) *
                        C1374) *
                   C92136 * C92124) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92097 * C92361 +
           (C27066 + C27067) * C92097 * C92362 +
           (C27071 + C27070) * C92097 * C80417) *
              C92150 * C790 -
          ((C14781 * C5802 - C15037 * C5705 - C14781 * C5975 + C92226 * C6060 +
            C14780 * C5801 - C15036 * C5703 - C14780 * C5973 + C92333 * C6059) *
               C92097 * C80417 +
           (C30627 + C30626) * C92097 * C92362 +
           (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
            C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
               C92097 * C92361) *
              C92150 * C791 +
          ((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
            C14781 * C4948 - C15037 * C4815 - C14781 * C5139 + C92226 * C5252) *
               C92097 * C92361 +
           (C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
            C14781 * C8588 - C15037 * C8454 - C14781 * C8800 + C92226 * C8918) *
               C92097 * C92362 +
           (C14780 * C5802 - C15036 * C5705 - C14780 * C5975 + C92333 * C6060 +
            C14781 * C37332 - C15037 * C37278 - C14781 * C37436 +
            C92226 * C37488) *
               C92097 * C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92097 * C92361 +
           (C27066 + C27067) * C92097 * C92362 +
           (C27071 + C27070) * C92097 * C80417) *
              C92150 * C92136 * C97 -
          ((C27068 + C27069) * C92097 * C80417 + C29389 * C92097 * C92362 +
           (C15076 + C15075) * C92097 * C92361) *
              C92150 * C92136 * C98 +
          (C15081 * C92097 * C92361 + (C18336 + C18335) * C92097 * C92362 +
           (C14780 * C1463 - C15036 * C1381 - C14780 * C1595 + C92333 * C1661 +
            C14781 * C11886 - C15037 * C11784 - C14781 * C12106 +
            C92226 * C12206) *
               C92097 * C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92097 * C92361 +
           (C27066 + C27067) * C92097 * C92362 + C87057 * C80417) *
              C1372 -
          ((C87062 + C87063) * C92097 * C80417 +
           (C27070 + C27071) * C92097 * C92362 +
           (C27067 + C27066) * C92097 * C92361) *
              C1373 +
          (C87057 * C92361 + (C87063 + C87062) * C92097 * C92362 +
           (C14780 * C11002 - C15036 * C10869 - C14780 * C11193 +
            C92333 * C11308 + C14781 * C41211 - C15037 * C41105 -
            C14781 * C41396 + C92226 * C41499) *
               C92097 * C80417) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C14780 +
           (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
            C80417 * C1717 - C80568 * C1593) *
               C92333 +
           (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
           (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
              C92097 * C92150 * C790 +
          ((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C14780 +
           (C86379 - C86378 + C86381 - C86380 + C86383 - C86382) * C92333 +
           (C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C14781 +
           (C86384 - C86385 + C86386 - C86387 + C86388 - C86389) * C92226) *
              C92097 * C92150 * C791 +
          ((C86145 - C86144 + C86147 - C86146 + C86149 - C86148) * C14780 +
           (C86385 - C86384 + C86387 - C86386 + C86389 - C86388) * C92333 +
           (C92361 * C5030 - C80566 * C4815 + C92362 * C8690 - C80567 * C8454 +
            C80417 * C37384 - C80568 * C37278) *
               C14781 +
           (C92361 * C5329 - C80566 * C5139 + C92362 * C9018 - C80567 * C8800 +
            C80417 * C37539 - C80568 * C37436) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C14780 +
           (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
            C80417 * C1717 - C80568 * C1593) *
               C92333 +
           (C92361 * C942 - C80566 * C797 + C92362 * C3513 - C80567 * C3357 +
            C80417 * C5887 - C80568 * C5703) *
               C14781 +
           (C92361 * C1132 - C80566 * C1008 + C92362 * C3731 - C80567 * C3587 +
            C80417 * C6139 - C80568 * C5973) *
               C92226) *
              C92097 * C92150 * C92136 * C97 +
          ((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C14780 +
           (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92333 +
           (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C14781 +
           (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92226) *
              C92097 * C92150 * C92136 * C98 +
          ((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C14780 +
           (C80823 - C80822 + C80825 - C80824 + C80827 - C80826) * C92333 +
           (C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
            C80417 * C11994 - C80568 * C11784) *
               C14781 +
           (C92361 * C1134 - C80566 * C1010 + C92362 * C3733 - C80567 * C3589 +
            C80417 * C12319 - C80568 * C12106) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C14780 +
           (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
            C80417 * C1717 - C80568 * C1593) *
               C92333 +
           (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
           (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
              C92097 * C1372 +
          ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
            C80568 * C10868 - C80417 * C11109) *
               C14780 +
           (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 - C92362 * C1717 +
            C80568 * C11191 - C80417 * C11419) *
               C92333 +
           (C80566 * C3357 - C92361 * C3513 + C80567 * C5703 - C92362 * C5887 +
            C80568 * C13749 - C80417 * C13979) *
               C14781 +
           (C80566 * C3587 - C92361 * C3731 + C80567 * C5973 - C92362 * C6139 +
            C80568 * C14081 - C80417 * C14309) *
               C92226) *
              C92097 * C1373 +
          ((C92361 * C1527 - C80566 * C1379 + C92362 * C11109 -
            C80567 * C10868 + C80417 * C11111 - C80568 * C10869) *
               C14780 +
           (C92361 * C1717 - C80566 * C1593 + C92362 * C11419 -
            C80567 * C11191 + C80417 * C11421 - C80568 * C11193) *
               C92333 +
           (C92361 * C5887 - C80566 * C5703 + C92362 * C13979 -
            C80567 * C13749 + C80417 * C41320 - C80568 * C41105) *
               C14781 +
           (C92361 * C6139 - C80566 * C5973 + C92362 * C14309 -
            C80567 * C14081 + C80417 * C41618 - C80568 * C41396) *
               C92226) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C80566 +
                      (C92097 * C573 - C36262 * C567) * C92361 +
                      (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
                      C41417 * C80568 + C41705 * C80417) *
                         C92333 +
                     ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
                      C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
                      C41700 * C80417) *
                         C92226) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C80566 + (C37105 - C37104) * C92361 +
                      C44151 * C80567 + C44488 * C92362 + C44153 * C80568 +
                      C44489 * C80417) *
                         C92333 +
                     ((C36932 - C36931) * C80566 + (C37108 - C37107) * C92361 +
                      C60428 * C80567 + C60749 * C92362 +
                      (C40600 - C40601) * C80568 + (C40840 - C40841) * C80417) *
                         C92226) *
                        C92150 * C791 +
                    ((C36943 * C80566 + C37114 * C92361 + C57085 * C80567 +
                      C57319 * C92362 + (C40601 - C40600) * C80568 +
                      (C40841 - C40840) * C80417) *
                         C92333 +
                     (C36945 * C80566 + C37115 * C92361 +
                      (C39236 - C39235) * C80567 + (C39448 - C39447) * C92362 +
                      (C92097 * C37279 - C36262 * C37278) * C80568 +
                      (C92097 * C37591 - C36262 * C37590) * C80417) *
                         C92226) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C80566 +
                      (C92097 * C573 - C36262 * C567) * C92361 +
                      (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
                      C41417 * C80568 + C41705 * C80417) *
                         C92333 +
                     ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
                      C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
                      C41700 * C80417) *
                         C92226) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C80566 +
                      (C36262 * C568 - C92097 * C574) * C92361 +
                      (C43196 - C43197) * C80567 + (C43512 - C43513) * C92362 +
                      (C43200 - C43201) * C80568 + (C43514 - C43515) * C80417) *
                         C92333 +
                     ((C37983 - C37984) * C80566 + (C38193 - C38194) * C92361 +
                      (C42280 - C42281) * C80567 + (C42582 - C42583) * C92362 +
                      (C42284 - C42285) * C80568 + (C42584 - C42585) * C80417) *
                         C92226) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C80566 +
                      (C92097 * C575 - C36262 * C569) * C92361 +
                      (C92097 * C1385 - C36262 * C1376) * C80567 +
                      (C92097 * C1781 - C36262 * C1773) * C92362 +
                      (C92097 * C1395 - C36262 * C1381) * C80568 +
                      (C92097 * C1785 - C36262 * C1777) * C80417) *
                         C92333 +
                     ((C92097 * C804 - C36262 * C795) * C80566 +
                      (C92097 * C1200 - C36262 * C1192) * C92361 +
                      (C92097 * C3365 - C36262 * C3359) * C80567 +
                      (C92097 * C3807 - C36262 * C3803) * C92362 +
                      (C92097 * C11785 - C36262 * C11784) * C80568 +
                      (C92097 * C12425 - C36262 * C12424) * C80417) *
                         C92226) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C80566 +
                      (C92097 * C573 - C36262 * C567) * C92361 +
                      (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
                      C41417 * C80568 + C41705 * C80417) *
                         C92333 +
                     ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
                      C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
                      C41700 * C80417) *
                         C92226) *
                        C1372 +
                    (((C41400 - C41399) * C80566 + (C41697 - C41696) * C92361 +
                      (C41404 - C41403) * C80567 + (C41699 - C41698) * C92362 +
                      (C41409 - C41410) * C80568 + (C41701 - C41702) * C80417) *
                         C92333 +
                     (C44151 * C80566 + C44488 * C92361 + C44153 * C80567 +
                      C44489 * C92362 + (C41413 - C41414) * C80568 +
                      (C41703 - C41704) * C80417) *
                         C92226) *
                        C1373 +
                    ((C41417 * C80566 + C41705 * C92361 + C72043 * C80567 +
                      C72218 * C92362 + (C72046 - C72045) * C80568 +
                      (C72220 - C72219) * C80417) *
                         C92333 +
                     (C41407 * C80566 + C41700 * C92361 +
                      (C41414 - C41413) * C80567 + (C41704 - C41703) * C92362 +
                      (C92097 * C41106 - C36262 * C41105) * C80568 +
                      (C92097 * C41694 - C36262 * C41693) * C80417) *
                         C92226) *
                        C1374) *
                   C92136 * C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C80566 +
           (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
               C92361 +
           (C26712 - C26713 + C26714 - C26715) * C80567 +
           (C27366 - C27367 + C27368 - C27369) * C92362 +
           (C26721 - C26720 + C26723 - C26722) * C80568 +
           (C27371 - C27370 + C27373 - C27372) * C80417) *
              C92097 * C92150 * C790 +
          ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
               C80566 +
           (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 - C92226 * C1260) *
               C92361 +
           (C30196 - C30197 + C30198 - C30199) * C80567 +
           (C31028 - C31029 + C31030 - C31031) * C92362 +
           (C14780 * C5703 - C92333 * C5801 + C14781 * C5705 - C92226 * C5802) *
               C80568 +
           (C14780 * C6219 - C92333 * C6305 + C14781 * C6221 - C92226 * C6306) *
               C80417) *
              C92097 * C92150 * C791 +
          ((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
               C80566 +
           (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 - C14781 * C5417) *
               C92361 +
           (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 - C14781 * C8454) *
               C80567 +
           (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 - C14781 * C9122) *
               C92362 +
           (C92333 * C5802 - C14780 * C5705 + C92226 * C37332 -
            C14781 * C37278) *
               C80568 +
           (C92333 * C6306 - C14780 * C6221 + C92226 * C37642 -
            C14781 * C37590) *
               C80417) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C80566 +
           (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
               C92361 +
           (C26712 - C26713 + C26714 - C26715) * C80567 +
           (C27366 - C27367 + C27368 - C27369) * C92362 +
           (C26721 - C26720 + C26723 - C26722) * C80568 +
           (C27371 - C27370 + C27373 - C27372) * C80417) *
              C92097 * C92150 * C92136 * C97 +
          ((C14784 - C14783 + C14786 - C14785) * C80566 +
           (C15313 - C15312 + C15315 - C15314) * C92361 + C28988 * C80567 +
           C29789 * C92362 + (C26728 - C26729 + C26730 - C26731) * C80568 +
           (C27374 - C27375 + C27376 - C27377) * C80417) *
              C92097 * C92150 * C92136 * C98 +
          (C14811 * C80566 + C15327 * C92361 +
           (C18006 - C18005 + C18008 - C18007) * C80567 +
           (C18640 - C18639 + C18642 - C18641) * C92362 +
           (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
            C14781 * C11784) *
               C80568 +
           (C92333 * C1843 - C14780 * C1777 + C92226 * C12524 -
            C14781 * C12424) *
               C80417) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C80566 +
           (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
               C92361 +
           (C26712 - C26713 + C26714 - C26715) * C80567 +
           (C27366 - C27367 + C27368 - C27369) * C92362 + C86814 * C80568 +
           C87292 * C80417) *
              C92097 * C1372 +
          ((C26713 - C26712 + C26715 - C26714) * C80566 +
           (C27367 - C27366 + C27369 - C27368) * C92361 +
           (C26720 - C26721 + C26722 - C26723) * C80567 +
           (C27370 - C27371 + C27372 - C27373) * C92362 +
           (C86806 - C86807 + C86808 - C86809) * C80568 +
           (C87288 - C87289 + C87290 - C87291) * C80417) *
              C92097 * C1373 +
          (C86814 * C80566 + C87292 * C92361 +
           (C86807 - C86806 + C86809 - C86808) * C80567 +
           (C87289 - C87288 + C87291 - C87290) * C92362 +
           (C92333 * C11002 - C14780 * C10869 + C92226 * C41211 -
            C14781 * C41105) *
               C80568 +
           (C92333 * C11596 - C14780 * C11499 + C92226 * C41779 -
            C14781 * C41693) *
               C80417) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92333 +
           (C86648 + C86649 + C86650) * C92226) *
              C92097 * C92150 * C790 -
          ((C86651 + C86652 + C86653) * C92226 +
           (C86650 + C86649 + C86648) * C92333) *
              C92097 * C92150 * C791 +
          ((C86653 + C86652 + C86651) * C92333 +
           (C80566 * C5030 - C81049 * C4815 - C80566 * C5417 + C92361 * C5596 +
            C80567 * C8690 - C81050 * C8454 - C80567 * C9122 + C92362 * C9332 +
            C80568 * C37384 - C81051 * C37278 - C80568 * C37590 +
            C80417 * C37693) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92333 +
           (C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317 +
            C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
            C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385) *
               C92226) *
              C92097 * C92150 * C92136 * C97 -
          ((C83398 + C83399 + C83400) * C92226 +
           (C81091 + C81090 + C81089) * C92333) *
              C92097 * C92150 * C92136 * C98 +
          ((C81094 + C81093 + C81092) * C92333 +
           (C80566 * C944 - C81049 * C795 - C80566 * C1192 + C92361 * C1315 +
            C80567 * C3515 - C81050 * C3359 - C80567 * C3803 + C92362 * C3947 +
            C80568 * C11994 - C81051 * C11784 - C80568 * C12424 +
            C80417 * C12627) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92333 +
           (C86648 + C86649 + C86650) * C92226) *
              C92097 * C1372 -
          ((C80568 * C13979 - C81051 * C13749 - C80568 * C14409 +
            C80417 * C14619 + C80567 * C5887 - C81050 * C5703 - C80567 * C6219 +
            C92362 * C6385 + C80566 * C3513 - C81049 * C3357 - C80566 * C3801 +
            C92361 * C3945) *
               C92226 +
           (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
            C80417 * C11683 + C80567 * C1527 - C81050 * C1379 - C80567 * C1775 +
            C92362 * C1899 + C80566 * C1523 - C81049 * C1378 - C80566 * C1771 +
            C92361 * C1898) *
               C92333) *
              C92097 * C1373 +
          ((C80566 * C1527 - C81049 * C1379 - C80566 * C1775 + C92361 * C1899 +
            C80567 * C11109 - C81050 * C10868 - C80567 * C11497 +
            C92362 * C11683 + C80568 * C11111 - C81051 * C10869 -
            C80568 * C11499 + C80417 * C11684) *
               C92333 +
           (C80566 * C5887 - C81049 * C5703 - C80566 * C6219 + C92361 * C6385 +
            C80567 * C13979 - C81050 * C13749 - C80567 * C14409 +
            C92362 * C14619 + C80568 * C41320 - C81051 * C41105 -
            C80568 * C41693 + C80417 * C41869) *
               C92226) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C92361 +
             C41134 * C92362 + C41135 * C80417) *
                C92333 +
            (C85978 + C85979 + C85980) * C92226) *
               C2664 -
           ((C41136 * C80417 + C40346 * C92362 + C39015 * C92361) * C92226 +
            (C41137 * C80417 + C41135 * C92362 + C41134 * C92361) * C92333) *
               C2665) *
              C92136 * C1971 +
          (((C42892 * C92361 + C42893 * C92362 + C72992 * C80417) * C92333 +
            (C41982 * C92361 + C41983 * C92362 +
             (C36262 * C13753 - C36263 * C13750 - C36262 * C13754 +
              C92097 * C13756) *
                 C80417) *
                C92226) *
               C2665 -
           ((C87467 + C87466 + C87465) * C92226 +
            (C42893 * C80417 + C42892 * C92362 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C92361) *
                C92333) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                 C36262 +
             (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                 C92097) *
                C92361 +
            ((C26712 - C26713 + C26714 - C26715) * C36262 +
             (C26716 - C26717 + C26718 - C26719) * C92097) *
                C92362 +
            C86818 * C80417) *
               C2664 +
           (((C26713 - C26712 + C26715 - C26714) * C36262 +
             (C26717 - C26716 + C26719 - C26718) * C92097) *
                C92361 +
            ((C26720 - C26721 + C26722 - C26723) * C36262 +
             (C26724 - C26725 + C26726 - C26727) * C92097) *
                C92362 +
            ((C86806 - C86807 + C86808 - C86809) * C36262 +
             (C86810 - C86811 + C86812 - C86813) * C92097) *
                C80417) *
               C2665) *
              C92136 * C1971 +
          ((((C14784 - C14783 + C14786 - C14785) * C36262 +
             (C14788 - C14787 + C14790 - C14789) * C92097) *
                C92361 +
            (C28988 * C36262 + C28989 * C92097) * C92362 +
            ((C26728 - C26729 + C26730 - C26731) * C36262 +
             (C26732 - C26733 + C26734 - C26735) * C92097) *
                C80417) *
               C2664 +
           ((C28986 * C36262 + C28987 * C92097) * C92361 +
            ((C26729 - C26728 + C26731 - C26730) * C36262 +
             (C26733 - C26732 + C26735 - C26734) * C92097) *
                C92362 +
            ((C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
              C14781 * C13750) *
                 C36262 +
             (C92333 * C11005 - C14780 * C10872 + C92226 * C13872 -
              C14781 * C13754) *
                 C92097) *
                C80417) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C36262 +
             (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
              C80417 * C1535 - C80568 * C1392) *
                 C92097) *
                C92333 +
            ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
             (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
                C92226) *
               C2664 +
           (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 -
              C92362 * C1527 + C80568 * C10868 - C80417 * C11109) *
                 C36262 +
             (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 -
              C92362 * C1535 + C80568 * C10874 - C80417 * C11113) *
                 C92097) *
                C92333 +
            ((C80566 * C3357 - C92361 * C3513 + C80567 * C5703 -
              C92362 * C5887 + C80568 * C13749 - C80417 * C13979) *
                 C36262 +
             (C80566 * C3362 - C92361 * C3517 + C80567 * C5712 -
              C92362 * C5893 + C80568 * C13752 - C80417 * C13981) *
                 C92097) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C36262 +
             (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92097) *
                C92333 +
            ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C36262 +
             (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92097) *
                C92226) *
               C2664 +
           (((C83710 - C83709 + C83712 - C83711 + C83714 - C83713) * C36262 +
             (C83716 - C83715 + C83718 - C83717 + C83720 - C83719) * C92097) *
                C92333 +
            ((C92361 * C3514 - C80566 * C3358 + C92362 * C5888 -
              C80567 * C5704 + C80417 * C13980 - C80568 * C13750) *
                 C36262 +
             (C92361 * C3518 - C80566 * C3364 + C92362 * C5894 -
              C80567 * C5714 + C80417 * C13982 - C80568 * C13754) *
                 C92097) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C14780 +
             (C92097 * C354 - C36262 * C348) * C92333 +
             (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                C92361 +
            ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
             C44149 * C14781 + C44150 * C92226) *
                C92362 +
            C86973 * C80417) *
               C2664 +
           (((C41400 - C41399) * C14780 + (C41402 - C41401) * C92333 +
             C44151 * C14781 + C44152 * C92226) *
                C92361 +
            ((C41404 - C41403) * C14780 + (C41406 - C41405) * C92333 +
             C44153 * C14781 + C44154 * C92226) *
                C92362 +
            ((C41409 - C41410) * C14780 + (C41411 - C41412) * C92333 +
             (C41413 - C41414) * C14781 + (C41415 - C41416) * C92226) *
                C80417) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C14780 +
             (C36262 * C349 - C92097 * C355) * C92333 +
             (C37983 - C37984) * C14781 + (C37985 - C37986) * C92226) *
                C92361 +
            ((C43196 - C43197) * C14780 + (C43198 - C43199) * C92333 +
             (C42280 - C42281) * C14781 + (C42282 - C42283) * C92226) *
                C92362 +
            ((C43200 - C43201) * C14780 + (C43202 - C43203) * C92333 +
             (C42284 - C42285) * C14781 + (C42286 - C42287) * C92226) *
                C80417) *
               C2664 +
           (((C43197 - C43196) * C14780 + (C43199 - C43198) * C92333 +
             (C42281 - C42280) * C14781 + (C42283 - C42282) * C92226) *
                C92361 +
            ((C43201 - C43200) * C14780 + (C43203 - C43202) * C92333 +
             (C42285 - C42284) * C14781 + (C42287 - C42286) * C92226) *
                C92362 +
            ((C73192 - C73191) * C14780 + (C73194 - C73193) * C92333 +
             (C92097 * C13753 - C36262 * C13750) * C14781 +
             (C92097 * C14084 - C36262 * C14082) * C92226) *
                C80417) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
             C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
                C92097 * C92361 +
            (C27066 + C27067) * C92097 * C92362 + C87057 * C80417) *
               C2664 -
           ((C87062 + C87063) * C92097 * C80417 +
            (C27070 + C27071) * C92097 * C92362 +
            (C27067 + C27066) * C92097 * C92361) *
               C2665) *
              C92136 * C1971 +
          ((C29388 * C92097 * C92361 + (C27069 + C27068) * C92097 * C92362 +
            (C14780 * C11001 - C15036 * C10867 - C14780 * C11192 +
             C92333 * C11306 + C14781 * C13870 - C15037 * C13750 -
             C14781 * C14082 + C92226 * C14192) *
                C92097 * C80417) *
               C2665 -
           ((C27068 + C27069) * C92097 * C80417 + C29389 * C92097 * C92362 +
            (C15076 + C15075) * C92097 * C92361) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C14780 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92333 +
            (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
            (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
               C92097 * C2664 +
           ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C14780 +
            (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 - C92362 * C1717 +
             C80568 * C11191 - C80417 * C11419) *
                C92333 +
            (C80566 * C3357 - C92361 * C3513 + C80567 * C5703 - C92362 * C5887 +
             C80568 * C13749 - C80417 * C13979) *
                C14781 +
            (C80566 * C3587 - C92361 * C3731 + C80567 * C5973 - C92362 * C6139 +
             C80568 * C14081 - C80417 * C14309) *
                C92226) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C14780 +
            (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92333 +
            (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C14781 +
            (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92226) *
               C92097 * C2664 +
           ((C83710 - C83709 + C83712 - C83711 + C83714 - C83713) * C14780 +
            (C84028 - C84027 + C84030 - C84029 + C84032 - C84031) * C92333 +
            (C92361 * C3514 - C80566 * C3358 + C92362 * C5888 - C80567 * C5704 +
             C80417 * C13980 - C80568 * C13750) *
                C14781 +
            (C92361 * C3732 - C80566 * C3588 + C92362 * C6141 - C80567 * C5974 +
             C80417 * C14310 - C80568 * C14082) *
                C92226) *
               C92097 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C80566 +
             (C92097 * C573 - C36262 * C567) * C92361 +
             (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
             C41417 * C80568 + C41705 * C80417) *
                C92333 +
            ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
             C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
             C41700 * C80417) *
                C92226) *
               C2664 +
           (((C41400 - C41399) * C80566 + (C41697 - C41696) * C92361 +
             (C41404 - C41403) * C80567 + (C41699 - C41698) * C92362 +
             (C41409 - C41410) * C80568 + (C41701 - C41702) * C80417) *
                C92333 +
            (C44151 * C80566 + C44488 * C92361 + C44153 * C80567 +
             C44489 * C92362 + (C41413 - C41414) * C80568 +
             (C41703 - C41704) * C80417) *
                C92226) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C80566 +
             (C36262 * C568 - C92097 * C574) * C92361 +
             (C43196 - C43197) * C80567 + (C43512 - C43513) * C92362 +
             (C43200 - C43201) * C80568 + (C43514 - C43515) * C80417) *
                C92333 +
            ((C37983 - C37984) * C80566 + (C38193 - C38194) * C92361 +
             (C42280 - C42281) * C80567 + (C42582 - C42583) * C92362 +
             (C42284 - C42285) * C80568 + (C42584 - C42585) * C80417) *
                C92226) *
               C2664 +
           (((C43197 - C43196) * C80566 + (C43513 - C43512) * C92361 +
             (C43201 - C43200) * C80567 + (C43515 - C43514) * C92362 +
             (C73192 - C73191) * C80568 + (C73397 - C73396) * C80417) *
                C92333 +
            ((C42281 - C42280) * C80566 + (C42583 - C42582) * C92361 +
             (C42285 - C42284) * C80567 + (C42585 - C42584) * C92362 +
             (C92097 * C13753 - C36262 * C13750) * C80568 +
             (C92097 * C14412 - C36262 * C14410) * C80417) *
                C92226) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C80566 +
            (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
                C92361 +
            (C26712 - C26713 + C26714 - C26715) * C80567 +
            (C27366 - C27367 + C27368 - C27369) * C92362 + C86814 * C80568 +
            C87292 * C80417) *
               C92097 * C2664 +
           ((C26713 - C26712 + C26715 - C26714) * C80566 +
            (C27367 - C27366 + C27369 - C27368) * C92361 +
            (C26720 - C26721 + C26722 - C26723) * C80567 +
            (C27370 - C27371 + C27372 - C27373) * C92362 +
            (C86806 - C86807 + C86808 - C86809) * C80568 +
            (C87288 - C87289 + C87290 - C87291) * C80417) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C14784 - C14783 + C14786 - C14785) * C80566 +
            (C15313 - C15312 + C15315 - C15314) * C92361 + C28988 * C80567 +
            C29789 * C92362 + (C26728 - C26729 + C26730 - C26731) * C80568 +
            (C27374 - C27375 + C27376 - C27377) * C80417) *
               C92097 * C2664 +
           (C28986 * C80566 + C29788 * C92361 +
            (C26729 - C26728 + C26731 - C26730) * C80567 +
            (C27375 - C27374 + C27377 - C27376) * C92362 +
            (C92333 * C11001 - C14780 * C10867 + C92226 * C13870 -
             C14781 * C13750) *
                C80568 +
            (C92333 * C11595 - C14780 * C11498 + C92226 * C14516 -
             C14781 * C14410) *
                C80417) *
               C92097 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80566 * C266 - C81049 * C108 - C80566 * C567 +
                       C92361 * C702 + C80567 * C1523 - C81050 * C1378 -
                       C80567 * C1771 + C92362 * C1898 + C80568 * C1527 -
                       C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
                          C92333 +
                      (C86648 + C86649 + C86650) * C92226) *
                         C92097 * C2664 -
                     ((C80568 * C13979 - C81051 * C13749 - C80568 * C14409 +
                       C80417 * C14619 + C80567 * C5887 - C81050 * C5703 -
                       C80567 * C6219 + C92362 * C6385 + C80566 * C3513 -
                       C81049 * C3357 - C80566 * C3801 + C92361 * C3945) *
                          C92226 +
                      (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
                       C80417 * C11683 + C80567 * C1527 - C81050 * C1379 -
                       C80567 * C1775 + C92362 * C1899 + C80566 * C1523 -
                       C81049 * C1378 - C80566 * C1771 + C92361 * C1898) *
                          C92333) *
                         C92097 * C2665) *
                        C92136 * C1971 +
                    (((C84351 + C84350 + C84349) * C92333 +
                      (C80566 * C3514 - C81049 * C3358 - C80566 * C3802 +
                       C92361 * C3946 + C80567 * C5888 - C81050 * C5704 -
                       C80567 * C6220 + C92362 * C6387 + C80568 * C13980 -
                       C81051 * C13750 - C80568 * C14410 + C80417 * C14620) *
                          C92226) *
                         C92097 * C2665 -
                     ((C83398 + C83399 + C83400) * C92226 +
                      (C81091 + C81090 + C81089) * C92333) *
                         C92097 * C2664) *
                        C92136 * C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92361 +
            C41134 * C92362 + C41135 * C80417) *
               C92333 +
           (C36751 * C92361 + C39015 * C92362 + C40346 * C80417) * C92226) *
              C92150 * C92136 * C97 -
          ((C41983 * C80417 + C41982 * C92362 + C37779 * C92361) * C92226 +
           (C42893 * C80417 + C42892 * C92362 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C92361) *
               C92333) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C92361 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92362 +
            (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 +
             C92097 * C1405) *
                C80417) *
               C92333 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C92361 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92362 +
            (C36262 * C11785 - C36263 * C11784 - C36262 * C11786 +
             C92097 * C11787) *
                C80417) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C92361 +
            C41134 * C92362 + C41135 * C80417) *
               C92333 +
           (C85978 + C85979 + C85980) * C92226) *
              C92150 * C790 -
          ((C85981 + C85982 + C85983) * C92226 +
           (C85980 + C85979 + C85978) * C92333) *
              C92150 * C791 +
          ((C85983 + C85982 + C85981) * C92333 +
           (C36753 * C92361 + C39013 * C92362 +
            (C36262 * C37279 - C36263 * C37278 - C36262 * C37280 +
             C92097 * C37281) *
                C80417) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C36262 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92097) *
               C92361 +
           ((C26712 - C26713 + C26714 - C26715) * C36262 +
            (C26716 - C26717 + C26718 - C26719) * C92097) *
               C92362 +
           ((C26721 - C26720 + C26723 - C26722) * C36262 +
            (C26725 - C26724 + C26727 - C26726) * C92097) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C14784 - C14783 + C14786 - C14785) * C36262 +
            (C14788 - C14787 + C14790 - C14789) * C92097) *
               C92361 +
           (C28988 * C36262 + C28989 * C92097) * C92362 +
           ((C26728 - C26729 + C26730 - C26731) * C36262 +
            (C26732 - C26733 + C26734 - C26735) * C92097) *
               C80417) *
              C92150 * C92136 * C98 +
          ((C14811 * C36262 + C14812 * C92097) * C92361 +
           ((C18006 - C18005 + C18008 - C18007) * C36262 +
            (C18010 - C18009 + C18012 - C18011) * C92097) *
               C92362 +
           ((C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
             C14781 * C11784) *
                C36262 +
            (C92333 * C1471 - C14780 * C1396 + C92226 * C11887 -
             C14781 * C11786) *
                C92097) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
                C36262 +
            (C92333 * C189 - C14780 * C115 + C92226 * C884 - C14781 * C809) *
                C92097) *
               C92361 +
           ((C26712 - C26713 + C26714 - C26715) * C36262 +
            (C26716 - C26717 + C26718 - C26719) * C92097) *
               C92362 +
           ((C26721 - C26720 + C26723 - C26722) * C36262 +
            (C26725 - C26724 + C26727 - C26726) * C92097) *
               C80417) *
              C92150 * C790 +
          (((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
                C36262 +
            (C14780 * C809 - C92333 * C884 + C14781 * C811 - C92226 * C888) *
                C92097) *
               C92361 +
           ((C30196 - C30197 + C30198 - C30199) * C36262 +
            (C30200 - C30201 + C30202 - C30203) * C92097) *
               C92362 +
           ((C14780 * C5703 - C92333 * C5801 + C14781 * C5705 -
             C92226 * C5802) *
                C36262 +
            (C14780 * C5712 - C92333 * C5807 + C14781 * C5716 -
             C92226 * C5808) *
                C92097) *
               C80417) *
              C92150 * C791 +
          (((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
                C36262 +
            (C92333 * C888 - C14780 * C811 + C92226 * C4952 - C14781 * C4821) *
                C92097) *
               C92361 +
           ((C92333 * C5799 - C14780 * C5702 + C92226 * C8588 -
             C14781 * C8454) *
                C36262 +
            (C92333 * C5805 - C14780 * C5710 + C92226 * C8590 -
             C14781 * C8457) *
                C92097) *
               C92362 +
           ((C92333 * C5802 - C14780 * C5705 + C92226 * C37332 -
             C14781 * C37278) *
                C36262 +
            (C92333 * C5808 - C14780 * C5716 + C92226 * C37333 -
             C14781 * C37280) *
                C92097) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C36262 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92097) *
               C92333 +
           ((C92361 * C942 - C80566 * C797 + C92362 * C3513 - C80567 * C3357 +
             C80417 * C5887 - C80568 * C5703) *
                C36262 +
            (C92361 * C950 - C80566 * C809 + C92362 * C3517 - C80567 * C3362 +
             C80417 * C5893 - C80568 * C5712) *
                C92097) *
               C92226) *
              C92150 * C92136 * C97 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C36262 +
            (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92097) *
               C92333 +
           ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C36262 +
            (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92097) *
               C92226) *
              C92150 * C92136 * C98 +
          (((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C36262 +
            (C80589 - C80588 + C80591 - C80590 + C80593 - C80592) * C92097) *
               C92333 +
           ((C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
             C80417 * C11994 - C80568 * C11784) *
                C36262 +
            (C92361 * C952 - C80566 * C805 + C92362 * C3519 - C80567 * C3366 +
             C80417 * C11995 - C80568 * C11786) *
                C92097) *
               C92226) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C36262 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92097) *
               C92333 +
           ((C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C36262 +
            (C86138 - C86139 + C86140 - C86141 + C86142 - C86143) * C92097) *
               C92226) *
              C92150 * C790 +
          (((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C36262 +
            (C86139 - C86138 + C86141 - C86140 + C86143 - C86142) * C92097) *
               C92333 +
           ((C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C36262 +
            (C86150 - C86151 + C86152 - C86153 + C86154 - C86155) * C92097) *
               C92226) *
              C92150 * C791 +
          (((C86145 - C86144 + C86147 - C86146 + C86149 - C86148) * C36262 +
            (C86151 - C86150 + C86153 - C86152 + C86155 - C86154) * C92097) *
               C92333 +
           ((C92361 * C5030 - C80566 * C4815 + C92362 * C8690 - C80567 * C8454 +
             C80417 * C37384 - C80568 * C37278) *
                C36262 +
            (C92361 * C5034 - C80566 * C4821 + C92362 * C8692 - C80567 * C8457 +
             C80417 * C37385 - C80568 * C37280) *
                C92097) *
               C92226) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C14780 +
                      (C92097 * C354 - C36262 * C348) * C92333 +
                      (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                         C92361 +
                     ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
                      C44149 * C14781 + C44150 * C92226) *
                         C92362 +
                     (C41417 * C14780 + C41418 * C92333 + C41407 * C14781 +
                      C41408 * C92226) *
                         C80417) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C14780 +
                      (C36262 * C349 - C92097 * C355) * C92333 +
                      (C37983 - C37984) * C14781 + (C37985 - C37986) * C92226) *
                         C92361 +
                     ((C43196 - C43197) * C14780 + (C43198 - C43199) * C92333 +
                      (C42280 - C42281) * C14781 + (C42282 - C42283) * C92226) *
                         C92362 +
                     ((C43200 - C43201) * C14780 + (C43202 - C43203) * C92333 +
                      (C42284 - C42285) * C14781 + (C42286 - C42287) * C92226) *
                         C80417) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C14780 +
                      (C92097 * C356 - C36262 * C350) * C92333 +
                      (C92097 * C804 - C36262 * C795) * C14781 +
                      (C92097 * C1018 - C36262 * C1010) * C92226) *
                         C92361 +
                     ((C92097 * C1385 - C36262 * C1376) * C14780 +
                      (C92097 * C1599 - C36262 * C1591) * C92333 +
                      (C92097 * C3365 - C36262 * C3359) * C14781 +
                      (C92097 * C3593 - C36262 * C3589) * C92226) *
                         C92362 +
                     ((C92097 * C1395 - C36262 * C1381) * C14780 +
                      (C92097 * C1603 - C36262 * C1595) * C92333 +
                      (C92097 * C11785 - C36262 * C11784) * C14781 +
                      (C92097 * C12107 - C36262 * C12106) * C92226) *
                         C80417) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C14780 +
                      (C92097 * C354 - C36262 * C348) * C92333 +
                      (C36927 - C36928) * C14781 + (C36929 - C36930) * C92226) *
                         C92361 +
                     ((C41399 - C41400) * C14780 + (C41401 - C41402) * C92333 +
                      C44149 * C14781 + C44150 * C92226) *
                         C92362 +
                     (C41417 * C14780 + C41418 * C92333 + C41407 * C14781 +
                      C41408 * C92226) *
                         C80417) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C14780 + (C36930 - C36929) * C92333 +
                      (C36932 - C36931) * C14781 + (C36934 - C36933) * C92226) *
                         C92361 +
                     (C44151 * C14780 + C44152 * C92333 + C60428 * C14781 +
                      C60429 * C92226) *
                         C92362 +
                     (C44153 * C14780 + C44154 * C92333 +
                      (C40600 - C40601) * C14781 + (C40602 - C40603) * C92226) *
                         C80417) *
                        C92150 * C791 +
                    ((C36943 * C14780 + C36944 * C92333 + C36945 * C14781 +
                      C36946 * C92226) *
                         C92361 +
                     (C57085 * C14780 + C57086 * C92333 +
                      (C39236 - C39235) * C14781 + (C39238 - C39237) * C92226) *
                         C92362 +
                     ((C40601 - C40600) * C14780 + (C40603 - C40602) * C92333 +
                      (C92097 * C37279 - C36262 * C37278) * C14781 +
                      (C92097 * C37437 - C36262 * C37436) * C92226) *
                         C80417) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92097 * C92361 +
           (C27066 + C27067) * C92097 * C92362 +
           (C27071 + C27070) * C92097 * C80417) *
              C92150 * C92136 * C97 -
          ((C27068 + C27069) * C92097 * C80417 + C29389 * C92097 * C92362 +
           (C15076 + C15075) * C92097 * C92361) *
              C92150 * C92136 * C98 +
          (C15081 * C92097 * C92361 + (C18336 + C18335) * C92097 * C92362 +
           (C14780 * C1463 - C15036 * C1381 - C14780 * C1595 + C92333 * C1661 +
            C14781 * C11886 - C15037 * C11784 - C14781 * C12106 +
            C92226 * C12206) *
               C92097 * C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C14780 * C183 - C15036 * C108 - C14780 * C348 + C92333 * C411 +
            C14781 * C876 - C15037 * C797 - C14781 * C1008 + C92226 * C1077) *
               C92097 * C92361 +
           (C27066 + C27067) * C92097 * C92362 +
           (C27071 + C27070) * C92097 * C80417) *
              C92150 * C790 -
          ((C14781 * C5802 - C15037 * C5705 - C14781 * C5975 + C92226 * C6060 +
            C14780 * C5801 - C15036 * C5703 - C14780 * C5973 + C92333 * C6059) *
               C92097 * C80417 +
           (C30627 + C30626) * C92097 * C92362 +
           (C14781 * C880 - C15037 * C798 - C14781 * C1012 + C92226 * C1078 +
            C14780 * C876 - C15036 * C797 - C14780 * C1008 + C92333 * C1077) *
               C92097 * C92361) *
              C92150 * C791 +
          ((C14780 * C880 - C15036 * C798 - C14780 * C1012 + C92333 * C1078 +
            C14781 * C4948 - C15037 * C4815 - C14781 * C5139 + C92226 * C5252) *
               C92097 * C92361 +
           (C14780 * C5799 - C15036 * C5702 - C14780 * C5971 + C92333 * C6058 +
            C14781 * C8588 - C15037 * C8454 - C14781 * C8800 + C92226 * C8918) *
               C92097 * C92362 +
           (C14780 * C5802 - C15036 * C5705 - C14780 * C5975 + C92333 * C6060 +
            C14781 * C37332 - C15037 * C37278 - C14781 * C37436 +
            C92226 * C37488) *
               C92097 * C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C14780 +
           (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
            C80417 * C1717 - C80568 * C1593) *
               C92333 +
           (C92361 * C942 - C80566 * C797 + C92362 * C3513 - C80567 * C3357 +
            C80417 * C5887 - C80568 * C5703) *
               C14781 +
           (C92361 * C1132 - C80566 * C1008 + C92362 * C3731 - C80567 * C3587 +
            C80417 * C6139 - C80568 * C5973) *
               C92226) *
              C92097 * C92150 * C92136 * C97 +
          ((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C14780 +
           (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92333 +
           (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C14781 +
           (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92226) *
              C92097 * C92150 * C92136 * C98 +
          ((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C14780 +
           (C80823 - C80822 + C80825 - C80824 + C80827 - C80826) * C92333 +
           (C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
            C80417 * C11994 - C80568 * C11784) *
               C14781 +
           (C92361 * C1134 - C80566 * C1010 + C92362 * C3733 - C80567 * C3589 +
            C80417 * C12319 - C80568 * C12106) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C14780 +
           (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
            C80417 * C1717 - C80568 * C1593) *
               C92333 +
           (C86132 - C86133 + C86134 - C86135 + C86136 - C86137) * C14781 +
           (C86378 - C86379 + C86380 - C86381 + C86382 - C86383) * C92226) *
              C92097 * C92150 * C790 +
          ((C86133 - C86132 + C86135 - C86134 + C86137 - C86136) * C14780 +
           (C86379 - C86378 + C86381 - C86380 + C86383 - C86382) * C92333 +
           (C86144 - C86145 + C86146 - C86147 + C86148 - C86149) * C14781 +
           (C86384 - C86385 + C86386 - C86387 + C86388 - C86389) * C92226) *
              C92097 * C92150 * C791 +
          ((C86145 - C86144 + C86147 - C86146 + C86149 - C86148) * C14780 +
           (C86385 - C86384 + C86387 - C86386 + C86389 - C86388) * C92333 +
           (C92361 * C5030 - C80566 * C4815 + C92362 * C8690 - C80567 * C8454 +
            C80417 * C37384 - C80568 * C37278) *
               C14781 +
           (C92361 * C5329 - C80566 * C5139 + C92362 * C9018 - C80567 * C8800 +
            C80417 * C37539 - C80568 * C37436) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C80566 +
                      (C92097 * C573 - C36262 * C567) * C92361 +
                      (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
                      C41417 * C80568 + C41705 * C80417) *
                         C92333 +
                     ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
                      C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
                      C41700 * C80417) *
                         C92226) *
                        C92150 * C92136 * C97 +
                    (((C36262 * C109 - C92097 * C116) * C80566 +
                      (C36262 * C568 - C92097 * C574) * C92361 +
                      (C43196 - C43197) * C80567 + (C43512 - C43513) * C92362 +
                      (C43200 - C43201) * C80568 + (C43514 - C43515) * C80417) *
                         C92333 +
                     ((C37983 - C37984) * C80566 + (C38193 - C38194) * C92361 +
                      (C42280 - C42281) * C80567 + (C42582 - C42583) * C92362 +
                      (C42284 - C42285) * C80568 + (C42584 - C42585) * C80417) *
                         C92226) *
                        C92150 * C92136 * C98 +
                    (((C92097 * C118 - C36262 * C110) * C80566 +
                      (C92097 * C575 - C36262 * C569) * C92361 +
                      (C92097 * C1385 - C36262 * C1376) * C80567 +
                      (C92097 * C1781 - C36262 * C1773) * C92362 +
                      (C92097 * C1395 - C36262 * C1381) * C80568 +
                      (C92097 * C1785 - C36262 * C1777) * C80417) *
                         C92333 +
                     ((C92097 * C804 - C36262 * C795) * C80566 +
                      (C92097 * C1200 - C36262 * C1192) * C92361 +
                      (C92097 * C3365 - C36262 * C3359) * C80567 +
                      (C92097 * C3807 - C36262 * C3803) * C92362 +
                      (C92097 * C11785 - C36262 * C11784) * C80568 +
                      (C92097 * C12425 - C36262 * C12424) * C80417) *
                         C92226) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92097 * C114 - C36262 * C108) * C80566 +
                      (C92097 * C573 - C36262 * C567) * C92361 +
                      (C41399 - C41400) * C80567 + (C41696 - C41697) * C92362 +
                      C41417 * C80568 + C41705 * C80417) *
                         C92333 +
                     ((C36927 - C36928) * C80566 + (C37104 - C37105) * C92361 +
                      C44149 * C80567 + C44487 * C92362 + C41407 * C80568 +
                      C41700 * C80417) *
                         C92226) *
                        C92150 * C790 +
                    (((C36928 - C36927) * C80566 + (C37105 - C37104) * C92361 +
                      C44151 * C80567 + C44488 * C92362 + C44153 * C80568 +
                      C44489 * C80417) *
                         C92333 +
                     ((C36932 - C36931) * C80566 + (C37108 - C37107) * C92361 +
                      C60428 * C80567 + C60749 * C92362 +
                      (C40600 - C40601) * C80568 + (C40840 - C40841) * C80417) *
                         C92226) *
                        C92150 * C791 +
                    ((C36943 * C80566 + C37114 * C92361 + C57085 * C80567 +
                      C57319 * C92362 + (C40601 - C40600) * C80568 +
                      (C40841 - C40840) * C80417) *
                         C92333 +
                     (C36945 * C80566 + C37115 * C92361 +
                      (C39236 - C39235) * C80567 + (C39448 - C39447) * C92362 +
                      (C92097 * C37279 - C36262 * C37278) * C80568 +
                      (C92097 * C37591 - C36262 * C37590) * C80417) *
                         C92226) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C80566 +
           (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
               C92361 +
           (C26712 - C26713 + C26714 - C26715) * C80567 +
           (C27366 - C27367 + C27368 - C27369) * C92362 +
           (C26721 - C26720 + C26723 - C26722) * C80568 +
           (C27371 - C27370 + C27373 - C27372) * C80417) *
              C92097 * C92150 * C92136 * C97 +
          ((C14784 - C14783 + C14786 - C14785) * C80566 +
           (C15313 - C15312 + C15315 - C15314) * C92361 + C28988 * C80567 +
           C29789 * C92362 + (C26728 - C26729 + C26730 - C26731) * C80568 +
           (C27374 - C27375 + C27376 - C27377) * C80417) *
              C92097 * C92150 * C92136 * C98 +
          (C14811 * C80566 + C15327 * C92361 +
           (C18006 - C18005 + C18008 - C18007) * C80567 +
           (C18640 - C18639 + C18642 - C18641) * C92362 +
           (C92333 * C1463 - C14780 * C1381 + C92226 * C11886 -
            C14781 * C11784) *
               C80568 +
           (C92333 * C1843 - C14780 * C1777 + C92226 * C12524 -
            C14781 * C12424) *
               C80417) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92333 * C183 - C14780 * C108 + C92226 * C876 - C14781 * C797) *
               C80566 +
           (C92333 * C629 - C14780 * C567 + C92226 * C1256 - C14781 * C1190) *
               C92361 +
           (C26712 - C26713 + C26714 - C26715) * C80567 +
           (C27366 - C27367 + C27368 - C27369) * C92362 +
           (C26721 - C26720 + C26723 - C26722) * C80568 +
           (C27371 - C27370 + C27373 - C27372) * C80417) *
              C92097 * C92150 * C790 +
          ((C14780 * C797 - C92333 * C876 + C14781 * C798 - C92226 * C880) *
               C80566 +
           (C14780 * C1190 - C92333 * C1256 + C14781 * C1194 - C92226 * C1260) *
               C92361 +
           (C30196 - C30197 + C30198 - C30199) * C80567 +
           (C31028 - C31029 + C31030 - C31031) * C92362 +
           (C14780 * C5703 - C92333 * C5801 + C14781 * C5705 - C92226 * C5802) *
               C80568 +
           (C14780 * C6219 - C92333 * C6305 + C14781 * C6221 - C92226 * C6306) *
               C80417) *
              C92097 * C92150 * C791 +
          ((C92333 * C880 - C14780 * C798 + C92226 * C4948 - C14781 * C4815) *
               C80566 +
           (C92333 * C1260 - C14780 * C1194 + C92226 * C5517 - C14781 * C5417) *
               C92361 +
           (C92333 * C5799 - C14780 * C5702 + C92226 * C8588 - C14781 * C8454) *
               C80567 +
           (C92333 * C6303 - C14780 * C6217 + C92226 * C9232 - C14781 * C9122) *
               C92362 +
           (C92333 * C5802 - C14780 * C5705 + C92226 * C37332 -
            C14781 * C37278) *
               C80568 +
           (C92333 * C6306 - C14780 * C6221 + C92226 * C37642 -
            C14781 * C37590) *
               C80417) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92333 +
           (C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317 +
            C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
            C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385) *
               C92226) *
              C92097 * C92150 * C92136 * C97 -
          ((C83398 + C83399 + C83400) * C92226 +
           (C81091 + C81090 + C81089) * C92333) *
              C92097 * C92150 * C92136 * C98 +
          ((C81094 + C81093 + C81092) * C92333 +
           (C80566 * C944 - C81049 * C795 - C80566 * C1192 + C92361 * C1315 +
            C80567 * C3515 - C81050 * C3359 - C80567 * C3803 + C92362 * C3947 +
            C80568 * C11994 - C81051 * C11784 - C80568 * C12424 +
            C80417 * C12627) *
               C92226) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92333 +
           (C86648 + C86649 + C86650) * C92226) *
              C92097 * C92150 * C790 -
          ((C86651 + C86652 + C86653) * C92226 +
           (C86650 + C86649 + C86648) * C92333) *
              C92097 * C92150 * C791 +
          ((C86653 + C86652 + C86651) * C92333 +
           (C80566 * C5030 - C81049 * C4815 - C80566 * C5417 + C92361 * C5596 +
            C80567 * C8690 - C81050 * C8454 - C80567 * C9122 + C92362 * C9332 +
            C80568 * C37384 - C81051 * C37278 - C80568 * C37590 +
            C80417 * C37693) *
               C92226) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C92150 * C1969 -
           ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
            (C66689 + C66688) * C4025) *
               C92150 * C1970) *
              C1971 +
          (((C68227 + C68228) * C4025 + (C68229 + C68230) * C4026 +
            (C37781 * C61039 + (C36262 * C8458 - C36263 * C8455 -
                                C36262 * C8459 + C92097 * C8461) *
                                   C92252) *
                C4027) *
               C92150 * C1970 -
           ((C68230 + C68229) * C4027 + (C68228 + C68227) * C4026 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C61039) *
                C4025) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C92150 * C1969 -
           ((C35403 + C35404 + C35405) * C92252 +
            (C32074 + C32073 + C32072) * C61039) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C33488 + C33489 + C33490) * C61039 +
            (C31254 * C3363 - C31255 * C3358 - C31254 * C3364 + C31249 * C3370 +
             C31256 * C3365 - C31257 * C3359 - C31256 * C3366 + C31250 * C3371 +
             C31258 * C3367 - C31259 * C3360 - C31258 * C3368 +
             C31251 * C3372) *
                C92252) *
               C92177 * C92150 * C1970 -
           ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 + C31251 * C1399 +
             C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
             C31254 * C1387 - C31255 * C1377 - C31254 * C1388 +
             C31249 * C1401) *
                C92252 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C61039) *
               C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C70949 +
            C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
               C92177 * C92150 * C1969 -
           (C41136 * C70952 + C40346 * C70951 + C39015 * C70950 +
            C36751 * C70949) *
               C92177 * C92150 * C1970) *
              C1971 +
          ((C37779 * C70949 + C41982 * C70950 + C41983 * C70951 +
            (C36262 * C13753 - C36263 * C13750 - C36262 * C13754 +
             C92097 * C13756) *
                C70952) *
               C92177 * C92150 * C1970 -
           ((C36262 * C10871 - C36263 * C10867 - C36262 * C10872 +
             C92097 * C10879) *
                C70952 +
            C42893 * C70951 + C42892 * C70950 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C70949) *
               C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C36262 +
             (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
              C4108 * C4821 - C4027 * C4952) *
                 C92097) *
                C61039 +
            ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
              C4108 * C8454 - C4027 * C8588) *
                 C36262 +
             (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
              C4108 * C8457 - C4027 * C8590) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
             (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
                C61039 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
             (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C36262 +
             (C6627 - C6626 + C6629 - C6628 + C6631 - C6630) * C92097) *
                C61039 +
            ((C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
              C4027 * C8589 - C4108 * C8455) *
                 C36262 +
             (C4025 * C3444 - C4106 * C3364 + C4026 * C5806 - C4107 * C5708 +
              C4027 * C8591 - C4108 * C8459) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C31254 +
             (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
             (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
             (C2052 - C2053) * C31251) *
                C61039 +
            ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
             (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
             (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C31254 + (C199 - C198) * C31249 +
             (C201 - C200) * C31256 + (C203 - C202) * C31250 +
             (C205 - C204) * C31258 + (C207 - C206) * C31251) *
                C61039 +
            (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
             C23028 * C31250 + (C2747 - C2748) * C31258 +
             (C2749 - C2750) * C31251) *
                C92252) *
               C92150 * C1969 +
           (((C2047 - C2046) * C31254 + (C2049 - C2048) * C31249 +
             (C2051 - C2050) * C31256 + (C2053 - C2052) * C31250 +
             (C2055 - C2054) * C31258 + (C2057 - C2056) * C31251) *
                C61039 +
            ((C11890 - C11889) * C31254 + (C11892 - C11891) * C31249 +
             (C22060 - C22059) * C31256 + (C22062 - C22061) * C31250 +
             (C92177 * C3442 - C182 * C3360) * C31258 +
             (C92177 * C3446 - C182 * C3368) * C31251) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C36262 +
             (C92177 * C189 - C182 * C115) * C92097) *
                C70949 +
            ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
            C71933 * C70951 + C71936 * C70952) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C36262 +
             (C182 * C809 - C92177 * C884) * C92097) *
                C70949 +
            ((C13874 - C13875) * C36262 + (C13876 - C13877) * C92097) * C70950 +
            ((C13878 - C13879) * C36262 + (C13880 - C13881) * C92097) * C70951 +
            ((C182 * C13749 - C92177 * C13869) * C36262 +
             (C182 * C13752 - C92177 * C13871) * C92097) *
                C70952) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C36262 + (C199 - C198) * C92097) * C70949 +
            (C12882 * C36262 + C12883 * C92097) * C70950 +
            (C12884 * C36262 + C12885 * C92097) * C70951 +
            ((C11023 - C11024) * C36262 + (C11025 - C11026) * C92097) *
                C70952) *
               C92150 * C1969 +
           (((C2047 - C2046) * C36262 + (C2049 - C2048) * C92097) * C70949 +
            ((C11890 - C11889) * C36262 + (C11892 - C11891) * C92097) * C70950 +
            ((C11894 - C11893) * C36262 + (C11896 - C11895) * C92097) * C70951 +
            ((C92177 * C13870 - C182 * C13750) * C36262 +
             (C92177 * C13872 - C182 * C13754) * C92097) *
                C70952) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C92150 * C1969 +
           (((C66844 - C66843 + C66846 - C66845) * C36262 +
             (C66848 - C66847 + C66850 - C66849) * C92097) *
                C4025 +
            ((C66852 - C66851 + C66854 - C66853) * C36262 +
             (C66856 - C66855 + C66858 - C66857) * C92097) *
                C4026 +
            ((C66859 - C66860 + C66861 - C66862) * C36262 +
             (C66863 - C66864 + C66865 - C66866) * C92097) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C36262 +
             (C61197 - C61196 + C61199 - C61198) * C92097) *
                C4025 +
            ((C63447 - C63448 + C63449 - C63450) * C36262 +
             (C63451 - C63452 + C63453 - C63454) * C92097) *
                C4026 +
            ((C68427 - C68428 + C68429 - C68430) * C36262 +
             (C68431 - C68432 + C68433 - C68434) * C92097) *
                C4027) *
               C92150 * C1969 +
           (((C63448 - C63447 + C63450 - C63449) * C36262 +
             (C63452 - C63451 + C63454 - C63453) * C92097) *
                C4025 +
            ((C68428 - C68427 + C68430 - C68429) * C36262 +
             (C68432 - C68431 + C68434 - C68433) * C92097) *
                C4026 +
            ((C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
              C61190 * C8455) *
                 C36262 +
             (C61039 * C5035 - C61189 * C4819 + C92252 * C8693 -
              C61190 * C8459) *
                 C92097) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C92150 * C1969 +
           ((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C31254 +
            (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
                C31249 +
            (C63447 - C63448 + C63449 - C63450) * C31256 +
            (C63451 - C63452 + C63453 - C63454) * C31250 +
            (C63455 - C63456 + C63457 - C63458) * C31258 +
            (C63459 - C63460 + C63461 - C63462) * C31251) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C31254 +
            (C61197 - C61196 + C61199 - C61198) * C31249 +
            (C61201 - C61200 + C61203 - C61202) * C31256 +
            (C61205 - C61204 + C61207 - C61206) * C31250 +
            (C61208 - C61209 + C61210 - C61211) * C31258 +
            (C61212 - C61213 + C61214 - C61215) * C31251) *
               C92177 * C92150 * C1969 +
           ((C63448 - C63447 + C63450 - C63449) * C31254 +
            (C63452 - C63451 + C63454 - C63453) * C31249 +
            (C63456 - C63455 + C63458 - C63457) * C31256 +
            (C63460 - C63459 + C63462 - C63461) * C31250 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C31258 +
            (C61039 * C953 - C61189 * C803 + C92252 * C3520 - C61190 * C3368) *
                C31251) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C36262 +
            (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
             C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
             C71056 * C10874) *
                C92097) *
               C92177 * C92150 * C1969 +
           ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
             C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
             C70952 * C13979) *
                C36262 +
            (C71053 * C809 - C70949 * C950 + C71054 * C3362 - C70950 * C3517 +
             C71055 * C5712 - C70951 * C5893 + C71056 * C13752 -
             C70952 * C13981) *
                C92097) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
             C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
             C70952 * C11110) *
                C36262 +
            (C71053 * C117 - C70949 * C273 + C71054 * C1388 - C70950 * C1532 +
             C71055 * C1394 - C70951 * C1536 + C71056 * C10872 -
             C70952 * C11114) *
                C92097) *
               C92177 * C92150 * C1969 +
           ((C70949 * C943 - C71053 * C796 + C70950 * C3514 - C71054 * C3358 +
             C70951 * C5888 - C71055 * C5704 + C70952 * C13980 -
             C71056 * C13750) *
                C36262 +
            (C70949 * C951 - C71053 * C807 + C70950 * C3518 - C71054 * C3364 +
             C70951 * C5894 - C71055 * C5714 + C70952 * C13982 -
             C71056 * C13754) *
                C92097) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C92150 * C1969 +
           (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
             (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
             (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
                C61039 +
            (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
             (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C4106 +
             (C36262 * C349 - C92097 * C355) * C4025 +
             (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
             (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
                C61039 +
            ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
             (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
             (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
                C92252) *
               C92150 * C1969 +
           (((C37984 - C37983) * C4106 + (C37986 - C37985) * C4025 +
             (C37988 - C37987) * C4107 + (C37990 - C37989) * C4026 +
             (C37992 - C37991) * C4108 + (C37994 - C37993) * C4027) *
                C61039 +
            ((C42281 - C42280) * C4106 + (C42283 - C42282) * C4025 +
             (C58635 - C58634) * C4107 + (C58637 - C58636) * C4026 +
             (C92097 * C8458 - C36262 * C8455) * C4108 +
             (C92097 * C8803 - C36262 * C8801) * C4027) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C92150 * C1969 +
           (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
             (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
                C61039 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
             (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C182 +
             (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
              C31258 * C351 - C31251 * C357) *
                 C92177) *
                C61039 +
            ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 -
              C31250 * C1385 + C31258 * C1375 - C31251 * C1383) *
                 C182 +
             (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 -
              C31250 * C1599 + C31258 * C1592 - C31251 * C1600) *
                 C92177) *
                C92252) *
               C92150 * C1969 +
           (((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C182 +
             (C33808 - C33807 + C33810 - C33809 + C33812 - C33811) * C92177) *
                C61039 +
            ((C31249 * C3363 - C31254 * C3358 + C31250 * C3365 -
              C31256 * C3359 + C31251 * C3367 - C31258 * C3360) *
                 C182 +
             (C31249 * C3592 - C31254 * C3588 + C31250 * C3593 -
              C31256 * C3589 + C31251 * C3594 - C31258 * C3590) *
                 C92177) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C182 +
             (C92097 * C354 - C36262 * C348) * C92177) *
                C70949 +
            ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
            C72049 * C70951 + C72052 * C70952) *
               C92150 * C1969 +
           (((C36928 - C36927) * C182 + (C36930 - C36929) * C92177) * C70949 +
            (C44151 * C182 + C44152 * C92177) * C70950 +
            (C44153 * C182 + C44154 * C92177) * C70951 +
            ((C41413 - C41414) * C182 + (C41415 - C41416) * C92177) * C70952) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C182 +
             (C36262 * C349 - C92097 * C355) * C92177) *
                C70949 +
            ((C43196 - C43197) * C182 + (C43198 - C43199) * C92177) * C70950 +
            ((C43200 - C43201) * C182 + (C43202 - C43203) * C92177) * C70951 +
            ((C36262 * C10867 - C92097 * C10871) * C182 +
             (C36262 * C11192 - C92097 * C11196) * C92177) *
                C70952) *
               C92150 * C1969 +
           (((C37984 - C37983) * C182 + (C37986 - C37985) * C92177) * C70949 +
            ((C42281 - C42280) * C182 + (C42283 - C42282) * C92177) * C70950 +
            ((C42285 - C42284) * C182 + (C42287 - C42286) * C92177) * C70951 +
            ((C92097 * C13753 - C36262 * C13750) * C182 +
             (C92097 * C14084 - C36262 * C14082) * C92177) *
                C70952) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C92150 * C1969 -
           ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
             C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
             C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
                C92097 * C92252 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C92097 * C61039) *
               C92150 * C1970) *
              C1971 +
          (((C6973 + C6972 + C6971) * C92097 * C61039 +
            (C4106 * C3440 - C4363 * C3358 - C4106 * C3588 + C4025 * C3662 +
             C4107 * C5800 - C4364 * C5701 - C4107 * C5972 + C4026 * C6057 +
             C4108 * C8589 - C4365 * C8455 - C4108 * C8801 + C4027 * C8919) *
                C92097 * C92252) *
               C92150 * C1970 -
           ((C7930 + C7931 + C7932) * C92097 * C92252 +
            (C4405 + C4404 + C4403) * C92097 * C61039) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C92150 * C1969 -
           ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
            (C2292 * C31251 + C2293 * C31250 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C31249) *
                C61039) *
               C92150 * C1970) *
              C1971 +
          (((C2293 * C31249 + C2292 * C31250 + C2291 * C31251) * C61039 +
            (C12221 * C31249 + C22379 * C31250 +
             (C182 * C3442 - C410 * C3360 - C182 * C3590 + C92177 * C3664) *
                 C31251) *
                C92252) *
               C92150 * C1970 -
           ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
            (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
                C70949 +
            C72104 * C70950 + C72105 * C70951 + C72106 * C70952) *
               C92150 * C1969 -
           ((C182 * C13869 - C410 * C13749 - C182 * C14081 + C92177 * C14191) *
                C92097 * C70952 +
            C14209 * C92097 * C70951 + C14208 * C92097 * C70950 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92097 * C70949) *
               C92150 * C1970) *
              C1971 +
          ((C2293 * C92097 * C70949 + C12221 * C92097 * C70950 +
            C12220 * C92097 * C70951 +
            (C182 * C13870 - C410 * C13750 - C182 * C14082 + C92177 * C14192) *
                C92097 * C70952) *
               C92150 * C1970 -
           (C11339 * C92097 * C70952 + C9769 * C92097 * C70951 +
            C2986 * C92097 * C70950 + C442 * C92097 * C70949) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C92150 * C1969 +
           ((C66844 - C66843 + C66846 - C66845) * C4106 +
            (C67099 - C67098 + C67101 - C67100) * C4025 +
            (C66852 - C66851 + C66854 - C66853) * C4107 +
            (C67103 - C67102 + C67105 - C67104) * C4026 +
            (C66859 - C66860 + C66861 - C66862) * C4108 +
            (C67106 - C67107 + C67108 - C67109) * C4027) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C4106 +
            (C61445 - C61444 + C61447 - C61446) * C4025 +
            (C63447 - C63448 + C63449 - C63450) * C4107 +
            (C63757 - C63758 + C63759 - C63760) * C4026 +
            (C68427 - C68428 + C68429 - C68430) * C4108 +
            (C68729 - C68730 + C68731 - C68732) * C4027) *
               C92097 * C92150 * C1969 +
           ((C63448 - C63447 + C63450 - C63449) * C4106 +
            (C63758 - C63757 + C63760 - C63759) * C4025 +
            (C68428 - C68427 + C68430 - C68429) * C4107 +
            (C68730 - C68729 + C68732 - C68731) * C4026 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C4108 +
            (C61039 * C5330 - C61189 * C5140 + C92252 * C9019 -
             C61190 * C8801) *
                C4027) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C92150 * C1969 +
           (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                 C182 +
             (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C31249 +
            ((C63447 - C63448 + C63449 - C63450) * C182 +
             (C63757 - C63758 + C63759 - C63760) * C92177) *
                C31250 +
            ((C63455 - C63456 + C63457 - C63458) * C182 +
             (C63761 - C63762 + C63763 - C63764) * C92177) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C182 +
             (C61445 - C61444 + C61447 - C61446) * C92177) *
                C31249 +
            ((C61201 - C61200 + C61203 - C61202) * C182 +
             (C61450 - C61449 + C61452 - C61451) * C92177) *
                C31250 +
            ((C61208 - C61209 + C61210 - C61211) * C182 +
             (C61453 - C61454 + C61455 - C61456) * C92177) *
                C31251) *
               C92150 * C1969 +
           (((C63448 - C63447 + C63450 - C63449) * C182 +
             (C63758 - C63757 + C63760 - C63759) * C92177) *
                C31249 +
            ((C63456 - C63455 + C63458 - C63457) * C182 +
             (C63762 - C63761 + C63764 - C63763) * C92177) *
                C31250 +
            ((C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                 C182 +
             (C61039 * C1135 - C61189 * C1011 + C92252 * C3734 -
              C61190 * C3590) *
                 C92177) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C182 +
            (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
             C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
             C71056 * C11191) *
                C92177) *
               C92097 * C92150 * C1969 +
           ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
             C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
             C70952 * C13979) *
                C182 +
            (C71053 * C1008 - C70949 * C1132 + C71054 * C3587 - C70950 * C3731 +
             C71055 * C5973 - C70951 * C6139 + C71056 * C14081 -
             C70952 * C14309) *
                C92177) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
             C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
             C70952 * C11110) *
                C182 +
            (C71053 * C349 - C70949 * C496 + C71054 * C1590 - C70950 * C1714 +
             C71055 * C1594 - C70951 * C1718 + C71056 * C11192 -
             C70952 * C11420) *
                C92177) *
               C92097 * C92150 * C1969 +
           ((C70949 * C943 - C71053 * C796 + C70950 * C3514 - C71054 * C3358 +
             C70951 * C5888 - C71055 * C5704 + C70952 * C13980 -
             C71056 * C13750) *
                C182 +
            (C70949 * C1133 - C71053 * C1009 + C70950 * C3732 - C71054 * C3588 +
             C70951 * C6141 - C71055 * C5974 + C70952 * C14310 -
             C71056 * C14082) *
                C92177) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C92150 * C1969 +
           (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
             C44151 * C61190 + C44488 * C92252) *
                C4025 +
            ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
             C60428 * C61190 + C60749 * C92252) *
                C4026 +
            ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
             (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C61189 +
             (C36262 * C568 - C92097 * C574) * C61039 +
             (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
                C4025 +
            ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
             (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
                C4026 +
            ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
             (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
                C4027) *
               C92150 * C1969 +
           (((C37984 - C37983) * C61189 + (C38194 - C38193) * C61039 +
             (C42281 - C42280) * C61190 + (C42583 - C42582) * C92252) *
                C4025 +
            ((C37988 - C37987) * C61189 + (C38196 - C38195) * C61039 +
             (C58635 - C58634) * C61190 + (C58933 - C58932) * C92252) *
                C4026 +
            ((C37992 - C37991) * C61189 + (C38198 - C38197) * C61039 +
             (C92097 * C8458 - C36262 * C8455) * C61190 +
             (C92097 * C9125 - C36262 * C9123) * C92252) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C92150 * C1969 +
           ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
            (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C61189 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C61039 +
            (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
             C31258 * C1375 - C31251 * C1383) *
                C61190 +
            (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 - C31250 * C1781 +
             C31258 * C1774 - C31251 * C1782) *
                C92252) *
               C92177 * C92150 * C1969 +
           ((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C61189 +
            (C34136 - C34135 + C34138 - C34137 + C34140 - C34139) * C61039 +
            (C31249 * C3363 - C31254 * C3358 + C31250 * C3365 - C31256 * C3359 +
             C31251 * C3367 - C31258 * C3360) *
                C61190 +
            (C31249 * C3806 - C31254 * C3802 + C31250 * C3807 - C31256 * C3803 +
             C31251 * C3808 - C31258 * C3804) *
                C92252) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C71053 +
            (C92097 * C573 - C36262 * C567) * C70949 +
            (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
            C41417 * C71055 + C41705 * C70951 + C72043 * C71056 +
            C72218 * C70952) *
               C92177 * C92150 * C1969 +
           ((C36928 - C36927) * C71053 + (C37105 - C37104) * C70949 +
            C44151 * C71054 + C44488 * C70950 + C44153 * C71055 +
            C44489 * C70951 + (C41413 - C41414) * C71056 +
            (C41703 - C41704) * C70952) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C36262 * C109 - C92097 * C116) * C71053 +
            (C36262 * C568 - C92097 * C574) * C70949 +
            (C43196 - C43197) * C71054 + (C43512 - C43513) * C70950 +
            (C43200 - C43201) * C71055 + (C43514 - C43515) * C70951 +
            (C36262 * C10867 - C92097 * C10871) * C71056 +
            (C36262 * C11498 - C92097 * C11502) * C70952) *
               C92177 * C92150 * C1969 +
           ((C37984 - C37983) * C71053 + (C38194 - C38193) * C70949 +
            (C42281 - C42280) * C71054 + (C42583 - C42582) * C70950 +
            (C42285 - C42284) * C71055 + (C42585 - C42584) * C70951 +
            (C92097 * C13753 - C36262 * C13750) * C71056 +
            (C92097 * C14412 - C36262 * C14410) * C70952) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C92150 * C1969 +
           ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C61189 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C61039 +
            (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C61190 +
            (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 - C4026 * C6303 +
             C4108 * C9122 - C4027 * C9232) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
            (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
               C92097 * C92150 * C1969 +
           ((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C61189 +
            (C7284 - C7283 + C7286 - C7285 + C7288 - C7287) * C61039 +
            (C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
             C4027 * C8589 - C4108 * C8455) *
                C61190 +
            (C4025 * C3876 - C4106 * C3802 + C4026 * C6304 - C4107 * C6218 +
             C4027 * C9233 - C4108 * C9123) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C61189 +
             (C182 * C1190 - C92177 * C1256) * C61039 +
             (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                C31249 +
            ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
             (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                C31250 +
            ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
             (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
             C13530 * C92252) *
                C31249 +
            ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
             C23662 * C92252) *
                C31250 +
            ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
             (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                C31251) *
               C92150 * C1969 +
           (((C2047 - C2046) * C61189 + (C2503 - C2502) * C61039 +
             (C11890 - C11889) * C61190 + (C12527 - C12526) * C92252) *
                C31249 +
            ((C2051 - C2050) * C61189 + (C2505 - C2504) * C61039 +
             (C22060 - C22059) * C61190 + (C22683 - C22682) * C92252) *
                C31250 +
            ((C2055 - C2054) * C61189 + (C2507 - C2506) * C61039 +
             (C92177 * C3442 - C182 * C3360) * C61190 +
             (C92177 * C3878 - C182 * C3804) * C92252) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C71053 +
            (C92177 * C629 - C182 * C567) * C70949 +
            (C11009 - C11010) * C71054 + (C11599 - C11600) * C70950 +
            C11027 * C71055 + C11608 * C70951 + C71927 * C71056 +
            C72272 * C70952) *
               C92097 * C92150 * C1969 +
           ((C182 * C797 - C92177 * C876) * C71053 +
            (C182 * C1190 - C92177 * C1256) * C70949 +
            (C13874 - C13875) * C71054 + (C14518 - C14519) * C70950 +
            (C13878 - C13879) * C71055 + (C14520 - C14521) * C70951 +
            (C182 * C13749 - C92177 * C13869) * C71056 +
            (C182 * C14409 - C92177 * C14515) * C70952) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C197 - C196) * C71053 + (C637 - C636) * C70949 + C12882 * C71054 +
            C13530 * C70950 + C12884 * C71055 + C13531 * C70951 +
            (C11023 - C11024) * C71056 + (C11606 - C11607) * C70952) *
               C92097 * C92150 * C1969 +
           ((C2047 - C2046) * C71053 + (C2503 - C2502) * C70949 +
            (C11890 - C11889) * C71054 + (C12527 - C12526) * C70950 +
            (C11894 - C11893) * C71055 + (C12529 - C12528) * C70951 +
            (C92177 * C13870 - C182 * C13750) * C71056 +
            (C92177 * C14516 - C182 * C14410) * C70952) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C4025 +
            (C67378 + C67379) * C4026 + C67384 * C4027) *
               C92097 * C92150 * C1969 -
           ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
            (C67379 + C67378) * C4025) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C64086 + C64085) * C4025 + (C69039 + C69040) * C4026 +
            (C61189 * C5031 - C61690 * C4814 - C61189 * C5418 + C61039 * C5595 +
             C61190 * C8691 - C61691 * C8455 - C61190 * C9123 +
             C92252 * C9333) *
                C4027) *
               C92097 * C92150 * C1970 -
           ((C69040 + C69039) * C4027 + (C64085 + C64086) * C4026 +
            (C61730 + C61729) * C4025) *
               C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92177 * C31249 +
            (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
               C92150 * C1969 -
           ((C64083 + C64084) * C92177 * C31251 +
            (C64085 + C64086) * C92177 * C31250 +
            (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
             C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
                C92177 * C31249) *
               C92150 * C1970) *
              C1971 +
          (((C64086 + C64085) * C92177 * C31249 +
            (C64084 + C64083) * C92177 * C31250 +
            (C61189 * C945 - C61690 * C794 - C61189 * C1193 + C61039 * C1314 +
             C61190 * C3516 - C61691 * C3360 - C61190 * C3804 +
             C92252 * C3948) *
                C92177 * C31251) *
               C92150 * C1970 -
           ((C61733 + C61734) * C92177 * C31251 +
            (C61732 + C61731) * C92177 * C31250 +
            (C61730 + C61729) * C92177 * C31249) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
            C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
            C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
            C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
            C70952 * C11683) *
               C92177 * C92097 * C92150 * C1969 -
           (C71056 * C13979 - C71360 * C13749 - C71056 * C14409 +
            C70952 * C14619 + C71055 * C5887 - C71359 * C5703 - C71055 * C6219 +
            C70951 * C6385 + C71054 * C3513 - C71358 * C3357 - C71054 * C3801 +
            C70950 * C3945 + C71053 * C942 - C71357 * C797 - C71053 * C1190 +
            C70949 * C1317) *
               C92177 * C92097 * C92150 * C1970) *
              C1971 +
          ((C71053 * C943 - C71357 * C796 - C71053 * C1191 + C70949 * C1316 +
            C71054 * C3514 - C71358 * C3358 - C71054 * C3802 + C70950 * C3946 +
            C71055 * C5888 - C71359 * C5704 - C71055 * C6220 + C70951 * C6387 +
            C71056 * C13980 - C71360 * C13750 - C71056 * C14410 +
            C70952 * C14620) *
               C92177 * C92097 * C92150 * C1970 -
           (C71056 * C11110 - C71360 * C10867 - C71056 * C11498 +
            C70952 * C11682 + C71055 * C1528 - C71359 * C1380 - C71055 * C1776 +
            C70951 * C1900 + C71054 * C1524 - C71358 * C1377 - C71054 * C1772 +
            C70950 * C1897 + C71053 * C267 - C71357 * C109 - C71053 * C568 +
            C70949 * C703) *
               C92177 * C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C2664 -
           ((C70021 + C70022) * C4027 + (C70023 + C70024) * C4026 +
            (C41135 * C92252 + C41134 * C61039) * C4025) *
               C2665) *
              C1969 +
          (((C70024 + C70023) * C4025 + (C70022 + C70021) * C4026 +
            (C39013 * C61039 + (C36262 * C37279 - C36263 * C37278 -
                                C36262 * C37280 + C92097 * C37281) *
                                   C92252) *
                C4027) *
               C2665 -
           ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
            (C66689 + C66688) * C4025) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C2664 -
           ((C62516 + C62517 + C62518) * C92252 +
            (C62515 + C62514 + C62513) * C61039) *
               C92177 * C2665) *
              C1969 +
          (((C35405 + C35404 + C35403) * C61039 +
            (C31254 * C5711 - C31255 * C5703 - C31254 * C5712 + C31249 * C5721 +
             C31256 * C5713 - C31257 * C5704 - C31256 * C5714 + C31250 * C5722 +
             C31258 * C11785 - C31259 * C11784 - C31258 * C11786 +
             C31251 * C11787) *
                C92252) *
               C92177 * C2665 -
           ((C35403 + C35404 + C35405) * C92252 +
            (C32074 + C32073 + C32072) * C61039) *
               C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C70949 +
            C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
               C92177 * C2664 -
           (C71872 * C70952 + C41137 * C70951 + C41135 * C70950 +
            C41134 * C70949) *
               C92177 * C2665) *
              C1969 +
          ((C39015 * C70949 + C40346 * C70950 + C41136 * C70951 +
            (C36262 * C41106 - C36263 * C41105 - C36262 * C41107 +
             C92097 * C41108) *
                C70952) *
               C92177 * C2665 -
           (C41136 * C70952 + C40346 * C70951 + C39015 * C70950 +
            C36751 * C70949) *
               C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C2664 +
           (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
             (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
                C61039 +
            ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
             (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
                C92252) *
               C2665) *
              C1969 +
          ((((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C36262 +
             (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
              C4108 * C4821 - C4027 * C4952) *
                 C92097) *
                C61039 +
            ((C70123 - C70124 + C70125 - C70126 + C70127 - C70128) * C36262 +
             (C70129 - C70130 + C70131 - C70132 + C70133 - C70134) * C92097) *
                C92252) *
               C2664 +
           (((C70124 - C70123 + C70126 - C70125 + C70128 - C70127) * C36262 +
             (C70130 - C70129 + C70132 - C70131 + C70134 - C70133) * C92097) *
                C61039 +
            ((C4025 * C5801 - C4106 * C5703 + C4026 * C5802 - C4107 * C5705 +
              C4027 * C37332 - C4108 * C37278) *
                 C36262 +
             (C4025 * C5807 - C4106 * C5712 + C4026 * C5808 - C4107 * C5716 +
              C4027 * C37333 - C4108 * C37280) *
                 C92097) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
             C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
             C23028 * C31251) *
                C61039 +
            ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
             C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
             (C9506 - C9507) * C31251) *
                C92252) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C31254 +
             (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
             (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
             (C2052 - C2053) * C31251) *
                C61039 +
            ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
             (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
             (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
                C92252) *
               C2664 +
           (((C13875 - C13874) * C31254 + (C13877 - C13876) * C31249 +
             (C11890 - C11889) * C31256 + (C11892 - C11891) * C31250 +
             (C22060 - C22059) * C31258 + (C22062 - C22061) * C31251) *
                C61039 +
            ((C13879 - C13878) * C31254 + (C13881 - C13880) * C31249 +
             (C11894 - C11893) * C31256 + (C11896 - C11895) * C31250 +
             (C92177 * C11886 - C182 * C11784) * C31258 +
             (C92177 * C11887 - C182 * C11786) * C31251) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C36262 +
             (C92177 * C189 - C182 * C115) * C92097) *
                C70949 +
            ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
            C71933 * C70951 + C71936 * C70952) *
               C2664 +
           (((C11010 - C11009) * C36262 + (C11012 - C11011) * C92097) * C70949 +
            ((C11014 - C11013) * C36262 + (C11016 - C11015) * C92097) * C70950 +
            ((C11019 - C11020) * C36262 + (C11021 - C11022) * C92097) * C70951 +
            ((C71929 - C71930) * C36262 + (C71931 - C71932) * C92097) *
                C70952) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C36262 +
             (C182 * C809 - C92177 * C884) * C92097) *
                C70949 +
            ((C13874 - C13875) * C36262 + (C13876 - C13877) * C92097) * C70950 +
            ((C13878 - C13879) * C36262 + (C13880 - C13881) * C92097) * C70951 +
            ((C73662 - C73663) * C36262 + (C73664 - C73665) * C92097) *
                C70952) *
               C2664 +
           (((C13875 - C13874) * C36262 + (C13877 - C13876) * C92097) * C70949 +
            ((C13879 - C13878) * C36262 + (C13881 - C13880) * C92097) * C70950 +
            ((C73663 - C73662) * C36262 + (C73665 - C73664) * C92097) * C70951 +
            ((C92177 * C41211 - C182 * C41105) * C36262 +
             (C92177 * C41212 - C182 * C41107) * C92097) *
                C70952) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C4025 +
            ((C70233 - C70234 + C70235 - C70236) * C36262 +
             (C70237 - C70238 + C70239 - C70240) * C92097) *
                C4026 +
            ((C70241 - C70242 + C70243 - C70244) * C36262 +
             (C70245 - C70246 + C70247 - C70248) * C92097) *
                C4027) *
               C2665) *
              C1969 +
          ((((C66844 - C66843 + C66846 - C66845) * C36262 +
             (C66848 - C66847 + C66850 - C66849) * C92097) *
                C4025 +
            ((C66852 - C66851 + C66854 - C66853) * C36262 +
             (C66856 - C66855 + C66858 - C66857) * C92097) *
                C4026 +
            ((C66859 - C66860 + C66861 - C66862) * C36262 +
             (C66863 - C66864 + C66865 - C66866) * C92097) *
                C4027) *
               C2664 +
           (((C70234 - C70233 + C70236 - C70235) * C36262 +
             (C70238 - C70237 + C70240 - C70239) * C92097) *
                C4025 +
            ((C70242 - C70241 + C70244 - C70243) * C36262 +
             (C70246 - C70245 + C70248 - C70247) * C92097) *
                C4026 +
            ((C61039 * C8690 - C61189 * C8454 + C92252 * C37384 -
              C61190 * C37278) *
                 C36262 +
             (C61039 * C8692 - C61189 * C8457 + C92252 * C37385 -
              C61190 * C37280) *
                 C92097) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C31254 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C31249 +
            (C64402 - C64403 + C64404 - C64405) * C31256 +
            (C64406 - C64407 + C64408 - C64409) * C31250 +
            (C64410 - C64411 + C64412 - C64413) * C31258 +
            (C64414 - C64415 + C64416 - C64417) * C31251) *
               C92177 * C2665) *
              C1969 +
          (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C31254 +
            (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
                C31249 +
            (C63447 - C63448 + C63449 - C63450) * C31256 +
            (C63451 - C63452 + C63453 - C63454) * C31250 +
            (C63455 - C63456 + C63457 - C63458) * C31258 +
            (C63459 - C63460 + C63461 - C63462) * C31251) *
               C92177 * C2664 +
           ((C61039 * C3513 - C61189 * C3357 + C92252 * C5887 -
             C61190 * C5703) *
                C31254 +
            (C61039 * C3517 - C61189 * C3362 + C92252 * C5893 -
             C61190 * C5712) *
                C31249 +
            (C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
             C61190 * C5704) *
                C31256 +
            (C61039 * C3518 - C61189 * C3364 + C92252 * C5894 -
             C61190 * C5714) *
                C31250 +
            (C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
             C61190 * C11784) *
                C31258 +
            (C61039 * C3519 - C61189 * C3366 + C92252 * C11995 -
             C61190 * C11786) *
                C31251) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C36262 +
            (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
             C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
             C71056 * C10874) *
                C92097) *
               C92177 * C2664 +
           ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
             C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
             C70952 * C11111) *
                C36262 +
            (C71053 * C1390 - C70949 * C1531 + C71054 * C1392 - C70950 * C1535 +
             C71055 * C10874 - C70951 * C11113 + C71056 * C10876 -
             C70952 * C11115) *
                C92097) *
               C92177 * C2665) *
              C1969 +
          (((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
             C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
             C70952 * C13979) *
                C36262 +
            (C71053 * C809 - C70949 * C950 + C71054 * C3362 - C70950 * C3517 +
             C71055 * C5712 - C70951 * C5893 + C71056 * C13752 -
             C70952 * C13981) *
                C92097) *
               C92177 * C2664 +
           ((C70949 * C3513 - C71053 * C3357 + C70950 * C5887 - C71054 * C5703 +
             C70951 * C13979 - C71055 * C13749 + C70952 * C41320 -
             C71056 * C41105) *
                C36262 +
            (C70949 * C3517 - C71053 * C3362 + C70950 * C5893 - C71054 * C5712 +
             C70951 * C13981 - C71055 * C13752 + C70952 * C41321 -
             C71056 * C41107) *
                C92097) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
             C44151 * C4107 + C44152 * C4026 + C60428 * C4108 +
             C60429 * C4027) *
                C61039 +
            ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
             C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
             (C40602 - C40603) * C4027) *
                C92252) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
             (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
             (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
                C61039 +
            (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
             (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
                C92252) *
               C2664 +
           ((C44149 * C4106 + C44150 * C4025 + C57085 * C4107 + C57086 * C4026 +
             (C39236 - C39235) * C4108 + (C39238 - C39237) * C4027) *
                C61039 +
            (C41407 * C4106 + C41408 * C4025 + (C40601 - C40600) * C4107 +
             (C40603 - C40602) * C4026 +
             (C92097 * C37279 - C36262 * C37278) * C4108 +
             (C92097 * C37437 - C36262 * C37436) * C4027) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C2664 +
           (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
             (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
                C61039 +
            ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
             (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
                C92252) *
               C2665) *
              C1969 +
          ((((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
             (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
                C61039 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
             (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
                C92252) *
               C2664 +
           (((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C182 +
             (C35707 - C35706 + C35709 - C35708 + C35711 - C35710) * C92177) *
                C61039 +
            ((C31249 * C5711 - C31254 * C5703 + C31250 * C5713 -
              C31256 * C5704 + C31251 * C11785 - C31258 * C11784) *
                 C182 +
             (C31249 * C5979 - C31254 * C5973 + C31250 * C5980 -
              C31256 * C5974 + C31251 * C12107 - C31258 * C12106) *
                 C92177) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C182 +
             (C92097 * C354 - C36262 * C348) * C92177) *
                C70949 +
            ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
            C72049 * C70951 + C72052 * C70952) *
               C2664 +
           (((C41400 - C41399) * C182 + (C41402 - C41401) * C92177) * C70949 +
            ((C41404 - C41403) * C182 + (C41406 - C41405) * C92177) * C70950 +
            ((C41409 - C41410) * C182 + (C41411 - C41412) * C92177) * C70951 +
            ((C72045 - C72046) * C182 + (C72047 - C72048) * C92177) * C70952) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C182 + (C36930 - C36929) * C92177) * C70949 +
            (C44151 * C182 + C44152 * C92177) * C70950 +
            (C44153 * C182 + C44154 * C92177) * C70951 +
            ((C41413 - C41414) * C182 + (C41415 - C41416) * C92177) * C70952) *
               C2664 +
           ((C44149 * C182 + C44150 * C92177) * C70949 +
            (C41407 * C182 + C41408 * C92177) * C70950 +
            ((C41414 - C41413) * C182 + (C41416 - C41415) * C92177) * C70951 +
            ((C92097 * C41106 - C36262 * C41105) * C182 +
             (C92097 * C41397 - C36262 * C41396) * C92177) *
                C70952) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C2664 -
           ((C67818 + C67819 + C67820) * C92097 * C92252 +
            (C67817 + C67816 + C67815) * C92097 * C61039) *
               C2665) *
              C1969 +
          (((C70463 + C70464 + C70465) * C92097 * C61039 +
            (C4106 * C5801 - C4363 * C5703 - C4106 * C5973 + C4025 * C6059 +
             C4107 * C5802 - C4364 * C5705 - C4107 * C5975 + C4026 * C6060 +
             C4108 * C37332 - C4365 * C37278 - C4108 * C37436 +
             C4027 * C37488) *
                C92097 * C92252) *
               C2665 -
           ((C70465 + C70464 + C70463) * C92097 * C92252 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C92097 * C61039) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C2664 -
           ((C62842 + C62843 + C62844) * C92252 +
            (C62841 + C62840 + C62839) * C61039) *
               C2665) *
              C1969 +
          (((C65553 + C65554 + C65555) * C61039 +
            (C14209 * C31249 + C12220 * C31250 +
             (C182 * C11886 - C410 * C11784 - C182 * C12106 + C92177 * C12206) *
                 C31251) *
                C92252) *
               C2665 -
           ((C65555 + C65554 + C65553) * C92252 +
            (C2292 * C31251 + C2293 * C31250 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C31249) *
                C61039) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
                C70949 +
            C72104 * C70950 + C72105 * C70951 + C72106 * C70952) *
               C2664 -
           (C72114 * C70952 + C72106 * C70951 + C72105 * C70950 +
            C72104 * C70949) *
               C2665) *
              C1969 +
          ((C73864 * C70949 + C73865 * C70950 + C73873 * C70951 +
            (C182 * C41211 - C410 * C41105 - C182 * C41396 + C92177 * C41499) *
                C92097 * C70952) *
               C2665 -
           (C73873 * C70952 + C73865 * C70951 + C73864 * C70950 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92097 * C70949) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C4106 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C4025 +
            (C70233 - C70234 + C70235 - C70236) * C4107 +
            (C70564 - C70565 + C70566 - C70567) * C4026 +
            (C70241 - C70242 + C70243 - C70244) * C4108 +
            (C70568 - C70569 + C70570 - C70571) * C4027) *
               C92097 * C2665) *
              C1969 +
          (((C66844 - C66843 + C66846 - C66845) * C4106 +
            (C67099 - C67098 + C67101 - C67100) * C4025 +
            (C66852 - C66851 + C66854 - C66853) * C4107 +
            (C67103 - C67102 + C67105 - C67104) * C4026 +
            (C66859 - C66860 + C66861 - C66862) * C4108 +
            (C67106 - C67107 + C67108 - C67109) * C4027) *
               C92097 * C2664 +
           ((C70234 - C70233 + C70236 - C70235) * C4106 +
            (C70565 - C70564 + C70567 - C70566) * C4025 +
            (C70242 - C70241 + C70244 - C70243) * C4107 +
            (C70569 - C70568 + C70571 - C70570) * C4026 +
            (C61039 * C8690 - C61189 * C8454 + C92252 * C37384 -
             C61190 * C37278) *
                C4108 +
            (C61039 * C9018 - C61189 * C8800 + C92252 * C37539 -
             C61190 * C37436) *
                C4027) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C31249 +
            ((C64402 - C64403 + C64404 - C64405) * C182 +
             (C64727 - C64728 + C64729 - C64730) * C92177) *
                C31250 +
            ((C64410 - C64411 + C64412 - C64413) * C182 +
             (C64731 - C64732 + C64733 - C64734) * C92177) *
                C31251) *
               C2665) *
              C1969 +
          ((((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                 C182 +
             (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C31249 +
            ((C63447 - C63448 + C63449 - C63450) * C182 +
             (C63757 - C63758 + C63759 - C63760) * C92177) *
                C31250 +
            ((C63455 - C63456 + C63457 - C63458) * C182 +
             (C63761 - C63762 + C63763 - C63764) * C92177) *
                C31251) *
               C2664 +
           (((C61039 * C3513 - C61189 * C3357 + C92252 * C5887 -
              C61190 * C5703) *
                 C182 +
             (C61039 * C3731 - C61189 * C3587 + C92252 * C6139 -
              C61190 * C5973) *
                 C92177) *
                C31249 +
            ((C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
              C61190 * C5704) *
                 C182 +
             (C61039 * C3732 - C61189 * C3588 + C92252 * C6141 -
              C61190 * C5974) *
                 C92177) *
                C31250 +
            ((C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
              C61190 * C11784) *
                 C182 +
             (C61039 * C3733 - C61189 * C3589 + C92252 * C12319 -
              C61190 * C12106) *
                 C92177) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C182 +
            (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
             C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
             C71056 * C11191) *
                C92177) *
               C92097 * C2664 +
           ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
             C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
             C70952 * C11111) *
                C182 +
            (C71053 * C1589 - C70949 * C1713 + C71054 * C1593 - C70950 * C1717 +
             C71055 * C11191 - C70951 * C11419 + C71056 * C11193 -
             C70952 * C11421) *
                C92177) *
               C92097 * C2665) *
              C1969 +
          (((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
             C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
             C70952 * C13979) *
                C182 +
            (C71053 * C1008 - C70949 * C1132 + C71054 * C3587 - C70950 * C3731 +
             C71055 * C5973 - C70951 * C6139 + C71056 * C14081 -
             C70952 * C14309) *
                C92177) *
               C92097 * C2664 +
           ((C70949 * C3513 - C71053 * C3357 + C70950 * C5887 - C71054 * C5703 +
             C70951 * C13979 - C71055 * C13749 + C70952 * C41320 -
             C71056 * C41105) *
                C182 +
            (C70949 * C3731 - C71053 * C3587 + C70950 * C6139 - C71054 * C5973 +
             C70951 * C14309 - C71055 * C14081 + C70952 * C41618 -
             C71056 * C41396) *
                C92177) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C2664 +
           (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
             (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
                C4025 +
            (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
             C44489 * C92252) *
                C4026 +
            (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
             (C40840 - C40841) * C92252) *
                C4027) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
             C44151 * C61190 + C44488 * C92252) *
                C4025 +
            ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
             C60428 * C61190 + C60749 * C92252) *
                C4026 +
            ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
             (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
                C4027) *
               C2664 +
           ((C44149 * C61189 + C44487 * C61039 + C41407 * C61190 +
             C41700 * C92252) *
                C4025 +
            (C57085 * C61189 + C57319 * C61039 + (C40601 - C40600) * C61190 +
             (C40841 - C40840) * C92252) *
                C4026 +
            ((C39236 - C39235) * C61189 + (C39448 - C39447) * C61039 +
             (C92097 * C37279 - C36262 * C37278) * C61190 +
             (C92097 * C37591 - C36262 * C37590) * C92252) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C2664 +
           ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
            (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
            (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
            (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
               C92177 * C2665) *
              C1969 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
            (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
               C92177 * C2664 +
           ((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C61189 +
            (C36007 - C36006 + C36009 - C36008 + C36011 - C36010) * C61039 +
            (C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
             C31251 * C11785 - C31258 * C11784) *
                C61190 +
            (C31249 * C6225 - C31254 * C6219 + C31250 * C6226 - C31256 * C6220 +
             C31251 * C12425 - C31258 * C12424) *
                C92252) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C71053 +
            (C92097 * C573 - C36262 * C567) * C70949 +
            (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
            C41417 * C71055 + C41705 * C70951 + C72043 * C71056 +
            C72218 * C70952) *
               C92177 * C2664 +
           ((C41400 - C41399) * C71053 + (C41697 - C41696) * C70949 +
            (C41404 - C41403) * C71054 + (C41699 - C41698) * C70950 +
            (C41409 - C41410) * C71055 + (C41701 - C41702) * C70951 +
            (C72045 - C72046) * C71056 + (C72219 - C72220) * C70952) *
               C92177 * C2665) *
              C1969 +
          (((C36928 - C36927) * C71053 + (C37105 - C37104) * C70949 +
            C44151 * C71054 + C44488 * C70950 + C44153 * C71055 +
            C44489 * C70951 + (C41413 - C41414) * C71056 +
            (C41703 - C41704) * C70952) *
               C92177 * C2664 +
           (C44149 * C71053 + C44487 * C70949 + C41407 * C71054 +
            C41700 * C70950 + (C41414 - C41413) * C71055 +
            (C41704 - C41703) * C70951 +
            (C92097 * C41106 - C36262 * C41105) * C71056 +
            (C92097 * C41694 - C36262 * C41693) * C70952) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C2664 +
           ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
            (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
            (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
            (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
               C92097 * C2665) *
              C1969 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C61189 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C61039 +
            (C70123 - C70124 + C70125 - C70126 + C70127 - C70128) * C61190 +
            (C70768 - C70769 + C70770 - C70771 + C70772 - C70773) * C92252) *
               C92097 * C2664 +
           ((C70124 - C70123 + C70126 - C70125 + C70128 - C70127) * C61189 +
            (C70769 - C70768 + C70771 - C70770 + C70773 - C70772) * C61039 +
            (C4025 * C5801 - C4106 * C5703 + C4026 * C5802 - C4107 * C5705 +
             C4027 * C37332 - C4108 * C37278) *
                C61190 +
            (C4025 * C6305 - C4106 * C6219 + C4026 * C6306 - C4107 * C6221 +
             C4027 * C37642 - C4108 * C37590) *
                C92252) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C2664 +
           (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
             (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
                C31249 +
            (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
             C13531 * C92252) *
                C31250 +
            (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
             (C10007 - C10008) * C92252) *
                C31251) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C61189 +
             (C182 * C1190 - C92177 * C1256) * C61039 +
             (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                C31249 +
            ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
             (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                C31250 +
            ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
             (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                C31251) *
               C2664 +
           (((C13875 - C13874) * C61189 + (C14519 - C14518) * C61039 +
             (C13879 - C13878) * C61190 + (C14521 - C14520) * C92252) *
                C31249 +
            ((C11890 - C11889) * C61189 + (C12527 - C12526) * C61039 +
             (C11894 - C11893) * C61190 + (C12529 - C12528) * C92252) *
                C31250 +
            ((C22060 - C22059) * C61189 + (C22683 - C22682) * C61039 +
             (C92177 * C11886 - C182 * C11784) * C61190 +
             (C92177 * C12524 - C182 * C12424) * C92252) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C71053 +
            (C92177 * C629 - C182 * C567) * C70949 +
            (C11009 - C11010) * C71054 + (C11599 - C11600) * C70950 +
            C11027 * C71055 + C11608 * C70951 + C71927 * C71056 +
            C72272 * C70952) *
               C92097 * C2664 +
           ((C11010 - C11009) * C71053 + (C11600 - C11599) * C70949 +
            (C11014 - C11013) * C71054 + (C11602 - C11601) * C70950 +
            (C11019 - C11020) * C71055 + (C11604 - C11605) * C70951 +
            (C71929 - C71930) * C71056 + (C72273 - C72274) * C70952) *
               C92097 * C2665) *
              C1969 +
          (((C182 * C797 - C92177 * C876) * C71053 +
            (C182 * C1190 - C92177 * C1256) * C70949 +
            (C13874 - C13875) * C71054 + (C14518 - C14519) * C70950 +
            (C13878 - C13879) * C71055 + (C14520 - C14521) * C70951 +
            (C73662 - C73663) * C71056 + (C74072 - C74073) * C70952) *
               C92097 * C2664 +
           ((C13875 - C13874) * C71053 + (C14519 - C14518) * C70949 +
            (C13879 - C13878) * C71054 + (C14521 - C14520) * C70950 +
            (C73663 - C73662) * C71055 + (C74073 - C74072) * C70951 +
            (C92177 * C41211 - C182 * C41105) * C71056 +
            (C92177 * C41779 - C182 * C41693) * C70952) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C4025 +
            (C67378 + C67379) * C4026 + C67384 * C4027) *
               C92097 * C2664 -
           ((C70896 + C70897) * C4027 + (C70898 + C70899) * C4026 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C4025) *
               C92097 * C2665) *
              C1969 +
          (((C70899 + C70898) * C4025 + (C70897 + C70896) * C4026 +
            (C61189 * C8690 - C61690 * C8454 - C61189 * C9122 + C61039 * C9332 +
             C61190 * C37384 - C61691 * C37278 - C61190 * C37590 +
             C92252 * C37693) *
                C4027) *
               C92097 * C2665 -
           ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
            (C67379 + C67378) * C4025) *
               C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92177 * C31249 +
            (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
               C2664 -
           ((C65059 + C65060) * C92177 * C31251 +
            (C65061 + C65062) * C92177 * C31250 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C92177 * C31249) *
               C2665) *
              C1969 +
          (((C61189 * C3513 - C61690 * C3357 - C61189 * C3801 + C61039 * C3945 +
             C61190 * C5887 - C61691 * C5703 - C61190 * C6219 +
             C92252 * C6385) *
                C92177 * C31249 +
            (C61189 * C3514 - C61690 * C3358 - C61189 * C3802 + C61039 * C3946 +
             C61190 * C5888 - C61691 * C5704 - C61190 * C6220 +
             C92252 * C6387) *
                C92177 * C31250 +
            (C61189 * C3515 - C61690 * C3359 - C61189 * C3803 + C61039 * C3947 +
             C61190 * C11994 - C61691 * C11784 - C61190 * C12424 +
             C92252 * C12627) *
                C92177 * C31251) *
               C2665 -
           ((C64083 + C64084) * C92177 * C31251 +
            (C64085 + C64086) * C92177 * C31250 +
            (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
             C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
                C92177 * C31249) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
            C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
            C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
            C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
            C70952 * C11683) *
               C92177 * C92097 * C2664 -
           (C71056 * C11111 - C71360 * C10869 - C71056 * C11499 +
            C70952 * C11684 + C71055 * C11109 - C71359 * C10868 -
            C71055 * C11497 + C70951 * C11683 + C71054 * C1527 -
            C71358 * C1379 - C71054 * C1775 + C70950 * C1899 + C71053 * C1523 -
            C71357 * C1378 - C71053 * C1771 + C70949 * C1898) *
               C92177 * C92097 * C2665) *
              C1969 +
          ((C71053 * C3513 - C71357 * C3357 - C71053 * C3801 + C70949 * C3945 +
            C71054 * C5887 - C71358 * C5703 - C71054 * C6219 + C70950 * C6385 +
            C71055 * C13979 - C71359 * C13749 - C71055 * C14409 +
            C70951 * C14619 + C71056 * C41320 - C71360 * C41105 -
            C71056 * C41693 + C70952 * C41869) *
               C92177 * C92097 * C2665 -
           (C71056 * C13979 - C71360 * C13749 - C71056 * C14409 +
            C70952 * C14619 + C71055 * C5887 - C71359 * C5703 - C71055 * C6219 +
            C70951 * C6385 + C71054 * C3513 - C71358 * C3357 - C71054 * C3801 +
            C70950 * C3945 + C71053 * C942 - C71357 * C797 - C71053 * C1190 +
            C70949 * C1317) *
               C92177 * C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
                C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
                C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                   C61039 +
               (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
                C31249 * C1402 + C31256 * C1387 - C31257 * C1377 -
                C31256 * C1388 + C31250 * C1401 + C31258 * C1385 -
                C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
                   C92252) *
                  C92177 * C92150 * C92136 * C97 -
              ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 +
                C31251 * C1399 + C31256 * C1385 - C31257 * C1376 -
                C31256 * C1386 + C31250 * C1400 + C31254 * C1387 -
                C31255 * C1377 - C31254 * C1388 + C31249 * C1401) *
                   C92252 +
               (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
                C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
                C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                   C61039) *
                  C92177 * C92150 * C92136 * C98 +
              ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
                C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
                C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
                   C61039 +
               (C31254 * C1385 - C31255 * C1376 - C31254 * C1386 +
                C31249 * C1400 + C31256 * C1383 - C31257 * C1375 -
                C31256 * C1384 + C31250 * C1399 + C31258 * C2667 -
                C31259 * C2666 - C31258 * C2668 + C31251 * C2669) *
                   C92252) *
                  C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
                C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
                C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                   C61039 +
               (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 +
                C31249 * C1402 + C31256 * C1387 - C31257 * C1377 -
                C31256 * C1388 + C31250 * C1401 + C31258 * C1385 -
                C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
                   C92252) *
                  C92177 * C92150 * C790 -
              ((C35403 + C35404 + C35405) * C92252 +
               (C32074 + C32073 + C32072) * C61039) *
                  C92177 * C92150 * C791 +
              ((C32077 + C32076 + C32075) * C61039 +
               (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 +
                C31249 * C5720 + C31256 * C5707 - C31257 * C5701 -
                C31256 * C5708 + C31250 * C5719 + C31258 * C7489 -
                C31259 * C7488 - C31258 * C7490 + C31251 * C7491) *
                   C92252) *
                  C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C62513 + C62514 + C62515) * C92252) *
              C92177 * C1372 -
          ((C62516 + C62517 + C62518) * C92252 +
           (C62515 + C62514 + C62513) * C61039) *
              C92177 * C1373 +
          ((C62518 + C62517 + C62516) * C61039 +
           (C31254 * C10873 - C31255 * C10868 - C31254 * C10874 +
            C31249 * C10880 + C31256 * C10871 - C31257 * C10867 -
            C31256 * C10872 + C31250 * C10879 + C31258 * C12748 -
            C31259 * C12747 - C31258 * C12749 + C31251 * C12750) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C36751 * C61039 + C39015 * C92252) * C4026 +
           (C36752 * C61039 + C39014 * C92252) * C4027) *
              C92150 * C92136 * C97 -
          ((C58338 * C92252 + C37780 * C61039) * C4027 +
           (C41982 * C92252 + C37779 * C61039) * C4026 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C61039) *
               C4025) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C61039 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C4025 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C61039 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C4026 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C61039 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C92150 * C790 -
          ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
           (C66689 + C66688) * C4025) *
              C92150 * C791 +
          (C66694 * C4025 + (C66693 + C66692) * C4026 +
           (C36754 * C61039 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C1372 -
          ((C40347 * C92252 + C39014 * C61039) * C4027 +
           (C40346 * C92252 + C39015 * C61039) * C4026 +
           (C41135 * C92252 + C41134 * C61039) * C4025) *
              C1373 +
          ((C41135 * C61039 + C41137 * C92252) * C4025 +
           (C40346 * C61039 + C41136 * C92252) * C4026 +
           (C40347 * C61039 + (C36262 * C43814 - C36263 * C43813 -
                               C36262 * C43815 + C92097 * C43816) *
                                  C92252) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C70949 +
           C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
              C92177 * C92150 * C92136 * C97 -
          ((C36262 * C10871 - C36263 * C10867 - C36262 * C10872 +
            C92097 * C10879) *
               C70952 +
           C42893 * C70951 + C42892 * C70950 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C70949) *
              C92177 * C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C70949 +
           (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 + C92097 * C1400) *
               C70950 +
           (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 + C92097 * C1405) *
               C70951 +
           (C36262 * C12748 - C36263 * C12747 - C36262 * C12749 +
            C92097 * C12750) *
               C70952) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C70949 +
           C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
              C92177 * C92150 * C790 -
          (C41136 * C70952 + C40346 * C70951 + C39015 * C70950 +
           C36751 * C70949) *
              C92177 * C92150 * C791 +
          (C36752 * C70949 + C39014 * C70950 + C40347 * C70951 +
           (C36262 * C43814 - C36263 * C43813 - C36262 * C43815 +
            C92097 * C43816) *
               C70952) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C70949 +
           C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
              C92177 * C1372 -
          (C71872 * C70952 + C41137 * C70951 + C41135 * C70950 +
           C41134 * C70949) *
              C92177 * C1373 +
          (C41135 * C70949 + C41137 * C70950 + C71872 * C70951 +
           (C36262 * C71862 - C36263 * C71861 - C36262 * C71863 +
            C92097 * C71864) *
               C70952) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C31254 +
                (C92177 * C189 - C182 * C115) * C31249 +
                (C196 - C197) * C31256 + (C198 - C199) * C31250 +
                C212 * C31258 + C213 * C31251) *
                   C61039 +
               ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
                C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
                C19824 * C31251) *
                   C92252) *
                  C92150 * C92136 * C97 +
              (((C197 - C196) * C31254 + (C199 - C198) * C31249 +
                (C201 - C200) * C31256 + (C203 - C202) * C31250 +
                (C205 - C204) * C31258 + (C207 - C206) * C31251) *
                   C61039 +
               (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
                C23028 * C31250 + (C2747 - C2748) * C31258 +
                (C2749 - C2750) * C31251) *
                   C92252) *
                  C92150 * C92136 * C98 +
              ((C212 * C31254 + C213 * C31249 + C214 * C31256 + C215 * C31250 +
                (C209 - C208) * C31258 + (C211 - C210) * C31251) *
                   C61039 +
               (C19823 * C31254 + C19824 * C31249 + (C2748 - C2747) * C31256 +
                (C2750 - C2749) * C31250 +
                (C92177 * C2736 - C182 * C2666) * C31258 +
                (C92177 * C2737 - C182 * C2668) * C31251) *
                   C92252) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C31254 +
                (C92177 * C189 - C182 * C115) * C31249 +
                (C196 - C197) * C31256 + (C198 - C199) * C31250 +
                C212 * C31258 + C213 * C31251) *
                   C61039 +
               ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
                C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
                C19824 * C31251) *
                   C92252) *
                  C92150 * C790 +
              (((C182 * C797 - C92177 * C876) * C31254 +
                (C182 * C809 - C92177 * C884) * C31249 +
                (C2046 - C2047) * C31256 + (C2048 - C2049) * C31250 +
                (C2050 - C2051) * C31258 + (C2052 - C2053) * C31251) *
                   C61039 +
               ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
                (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
                (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
                   C92252) *
                  C92150 * C791 +
              (((C92177 * C880 - C182 * C798) * C31254 +
                (C92177 * C888 - C182 * C811) * C31249 +
                (C92177 * C881 - C182 * C799) * C31256 +
                (C92177 * C889 - C182 * C813) * C31250 +
                (C92177 * C882 - C182 * C800) * C31258 +
                (C92177 * C890 - C182 * C815) * C31251) *
                   C61039 +
               ((C92177 * C5799 - C182 * C5702) * C31254 +
                (C92177 * C5805 - C182 * C5710) * C31249 +
                (C92177 * C5800 - C182 * C5701) * C31256 +
                (C92177 * C5806 - C182 * C5708) * C31250 +
                (C92177 * C7590 - C182 * C7488) * C31258 +
                (C92177 * C7591 - C182 * C7490) * C31251) *
                   C92252) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C1372 +
          (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
            C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
            C23028 * C31251) *
               C61039 +
           ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
            C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
            (C9506 - C9507) * C31251) *
               C92252) *
              C1373 +
          ((C11027 * C31254 + C11028 * C31249 + C11017 * C31256 +
            C11018 * C31250 + (C9505 - C9504) * C31258 +
            (C9507 - C9506) * C31251) *
               C61039 +
           ((C11020 - C11019) * C31254 + (C11022 - C11021) * C31249 +
            (C11024 - C11023) * C31256 + (C11026 - C11025) * C31250 +
            (C92177 * C12877 - C182 * C12747) * C31258 +
            (C92177 * C12878 - C182 * C12749) * C31251) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
               C61039 +
           ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C36262 +
            (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C92097) *
               C61039 +
           ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C36262 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C36262 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C92097) *
               C61039 +
           ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C36262 +
            (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
             C4108 * C8457 - C4027 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C36262 +
            (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
             C4027 * C4954 - C4108 * C4823) *
                C92097) *
               C61039 +
           ((C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
             C4027 * C39084 - C4108 * C38990) *
                C36262 +
            (C4025 * C5805 - C4106 * C5710 + C4026 * C8590 - C4107 * C8457 +
             C4027 * C39085 - C4108 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
            (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
               C92252) *
              C1372 +
          (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
            (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
               C61039 +
           ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
            (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
               C92252) *
              C1373 +
          (((C67546 - C67545 + C67548 - C67547 + C67550 - C67549) * C36262 +
            (C67552 - C67551 + C67554 - C67553 + C67556 - C67555) * C92097) *
               C61039 +
           ((C4025 * C11000 - C4106 * C10868 + C4026 * C13869 - C4107 * C13749 +
             C4027 * C43918 - C4108 * C43813) *
                C36262 +
            (C4025 * C11004 - C4106 * C10874 + C4026 * C13871 - C4107 * C13752 +
             C4027 * C43919 - C4108 * C43815) *
                C92097) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C36262 +
            (C92177 * C189 - C182 * C115) * C92097) *
               C70949 +
           ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
           (C11027 * C36262 + C11028 * C92097) * C70951 +
           ((C11020 - C11019) * C36262 + (C11022 - C11021) * C92097) * C70952) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C36262 + (C199 - C198) * C92097) * C70949 +
           (C12882 * C36262 + C12883 * C92097) * C70950 +
           (C12884 * C36262 + C12885 * C92097) * C70951 +
           ((C11023 - C11024) * C36262 + (C11025 - C11026) * C92097) * C70952) *
              C92150 * C92136 * C98 +
          ((C212 * C36262 + C213 * C92097) * C70949 +
           (C19823 * C36262 + C19824 * C92097) * C70950 +
           ((C9505 - C9504) * C36262 + (C9507 - C9506) * C92097) * C70951 +
           ((C92177 * C12877 - C182 * C12747) * C36262 +
            (C92177 * C12878 - C182 * C12749) * C92097) *
               C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C36262 +
            (C92177 * C189 - C182 * C115) * C92097) *
               C70949 +
           ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
           (C11027 * C36262 + C11028 * C92097) * C70951 +
           ((C11020 - C11019) * C36262 + (C11022 - C11021) * C92097) * C70952) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C36262 +
            (C182 * C809 - C92177 * C884) * C92097) *
               C70949 +
           ((C13874 - C13875) * C36262 + (C13876 - C13877) * C92097) * C70950 +
           ((C13878 - C13879) * C36262 + (C13880 - C13881) * C92097) * C70951 +
           ((C182 * C13749 - C92177 * C13869) * C36262 +
            (C182 * C13752 - C92177 * C13871) * C92097) *
               C70952) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C36262 +
            (C92177 * C888 - C182 * C811) * C92097) *
               C70949 +
           ((C92177 * C5799 - C182 * C5702) * C36262 +
            (C92177 * C5805 - C182 * C5710) * C92097) *
               C70950 +
           ((C92177 * C5802 - C182 * C5705) * C36262 +
            (C92177 * C5808 - C182 * C5716) * C92097) *
               C70951 +
           ((C92177 * C43918 - C182 * C43813) * C36262 +
            (C92177 * C43919 - C182 * C43815) * C92097) *
               C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C36262 +
            (C92177 * C189 - C182 * C115) * C92097) *
               C70949 +
           ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
           C71933 * C70951 + C71936 * C70952) *
              C1372 +
          (((C11010 - C11009) * C36262 + (C11012 - C11011) * C92097) * C70949 +
           ((C11014 - C11013) * C36262 + (C11016 - C11015) * C92097) * C70950 +
           ((C11019 - C11020) * C36262 + (C11021 - C11022) * C92097) * C70951 +
           ((C71929 - C71930) * C36262 + (C71931 - C71932) * C92097) * C70952) *
              C1373 +
          (C71933 * C70949 + C71936 * C70950 +
           ((C71930 - C71929) * C36262 + (C71932 - C71931) * C92097) * C70951 +
           ((C92177 * C71922 - C182 * C71861) * C36262 +
            (C92177 * C71923 - C182 * C71863) * C92097) *
               C70952) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C61039 * C266 - C61189 * C108 + C92252 * C1523 -
                C61190 * C1378) *
                   C31254 +
               (C61039 * C272 - C61189 * C115 + C92252 * C1531 -
                C61190 * C1390) *
                   C31249 +
               (C61192 - C61193 + C61194 - C61195) * C31256 +
               (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
               C61221 * C31251) *
                  C92177 * C92150 * C92136 * C97 +
              ((C61193 - C61192 + C61195 - C61194) * C31254 +
               (C61197 - C61196 + C61199 - C61198) * C31249 +
               (C61201 - C61200 + C61203 - C61202) * C31256 +
               (C61205 - C61204 + C61207 - C61206) * C31250 +
               (C61208 - C61209 + C61210 - C61211) * C31258 +
               (C61212 - C61213 + C61214 - C61215) * C31251) *
                  C92177 * C92150 * C92136 * C98 +
              (C61220 * C31254 + C61221 * C31249 +
               (C61209 - C61208 + C61211 - C61210) * C31256 +
               (C61213 - C61212 + C61215 - C61214) * C31250 +
               (C61039 * C270 - C61189 * C112 + C92252 * C2816 -
                C61190 * C2666) *
                   C31258 +
               (C61039 * C276 - C61189 * C123 + C92252 * C2817 -
                C61190 * C2668) *
                   C31251) *
                  C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C61039 * C266 - C61189 * C108 + C92252 * C1523 -
                C61190 * C1378) *
                   C31254 +
               (C61039 * C272 - C61189 * C115 + C92252 * C1531 -
                C61190 * C1390) *
                   C31249 +
               (C61192 - C61193 + C61194 - C61195) * C31256 +
               (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
               C61221 * C31251) *
                  C92177 * C92150 * C790 +
              ((C61189 * C797 - C61039 * C942 + C61190 * C3357 -
                C92252 * C3513) *
                   C31254 +
               (C61189 * C809 - C61039 * C950 + C61190 * C3362 -
                C92252 * C3517) *
                   C31249 +
               (C61189 * C796 - C61039 * C943 + C61190 * C3358 -
                C92252 * C3514) *
                   C31256 +
               (C61189 * C807 - C61039 * C951 + C61190 * C3364 -
                C92252 * C3518) *
                   C31250 +
               (C61189 * C795 - C61039 * C944 + C61190 * C3359 -
                C92252 * C3515) *
                   C31258 +
               (C61189 * C805 - C61039 * C952 + C61190 * C3366 -
                C92252 * C3519) *
                   C31251) *
                  C92177 * C92150 * C791 +
              ((C61039 * C946 - C61189 * C798 + C92252 * C5885 -
                C61190 * C5702) *
                   C31254 +
               (C61039 * C954 - C61189 * C811 + C92252 * C5891 -
                C61190 * C5710) *
                   C31249 +
               (C61039 * C947 - C61189 * C799 + C92252 * C5886 -
                C61190 * C5701) *
                   C31256 +
               (C61039 * C955 - C61189 * C813 + C92252 * C5892 -
                C61190 * C5708) *
                   C31250 +
               (C61039 * C948 - C61189 * C800 + C92252 * C7702 -
                C61190 * C7488) *
                   C31258 +
               (C61039 * C956 - C61189 * C815 + C92252 * C7703 -
                C61190 * C7490) *
                   C31251) *
                  C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C1372 +
          ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 - C92252 * C1527) *
               C31254 +
           (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 - C92252 * C1535) *
               C31249 +
           (C61189 * C1377 - C61039 * C1524 + C61190 * C1380 - C92252 * C1528) *
               C31256 +
           (C61189 * C1388 - C61039 * C1532 + C61190 * C1394 - C92252 * C1536) *
               C31250 +
           (C61189 * C1376 - C61039 * C1525 + C61190 * C1381 - C92252 * C1529) *
               C31258 +
           (C61189 * C1386 - C61039 * C1533 + C61190 * C1396 - C92252 * C1537) *
               C31251) *
              C92177 * C1373 +
          ((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
            C61190 * C10868) *
               C31254 +
           (C61039 * C1535 - C61189 * C1392 + C92252 * C11113 -
            C61190 * C10874) *
               C31249 +
           (C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
            C61190 * C10867) *
               C31256 +
           (C61039 * C1536 - C61189 * C1394 + C92252 * C11114 -
            C61190 * C10872) *
               C31250 +
           (C61039 * C1529 - C61189 * C1381 + C92252 * C12983 -
            C61190 * C12747) *
               C31258 +
           (C61039 * C1537 - C61189 * C1396 + C92252 * C12984 -
            C61190 * C12749) *
               C31251) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
                C36262 +
            (C61039 * C950 - C61189 * C809 + C92252 * C3517 - C61190 * C3362) *
                C92097) *
               C4026 +
           ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C36262 +
            (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
                C92097) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C36262 +
            (C61197 - C61196 + C61199 - C61198) * C92097) *
               C4025 +
           ((C63447 - C63448 + C63449 - C63450) * C36262 +
            (C63451 - C63452 + C63453 - C63454) * C92097) *
               C4026 +
           ((C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
                C36262 +
            (C61189 * C813 - C61039 * C955 + C61190 * C5708 - C92252 * C5892) *
                C92097) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C61220 * C36262 + C61221 * C92097) * C4025 +
           ((C63456 - C63455 + C63458 - C63457) * C36262 +
            (C63460 - C63459 + C63462 - C63461) * C92097) *
               C4026 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C36262 +
            (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
                C92097) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C36262 +
            (C66848 - C66847 + C66850 - C66849) * C92097) *
               C4025 +
           ((C66852 - C66851 + C66854 - C66853) * C36262 +
            (C66856 - C66855 + C66858 - C66857) * C92097) *
               C4026 +
           ((C66859 - C66860 + C66861 - C66862) * C36262 +
            (C66863 - C66864 + C66865 - C66866) * C92097) *
               C4027) *
              C92150 * C791 +
          (C66875 * C4025 +
           ((C66860 - C66859 + C66862 - C66861) * C36262 +
            (C66864 - C66863 + C66866 - C66865) * C92097) *
               C4026 +
           ((C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
             C61190 * C38990) *
                C36262 +
            (C61039 * C5036 - C61189 * C4823 + C92252 * C39153 -
             C61190 * C38992) *
                C92097) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C36262 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C92097) *
               C4025 +
           ((C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
             C92252 * C5887) *
                C36262 +
            (C61189 * C3362 - C61039 * C3517 + C61190 * C5712 -
             C92252 * C5893) *
                C92097) *
               C4026 +
           ((C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
             C92252 * C5889) *
                C36262 +
            (C61189 * C5710 - C61039 * C5891 + C61190 * C5716 -
             C92252 * C5895) *
                C92097) *
               C4027) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C36262 +
            (C61039 * C1535 - C61189 * C1392 + C92252 * C11113 -
             C61190 * C10874) *
                C92097) *
               C4025 +
           ((C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
             C61190 * C13749) *
                C36262 +
            (C61039 * C5893 - C61189 * C5712 + C92252 * C13981 -
             C61190 * C13752) *
                C92097) *
               C4026 +
           ((C61039 * C5889 - C61189 * C5705 + C92252 * C44034 -
             C61190 * C43813) *
                C36262 +
            (C61039 * C5895 - C61189 * C5716 + C92252 * C44035 -
             C61190 * C43815) *
                C92097) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C36262 +
           (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
            C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
            C71056 * C10874) *
               C92097) *
              C92177 * C92150 * C92136 * C97 +
          ((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
            C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
            C70952 * C11110) *
               C36262 +
           (C71053 * C117 - C70949 * C273 + C71054 * C1388 - C70950 * C1532 +
            C71055 * C1394 - C70951 * C1536 + C71056 * C10872 -
            C70952 * C11114) *
               C92097) *
              C92177 * C92150 * C92136 * C98 +
          ((C70949 * C268 - C71053 * C110 + C70950 * C1525 - C71054 * C1376 +
            C70951 * C1529 - C71055 * C1381 + C70952 * C12983 -
            C71056 * C12747) *
               C36262 +
           (C70949 * C274 - C71053 * C119 + C70950 * C1533 - C71054 * C1386 +
            C70951 * C1537 - C71055 * C1396 + C70952 * C12984 -
            C71056 * C12749) *
               C92097) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C36262 +
           (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
            C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
            C71056 * C10874) *
               C92097) *
              C92177 * C92150 * C790 +
          ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
            C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
            C70952 * C13979) *
               C36262 +
           (C71053 * C809 - C70949 * C950 + C71054 * C3362 - C70950 * C3517 +
            C71055 * C5712 - C70951 * C5893 + C71056 * C13752 -
            C70952 * C13981) *
               C92097) *
              C92177 * C92150 * C791 +
          ((C70949 * C946 - C71053 * C798 + C70950 * C5885 - C71054 * C5702 +
            C70951 * C5889 - C71055 * C5705 + C70952 * C44034 -
            C71056 * C43813) *
               C36262 +
           (C70949 * C954 - C71053 * C811 + C70950 * C5891 - C71054 * C5710 +
            C70951 * C5895 - C71055 * C5716 + C70952 * C44035 -
            C71056 * C43815) *
               C92097) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C36262 +
           (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
            C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
            C71056 * C10874) *
               C92097) *
              C92177 * C1372 +
          ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
            C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
            C70952 * C11111) *
               C36262 +
           (C71053 * C1390 - C70949 * C1531 + C71054 * C1392 - C70950 * C1535 +
            C71055 * C10874 - C70951 * C11113 + C71056 * C10876 -
            C70952 * C11115) *
               C92097) *
              C92177 * C1373 +
          ((C70949 * C1527 - C71053 * C1379 + C70950 * C11109 -
            C71054 * C10868 + C70951 * C11111 - C71055 * C10869 +
            C70952 * C71986 - C71056 * C71861) *
               C36262 +
           (C70949 * C1535 - C71053 * C1392 + C70950 * C11113 -
            C71054 * C10874 + C70951 * C11115 - C71055 * C10876 +
            C70952 * C71987 - C71056 * C71863) *
               C92097) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                 C31251 * C118 - C31258 * C110) *
                    C182 +
                (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
                 C31251 * C356 - C31258 * C350) *
                    C92177) *
                   C61039 +
               ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 -
                 C31256 * C1377 + C31251 * C1385 - C31258 * C1376) *
                    C182 +
                (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 -
                 C31256 * C1590 + C31251 * C1599 - C31258 * C1591) *
                    C92177) *
                   C92252) *
                  C92150 * C92136 * C97 +
              (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
                 C31258 * C111 - C31251 * C120) *
                    C182 +
                (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
                 C31258 * C351 - C31251 * C357) *
                    C92177) *
                   C61039 +
               ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 -
                 C31250 * C1385 + C31258 * C1375 - C31251 * C1383) *
                    C182 +
                (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 -
                 C31250 * C1599 + C31258 * C1592 - C31251 * C1600) *
                    C92177) *
                   C92252) *
                  C92150 * C92136 * C98 +
              (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
                 C31251 * C122 - C31258 * C112) *
                    C182 +
                (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
                 C31251 * C358 - C31258 * C352) *
                    C92177) *
                   C61039 +
               ((C31249 * C1385 - C31254 * C1376 + C31250 * C1383 -
                 C31256 * C1375 + C31251 * C2667 - C31258 * C2666) *
                    C182 +
                (C31249 * C1599 - C31254 * C1591 + C31250 * C1600 -
                 C31256 * C1592 + C31251 * C2897 - C31258 * C2896) *
                    C92177) *
                   C92252) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                 C31251 * C118 - C31258 * C110) *
                    C182 +
                (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
                 C31251 * C356 - C31258 * C350) *
                    C92177) *
                   C61039 +
               ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 -
                 C31256 * C1377 + C31251 * C1385 - C31258 * C1376) *
                    C182 +
                (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 -
                 C31256 * C1590 + C31251 * C1599 - C31258 * C1591) *
                    C92177) *
                   C92252) *
                  C92150 * C790 +
              (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
                (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) *
                    C92177) *
                   C61039 +
               ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
                (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) *
                    C92177) *
                   C92252) *
                  C92150 * C791 +
              (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C182 +
                (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) *
                    C92177) *
                   C61039 +
               ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 -
                 C31256 * C5701 + C31251 * C7489 - C31258 * C7488) *
                    C182 +
                (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 -
                 C31256 * C5972 + C31251 * C7811 - C31258 * C7810) *
                    C92177) *
                   C92252) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
            (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
               C92252) *
              C1372 +
          (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
            (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
               C61039 +
           ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
            (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
               C92252) *
              C1373 +
          (((C62754 - C62753 + C62756 - C62755 + C62758 - C62757) * C182 +
            (C62760 - C62759 + C62762 - C62761 + C62764 - C62763) * C92177) *
               C61039 +
           ((C31249 * C10873 - C31254 * C10868 + C31250 * C10871 -
             C31256 * C10867 + C31251 * C12748 - C31258 * C12747) *
                C182 +
            (C31249 * C11195 - C31254 * C11191 + C31250 * C11196 -
             C31256 * C11192 + C31251 * C13096 - C31258 * C13095) *
                C92177) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C4106 +
            (C36262 * C349 - C92097 * C355) * C4025 +
            (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
            (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
               C61039 +
           ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
            (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
            (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C4106 +
            (C92097 * C356 - C36262 * C350) * C4025 +
            (C92097 * C804 - C36262 * C795) * C4107 +
            (C92097 * C1018 - C36262 * C1010) * C4026 +
            (C92097 * C814 - C36262 * C800) * C4108 +
            (C92097 * C1022 - C36262 * C1014) * C4027) *
               C61039 +
           ((C92097 * C1385 - C36262 * C1376) * C4106 +
            (C92097 * C1599 - C36262 * C1591) * C4025 +
            (C92097 * C3365 - C36262 * C3359) * C4107 +
            (C92097 * C3593 - C36262 * C3589) * C4026 +
            (C92097 * C7489 - C36262 * C7488) * C4108 +
            (C92097 * C7811 - C36262 * C7810) * C4027) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C790 +
          (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
            (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
            (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
               C61039 +
           (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
            (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
               C92252) *
              C92150 * C791 +
          ((C36943 * C4106 + C36944 * C4025 + C36945 * C4107 + C36946 * C4026 +
            (C36940 - C36939) * C4108 + (C36942 - C36941) * C4027) *
               C61039 +
           (C57085 * C4106 + C57086 * C4025 + (C39236 - C39235) * C4107 +
            (C39238 - C39237) * C4026 +
            (C92097 * C38991 - C36262 * C38990) * C4108 +
            (C92097 * C39225 - C36262 * C39224) * C4027) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C1372 +
          (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
            C44151 * C4107 + C44152 * C4026 + C60428 * C4108 + C60429 * C4027) *
               C61039 +
           ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
            C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
            (C40602 - C40603) * C4027) *
               C92252) *
              C1373 +
          ((C41417 * C4106 + C41418 * C4025 + C41407 * C4107 + C41408 * C4026 +
            (C40601 - C40600) * C4108 + (C40603 - C40602) * C4027) *
               C61039 +
           ((C41410 - C41409) * C4106 + (C41412 - C41411) * C4025 +
            (C41414 - C41413) * C4107 + (C41416 - C41415) * C4026 +
            (C92097 * C43814 - C36262 * C43813) * C4108 +
            (C92097 * C44147 - C36262 * C44146) * C4027) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C182 +
            (C92097 * C354 - C36262 * C348) * C92177) *
               C70949 +
           ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
           (C41417 * C182 + C41418 * C92177) * C70951 +
           ((C41410 - C41409) * C182 + (C41412 - C41411) * C92177) * C70952) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C182 +
            (C36262 * C349 - C92097 * C355) * C92177) *
               C70949 +
           ((C43196 - C43197) * C182 + (C43198 - C43199) * C92177) * C70950 +
           ((C43200 - C43201) * C182 + (C43202 - C43203) * C92177) * C70951 +
           ((C36262 * C10867 - C92097 * C10871) * C182 +
            (C36262 * C11192 - C92097 * C11196) * C92177) *
               C70952) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C182 +
            (C92097 * C356 - C36262 * C350) * C92177) *
               C70949 +
           ((C92097 * C1385 - C36262 * C1376) * C182 +
            (C92097 * C1599 - C36262 * C1591) * C92177) *
               C70950 +
           ((C92097 * C1395 - C36262 * C1381) * C182 +
            (C92097 * C1603 - C36262 * C1595) * C92177) *
               C70951 +
           ((C92097 * C12748 - C36262 * C12747) * C182 +
            (C92097 * C13096 - C36262 * C13095) * C92177) *
               C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C182 +
            (C92097 * C354 - C36262 * C348) * C92177) *
               C70949 +
           ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
           (C41417 * C182 + C41418 * C92177) * C70951 +
           ((C41410 - C41409) * C182 + (C41412 - C41411) * C92177) * C70952) *
              C92150 * C790 +
          (((C36928 - C36927) * C182 + (C36930 - C36929) * C92177) * C70949 +
           (C44151 * C182 + C44152 * C92177) * C70950 +
           (C44153 * C182 + C44154 * C92177) * C70951 +
           ((C41413 - C41414) * C182 + (C41415 - C41416) * C92177) * C70952) *
              C92150 * C791 +
          ((C36943 * C182 + C36944 * C92177) * C70949 +
           (C57085 * C182 + C57086 * C92177) * C70950 +
           ((C40601 - C40600) * C182 + (C40603 - C40602) * C92177) * C70951 +
           ((C92097 * C43814 - C36262 * C43813) * C182 +
            (C92097 * C44147 - C36262 * C44146) * C92177) *
               C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C182 +
            (C92097 * C354 - C36262 * C348) * C92177) *
               C70949 +
           ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
           C72049 * C70951 + C72052 * C70952) *
              C1372 +
          (((C41400 - C41399) * C182 + (C41402 - C41401) * C92177) * C70949 +
           ((C41404 - C41403) * C182 + (C41406 - C41405) * C92177) * C70950 +
           ((C41409 - C41410) * C182 + (C41411 - C41412) * C92177) * C70951 +
           ((C72045 - C72046) * C182 + (C72047 - C72048) * C92177) * C70952) *
              C1373 +
          (C72049 * C70949 + C72052 * C70950 +
           ((C72046 - C72045) * C182 + (C72048 - C72047) * C92177) * C70951 +
           ((C92097 * C71862 - C36262 * C71861) * C182 +
            (C92097 * C72039 - C36262 * C72038) * C92177) *
               C70952) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                    C31249 +
                C442 * C31250 + C443 * C31251) *
                   C61039 +
               (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
                  C92150 * C92136 * C97 -
              ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
               (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
                  C92150 * C92136 * C98 +
              ((C443 * C31249 + C444 * C31250 + C445 * C31251) * C61039 +
               (C2985 * C31249 + C2984 * C31250 +
                (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                    C31251) *
                   C92252) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                    C31249 +
                C442 * C31250 + C443 * C31251) *
                   C61039 +
               (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
                  C92150 * C790 -
              ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
               (C2292 * C31251 + C2293 * C31250 +
                (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                    C31249) *
                   C61039) *
                  C92150 * C791 +
              (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                    C31249 +
                (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                    C31250 +
                (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                    C31251) *
                   C61039 +
               ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                    C31249 +
                (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                    C31250 +
                (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                    C31251) *
                   C92252) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C62839 + C62840 + C62841) * C92252) *
              C1372 -
          ((C62842 + C62843 + C62844) * C92252 +
           (C62841 + C62840 + C62839) * C61039) *
              C1373 +
          ((C62844 + C62843 + C62842) * C61039 +
           (C11340 * C31249 + C11339 * C31250 +
            (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
                C31251) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C7930 + C7931 + C7932) * C92097 * C92252 +
           (C4405 + C4404 + C4403) * C92097 * C61039) *
              C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C92097 * C61039 +
           (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
            C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
            C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
            C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
            C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
               C92097 * C92252 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C92097 * C61039) *
              C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C92097 * C61039 +
           (C4106 * C5799 - C4363 * C5702 - C4106 * C5971 + C4025 * C6058 +
            C4107 * C8588 - C4364 * C8454 - C4107 * C8800 + C4026 * C8918 +
            C4108 * C39084 - C4365 * C38990 - C4108 * C39224 + C4027 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C67815 + C67816 + C67817) * C92097 * C92252) *
              C1372 -
          ((C67818 + C67819 + C67820) * C92097 * C92252 +
           (C67817 + C67816 + C67815) * C92097 * C61039) *
              C1373 +
          ((C67820 + C67819 + C67818) * C92097 * C61039 +
           (C4106 * C11000 - C4363 * C10868 - C4106 * C11191 + C4025 * C11307 +
            C4107 * C13869 - C4364 * C13749 - C4107 * C14081 + C4026 * C14191 +
            C4108 * C43918 - C4365 * C43813 - C4108 * C44146 + C4027 * C44252) *
               C92097 * C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
               C70949 +
           C11337 * C92097 * C70950 + C11338 * C92097 * C70951 +
           C11340 * C92097 * C70952) *
              C92150 * C92136 * C97 -
          (C11339 * C92097 * C70952 + C9769 * C92097 * C70951 +
           C2986 * C92097 * C70950 + C442 * C92097 * C70949) *
              C92150 * C92136 * C98 +
          (C443 * C92097 * C70949 + C2985 * C92097 * C70950 +
           C9770 * C92097 * C70951 +
           (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
               C92097 * C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
               C70949 +
           C11337 * C92097 * C70950 + C11338 * C92097 * C70951 +
           C11340 * C92097 * C70952) *
              C92150 * C790 -
          ((C182 * C13869 - C410 * C13749 - C182 * C14081 + C92177 * C14191) *
               C92097 * C70952 +
           C14209 * C92097 * C70951 + C14208 * C92097 * C70950 +
           (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
               C92097 * C70949) *
              C92150 * C791 +
          ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
               C92097 * C70949 +
           (C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
               C92097 * C70950 +
           (C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
               C92097 * C70951 +
           (C182 * C43918 - C410 * C43813 - C182 * C44146 + C92177 * C44252) *
               C92097 * C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
               C70949 +
           C72104 * C70950 + C72105 * C70951 + C72106 * C70952) *
              C1372 -
          (C72114 * C70952 + C72106 * C70951 + C72105 * C70950 +
           C72104 * C70949) *
              C1373 +
          (C72105 * C70949 + C72106 * C70950 + C72114 * C70951 +
           (C182 * C71922 - C410 * C71861 - C182 * C72038 + C92177 * C72102) *
               C92097 * C70952) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 -
                 C61190 * C1378) *
                    C182 +
                (C61039 * C495 - C61189 * C348 + C92252 * C1713 -
                 C61190 * C1589) *
                    C92177) *
                   C31249 +
               ((C61192 - C61193 + C61194 - C61195) * C182 +
                (C61444 - C61445 + C61446 - C61447) * C92177) *
                   C31250 +
               C61461 * C31251) *
                  C92150 * C92136 * C97 +
              (((C61193 - C61192 + C61195 - C61194) * C182 +
                (C61445 - C61444 + C61447 - C61446) * C92177) *
                   C31249 +
               ((C61201 - C61200 + C61203 - C61202) * C182 +
                (C61450 - C61449 + C61452 - C61451) * C92177) *
                   C31250 +
               ((C61208 - C61209 + C61210 - C61211) * C182 +
                (C61453 - C61454 + C61455 - C61456) * C92177) *
                   C31251) *
                  C92150 * C92136 * C98 +
              (C61461 * C31249 +
               ((C61209 - C61208 + C61211 - C61210) * C182 +
                (C61454 - C61453 + C61456 - C61455) * C92177) *
                   C31250 +
               ((C61039 * C270 - C61189 * C112 + C92252 * C2816 -
                 C61190 * C2666) *
                    C182 +
                (C61039 * C499 - C61189 * C352 + C92252 * C3052 -
                 C61190 * C2896) *
                    C92177) *
                   C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 -
                 C61190 * C1378) *
                    C182 +
                (C61039 * C495 - C61189 * C348 + C92252 * C1713 -
                 C61190 * C1589) *
                    C92177) *
                   C31249 +
               ((C61192 - C61193 + C61194 - C61195) * C182 +
                (C61444 - C61445 + C61446 - C61447) * C92177) *
                   C31250 +
               C61461 * C31251) *
                  C92150 * C790 +
              (((C61189 * C797 - C61039 * C942 + C61190 * C3357 -
                 C92252 * C3513) *
                    C182 +
                (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
                 C92252 * C3731) *
                    C92177) *
                   C31249 +
               ((C61189 * C796 - C61039 * C943 + C61190 * C3358 -
                 C92252 * C3514) *
                    C182 +
                (C61189 * C1009 - C61039 * C1133 + C61190 * C3588 -
                 C92252 * C3732) *
                    C92177) *
                   C31250 +
               ((C61189 * C795 - C61039 * C944 + C61190 * C3359 -
                 C92252 * C3515) *
                    C182 +
                (C61189 * C1010 - C61039 * C1134 + C61190 * C3589 -
                 C92252 * C3733) *
                    C92177) *
                   C31251) *
                  C92150 * C791 +
              (((C61039 * C946 - C61189 * C798 + C92252 * C5885 -
                 C61190 * C5702) *
                    C182 +
                (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 -
                 C61190 * C5971) *
                    C92177) *
                   C31249 +
               ((C61039 * C947 - C61189 * C799 + C92252 * C5886 -
                 C61190 * C5701) *
                    C182 +
                (C61039 * C1137 - C61189 * C1013 + C92252 * C6138 -
                 C61190 * C5972) *
                    C92177) *
                   C31250 +
               ((C61039 * C948 - C61189 * C800 + C92252 * C7702 -
                 C61190 * C7488) *
                    C182 +
                (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 -
                 C61190 * C7810) *
                    C92177) *
                   C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C182 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C92177) *
               C31249 +
           ((C61189 * C1377 - C61039 * C1524 + C61190 * C1380 -
             C92252 * C1528) *
                C182 +
            (C61189 * C1590 - C61039 * C1714 + C61190 * C1594 -
             C92252 * C1718) *
                C92177) *
               C31250 +
           ((C61189 * C1376 - C61039 * C1525 + C61190 * C1381 -
             C92252 * C1529) *
                C182 +
            (C61189 * C1591 - C61039 * C1715 + C61190 * C1595 -
             C92252 * C1719) *
                C92177) *
               C31251) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C182 +
            (C61039 * C1717 - C61189 * C1593 + C92252 * C11419 -
             C61190 * C11191) *
                C92177) *
               C31249 +
           ((C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
             C61190 * C10867) *
                C182 +
            (C61039 * C1718 - C61189 * C1594 + C92252 * C11420 -
             C61190 * C11192) *
                C92177) *
               C31250 +
           ((C61039 * C1529 - C61189 * C1381 + C92252 * C12983 -
             C61190 * C12747) *
                C182 +
            (C61039 * C1719 - C61189 * C1595 + C92252 * C13314 -
             C61190 * C13095) *
                C92177) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
               C4107 +
           (C61039 * C1132 - C61189 * C1008 + C92252 * C3731 - C61190 * C3587) *
               C4026 +
           (C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C4108 +
           (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 - C61190 * C5971) *
               C4027) *
              C92097 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C4106 +
           (C61445 - C61444 + C61447 - C61446) * C4025 +
           (C63447 - C63448 + C63449 - C63450) * C4107 +
           (C63757 - C63758 + C63759 - C63760) * C4026 +
           (C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
               C4108 +
           (C61189 * C1013 - C61039 * C1137 + C61190 * C5972 - C92252 * C6138) *
               C4027) *
              C92097 * C92150 * C92136 * C98 +
          (C61220 * C4106 + C61459 * C4025 +
           (C63456 - C63455 + C63458 - C63457) * C4107 +
           (C63762 - C63761 + C63764 - C63763) * C4026 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C4108 +
           (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 - C61190 * C7810) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C92150 * C790 +
          ((C66844 - C66843 + C66846 - C66845) * C4106 +
           (C67099 - C67098 + C67101 - C67100) * C4025 +
           (C66852 - C66851 + C66854 - C66853) * C4107 +
           (C67103 - C67102 + C67105 - C67104) * C4026 +
           (C66859 - C66860 + C66861 - C66862) * C4108 +
           (C67106 - C67107 + C67108 - C67109) * C4027) *
              C92097 * C92150 * C791 +
          (C66871 * C4106 + C67112 * C4025 +
           (C66860 - C66859 + C66862 - C66861) * C4107 +
           (C67107 - C67106 + C67109 - C67108) * C4026 +
           (C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
            C61190 * C38990) *
               C4108 +
           (C61039 * C5331 - C61189 * C5141 + C92252 * C39371 -
            C61190 * C39224) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C1372 +
          ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 - C92252 * C1527) *
               C4106 +
           (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 - C92252 * C1717) *
               C4025 +
           (C61189 * C3357 - C61039 * C3513 + C61190 * C5703 - C92252 * C5887) *
               C4107 +
           (C61189 * C3587 - C61039 * C3731 + C61190 * C5973 - C92252 * C6139) *
               C4026 +
           (C61189 * C5702 - C61039 * C5885 + C61190 * C5705 - C92252 * C5889) *
               C4108 +
           (C61189 * C5971 - C61039 * C6137 + C61190 * C5975 - C92252 * C6140) *
               C4027) *
              C92097 * C1373 +
          ((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
            C61190 * C10868) *
               C4106 +
           (C61039 * C1717 - C61189 * C1593 + C92252 * C11419 -
            C61190 * C11191) *
               C4025 +
           (C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
            C61190 * C13749) *
               C4107 +
           (C61039 * C6139 - C61189 * C5973 + C92252 * C14309 -
            C61190 * C14081) *
               C4026 +
           (C61039 * C5889 - C61189 * C5705 + C92252 * C44034 -
            C61190 * C43813) *
               C4108 +
           (C61039 * C6140 - C61189 * C5975 + C92252 * C44379 -
            C61190 * C44146) *
               C4027) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C182 +
           (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
            C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
            C71056 * C11191) *
               C92177) *
              C92097 * C92150 * C92136 * C97 +
          ((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
            C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
            C70952 * C11110) *
               C182 +
           (C71053 * C349 - C70949 * C496 + C71054 * C1590 - C70950 * C1714 +
            C71055 * C1594 - C70951 * C1718 + C71056 * C11192 -
            C70952 * C11420) *
               C92177) *
              C92097 * C92150 * C92136 * C98 +
          ((C70949 * C268 - C71053 * C110 + C70950 * C1525 - C71054 * C1376 +
            C70951 * C1529 - C71055 * C1381 + C70952 * C12983 -
            C71056 * C12747) *
               C182 +
           (C70949 * C497 - C71053 * C350 + C70950 * C1715 - C71054 * C1591 +
            C70951 * C1719 - C71055 * C1595 + C70952 * C13314 -
            C71056 * C13095) *
               C92177) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C182 +
           (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
            C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
            C71056 * C11191) *
               C92177) *
              C92097 * C92150 * C790 +
          ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
            C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
            C70952 * C13979) *
               C182 +
           (C71053 * C1008 - C70949 * C1132 + C71054 * C3587 - C70950 * C3731 +
            C71055 * C5973 - C70951 * C6139 + C71056 * C14081 -
            C70952 * C14309) *
               C92177) *
              C92097 * C92150 * C791 +
          ((C70949 * C946 - C71053 * C798 + C70950 * C5885 - C71054 * C5702 +
            C70951 * C5889 - C71055 * C5705 + C70952 * C44034 -
            C71056 * C43813) *
               C182 +
           (C70949 * C1136 - C71053 * C1012 + C70950 * C6137 - C71054 * C5971 +
            C70951 * C6140 - C71055 * C5975 + C70952 * C44379 -
            C71056 * C44146) *
               C92177) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C182 +
           (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
            C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
            C71056 * C11191) *
               C92177) *
              C92097 * C1372 +
          ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
            C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
            C70952 * C11111) *
               C182 +
           (C71053 * C1589 - C70949 * C1713 + C71054 * C1593 - C70950 * C1717 +
            C71055 * C11191 - C70951 * C11419 + C71056 * C11193 -
            C70952 * C11421) *
               C92177) *
              C92097 * C1373 +
          ((C70949 * C1527 - C71053 * C1379 + C70950 * C11109 -
            C71054 * C10868 + C70951 * C11111 - C71055 * C10869 +
            C70952 * C71986 - C71056 * C71861) *
               C182 +
           (C70949 * C1717 - C71053 * C1593 + C70950 * C11419 -
            C71054 * C11191 + C70951 * C11421 - C71055 * C11193 +
            C70952 * C72164 - C71056 * C72038) *
               C92177) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                C31251 * C118 - C31258 * C110) *
                   C61189 +
               (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
                C31251 * C575 - C31258 * C569) *
                   C61039 +
               (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 -
                C31256 * C1377 + C31251 * C1385 - C31258 * C1376) *
                   C61190 +
               (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 -
                C31256 * C1772 + C31251 * C1781 - C31258 * C1773) *
                   C92252) *
                  C92177 * C92150 * C92136 * C97 +
              ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
                C31258 * C111 - C31251 * C120) *
                   C61189 +
               (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
                C31258 * C570 - C31251 * C576) *
                   C61039 +
               (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 -
                C31250 * C1385 + C31258 * C1375 - C31251 * C1383) *
                   C61190 +
               (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 -
                C31250 * C1781 + C31258 * C1774 - C31251 * C1782) *
                   C92252) *
                  C92177 * C92150 * C92136 * C98 +
              ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
                C31251 * C122 - C31258 * C112) *
                   C61189 +
               (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
                C31251 * C577 - C31258 * C571) *
                   C61039 +
               (C31249 * C1385 - C31254 * C1376 + C31250 * C1383 -
                C31256 * C1375 + C31251 * C2667 - C31258 * C2666) *
                   C61190 +
               (C31249 * C1781 - C31254 * C1773 + C31250 * C1782 -
                C31256 * C1774 + C31251 * C3126 - C31258 * C3125) *
                   C92252) *
                  C92177 * C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
                C31251 * C118 - C31258 * C110) *
                   C61189 +
               (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
                C31251 * C575 - C31258 * C569) *
                   C61039 +
               (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 -
                C31256 * C1377 + C31251 * C1385 - C31258 * C1376) *
                   C61190 +
               (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 -
                C31256 * C1772 + C31251 * C1781 - C31258 * C1773) *
                   C92252) *
                  C92177 * C92150 * C790 +
              ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
               (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
               (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
               (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
                  C92177 * C92150 * C791 +
              ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C61189 +
               (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C61039 +
               (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 -
                C31256 * C5701 + C31251 * C7489 - C31258 * C7488) *
                   C61190 +
               (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 -
                C31256 * C6218 + C31251 * C8134 - C31258 * C8133) *
                   C92252) *
                  C92177 * C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
           (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
              C92177 * C1372 +
          ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
           (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
           (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
           (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
              C92177 * C1373 +
          ((C62754 - C62753 + C62756 - C62755 + C62758 - C62757) * C61189 +
           (C63000 - C62999 + C63002 - C63001 + C63004 - C63003) * C61039 +
           (C31249 * C10873 - C31254 * C10868 + C31250 * C10871 -
            C31256 * C10867 + C31251 * C12748 - C31258 * C12747) *
               C61190 +
           (C31249 * C11501 - C31254 * C11497 + C31250 * C11502 -
            C31256 * C11498 + C31251 * C13420 - C31258 * C13419) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           (C36943 * C61189 + C37114 * C61039 + C57085 * C61190 +
            C57319 * C92252) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C61189 +
            (C36262 * C568 - C92097 * C574) * C61039 +
            (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
               C4025 +
           ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
            (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
               C4026 +
           ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
            (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C61189 +
            (C92097 * C575 - C36262 * C569) * C61039 +
            (C92097 * C1385 - C36262 * C1376) * C61190 +
            (C92097 * C1781 - C36262 * C1773) * C92252) *
               C4025 +
           ((C92097 * C804 - C36262 * C795) * C61189 +
            (C92097 * C1200 - C36262 * C1192) * C61039 +
            (C92097 * C3365 - C36262 * C3359) * C61190 +
            (C92097 * C3807 - C36262 * C3803) * C92252) *
               C4026 +
           ((C92097 * C814 - C36262 * C800) * C61189 +
            (C92097 * C1204 - C36262 * C1196) * C61039 +
            (C92097 * C7489 - C36262 * C7488) * C61190 +
            (C92097 * C8134 - C36262 * C8133) * C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C92150 * C790 +
          (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
            C44151 * C61190 + C44488 * C92252) *
               C4025 +
           ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
            C60428 * C61190 + C60749 * C92252) *
               C4026 +
           ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
            (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
               C4027) *
              C92150 * C791 +
          (C67193 * C4025 +
           (C36945 * C61189 + C37115 * C61039 + (C39236 - C39235) * C61190 +
            (C39448 - C39447) * C92252) *
               C4026 +
           ((C36940 - C36939) * C61189 + (C37113 - C37112) * C61039 +
            (C92097 * C38991 - C36262 * C38990) * C61190 +
            (C92097 * C39441 - C36262 * C39440) * C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C1372 +
          (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
            (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
               C4025 +
           (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
            C44489 * C92252) *
               C4026 +
           (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
            (C40840 - C40841) * C92252) *
               C4027) *
              C1373 +
          ((C41417 * C61189 + C41705 * C61039 + (C41410 - C41409) * C61190 +
            (C41702 - C41701) * C92252) *
               C4025 +
           (C41407 * C61189 + C41700 * C61039 + (C41414 - C41413) * C61190 +
            (C41704 - C41703) * C92252) *
               C4026 +
           ((C40601 - C40600) * C61189 + (C40841 - C40840) * C61039 +
            (C92097 * C43814 - C36262 * C43813) * C61190 +
            (C92097 * C44485 - C36262 * C44484) * C92252) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C71053 +
           (C92097 * C573 - C36262 * C567) * C70949 +
           (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
           C41417 * C71055 + C41705 * C70951 + (C41410 - C41409) * C71056 +
           (C41702 - C41701) * C70952) *
              C92177 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C71053 +
           (C36262 * C568 - C92097 * C574) * C70949 +
           (C43196 - C43197) * C71054 + (C43512 - C43513) * C70950 +
           (C43200 - C43201) * C71055 + (C43514 - C43515) * C70951 +
           (C36262 * C10867 - C92097 * C10871) * C71056 +
           (C36262 * C11498 - C92097 * C11502) * C70952) *
              C92177 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C71053 +
           (C92097 * C575 - C36262 * C569) * C70949 +
           (C92097 * C1385 - C36262 * C1376) * C71054 +
           (C92097 * C1781 - C36262 * C1773) * C70950 +
           (C92097 * C1395 - C36262 * C1381) * C71055 +
           (C92097 * C1785 - C36262 * C1777) * C70951 +
           (C92097 * C12748 - C36262 * C12747) * C71056 +
           (C92097 * C13420 - C36262 * C13419) * C70952) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C71053 +
           (C92097 * C573 - C36262 * C567) * C70949 +
           (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
           C41417 * C71055 + C41705 * C70951 + (C41410 - C41409) * C71056 +
           (C41702 - C41701) * C70952) *
              C92177 * C92150 * C790 +
          ((C36928 - C36927) * C71053 + (C37105 - C37104) * C70949 +
           C44151 * C71054 + C44488 * C70950 + C44153 * C71055 +
           C44489 * C70951 + (C41413 - C41414) * C71056 +
           (C41703 - C41704) * C70952) *
              C92177 * C92150 * C791 +
          (C36943 * C71053 + C37114 * C70949 + C57085 * C71054 +
           C57319 * C70950 + (C40601 - C40600) * C71055 +
           (C40841 - C40840) * C70951 +
           (C92097 * C43814 - C36262 * C43813) * C71056 +
           (C92097 * C44485 - C36262 * C44484) * C70952) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C71053 +
           (C92097 * C573 - C36262 * C567) * C70949 +
           (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
           C41417 * C71055 + C41705 * C70951 + C72043 * C71056 +
           C72218 * C70952) *
              C92177 * C1372 +
          ((C41400 - C41399) * C71053 + (C41697 - C41696) * C70949 +
           (C41404 - C41403) * C71054 + (C41699 - C41698) * C70950 +
           (C41409 - C41410) * C71055 + (C41701 - C41702) * C70951 +
           (C72045 - C72046) * C71056 + (C72219 - C72220) * C70952) *
              C92177 * C1373 +
          (C41417 * C71053 + C41705 * C70949 + C72043 * C71054 +
           C72218 * C70950 + (C72046 - C72045) * C71055 +
           (C72220 - C72219) * C70951 +
           (C92097 * C71862 - C36262 * C71861) * C71056 +
           (C92097 * C72216 - C36262 * C72215) * C70952) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C61189 +
                (C92177 * C629 - C182 * C567) * C61039 +
                (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                   C31249 +
               ((C196 - C197) * C61189 + (C636 - C637) * C61039 +
                C12880 * C61190 + C13529 * C92252) *
                   C31250 +
               C61616 * C31251) *
                  C92150 * C92136 * C97 +
              (((C197 - C196) * C61189 + (C637 - C636) * C61039 +
                C12882 * C61190 + C13530 * C92252) *
                   C31249 +
               ((C201 - C200) * C61189 + (C640 - C639) * C61039 +
                C23027 * C61190 + C23662 * C92252) *
                   C31250 +
               ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
                (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                   C31251) *
                  C92150 * C92136 * C98 +
              (C61616 * C31249 +
               (C214 * C61189 + C647 * C61039 + (C2748 - C2747) * C61190 +
                (C3200 - C3199) * C92252) *
                   C31250 +
               ((C209 - C208) * C61189 + (C645 - C644) * C61039 +
                (C92177 * C2736 - C182 * C2666) * C61190 +
                (C92177 * C3193 - C182 * C3125) * C92252) *
                   C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C92177 * C183 - C182 * C108) * C61189 +
                (C92177 * C629 - C182 * C567) * C61039 +
                (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                   C31249 +
               ((C196 - C197) * C61189 + (C636 - C637) * C61039 +
                C12880 * C61190 + C13529 * C92252) *
                   C31250 +
               C61616 * C31251) *
                  C92150 * C790 +
              (((C182 * C797 - C92177 * C876) * C61189 +
                (C182 * C1190 - C92177 * C1256) * C61039 +
                (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                   C31249 +
               ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
                (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                   C31250 +
               ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
                (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                   C31251) *
                  C92150 * C791 +
              (((C92177 * C880 - C182 * C798) * C61189 +
                (C92177 * C1260 - C182 * C1194) * C61039 +
                (C92177 * C5799 - C182 * C5702) * C61190 +
                (C92177 * C6303 - C182 * C6217) * C92252) *
                   C31249 +
               ((C92177 * C881 - C182 * C799) * C61189 +
                (C92177 * C1261 - C182 * C1195) * C61039 +
                (C92177 * C5800 - C182 * C5701) * C61190 +
                (C92177 * C6304 - C182 * C6218) * C92252) *
                   C31250 +
               ((C92177 * C882 - C182 * C800) * C61189 +
                (C92177 * C1262 - C182 * C1196) * C61039 +
                (C92177 * C7590 - C182 * C7488) * C61190 +
                (C92177 * C8233 - C182 * C8133) * C92252) *
                   C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C1372 +
          (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
            (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
               C31249 +
           (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
            C13531 * C92252) *
               C31250 +
           (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
            (C10007 - C10008) * C92252) *
               C31251) *
              C1373 +
          ((C11027 * C61189 + C11608 * C61039 + (C11020 - C11019) * C61190 +
            (C11605 - C11604) * C92252) *
               C31249 +
           (C11017 * C61189 + C11603 * C61039 + (C11024 - C11023) * C61190 +
            (C11607 - C11606) * C92252) *
               C31250 +
           ((C9505 - C9504) * C61189 + (C10008 - C10007) * C61039 +
            (C92177 * C12877 - C182 * C12747) * C61190 +
            (C92177 * C13527 - C182 * C13419) * C92252) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
           (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
           (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
           (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
              C92097 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C61189 +
           (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C61039 +
           (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
            C4027 * C7590 - C4108 * C7488) *
               C61190 +
           (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 - C4107 * C3803 +
            C4027 * C8233 - C4108 * C8133) *
               C92252) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C61189 +
           (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
            C4108 * C5417 - C4027 * C5517) *
               C61039 +
           (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
            C4108 * C8454 - C4027 * C8588) *
               C61190 +
           (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 - C4026 * C6303 +
            C4108 * C9122 - C4027 * C9232) *
               C92252) *
              C92097 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C61189 +
           (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
            C4027 * C5519 - C4108 * C5419) *
               C61039 +
           (C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
            C4027 * C39084 - C4108 * C38990) *
               C61190 +
           (C4025 * C6303 - C4106 * C6217 + C4026 * C9232 - C4107 * C9122 +
            C4027 * C39514 - C4108 * C39440) *
               C92252) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
           (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
              C92097 * C1372 +
          ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
           (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
           (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
           (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
              C92097 * C1373 +
          ((C67546 - C67545 + C67548 - C67547 + C67550 - C67549) * C61189 +
           (C68050 - C68049 + C68052 - C68051 + C68054 - C68053) * C61039 +
           (C4025 * C11000 - C4106 * C10868 + C4026 * C13869 - C4107 * C13749 +
            C4027 * C43918 - C4108 * C43813) *
               C61190 +
           (C4025 * C11594 - C4106 * C11497 + C4026 * C14515 - C4107 * C14409 +
            C4027 * C44587 - C4108 * C44484) *
               C92252) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C71053 +
           (C92177 * C629 - C182 * C567) * C70949 + (C11009 - C11010) * C71054 +
           (C11599 - C11600) * C70950 + C11027 * C71055 + C11608 * C70951 +
           (C11020 - C11019) * C71056 + (C11605 - C11604) * C70952) *
              C92097 * C92150 * C92136 * C97 +
          ((C197 - C196) * C71053 + (C637 - C636) * C70949 + C12882 * C71054 +
           C13530 * C70950 + C12884 * C71055 + C13531 * C70951 +
           (C11023 - C11024) * C71056 + (C11606 - C11607) * C70952) *
              C92097 * C92150 * C92136 * C98 +
          (C212 * C71053 + C646 * C70949 + C19823 * C71054 + C20322 * C70950 +
           (C9505 - C9504) * C71055 + (C10008 - C10007) * C70951 +
           (C92177 * C12877 - C182 * C12747) * C71056 +
           (C92177 * C13527 - C182 * C13419) * C70952) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C71053 +
           (C92177 * C629 - C182 * C567) * C70949 + (C11009 - C11010) * C71054 +
           (C11599 - C11600) * C70950 + C11027 * C71055 + C11608 * C70951 +
           (C11020 - C11019) * C71056 + (C11605 - C11604) * C70952) *
              C92097 * C92150 * C790 +
          ((C182 * C797 - C92177 * C876) * C71053 +
           (C182 * C1190 - C92177 * C1256) * C70949 +
           (C13874 - C13875) * C71054 + (C14518 - C14519) * C70950 +
           (C13878 - C13879) * C71055 + (C14520 - C14521) * C70951 +
           (C182 * C13749 - C92177 * C13869) * C71056 +
           (C182 * C14409 - C92177 * C14515) * C70952) *
              C92097 * C92150 * C791 +
          ((C92177 * C880 - C182 * C798) * C71053 +
           (C92177 * C1260 - C182 * C1194) * C70949 +
           (C92177 * C5799 - C182 * C5702) * C71054 +
           (C92177 * C6303 - C182 * C6217) * C70950 +
           (C92177 * C5802 - C182 * C5705) * C71055 +
           (C92177 * C6306 - C182 * C6221) * C70951 +
           (C92177 * C43918 - C182 * C43813) * C71056 +
           (C92177 * C44587 - C182 * C44484) * C70952) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C71053 +
           (C92177 * C629 - C182 * C567) * C70949 + (C11009 - C11010) * C71054 +
           (C11599 - C11600) * C70950 + C11027 * C71055 + C11608 * C70951 +
           C71927 * C71056 + C72272 * C70952) *
              C92097 * C1372 +
          ((C11010 - C11009) * C71053 + (C11600 - C11599) * C70949 +
           (C11014 - C11013) * C71054 + (C11602 - C11601) * C70950 +
           (C11019 - C11020) * C71055 + (C11604 - C11605) * C70951 +
           (C71929 - C71930) * C71056 + (C72273 - C72274) * C70952) *
              C92097 * C1373 +
          (C11027 * C71053 + C11608 * C70949 + C71927 * C71054 +
           C72272 * C70950 + (C71930 - C71929) * C71055 +
           (C72274 - C72273) * C70951 +
           (C92177 * C71922 - C182 * C71861) * C71056 +
           (C92177 * C72270 - C182 * C72215) * C70952) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
                C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
                C92252 * C1898) *
                   C92177 * C31249 +
               (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
                  C92150 * C92136 * C97 -
              ((C61733 + C61734) * C92177 * C31251 +
               (C61732 + C61731) * C92177 * C31250 +
               (C61730 + C61729) * C92177 * C31249) *
                  C92150 * C92136 * C98 +
              (C61736 * C31249 + (C61734 + C61733) * C92177 * C31250 +
               (C61189 * C270 - C61690 * C112 - C61189 * C571 + C61039 * C706 +
                C61190 * C2816 - C61691 * C2666 - C61190 * C3125 +
                C92252 * C3266) *
                   C92177 * C31251) *
                  C92150 * C92136 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
                C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
                C92252 * C1898) *
                   C92177 * C31249 +
               (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
                  C92150 * C790 -
              ((C61190 * C3515 - C61691 * C3359 - C61190 * C3803 +
                C92252 * C3947 + C61189 * C944 - C61690 * C795 -
                C61189 * C1192 + C61039 * C1315) *
                   C92177 * C31251 +
               (C61190 * C3514 - C61691 * C3358 - C61190 * C3802 +
                C92252 * C3946 + C61189 * C943 - C61690 * C796 -
                C61189 * C1191 + C61039 * C1316) *
                   C92177 * C31250 +
               (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 +
                C92252 * C3945 + C61189 * C942 - C61690 * C797 -
                C61189 * C1190 + C61039 * C1317) *
                   C92177 * C31249) *
                  C92150 * C791 +
              ((C61189 * C946 - C61690 * C798 - C61189 * C1194 +
                C61039 * C1318 + C61190 * C5885 - C61691 * C5702 -
                C61190 * C6217 + C92252 * C6384) *
                   C92177 * C31249 +
               (C61189 * C947 - C61690 * C799 - C61189 * C1195 +
                C61039 * C1319 + C61190 * C5886 - C61691 * C5701 -
                C61190 * C6218 + C92252 * C6383) *
                   C92177 * C31250 +
               (C61189 * C948 - C61690 * C800 - C61189 * C1196 +
                C61039 * C1320 + C61190 * C7702 - C61691 * C7488 -
                C61190 * C8133 + C92252 * C8338) *
                   C92177 * C31251) *
                  C92150 * C792) *
             C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C1372 -
          ((C61190 * C1529 - C61691 * C1381 - C61190 * C1777 + C92252 * C1901 +
            C61189 * C1525 - C61690 * C1376 - C61189 * C1773 + C61039 * C1896) *
               C92177 * C31251 +
           (C61190 * C1528 - C61691 * C1380 - C61190 * C1776 + C92252 * C1900 +
            C61189 * C1524 - C61690 * C1377 - C61189 * C1772 + C61039 * C1897) *
               C92177 * C31250 +
           (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
            C61189 * C1523 - C61690 * C1378 - C61189 * C1771 + C61039 * C1898) *
               C92177 * C31249) *
              C1373 +
          ((C61189 * C1527 - C61690 * C1379 - C61189 * C1775 + C61039 * C1899 +
            C61190 * C11109 - C61691 * C10868 - C61190 * C11497 +
            C92252 * C11683) *
               C92177 * C31249 +
           (C61189 * C1528 - C61690 * C1380 - C61189 * C1776 + C61039 * C1900 +
            C61190 * C11110 - C61691 * C10867 - C61190 * C11498 +
            C92252 * C11682) *
               C92177 * C31250 +
           (C61189 * C1529 - C61690 * C1381 - C61189 * C1777 + C61039 * C1901 +
            C61190 * C12983 - C61691 * C12747 - C61190 * C13419 +
            C92252 * C13629) *
               C92177 * C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317 +
            C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945) *
               C4026 +
           (C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C4027) *
              C92097 * C92150 * C92136 * C97 -
          ((C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383 +
            C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319) *
               C4027 +
           (C64085 + C64086) * C4026 + (C61730 + C61729) * C4025) *
              C92097 * C92150 * C92136 * C98 +
          (C61735 * C4025 + (C64084 + C64083) * C4026 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C92150 * C790 -
          ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
           (C67379 + C67378) * C4025) *
              C92097 * C92150 * C791 +
          (C67384 * C4025 + (C67383 + C67382) * C4026 +
           (C61189 * C5032 - C61690 * C4816 - C61189 * C5419 + C61039 * C5597 +
            C61190 * C39152 - C61691 * C38990 - C61190 * C39440 +
            C92252 * C39581) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C1372 -
          ((C61190 * C5889 - C61691 * C5705 - C61190 * C6221 + C92252 * C6386 +
            C61189 * C5885 - C61690 * C5702 - C61189 * C6217 + C61039 * C6384) *
               C4027 +
           (C61190 * C5887 - C61691 * C5703 - C61190 * C6219 + C92252 * C6385 +
            C61189 * C3513 - C61690 * C3357 - C61189 * C3801 + C61039 * C3945) *
               C4026 +
           (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
            C61189 * C1523 - C61690 * C1378 - C61189 * C1771 + C61039 * C1898) *
               C4025) *
              C92097 * C1373 +
          ((C61189 * C1527 - C61690 * C1379 - C61189 * C1775 + C61039 * C1899 +
            C61190 * C11109 - C61691 * C10868 - C61190 * C11497 +
            C92252 * C11683) *
               C4025 +
           (C61189 * C5887 - C61690 * C5703 - C61189 * C6219 + C61039 * C6385 +
            C61190 * C13979 - C61691 * C13749 - C61190 * C14409 +
            C92252 * C14619) *
               C4026 +
           (C61189 * C5889 - C61690 * C5705 - C61189 * C6221 + C61039 * C6386 +
            C61190 * C44034 - C61691 * C43813 - C61190 * C44484 +
            C92252 * C44694) *
               C4027) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
           C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
           C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
           C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
           C70952 * C11683) *
              C92177 * C92097 * C92150 * C92136 * C97 -
          (C71056 * C11110 - C71360 * C10867 - C71056 * C11498 +
           C70952 * C11682 + C71055 * C1528 - C71359 * C1380 - C71055 * C1776 +
           C70951 * C1900 + C71054 * C1524 - C71358 * C1377 - C71054 * C1772 +
           C70950 * C1897 + C71053 * C267 - C71357 * C109 - C71053 * C568 +
           C70949 * C703) *
              C92177 * C92097 * C92150 * C92136 * C98 +
          (C71053 * C268 - C71357 * C110 - C71053 * C569 + C70949 * C704 +
           C71054 * C1525 - C71358 * C1376 - C71054 * C1773 + C70950 * C1896 +
           C71055 * C1529 - C71359 * C1381 - C71055 * C1777 + C70951 * C1901 +
           C71056 * C12983 - C71360 * C12747 - C71056 * C13419 +
           C70952 * C13629) *
              C92177 * C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
           C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
           C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
           C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
           C70952 * C11683) *
              C92177 * C92097 * C92150 * C790 -
          (C71056 * C13979 - C71360 * C13749 - C71056 * C14409 +
           C70952 * C14619 + C71055 * C5887 - C71359 * C5703 - C71055 * C6219 +
           C70951 * C6385 + C71054 * C3513 - C71358 * C3357 - C71054 * C3801 +
           C70950 * C3945 + C71053 * C942 - C71357 * C797 - C71053 * C1190 +
           C70949 * C1317) *
              C92177 * C92097 * C92150 * C791 +
          (C71053 * C946 - C71357 * C798 - C71053 * C1194 + C70949 * C1318 +
           C71054 * C5885 - C71358 * C5702 - C71054 * C6217 + C70950 * C6384 +
           C71055 * C5889 - C71359 * C5705 - C71055 * C6221 + C70951 * C6386 +
           C71056 * C44034 - C71360 * C43813 - C71056 * C44484 +
           C70952 * C44694) *
              C92177 * C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
           C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
           C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
           C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
           C70952 * C11683) *
              C92177 * C92097 * C1372 -
          (C71056 * C11111 - C71360 * C10869 - C71056 * C11499 +
           C70952 * C11684 + C71055 * C11109 - C71359 * C10868 -
           C71055 * C11497 + C70951 * C11683 + C71054 * C1527 - C71358 * C1379 -
           C71054 * C1775 + C70950 * C1899 + C71053 * C1523 - C71357 * C1378 -
           C71053 * C1771 + C70949 * C1898) *
              C92177 * C92097 * C1373 +
          (C71053 * C1527 - C71357 * C1379 - C71053 * C1775 + C70949 * C1899 +
           C71054 * C11109 - C71358 * C10868 - C71054 * C11497 +
           C70950 * C11683 + C71055 * C11111 - C71359 * C10869 -
           C71055 * C11499 + C70951 * C11684 + C71056 * C71986 -
           C71360 * C71861 - C71056 * C72215 + C70952 * C72324) *
              C92177 * C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C2664 -
           ((C40347 * C92252 + C39014 * C61039) * C4027 +
            (C40346 * C92252 + C39015 * C61039) * C4026 +
            (C41135 * C92252 + C41134 * C61039) * C4025) *
               C2665) *
              C92136 * C1971 +
          (((C42892 * C61039 + C42893 * C92252) * C4025 +
            (C41982 * C61039 + C41983 * C92252) * C4026 +
            (C58338 * C61039 + (C36262 * C5717 - C36263 * C5706 -
                                C36262 * C5718 + C92097 * C5724) *
                                   C92252) *
                C4027) *
               C2665 -
           ((C68230 + C68229) * C4027 + (C68228 + C68227) * C4026 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C61039) *
                C4025) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C2664 -
           ((C62516 + C62517 + C62518) * C92252 +
            (C62515 + C62514 + C62513) * C61039) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C64203 + C64204 + C64205) * C61039 +
            (C31254 * C1393 - C31255 * C1380 - C31254 * C1394 + C31249 * C1404 +
             C31256 * C1395 - C31257 * C1381 - C31256 * C1396 + C31250 * C1405 +
             C31258 * C1397 - C31259 * C1382 - C31258 * C1398 +
             C31251 * C1406) *
                C92252) *
               C92177 * C2665 -
           ((C64205 + C64204 + C64203) * C92252 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C61039) *
               C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C70949 +
            C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
               C92177 * C2664 -
           (C71872 * C70952 + C41137 * C70951 + C41135 * C70950 +
            C41134 * C70949) *
               C92177 * C2665) *
              C92136 * C1971 +
          ((C42892 * C70949 + C42893 * C70950 + C72992 * C70951 +
            (C36262 * C10877 - C36263 * C10870 - C36262 * C10878 +
             C92097 * C10882) *
                C70952) *
               C92177 * C2665 -
           (C72992 * C70952 + C42893 * C70951 + C42892 * C70950 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C70949) *
               C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C2664 +
           (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
             (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
                C61039 +
            ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
             (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
             (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
                C61039 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
             (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
                C92252) *
               C2664 +
           (((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C36262 +
             (C7600 - C7599 + C7602 - C7601 + C7604 - C7603) * C92097) *
                C61039 +
            ((C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
              C4027 * C5804 - C4108 * C5706) *
                 C36262 +
             (C4025 * C1470 - C4106 * C1394 + C4026 * C5809 - C4107 * C5714 +
              C4027 * C5810 - C4108 * C5718) *
                 C92097) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
             C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
             C23028 * C31251) *
                C61039 +
            ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
             C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
             (C9506 - C9507) * C31251) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C31254 + (C199 - C198) * C31249 +
             (C201 - C200) * C31256 + (C203 - C202) * C31250 +
             (C205 - C204) * C31258 + (C207 - C206) * C31251) *
                C61039 +
            (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
             C23028 * C31250 + (C2747 - C2748) * C31258 +
             (C2749 - C2750) * C31251) *
                C92252) *
               C2664 +
           ((C12880 * C31254 + C12881 * C31249 + C19823 * C31256 +
             C19824 * C31250 + (C2748 - C2747) * C31258 +
             (C2750 - C2749) * C31251) *
                C61039 +
            (C11017 * C31254 + C11018 * C31249 + (C9505 - C9504) * C31256 +
             (C9507 - C9506) * C31250 +
             (C92177 * C1464 - C182 * C1382) * C31258 +
             (C92177 * C1472 - C182 * C1398) * C31251) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C36262 +
             (C92177 * C189 - C182 * C115) * C92097) *
                C70949 +
            ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
            C71933 * C70951 + C71936 * C70952) *
               C2664 +
           (((C11010 - C11009) * C36262 + (C11012 - C11011) * C92097) * C70949 +
            ((C11014 - C11013) * C36262 + (C11016 - C11015) * C92097) * C70950 +
            ((C11019 - C11020) * C36262 + (C11021 - C11022) * C92097) * C70951 +
            ((C71929 - C71930) * C36262 + (C71931 - C71932) * C92097) *
                C70952) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C36262 + (C199 - C198) * C92097) * C70949 +
            (C12882 * C36262 + C12883 * C92097) * C70950 +
            (C12884 * C36262 + C12885 * C92097) * C70951 +
            ((C11023 - C11024) * C36262 + (C11025 - C11026) * C92097) *
                C70952) *
               C2664 +
           ((C12880 * C36262 + C12881 * C92097) * C70949 +
            (C11017 * C36262 + C11018 * C92097) * C70950 +
            ((C11024 - C11023) * C36262 + (C11026 - C11025) * C92097) * C70951 +
            ((C92177 * C11003 - C182 * C10870) * C36262 +
             (C92177 * C11007 - C182 * C10878) * C92097) *
                C70952) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C4025 +
            ((C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
              C92252 * C5887) *
                 C36262 +
             (C61189 * C3362 - C61039 * C3517 + C61190 * C5712 -
              C92252 * C5893) *
                 C92097) *
                C4026 +
            ((C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
              C92252 * C5889) *
                 C36262 +
             (C61189 * C5710 - C61039 * C5891 + C61190 * C5716 -
              C92252 * C5895) *
                 C92097) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C36262 +
             (C61197 - C61196 + C61199 - C61198) * C92097) *
                C4025 +
            ((C63447 - C63448 + C63449 - C63450) * C36262 +
             (C63451 - C63452 + C63453 - C63454) * C92097) *
                C4026 +
            ((C68427 - C68428 + C68429 - C68430) * C36262 +
             (C68431 - C68432 + C68433 - C68434) * C92097) *
                C4027) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C36262 +
             (C64407 - C64406 + C64409 - C64408) * C92097) *
                C4025 +
            ((C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
              C61190 * C5704) *
                 C36262 +
             (C61039 * C3518 - C61189 * C3364 + C92252 * C5894 -
              C61190 * C5714) *
                 C92097) *
                C4026 +
            ((C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
              C61190 * C5706) *
                 C36262 +
             (C61039 * C5892 - C61189 * C5708 + C92252 * C5896 -
              C61190 * C5718) *
                 C92097) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C31254 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C31249 +
            (C64402 - C64403 + C64404 - C64405) * C31256 +
            (C64406 - C64407 + C64408 - C64409) * C31250 +
            (C64410 - C64411 + C64412 - C64413) * C31258 +
            (C64414 - C64415 + C64416 - C64417) * C31251) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C31254 +
            (C61197 - C61196 + C61199 - C61198) * C31249 +
            (C61201 - C61200 + C61203 - C61202) * C31256 +
            (C61205 - C61204 + C61207 - C61206) * C31250 +
            (C61208 - C61209 + C61210 - C61211) * C31258 +
            (C61212 - C61213 + C61214 - C61215) * C31251) *
               C92177 * C2664 +
           ((C64403 - C64402 + C64405 - C64404) * C31254 +
            (C64407 - C64406 + C64409 - C64408) * C31249 +
            (C64411 - C64410 + C64413 - C64412) * C31256 +
            (C64415 - C64414 + C64417 - C64416) * C31250 +
            (C61039 * C1526 - C61189 * C1375 + C92252 * C1530 -
             C61190 * C1382) *
                C31258 +
            (C61039 * C1534 - C61189 * C1384 + C92252 * C1538 -
             C61190 * C1398) *
                C31251) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C36262 +
            (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
             C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
             C71056 * C10874) *
                C92097) *
               C92177 * C2664 +
           ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
             C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
             C70952 * C11111) *
                C36262 +
            (C71053 * C1390 - C70949 * C1531 + C71054 * C1392 - C70950 * C1535 +
             C71055 * C10874 - C70951 * C11113 + C71056 * C10876 -
             C70952 * C11115) *
                C92097) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
             C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
             C70952 * C11110) *
                C36262 +
            (C71053 * C117 - C70949 * C273 + C71054 * C1388 - C70950 * C1532 +
             C71055 * C1394 - C70951 * C1536 + C71056 * C10872 -
             C70952 * C11114) *
                C92097) *
               C92177 * C2664 +
           ((C70949 * C1524 - C71053 * C1377 + C70950 * C1528 - C71054 * C1380 +
             C70951 * C11110 - C71055 * C10867 + C70952 * C11112 -
             C71056 * C10870) *
                C36262 +
            (C70949 * C1532 - C71053 * C1388 + C70950 * C1536 - C71054 * C1394 +
             C70951 * C11114 - C71055 * C10872 + C70952 * C11116 -
             C71056 * C10878) *
                C92097) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
             C44151 * C4107 + C44152 * C4026 + C60428 * C4108 +
             C60429 * C4027) *
                C61039 +
            ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
             C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
             (C40602 - C40603) * C4027) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C4106 +
             (C36262 * C349 - C92097 * C355) * C4025 +
             (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
             (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
                C61039 +
            ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
             (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
             (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
                C92252) *
               C2664 +
           (((C43197 - C43196) * C4106 + (C43199 - C43198) * C4025 +
             (C42281 - C42280) * C4107 + (C42283 - C42282) * C4026 +
             (C58635 - C58634) * C4108 + (C58637 - C58636) * C4027) *
                C61039 +
            ((C43201 - C43200) * C4106 + (C43203 - C43202) * C4025 +
             (C42285 - C42284) * C4107 + (C42287 - C42286) * C4026 +
             (C92097 * C5717 - C36262 * C5706) * C4108 +
             (C92097 * C5982 - C36262 * C5976) * C4027) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C2664 +
           (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
             (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
                C61039 +
            ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
             (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C182 +
             (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
              C31258 * C351 - C31251 * C357) *
                 C92177) *
                C61039 +
            ((C64516 - C64517 + C64518 - C64519 + C64520 - C64521) * C182 +
             (C64522 - C64523 + C64524 - C64525 + C64526 - C64527) * C92177) *
                C92252) *
               C2664 +
           (((C64517 - C64516 + C64519 - C64518 + C64521 - C64520) * C182 +
             (C64523 - C64522 + C64525 - C64524 + C64527 - C64526) * C92177) *
                C61039 +
            ((C31249 * C1393 - C31254 * C1380 + C31250 * C1395 -
              C31256 * C1381 + C31251 * C1397 - C31258 * C1382) *
                 C182 +
             (C31249 * C1602 - C31254 * C1594 + C31250 * C1603 -
              C31256 * C1595 + C31251 * C1604 - C31258 * C1596) *
                 C92177) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C182 +
             (C92097 * C354 - C36262 * C348) * C92177) *
                C70949 +
            ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
            C72049 * C70951 + C72052 * C70952) *
               C2664 +
           (((C41400 - C41399) * C182 + (C41402 - C41401) * C92177) * C70949 +
            ((C41404 - C41403) * C182 + (C41406 - C41405) * C92177) * C70950 +
            ((C41409 - C41410) * C182 + (C41411 - C41412) * C92177) * C70951 +
            ((C72045 - C72046) * C182 + (C72047 - C72048) * C92177) * C70952) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C182 +
             (C36262 * C349 - C92097 * C355) * C92177) *
                C70949 +
            ((C43196 - C43197) * C182 + (C43198 - C43199) * C92177) * C70950 +
            ((C43200 - C43201) * C182 + (C43202 - C43203) * C92177) * C70951 +
            ((C73191 - C73192) * C182 + (C73193 - C73194) * C92177) * C70952) *
               C2664 +
           (((C43197 - C43196) * C182 + (C43199 - C43198) * C92177) * C70949 +
            ((C43201 - C43200) * C182 + (C43203 - C43202) * C92177) * C70950 +
            ((C73192 - C73191) * C182 + (C73194 - C73193) * C92177) * C70951 +
            ((C92097 * C10877 - C36262 * C10870) * C182 +
             (C92097 * C11198 - C36262 * C11194) * C92177) *
                C70952) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C2664 -
           ((C67818 + C67819 + C67820) * C92097 * C92252 +
            (C67817 + C67816 + C67815) * C92097 * C61039) *
               C2665) *
              C92136 * C1971 +
          (((C7932 + C7931 + C7930) * C92097 * C61039 +
            (C4106 * C1462 - C4363 * C1380 - C4106 * C1594 + C4025 * C1660 +
             C4107 * C5803 - C4364 * C5704 - C4107 * C5974 + C4026 * C6061 +
             C4108 * C5804 - C4365 * C5706 - C4108 * C5976 + C4027 * C6062) *
                C92097 * C92252) *
               C2665 -
           ((C7930 + C7931 + C7932) * C92097 * C92252 +
            (C4405 + C4404 + C4403) * C92097 * C61039) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C2664 -
           ((C62842 + C62843 + C62844) * C92252 +
            (C62841 + C62840 + C62839) * C61039) *
               C2665) *
              C92136 * C1971 +
          (((C64626 + C64627 + C64628) * C61039 +
            (C9769 * C31249 + C9770 * C31250 +
             (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                 C31251) *
                C92252) *
               C2665 -
           ((C64628 + C64627 + C64626) * C92252 +
            (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
                C70949 +
            C72104 * C70950 + C72105 * C70951 + C72106 * C70952) *
               C2664 -
           (C72114 * C70952 + C72106 * C70951 + C72105 * C70950 +
            C72104 * C70949) *
               C2665) *
              C92136 * C1971 +
          ((C73261 * C70949 + C73262 * C70950 + C73263 * C70951 +
            (C182 * C11003 - C410 * C10870 - C182 * C11194 + C92177 * C11309) *
                C92097 * C70952) *
               C2665 -
           (C73263 * C70952 + C73262 * C70951 + C73261 * C70950 +
            C442 * C92097 * C70949) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C4106 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C4025 +
            (C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
             C92252 * C5887) *
                C4107 +
            (C61189 * C3587 - C61039 * C3731 + C61190 * C5973 -
             C92252 * C6139) *
                C4026 +
            (C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
             C92252 * C5889) *
                C4108 +
            (C61189 * C5971 - C61039 * C6137 + C61190 * C5975 -
             C92252 * C6140) *
                C4027) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C4106 +
            (C61445 - C61444 + C61447 - C61446) * C4025 +
            (C63447 - C63448 + C63449 - C63450) * C4107 +
            (C63757 - C63758 + C63759 - C63760) * C4026 +
            (C68427 - C68428 + C68429 - C68430) * C4108 +
            (C68729 - C68730 + C68731 - C68732) * C4027) *
               C92097 * C2664 +
           ((C64403 - C64402 + C64405 - C64404) * C4106 +
            (C64728 - C64727 + C64730 - C64729) * C4025 +
            (C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
             C61190 * C5704) *
                C4107 +
            (C61039 * C3732 - C61189 * C3588 + C92252 * C6141 -
             C61190 * C5974) *
                C4026 +
            (C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
             C61190 * C5706) *
                C4108 +
            (C61039 * C6138 - C61189 * C5972 + C92252 * C6142 -
             C61190 * C5976) *
                C4027) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C31249 +
            ((C64402 - C64403 + C64404 - C64405) * C182 +
             (C64727 - C64728 + C64729 - C64730) * C92177) *
                C31250 +
            ((C64410 - C64411 + C64412 - C64413) * C182 +
             (C64731 - C64732 + C64733 - C64734) * C92177) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C182 +
             (C61445 - C61444 + C61447 - C61446) * C92177) *
                C31249 +
            ((C61201 - C61200 + C61203 - C61202) * C182 +
             (C61450 - C61449 + C61452 - C61451) * C92177) *
                C31250 +
            ((C61208 - C61209 + C61210 - C61211) * C182 +
             (C61453 - C61454 + C61455 - C61456) * C92177) *
                C31251) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C182 +
             (C64728 - C64727 + C64730 - C64729) * C92177) *
                C31249 +
            ((C64411 - C64410 + C64413 - C64412) * C182 +
             (C64732 - C64731 + C64734 - C64733) * C92177) *
                C31250 +
            ((C61039 * C1526 - C61189 * C1375 + C92252 * C1530 -
              C61190 * C1382) *
                 C182 +
             (C61039 * C1716 - C61189 * C1592 + C92252 * C1720 -
              C61190 * C1596) *
                 C92177) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
             C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
             C71056 * C10868) *
                C182 +
            (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
             C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
             C71056 * C11191) *
                C92177) *
               C92097 * C2664 +
           ((C71053 * C1378 - C70949 * C1523 + C71054 * C1379 - C70950 * C1527 +
             C71055 * C10868 - C70951 * C11109 + C71056 * C10869 -
             C70952 * C11111) *
                C182 +
            (C71053 * C1589 - C70949 * C1713 + C71054 * C1593 - C70950 * C1717 +
             C71055 * C11191 - C70951 * C11419 + C71056 * C11193 -
             C70952 * C11421) *
                C92177) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
             C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
             C70952 * C11110) *
                C182 +
            (C71053 * C349 - C70949 * C496 + C71054 * C1590 - C70950 * C1714 +
             C71055 * C1594 - C70951 * C1718 + C71056 * C11192 -
             C70952 * C11420) *
                C92177) *
               C92097 * C2664 +
           ((C70949 * C1524 - C71053 * C1377 + C70950 * C1528 - C71054 * C1380 +
             C70951 * C11110 - C71055 * C10867 + C70952 * C11112 -
             C71056 * C10870) *
                C182 +
            (C70949 * C1714 - C71053 * C1590 + C70950 * C1718 - C71054 * C1594 +
             C70951 * C11420 - C71055 * C11192 + C70952 * C11422 -
             C71056 * C11194) *
                C92177) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C2664 +
           (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
             (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
                C4025 +
            (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
             C44489 * C92252) *
                C4026 +
            (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
             (C40840 - C40841) * C92252) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C61189 +
             (C36262 * C568 - C92097 * C574) * C61039 +
             (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
                C4025 +
            ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
             (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
                C4026 +
            ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
             (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
                C4027) *
               C2664 +
           (((C43197 - C43196) * C61189 + (C43513 - C43512) * C61039 +
             (C43201 - C43200) * C61190 + (C43515 - C43514) * C92252) *
                C4025 +
            ((C42281 - C42280) * C61189 + (C42583 - C42582) * C61039 +
             (C42285 - C42284) * C61190 + (C42585 - C42584) * C92252) *
                C4026 +
            ((C58635 - C58634) * C61189 + (C58933 - C58932) * C61039 +
             (C92097 * C5717 - C36262 * C5706) * C61190 +
             (C92097 * C6228 - C36262 * C6222) * C92252) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C2664 +
           ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
            (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
            (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
            (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C61189 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C61039 +
            (C64516 - C64517 + C64518 - C64519 + C64520 - C64521) * C61190 +
            (C64833 - C64834 + C64835 - C64836 + C64837 - C64838) * C92252) *
               C92177 * C2664 +
           ((C64517 - C64516 + C64519 - C64518 + C64521 - C64520) * C61189 +
            (C64834 - C64833 + C64836 - C64835 + C64838 - C64837) * C61039 +
            (C31249 * C1393 - C31254 * C1380 + C31250 * C1395 - C31256 * C1381 +
             C31251 * C1397 - C31258 * C1382) *
                C61190 +
            (C31249 * C1784 - C31254 * C1776 + C31250 * C1785 - C31256 * C1777 +
             C31251 * C1786 - C31258 * C1778) *
                C92252) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C71053 +
            (C92097 * C573 - C36262 * C567) * C70949 +
            (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
            C41417 * C71055 + C41705 * C70951 + C72043 * C71056 +
            C72218 * C70952) *
               C92177 * C2664 +
           ((C41400 - C41399) * C71053 + (C41697 - C41696) * C70949 +
            (C41404 - C41403) * C71054 + (C41699 - C41698) * C70950 +
            (C41409 - C41410) * C71055 + (C41701 - C41702) * C70951 +
            (C72045 - C72046) * C71056 + (C72219 - C72220) * C70952) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C36262 * C109 - C92097 * C116) * C71053 +
            (C36262 * C568 - C92097 * C574) * C70949 +
            (C43196 - C43197) * C71054 + (C43512 - C43513) * C70950 +
            (C43200 - C43201) * C71055 + (C43514 - C43515) * C70951 +
            (C73191 - C73192) * C71056 + (C73396 - C73397) * C70952) *
               C92177 * C2664 +
           ((C43197 - C43196) * C71053 + (C43513 - C43512) * C70949 +
            (C43201 - C43200) * C71054 + (C43515 - C43514) * C70950 +
            (C73192 - C73191) * C71055 + (C73397 - C73396) * C70951 +
            (C92097 * C10877 - C36262 * C10870) * C71056 +
            (C92097 * C11504 - C36262 * C11500) * C70952) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C2664 +
           ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
            (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
            (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
            (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
            (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
               C92097 * C2664 +
           ((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C61189 +
            (C8236 - C8235 + C8238 - C8237 + C8240 - C8239) * C61039 +
            (C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
             C4027 * C5804 - C4108 * C5706) *
                C61190 +
            (C4025 * C1842 - C4106 * C1776 + C4026 * C6307 - C4107 * C6220 +
             C4027 * C6308 - C4108 * C6222) *
                C92252) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C2664 +
           (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
             (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
                C31249 +
            (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
             C13531 * C92252) *
                C31250 +
            (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
             (C10007 - C10008) * C92252) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
             C13530 * C92252) *
                C31249 +
            ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
             C23662 * C92252) *
                C31250 +
            ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
             (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                C31251) *
               C2664 +
           ((C12880 * C61189 + C13529 * C61039 + C11017 * C61190 +
             C11603 * C92252) *
                C31249 +
            (C19823 * C61189 + C20322 * C61039 + (C9505 - C9504) * C61190 +
             (C10008 - C10007) * C92252) *
                C31250 +
            ((C2748 - C2747) * C61189 + (C3200 - C3199) * C61039 +
             (C92177 * C1464 - C182 * C1382) * C61190 +
             (C92177 * C1844 - C182 * C1778) * C92252) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C71053 +
            (C92177 * C629 - C182 * C567) * C70949 +
            (C11009 - C11010) * C71054 + (C11599 - C11600) * C70950 +
            C11027 * C71055 + C11608 * C70951 + C71927 * C71056 +
            C72272 * C70952) *
               C92097 * C2664 +
           ((C11010 - C11009) * C71053 + (C11600 - C11599) * C70949 +
            (C11014 - C11013) * C71054 + (C11602 - C11601) * C70950 +
            (C11019 - C11020) * C71055 + (C11604 - C11605) * C70951 +
            (C71929 - C71930) * C71056 + (C72273 - C72274) * C70952) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C197 - C196) * C71053 + (C637 - C636) * C70949 + C12882 * C71054 +
            C13530 * C70950 + C12884 * C71055 + C13531 * C70951 +
            (C11023 - C11024) * C71056 + (C11606 - C11607) * C70952) *
               C92097 * C2664 +
           (C12880 * C71053 + C13529 * C70949 + C11017 * C71054 +
            C11603 * C70950 + (C11024 - C11023) * C71055 +
            (C11607 - C11606) * C70951 +
            (C92177 * C11003 - C182 * C10870) * C71056 +
            (C92177 * C11597 - C182 * C11500) * C70952) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C4025 +
            (C67378 + C67379) * C4026 + C67384 * C4027) *
               C92097 * C2664 -
           ((C61190 * C5889 - C61691 * C5705 - C61190 * C6221 + C92252 * C6386 +
             C61189 * C5885 - C61690 * C5702 - C61189 * C6217 +
             C61039 * C6384) *
                C4027 +
            (C61190 * C5887 - C61691 * C5703 - C61190 * C6219 + C92252 * C6385 +
             C61189 * C3513 - C61690 * C3357 - C61189 * C3801 +
             C61039 * C3945) *
                C4026 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C4025) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C65062 + C65061) * C4025 +
            (C61189 * C3514 - C61690 * C3358 - C61189 * C3802 + C61039 * C3946 +
             C61190 * C5888 - C61691 * C5704 - C61190 * C6220 +
             C92252 * C6387) *
                C4026 +
            (C61189 * C5886 - C61690 * C5701 - C61189 * C6218 + C61039 * C6383 +
             C61190 * C5890 - C61691 * C5706 - C61190 * C6222 +
             C92252 * C6388) *
                C4027) *
               C92097 * C2665 -
           ((C69040 + C69039) * C4027 + (C64085 + C64086) * C4026 +
            (C61730 + C61729) * C4025) *
               C92097 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92177 * C31249 +
            (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
               C2664 -
           ((C65059 + C65060) * C92177 * C31251 +
            (C65061 + C65062) * C92177 * C31250 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C92177 * C31249) *
               C2665) *
              C92136 * C1971 +
          (((C65062 + C65061) * C92177 * C31249 +
            (C65060 + C65059) * C92177 * C31250 +
            (C61189 * C1526 - C61690 * C1375 - C61189 * C1774 + C61039 * C1895 +
             C61190 * C1530 - C61691 * C1382 - C61190 * C1778 +
             C92252 * C1902) *
                C92177 * C31251) *
               C2665 -
           ((C61733 + C61734) * C92177 * C31251 +
            (C61732 + C61731) * C92177 * C31250 +
            (C61730 + C61729) * C92177 * C31249) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
            C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
            C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
            C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
            C70952 * C11683) *
               C92177 * C92097 * C2664 -
           (C71056 * C11111 - C71360 * C10869 - C71056 * C11499 +
            C70952 * C11684 + C71055 * C11109 - C71359 * C10868 -
            C71055 * C11497 + C70951 * C11683 + C71054 * C1527 -
            C71358 * C1379 - C71054 * C1775 + C70950 * C1899 + C71053 * C1523 -
            C71357 * C1378 - C71053 * C1771 + C70949 * C1898) *
               C92177 * C92097 * C2665) *
              C92136 * C1971 +
          ((C71053 * C1524 - C71357 * C1377 - C71053 * C1772 + C70949 * C1897 +
            C71054 * C1528 - C71358 * C1380 - C71054 * C1776 + C70950 * C1900 +
            C71055 * C11110 - C71359 * C10867 - C71055 * C11498 +
            C70951 * C11682 + C71056 * C11112 - C71360 * C10870 -
            C71056 * C11500 + C70952 * C11685) *
               C92177 * C92097 * C2665 -
           (C71056 * C11110 - C71360 * C10867 - C71056 * C11498 +
            C70952 * C11682 + C71055 * C1528 - C71359 * C1380 - C71055 * C1776 +
            C70951 * C1900 + C71054 * C1524 - C71358 * C1377 - C71054 * C1772 +
            C70950 * C1897 + C71053 * C267 - C71357 * C109 - C71053 * C568 +
            C70949 * C703) *
               C92177 * C92097 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C790 -
          ((C35403 + C35404 + C35405) * C92252 +
           (C32074 + C32073 + C32072) * C61039) *
              C92177 * C92150 * C791 +
          ((C32077 + C32076 + C32075) * C61039 +
           (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 + C31249 * C5720 +
            C31256 * C5707 - C31257 * C5701 - C31256 * C5708 + C31250 * C5719 +
            C31258 * C7489 - C31259 * C7488 - C31258 * C7490 + C31251 * C7491) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C92136 * C97 -
          ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 + C31251 * C1399 +
            C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
            C31254 * C1387 - C31255 * C1377 - C31254 * C1388 + C31249 * C1401) *
               C92252 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C61039) *
              C92177 * C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C61039 +
           (C31254 * C1385 - C31255 * C1376 - C31254 * C1386 + C31249 * C1400 +
            C31256 * C1383 - C31257 * C1375 - C31256 * C1384 + C31250 * C1399 +
            C31258 * C2667 - C31259 * C2666 - C31258 * C2668 + C31251 * C2669) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C36751 * C61039 + C39015 * C92252) * C4026 +
           (C36752 * C61039 + C39014 * C92252) * C4027) *
              C92150 * C92136 * C97 -
          ((C58338 * C92252 + C37780 * C61039) * C4027 +
           (C41982 * C92252 + C37779 * C61039) * C4026 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C61039) *
               C4025) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C61039 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C4025 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C61039 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C4026 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C61039 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C92150 * C790 -
          ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
           (C66689 + C66688) * C4025) *
              C92150 * C791 +
          (C66694 * C4025 + (C66693 + C66692) * C4026 +
           (C36754 * C61039 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C70949 +
           C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
              C92177 * C92150 * C92136 * C97 -
          ((C36262 * C10871 - C36263 * C10867 - C36262 * C10872 +
            C92097 * C10879) *
               C70952 +
           C42893 * C70951 + C42892 * C70950 +
           (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
               C70949) *
              C92177 * C92150 * C92136 * C98 +
          ((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
               C70949 +
           (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 + C92097 * C1400) *
               C70950 +
           (C36262 * C1395 - C36263 * C1381 - C36262 * C1396 + C92097 * C1405) *
               C70951 +
           (C36262 * C12748 - C36263 * C12747 - C36262 * C12749 +
            C92097 * C12750) *
               C70952) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
               C70949 +
           C41134 * C70950 + C41135 * C70951 + C41137 * C70952) *
              C92177 * C92150 * C790 -
          (C41136 * C70952 + C40346 * C70951 + C39015 * C70950 +
           C36751 * C70949) *
              C92177 * C92150 * C791 +
          (C36752 * C70949 + C39014 * C70950 + C40347 * C70951 +
           (C36262 * C43814 - C36263 * C43813 - C36262 * C43815 +
            C92097 * C43816) *
               C70952) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C31254 +
            (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
            (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
            (C2052 - C2053) * C31251) *
               C61039 +
           ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
            (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
            (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
               C92252) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C31254 +
            (C92177 * C888 - C182 * C811) * C31249 +
            (C92177 * C881 - C182 * C799) * C31256 +
            (C92177 * C889 - C182 * C813) * C31250 +
            (C92177 * C882 - C182 * C800) * C31258 +
            (C92177 * C890 - C182 * C815) * C31251) *
               C61039 +
           ((C92177 * C5799 - C182 * C5702) * C31254 +
            (C92177 * C5805 - C182 * C5710) * C31249 +
            (C92177 * C5800 - C182 * C5701) * C31256 +
            (C92177 * C5806 - C182 * C5708) * C31250 +
            (C92177 * C7590 - C182 * C7488) * C31258 +
            (C92177 * C7591 - C182 * C7490) * C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C31254 + (C199 - C198) * C31249 +
            (C201 - C200) * C31256 + (C203 - C202) * C31250 +
            (C205 - C204) * C31258 + (C207 - C206) * C31251) *
               C61039 +
           (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
            C23028 * C31250 + (C2747 - C2748) * C31258 +
            (C2749 - C2750) * C31251) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C212 * C31254 + C213 * C31249 + C214 * C31256 + C215 * C31250 +
            (C209 - C208) * C31258 + (C211 - C210) * C31251) *
               C61039 +
           (C19823 * C31254 + C19824 * C31249 + (C2748 - C2747) * C31256 +
            (C2750 - C2749) * C31250 +
            (C92177 * C2736 - C182 * C2666) * C31258 +
            (C92177 * C2737 - C182 * C2668) * C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
               C61039 +
           ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C36262 +
            (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C92097) *
               C61039 +
           ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C36262 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C36262 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C92097) *
               C61039 +
           ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C36262 +
            (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
             C4108 * C8457 - C4027 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C36262 +
            (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
             C4027 * C4954 - C4108 * C4823) *
                C92097) *
               C61039 +
           ((C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
             C4027 * C39084 - C4108 * C38990) *
                C36262 +
            (C4025 * C5805 - C4106 * C5710 + C4026 * C8590 - C4107 * C8457 +
             C4027 * C39085 - C4108 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C36262 +
            (C92177 * C189 - C182 * C115) * C92097) *
               C70949 +
           ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
           (C11027 * C36262 + C11028 * C92097) * C70951 +
           ((C11020 - C11019) * C36262 + (C11022 - C11021) * C92097) * C70952) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C36262 + (C199 - C198) * C92097) * C70949 +
           (C12882 * C36262 + C12883 * C92097) * C70950 +
           (C12884 * C36262 + C12885 * C92097) * C70951 +
           ((C11023 - C11024) * C36262 + (C11025 - C11026) * C92097) * C70952) *
              C92150 * C92136 * C98 +
          ((C212 * C36262 + C213 * C92097) * C70949 +
           (C19823 * C36262 + C19824 * C92097) * C70950 +
           ((C9505 - C9504) * C36262 + (C9507 - C9506) * C92097) * C70951 +
           ((C92177 * C12877 - C182 * C12747) * C36262 +
            (C92177 * C12878 - C182 * C12749) * C92097) *
               C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C36262 +
            (C92177 * C189 - C182 * C115) * C92097) *
               C70949 +
           ((C11009 - C11010) * C36262 + (C11011 - C11012) * C92097) * C70950 +
           (C11027 * C36262 + C11028 * C92097) * C70951 +
           ((C11020 - C11019) * C36262 + (C11022 - C11021) * C92097) * C70952) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C36262 +
            (C182 * C809 - C92177 * C884) * C92097) *
               C70949 +
           ((C13874 - C13875) * C36262 + (C13876 - C13877) * C92097) * C70950 +
           ((C13878 - C13879) * C36262 + (C13880 - C13881) * C92097) * C70951 +
           ((C182 * C13749 - C92177 * C13869) * C36262 +
            (C182 * C13752 - C92177 * C13871) * C92097) *
               C70952) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C36262 +
            (C92177 * C888 - C182 * C811) * C92097) *
               C70949 +
           ((C92177 * C5799 - C182 * C5702) * C36262 +
            (C92177 * C5805 - C182 * C5710) * C92097) *
               C70950 +
           ((C92177 * C5802 - C182 * C5705) * C36262 +
            (C92177 * C5808 - C182 * C5716) * C92097) *
               C70951 +
           ((C92177 * C43918 - C182 * C43813) * C36262 +
            (C92177 * C43919 - C182 * C43815) * C92097) *
               C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C790 +
          ((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
               C31254 +
           (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
               C31249 +
           (C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
               C31256 +
           (C61189 * C807 - C61039 * C951 + C61190 * C3364 - C92252 * C3518) *
               C31250 +
           (C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
               C31258 +
           (C61189 * C805 - C61039 * C952 + C61190 * C3366 - C92252 * C3519) *
               C31251) *
              C92177 * C92150 * C791 +
          ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C31254 +
           (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
               C31249 +
           (C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
               C31256 +
           (C61039 * C955 - C61189 * C813 + C92252 * C5892 - C61190 * C5708) *
               C31250 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C31258 +
           (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
               C31251) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C31254 +
           (C61197 - C61196 + C61199 - C61198) * C31249 +
           (C61201 - C61200 + C61203 - C61202) * C31256 +
           (C61205 - C61204 + C61207 - C61206) * C31250 +
           (C61208 - C61209 + C61210 - C61211) * C31258 +
           (C61212 - C61213 + C61214 - C61215) * C31251) *
              C92177 * C92150 * C92136 * C98 +
          (C61220 * C31254 + C61221 * C31249 +
           (C61209 - C61208 + C61211 - C61210) * C31256 +
           (C61213 - C61212 + C61215 - C61214) * C31250 +
           (C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
               C31258 +
           (C61039 * C276 - C61189 * C123 + C92252 * C2817 - C61190 * C2668) *
               C31251) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
                C36262 +
            (C61039 * C950 - C61189 * C809 + C92252 * C3517 - C61190 * C3362) *
                C92097) *
               C4026 +
           ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C36262 +
            (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
                C92097) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C36262 +
            (C61197 - C61196 + C61199 - C61198) * C92097) *
               C4025 +
           ((C63447 - C63448 + C63449 - C63450) * C36262 +
            (C63451 - C63452 + C63453 - C63454) * C92097) *
               C4026 +
           ((C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
                C36262 +
            (C61189 * C813 - C61039 * C955 + C61190 * C5708 - C92252 * C5892) *
                C92097) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C61220 * C36262 + C61221 * C92097) * C4025 +
           ((C63456 - C63455 + C63458 - C63457) * C36262 +
            (C63460 - C63459 + C63462 - C63461) * C92097) *
               C4026 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C36262 +
            (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
                C92097) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C36262 +
            (C66848 - C66847 + C66850 - C66849) * C92097) *
               C4025 +
           ((C66852 - C66851 + C66854 - C66853) * C36262 +
            (C66856 - C66855 + C66858 - C66857) * C92097) *
               C4026 +
           ((C66859 - C66860 + C66861 - C66862) * C36262 +
            (C66863 - C66864 + C66865 - C66866) * C92097) *
               C4027) *
              C92150 * C791 +
          (C66875 * C4025 +
           ((C66860 - C66859 + C66862 - C66861) * C36262 +
            (C66864 - C66863 + C66866 - C66865) * C92097) *
               C4026 +
           ((C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
             C61190 * C38990) *
                C36262 +
            (C61039 * C5036 - C61189 * C4823 + C92252 * C39153 -
             C61190 * C38992) *
                C92097) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C36262 +
           (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
            C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
            C71056 * C10874) *
               C92097) *
              C92177 * C92150 * C92136 * C97 +
          ((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
            C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
            C70952 * C11110) *
               C36262 +
           (C71053 * C117 - C70949 * C273 + C71054 * C1388 - C70950 * C1532 +
            C71055 * C1394 - C70951 * C1536 + C71056 * C10872 -
            C70952 * C11114) *
               C92097) *
              C92177 * C92150 * C92136 * C98 +
          ((C70949 * C268 - C71053 * C110 + C70950 * C1525 - C71054 * C1376 +
            C70951 * C1529 - C71055 * C1381 + C70952 * C12983 -
            C71056 * C12747) *
               C36262 +
           (C70949 * C274 - C71053 * C119 + C70950 * C1533 - C71054 * C1386 +
            C70951 * C1537 - C71055 * C1396 + C70952 * C12984 -
            C71056 * C12749) *
               C92097) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C36262 +
           (C70949 * C272 - C71053 * C115 + C70950 * C1531 - C71054 * C1390 +
            C70951 * C1535 - C71055 * C1392 + C70952 * C11113 -
            C71056 * C10874) *
               C92097) *
              C92177 * C92150 * C790 +
          ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
            C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
            C70952 * C13979) *
               C36262 +
           (C71053 * C809 - C70949 * C950 + C71054 * C3362 - C70950 * C3517 +
            C71055 * C5712 - C70951 * C5893 + C71056 * C13752 -
            C70952 * C13981) *
               C92097) *
              C92177 * C92150 * C791 +
          ((C70949 * C946 - C71053 * C798 + C70950 * C5885 - C71054 * C5702 +
            C70951 * C5889 - C71055 * C5705 + C70952 * C44034 -
            C71056 * C43813) *
               C36262 +
           (C70949 * C954 - C71053 * C811 + C70950 * C5891 - C71054 * C5710 +
            C70951 * C5895 - C71055 * C5716 + C70952 * C44035 -
            C71056 * C43815) *
               C92097) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
               C61039 +
           ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
            (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
               C92252) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C182 +
            (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C92177) *
               C61039 +
           ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
             C31251 * C7489 - C31258 * C7488) *
                C182 +
            (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 - C31256 * C5972 +
             C31251 * C7811 - C31258 * C7810) *
                C92177) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C182 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C92177) *
               C61039 +
           ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
             C31258 * C1375 - C31251 * C1383) *
                C182 +
            (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 - C31250 * C1599 +
             C31258 * C1592 - C31251 * C1600) *
                C92177) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C182 +
            (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
             C31251 * C358 - C31258 * C352) *
                C92177) *
               C61039 +
           ((C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
             C31251 * C2667 - C31258 * C2666) *
                C182 +
            (C31249 * C1599 - C31254 * C1591 + C31250 * C1600 - C31256 * C1592 +
             C31251 * C2897 - C31258 * C2896) *
                C92177) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C4106 +
            (C36262 * C349 - C92097 * C355) * C4025 +
            (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
            (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
               C61039 +
           ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
            (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
            (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C4106 +
            (C92097 * C356 - C36262 * C350) * C4025 +
            (C92097 * C804 - C36262 * C795) * C4107 +
            (C92097 * C1018 - C36262 * C1010) * C4026 +
            (C92097 * C814 - C36262 * C800) * C4108 +
            (C92097 * C1022 - C36262 * C1014) * C4027) *
               C61039 +
           ((C92097 * C1385 - C36262 * C1376) * C4106 +
            (C92097 * C1599 - C36262 * C1591) * C4025 +
            (C92097 * C3365 - C36262 * C3359) * C4107 +
            (C92097 * C3593 - C36262 * C3589) * C4026 +
            (C92097 * C7489 - C36262 * C7488) * C4108 +
            (C92097 * C7811 - C36262 * C7810) * C4027) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C790 +
          (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
            (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
            (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
               C61039 +
           (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
            (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
               C92252) *
              C92150 * C791 +
          ((C36943 * C4106 + C36944 * C4025 + C36945 * C4107 + C36946 * C4026 +
            (C36940 - C36939) * C4108 + (C36942 - C36941) * C4027) *
               C61039 +
           (C57085 * C4106 + C57086 * C4025 + (C39236 - C39235) * C4107 +
            (C39238 - C39237) * C4026 +
            (C92097 * C38991 - C36262 * C38990) * C4108 +
            (C92097 * C39225 - C36262 * C39224) * C4027) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C182 +
            (C92097 * C354 - C36262 * C348) * C92177) *
               C70949 +
           ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
           (C41417 * C182 + C41418 * C92177) * C70951 +
           ((C41410 - C41409) * C182 + (C41412 - C41411) * C92177) * C70952) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C182 +
            (C36262 * C349 - C92097 * C355) * C92177) *
               C70949 +
           ((C43196 - C43197) * C182 + (C43198 - C43199) * C92177) * C70950 +
           ((C43200 - C43201) * C182 + (C43202 - C43203) * C92177) * C70951 +
           ((C36262 * C10867 - C92097 * C10871) * C182 +
            (C36262 * C11192 - C92097 * C11196) * C92177) *
               C70952) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C182 +
            (C92097 * C356 - C36262 * C350) * C92177) *
               C70949 +
           ((C92097 * C1385 - C36262 * C1376) * C182 +
            (C92097 * C1599 - C36262 * C1591) * C92177) *
               C70950 +
           ((C92097 * C1395 - C36262 * C1381) * C182 +
            (C92097 * C1603 - C36262 * C1595) * C92177) *
               C70951 +
           ((C92097 * C12748 - C36262 * C12747) * C182 +
            (C92097 * C13096 - C36262 * C13095) * C92177) *
               C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C182 +
            (C92097 * C354 - C36262 * C348) * C92177) *
               C70949 +
           ((C41399 - C41400) * C182 + (C41401 - C41402) * C92177) * C70950 +
           (C41417 * C182 + C41418 * C92177) * C70951 +
           ((C41410 - C41409) * C182 + (C41412 - C41411) * C92177) * C70952) *
              C92150 * C790 +
          (((C36928 - C36927) * C182 + (C36930 - C36929) * C92177) * C70949 +
           (C44151 * C182 + C44152 * C92177) * C70950 +
           (C44153 * C182 + C44154 * C92177) * C70951 +
           ((C41413 - C41414) * C182 + (C41415 - C41416) * C92177) * C70952) *
              C92150 * C791 +
          ((C36943 * C182 + C36944 * C92177) * C70949 +
           (C57085 * C182 + C57086 * C92177) * C70950 +
           ((C40601 - C40600) * C182 + (C40603 - C40602) * C92177) * C70951 +
           ((C92097 * C43814 - C36262 * C43813) * C182 +
            (C92097 * C44147 - C36262 * C44146) * C92177) *
               C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C790 -
          ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
           (C2292 * C31251 + C2293 * C31250 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C31249) *
               C61039) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C31249 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C31250 +
            (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                C31251) *
               C61039 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C31249 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C31250 +
            (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C92136 * C97 -
          ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
           (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
              C92150 * C92136 * C98 +
          ((C443 * C31249 + C444 * C31250 + C445 * C31251) * C61039 +
           (C2985 * C31249 + C2984 * C31250 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C7930 + C7931 + C7932) * C92097 * C92252 +
           (C4405 + C4404 + C4403) * C92097 * C61039) *
              C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C92097 * C61039 +
           (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
            C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
            C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
            C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
            C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
               C92097 * C92252 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C92097 * C61039) *
              C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C92097 * C61039 +
           (C4106 * C5799 - C4363 * C5702 - C4106 * C5971 + C4025 * C6058 +
            C4107 * C8588 - C4364 * C8454 - C4107 * C8800 + C4026 * C8918 +
            C4108 * C39084 - C4365 * C38990 - C4108 * C39224 + C4027 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
               C70949 +
           C11337 * C92097 * C70950 + C11338 * C92097 * C70951 +
           C11340 * C92097 * C70952) *
              C92150 * C92136 * C97 -
          (C11339 * C92097 * C70952 + C9769 * C92097 * C70951 +
           C2986 * C92097 * C70950 + C442 * C92097 * C70949) *
              C92150 * C92136 * C98 +
          (C443 * C92097 * C70949 + C2985 * C92097 * C70950 +
           C9770 * C92097 * C70951 +
           (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
               C92097 * C70952) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92097 *
               C70949 +
           C11337 * C92097 * C70950 + C11338 * C92097 * C70951 +
           C11340 * C92097 * C70952) *
              C92150 * C790 -
          ((C182 * C13869 - C410 * C13749 - C182 * C14081 + C92177 * C14191) *
               C92097 * C70952 +
           C14209 * C92097 * C70951 + C14208 * C92097 * C70950 +
           (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
               C92097 * C70949) *
              C92150 * C791 +
          ((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
               C92097 * C70949 +
           (C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
               C92097 * C70950 +
           (C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
               C92097 * C70951 +
           (C182 * C43918 - C410 * C43813 - C182 * C44146 + C92177 * C44252) *
               C92097 * C70952) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C790 +
          (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C182 +
            (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
             C92252 * C3731) *
                C92177) *
               C31249 +
           ((C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
                C182 +
            (C61189 * C1009 - C61039 * C1133 + C61190 * C3588 -
             C92252 * C3732) *
                C92177) *
               C31250 +
           ((C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
                C182 +
            (C61189 * C1010 - C61039 * C1134 + C61190 * C3589 -
             C92252 * C3733) *
                C92177) *
               C31251) *
              C92150 * C791 +
          (((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C182 +
            (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 -
             C61190 * C5971) *
                C92177) *
               C31249 +
           ((C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
                C182 +
            (C61039 * C1137 - C61189 * C1013 + C92252 * C6138 -
             C61190 * C5972) *
                C92177) *
               C31250 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C182 +
            (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 -
             C61190 * C7810) *
                C92177) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C182 +
            (C61445 - C61444 + C61447 - C61446) * C92177) *
               C31249 +
           ((C61201 - C61200 + C61203 - C61202) * C182 +
            (C61450 - C61449 + C61452 - C61451) * C92177) *
               C31250 +
           ((C61208 - C61209 + C61210 - C61211) * C182 +
            (C61453 - C61454 + C61455 - C61456) * C92177) *
               C31251) *
              C92150 * C92136 * C98 +
          (C61461 * C31249 +
           ((C61209 - C61208 + C61211 - C61210) * C182 +
            (C61454 - C61453 + C61456 - C61455) * C92177) *
               C31250 +
           ((C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
                C182 +
            (C61039 * C499 - C61189 * C352 + C92252 * C3052 - C61190 * C2896) *
                C92177) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
               C4107 +
           (C61039 * C1132 - C61189 * C1008 + C92252 * C3731 - C61190 * C3587) *
               C4026 +
           (C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C4108 +
           (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 - C61190 * C5971) *
               C4027) *
              C92097 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C4106 +
           (C61445 - C61444 + C61447 - C61446) * C4025 +
           (C63447 - C63448 + C63449 - C63450) * C4107 +
           (C63757 - C63758 + C63759 - C63760) * C4026 +
           (C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
               C4108 +
           (C61189 * C1013 - C61039 * C1137 + C61190 * C5972 - C92252 * C6138) *
               C4027) *
              C92097 * C92150 * C92136 * C98 +
          (C61220 * C4106 + C61459 * C4025 +
           (C63456 - C63455 + C63458 - C63457) * C4107 +
           (C63762 - C63761 + C63764 - C63763) * C4026 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C4108 +
           (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 - C61190 * C7810) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C92150 * C790 +
          ((C66844 - C66843 + C66846 - C66845) * C4106 +
           (C67099 - C67098 + C67101 - C67100) * C4025 +
           (C66852 - C66851 + C66854 - C66853) * C4107 +
           (C67103 - C67102 + C67105 - C67104) * C4026 +
           (C66859 - C66860 + C66861 - C66862) * C4108 +
           (C67106 - C67107 + C67108 - C67109) * C4027) *
              C92097 * C92150 * C791 +
          (C66871 * C4106 + C67112 * C4025 +
           (C66860 - C66859 + C66862 - C66861) * C4107 +
           (C67107 - C67106 + C67109 - C67108) * C4026 +
           (C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
            C61190 * C38990) *
               C4108 +
           (C61039 * C5331 - C61189 * C5141 + C92252 * C39371 -
            C61190 * C39224) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C182 +
           (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
            C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
            C71056 * C11191) *
               C92177) *
              C92097 * C92150 * C92136 * C97 +
          ((C71053 * C109 - C70949 * C267 + C71054 * C1377 - C70950 * C1524 +
            C71055 * C1380 - C70951 * C1528 + C71056 * C10867 -
            C70952 * C11110) *
               C182 +
           (C71053 * C349 - C70949 * C496 + C71054 * C1590 - C70950 * C1714 +
            C71055 * C1594 - C70951 * C1718 + C71056 * C11192 -
            C70952 * C11420) *
               C92177) *
              C92097 * C92150 * C92136 * C98 +
          ((C70949 * C268 - C71053 * C110 + C70950 * C1525 - C71054 * C1376 +
            C70951 * C1529 - C71055 * C1381 + C70952 * C12983 -
            C71056 * C12747) *
               C182 +
           (C70949 * C497 - C71053 * C350 + C70950 * C1715 - C71054 * C1591 +
            C70951 * C1719 - C71055 * C1595 + C70952 * C13314 -
            C71056 * C13095) *
               C92177) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C70949 * C266 - C71053 * C108 + C70950 * C1523 - C71054 * C1378 +
            C70951 * C1527 - C71055 * C1379 + C70952 * C11109 -
            C71056 * C10868) *
               C182 +
           (C70949 * C495 - C71053 * C348 + C70950 * C1713 - C71054 * C1589 +
            C70951 * C1717 - C71055 * C1593 + C70952 * C11419 -
            C71056 * C11191) *
               C92177) *
              C92097 * C92150 * C790 +
          ((C71053 * C797 - C70949 * C942 + C71054 * C3357 - C70950 * C3513 +
            C71055 * C5703 - C70951 * C5887 + C71056 * C13749 -
            C70952 * C13979) *
               C182 +
           (C71053 * C1008 - C70949 * C1132 + C71054 * C3587 - C70950 * C3731 +
            C71055 * C5973 - C70951 * C6139 + C71056 * C14081 -
            C70952 * C14309) *
               C92177) *
              C92097 * C92150 * C791 +
          ((C70949 * C946 - C71053 * C798 + C70950 * C5885 - C71054 * C5702 +
            C70951 * C5889 - C71055 * C5705 + C70952 * C44034 -
            C71056 * C43813) *
               C182 +
           (C70949 * C1136 - C71053 * C1012 + C70950 * C6137 - C71054 * C5971 +
            C70951 * C6140 - C71055 * C5975 + C70952 * C44379 -
            C71056 * C44146) *
               C92177) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
           (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
           (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
           (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
              C92177 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C61189 +
           (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C61039 +
           (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
            C31251 * C7489 - C31258 * C7488) *
               C61190 +
           (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 - C31256 * C6218 +
            C31251 * C8134 - C31258 * C8133) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C61189 +
           (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
            C31258 * C570 - C31251 * C576) *
               C61039 +
           (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
            C31258 * C1375 - C31251 * C1383) *
               C61190 +
           (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 - C31250 * C1781 +
            C31258 * C1774 - C31251 * C1782) *
               C92252) *
              C92177 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C61189 +
           (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
            C31251 * C577 - C31258 * C571) *
               C61039 +
           (C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
            C31251 * C2667 - C31258 * C2666) *
               C61190 +
           (C31249 * C1781 - C31254 * C1773 + C31250 * C1782 - C31256 * C1774 +
            C31251 * C3126 - C31258 * C3125) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           (C36943 * C61189 + C37114 * C61039 + C57085 * C61190 +
            C57319 * C92252) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C61189 +
            (C36262 * C568 - C92097 * C574) * C61039 +
            (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
               C4025 +
           ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
            (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
               C4026 +
           ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
            (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C61189 +
            (C92097 * C575 - C36262 * C569) * C61039 +
            (C92097 * C1385 - C36262 * C1376) * C61190 +
            (C92097 * C1781 - C36262 * C1773) * C92252) *
               C4025 +
           ((C92097 * C804 - C36262 * C795) * C61189 +
            (C92097 * C1200 - C36262 * C1192) * C61039 +
            (C92097 * C3365 - C36262 * C3359) * C61190 +
            (C92097 * C3807 - C36262 * C3803) * C92252) *
               C4026 +
           ((C92097 * C814 - C36262 * C800) * C61189 +
            (C92097 * C1204 - C36262 * C1196) * C61039 +
            (C92097 * C7489 - C36262 * C7488) * C61190 +
            (C92097 * C8134 - C36262 * C8133) * C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C92150 * C790 +
          (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
            C44151 * C61190 + C44488 * C92252) *
               C4025 +
           ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
            C60428 * C61190 + C60749 * C92252) *
               C4026 +
           ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
            (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
               C4027) *
              C92150 * C791 +
          (C67193 * C4025 +
           (C36945 * C61189 + C37115 * C61039 + (C39236 - C39235) * C61190 +
            (C39448 - C39447) * C92252) *
               C4026 +
           ((C36940 - C36939) * C61189 + (C37113 - C37112) * C61039 +
            (C92097 * C38991 - C36262 * C38990) * C61190 +
            (C92097 * C39441 - C36262 * C39440) * C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C71053 +
           (C92097 * C573 - C36262 * C567) * C70949 +
           (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
           C41417 * C71055 + C41705 * C70951 + (C41410 - C41409) * C71056 +
           (C41702 - C41701) * C70952) *
              C92177 * C92150 * C92136 * C97 +
          ((C36262 * C109 - C92097 * C116) * C71053 +
           (C36262 * C568 - C92097 * C574) * C70949 +
           (C43196 - C43197) * C71054 + (C43512 - C43513) * C70950 +
           (C43200 - C43201) * C71055 + (C43514 - C43515) * C70951 +
           (C36262 * C10867 - C92097 * C10871) * C71056 +
           (C36262 * C11498 - C92097 * C11502) * C70952) *
              C92177 * C92150 * C92136 * C98 +
          ((C92097 * C118 - C36262 * C110) * C71053 +
           (C92097 * C575 - C36262 * C569) * C70949 +
           (C92097 * C1385 - C36262 * C1376) * C71054 +
           (C92097 * C1781 - C36262 * C1773) * C70950 +
           (C92097 * C1395 - C36262 * C1381) * C71055 +
           (C92097 * C1785 - C36262 * C1777) * C70951 +
           (C92097 * C12748 - C36262 * C12747) * C71056 +
           (C92097 * C13420 - C36262 * C13419) * C70952) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92097 * C114 - C36262 * C108) * C71053 +
           (C92097 * C573 - C36262 * C567) * C70949 +
           (C41399 - C41400) * C71054 + (C41696 - C41697) * C70950 +
           C41417 * C71055 + C41705 * C70951 + (C41410 - C41409) * C71056 +
           (C41702 - C41701) * C70952) *
              C92177 * C92150 * C790 +
          ((C36928 - C36927) * C71053 + (C37105 - C37104) * C70949 +
           C44151 * C71054 + C44488 * C70950 + C44153 * C71055 +
           C44489 * C70951 + (C41413 - C41414) * C71056 +
           (C41703 - C41704) * C70952) *
              C92177 * C92150 * C791 +
          (C36943 * C71053 + C37114 * C70949 + C57085 * C71054 +
           C57319 * C70950 + (C40601 - C40600) * C71055 +
           (C40841 - C40840) * C70951 +
           (C92097 * C43814 - C36262 * C43813) * C71056 +
           (C92097 * C44485 - C36262 * C44484) * C70952) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C61189 +
            (C182 * C1190 - C92177 * C1256) * C61039 +
            (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
               C31249 +
           ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
            (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
               C31250 +
           ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
            (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
               C31251) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C61189 +
            (C92177 * C1260 - C182 * C1194) * C61039 +
            (C92177 * C5799 - C182 * C5702) * C61190 +
            (C92177 * C6303 - C182 * C6217) * C92252) *
               C31249 +
           ((C92177 * C881 - C182 * C799) * C61189 +
            (C92177 * C1261 - C182 * C1195) * C61039 +
            (C92177 * C5800 - C182 * C5701) * C61190 +
            (C92177 * C6304 - C182 * C6218) * C92252) *
               C31250 +
           ((C92177 * C882 - C182 * C800) * C61189 +
            (C92177 * C1262 - C182 * C1196) * C61039 +
            (C92177 * C7590 - C182 * C7488) * C61190 +
            (C92177 * C8233 - C182 * C8133) * C92252) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
            C13530 * C92252) *
               C31249 +
           ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
            C23662 * C92252) *
               C31250 +
           ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
            (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
               C31251) *
              C92150 * C92136 * C98 +
          (C61616 * C31249 +
           (C214 * C61189 + C647 * C61039 + (C2748 - C2747) * C61190 +
            (C3200 - C3199) * C92252) *
               C31250 +
           ((C209 - C208) * C61189 + (C645 - C644) * C61039 +
            (C92177 * C2736 - C182 * C2666) * C61190 +
            (C92177 * C3193 - C182 * C3125) * C92252) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
           (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
           (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
           (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
              C92097 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C61189 +
           (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C61039 +
           (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
            C4027 * C7590 - C4108 * C7488) *
               C61190 +
           (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 - C4107 * C3803 +
            C4027 * C8233 - C4108 * C8133) *
               C92252) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C61189 +
           (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
            C4108 * C5417 - C4027 * C5517) *
               C61039 +
           (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
            C4108 * C8454 - C4027 * C8588) *
               C61190 +
           (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 - C4026 * C6303 +
            C4108 * C9122 - C4027 * C9232) *
               C92252) *
              C92097 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C61189 +
           (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
            C4027 * C5519 - C4108 * C5419) *
               C61039 +
           (C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
            C4027 * C39084 - C4108 * C38990) *
               C61190 +
           (C4025 * C6303 - C4106 * C6217 + C4026 * C9232 - C4107 * C9122 +
            C4027 * C39514 - C4108 * C39440) *
               C92252) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C71053 +
           (C92177 * C629 - C182 * C567) * C70949 + (C11009 - C11010) * C71054 +
           (C11599 - C11600) * C70950 + C11027 * C71055 + C11608 * C70951 +
           (C11020 - C11019) * C71056 + (C11605 - C11604) * C70952) *
              C92097 * C92150 * C92136 * C97 +
          ((C197 - C196) * C71053 + (C637 - C636) * C70949 + C12882 * C71054 +
           C13530 * C70950 + C12884 * C71055 + C13531 * C70951 +
           (C11023 - C11024) * C71056 + (C11606 - C11607) * C70952) *
              C92097 * C92150 * C92136 * C98 +
          (C212 * C71053 + C646 * C70949 + C19823 * C71054 + C20322 * C70950 +
           (C9505 - C9504) * C71055 + (C10008 - C10007) * C70951 +
           (C92177 * C12877 - C182 * C12747) * C71056 +
           (C92177 * C13527 - C182 * C13419) * C70952) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92177 * C183 - C182 * C108) * C71053 +
           (C92177 * C629 - C182 * C567) * C70949 + (C11009 - C11010) * C71054 +
           (C11599 - C11600) * C70950 + C11027 * C71055 + C11608 * C70951 +
           (C11020 - C11019) * C71056 + (C11605 - C11604) * C70952) *
              C92097 * C92150 * C790 +
          ((C182 * C797 - C92177 * C876) * C71053 +
           (C182 * C1190 - C92177 * C1256) * C70949 +
           (C13874 - C13875) * C71054 + (C14518 - C14519) * C70950 +
           (C13878 - C13879) * C71055 + (C14520 - C14521) * C70951 +
           (C182 * C13749 - C92177 * C13869) * C71056 +
           (C182 * C14409 - C92177 * C14515) * C70952) *
              C92097 * C92150 * C791 +
          ((C92177 * C880 - C182 * C798) * C71053 +
           (C92177 * C1260 - C182 * C1194) * C70949 +
           (C92177 * C5799 - C182 * C5702) * C71054 +
           (C92177 * C6303 - C182 * C6217) * C70950 +
           (C92177 * C5802 - C182 * C5705) * C71055 +
           (C92177 * C6306 - C182 * C6221) * C70951 +
           (C92177 * C43918 - C182 * C43813) * C71056 +
           (C92177 * C44587 - C182 * C44484) * C70952) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C790 -
          ((C61190 * C3515 - C61691 * C3359 - C61190 * C3803 + C92252 * C3947 +
            C61189 * C944 - C61690 * C795 - C61189 * C1192 + C61039 * C1315) *
               C92177 * C31251 +
           (C61190 * C3514 - C61691 * C3358 - C61190 * C3802 + C92252 * C3946 +
            C61189 * C943 - C61690 * C796 - C61189 * C1191 + C61039 * C1316) *
               C92177 * C31250 +
           (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
            C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
               C92177 * C31249) *
              C92150 * C791 +
          ((C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C92177 * C31249 +
           (C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319 +
            C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383) *
               C92177 * C31250 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C92177 * C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C92136 * C97 -
          ((C61733 + C61734) * C92177 * C31251 +
           (C61732 + C61731) * C92177 * C31250 +
           (C61730 + C61729) * C92177 * C31249) *
              C92150 * C92136 * C98 +
          (C61736 * C31249 + (C61734 + C61733) * C92177 * C31250 +
           (C61189 * C270 - C61690 * C112 - C61189 * C571 + C61039 * C706 +
            C61190 * C2816 - C61691 * C2666 - C61190 * C3125 + C92252 * C3266) *
               C92177 * C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317 +
            C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945) *
               C4026 +
           (C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C4027) *
              C92097 * C92150 * C92136 * C97 -
          ((C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383 +
            C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319) *
               C4027 +
           (C64085 + C64086) * C4026 + (C61730 + C61729) * C4025) *
              C92097 * C92150 * C92136 * C98 +
          (C61735 * C4025 + (C64084 + C64083) * C4026 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C92150 * C790 -
          ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
           (C67379 + C67378) * C4025) *
              C92097 * C92150 * C791 +
          (C67384 * C4025 + (C67383 + C67382) * C4026 +
           (C61189 * C5032 - C61690 * C4816 - C61189 * C5419 + C61039 * C5597 +
            C61190 * C39152 - C61691 * C38990 - C61190 * C39440 +
            C92252 * C39581) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
           C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
           C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
           C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
           C70952 * C11683) *
              C92177 * C92097 * C92150 * C92136 * C97 -
          (C71056 * C11110 - C71360 * C10867 - C71056 * C11498 +
           C70952 * C11682 + C71055 * C1528 - C71359 * C1380 - C71055 * C1776 +
           C70951 * C1900 + C71054 * C1524 - C71358 * C1377 - C71054 * C1772 +
           C70950 * C1897 + C71053 * C267 - C71357 * C109 - C71053 * C568 +
           C70949 * C703) *
              C92177 * C92097 * C92150 * C92136 * C98 +
          (C71053 * C268 - C71357 * C110 - C71053 * C569 + C70949 * C704 +
           C71054 * C1525 - C71358 * C1376 - C71054 * C1773 + C70950 * C1896 +
           C71055 * C1529 - C71359 * C1381 - C71055 * C1777 + C70951 * C1901 +
           C71056 * C12983 - C71360 * C12747 - C71056 * C13419 +
           C70952 * C13629) *
              C92177 * C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C71053 * C266 - C71357 * C108 - C71053 * C567 + C70949 * C702 +
           C71054 * C1523 - C71358 * C1378 - C71054 * C1771 + C70950 * C1898 +
           C71055 * C1527 - C71359 * C1379 - C71055 * C1775 + C70951 * C1899 +
           C71056 * C11109 - C71360 * C10868 - C71056 * C11497 +
           C70952 * C11683) *
              C92177 * C92097 * C92150 * C790 -
          (C71056 * C13979 - C71360 * C13749 - C71056 * C14409 +
           C70952 * C14619 + C71055 * C5887 - C71359 * C5703 - C71055 * C6219 +
           C70951 * C6385 + C71054 * C3513 - C71358 * C3357 - C71054 * C3801 +
           C70950 * C3945 + C71053 * C942 - C71357 * C797 - C71053 * C1190 +
           C70949 * C1317) *
              C92177 * C92097 * C92150 * C791 +
          (C71053 * C946 - C71357 * C798 - C71053 * C1194 + C70949 * C1318 +
           C71054 * C5885 - C71358 * C5702 - C71054 * C6217 + C70950 * C6384 +
           C71055 * C5889 - C71359 * C5705 - C71055 * C6221 + C70951 * C6386 +
           C71056 * C44034 - C71360 * C43813 - C71056 * C44484 +
           C70952 * C44694) *
              C92177 * C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92361 +
            (C51645 + C51646) * C92362 + C81835 * C80417) *
               C92177 * C92150 * C1969 -
           ((C51647 + C51648) * C80417 + C55040 * C92362 +
            (C45593 + C45592) * C92361) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C47035 + C47036) * C92361 + (C52613 + C52614) * C92362 +
            (C90121 * C5713 - C44796 * C5704 - C90121 * C5714 + C92320 * C5722 +
             C90114 * C11785 - C44798 * C11784 - C90114 * C11786 +
             C92102 * C11787) *
                C80417) *
               C92177 * C92150 * C1970 -
           ((C90114 * C1395 - C44798 * C1381 - C90114 * C1396 + C92102 * C1405 +
             C90121 * C1393 - C44796 * C1380 - C90121 * C1394 +
             C92320 * C1404) *
                C80417 +
            (C53836 + C53835) * C92362 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92361) *
               C92177 * C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C90121 +
             (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
             (C198 - C199) * C92102) *
                C92361 +
            ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
             C12880 * C90114 + C12881 * C92102) *
                C92362 +
            C81930 * C80417) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C90121 +
             (C182 * C809 - C92177 * C884) * C92320 + (C2046 - C2047) * C90114 +
             (C2048 - C2049) * C92102) *
                C92361 +
            ((C13874 - C13875) * C90121 + (C13876 - C13877) * C92320 +
             (C11889 - C11890) * C90114 + (C11891 - C11892) * C92102) *
                C92362 +
            ((C13878 - C13879) * C90121 + (C13880 - C13881) * C92320 +
             (C11893 - C11894) * C90114 + (C11895 - C11896) * C92102) *
                C80417) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C90121 + (C199 - C198) * C92320 +
             (C201 - C200) * C90114 + (C203 - C202) * C92102) *
                C92361 +
            (C12882 * C90121 + C12883 * C92320 + C23027 * C90114 +
             C23028 * C92102) *
                C92362 +
            (C12884 * C90121 + C12885 * C92320 + (C9504 - C9505) * C90114 +
             (C9506 - C9507) * C92102) *
                C80417) *
               C92150 * C1969 +
           (((C2047 - C2046) * C90121 + (C2049 - C2048) * C92320 +
             (C2051 - C2050) * C90114 + (C2053 - C2052) * C92102) *
                C92361 +
            ((C11890 - C11889) * C90121 + (C11892 - C11891) * C92320 +
             (C22060 - C22059) * C90114 + (C22062 - C22061) * C92102) *
                C92362 +
            ((C11894 - C11893) * C90121 + (C11896 - C11895) * C92320 +
             (C92177 * C11886 - C182 * C11784) * C90114 +
             (C92177 * C11887 - C182 * C11786) * C92102) *
                C80417) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C90121 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92320 +
            (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
            (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
               C92177 * C92150 * C1969 +
           ((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
             C80568 * C5703 - C80417 * C5887) *
                C90121 +
            (C80566 * C809 - C92361 * C950 + C80567 * C3362 - C92362 * C3517 +
             C80568 * C5712 - C80417 * C5893) *
                C92320 +
            (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C90114 +
            (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92102) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C90121 +
            (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92320 +
            (C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C90114 +
            (C80588 - C80589 + C80590 - C80591 + C80592 - C80593) * C92102) *
               C92177 * C92150 * C1969 +
           ((C82775 - C82774 + C82777 - C82776 + C82779 - C82778) * C90121 +
            (C82781 - C82780 + C82783 - C82782 + C82785 - C82784) * C92320 +
            (C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
             C80417 * C11994 - C80568 * C11784) *
                C90114 +
            (C92361 * C952 - C80566 * C805 + C92362 * C3519 - C80567 * C3366 +
             C80417 * C11995 - C80568 * C11786) *
                C92102) *
               C92177 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C182 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92177) *
                C92361 +
            ((C51945 - C51946 + C51947 - C51948) * C182 +
             (C51949 - C51950 + C51951 - C51952) * C92177) *
                C92362 +
            C82095 * C80417) *
               C92150 * C1969 +
           (((C45830 - C45829 + C45832 - C45831) * C182 +
             (C45834 - C45833 + C45836 - C45835) * C92177) *
                C92361 +
            (C55441 * C182 + C55442 * C92177) * C92362 +
            ((C51961 - C51962 + C51963 - C51964) * C182 +
             (C51965 - C51966 + C51967 - C51968) * C92177) *
                C80417) *
               C92150 * C1970) *
              C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C182 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C92177) *
                C92361 +
            ((C54239 - C54240 + C54241 - C54242) * C182 +
             (C54243 - C54244 + C54245 - C54246) * C92177) *
                C92362 +
            ((C90121 * C1380 - C92320 * C1393 + C90114 * C1381 -
              C92102 * C1395) *
                 C182 +
             (C90121 * C1594 - C92320 * C1602 + C90114 * C1595 -
              C92102 * C1603) *
                 C92177) *
                C80417) *
               C92150 * C1969 +
           (((C47346 - C47345 + C47348 - C47347) * C182 +
             (C47350 - C47349 + C47352 - C47351) * C92177) *
                C92361 +
            ((C53014 - C53013 + C53016 - C53015) * C182 +
             (C53018 - C53017 + C53020 - C53019) * C92177) *
                C92362 +
            ((C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
              C90114 * C11784) *
                 C182 +
             (C92320 * C5980 - C90121 * C5974 + C92102 * C12107 -
              C90114 * C12106) *
                 C92177) *
                C80417) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92320 +
             C442 * C92102) *
                C92361 +
            (C82170 + C82171) * C92362 + C82176 * C80417) *
               C92150 * C1969 -
           ((C12220 * C92102 + C14209 * C92320) * C80417 +
            (C12221 * C92102 + C14208 * C92320) * C92362 +
            (C2293 * C92102 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C92320) *
                C92361) *
               C92150 * C1970) *
              C1971 +
          (((C2293 * C92320 + C2292 * C92102) * C92361 +
            (C12221 * C92320 + C22379 * C92102) * C92362 +
            (C12220 * C92320 +
             (C182 * C11886 - C410 * C11784 - C182 * C12106 + C92177 * C12206) *
                 C92102) *
                C80417) *
               C92150 * C1970 -
           ((C9770 * C92102 + C9769 * C92320) * C80417 +
            (C2985 * C92102 + C2986 * C92320) * C92362 +
            (C443 * C92102 + C442 * C92320) * C92361) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C182 +
             (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
              C80417 * C1717 - C80568 * C1593) *
                 C92177) *
                C92320 +
            ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
             (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
                C92102) *
               C92150 * C1969 +
           (((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
              C80568 * C5703 - C80417 * C5887) *
                 C182 +
             (C80566 * C1008 - C92361 * C1132 + C80567 * C3587 -
              C92362 * C3731 + C80568 * C5973 - C80417 * C6139) *
                 C92177) *
                C92320 +
            ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C182 +
             (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92177) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C182 +
             (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92177) *
                C92320 +
            ((C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C182 +
             (C80822 - C80823 + C80824 - C80825 + C80826 - C80827) * C92177) *
                C92102) *
               C92150 * C1969 +
           (((C82775 - C82774 + C82777 - C82776 + C82779 - C82778) * C182 +
             (C83081 - C83080 + C83083 - C83082 + C83085 - C83084) * C92177) *
                C92320 +
            ((C92361 * C944 - C80566 * C795 + C92362 * C3515 - C80567 * C3359 +
              C80417 * C11994 - C80568 * C11784) *
                 C182 +
             (C92361 * C1134 - C80566 * C1010 + C92362 * C3733 -
              C80567 * C3589 + C80417 * C12319 - C80568 * C12106) *
                 C92177) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C80566 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92361 +
            (C51945 - C51946 + C51947 - C51948) * C80567 +
            (C52263 - C52264 + C52265 - C52266) * C92362 + C82091 * C80568 +
            C82331 * C80417) *
               C92177 * C92150 * C1969 +
           ((C45830 - C45829 + C45832 - C45831) * C80566 +
            (C46082 - C46081 + C46084 - C46083) * C92361 + C55441 * C80567 +
            C55838 * C92362 + (C51961 - C51962 + C51963 - C51964) * C80568 +
            (C52271 - C52272 + C52273 - C52274) * C80417) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C80566 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92361 +
            (C54239 - C54240 + C54241 - C54242) * C80567 +
            (C54639 - C54640 + C54641 - C54642) * C92362 +
            (C90121 * C1380 - C92320 * C1393 + C90114 * C1381 -
             C92102 * C1395) *
                C80568 +
            (C90121 * C1776 - C92320 * C1784 + C90114 * C1777 -
             C92102 * C1785) *
                C80417) *
               C92177 * C92150 * C1969 +
           ((C47346 - C47345 + C47348 - C47347) * C80566 +
            (C47677 - C47676 + C47679 - C47678) * C92361 +
            (C53014 - C53013 + C53016 - C53015) * C80567 +
            (C53426 - C53425 + C53428 - C53427) * C92362 +
            (C92320 * C5713 - C90121 * C5704 + C92102 * C11785 -
             C90114 * C11784) *
                C80568 +
            (C92320 * C6226 - C90121 * C6220 + C92102 * C12425 -
             C90114 * C12424) *
                C80417) *
               C92177 * C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C80566 +
             (C92177 * C629 - C182 * C567) * C92361 +
             (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
             C11027 * C80568 + C11608 * C80417) *
                C92320 +
            ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
             C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
                C92102) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C80566 +
             (C182 * C1190 - C92177 * C1256) * C92361 +
             (C13874 - C13875) * C80567 + (C14518 - C14519) * C92362 +
             (C13878 - C13879) * C80568 + (C14520 - C14521) * C80417) *
                C92320 +
            ((C2046 - C2047) * C80566 + (C2502 - C2503) * C92361 +
             (C11889 - C11890) * C80567 + (C12526 - C12527) * C92362 +
             (C11893 - C11894) * C80568 + (C12528 - C12529) * C80417) *
                C92102) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C80566 + (C637 - C636) * C92361 + C12882 * C80567 +
             C13530 * C92362 + C12884 * C80568 + C13531 * C80417) *
                C92320 +
            ((C201 - C200) * C80566 + (C640 - C639) * C92361 + C23027 * C80567 +
             C23662 * C92362 + (C9504 - C9505) * C80568 +
             (C10007 - C10008) * C80417) *
                C92102) *
               C92150 * C1969 +
           (((C2047 - C2046) * C80566 + (C2503 - C2502) * C92361 +
             (C11890 - C11889) * C80567 + (C12527 - C12526) * C92362 +
             (C11894 - C11893) * C80568 + (C12529 - C12528) * C80417) *
                C92320 +
            ((C2051 - C2050) * C80566 + (C2505 - C2504) * C92361 +
             (C22060 - C22059) * C80567 + (C22683 - C22682) * C92362 +
             (C92177 * C11886 - C182 * C11784) * C80568 +
             (C92177 * C12524 - C182 * C12424) * C80417) *
                C92102) *
               C92150 * C1970) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
             C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
             C80568 * C1527 - C81051 * C1379 - C80568 * C1775 +
             C80417 * C1899) *
                C92177 * C92320 +
            (C81089 + C81090 + C81091) * C92177 * C92102) *
               C92150 * C1969 -
           ((C83398 + C83399 + C83400) * C92177 * C92102 +
            (C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385 +
             C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
             C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317) *
                C92177 * C92320) *
               C92150 * C1970) *
              C1971 +
          (((C83400 + C83399 + C83398) * C92177 * C92320 +
            (C80566 * C944 - C81049 * C795 - C80566 * C1192 + C92361 * C1315 +
             C80567 * C3515 - C81050 * C3359 - C80567 * C3803 + C92362 * C3947 +
             C80568 * C11994 - C81051 * C11784 - C80568 * C12424 +
             C80417 * C12627) *
                C92177 * C92102) *
               C92150 * C1970 -
           ((C81092 + C81093 + C81094) * C92177 * C92102 +
            (C81091 + C81090 + C81089) * C92177 * C92320) *
               C92150 * C1969) *
              C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92361 +
            (C51645 + C51646) * C92362 + C81835 * C80417) *
               C92177 * C2664 -
           ((C81848 + C81849) * C80417 + (C51649 + C51650) * C92362 +
            (C51646 + C51645) * C92361) *
               C92177 * C2665) *
              C1969 +
          ((C55039 * C92361 + (C51648 + C51647) * C92362 +
            (C90121 * C13751 - C44796 * C13749 - C90121 * C13752 +
             C92320 * C13755 + C90114 * C13753 - C44798 * C13750 -
             C90114 * C13754 + C92102 * C13756) *
                C80417) *
               C92177 * C2665 -
           ((C51647 + C51648) * C80417 + C55040 * C92362 +
            (C45593 + C45592) * C92361) *
               C92177 * C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C90121 +
             (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
             (C198 - C199) * C92102) *
                C92361 +
            ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
             C12880 * C90114 + C12881 * C92102) *
                C92362 +
            C81930 * C80417) *
               C2664 +
           (((C11010 - C11009) * C90121 + (C11012 - C11011) * C92320 +
             C12882 * C90114 + C12883 * C92102) *
                C92361 +
            ((C11014 - C11013) * C90121 + (C11016 - C11015) * C92320 +
             C12884 * C90114 + C12885 * C92102) *
                C92362 +
            ((C11019 - C11020) * C90121 + (C11021 - C11022) * C92320 +
             (C11023 - C11024) * C90114 + (C11025 - C11026) * C92102) *
                C80417) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C90121 +
             (C182 * C809 - C92177 * C884) * C92320 + (C2046 - C2047) * C90114 +
             (C2048 - C2049) * C92102) *
                C92361 +
            ((C13874 - C13875) * C90121 + (C13876 - C13877) * C92320 +
             (C11889 - C11890) * C90114 + (C11891 - C11892) * C92102) *
                C92362 +
            ((C13878 - C13879) * C90121 + (C13880 - C13881) * C92320 +
             (C11893 - C11894) * C90114 + (C11895 - C11896) * C92102) *
                C80417) *
               C2664 +
           (((C13875 - C13874) * C90121 + (C13877 - C13876) * C92320 +
             (C11890 - C11889) * C90114 + (C11892 - C11891) * C92102) *
                C92361 +
            ((C13879 - C13878) * C90121 + (C13881 - C13880) * C92320 +
             (C11894 - C11893) * C90114 + (C11896 - C11895) * C92102) *
                C92362 +
            ((C73663 - C73662) * C90121 + (C73665 - C73664) * C92320 +
             (C92177 * C13870 - C182 * C13750) * C90114 +
             (C92177 * C13872 - C182 * C13754) * C92102) *
                C80417) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C90121 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92320 +
            (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
            (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
               C92177 * C2664 +
           ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C90121 +
            (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 - C92362 * C1535 +
             C80568 * C10874 - C80417 * C11113) *
                C92320 +
            (C83709 - C83710 + C83711 - C83712 + C83713 - C83714) * C90114 +
            (C83715 - C83716 + C83717 - C83718 + C83719 - C83720) * C92102) *
               C92177 * C2665) *
              C1969 +
          (((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
             C80568 * C5703 - C80417 * C5887) *
                C90121 +
            (C80566 * C809 - C92361 * C950 + C80567 * C3362 - C92362 * C3517 +
             C80568 * C5712 - C80417 * C5893) *
                C92320 +
            (C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C90114 +
            (C82780 - C82781 + C82782 - C82783 + C82784 - C82785) * C92102) *
               C92177 * C2664 +
           ((C92361 * C3513 - C80566 * C3357 + C92362 * C5887 - C80567 * C5703 +
             C80417 * C13979 - C80568 * C13749) *
                C90121 +
            (C92361 * C3517 - C80566 * C3362 + C92362 * C5893 - C80567 * C5712 +
             C80417 * C13981 - C80568 * C13752) *
                C92320 +
            (C92361 * C3514 - C80566 * C3358 + C92362 * C5888 - C80567 * C5704 +
             C80417 * C13980 - C80568 * C13750) *
                C90114 +
            (C92361 * C3518 - C80566 * C3364 + C92362 * C5894 - C80567 * C5714 +
             C80417 * C13982 - C80568 * C13754) *
                C92102) *
               C92177 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C182 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92177) *
                C92361 +
            ((C51945 - C51946 + C51947 - C51948) * C182 +
             (C51949 - C51950 + C51951 - C51952) * C92177) *
                C92362 +
            C82095 * C80417) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C182 +
             (C51950 - C51949 + C51952 - C51951) * C92177) *
                C92361 +
            ((C51953 - C51954 + C51955 - C51956) * C182 +
             (C51957 - C51958 + C51959 - C51960) * C92177) *
                C92362 +
            ((C82083 - C82084 + C82085 - C82086) * C182 +
             (C82087 - C82088 + C82089 - C82090) * C92177) *
                C80417) *
               C2665) *
              C1969 +
          ((((C45830 - C45829 + C45832 - C45831) * C182 +
             (C45834 - C45833 + C45836 - C45835) * C92177) *
                C92361 +
            (C55441 * C182 + C55442 * C92177) * C92362 +
            ((C51961 - C51962 + C51963 - C51964) * C182 +
             (C51965 - C51966 + C51967 - C51968) * C92177) *
                C80417) *
               C2664 +
           ((C55439 * C182 + C55440 * C92177) * C92361 +
            ((C51962 - C51961 + C51964 - C51963) * C182 +
             (C51966 - C51965 + C51968 - C51967) * C92177) *
                C92362 +
            ((C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
              C90114 * C13750) *
                 C182 +
             (C92320 * C14083 - C90121 * C14081 + C92102 * C14084 -
              C90114 * C14082) *
                 C92177) *
                C80417) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92320 +
             C442 * C92102) *
                C92361 +
            (C82170 + C82171) * C92362 + C82176 * C80417) *
               C2664 -
           ((C82174 + C82175) * C80417 + (C82173 + C82172) * C92362 +
            (C82171 + C82170) * C92361) *
               C2665) *
              C1969 +
          (((C84842 + C84843) * C92361 + (C84844 + C84845) * C92362 +
            (C73872 * C92320 +
             (C182 * C13870 - C410 * C13750 - C182 * C14082 + C92177 * C14192) *
                 C92102) *
                C80417) *
               C2665 -
           ((C84845 + C84844) * C80417 + (C84843 + C84842) * C92362 +
            (C2293 * C92102 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C92320) *
                C92361) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C182 +
             (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
              C80417 * C1717 - C80568 * C1593) *
                 C92177) *
                C92320 +
            ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
             (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
                C92102) *
               C2664 +
           (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 -
              C92362 * C1527 + C80568 * C10868 - C80417 * C11109) *
                 C182 +
             (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 -
              C92362 * C1717 + C80568 * C11191 - C80417 * C11419) *
                 C92177) *
                C92320 +
            ((C83709 - C83710 + C83711 - C83712 + C83713 - C83714) * C182 +
             (C84027 - C84028 + C84029 - C84030 + C84031 - C84032) * C92177) *
                C92102) *
               C2665) *
              C1969 +
          ((((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
              C80568 * C5703 - C80417 * C5887) *
                 C182 +
             (C80566 * C1008 - C92361 * C1132 + C80567 * C3587 -
              C92362 * C3731 + C80568 * C5973 - C80417 * C6139) *
                 C92177) *
                C92320 +
            ((C82774 - C82775 + C82776 - C82777 + C82778 - C82779) * C182 +
             (C83080 - C83081 + C83082 - C83083 + C83084 - C83085) * C92177) *
                C92102) *
               C2664 +
           (((C92361 * C3513 - C80566 * C3357 + C92362 * C5887 -
              C80567 * C5703 + C80417 * C13979 - C80568 * C13749) *
                 C182 +
             (C92361 * C3731 - C80566 * C3587 + C92362 * C6139 -
              C80567 * C5973 + C80417 * C14309 - C80568 * C14081) *
                 C92177) *
                C92320 +
            ((C92361 * C3514 - C80566 * C3358 + C92362 * C5888 -
              C80567 * C5704 + C80417 * C13980 - C80568 * C13750) *
                 C182 +
             (C92361 * C3732 - C80566 * C3588 + C92362 * C6141 -
              C80567 * C5974 + C80417 * C14310 - C80568 * C14082) *
                 C92177) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C80566 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92361 +
            (C51945 - C51946 + C51947 - C51948) * C80567 +
            (C52263 - C52264 + C52265 - C52266) * C92362 + C82091 * C80568 +
            C82331 * C80417) *
               C92177 * C2664 +
           ((C51946 - C51945 + C51948 - C51947) * C80566 +
            (C52264 - C52263 + C52266 - C52265) * C92361 +
            (C51953 - C51954 + C51955 - C51956) * C80567 +
            (C52267 - C52268 + C52269 - C52270) * C92362 +
            (C82083 - C82084 + C82085 - C82086) * C80568 +
            (C82327 - C82328 + C82329 - C82330) * C80417) *
               C92177 * C2665) *
              C1969 +
          (((C45830 - C45829 + C45832 - C45831) * C80566 +
            (C46082 - C46081 + C46084 - C46083) * C92361 + C55441 * C80567 +
            C55838 * C92362 + (C51961 - C51962 + C51963 - C51964) * C80568 +
            (C52271 - C52272 + C52273 - C52274) * C80417) *
               C92177 * C2664 +
           (C55439 * C80566 + C55837 * C92361 +
            (C51962 - C51961 + C51964 - C51963) * C80567 +
            (C52272 - C52271 + C52274 - C52273) * C92362 +
            (C92320 * C13751 - C90121 * C13749 + C92102 * C13753 -
             C90114 * C13750) *
                C80568 +
            (C92320 * C14411 - C90121 * C14409 + C92102 * C14412 -
             C90114 * C14410) *
                C80417) *
               C92177 * C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C80566 +
             (C92177 * C629 - C182 * C567) * C92361 +
             (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
             C11027 * C80568 + C11608 * C80417) *
                C92320 +
            ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
             C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
                C92102) *
               C2664 +
           (((C11010 - C11009) * C80566 + (C11600 - C11599) * C92361 +
             (C11014 - C11013) * C80567 + (C11602 - C11601) * C92362 +
             (C11019 - C11020) * C80568 + (C11604 - C11605) * C80417) *
                C92320 +
            (C12882 * C80566 + C13530 * C92361 + C12884 * C80567 +
             C13531 * C92362 + (C11023 - C11024) * C80568 +
             (C11606 - C11607) * C80417) *
                C92102) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C80566 +
             (C182 * C1190 - C92177 * C1256) * C92361 +
             (C13874 - C13875) * C80567 + (C14518 - C14519) * C92362 +
             (C13878 - C13879) * C80568 + (C14520 - C14521) * C80417) *
                C92320 +
            ((C2046 - C2047) * C80566 + (C2502 - C2503) * C92361 +
             (C11889 - C11890) * C80567 + (C12526 - C12527) * C92362 +
             (C11893 - C11894) * C80568 + (C12528 - C12529) * C80417) *
                C92102) *
               C2664 +
           (((C13875 - C13874) * C80566 + (C14519 - C14518) * C92361 +
             (C13879 - C13878) * C80567 + (C14521 - C14520) * C92362 +
             (C73663 - C73662) * C80568 + (C74073 - C74072) * C80417) *
                C92320 +
            ((C11890 - C11889) * C80566 + (C12527 - C12526) * C92361 +
             (C11894 - C11893) * C80567 + (C12529 - C12528) * C92362 +
             (C92177 * C13870 - C182 * C13750) * C80568 +
             (C92177 * C14516 - C182 * C14410) * C80417) *
                C92102) *
               C2665) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
             C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
             C80568 * C1527 - C81051 * C1379 - C80568 * C1775 +
             C80417 * C1899) *
                C92177 * C92320 +
            (C81089 + C81090 + C81091) * C92177 * C92102) *
               C2664 -
           ((C84349 + C84350 + C84351) * C92177 * C92102 +
            (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
             C80417 * C11683 + C80567 * C1527 - C81050 * C1379 -
             C80567 * C1775 + C92362 * C1899 + C80566 * C1523 - C81049 * C1378 -
             C80566 * C1771 + C92361 * C1898) *
                C92177 * C92320) *
               C2665) *
              C1969 +
          (((C80566 * C3513 - C81049 * C3357 - C80566 * C3801 + C92361 * C3945 +
             C80567 * C5887 - C81050 * C5703 - C80567 * C6219 + C92362 * C6385 +
             C80568 * C13979 - C81051 * C13749 - C80568 * C14409 +
             C80417 * C14619) *
                C92177 * C92320 +
            (C80566 * C3514 - C81049 * C3358 - C80566 * C3802 + C92361 * C3946 +
             C80567 * C5888 - C81050 * C5704 - C80567 * C6220 + C92362 * C6387 +
             C80568 * C13980 - C81051 * C13750 - C80568 * C14410 +
             C80417 * C14620) *
                C92177 * C92102) *
               C2665 -
           ((C83398 + C83399 + C83400) * C92177 * C92102 +
            (C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385 +
             C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
             C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317) *
                C92177 * C92320) *
               C2664) *
              C1970) *
         C92124) /
        (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92361 +
           (C51645 + C51646) * C92362 + (C51650 + C51649) * C80417) *
              C92177 * C92150 * C790 -
          ((C51647 + C51648) * C80417 + C55040 * C92362 +
           (C45593 + C45592) * C92361) *
              C92177 * C92150 * C791 +
          (C45598 * C92361 + (C48936 + C48935) * C92362 +
           (C90121 * C5715 - C44796 * C5705 - C90121 * C5716 + C92320 * C5723 +
            C90114 * C5717 - C44798 * C5706 - C90114 * C5718 + C92102 * C5724) *
               C80417) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92361 +
           (C51645 + C51646) * C92362 + (C51650 + C51649) * C80417) *
              C92177 * C92150 * C92136 * C97 -
          ((C90114 * C1395 - C44798 * C1381 - C90114 * C1396 + C92102 * C1405 +
            C90121 * C1393 - C44796 * C1380 - C90121 * C1394 + C92320 * C1404) *
               C80417 +
           (C53836 + C53835) * C92362 +
           (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
            C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
               C92361) *
              C92177 * C92150 * C92136 * C98 +
          ((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
            C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
               C92361 +
           (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
            C90114 * C1383 - C44798 * C1375 - C90114 * C1384 + C92102 * C1399) *
               C92362 +
           (C90121 * C1395 - C44796 * C1381 - C90121 * C1396 + C92320 * C1405 +
            C90114 * C1397 - C44798 * C1382 - C90114 * C1398 + C92102 * C1406) *
               C80417) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92361 +
           (C51645 + C51646) * C92362 + C81835 * C80417) *
              C92177 * C1372 -
          ((C81848 + C81849) * C80417 + (C51649 + C51650) * C92362 +
           (C51646 + C51645) * C92361) *
              C92177 * C1373 +
          (C81835 * C92361 + (C81849 + C81848) * C92362 +
           (C90121 * C10875 - C44796 * C10869 - C90121 * C10876 +
            C92320 * C10881 + C90114 * C10877 - C44798 * C10870 -
            C90114 * C10878 + C92102 * C10882) *
               C80417) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C90121 +
            (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
            (C198 - C199) * C92102) *
               C92361 +
           ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
            C12880 * C90114 + C12881 * C92102) *
               C92362 +
           (C11027 * C90121 + C11028 * C92320 + C11017 * C90114 +
            C11018 * C92102) *
               C80417) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C90121 +
            (C182 * C809 - C92177 * C884) * C92320 + (C2046 - C2047) * C90114 +
            (C2048 - C2049) * C92102) *
               C92361 +
           ((C13874 - C13875) * C90121 + (C13876 - C13877) * C92320 +
            (C11889 - C11890) * C90114 + (C11891 - C11892) * C92102) *
               C92362 +
           ((C13878 - C13879) * C90121 + (C13880 - C13881) * C92320 +
            (C11893 - C11894) * C90114 + (C11895 - C11896) * C92102) *
               C80417) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C90121 +
            (C92177 * C888 - C182 * C811) * C92320 +
            (C92177 * C881 - C182 * C799) * C90114 +
            (C92177 * C889 - C182 * C813) * C92102) *
               C92361 +
           ((C92177 * C5799 - C182 * C5702) * C90121 +
            (C92177 * C5805 - C182 * C5710) * C92320 +
            (C92177 * C5800 - C182 * C5701) * C90114 +
            (C92177 * C5806 - C182 * C5708) * C92102) *
               C92362 +
           ((C92177 * C5802 - C182 * C5705) * C90121 +
            (C92177 * C5808 - C182 * C5716) * C92320 +
            (C92177 * C5804 - C182 * C5706) * C90114 +
            (C92177 * C5810 - C182 * C5718) * C92102) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C90121 +
            (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
            (C198 - C199) * C92102) *
               C92361 +
           ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
            C12880 * C90114 + C12881 * C92102) *
               C92362 +
           (C11027 * C90121 + C11028 * C92320 + C11017 * C90114 +
            C11018 * C92102) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C90121 + (C199 - C198) * C92320 +
            (C201 - C200) * C90114 + (C203 - C202) * C92102) *
               C92361 +
           (C12882 * C90121 + C12883 * C92320 + C23027 * C90114 +
            C23028 * C92102) *
               C92362 +
           (C12884 * C90121 + C12885 * C92320 + (C9504 - C9505) * C90114 +
            (C9506 - C9507) * C92102) *
               C80417) *
              C92150 * C92136 * C98 +
          ((C212 * C90121 + C213 * C92320 + C214 * C90114 + C215 * C92102) *
               C92361 +
           (C19823 * C90121 + C19824 * C92320 + (C2748 - C2747) * C90114 +
            (C2750 - C2749) * C92102) *
               C92362 +
           ((C9505 - C9504) * C90121 + (C9507 - C9506) * C92320 +
            (C92177 * C1464 - C182 * C1382) * C90114 +
            (C92177 * C1472 - C182 * C1398) * C92102) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C90121 +
            (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
            (C198 - C199) * C92102) *
               C92361 +
           ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
            C12880 * C90114 + C12881 * C92102) *
               C92362 +
           C81930 * C80417) *
              C1372 +
          (((C11010 - C11009) * C90121 + (C11012 - C11011) * C92320 +
            C12882 * C90114 + C12883 * C92102) *
               C92361 +
           ((C11014 - C11013) * C90121 + (C11016 - C11015) * C92320 +
            C12884 * C90114 + C12885 * C92102) *
               C92362 +
           ((C11019 - C11020) * C90121 + (C11021 - C11022) * C92320 +
            (C11023 - C11024) * C90114 + (C11025 - C11026) * C92102) *
               C80417) *
              C1373 +
          (C81930 * C92361 +
           (C71927 * C90121 + C71928 * C92320 + (C11024 - C11023) * C90114 +
            (C11026 - C11025) * C92102) *
               C92362 +
           ((C71930 - C71929) * C90121 + (C71932 - C71931) * C92320 +
            (C92177 * C11003 - C182 * C10870) * C90114 +
            (C92177 * C11007 - C182 * C10878) * C92102) *
               C80417) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C90121 +
           (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
            C80417 * C1535 - C80568 * C1392) *
               C92320 +
           (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
           (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
              C92177 * C92150 * C790 +
          ((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
            C80568 * C5703 - C80417 * C5887) *
               C90121 +
           (C80566 * C809 - C92361 * C950 + C80567 * C3362 - C92362 * C3517 +
            C80568 * C5712 - C80417 * C5893) *
               C92320 +
           (C80566 * C796 - C92361 * C943 + C80567 * C3358 - C92362 * C3514 +
            C80568 * C5704 - C80417 * C5888) *
               C90114 +
           (C80566 * C807 - C92361 * C951 + C80567 * C3364 - C92362 * C3518 +
            C80568 * C5714 - C80417 * C5894) *
               C92102) *
              C92177 * C92150 * C791 +
          ((C92361 * C946 - C80566 * C798 + C92362 * C5885 - C80567 * C5702 +
            C80417 * C5889 - C80568 * C5705) *
               C90121 +
           (C92361 * C954 - C80566 * C811 + C92362 * C5891 - C80567 * C5710 +
            C80417 * C5895 - C80568 * C5716) *
               C92320 +
           (C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
            C80417 * C5890 - C80568 * C5706) *
               C90114 +
           (C92361 * C955 - C80566 * C813 + C92362 * C5892 - C80567 * C5708 +
            C80417 * C5896 - C80568 * C5718) *
               C92102) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C90121 +
           (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
            C80417 * C1535 - C80568 * C1392) *
               C92320 +
           (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
           (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
              C92177 * C92150 * C92136 * C97 +
          ((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C90121 +
           (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92320 +
           (C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C90114 +
           (C80588 - C80589 + C80590 - C80591 + C80592 - C80593) * C92102) *
              C92177 * C92150 * C92136 * C98 +
          ((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C90121 +
           (C80589 - C80588 + C80591 - C80590 + C80593 - C80592) * C92320 +
           (C92361 * C269 - C80566 * C111 + C92362 * C1526 - C80567 * C1375 +
            C80417 * C1530 - C80568 * C1382) *
               C90114 +
           (C92361 * C275 - C80566 * C121 + C92362 * C1534 - C80567 * C1384 +
            C80417 * C1538 - C80568 * C1398) *
               C92102) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C90121 +
           (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
            C80417 * C1535 - C80568 * C1392) *
               C92320 +
           (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
           (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
              C92177 * C1372 +
          ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
            C80568 * C10868 - C80417 * C11109) *
               C90121 +
           (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 - C92362 * C1535 +
            C80568 * C10874 - C80417 * C11113) *
               C92320 +
           (C80566 * C1377 - C92361 * C1524 + C80567 * C1380 - C92362 * C1528 +
            C80568 * C10867 - C80417 * C11110) *
               C90114 +
           (C80566 * C1388 - C92361 * C1532 + C80567 * C1394 - C92362 * C1536 +
            C80568 * C10872 - C80417 * C11114) *
               C92102) *
              C92177 * C1373 +
          ((C92361 * C1527 - C80566 * C1379 + C92362 * C11109 -
            C80567 * C10868 + C80417 * C11111 - C80568 * C10869) *
               C90121 +
           (C92361 * C1535 - C80566 * C1392 + C92362 * C11113 -
            C80567 * C10874 + C80417 * C11115 - C80568 * C10876) *
               C92320 +
           (C92361 * C1528 - C80566 * C1380 + C92362 * C11110 -
            C80567 * C10867 + C80417 * C11112 - C80568 * C10870) *
               C90114 +
           (C92361 * C1536 - C80566 * C1394 + C92362 * C11114 -
            C80567 * C10872 + C80417 * C11116 - C80568 * C10878) *
               C92102) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C182 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92177) *
               C92361 +
           ((C51945 - C51946 + C51947 - C51948) * C182 +
            (C51949 - C51950 + C51951 - C51952) * C92177) *
               C92362 +
           ((C51954 - C51953 + C51956 - C51955) * C182 +
            (C51958 - C51957 + C51960 - C51959) * C92177) *
               C80417) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C182 +
            (C45834 - C45833 + C45836 - C45835) * C92177) *
               C92361 +
           (C55441 * C182 + C55442 * C92177) * C92362 +
           ((C51961 - C51962 + C51963 - C51964) * C182 +
            (C51965 - C51966 + C51967 - C51968) * C92177) *
               C80417) *
              C92150 * C791 +
          ((C45857 * C182 + C45858 * C92177) * C92361 +
           ((C49242 - C49241 + C49244 - C49243) * C182 +
            (C49246 - C49245 + C49248 - C49247) * C92177) *
               C92362 +
           ((C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
             C90114 * C5706) *
                C182 +
            (C92320 * C5981 - C90121 * C5975 + C92102 * C5982 -
             C90114 * C5976) *
                C92177) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C182 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92177) *
               C92361 +
           ((C51945 - C51946 + C51947 - C51948) * C182 +
            (C51949 - C51950 + C51951 - C51952) * C92177) *
               C92362 +
           ((C51954 - C51953 + C51956 - C51955) * C182 +
            (C51958 - C51957 + C51960 - C51959) * C92177) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C182 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92177) *
               C92361 +
           ((C54239 - C54240 + C54241 - C54242) * C182 +
            (C54243 - C54244 + C54245 - C54246) * C92177) *
               C92362 +
           ((C90121 * C1380 - C92320 * C1393 + C90114 * C1381 -
             C92102 * C1395) *
                C182 +
            (C90121 * C1594 - C92320 * C1602 + C90114 * C1595 -
             C92102 * C1603) *
                C92177) *
               C80417) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C182 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C92177) *
               C92361 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C182 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C92177) *
               C92362 +
           ((C92320 * C1395 - C90121 * C1381 + C92102 * C1397 -
             C90114 * C1382) *
                C182 +
            (C92320 * C1603 - C90121 * C1595 + C92102 * C1604 -
             C90114 * C1596) *
                C92177) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C182 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92177) *
               C92361 +
           ((C51945 - C51946 + C51947 - C51948) * C182 +
            (C51949 - C51950 + C51951 - C51952) * C92177) *
               C92362 +
           C82095 * C80417) *
              C1372 +
          (((C51946 - C51945 + C51948 - C51947) * C182 +
            (C51950 - C51949 + C51952 - C51951) * C92177) *
               C92361 +
           ((C51953 - C51954 + C51955 - C51956) * C182 +
            (C51957 - C51958 + C51959 - C51960) * C92177) *
               C92362 +
           ((C82083 - C82084 + C82085 - C82086) * C182 +
            (C82087 - C82088 + C82089 - C82090) * C92177) *
               C80417) *
              C1373 +
          (C82095 * C92361 +
           ((C82084 - C82083 + C82086 - C82085) * C182 +
            (C82088 - C82087 + C82090 - C82089) * C92177) *
               C92362 +
           ((C92320 * C10875 - C90121 * C10869 + C92102 * C10877 -
             C90114 * C10870) *
                C182 +
            (C92320 * C11197 - C90121 * C11193 + C92102 * C11198 -
             C90114 * C11194) *
                C92177) *
               C80417) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92320 +
            C442 * C92102) *
               C92361 +
           (C11337 * C92320 + C2986 * C92102) * C92362 +
           (C11338 * C92320 + C9769 * C92102) * C80417) *
              C92150 * C790 -
          ((C12220 * C92102 + C14209 * C92320) * C80417 +
           (C12221 * C92102 + C14208 * C92320) * C92362 +
           (C2293 * C92102 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92320) *
               C92361) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C92320 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92102) *
               C92361 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C92320 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92102) *
               C92362 +
           ((C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
                C92320 +
            (C182 * C5804 - C410 * C5706 - C182 * C5976 + C92177 * C6062) *
                C92102) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92320 +
            C442 * C92102) *
               C92361 +
           (C11337 * C92320 + C2986 * C92102) * C92362 +
           (C11338 * C92320 + C9769 * C92102) * C80417) *
              C92150 * C92136 * C97 -
          ((C9770 * C92102 + C9769 * C92320) * C80417 +
           (C2985 * C92102 + C2986 * C92320) * C92362 +
           (C443 * C92102 + C442 * C92320) * C92361) *
              C92150 * C92136 * C98 +
          ((C443 * C92320 + C444 * C92102) * C92361 +
           (C2985 * C92320 + C2984 * C92102) * C92362 +
           (C9770 * C92320 +
            (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                C92102) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92320 +
            C442 * C92102) *
               C92361 +
           (C82170 + C82171) * C92362 + C82176 * C80417) *
              C1372 -
          ((C82174 + C82175) * C80417 + (C82173 + C82172) * C92362 +
           (C82171 + C82170) * C92361) *
              C1373 +
          (C82176 * C92361 + (C82175 + C82174) * C92362 +
           (C72113 * C92320 +
            (C182 * C11003 - C410 * C10870 - C182 * C11194 + C92177 * C11309) *
                C92102) *
               C80417) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C182 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92177) *
               C92320 +
           ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
            (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
               C92102) *
              C92150 * C790 +
          (((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
             C80568 * C5703 - C80417 * C5887) *
                C182 +
            (C80566 * C1008 - C92361 * C1132 + C80567 * C3587 - C92362 * C3731 +
             C80568 * C5973 - C80417 * C6139) *
                C92177) *
               C92320 +
           ((C80566 * C796 - C92361 * C943 + C80567 * C3358 - C92362 * C3514 +
             C80568 * C5704 - C80417 * C5888) *
                C182 +
            (C80566 * C1009 - C92361 * C1133 + C80567 * C3588 - C92362 * C3732 +
             C80568 * C5974 - C80417 * C6141) *
                C92177) *
               C92102) *
              C92150 * C791 +
          (((C92361 * C946 - C80566 * C798 + C92362 * C5885 - C80567 * C5702 +
             C80417 * C5889 - C80568 * C5705) *
                C182 +
            (C92361 * C1136 - C80566 * C1012 + C92362 * C6137 - C80567 * C5971 +
             C80417 * C6140 - C80568 * C5975) *
                C92177) *
               C92320 +
           ((C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
             C80417 * C5890 - C80568 * C5706) *
                C182 +
            (C92361 * C1137 - C80566 * C1013 + C92362 * C6138 - C80567 * C5972 +
             C80417 * C6142 - C80568 * C5976) *
                C92177) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C182 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92177) *
               C92320 +
           ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
            (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C182 +
            (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92177) *
               C92320 +
           ((C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C182 +
            (C80822 - C80823 + C80824 - C80825 + C80826 - C80827) * C92177) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C182 +
            (C80823 - C80822 + C80825 - C80824 + C80827 - C80826) * C92177) *
               C92320 +
           ((C92361 * C269 - C80566 * C111 + C92362 * C1526 - C80567 * C1375 +
             C80417 * C1530 - C80568 * C1382) *
                C182 +
            (C92361 * C498 - C80566 * C351 + C92362 * C1716 - C80567 * C1592 +
             C80417 * C1720 - C80568 * C1596) *
                C92177) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C182 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92177) *
               C92320 +
           ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
            (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
               C92102) *
              C1372 +
          (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C182 +
            (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 - C92362 * C1717 +
             C80568 * C11191 - C80417 * C11419) *
                C92177) *
               C92320 +
           ((C80566 * C1377 - C92361 * C1524 + C80567 * C1380 - C92362 * C1528 +
             C80568 * C10867 - C80417 * C11110) *
                C182 +
            (C80566 * C1590 - C92361 * C1714 + C80567 * C1594 - C92362 * C1718 +
             C80568 * C11192 - C80417 * C11420) *
                C92177) *
               C92102) *
              C1373 +
          (((C92361 * C1527 - C80566 * C1379 + C92362 * C11109 -
             C80567 * C10868 + C80417 * C11111 - C80568 * C10869) *
                C182 +
            (C92361 * C1717 - C80566 * C1593 + C92362 * C11419 -
             C80567 * C11191 + C80417 * C11421 - C80568 * C11193) *
                C92177) *
               C92320 +
           ((C92361 * C1528 - C80566 * C1380 + C92362 * C11110 -
             C80567 * C10867 + C80417 * C11112 - C80568 * C10870) *
                C182 +
            (C92361 * C1718 - C80566 * C1594 + C92362 * C11420 -
             C80567 * C11192 + C80417 * C11422 - C80568 * C11194) *
                C92177) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C80566 +
           (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
               C92361 +
           (C51945 - C51946 + C51947 - C51948) * C80567 +
           (C52263 - C52264 + C52265 - C52266) * C92362 +
           (C51954 - C51953 + C51956 - C51955) * C80568 +
           (C52268 - C52267 + C52270 - C52269) * C80417) *
              C92177 * C92150 * C790 +
          ((C45830 - C45829 + C45832 - C45831) * C80566 +
           (C46082 - C46081 + C46084 - C46083) * C92361 + C55441 * C80567 +
           C55838 * C92362 + (C51961 - C51962 + C51963 - C51964) * C80568 +
           (C52271 - C52272 + C52273 - C52274) * C80417) *
              C92177 * C92150 * C791 +
          (C45857 * C80566 + C46096 * C92361 +
           (C49242 - C49241 + C49244 - C49243) * C80567 +
           (C49548 - C49547 + C49550 - C49549) * C92362 +
           (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 - C90114 * C5706) *
               C80568 +
           (C92320 * C6227 - C90121 * C6221 + C92102 * C6228 - C90114 * C6222) *
               C80417) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C80566 +
           (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
               C92361 +
           (C51945 - C51946 + C51947 - C51948) * C80567 +
           (C52263 - C52264 + C52265 - C52266) * C92362 +
           (C51954 - C51953 + C51956 - C51955) * C80568 +
           (C52268 - C52267 + C52270 - C52269) * C80417) *
              C92177 * C92150 * C92136 * C97 +
          ((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
               C80566 +
           (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
               C92361 +
           (C54239 - C54240 + C54241 - C54242) * C80567 +
           (C54639 - C54640 + C54641 - C54642) * C92362 +
           (C90121 * C1380 - C92320 * C1393 + C90114 * C1381 - C92102 * C1395) *
               C80568 +
           (C90121 * C1776 - C92320 * C1784 + C90114 * C1777 - C92102 * C1785) *
               C80417) *
              C92177 * C92150 * C92136 * C98 +
          ((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
               C80566 +
           (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
               C92361 +
           (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 - C90114 * C1375) *
               C80567 +
           (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 - C90114 * C1774) *
               C92362 +
           (C92320 * C1395 - C90121 * C1381 + C92102 * C1397 - C90114 * C1382) *
               C80568 +
           (C92320 * C1785 - C90121 * C1777 + C92102 * C1786 - C90114 * C1778) *
               C80417) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C80566 +
           (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
               C92361 +
           (C51945 - C51946 + C51947 - C51948) * C80567 +
           (C52263 - C52264 + C52265 - C52266) * C92362 + C82091 * C80568 +
           C82331 * C80417) *
              C92177 * C1372 +
          ((C51946 - C51945 + C51948 - C51947) * C80566 +
           (C52264 - C52263 + C52266 - C52265) * C92361 +
           (C51953 - C51954 + C51955 - C51956) * C80567 +
           (C52267 - C52268 + C52269 - C52270) * C92362 +
           (C82083 - C82084 + C82085 - C82086) * C80568 +
           (C82327 - C82328 + C82329 - C82330) * C80417) *
              C92177 * C1373 +
          (C82091 * C80566 + C82331 * C92361 +
           (C82084 - C82083 + C82086 - C82085) * C80567 +
           (C82328 - C82327 + C82330 - C82329) * C92362 +
           (C92320 * C10875 - C90121 * C10869 + C92102 * C10877 -
            C90114 * C10870) *
               C80568 +
           (C92320 * C11503 - C90121 * C11499 + C92102 * C11504 -
            C90114 * C11500) *
               C80417) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C80566 +
            (C92177 * C629 - C182 * C567) * C92361 +
            (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
            C11027 * C80568 + C11608 * C80417) *
               C92320 +
           ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
            C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
               C92102) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C80566 +
            (C182 * C1190 - C92177 * C1256) * C92361 +
            (C13874 - C13875) * C80567 + (C14518 - C14519) * C92362 +
            (C13878 - C13879) * C80568 + (C14520 - C14521) * C80417) *
               C92320 +
           ((C2046 - C2047) * C80566 + (C2502 - C2503) * C92361 +
            (C11889 - C11890) * C80567 + (C12526 - C12527) * C92362 +
            (C11893 - C11894) * C80568 + (C12528 - C12529) * C80417) *
               C92102) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C80566 +
            (C92177 * C1260 - C182 * C1194) * C92361 +
            (C92177 * C5799 - C182 * C5702) * C80567 +
            (C92177 * C6303 - C182 * C6217) * C92362 +
            (C92177 * C5802 - C182 * C5705) * C80568 +
            (C92177 * C6306 - C182 * C6221) * C80417) *
               C92320 +
           ((C92177 * C881 - C182 * C799) * C80566 +
            (C92177 * C1261 - C182 * C1195) * C92361 +
            (C92177 * C5800 - C182 * C5701) * C80567 +
            (C92177 * C6304 - C182 * C6218) * C92362 +
            (C92177 * C5804 - C182 * C5706) * C80568 +
            (C92177 * C6308 - C182 * C6222) * C80417) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C80566 +
            (C92177 * C629 - C182 * C567) * C92361 +
            (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
            C11027 * C80568 + C11608 * C80417) *
               C92320 +
           ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
            C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C80566 + (C637 - C636) * C92361 + C12882 * C80567 +
            C13530 * C92362 + C12884 * C80568 + C13531 * C80417) *
               C92320 +
           ((C201 - C200) * C80566 + (C640 - C639) * C92361 + C23027 * C80567 +
            C23662 * C92362 + (C9504 - C9505) * C80568 +
            (C10007 - C10008) * C80417) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C212 * C80566 + C646 * C92361 + C19823 * C80567 + C20322 * C92362 +
            (C9505 - C9504) * C80568 + (C10008 - C10007) * C80417) *
               C92320 +
           (C214 * C80566 + C647 * C92361 + (C2748 - C2747) * C80567 +
            (C3200 - C3199) * C92362 +
            (C92177 * C1464 - C182 * C1382) * C80568 +
            (C92177 * C1844 - C182 * C1778) * C80417) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C80566 +
            (C92177 * C629 - C182 * C567) * C92361 +
            (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
            C11027 * C80568 + C11608 * C80417) *
               C92320 +
           ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
            C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
               C92102) *
              C1372 +
          (((C11010 - C11009) * C80566 + (C11600 - C11599) * C92361 +
            (C11014 - C11013) * C80567 + (C11602 - C11601) * C92362 +
            (C11019 - C11020) * C80568 + (C11604 - C11605) * C80417) *
               C92320 +
           (C12882 * C80566 + C13530 * C92361 + C12884 * C80567 +
            C13531 * C92362 + (C11023 - C11024) * C80568 +
            (C11606 - C11607) * C80417) *
               C92102) *
              C1373 +
          ((C11027 * C80566 + C11608 * C92361 + C71927 * C80567 +
            C72272 * C92362 + (C71930 - C71929) * C80568 +
            (C72274 - C72273) * C80417) *
               C92320 +
           (C11017 * C80566 + C11603 * C92361 + (C11024 - C11023) * C80567 +
            (C11607 - C11606) * C92362 +
            (C92177 * C11003 - C182 * C10870) * C80568 +
            (C92177 * C11597 - C182 * C11500) * C80417) *
               C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92177 * C92320 +
           (C81089 + C81090 + C81091) * C92177 * C92102) *
              C92150 * C790 -
          ((C80568 * C5888 - C81051 * C5704 - C80568 * C6220 + C80417 * C6387 +
            C80567 * C3514 - C81050 * C3358 - C80567 * C3802 + C92362 * C3946 +
            C80566 * C943 - C81049 * C796 - C80566 * C1191 + C92361 * C1316) *
               C92177 * C92102 +
           (C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385 +
            C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
            C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317) *
               C92177 * C92320) *
              C92150 * C791 +
          ((C80566 * C946 - C81049 * C798 - C80566 * C1194 + C92361 * C1318 +
            C80567 * C5885 - C81050 * C5702 - C80567 * C6217 + C92362 * C6384 +
            C80568 * C5889 - C81051 * C5705 - C80568 * C6221 + C80417 * C6386) *
               C92177 * C92320 +
           (C80566 * C947 - C81049 * C799 - C80566 * C1195 + C92361 * C1319 +
            C80567 * C5886 - C81050 * C5701 - C80567 * C6218 + C92362 * C6383 +
            C80568 * C5890 - C81051 * C5706 - C80568 * C6222 + C80417 * C6388) *
               C92177 * C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92177 * C92320 +
           (C81089 + C81090 + C81091) * C92177 * C92102) *
              C92150 * C92136 * C97 -
          ((C81092 + C81093 + C81094) * C92177 * C92102 +
           (C81091 + C81090 + C81089) * C92177 * C92320) *
              C92150 * C92136 * C98 +
          ((C81094 + C81093 + C81092) * C92177 * C92320 +
           (C80566 * C269 - C81049 * C111 - C80566 * C570 + C92361 * C705 +
            C80567 * C1526 - C81050 * C1375 - C80567 * C1774 + C92362 * C1895 +
            C80568 * C1530 - C81051 * C1382 - C80568 * C1778 + C80417 * C1902) *
               C92177 * C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92177 * C92320 +
           (C81089 + C81090 + C81091) * C92177 * C92102) *
              C1372 -
          ((C80568 * C11110 - C81051 * C10867 - C80568 * C11498 +
            C80417 * C11682 + C80567 * C1528 - C81050 * C1380 - C80567 * C1776 +
            C92362 * C1900 + C80566 * C1524 - C81049 * C1377 - C80566 * C1772 +
            C92361 * C1897) *
               C92177 * C92102 +
           (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
            C80417 * C11683 + C80567 * C1527 - C81050 * C1379 - C80567 * C1775 +
            C92362 * C1899 + C80566 * C1523 - C81049 * C1378 - C80566 * C1771 +
            C92361 * C1898) *
               C92177 * C92320) *
              C1373 +
          ((C80566 * C1527 - C81049 * C1379 - C80566 * C1775 + C92361 * C1899 +
            C80567 * C11109 - C81050 * C10868 - C80567 * C11497 +
            C92362 * C11683 + C80568 * C11111 - C81051 * C10869 -
            C80568 * C11499 + C80417 * C11684) *
               C92177 * C92320 +
           (C80566 * C1528 - C81049 * C1380 - C80566 * C1776 + C92361 * C1900 +
            C80567 * C11110 - C81050 * C10867 - C80567 * C11498 +
            C92362 * C11682 + C80568 * C11112 - C81051 * C10870 -
            C80568 * C11500 + C80417 * C11685) *
               C92177 * C92102) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
             C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
                C92361 +
            (C51645 + C51646) * C92362 + C81835 * C80417) *
               C92177 * C2664 -
           ((C81848 + C81849) * C80417 + (C51649 + C51650) * C92362 +
            (C51646 + C51645) * C92361) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C53835 + C53836) * C92361 + (C83511 + C83512) * C92362 +
            (C90121 * C10871 - C44796 * C10867 - C90121 * C10872 +
             C92320 * C10879 + C90114 * C12748 - C44798 * C12747 -
             C90114 * C12749 + C92102 * C12750) *
                C80417) *
               C92177 * C2665 -
           ((C83512 + C83511) * C80417 + (C53836 + C53835) * C92362 +
            (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
             C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
                C92361) *
               C92177 * C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C90121 +
             (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
             (C198 - C199) * C92102) *
                C92361 +
            ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
             C12880 * C90114 + C12881 * C92102) *
                C92362 +
            C81930 * C80417) *
               C2664 +
           (((C11010 - C11009) * C90121 + (C11012 - C11011) * C92320 +
             C12882 * C90114 + C12883 * C92102) *
                C92361 +
            ((C11014 - C11013) * C90121 + (C11016 - C11015) * C92320 +
             C12884 * C90114 + C12885 * C92102) *
                C92362 +
            ((C11019 - C11020) * C90121 + (C11021 - C11022) * C92320 +
             (C11023 - C11024) * C90114 + (C11025 - C11026) * C92102) *
                C80417) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C90121 + (C199 - C198) * C92320 +
             (C201 - C200) * C90114 + (C203 - C202) * C92102) *
                C92361 +
            (C12882 * C90121 + C12883 * C92320 + C23027 * C90114 +
             C23028 * C92102) *
                C92362 +
            (C12884 * C90121 + C12885 * C92320 + (C9504 - C9505) * C90114 +
             (C9506 - C9507) * C92102) *
                C80417) *
               C2664 +
           ((C12880 * C90121 + C12881 * C92320 + C19823 * C90114 +
             C19824 * C92102) *
                C92361 +
            (C11017 * C90121 + C11018 * C92320 + (C9505 - C9504) * C90114 +
             (C9507 - C9506) * C92102) *
                C92362 +
            ((C11024 - C11023) * C90121 + (C11026 - C11025) * C92320 +
             (C92177 * C12877 - C182 * C12747) * C90114 +
             (C92177 * C12878 - C182 * C12749) * C92102) *
                C80417) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C90121 +
            (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
             C80417 * C1535 - C80568 * C1392) *
                C92320 +
            (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
            (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
               C92177 * C2664 +
           ((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 - C92362 * C1527 +
             C80568 * C10868 - C80417 * C11109) *
                C90121 +
            (C80566 * C1390 - C92361 * C1531 + C80567 * C1392 - C92362 * C1535 +
             C80568 * C10874 - C80417 * C11113) *
                C92320 +
            (C83709 - C83710 + C83711 - C83712 + C83713 - C83714) * C90114 +
            (C83715 - C83716 + C83717 - C83718 + C83719 - C83720) * C92102) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C90121 +
            (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92320 +
            (C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C90114 +
            (C80588 - C80589 + C80590 - C80591 + C80592 - C80593) * C92102) *
               C92177 * C2664 +
           ((C83710 - C83709 + C83712 - C83711 + C83714 - C83713) * C90121 +
            (C83716 - C83715 + C83718 - C83717 + C83720 - C83719) * C92320 +
            (C92361 * C1525 - C80566 * C1376 + C92362 * C1529 - C80567 * C1381 +
             C80417 * C12983 - C80568 * C12747) *
                C90114 +
            (C92361 * C1533 - C80566 * C1386 + C92362 * C1537 - C80567 * C1396 +
             C80417 * C12984 - C80568 * C12749) *
                C92102) *
               C92177 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                 C182 +
             (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                 C92177) *
                C92361 +
            ((C51945 - C51946 + C51947 - C51948) * C182 +
             (C51949 - C51950 + C51951 - C51952) * C92177) *
                C92362 +
            C82095 * C80417) *
               C2664 +
           (((C51946 - C51945 + C51948 - C51947) * C182 +
             (C51950 - C51949 + C51952 - C51951) * C92177) *
                C92361 +
            ((C51953 - C51954 + C51955 - C51956) * C182 +
             (C51957 - C51958 + C51959 - C51960) * C92177) *
                C92362 +
            ((C82083 - C82084 + C82085 - C82086) * C182 +
             (C82087 - C82088 + C82089 - C82090) * C92177) *
                C80417) *
               C2665) *
              C92136 * C1971 +
          ((((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                 C182 +
             (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                 C92177) *
                C92361 +
            ((C54239 - C54240 + C54241 - C54242) * C182 +
             (C54243 - C54244 + C54245 - C54246) * C92177) *
                C92362 +
            ((C83819 - C83820 + C83821 - C83822) * C182 +
             (C83823 - C83824 + C83825 - C83826) * C92177) *
                C80417) *
               C2664 +
           (((C54240 - C54239 + C54242 - C54241) * C182 +
             (C54244 - C54243 + C54246 - C54245) * C92177) *
                C92361 +
            ((C83820 - C83819 + C83822 - C83821) * C182 +
             (C83824 - C83823 + C83826 - C83825) * C92177) *
                C92362 +
            ((C92320 * C10871 - C90121 * C10867 + C92102 * C12748 -
              C90114 * C12747) *
                 C182 +
             (C92320 * C11196 - C90121 * C11192 + C92102 * C13096 -
              C90114 * C13095) *
                 C92177) *
                C80417) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C92320 +
             C442 * C92102) *
                C92361 +
            (C82170 + C82171) * C92362 + C82176 * C80417) *
               C2664 -
           ((C82174 + C82175) * C80417 + (C82173 + C82172) * C92362 +
            (C82171 + C82170) * C92361) *
               C2665) *
              C92136 * C1971 +
          (((C83925 + C83926) * C92361 + (C83927 + C83928) * C92362 +
            (C11339 * C92320 +
             (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
                 C92102) *
                C80417) *
               C2665 -
           ((C83928 + C83927) * C80417 + (C83926 + C83925) * C92362 +
            (C443 * C92102 + C442 * C92320) * C92361) *
               C2664) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
              C80417 * C1527 - C80568 * C1379) *
                 C182 +
             (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
              C80417 * C1717 - C80568 * C1593) *
                 C92177) *
                C92320 +
            ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
             (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
                C92102) *
               C2664 +
           (((C80566 * C1378 - C92361 * C1523 + C80567 * C1379 -
              C92362 * C1527 + C80568 * C10868 - C80417 * C11109) *
                 C182 +
             (C80566 * C1589 - C92361 * C1713 + C80567 * C1593 -
              C92362 * C1717 + C80568 * C11191 - C80417 * C11419) *
                 C92177) *
                C92320 +
            ((C83709 - C83710 + C83711 - C83712 + C83713 - C83714) * C182 +
             (C84027 - C84028 + C84029 - C84030 + C84031 - C84032) * C92177) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C182 +
             (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92177) *
                C92320 +
            ((C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C182 +
             (C80822 - C80823 + C80824 - C80825 + C80826 - C80827) * C92177) *
                C92102) *
               C2664 +
           (((C83710 - C83709 + C83712 - C83711 + C83714 - C83713) * C182 +
             (C84028 - C84027 + C84030 - C84029 + C84032 - C84031) * C92177) *
                C92320 +
            ((C92361 * C1525 - C80566 * C1376 + C92362 * C1529 -
              C80567 * C1381 + C80417 * C12983 - C80568 * C12747) *
                 C182 +
             (C92361 * C1715 - C80566 * C1591 + C92362 * C1719 -
              C80567 * C1595 + C80417 * C13314 - C80568 * C13095) *
                 C92177) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C80566 +
            (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
                C92361 +
            (C51945 - C51946 + C51947 - C51948) * C80567 +
            (C52263 - C52264 + C52265 - C52266) * C92362 + C82091 * C80568 +
            C82331 * C80417) *
               C92177 * C2664 +
           ((C51946 - C51945 + C51948 - C51947) * C80566 +
            (C52264 - C52263 + C52266 - C52265) * C92361 +
            (C51953 - C51954 + C51955 - C51956) * C80567 +
            (C52267 - C52268 + C52269 - C52270) * C92362 +
            (C82083 - C82084 + C82085 - C82086) * C80568 +
            (C82327 - C82328 + C82329 - C82330) * C80417) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C80566 +
            (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
                C92361 +
            (C54239 - C54240 + C54241 - C54242) * C80567 +
            (C54639 - C54640 + C54641 - C54642) * C92362 +
            (C83819 - C83820 + C83821 - C83822) * C80568 +
            (C84131 - C84132 + C84133 - C84134) * C80417) *
               C92177 * C2664 +
           ((C54240 - C54239 + C54242 - C54241) * C80566 +
            (C54640 - C54639 + C54642 - C54641) * C92361 +
            (C83820 - C83819 + C83822 - C83821) * C80567 +
            (C84132 - C84131 + C84134 - C84133) * C92362 +
            (C92320 * C10871 - C90121 * C10867 + C92102 * C12748 -
             C90114 * C12747) *
                C80568 +
            (C92320 * C11502 - C90121 * C11498 + C92102 * C13420 -
             C90114 * C13419) *
                C80417) *
               C92177 * C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C80566 +
             (C92177 * C629 - C182 * C567) * C92361 +
             (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
             C11027 * C80568 + C11608 * C80417) *
                C92320 +
            ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
             C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
                C92102) *
               C2664 +
           (((C11010 - C11009) * C80566 + (C11600 - C11599) * C92361 +
             (C11014 - C11013) * C80567 + (C11602 - C11601) * C92362 +
             (C11019 - C11020) * C80568 + (C11604 - C11605) * C80417) *
                C92320 +
            (C12882 * C80566 + C13530 * C92361 + C12884 * C80567 +
             C13531 * C92362 + (C11023 - C11024) * C80568 +
             (C11606 - C11607) * C80417) *
                C92102) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C80566 + (C637 - C636) * C92361 + C12882 * C80567 +
             C13530 * C92362 + C12884 * C80568 + C13531 * C80417) *
                C92320 +
            ((C201 - C200) * C80566 + (C640 - C639) * C92361 + C23027 * C80567 +
             C23662 * C92362 + (C9504 - C9505) * C80568 +
             (C10007 - C10008) * C80417) *
                C92102) *
               C2664 +
           ((C12880 * C80566 + C13529 * C92361 + C11017 * C80567 +
             C11603 * C92362 + (C11024 - C11023) * C80568 +
             (C11607 - C11606) * C80417) *
                C92320 +
            (C19823 * C80566 + C20322 * C92361 + (C9505 - C9504) * C80567 +
             (C10008 - C10007) * C92362 +
             (C92177 * C12877 - C182 * C12747) * C80568 +
             (C92177 * C13527 - C182 * C13419) * C80417) *
                C92102) *
               C2665) *
              C92136 * C1972)) /
        (p * q * std::sqrt(p + q));
    d2eezz[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C80566 * C266 - C81049 * C108 - C80566 * C567 +
                       C92361 * C702 + C80567 * C1523 - C81050 * C1378 -
                       C80567 * C1771 + C92362 * C1898 + C80568 * C1527 -
                       C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
                          C92177 * C92320 +
                      (C81089 + C81090 + C81091) * C92177 * C92102) *
                         C2664 -
                     ((C84349 + C84350 + C84351) * C92177 * C92102 +
                      (C80568 * C11109 - C81051 * C10868 - C80568 * C11497 +
                       C80417 * C11683 + C80567 * C1527 - C81050 * C1379 -
                       C80567 * C1775 + C92362 * C1899 + C80566 * C1523 -
                       C81049 * C1378 - C80566 * C1771 + C92361 * C1898) *
                          C92177 * C92320) *
                         C2665) *
                        C92136 * C1971 +
                    (((C84351 + C84350 + C84349) * C92177 * C92320 +
                      (C80566 * C1525 - C81049 * C1376 - C80566 * C1773 +
                       C92361 * C1896 + C80567 * C1529 - C81050 * C1381 -
                       C80567 * C1777 + C92362 * C1901 + C80568 * C12983 -
                       C81051 * C12747 - C80568 * C13419 + C80417 * C13629) *
                          C92177 * C92102) *
                         C2665 -
                     ((C81092 + C81093 + C81094) * C92177 * C92102 +
                      (C81091 + C81090 + C81089) * C92177 * C92320) *
                         C2664) *
                        C92136 * C1972)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92361 +
           (C51645 + C51646) * C92362 + (C51650 + C51649) * C80417) *
              C92177 * C92150 * C92136 * C97 -
          ((C90114 * C1395 - C44798 * C1381 - C90114 * C1396 + C92102 * C1405 +
            C90121 * C1393 - C44796 * C1380 - C90121 * C1394 + C92320 * C1404) *
               C80417 +
           (C53836 + C53835) * C92362 +
           (C90114 * C118 - C44798 * C110 - C90114 * C119 + C92102 * C128 +
            C90121 * C116 - C44796 * C109 - C90121 * C117 + C92320 * C127) *
               C92361) *
              C92177 * C92150 * C92136 * C98 +
          ((C90121 * C118 - C44796 * C110 - C90121 * C119 + C92320 * C128 +
            C90114 * C120 - C44798 * C111 - C90114 * C121 + C92102 * C129) *
               C92361 +
           (C90121 * C1385 - C44796 * C1376 - C90121 * C1386 + C92320 * C1400 +
            C90114 * C1383 - C44798 * C1375 - C90114 * C1384 + C92102 * C1399) *
               C92362 +
           (C90121 * C1395 - C44796 * C1381 - C90121 * C1396 + C92320 * C1405 +
            C90114 * C1397 - C44798 * C1382 - C90114 * C1398 + C92102 * C1406) *
               C80417) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C90121 * C114 - C44796 * C108 - C90121 * C115 + C92320 * C126 +
            C90114 * C116 - C44798 * C109 - C90114 * C117 + C92102 * C127) *
               C92361 +
           (C51645 + C51646) * C92362 + (C51650 + C51649) * C80417) *
              C92177 * C92150 * C790 -
          ((C51647 + C51648) * C80417 + C55040 * C92362 +
           (C45593 + C45592) * C92361) *
              C92177 * C92150 * C791 +
          (C45598 * C92361 + (C48936 + C48935) * C92362 +
           (C90121 * C5715 - C44796 * C5705 - C90121 * C5716 + C92320 * C5723 +
            C90114 * C5717 - C44798 * C5706 - C90114 * C5718 + C92102 * C5724) *
               C80417) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C90121 +
            (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
            (C198 - C199) * C92102) *
               C92361 +
           ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
            C12880 * C90114 + C12881 * C92102) *
               C92362 +
           (C11027 * C90121 + C11028 * C92320 + C11017 * C90114 +
            C11018 * C92102) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C90121 + (C199 - C198) * C92320 +
            (C201 - C200) * C90114 + (C203 - C202) * C92102) *
               C92361 +
           (C12882 * C90121 + C12883 * C92320 + C23027 * C90114 +
            C23028 * C92102) *
               C92362 +
           (C12884 * C90121 + C12885 * C92320 + (C9504 - C9505) * C90114 +
            (C9506 - C9507) * C92102) *
               C80417) *
              C92150 * C92136 * C98 +
          ((C212 * C90121 + C213 * C92320 + C214 * C90114 + C215 * C92102) *
               C92361 +
           (C19823 * C90121 + C19824 * C92320 + (C2748 - C2747) * C90114 +
            (C2750 - C2749) * C92102) *
               C92362 +
           ((C9505 - C9504) * C90121 + (C9507 - C9506) * C92320 +
            (C92177 * C1464 - C182 * C1382) * C90114 +
            (C92177 * C1472 - C182 * C1398) * C92102) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C90121 +
            (C92177 * C189 - C182 * C115) * C92320 + (C196 - C197) * C90114 +
            (C198 - C199) * C92102) *
               C92361 +
           ((C11009 - C11010) * C90121 + (C11011 - C11012) * C92320 +
            C12880 * C90114 + C12881 * C92102) *
               C92362 +
           (C11027 * C90121 + C11028 * C92320 + C11017 * C90114 +
            C11018 * C92102) *
               C80417) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C90121 +
            (C182 * C809 - C92177 * C884) * C92320 + (C2046 - C2047) * C90114 +
            (C2048 - C2049) * C92102) *
               C92361 +
           ((C13874 - C13875) * C90121 + (C13876 - C13877) * C92320 +
            (C11889 - C11890) * C90114 + (C11891 - C11892) * C92102) *
               C92362 +
           ((C13878 - C13879) * C90121 + (C13880 - C13881) * C92320 +
            (C11893 - C11894) * C90114 + (C11895 - C11896) * C92102) *
               C80417) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C90121 +
            (C92177 * C888 - C182 * C811) * C92320 +
            (C92177 * C881 - C182 * C799) * C90114 +
            (C92177 * C889 - C182 * C813) * C92102) *
               C92361 +
           ((C92177 * C5799 - C182 * C5702) * C90121 +
            (C92177 * C5805 - C182 * C5710) * C92320 +
            (C92177 * C5800 - C182 * C5701) * C90114 +
            (C92177 * C5806 - C182 * C5708) * C92102) *
               C92362 +
           ((C92177 * C5802 - C182 * C5705) * C90121 +
            (C92177 * C5808 - C182 * C5716) * C92320 +
            (C92177 * C5804 - C182 * C5706) * C90114 +
            (C92177 * C5810 - C182 * C5718) * C92102) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C90121 +
           (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
            C80417 * C1535 - C80568 * C1392) *
               C92320 +
           (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
           (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
              C92177 * C92150 * C92136 * C97 +
          ((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C90121 +
           (C80577 - C80576 + C80579 - C80578 + C80581 - C80580) * C92320 +
           (C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C90114 +
           (C80588 - C80589 + C80590 - C80591 + C80592 - C80593) * C92102) *
              C92177 * C92150 * C92136 * C98 +
          ((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C90121 +
           (C80589 - C80588 + C80591 - C80590 + C80593 - C80592) * C92320 +
           (C92361 * C269 - C80566 * C111 + C92362 * C1526 - C80567 * C1375 +
            C80417 * C1530 - C80568 * C1382) *
               C90114 +
           (C92361 * C275 - C80566 * C121 + C92362 * C1534 - C80567 * C1384 +
            C80417 * C1538 - C80568 * C1398) *
               C92102) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
            C80417 * C1527 - C80568 * C1379) *
               C90121 +
           (C92361 * C272 - C80566 * C115 + C92362 * C1531 - C80567 * C1390 +
            C80417 * C1535 - C80568 * C1392) *
               C92320 +
           (C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C90114 +
           (C80576 - C80577 + C80578 - C80579 + C80580 - C80581) * C92102) *
              C92177 * C92150 * C790 +
          ((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
            C80568 * C5703 - C80417 * C5887) *
               C90121 +
           (C80566 * C809 - C92361 * C950 + C80567 * C3362 - C92362 * C3517 +
            C80568 * C5712 - C80417 * C5893) *
               C92320 +
           (C80566 * C796 - C92361 * C943 + C80567 * C3358 - C92362 * C3514 +
            C80568 * C5704 - C80417 * C5888) *
               C90114 +
           (C80566 * C807 - C92361 * C951 + C80567 * C3364 - C92362 * C3518 +
            C80568 * C5714 - C80417 * C5894) *
               C92102) *
              C92177 * C92150 * C791 +
          ((C92361 * C946 - C80566 * C798 + C92362 * C5885 - C80567 * C5702 +
            C80417 * C5889 - C80568 * C5705) *
               C90121 +
           (C92361 * C954 - C80566 * C811 + C92362 * C5891 - C80567 * C5710 +
            C80417 * C5895 - C80568 * C5716) *
               C92320 +
           (C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
            C80417 * C5890 - C80568 * C5706) *
               C90114 +
           (C92361 * C955 - C80566 * C813 + C92362 * C5892 - C80567 * C5708 +
            C80417 * C5896 - C80568 * C5718) *
               C92102) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C182 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92177) *
               C92361 +
           ((C51945 - C51946 + C51947 - C51948) * C182 +
            (C51949 - C51950 + C51951 - C51952) * C92177) *
               C92362 +
           ((C51954 - C51953 + C51956 - C51955) * C182 +
            (C51958 - C51957 + C51960 - C51959) * C92177) *
               C80417) *
              C92150 * C92136 * C97 +
          (((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
                C182 +
            (C90121 * C349 - C92320 * C355 + C90114 * C350 - C92102 * C356) *
                C92177) *
               C92361 +
           ((C54239 - C54240 + C54241 - C54242) * C182 +
            (C54243 - C54244 + C54245 - C54246) * C92177) *
               C92362 +
           ((C90121 * C1380 - C92320 * C1393 + C90114 * C1381 -
             C92102 * C1395) *
                C182 +
            (C90121 * C1594 - C92320 * C1602 + C90114 * C1595 -
             C92102 * C1603) *
                C92177) *
               C80417) *
              C92150 * C92136 * C98 +
          (((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
                C182 +
            (C92320 * C356 - C90121 * C350 + C92102 * C357 - C90114 * C351) *
                C92177) *
               C92361 +
           ((C92320 * C1385 - C90121 * C1376 + C92102 * C1383 -
             C90114 * C1375) *
                C182 +
            (C92320 * C1599 - C90121 * C1591 + C92102 * C1600 -
             C90114 * C1592) *
                C92177) *
               C92362 +
           ((C92320 * C1395 - C90121 * C1381 + C92102 * C1397 -
             C90114 * C1382) *
                C182 +
            (C92320 * C1603 - C90121 * C1595 + C92102 * C1604 -
             C90114 * C1596) *
                C92177) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
                C182 +
            (C92320 * C354 - C90121 * C348 + C92102 * C355 - C90114 * C349) *
                C92177) *
               C92361 +
           ((C51945 - C51946 + C51947 - C51948) * C182 +
            (C51949 - C51950 + C51951 - C51952) * C92177) *
               C92362 +
           ((C51954 - C51953 + C51956 - C51955) * C182 +
            (C51958 - C51957 + C51960 - C51959) * C92177) *
               C80417) *
              C92150 * C790 +
          (((C45830 - C45829 + C45832 - C45831) * C182 +
            (C45834 - C45833 + C45836 - C45835) * C92177) *
               C92361 +
           (C55441 * C182 + C55442 * C92177) * C92362 +
           ((C51961 - C51962 + C51963 - C51964) * C182 +
            (C51965 - C51966 + C51967 - C51968) * C92177) *
               C80417) *
              C92150 * C791 +
          ((C45857 * C182 + C45858 * C92177) * C92361 +
           ((C49242 - C49241 + C49244 - C49243) * C182 +
            (C49246 - C49245 + C49248 - C49247) * C92177) *
               C92362 +
           ((C92320 * C5715 - C90121 * C5705 + C92102 * C5717 -
             C90114 * C5706) *
                C182 +
            (C92320 * C5981 - C90121 * C5975 + C92102 * C5982 -
             C90114 * C5976) *
                C92177) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92320 +
            C442 * C92102) *
               C92361 +
           (C11337 * C92320 + C2986 * C92102) * C92362 +
           (C11338 * C92320 + C9769 * C92102) * C80417) *
              C92150 * C92136 * C97 -
          ((C9770 * C92102 + C9769 * C92320) * C80417 +
           (C2985 * C92102 + C2986 * C92320) * C92362 +
           (C443 * C92102 + C442 * C92320) * C92361) *
              C92150 * C92136 * C98 +
          ((C443 * C92320 + C444 * C92102) * C92361 +
           (C2985 * C92320 + C2984 * C92102) * C92362 +
           (C9770 * C92320 +
            (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                C92102) *
               C80417) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C92320 +
            C442 * C92102) *
               C92361 +
           (C11337 * C92320 + C2986 * C92102) * C92362 +
           (C11338 * C92320 + C9769 * C92102) * C80417) *
              C92150 * C790 -
          ((C12220 * C92102 + C14209 * C92320) * C80417 +
           (C12221 * C92102 + C14208 * C92320) * C92362 +
           (C2293 * C92102 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C92320) *
               C92361) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C92320 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C92102) *
               C92361 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C92320 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C92102) *
               C92362 +
           ((C182 * C5802 - C410 * C5705 - C182 * C5975 + C92177 * C6060) *
                C92320 +
            (C182 * C5804 - C410 * C5706 - C182 * C5976 + C92177 * C6062) *
                C92102) *
               C80417) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C182 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92177) *
               C92320 +
           ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
            (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C80571 - C80570 + C80573 - C80572 + C80575 - C80574) * C182 +
            (C80817 - C80816 + C80819 - C80818 + C80821 - C80820) * C92177) *
               C92320 +
           ((C80582 - C80583 + C80584 - C80585 + C80586 - C80587) * C182 +
            (C80822 - C80823 + C80824 - C80825 + C80826 - C80827) * C92177) *
               C92102) *
              C92150 * C92136 * C98 +
          (((C80583 - C80582 + C80585 - C80584 + C80587 - C80586) * C182 +
            (C80823 - C80822 + C80825 - C80824 + C80827 - C80826) * C92177) *
               C92320 +
           ((C92361 * C269 - C80566 * C111 + C92362 * C1526 - C80567 * C1375 +
             C80417 * C1530 - C80568 * C1382) *
                C182 +
            (C92361 * C498 - C80566 * C351 + C92362 * C1716 - C80567 * C1592 +
             C80417 * C1720 - C80568 * C1596) *
                C92177) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92361 * C266 - C80566 * C108 + C92362 * C1523 - C80567 * C1378 +
             C80417 * C1527 - C80568 * C1379) *
                C182 +
            (C92361 * C495 - C80566 * C348 + C92362 * C1713 - C80567 * C1589 +
             C80417 * C1717 - C80568 * C1593) *
                C92177) *
               C92320 +
           ((C80570 - C80571 + C80572 - C80573 + C80574 - C80575) * C182 +
            (C80816 - C80817 + C80818 - C80819 + C80820 - C80821) * C92177) *
               C92102) *
              C92150 * C790 +
          (((C80566 * C797 - C92361 * C942 + C80567 * C3357 - C92362 * C3513 +
             C80568 * C5703 - C80417 * C5887) *
                C182 +
            (C80566 * C1008 - C92361 * C1132 + C80567 * C3587 - C92362 * C3731 +
             C80568 * C5973 - C80417 * C6139) *
                C92177) *
               C92320 +
           ((C80566 * C796 - C92361 * C943 + C80567 * C3358 - C92362 * C3514 +
             C80568 * C5704 - C80417 * C5888) *
                C182 +
            (C80566 * C1009 - C92361 * C1133 + C80567 * C3588 - C92362 * C3732 +
             C80568 * C5974 - C80417 * C6141) *
                C92177) *
               C92102) *
              C92150 * C791 +
          (((C92361 * C946 - C80566 * C798 + C92362 * C5885 - C80567 * C5702 +
             C80417 * C5889 - C80568 * C5705) *
                C182 +
            (C92361 * C1136 - C80566 * C1012 + C92362 * C6137 - C80567 * C5971 +
             C80417 * C6140 - C80568 * C5975) *
                C92177) *
               C92320 +
           ((C92361 * C947 - C80566 * C799 + C92362 * C5886 - C80567 * C5701 +
             C80417 * C5890 - C80568 * C5706) *
                C182 +
            (C92361 * C1137 - C80566 * C1013 + C92362 * C6138 - C80567 * C5972 +
             C80417 * C6142 - C80568 * C5976) *
                C92177) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C80566 +
           (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
               C92361 +
           (C51945 - C51946 + C51947 - C51948) * C80567 +
           (C52263 - C52264 + C52265 - C52266) * C92362 +
           (C51954 - C51953 + C51956 - C51955) * C80568 +
           (C52268 - C52267 + C52270 - C52269) * C80417) *
              C92177 * C92150 * C92136 * C97 +
          ((C90121 * C109 - C92320 * C116 + C90114 * C110 - C92102 * C118) *
               C80566 +
           (C90121 * C568 - C92320 * C574 + C90114 * C569 - C92102 * C575) *
               C92361 +
           (C54239 - C54240 + C54241 - C54242) * C80567 +
           (C54639 - C54640 + C54641 - C54642) * C92362 +
           (C90121 * C1380 - C92320 * C1393 + C90114 * C1381 - C92102 * C1395) *
               C80568 +
           (C90121 * C1776 - C92320 * C1784 + C90114 * C1777 - C92102 * C1785) *
               C80417) *
              C92177 * C92150 * C92136 * C98 +
          ((C92320 * C118 - C90121 * C110 + C92102 * C120 - C90114 * C111) *
               C80566 +
           (C92320 * C575 - C90121 * C569 + C92102 * C576 - C90114 * C570) *
               C92361 +
           (C92320 * C1385 - C90121 * C1376 + C92102 * C1383 - C90114 * C1375) *
               C80567 +
           (C92320 * C1781 - C90121 * C1773 + C92102 * C1782 - C90114 * C1774) *
               C92362 +
           (C92320 * C1395 - C90121 * C1381 + C92102 * C1397 - C90114 * C1382) *
               C80568 +
           (C92320 * C1785 - C90121 * C1777 + C92102 * C1786 - C90114 * C1778) *
               C80417) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C92320 * C114 - C90121 * C108 + C92102 * C116 - C90114 * C109) *
               C80566 +
           (C92320 * C573 - C90121 * C567 + C92102 * C574 - C90114 * C568) *
               C92361 +
           (C51945 - C51946 + C51947 - C51948) * C80567 +
           (C52263 - C52264 + C52265 - C52266) * C92362 +
           (C51954 - C51953 + C51956 - C51955) * C80568 +
           (C52268 - C52267 + C52270 - C52269) * C80417) *
              C92177 * C92150 * C790 +
          ((C45830 - C45829 + C45832 - C45831) * C80566 +
           (C46082 - C46081 + C46084 - C46083) * C92361 + C55441 * C80567 +
           C55838 * C92362 + (C51961 - C51962 + C51963 - C51964) * C80568 +
           (C52271 - C52272 + C52273 - C52274) * C80417) *
              C92177 * C92150 * C791 +
          (C45857 * C80566 + C46096 * C92361 +
           (C49242 - C49241 + C49244 - C49243) * C80567 +
           (C49548 - C49547 + C49550 - C49549) * C92362 +
           (C92320 * C5715 - C90121 * C5705 + C92102 * C5717 - C90114 * C5706) *
               C80568 +
           (C92320 * C6227 - C90121 * C6221 + C92102 * C6228 - C90114 * C6222) *
               C80417) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C80566 +
            (C92177 * C629 - C182 * C567) * C92361 +
            (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
            C11027 * C80568 + C11608 * C80417) *
               C92320 +
           ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
            C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
               C92102) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C80566 + (C637 - C636) * C92361 + C12882 * C80567 +
            C13530 * C92362 + C12884 * C80568 + C13531 * C80417) *
               C92320 +
           ((C201 - C200) * C80566 + (C640 - C639) * C92361 + C23027 * C80567 +
            C23662 * C92362 + (C9504 - C9505) * C80568 +
            (C10007 - C10008) * C80417) *
               C92102) *
              C92150 * C92136 * C98 +
          ((C212 * C80566 + C646 * C92361 + C19823 * C80567 + C20322 * C92362 +
            (C9505 - C9504) * C80568 + (C10008 - C10007) * C80417) *
               C92320 +
           (C214 * C80566 + C647 * C92361 + (C2748 - C2747) * C80567 +
            (C3200 - C3199) * C92362 +
            (C92177 * C1464 - C182 * C1382) * C80568 +
            (C92177 * C1844 - C182 * C1778) * C80417) *
               C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C80566 +
            (C92177 * C629 - C182 * C567) * C92361 +
            (C11009 - C11010) * C80567 + (C11599 - C11600) * C92362 +
            C11027 * C80568 + C11608 * C80417) *
               C92320 +
           ((C196 - C197) * C80566 + (C636 - C637) * C92361 + C12880 * C80567 +
            C13529 * C92362 + C11017 * C80568 + C11603 * C80417) *
               C92102) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C80566 +
            (C182 * C1190 - C92177 * C1256) * C92361 +
            (C13874 - C13875) * C80567 + (C14518 - C14519) * C92362 +
            (C13878 - C13879) * C80568 + (C14520 - C14521) * C80417) *
               C92320 +
           ((C2046 - C2047) * C80566 + (C2502 - C2503) * C92361 +
            (C11889 - C11890) * C80567 + (C12526 - C12527) * C92362 +
            (C11893 - C11894) * C80568 + (C12528 - C12529) * C80417) *
               C92102) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C80566 +
            (C92177 * C1260 - C182 * C1194) * C92361 +
            (C92177 * C5799 - C182 * C5702) * C80567 +
            (C92177 * C6303 - C182 * C6217) * C92362 +
            (C92177 * C5802 - C182 * C5705) * C80568 +
            (C92177 * C6306 - C182 * C6221) * C80417) *
               C92320 +
           ((C92177 * C881 - C182 * C799) * C80566 +
            (C92177 * C1261 - C182 * C1195) * C92361 +
            (C92177 * C5800 - C182 * C5701) * C80567 +
            (C92177 * C6304 - C182 * C6218) * C92362 +
            (C92177 * C5804 - C182 * C5706) * C80568 +
            (C92177 * C6308 - C182 * C6222) * C80417) *
               C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92177 * C92320 +
           (C81089 + C81090 + C81091) * C92177 * C92102) *
              C92150 * C92136 * C97 -
          ((C81092 + C81093 + C81094) * C92177 * C92102 +
           (C81091 + C81090 + C81089) * C92177 * C92320) *
              C92150 * C92136 * C98 +
          ((C81094 + C81093 + C81092) * C92177 * C92320 +
           (C80566 * C269 - C81049 * C111 - C80566 * C570 + C92361 * C705 +
            C80567 * C1526 - C81050 * C1375 - C80567 * C1774 + C92362 * C1895 +
            C80568 * C1530 - C81051 * C1382 - C80568 * C1778 + C80417 * C1902) *
               C92177 * C92102) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C80566 * C266 - C81049 * C108 - C80566 * C567 + C92361 * C702 +
            C80567 * C1523 - C81050 * C1378 - C80567 * C1771 + C92362 * C1898 +
            C80568 * C1527 - C81051 * C1379 - C80568 * C1775 + C80417 * C1899) *
               C92177 * C92320 +
           (C81089 + C81090 + C81091) * C92177 * C92102) *
              C92150 * C790 -
          ((C80568 * C5888 - C81051 * C5704 - C80568 * C6220 + C80417 * C6387 +
            C80567 * C3514 - C81050 * C3358 - C80567 * C3802 + C92362 * C3946 +
            C80566 * C943 - C81049 * C796 - C80566 * C1191 + C92361 * C1316) *
               C92177 * C92102 +
           (C80568 * C5887 - C81051 * C5703 - C80568 * C6219 + C80417 * C6385 +
            C80567 * C3513 - C81050 * C3357 - C80567 * C3801 + C92362 * C3945 +
            C80566 * C942 - C81049 * C797 - C80566 * C1190 + C92361 * C1317) *
               C92177 * C92320) *
              C92150 * C791 +
          ((C80566 * C946 - C81049 * C798 - C80566 * C1194 + C92361 * C1318 +
            C80567 * C5885 - C81050 * C5702 - C80567 * C6217 + C92362 * C6384 +
            C80568 * C5889 - C81051 * C5705 - C80568 * C6221 + C80417 * C6386) *
               C92177 * C92320 +
           (C80566 * C947 - C81049 * C799 - C80566 * C1195 + C92361 * C1319 +
            C80567 * C5886 - C81050 * C5701 - C80567 * C6218 + C92362 * C6383 +
            C80568 * C5890 - C81051 * C5706 - C80568 * C6222 + C80417 * C6388) *
               C92177 * C92102) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C92150 * C1969 -
           ((C35403 + C35404 + C35405) * C92252 +
            (C32074 + C32073 + C32072) * C61039) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C33488 + C33489 + C33490) * C61039 +
            (C31254 * C3363 - C31255 * C3358 - C31254 * C3364 + C31249 * C3370 +
             C31256 * C3365 - C31257 * C3359 - C31256 * C3366 + C31250 * C3371 +
             C31258 * C3367 - C31259 * C3360 - C31258 * C3368 +
             C31251 * C3372) *
                C92252) *
               C92177 * C92150 * C1970 -
           ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 + C31251 * C1399 +
             C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
             C31254 * C1387 - C31255 * C1377 - C31254 * C1388 +
             C31249 * C1401) *
                C92252 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C61039) *
               C92177 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C92150 * C1969 -
           ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
            (C66689 + C66688) * C4025) *
               C92150 * C1970) *
              C1971 +
          (((C68227 + C68228) * C4025 + (C68229 + C68230) * C4026 +
            (C37781 * C61039 + (C36262 * C8458 - C36263 * C8455 -
                                C36262 * C8459 + C92097 * C8461) *
                                   C92252) *
                C4027) *
               C92150 * C1970 -
           ((C68230 + C68229) * C4027 + (C68228 + C68227) * C4026 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C61039) *
                C4025) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C31254 +
             (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
             (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
             (C2052 - C2053) * C31251) *
                C61039 +
            ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
             (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
             (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C31254 + (C199 - C198) * C31249 +
             (C201 - C200) * C31256 + (C203 - C202) * C31250 +
             (C205 - C204) * C31258 + (C207 - C206) * C31251) *
                C61039 +
            (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
             C23028 * C31250 + (C2747 - C2748) * C31258 +
             (C2749 - C2750) * C31251) *
                C92252) *
               C92150 * C1969 +
           (((C2047 - C2046) * C31254 + (C2049 - C2048) * C31249 +
             (C2051 - C2050) * C31256 + (C2053 - C2052) * C31250 +
             (C2055 - C2054) * C31258 + (C2057 - C2056) * C31251) *
                C61039 +
            ((C11890 - C11889) * C31254 + (C11892 - C11891) * C31249 +
             (C22060 - C22059) * C31256 + (C22062 - C22061) * C31250 +
             (C92177 * C3442 - C182 * C3360) * C31258 +
             (C92177 * C3446 - C182 * C3368) * C31251) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C36262 +
             (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
              C4108 * C4821 - C4027 * C4952) *
                 C92097) *
                C61039 +
            ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
              C4108 * C8454 - C4027 * C8588) *
                 C36262 +
             (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
              C4108 * C8457 - C4027 * C8590) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
             (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
                C61039 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
             (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
                C92252) *
               C92150 * C1969 +
           (((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C36262 +
             (C6627 - C6626 + C6629 - C6628 + C6631 - C6630) * C92097) *
                C61039 +
            ((C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
              C4027 * C8589 - C4108 * C8455) *
                 C36262 +
             (C4025 * C3444 - C4106 * C3364 + C4026 * C5806 - C4107 * C5708 +
              C4027 * C8591 - C4108 * C8459) *
                 C92097) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C92150 * C1969 +
           ((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C31254 +
            (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
                C31249 +
            (C63447 - C63448 + C63449 - C63450) * C31256 +
            (C63451 - C63452 + C63453 - C63454) * C31250 +
            (C63455 - C63456 + C63457 - C63458) * C31258 +
            (C63459 - C63460 + C63461 - C63462) * C31251) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C31254 +
            (C61197 - C61196 + C61199 - C61198) * C31249 +
            (C61201 - C61200 + C61203 - C61202) * C31256 +
            (C61205 - C61204 + C61207 - C61206) * C31250 +
            (C61208 - C61209 + C61210 - C61211) * C31258 +
            (C61212 - C61213 + C61214 - C61215) * C31251) *
               C92177 * C92150 * C1969 +
           ((C63448 - C63447 + C63450 - C63449) * C31254 +
            (C63452 - C63451 + C63454 - C63453) * C31249 +
            (C63456 - C63455 + C63458 - C63457) * C31256 +
            (C63460 - C63459 + C63462 - C63461) * C31250 +
            (C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                C31258 +
            (C61039 * C953 - C61189 * C803 + C92252 * C3520 - C61190 * C3368) *
                C31251) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C92150 * C1969 +
           (((C66844 - C66843 + C66846 - C66845) * C36262 +
             (C66848 - C66847 + C66850 - C66849) * C92097) *
                C4025 +
            ((C66852 - C66851 + C66854 - C66853) * C36262 +
             (C66856 - C66855 + C66858 - C66857) * C92097) *
                C4026 +
            ((C66859 - C66860 + C66861 - C66862) * C36262 +
             (C66863 - C66864 + C66865 - C66866) * C92097) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C36262 +
             (C61197 - C61196 + C61199 - C61198) * C92097) *
                C4025 +
            ((C63447 - C63448 + C63449 - C63450) * C36262 +
             (C63451 - C63452 + C63453 - C63454) * C92097) *
                C4026 +
            ((C68427 - C68428 + C68429 - C68430) * C36262 +
             (C68431 - C68432 + C68433 - C68434) * C92097) *
                C4027) *
               C92150 * C1969 +
           (((C63448 - C63447 + C63450 - C63449) * C36262 +
             (C63452 - C63451 + C63454 - C63453) * C92097) *
                C4025 +
            ((C68428 - C68427 + C68430 - C68429) * C36262 +
             (C68432 - C68431 + C68434 - C68433) * C92097) *
                C4026 +
            ((C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
              C61190 * C8455) *
                 C36262 +
             (C61039 * C5035 - C61189 * C4819 + C92252 * C8693 -
              C61190 * C8459) *
                 C92097) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C92150 * C1969 +
           (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
             (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
                C61039 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
             (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C182 +
             (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
              C31258 * C351 - C31251 * C357) *
                 C92177) *
                C61039 +
            ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 -
              C31250 * C1385 + C31258 * C1375 - C31251 * C1383) *
                 C182 +
             (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 -
              C31250 * C1599 + C31258 * C1592 - C31251 * C1600) *
                 C92177) *
                C92252) *
               C92150 * C1969 +
           (((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C182 +
             (C33808 - C33807 + C33810 - C33809 + C33812 - C33811) * C92177) *
                C61039 +
            ((C31249 * C3363 - C31254 * C3358 + C31250 * C3365 -
              C31256 * C3359 + C31251 * C3367 - C31258 * C3360) *
                 C182 +
             (C31249 * C3592 - C31254 * C3588 + C31250 * C3593 -
              C31256 * C3589 + C31251 * C3594 - C31258 * C3590) *
                 C92177) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C92150 * C1969 +
           (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
             (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
             (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
                C61039 +
            (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
             (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
                C92252) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C4106 +
             (C36262 * C349 - C92097 * C355) * C4025 +
             (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
             (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
                C61039 +
            ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
             (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
             (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
                C92252) *
               C92150 * C1969 +
           (((C37984 - C37983) * C4106 + (C37986 - C37985) * C4025 +
             (C37988 - C37987) * C4107 + (C37990 - C37989) * C4026 +
             (C37992 - C37991) * C4108 + (C37994 - C37993) * C4027) *
                C61039 +
            ((C42281 - C42280) * C4106 + (C42283 - C42282) * C4025 +
             (C58635 - C58634) * C4107 + (C58637 - C58636) * C4026 +
             (C92097 * C8458 - C36262 * C8455) * C4108 +
             (C92097 * C8803 - C36262 * C8801) * C4027) *
                C92252) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C92150 * C1969 -
           ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
            (C2292 * C31251 + C2293 * C31250 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C31249) *
                C61039) *
               C92150 * C1970) *
              C1971 +
          (((C2293 * C31249 + C2292 * C31250 + C2291 * C31251) * C61039 +
            (C12221 * C31249 + C22379 * C31250 +
             (C182 * C3442 - C410 * C3360 - C182 * C3590 + C92177 * C3664) *
                 C31251) *
                C92252) *
               C92150 * C1970 -
           ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
            (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C92150 * C1969 -
           ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
             C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
             C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
                C92097 * C92252 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C92097 * C61039) *
               C92150 * C1970) *
              C1971 +
          (((C6973 + C6972 + C6971) * C92097 * C61039 +
            (C4106 * C3440 - C4363 * C3358 - C4106 * C3588 + C4025 * C3662 +
             C4107 * C5800 - C4364 * C5701 - C4107 * C5972 + C4026 * C6057 +
             C4108 * C8589 - C4365 * C8455 - C4108 * C8801 + C4027 * C8919) *
                C92097 * C92252) *
               C92150 * C1970 -
           ((C7930 + C7931 + C7932) * C92097 * C92252 +
            (C4405 + C4404 + C4403) * C92097 * C61039) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C92150 * C1969 +
           (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                 C182 +
             (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C31249 +
            ((C63447 - C63448 + C63449 - C63450) * C182 +
             (C63757 - C63758 + C63759 - C63760) * C92177) *
                C31250 +
            ((C63455 - C63456 + C63457 - C63458) * C182 +
             (C63761 - C63762 + C63763 - C63764) * C92177) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C182 +
             (C61445 - C61444 + C61447 - C61446) * C92177) *
                C31249 +
            ((C61201 - C61200 + C61203 - C61202) * C182 +
             (C61450 - C61449 + C61452 - C61451) * C92177) *
                C31250 +
            ((C61208 - C61209 + C61210 - C61211) * C182 +
             (C61453 - C61454 + C61455 - C61456) * C92177) *
                C31251) *
               C92150 * C1969 +
           (((C63448 - C63447 + C63450 - C63449) * C182 +
             (C63758 - C63757 + C63760 - C63759) * C92177) *
                C31249 +
            ((C63456 - C63455 + C63458 - C63457) * C182 +
             (C63762 - C63761 + C63764 - C63763) * C92177) *
                C31250 +
            ((C61039 * C945 - C61189 * C794 + C92252 * C3516 - C61190 * C3360) *
                 C182 +
             (C61039 * C1135 - C61189 * C1011 + C92252 * C3734 -
              C61190 * C3590) *
                 C92177) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C92150 * C1969 +
           ((C66844 - C66843 + C66846 - C66845) * C4106 +
            (C67099 - C67098 + C67101 - C67100) * C4025 +
            (C66852 - C66851 + C66854 - C66853) * C4107 +
            (C67103 - C67102 + C67105 - C67104) * C4026 +
            (C66859 - C66860 + C66861 - C66862) * C4108 +
            (C67106 - C67107 + C67108 - C67109) * C4027) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C4106 +
            (C61445 - C61444 + C61447 - C61446) * C4025 +
            (C63447 - C63448 + C63449 - C63450) * C4107 +
            (C63757 - C63758 + C63759 - C63760) * C4026 +
            (C68427 - C68428 + C68429 - C68430) * C4108 +
            (C68729 - C68730 + C68731 - C68732) * C4027) *
               C92097 * C92150 * C1969 +
           ((C63448 - C63447 + C63450 - C63449) * C4106 +
            (C63758 - C63757 + C63760 - C63759) * C4025 +
            (C68428 - C68427 + C68430 - C68429) * C4107 +
            (C68730 - C68729 + C68732 - C68731) * C4026 +
            (C61039 * C5031 - C61189 * C4814 + C92252 * C8691 -
             C61190 * C8455) *
                C4108 +
            (C61039 * C5330 - C61189 * C5140 + C92252 * C9019 -
             C61190 * C8801) *
                C4027) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C92150 * C1969 +
           ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
            (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
               C92177 * C92150 * C1970) *
              C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C61189 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C61039 +
            (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
             C31258 * C1375 - C31251 * C1383) *
                C61190 +
            (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 - C31250 * C1781 +
             C31258 * C1774 - C31251 * C1782) *
                C92252) *
               C92177 * C92150 * C1969 +
           ((C33802 - C33801 + C33804 - C33803 + C33806 - C33805) * C61189 +
            (C34136 - C34135 + C34138 - C34137 + C34140 - C34139) * C61039 +
            (C31249 * C3363 - C31254 * C3358 + C31250 * C3365 - C31256 * C3359 +
             C31251 * C3367 - C31258 * C3360) *
                C61190 +
            (C31249 * C3806 - C31254 * C3802 + C31250 * C3807 - C31256 * C3803 +
             C31251 * C3808 - C31258 * C3804) *
                C92252) *
               C92177 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C92150 * C1969 +
           (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
             C44151 * C61190 + C44488 * C92252) *
                C4025 +
            ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
             C60428 * C61190 + C60749 * C92252) *
                C4026 +
            ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
             (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
                C4027) *
               C92150 * C1970) *
              C1971 +
          ((((C36262 * C109 - C92097 * C116) * C61189 +
             (C36262 * C568 - C92097 * C574) * C61039 +
             (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
                C4025 +
            ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
             (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
                C4026 +
            ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
             (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
                C4027) *
               C92150 * C1969 +
           (((C37984 - C37983) * C61189 + (C38194 - C38193) * C61039 +
             (C42281 - C42280) * C61190 + (C42583 - C42582) * C92252) *
                C4025 +
            ((C37988 - C37987) * C61189 + (C38196 - C38195) * C61039 +
             (C58635 - C58634) * C61190 + (C58933 - C58932) * C92252) *
                C4026 +
            ((C37992 - C37991) * C61189 + (C38198 - C38197) * C61039 +
             (C92097 * C8458 - C36262 * C8455) * C61190 +
             (C92097 * C9125 - C36262 * C9123) * C92252) *
                C4027) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C92150 * C1969 +
           (((C182 * C797 - C92177 * C876) * C61189 +
             (C182 * C1190 - C92177 * C1256) * C61039 +
             (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                C31249 +
            ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
             (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                C31250 +
            ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
             (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                C31251) *
               C92150 * C1970) *
              C1971 +
          ((((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
             C13530 * C92252) *
                C31249 +
            ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
             C23662 * C92252) *
                C31250 +
            ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
             (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                C31251) *
               C92150 * C1969 +
           (((C2047 - C2046) * C61189 + (C2503 - C2502) * C61039 +
             (C11890 - C11889) * C61190 + (C12527 - C12526) * C92252) *
                C31249 +
            ((C2051 - C2050) * C61189 + (C2505 - C2504) * C61039 +
             (C22060 - C22059) * C61190 + (C22683 - C22682) * C92252) *
                C31250 +
            ((C2055 - C2054) * C61189 + (C2507 - C2506) * C61039 +
             (C92177 * C3442 - C182 * C3360) * C61190 +
             (C92177 * C3878 - C182 * C3804) * C92252) *
                C31251) *
               C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C92150 * C1969 +
           ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C61189 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C61039 +
            (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C61190 +
            (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 - C4026 * C6303 +
             C4108 * C9122 - C4027 * C9232) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
            (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
               C92097 * C92150 * C1969 +
           ((C6621 - C6620 + C6623 - C6622 + C6625 - C6624) * C61189 +
            (C7284 - C7283 + C7286 - C7285 + C7288 - C7287) * C61039 +
            (C4025 * C3440 - C4106 * C3358 + C4026 * C5800 - C4107 * C5701 +
             C4027 * C8589 - C4108 * C8455) *
                C61190 +
            (C4025 * C3876 - C4106 * C3802 + C4026 * C6304 - C4107 * C6218 +
             C4027 * C9233 - C4108 * C9123) *
                C92252) *
               C92097 * C92150 * C1970) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92177 * C31249 +
            (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
               C92150 * C1969 -
           ((C64083 + C64084) * C92177 * C31251 +
            (C64085 + C64086) * C92177 * C31250 +
            (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
             C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
                C92177 * C31249) *
               C92150 * C1970) *
              C1971 +
          (((C64086 + C64085) * C92177 * C31249 +
            (C64084 + C64083) * C92177 * C31250 +
            (C61189 * C945 - C61690 * C794 - C61189 * C1193 + C61039 * C1314 +
             C61190 * C3516 - C61691 * C3360 - C61190 * C3804 +
             C92252 * C3948) *
                C92177 * C31251) *
               C92150 * C1970 -
           ((C61733 + C61734) * C92177 * C31251 +
            (C61732 + C61731) * C92177 * C31250 +
            (C61730 + C61729) * C92177 * C31249) *
               C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C4025 +
            (C67378 + C67379) * C4026 + C67384 * C4027) *
               C92097 * C92150 * C1969 -
           ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
            (C67379 + C67378) * C4025) *
               C92097 * C92150 * C1970) *
              C1971 +
          (((C64086 + C64085) * C4025 + (C69039 + C69040) * C4026 +
            (C61189 * C5031 - C61690 * C4814 - C61189 * C5418 + C61039 * C5595 +
             C61190 * C8691 - C61691 * C8455 - C61190 * C9123 +
             C92252 * C9333) *
                C4027) *
               C92097 * C92150 * C1970 -
           ((C69040 + C69039) * C4027 + (C64085 + C64086) * C4026 +
            (C61730 + C61729) * C4025) *
               C92097 * C92150 * C1969) *
              C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C2664 -
           ((C62516 + C62517 + C62518) * C92252 +
            (C62515 + C62514 + C62513) * C61039) *
               C92177 * C2665) *
              C1969 +
          (((C35405 + C35404 + C35403) * C61039 +
            (C31254 * C5711 - C31255 * C5703 - C31254 * C5712 + C31249 * C5721 +
             C31256 * C5713 - C31257 * C5704 - C31256 * C5714 + C31250 * C5722 +
             C31258 * C11785 - C31259 * C11784 - C31258 * C11786 +
             C31251 * C11787) *
                C92252) *
               C92177 * C2665 -
           ((C35403 + C35404 + C35405) * C92252 +
            (C32074 + C32073 + C32072) * C61039) *
               C92177 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C2664 -
           ((C70021 + C70022) * C4027 + (C70023 + C70024) * C4026 +
            (C41135 * C92252 + C41134 * C61039) * C4025) *
               C2665) *
              C1969 +
          (((C70024 + C70023) * C4025 + (C70022 + C70021) * C4026 +
            (C39013 * C61039 + (C36262 * C37279 - C36263 * C37278 -
                                C36262 * C37280 + C92097 * C37281) *
                                   C92252) *
                C4027) *
               C2665 -
           ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
            (C66689 + C66688) * C4025) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
             C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
             C23028 * C31251) *
                C61039 +
            ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
             C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
             (C9506 - C9507) * C31251) *
                C92252) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C31254 +
             (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
             (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
             (C2052 - C2053) * C31251) *
                C61039 +
            ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
             (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
             (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
                C92252) *
               C2664 +
           (((C13875 - C13874) * C31254 + (C13877 - C13876) * C31249 +
             (C11890 - C11889) * C31256 + (C11892 - C11891) * C31250 +
             (C22060 - C22059) * C31258 + (C22062 - C22061) * C31251) *
                C61039 +
            ((C13879 - C13878) * C31254 + (C13881 - C13880) * C31249 +
             (C11894 - C11893) * C31256 + (C11896 - C11895) * C31250 +
             (C92177 * C11886 - C182 * C11784) * C31258 +
             (C92177 * C11887 - C182 * C11786) * C31251) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C2664 +
           (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
             (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
                C61039 +
            ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
             (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
                C92252) *
               C2665) *
              C1969 +
          ((((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
              C4108 * C4815 - C4027 * C4948) *
                 C36262 +
             (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
              C4108 * C4821 - C4027 * C4952) *
                 C92097) *
                C61039 +
            ((C70123 - C70124 + C70125 - C70126 + C70127 - C70128) * C36262 +
             (C70129 - C70130 + C70131 - C70132 + C70133 - C70134) * C92097) *
                C92252) *
               C2664 +
           (((C70124 - C70123 + C70126 - C70125 + C70128 - C70127) * C36262 +
             (C70130 - C70129 + C70132 - C70131 + C70134 - C70133) * C92097) *
                C61039 +
            ((C4025 * C5801 - C4106 * C5703 + C4026 * C5802 - C4107 * C5705 +
              C4027 * C37332 - C4108 * C37278) *
                 C36262 +
             (C4025 * C5807 - C4106 * C5712 + C4026 * C5808 - C4107 * C5716 +
              C4027 * C37333 - C4108 * C37280) *
                 C92097) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C31254 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C31249 +
            (C64402 - C64403 + C64404 - C64405) * C31256 +
            (C64406 - C64407 + C64408 - C64409) * C31250 +
            (C64410 - C64411 + C64412 - C64413) * C31258 +
            (C64414 - C64415 + C64416 - C64417) * C31251) *
               C92177 * C2665) *
              C1969 +
          (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C31254 +
            (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
                C31249 +
            (C63447 - C63448 + C63449 - C63450) * C31256 +
            (C63451 - C63452 + C63453 - C63454) * C31250 +
            (C63455 - C63456 + C63457 - C63458) * C31258 +
            (C63459 - C63460 + C63461 - C63462) * C31251) *
               C92177 * C2664 +
           ((C61039 * C3513 - C61189 * C3357 + C92252 * C5887 -
             C61190 * C5703) *
                C31254 +
            (C61039 * C3517 - C61189 * C3362 + C92252 * C5893 -
             C61190 * C5712) *
                C31249 +
            (C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
             C61190 * C5704) *
                C31256 +
            (C61039 * C3518 - C61189 * C3364 + C92252 * C5894 -
             C61190 * C5714) *
                C31250 +
            (C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
             C61190 * C11784) *
                C31258 +
            (C61039 * C3519 - C61189 * C3366 + C92252 * C11995 -
             C61190 * C11786) *
                C31251) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C4025 +
            ((C70233 - C70234 + C70235 - C70236) * C36262 +
             (C70237 - C70238 + C70239 - C70240) * C92097) *
                C4026 +
            ((C70241 - C70242 + C70243 - C70244) * C36262 +
             (C70245 - C70246 + C70247 - C70248) * C92097) *
                C4027) *
               C2665) *
              C1969 +
          ((((C66844 - C66843 + C66846 - C66845) * C36262 +
             (C66848 - C66847 + C66850 - C66849) * C92097) *
                C4025 +
            ((C66852 - C66851 + C66854 - C66853) * C36262 +
             (C66856 - C66855 + C66858 - C66857) * C92097) *
                C4026 +
            ((C66859 - C66860 + C66861 - C66862) * C36262 +
             (C66863 - C66864 + C66865 - C66866) * C92097) *
                C4027) *
               C2664 +
           (((C70234 - C70233 + C70236 - C70235) * C36262 +
             (C70238 - C70237 + C70240 - C70239) * C92097) *
                C4025 +
            ((C70242 - C70241 + C70244 - C70243) * C36262 +
             (C70246 - C70245 + C70248 - C70247) * C92097) *
                C4026 +
            ((C61039 * C8690 - C61189 * C8454 + C92252 * C37384 -
              C61190 * C37278) *
                 C36262 +
             (C61039 * C8692 - C61189 * C8457 + C92252 * C37385 -
              C61190 * C37280) *
                 C92097) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C2664 +
           (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
             (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
                C61039 +
            ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
             (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
                C92252) *
               C2665) *
              C1969 +
          ((((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
             (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
                C61039 +
            ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
             (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
                C92252) *
               C2664 +
           (((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C182 +
             (C35707 - C35706 + C35709 - C35708 + C35711 - C35710) * C92177) *
                C61039 +
            ((C31249 * C5711 - C31254 * C5703 + C31250 * C5713 -
              C31256 * C5704 + C31251 * C11785 - C31258 * C11784) *
                 C182 +
             (C31249 * C5979 - C31254 * C5973 + C31250 * C5980 -
              C31256 * C5974 + C31251 * C12107 - C31258 * C12106) *
                 C92177) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
             C44151 * C4107 + C44152 * C4026 + C60428 * C4108 +
             C60429 * C4027) *
                C61039 +
            ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
             C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
             (C40602 - C40603) * C4027) *
                C92252) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
             (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
             (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
                C61039 +
            (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
             (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
                C92252) *
               C2664 +
           ((C44149 * C4106 + C44150 * C4025 + C57085 * C4107 + C57086 * C4026 +
             (C39236 - C39235) * C4108 + (C39238 - C39237) * C4027) *
                C61039 +
            (C41407 * C4106 + C41408 * C4025 + (C40601 - C40600) * C4107 +
             (C40603 - C40602) * C4026 +
             (C92097 * C37279 - C36262 * C37278) * C4108 +
             (C92097 * C37437 - C36262 * C37436) * C4027) *
                C92252) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C2664 -
           ((C62842 + C62843 + C62844) * C92252 +
            (C62841 + C62840 + C62839) * C61039) *
               C2665) *
              C1969 +
          (((C65553 + C65554 + C65555) * C61039 +
            (C14209 * C31249 + C12220 * C31250 +
             (C182 * C11886 - C410 * C11784 - C182 * C12106 + C92177 * C12206) *
                 C31251) *
                C92252) *
               C2665 -
           ((C65555 + C65554 + C65553) * C92252 +
            (C2292 * C31251 + C2293 * C31250 +
             (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                 C31249) *
                C61039) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C2664 -
           ((C67818 + C67819 + C67820) * C92097 * C92252 +
            (C67817 + C67816 + C67815) * C92097 * C61039) *
               C2665) *
              C1969 +
          (((C70463 + C70464 + C70465) * C92097 * C61039 +
            (C4106 * C5801 - C4363 * C5703 - C4106 * C5973 + C4025 * C6059 +
             C4107 * C5802 - C4364 * C5705 - C4107 * C5975 + C4026 * C6060 +
             C4108 * C37332 - C4365 * C37278 - C4108 * C37436 +
             C4027 * C37488) *
                C92097 * C92252) *
               C2665 -
           ((C70465 + C70464 + C70463) * C92097 * C92252 +
            (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
             C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
             C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
                C92097 * C61039) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C31249 +
            ((C64402 - C64403 + C64404 - C64405) * C182 +
             (C64727 - C64728 + C64729 - C64730) * C92177) *
                C31250 +
            ((C64410 - C64411 + C64412 - C64413) * C182 +
             (C64731 - C64732 + C64733 - C64734) * C92177) *
                C31251) *
               C2665) *
              C1969 +
          ((((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                 C182 +
             (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
              C92252 * C3731) *
                 C92177) *
                C31249 +
            ((C63447 - C63448 + C63449 - C63450) * C182 +
             (C63757 - C63758 + C63759 - C63760) * C92177) *
                C31250 +
            ((C63455 - C63456 + C63457 - C63458) * C182 +
             (C63761 - C63762 + C63763 - C63764) * C92177) *
                C31251) *
               C2664 +
           (((C61039 * C3513 - C61189 * C3357 + C92252 * C5887 -
              C61190 * C5703) *
                 C182 +
             (C61039 * C3731 - C61189 * C3587 + C92252 * C6139 -
              C61190 * C5973) *
                 C92177) *
                C31249 +
            ((C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
              C61190 * C5704) *
                 C182 +
             (C61039 * C3732 - C61189 * C3588 + C92252 * C6141 -
              C61190 * C5974) *
                 C92177) *
                C31250 +
            ((C61039 * C3515 - C61189 * C3359 + C92252 * C11994 -
              C61190 * C11784) *
                 C182 +
             (C61039 * C3733 - C61189 * C3589 + C92252 * C12319 -
              C61190 * C12106) *
                 C92177) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C4106 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C4025 +
            (C70233 - C70234 + C70235 - C70236) * C4107 +
            (C70564 - C70565 + C70566 - C70567) * C4026 +
            (C70241 - C70242 + C70243 - C70244) * C4108 +
            (C70568 - C70569 + C70570 - C70571) * C4027) *
               C92097 * C2665) *
              C1969 +
          (((C66844 - C66843 + C66846 - C66845) * C4106 +
            (C67099 - C67098 + C67101 - C67100) * C4025 +
            (C66852 - C66851 + C66854 - C66853) * C4107 +
            (C67103 - C67102 + C67105 - C67104) * C4026 +
            (C66859 - C66860 + C66861 - C66862) * C4108 +
            (C67106 - C67107 + C67108 - C67109) * C4027) *
               C92097 * C2664 +
           ((C70234 - C70233 + C70236 - C70235) * C4106 +
            (C70565 - C70564 + C70567 - C70566) * C4025 +
            (C70242 - C70241 + C70244 - C70243) * C4107 +
            (C70569 - C70568 + C70571 - C70570) * C4026 +
            (C61039 * C8690 - C61189 * C8454 + C92252 * C37384 -
             C61190 * C37278) *
                C4108 +
            (C61039 * C9018 - C61189 * C8800 + C92252 * C37539 -
             C61190 * C37436) *
                C4027) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C2664 +
           ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
            (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
            (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
            (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
               C92177 * C2665) *
              C1969 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
            (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
            (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
            (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
               C92177 * C2664 +
           ((C35701 - C35700 + C35703 - C35702 + C35705 - C35704) * C61189 +
            (C36007 - C36006 + C36009 - C36008 + C36011 - C36010) * C61039 +
            (C31249 * C5711 - C31254 * C5703 + C31250 * C5713 - C31256 * C5704 +
             C31251 * C11785 - C31258 * C11784) *
                C61190 +
            (C31249 * C6225 - C31254 * C6219 + C31250 * C6226 - C31256 * C6220 +
             C31251 * C12425 - C31258 * C12424) *
                C92252) *
               C92177 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C2664 +
           (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
             (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
                C4025 +
            (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
             C44489 * C92252) *
                C4026 +
            (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
             (C40840 - C40841) * C92252) *
                C4027) *
               C2665) *
              C1969 +
          ((((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
             C44151 * C61190 + C44488 * C92252) *
                C4025 +
            ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
             C60428 * C61190 + C60749 * C92252) *
                C4026 +
            ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
             (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
                C4027) *
               C2664 +
           ((C44149 * C61189 + C44487 * C61039 + C41407 * C61190 +
             C41700 * C92252) *
                C4025 +
            (C57085 * C61189 + C57319 * C61039 + (C40601 - C40600) * C61190 +
             (C40841 - C40840) * C92252) *
                C4026 +
            ((C39236 - C39235) * C61189 + (C39448 - C39447) * C61039 +
             (C92097 * C37279 - C36262 * C37278) * C61190 +
             (C92097 * C37591 - C36262 * C37590) * C92252) *
                C4027) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C2664 +
           (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
             (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
                C31249 +
            (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
             C13531 * C92252) *
                C31250 +
            (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
             (C10007 - C10008) * C92252) *
                C31251) *
               C2665) *
              C1969 +
          ((((C182 * C797 - C92177 * C876) * C61189 +
             (C182 * C1190 - C92177 * C1256) * C61039 +
             (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                C31249 +
            ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
             (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                C31250 +
            ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
             (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                C31251) *
               C2664 +
           (((C13875 - C13874) * C61189 + (C14519 - C14518) * C61039 +
             (C13879 - C13878) * C61190 + (C14521 - C14520) * C92252) *
                C31249 +
            ((C11890 - C11889) * C61189 + (C12527 - C12526) * C61039 +
             (C11894 - C11893) * C61190 + (C12529 - C12528) * C92252) *
                C31250 +
            ((C22060 - C22059) * C61189 + (C22683 - C22682) * C61039 +
             (C92177 * C11886 - C182 * C11784) * C61190 +
             (C92177 * C12524 - C182 * C12424) * C92252) *
                C31251) *
               C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C2664 +
           ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
            (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
            (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
            (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
               C92097 * C2665) *
              C1969 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C61189 +
            (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
             C4108 * C5417 - C4027 * C5517) *
                C61039 +
            (C70123 - C70124 + C70125 - C70126 + C70127 - C70128) * C61190 +
            (C70768 - C70769 + C70770 - C70771 + C70772 - C70773) * C92252) *
               C92097 * C2664 +
           ((C70124 - C70123 + C70126 - C70125 + C70128 - C70127) * C61189 +
            (C70769 - C70768 + C70771 - C70770 + C70773 - C70772) * C61039 +
            (C4025 * C5801 - C4106 * C5703 + C4026 * C5802 - C4107 * C5705 +
             C4027 * C37332 - C4108 * C37278) *
                C61190 +
            (C4025 * C6305 - C4106 * C6219 + C4026 * C6306 - C4107 * C6221 +
             C4027 * C37642 - C4108 * C37590) *
                C92252) *
               C92097 * C2665) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C92177 * C31249 +
            (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
               C2664 -
           ((C65059 + C65060) * C92177 * C31251 +
            (C65061 + C65062) * C92177 * C31250 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C92177 * C31249) *
               C2665) *
              C1969 +
          (((C61189 * C3513 - C61690 * C3357 - C61189 * C3801 + C61039 * C3945 +
             C61190 * C5887 - C61691 * C5703 - C61190 * C6219 +
             C92252 * C6385) *
                C92177 * C31249 +
            (C61189 * C3514 - C61690 * C3358 - C61189 * C3802 + C61039 * C3946 +
             C61190 * C5888 - C61691 * C5704 - C61190 * C6220 +
             C92252 * C6387) *
                C92177 * C31250 +
            (C61189 * C3515 - C61690 * C3359 - C61189 * C3803 + C61039 * C3947 +
             C61190 * C11994 - C61691 * C11784 - C61190 * C12424 +
             C92252 * C12627) *
                C92177 * C31251) *
               C2665 -
           ((C64083 + C64084) * C92177 * C31251 +
            (C64085 + C64086) * C92177 * C31250 +
            (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
             C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
                C92177 * C31249) *
               C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
             C61190 * C1523 - C61691 * C1378 - C61190 * C1771 +
             C92252 * C1898) *
                C4025 +
            (C67378 + C67379) * C4026 + C67384 * C4027) *
               C92097 * C2664 -
           ((C70896 + C70897) * C4027 + (C70898 + C70899) * C4026 +
            (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
             C61189 * C1523 - C61690 * C1378 - C61189 * C1771 +
             C61039 * C1898) *
                C4025) *
               C92097 * C2665) *
              C1969 +
          (((C70899 + C70898) * C4025 + (C70897 + C70896) * C4026 +
            (C61189 * C8690 - C61690 * C8454 - C61189 * C9122 + C61039 * C9332 +
             C61190 * C37384 - C61691 * C37278 - C61190 * C37590 +
             C92252 * C37693) *
                C4027) *
               C92097 * C2665 -
           ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
            (C67379 + C67378) * C4025) *
               C92097 * C2664) *
              C1970) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C790 -
          ((C35403 + C35404 + C35405) * C92252 +
           (C32074 + C32073 + C32072) * C61039) *
              C92177 * C92150 * C791 +
          ((C32077 + C32076 + C32075) * C61039 +
           (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 + C31249 * C5720 +
            C31256 * C5707 - C31257 * C5701 - C31256 * C5708 + C31250 * C5719 +
            C31258 * C7489 - C31259 * C7488 - C31258 * C7490 + C31251 * C7491) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C92136 * C97 -
          ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 + C31251 * C1399 +
            C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
            C31254 * C1387 - C31255 * C1377 - C31254 * C1388 + C31249 * C1401) *
               C92252 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C61039) *
              C92177 * C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C61039 +
           (C31254 * C1385 - C31255 * C1376 - C31254 * C1386 + C31249 * C1400 +
            C31256 * C1383 - C31257 * C1375 - C31256 * C1384 + C31250 * C1399 +
            C31258 * C2667 - C31259 * C2666 - C31258 * C2668 + C31251 * C2669) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C62513 + C62514 + C62515) * C92252) *
              C92177 * C1372 -
          ((C62516 + C62517 + C62518) * C92252 +
           (C62515 + C62514 + C62513) * C61039) *
              C92177 * C1373 +
          ((C62518 + C62517 + C62516) * C61039 +
           (C31254 * C10873 - C31255 * C10868 - C31254 * C10874 +
            C31249 * C10880 + C31256 * C10871 - C31257 * C10867 -
            C31256 * C10872 + C31250 * C10879 + C31258 * C12748 -
            C31259 * C12747 - C31258 * C12749 + C31251 * C12750) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C36751 * C61039 + C39015 * C92252) * C4026 +
           (C36752 * C61039 + C39014 * C92252) * C4027) *
              C92150 * C92136 * C97 -
          ((C58338 * C92252 + C37780 * C61039) * C4027 +
           (C41982 * C92252 + C37779 * C61039) * C4026 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C61039) *
               C4025) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C61039 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C4025 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C61039 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C4026 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C61039 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C92150 * C790 -
          ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
           (C66689 + C66688) * C4025) *
              C92150 * C791 +
          (C66694 * C4025 + (C66693 + C66692) * C4026 +
           (C36754 * C61039 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C1372 -
          ((C40347 * C92252 + C39014 * C61039) * C4027 +
           (C40346 * C92252 + C39015 * C61039) * C4026 +
           (C41135 * C92252 + C41134 * C61039) * C4025) *
              C1373 +
          ((C41135 * C61039 + C41137 * C92252) * C4025 +
           (C40346 * C61039 + C41136 * C92252) * C4026 +
           (C40347 * C61039 + (C36262 * C43814 - C36263 * C43813 -
                               C36262 * C43815 + C92097 * C43816) *
                                  C92252) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C31254 +
            (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
            (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
            (C2052 - C2053) * C31251) *
               C61039 +
           ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
            (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
            (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
               C92252) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C31254 +
            (C92177 * C888 - C182 * C811) * C31249 +
            (C92177 * C881 - C182 * C799) * C31256 +
            (C92177 * C889 - C182 * C813) * C31250 +
            (C92177 * C882 - C182 * C800) * C31258 +
            (C92177 * C890 - C182 * C815) * C31251) *
               C61039 +
           ((C92177 * C5799 - C182 * C5702) * C31254 +
            (C92177 * C5805 - C182 * C5710) * C31249 +
            (C92177 * C5800 - C182 * C5701) * C31256 +
            (C92177 * C5806 - C182 * C5708) * C31250 +
            (C92177 * C7590 - C182 * C7488) * C31258 +
            (C92177 * C7591 - C182 * C7490) * C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C31254 + (C199 - C198) * C31249 +
            (C201 - C200) * C31256 + (C203 - C202) * C31250 +
            (C205 - C204) * C31258 + (C207 - C206) * C31251) *
               C61039 +
           (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
            C23028 * C31250 + (C2747 - C2748) * C31258 +
            (C2749 - C2750) * C31251) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C212 * C31254 + C213 * C31249 + C214 * C31256 + C215 * C31250 +
            (C209 - C208) * C31258 + (C211 - C210) * C31251) *
               C61039 +
           (C19823 * C31254 + C19824 * C31249 + (C2748 - C2747) * C31256 +
            (C2750 - C2749) * C31250 +
            (C92177 * C2736 - C182 * C2666) * C31258 +
            (C92177 * C2737 - C182 * C2668) * C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C1372 +
          (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
            C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
            C23028 * C31251) *
               C61039 +
           ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
            C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
            (C9506 - C9507) * C31251) *
               C92252) *
              C1373 +
          ((C11027 * C31254 + C11028 * C31249 + C11017 * C31256 +
            C11018 * C31250 + (C9505 - C9504) * C31258 +
            (C9507 - C9506) * C31251) *
               C61039 +
           ((C11020 - C11019) * C31254 + (C11022 - C11021) * C31249 +
            (C11024 - C11023) * C31256 + (C11026 - C11025) * C31250 +
            (C92177 * C12877 - C182 * C12747) * C31258 +
            (C92177 * C12878 - C182 * C12749) * C31251) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
               C61039 +
           ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C36262 +
            (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C92097) *
               C61039 +
           ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C36262 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C36262 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C92097) *
               C61039 +
           ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C36262 +
            (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
             C4108 * C8457 - C4027 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C36262 +
            (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
             C4027 * C4954 - C4108 * C4823) *
                C92097) *
               C61039 +
           ((C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
             C4027 * C39084 - C4108 * C38990) *
                C36262 +
            (C4025 * C5805 - C4106 * C5710 + C4026 * C8590 - C4107 * C8457 +
             C4027 * C39085 - C4108 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
            (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
               C92252) *
              C1372 +
          (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
            (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
               C61039 +
           ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
            (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
               C92252) *
              C1373 +
          (((C67546 - C67545 + C67548 - C67547 + C67550 - C67549) * C36262 +
            (C67552 - C67551 + C67554 - C67553 + C67556 - C67555) * C92097) *
               C61039 +
           ((C4025 * C11000 - C4106 * C10868 + C4026 * C13869 - C4107 * C13749 +
             C4027 * C43918 - C4108 * C43813) *
                C36262 +
            (C4025 * C11004 - C4106 * C10874 + C4026 * C13871 - C4107 * C13752 +
             C4027 * C43919 - C4108 * C43815) *
                C92097) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C790 +
          ((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
               C31254 +
           (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
               C31249 +
           (C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
               C31256 +
           (C61189 * C807 - C61039 * C951 + C61190 * C3364 - C92252 * C3518) *
               C31250 +
           (C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
               C31258 +
           (C61189 * C805 - C61039 * C952 + C61190 * C3366 - C92252 * C3519) *
               C31251) *
              C92177 * C92150 * C791 +
          ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C31254 +
           (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
               C31249 +
           (C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
               C31256 +
           (C61039 * C955 - C61189 * C813 + C92252 * C5892 - C61190 * C5708) *
               C31250 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C31258 +
           (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
               C31251) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C31254 +
           (C61197 - C61196 + C61199 - C61198) * C31249 +
           (C61201 - C61200 + C61203 - C61202) * C31256 +
           (C61205 - C61204 + C61207 - C61206) * C31250 +
           (C61208 - C61209 + C61210 - C61211) * C31258 +
           (C61212 - C61213 + C61214 - C61215) * C31251) *
              C92177 * C92150 * C92136 * C98 +
          (C61220 * C31254 + C61221 * C31249 +
           (C61209 - C61208 + C61211 - C61210) * C31256 +
           (C61213 - C61212 + C61215 - C61214) * C31250 +
           (C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
               C31258 +
           (C61039 * C276 - C61189 * C123 + C92252 * C2817 - C61190 * C2668) *
               C31251) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C1372 +
          ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 - C92252 * C1527) *
               C31254 +
           (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 - C92252 * C1535) *
               C31249 +
           (C61189 * C1377 - C61039 * C1524 + C61190 * C1380 - C92252 * C1528) *
               C31256 +
           (C61189 * C1388 - C61039 * C1532 + C61190 * C1394 - C92252 * C1536) *
               C31250 +
           (C61189 * C1376 - C61039 * C1525 + C61190 * C1381 - C92252 * C1529) *
               C31258 +
           (C61189 * C1386 - C61039 * C1533 + C61190 * C1396 - C92252 * C1537) *
               C31251) *
              C92177 * C1373 +
          ((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
            C61190 * C10868) *
               C31254 +
           (C61039 * C1535 - C61189 * C1392 + C92252 * C11113 -
            C61190 * C10874) *
               C31249 +
           (C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
            C61190 * C10867) *
               C31256 +
           (C61039 * C1536 - C61189 * C1394 + C92252 * C11114 -
            C61190 * C10872) *
               C31250 +
           (C61039 * C1529 - C61189 * C1381 + C92252 * C12983 -
            C61190 * C12747) *
               C31258 +
           (C61039 * C1537 - C61189 * C1396 + C92252 * C12984 -
            C61190 * C12749) *
               C31251) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
                C36262 +
            (C61039 * C950 - C61189 * C809 + C92252 * C3517 - C61190 * C3362) *
                C92097) *
               C4026 +
           ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C36262 +
            (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
                C92097) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C36262 +
            (C61197 - C61196 + C61199 - C61198) * C92097) *
               C4025 +
           ((C63447 - C63448 + C63449 - C63450) * C36262 +
            (C63451 - C63452 + C63453 - C63454) * C92097) *
               C4026 +
           ((C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
                C36262 +
            (C61189 * C813 - C61039 * C955 + C61190 * C5708 - C92252 * C5892) *
                C92097) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C61220 * C36262 + C61221 * C92097) * C4025 +
           ((C63456 - C63455 + C63458 - C63457) * C36262 +
            (C63460 - C63459 + C63462 - C63461) * C92097) *
               C4026 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C36262 +
            (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
                C92097) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C36262 +
            (C66848 - C66847 + C66850 - C66849) * C92097) *
               C4025 +
           ((C66852 - C66851 + C66854 - C66853) * C36262 +
            (C66856 - C66855 + C66858 - C66857) * C92097) *
               C4026 +
           ((C66859 - C66860 + C66861 - C66862) * C36262 +
            (C66863 - C66864 + C66865 - C66866) * C92097) *
               C4027) *
              C92150 * C791 +
          (C66875 * C4025 +
           ((C66860 - C66859 + C66862 - C66861) * C36262 +
            (C66864 - C66863 + C66866 - C66865) * C92097) *
               C4026 +
           ((C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
             C61190 * C38990) *
                C36262 +
            (C61039 * C5036 - C61189 * C4823 + C92252 * C39153 -
             C61190 * C38992) *
                C92097) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C36262 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C92097) *
               C4025 +
           ((C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
             C92252 * C5887) *
                C36262 +
            (C61189 * C3362 - C61039 * C3517 + C61190 * C5712 -
             C92252 * C5893) *
                C92097) *
               C4026 +
           ((C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
             C92252 * C5889) *
                C36262 +
            (C61189 * C5710 - C61039 * C5891 + C61190 * C5716 -
             C92252 * C5895) *
                C92097) *
               C4027) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C36262 +
            (C61039 * C1535 - C61189 * C1392 + C92252 * C11113 -
             C61190 * C10874) *
                C92097) *
               C4025 +
           ((C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
             C61190 * C13749) *
                C36262 +
            (C61039 * C5893 - C61189 * C5712 + C92252 * C13981 -
             C61190 * C13752) *
                C92097) *
               C4026 +
           ((C61039 * C5889 - C61189 * C5705 + C92252 * C44034 -
             C61190 * C43813) *
                C36262 +
            (C61039 * C5895 - C61189 * C5716 + C92252 * C44035 -
             C61190 * C43815) *
                C92097) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
               C61039 +
           ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
            (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
               C92252) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C182 +
            (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C92177) *
               C61039 +
           ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
             C31251 * C7489 - C31258 * C7488) *
                C182 +
            (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 - C31256 * C5972 +
             C31251 * C7811 - C31258 * C7810) *
                C92177) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C182 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C92177) *
               C61039 +
           ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
             C31258 * C1375 - C31251 * C1383) *
                C182 +
            (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 - C31250 * C1599 +
             C31258 * C1592 - C31251 * C1600) *
                C92177) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C182 +
            (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
             C31251 * C358 - C31258 * C352) *
                C92177) *
               C61039 +
           ((C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
             C31251 * C2667 - C31258 * C2666) *
                C182 +
            (C31249 * C1599 - C31254 * C1591 + C31250 * C1600 - C31256 * C1592 +
             C31251 * C2897 - C31258 * C2896) *
                C92177) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
            (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
               C92252) *
              C1372 +
          (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
            (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
               C61039 +
           ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
            (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
               C92252) *
              C1373 +
          (((C62754 - C62753 + C62756 - C62755 + C62758 - C62757) * C182 +
            (C62760 - C62759 + C62762 - C62761 + C62764 - C62763) * C92177) *
               C61039 +
           ((C31249 * C10873 - C31254 * C10868 + C31250 * C10871 -
             C31256 * C10867 + C31251 * C12748 - C31258 * C12747) *
                C182 +
            (C31249 * C11195 - C31254 * C11191 + C31250 * C11196 -
             C31256 * C11192 + C31251 * C13096 - C31258 * C13095) *
                C92177) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C4106 +
            (C36262 * C349 - C92097 * C355) * C4025 +
            (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
            (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
               C61039 +
           ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
            (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
            (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C4106 +
            (C92097 * C356 - C36262 * C350) * C4025 +
            (C92097 * C804 - C36262 * C795) * C4107 +
            (C92097 * C1018 - C36262 * C1010) * C4026 +
            (C92097 * C814 - C36262 * C800) * C4108 +
            (C92097 * C1022 - C36262 * C1014) * C4027) *
               C61039 +
           ((C92097 * C1385 - C36262 * C1376) * C4106 +
            (C92097 * C1599 - C36262 * C1591) * C4025 +
            (C92097 * C3365 - C36262 * C3359) * C4107 +
            (C92097 * C3593 - C36262 * C3589) * C4026 +
            (C92097 * C7489 - C36262 * C7488) * C4108 +
            (C92097 * C7811 - C36262 * C7810) * C4027) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C790 +
          (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
            (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
            (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
               C61039 +
           (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
            (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
               C92252) *
              C92150 * C791 +
          ((C36943 * C4106 + C36944 * C4025 + C36945 * C4107 + C36946 * C4026 +
            (C36940 - C36939) * C4108 + (C36942 - C36941) * C4027) *
               C61039 +
           (C57085 * C4106 + C57086 * C4025 + (C39236 - C39235) * C4107 +
            (C39238 - C39237) * C4026 +
            (C92097 * C38991 - C36262 * C38990) * C4108 +
            (C92097 * C39225 - C36262 * C39224) * C4027) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C1372 +
          (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
            C44151 * C4107 + C44152 * C4026 + C60428 * C4108 + C60429 * C4027) *
               C61039 +
           ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
            C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
            (C40602 - C40603) * C4027) *
               C92252) *
              C1373 +
          ((C41417 * C4106 + C41418 * C4025 + C41407 * C4107 + C41408 * C4026 +
            (C40601 - C40600) * C4108 + (C40603 - C40602) * C4027) *
               C61039 +
           ((C41410 - C41409) * C4106 + (C41412 - C41411) * C4025 +
            (C41414 - C41413) * C4107 + (C41416 - C41415) * C4026 +
            (C92097 * C43814 - C36262 * C43813) * C4108 +
            (C92097 * C44147 - C36262 * C44146) * C4027) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C790 -
          ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
           (C2292 * C31251 + C2293 * C31250 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C31249) *
               C61039) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C31249 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C31250 +
            (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                C31251) *
               C61039 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C31249 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C31250 +
            (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C92136 * C97 -
          ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
           (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
              C92150 * C92136 * C98 +
          ((C443 * C31249 + C444 * C31250 + C445 * C31251) * C61039 +
           (C2985 * C31249 + C2984 * C31250 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C62839 + C62840 + C62841) * C92252) *
              C1372 -
          ((C62842 + C62843 + C62844) * C92252 +
           (C62841 + C62840 + C62839) * C61039) *
              C1373 +
          ((C62844 + C62843 + C62842) * C61039 +
           (C11340 * C31249 + C11339 * C31250 +
            (C182 * C12877 - C410 * C12747 - C182 * C13095 + C92177 * C13211) *
                C31251) *
               C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C7930 + C7931 + C7932) * C92097 * C92252 +
           (C4405 + C4404 + C4403) * C92097 * C61039) *
              C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C92097 * C61039 +
           (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
            C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
            C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
            C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
            C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
               C92097 * C92252 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C92097 * C61039) *
              C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C92097 * C61039 +
           (C4106 * C5799 - C4363 * C5702 - C4106 * C5971 + C4025 * C6058 +
            C4107 * C8588 - C4364 * C8454 - C4107 * C8800 + C4026 * C8918 +
            C4108 * C39084 - C4365 * C38990 - C4108 * C39224 + C4027 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C67815 + C67816 + C67817) * C92097 * C92252) *
              C1372 -
          ((C67818 + C67819 + C67820) * C92097 * C92252 +
           (C67817 + C67816 + C67815) * C92097 * C61039) *
              C1373 +
          ((C67820 + C67819 + C67818) * C92097 * C61039 +
           (C4106 * C11000 - C4363 * C10868 - C4106 * C11191 + C4025 * C11307 +
            C4107 * C13869 - C4364 * C13749 - C4107 * C14081 + C4026 * C14191 +
            C4108 * C43918 - C4365 * C43813 - C4108 * C44146 + C4027 * C44252) *
               C92097 * C92252) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C790 +
          (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C182 +
            (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
             C92252 * C3731) *
                C92177) *
               C31249 +
           ((C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
                C182 +
            (C61189 * C1009 - C61039 * C1133 + C61190 * C3588 -
             C92252 * C3732) *
                C92177) *
               C31250 +
           ((C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
                C182 +
            (C61189 * C1010 - C61039 * C1134 + C61190 * C3589 -
             C92252 * C3733) *
                C92177) *
               C31251) *
              C92150 * C791 +
          (((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C182 +
            (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 -
             C61190 * C5971) *
                C92177) *
               C31249 +
           ((C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
                C182 +
            (C61039 * C1137 - C61189 * C1013 + C92252 * C6138 -
             C61190 * C5972) *
                C92177) *
               C31250 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C182 +
            (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 -
             C61190 * C7810) *
                C92177) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C182 +
            (C61445 - C61444 + C61447 - C61446) * C92177) *
               C31249 +
           ((C61201 - C61200 + C61203 - C61202) * C182 +
            (C61450 - C61449 + C61452 - C61451) * C92177) *
               C31250 +
           ((C61208 - C61209 + C61210 - C61211) * C182 +
            (C61453 - C61454 + C61455 - C61456) * C92177) *
               C31251) *
              C92150 * C92136 * C98 +
          (C61461 * C31249 +
           ((C61209 - C61208 + C61211 - C61210) * C182 +
            (C61454 - C61453 + C61456 - C61455) * C92177) *
               C31250 +
           ((C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
                C182 +
            (C61039 * C499 - C61189 * C352 + C92252 * C3052 - C61190 * C2896) *
                C92177) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C1372 +
          (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C182 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C92177) *
               C31249 +
           ((C61189 * C1377 - C61039 * C1524 + C61190 * C1380 -
             C92252 * C1528) *
                C182 +
            (C61189 * C1590 - C61039 * C1714 + C61190 * C1594 -
             C92252 * C1718) *
                C92177) *
               C31250 +
           ((C61189 * C1376 - C61039 * C1525 + C61190 * C1381 -
             C92252 * C1529) *
                C182 +
            (C61189 * C1591 - C61039 * C1715 + C61190 * C1595 -
             C92252 * C1719) *
                C92177) *
               C31251) *
              C1373 +
          (((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
             C61190 * C10868) *
                C182 +
            (C61039 * C1717 - C61189 * C1593 + C92252 * C11419 -
             C61190 * C11191) *
                C92177) *
               C31249 +
           ((C61039 * C1528 - C61189 * C1380 + C92252 * C11110 -
             C61190 * C10867) *
                C182 +
            (C61039 * C1718 - C61189 * C1594 + C92252 * C11420 -
             C61190 * C11192) *
                C92177) *
               C31250 +
           ((C61039 * C1529 - C61189 * C1381 + C92252 * C12983 -
             C61190 * C12747) *
                C182 +
            (C61039 * C1719 - C61189 * C1595 + C92252 * C13314 -
             C61190 * C13095) *
                C92177) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
               C4107 +
           (C61039 * C1132 - C61189 * C1008 + C92252 * C3731 - C61190 * C3587) *
               C4026 +
           (C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C4108 +
           (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 - C61190 * C5971) *
               C4027) *
              C92097 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C4106 +
           (C61445 - C61444 + C61447 - C61446) * C4025 +
           (C63447 - C63448 + C63449 - C63450) * C4107 +
           (C63757 - C63758 + C63759 - C63760) * C4026 +
           (C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
               C4108 +
           (C61189 * C1013 - C61039 * C1137 + C61190 * C5972 - C92252 * C6138) *
               C4027) *
              C92097 * C92150 * C92136 * C98 +
          (C61220 * C4106 + C61459 * C4025 +
           (C63456 - C63455 + C63458 - C63457) * C4107 +
           (C63762 - C63761 + C63764 - C63763) * C4026 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C4108 +
           (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 - C61190 * C7810) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C92150 * C790 +
          ((C66844 - C66843 + C66846 - C66845) * C4106 +
           (C67099 - C67098 + C67101 - C67100) * C4025 +
           (C66852 - C66851 + C66854 - C66853) * C4107 +
           (C67103 - C67102 + C67105 - C67104) * C4026 +
           (C66859 - C66860 + C66861 - C66862) * C4108 +
           (C67106 - C67107 + C67108 - C67109) * C4027) *
              C92097 * C92150 * C791 +
          (C66871 * C4106 + C67112 * C4025 +
           (C66860 - C66859 + C66862 - C66861) * C4107 +
           (C67107 - C67106 + C67109 - C67108) * C4026 +
           (C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
            C61190 * C38990) *
               C4108 +
           (C61039 * C5331 - C61189 * C5141 + C92252 * C39371 -
            C61190 * C39224) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C1372 +
          ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 - C92252 * C1527) *
               C4106 +
           (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 - C92252 * C1717) *
               C4025 +
           (C61189 * C3357 - C61039 * C3513 + C61190 * C5703 - C92252 * C5887) *
               C4107 +
           (C61189 * C3587 - C61039 * C3731 + C61190 * C5973 - C92252 * C6139) *
               C4026 +
           (C61189 * C5702 - C61039 * C5885 + C61190 * C5705 - C92252 * C5889) *
               C4108 +
           (C61189 * C5971 - C61039 * C6137 + C61190 * C5975 - C92252 * C6140) *
               C4027) *
              C92097 * C1373 +
          ((C61039 * C1527 - C61189 * C1379 + C92252 * C11109 -
            C61190 * C10868) *
               C4106 +
           (C61039 * C1717 - C61189 * C1593 + C92252 * C11419 -
            C61190 * C11191) *
               C4025 +
           (C61039 * C5887 - C61189 * C5703 + C92252 * C13979 -
            C61190 * C13749) *
               C4107 +
           (C61039 * C6139 - C61189 * C5973 + C92252 * C14309 -
            C61190 * C14081) *
               C4026 +
           (C61039 * C5889 - C61189 * C5705 + C92252 * C44034 -
            C61190 * C43813) *
               C4108 +
           (C61039 * C6140 - C61189 * C5975 + C92252 * C44379 -
            C61190 * C44146) *
               C4027) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
           (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
           (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
           (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
              C92177 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C61189 +
           (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C61039 +
           (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
            C31251 * C7489 - C31258 * C7488) *
               C61190 +
           (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 - C31256 * C6218 +
            C31251 * C8134 - C31258 * C8133) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C61189 +
           (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
            C31258 * C570 - C31251 * C576) *
               C61039 +
           (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
            C31258 * C1375 - C31251 * C1383) *
               C61190 +
           (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 - C31250 * C1781 +
            C31258 * C1774 - C31251 * C1782) *
               C92252) *
              C92177 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C61189 +
           (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
            C31251 * C577 - C31258 * C571) *
               C61039 +
           (C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
            C31251 * C2667 - C31258 * C2666) *
               C61190 +
           (C31249 * C1781 - C31254 * C1773 + C31250 * C1782 - C31256 * C1774 +
            C31251 * C3126 - C31258 * C3125) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
           (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
              C92177 * C1372 +
          ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
           (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
           (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
           (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
              C92177 * C1373 +
          ((C62754 - C62753 + C62756 - C62755 + C62758 - C62757) * C61189 +
           (C63000 - C62999 + C63002 - C63001 + C63004 - C63003) * C61039 +
           (C31249 * C10873 - C31254 * C10868 + C31250 * C10871 -
            C31256 * C10867 + C31251 * C12748 - C31258 * C12747) *
               C61190 +
           (C31249 * C11501 - C31254 * C11497 + C31250 * C11502 -
            C31256 * C11498 + C31251 * C13420 - C31258 * C13419) *
               C92252) *
              C92177 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           (C36943 * C61189 + C37114 * C61039 + C57085 * C61190 +
            C57319 * C92252) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C61189 +
            (C36262 * C568 - C92097 * C574) * C61039 +
            (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
               C4025 +
           ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
            (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
               C4026 +
           ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
            (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C61189 +
            (C92097 * C575 - C36262 * C569) * C61039 +
            (C92097 * C1385 - C36262 * C1376) * C61190 +
            (C92097 * C1781 - C36262 * C1773) * C92252) *
               C4025 +
           ((C92097 * C804 - C36262 * C795) * C61189 +
            (C92097 * C1200 - C36262 * C1192) * C61039 +
            (C92097 * C3365 - C36262 * C3359) * C61190 +
            (C92097 * C3807 - C36262 * C3803) * C92252) *
               C4026 +
           ((C92097 * C814 - C36262 * C800) * C61189 +
            (C92097 * C1204 - C36262 * C1196) * C61039 +
            (C92097 * C7489 - C36262 * C7488) * C61190 +
            (C92097 * C8134 - C36262 * C8133) * C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C92150 * C790 +
          (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
            C44151 * C61190 + C44488 * C92252) *
               C4025 +
           ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
            C60428 * C61190 + C60749 * C92252) *
               C4026 +
           ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
            (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
               C4027) *
              C92150 * C791 +
          (C67193 * C4025 +
           (C36945 * C61189 + C37115 * C61039 + (C39236 - C39235) * C61190 +
            (C39448 - C39447) * C92252) *
               C4026 +
           ((C36940 - C36939) * C61189 + (C37113 - C37112) * C61039 +
            (C92097 * C38991 - C36262 * C38990) * C61190 +
            (C92097 * C39441 - C36262 * C39440) * C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C1372 +
          (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
            (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
               C4025 +
           (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
            C44489 * C92252) *
               C4026 +
           (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
            (C40840 - C40841) * C92252) *
               C4027) *
              C1373 +
          ((C41417 * C61189 + C41705 * C61039 + (C41410 - C41409) * C61190 +
            (C41702 - C41701) * C92252) *
               C4025 +
           (C41407 * C61189 + C41700 * C61039 + (C41414 - C41413) * C61190 +
            (C41704 - C41703) * C92252) *
               C4026 +
           ((C40601 - C40600) * C61189 + (C40841 - C40840) * C61039 +
            (C92097 * C43814 - C36262 * C43813) * C61190 +
            (C92097 * C44485 - C36262 * C44484) * C92252) *
               C4027) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C61189 +
            (C182 * C1190 - C92177 * C1256) * C61039 +
            (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
               C31249 +
           ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
            (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
               C31250 +
           ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
            (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
               C31251) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C61189 +
            (C92177 * C1260 - C182 * C1194) * C61039 +
            (C92177 * C5799 - C182 * C5702) * C61190 +
            (C92177 * C6303 - C182 * C6217) * C92252) *
               C31249 +
           ((C92177 * C881 - C182 * C799) * C61189 +
            (C92177 * C1261 - C182 * C1195) * C61039 +
            (C92177 * C5800 - C182 * C5701) * C61190 +
            (C92177 * C6304 - C182 * C6218) * C92252) *
               C31250 +
           ((C92177 * C882 - C182 * C800) * C61189 +
            (C92177 * C1262 - C182 * C1196) * C61039 +
            (C92177 * C7590 - C182 * C7488) * C61190 +
            (C92177 * C8233 - C182 * C8133) * C92252) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
            C13530 * C92252) *
               C31249 +
           ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
            C23662 * C92252) *
               C31250 +
           ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
            (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
               C31251) *
              C92150 * C92136 * C98 +
          (C61616 * C31249 +
           (C214 * C61189 + C647 * C61039 + (C2748 - C2747) * C61190 +
            (C3200 - C3199) * C92252) *
               C31250 +
           ((C209 - C208) * C61189 + (C645 - C644) * C61039 +
            (C92177 * C2736 - C182 * C2666) * C61190 +
            (C92177 * C3193 - C182 * C3125) * C92252) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C61189 +
            (C92177 * C629 - C182 * C567) * C61039 +
            (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
               C31249 +
           ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
            C13529 * C92252) *
               C31250 +
           C61616 * C31251) *
              C1372 +
          (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
            (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
               C31249 +
           (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
            C13531 * C92252) *
               C31250 +
           (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
            (C10007 - C10008) * C92252) *
               C31251) *
              C1373 +
          ((C11027 * C61189 + C11608 * C61039 + (C11020 - C11019) * C61190 +
            (C11605 - C11604) * C92252) *
               C31249 +
           (C11017 * C61189 + C11603 * C61039 + (C11024 - C11023) * C61190 +
            (C11607 - C11606) * C92252) *
               C31250 +
           ((C9505 - C9504) * C61189 + (C10008 - C10007) * C61039 +
            (C92177 * C12877 - C182 * C12747) * C61190 +
            (C92177 * C13527 - C182 * C13419) * C92252) *
               C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C92136 * C97 +
          ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
           (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
           (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
           (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
              C92097 * C92150 * C92136 * C98 +
          ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C61189 +
           (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C61039 +
           (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
            C4027 * C7590 - C4108 * C7488) *
               C61190 +
           (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 - C4107 * C3803 +
            C4027 * C8233 - C4108 * C8133) *
               C92252) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
            C4027 * C5799 - C4108 * C5702) *
               C61190 +
           (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 - C4107 * C3801 +
            C4027 * C6303 - C4108 * C6217) *
               C92252) *
              C92097 * C92150 * C790 +
          ((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
            C4108 * C4815 - C4027 * C4948) *
               C61189 +
           (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 - C4026 * C1260 +
            C4108 * C5417 - C4027 * C5517) *
               C61039 +
           (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
            C4108 * C8454 - C4027 * C8588) *
               C61190 +
           (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 - C4026 * C6303 +
            C4108 * C9122 - C4027 * C9232) *
               C92252) *
              C92097 * C92150 * C791 +
          ((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
            C4027 * C4950 - C4108 * C4816) *
               C61189 +
           (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 - C4107 * C5417 +
            C4027 * C5519 - C4108 * C5419) *
               C61039 +
           (C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
            C4027 * C39084 - C4108 * C38990) *
               C61190 +
           (C4025 * C6303 - C4106 * C6217 + C4026 * C9232 - C4107 * C9122 +
            C4027 * C39514 - C4108 * C39440) *
               C92252) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
            C4027 * C880 - C4108 * C798) *
               C61189 +
           (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
            C4027 * C1260 - C4108 * C1194) *
               C61039 +
           (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
           (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
              C92097 * C1372 +
          ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
           (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
           (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
           (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
              C92097 * C1373 +
          ((C67546 - C67545 + C67548 - C67547 + C67550 - C67549) * C61189 +
           (C68050 - C68049 + C68052 - C68051 + C68054 - C68053) * C61039 +
           (C4025 * C11000 - C4106 * C10868 + C4026 * C13869 - C4107 * C13749 +
            C4027 * C43918 - C4108 * C43813) *
               C61190 +
           (C4025 * C11594 - C4106 * C11497 + C4026 * C14515 - C4107 * C14409 +
            C4027 * C44587 - C4108 * C44484) *
               C92252) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C790 -
          ((C61190 * C3515 - C61691 * C3359 - C61190 * C3803 + C92252 * C3947 +
            C61189 * C944 - C61690 * C795 - C61189 * C1192 + C61039 * C1315) *
               C92177 * C31251 +
           (C61190 * C3514 - C61691 * C3358 - C61190 * C3802 + C92252 * C3946 +
            C61189 * C943 - C61690 * C796 - C61189 * C1191 + C61039 * C1316) *
               C92177 * C31250 +
           (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
            C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
               C92177 * C31249) *
              C92150 * C791 +
          ((C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C92177 * C31249 +
           (C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319 +
            C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383) *
               C92177 * C31250 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C92177 * C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C92136 * C97 -
          ((C61733 + C61734) * C92177 * C31251 +
           (C61732 + C61731) * C92177 * C31250 +
           (C61730 + C61729) * C92177 * C31249) *
              C92150 * C92136 * C98 +
          (C61736 * C31249 + (C61734 + C61733) * C92177 * C31250 +
           (C61189 * C270 - C61690 * C112 - C61189 * C571 + C61039 * C706 +
            C61190 * C2816 - C61691 * C2666 - C61190 * C3125 + C92252 * C3266) *
               C92177 * C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C1372 -
          ((C61190 * C1529 - C61691 * C1381 - C61190 * C1777 + C92252 * C1901 +
            C61189 * C1525 - C61690 * C1376 - C61189 * C1773 + C61039 * C1896) *
               C92177 * C31251 +
           (C61190 * C1528 - C61691 * C1380 - C61190 * C1776 + C92252 * C1900 +
            C61189 * C1524 - C61690 * C1377 - C61189 * C1772 + C61039 * C1897) *
               C92177 * C31250 +
           (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
            C61189 * C1523 - C61690 * C1378 - C61189 * C1771 + C61039 * C1898) *
               C92177 * C31249) *
              C1373 +
          ((C61189 * C1527 - C61690 * C1379 - C61189 * C1775 + C61039 * C1899 +
            C61190 * C11109 - C61691 * C10868 - C61190 * C11497 +
            C92252 * C11683) *
               C92177 * C31249 +
           (C61189 * C1528 - C61690 * C1380 - C61189 * C1776 + C61039 * C1900 +
            C61190 * C11110 - C61691 * C10867 - C61190 * C11498 +
            C92252 * C11682) *
               C92177 * C31250 +
           (C61189 * C1529 - C61690 * C1381 - C61189 * C1777 + C61039 * C1901 +
            C61190 * C12983 - C61691 * C12747 - C61190 * C13419 +
            C92252 * C13629) *
               C92177 * C31251) *
              C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317 +
            C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945) *
               C4026 +
           (C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C4027) *
              C92097 * C92150 * C92136 * C97 -
          ((C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383 +
            C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319) *
               C4027 +
           (C64085 + C64086) * C4026 + (C61730 + C61729) * C4025) *
              C92097 * C92150 * C92136 * C98 +
          (C61735 * C4025 + (C64084 + C64083) * C4026 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C92150 * C790 -
          ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
           (C67379 + C67378) * C4025) *
              C92097 * C92150 * C791 +
          (C67384 * C4025 + (C67383 + C67382) * C4026 +
           (C61189 * C5032 - C61690 * C4816 - C61189 * C5419 + C61039 * C5597 +
            C61190 * C39152 - C61691 * C38990 - C61190 * C39440 +
            C92252 * C39581) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C1372 -
          ((C61190 * C5889 - C61691 * C5705 - C61190 * C6221 + C92252 * C6386 +
            C61189 * C5885 - C61690 * C5702 - C61189 * C6217 + C61039 * C6384) *
               C4027 +
           (C61190 * C5887 - C61691 * C5703 - C61190 * C6219 + C92252 * C6385 +
            C61189 * C3513 - C61690 * C3357 - C61189 * C3801 + C61039 * C3945) *
               C4026 +
           (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 + C92252 * C1899 +
            C61189 * C1523 - C61690 * C1378 - C61189 * C1771 + C61039 * C1898) *
               C4025) *
              C92097 * C1373 +
          ((C61189 * C1527 - C61690 * C1379 - C61189 * C1775 + C61039 * C1899 +
            C61190 * C11109 - C61691 * C10868 - C61190 * C11497 +
            C92252 * C11683) *
               C4025 +
           (C61189 * C5887 - C61690 * C5703 - C61189 * C6219 + C61039 * C6385 +
            C61190 * C13979 - C61691 * C13749 - C61190 * C14409 +
            C92252 * C14619) *
               C4026 +
           (C61189 * C5889 - C61690 * C5705 - C61189 * C6221 + C61039 * C6386 +
            C61190 * C44034 - C61691 * C43813 - C61190 * C44484 +
            C92252 * C44694) *
               C4027) *
              C92097 * C1374) *
         C92136 * C92124) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
             C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
             C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
                C61039 +
            (C62513 + C62514 + C62515) * C92252) *
               C92177 * C2664 -
           ((C62516 + C62517 + C62518) * C92252 +
            (C62515 + C62514 + C62513) * C61039) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C64203 + C64204 + C64205) * C61039 +
            (C31254 * C1393 - C31255 * C1380 - C31254 * C1394 + C31249 * C1404 +
             C31256 * C1395 - C31257 * C1381 - C31256 * C1396 + C31250 * C1405 +
             C31258 * C1397 - C31259 * C1382 - C31258 * C1398 +
             C31251 * C1406) *
                C92252) *
               C92177 * C2665 -
           ((C64205 + C64204 + C64203) * C92252 +
            (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
             C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
             C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
                C61039) *
               C92177 * C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                 C61039 +
             C41134 * C92252) *
                C4025 +
            (C66688 + C66689) * C4026 + C66694 * C4027) *
               C2664 -
           ((C40347 * C92252 + C39014 * C61039) * C4027 +
            (C40346 * C92252 + C39015 * C61039) * C4026 +
            (C41135 * C92252 + C41134 * C61039) * C4025) *
               C2665) *
              C92136 * C1971 +
          (((C42892 * C61039 + C42893 * C92252) * C4025 +
            (C41982 * C61039 + C41983 * C92252) * C4026 +
            (C58338 * C61039 + (C36262 * C5717 - C36263 * C5706 -
                                C36262 * C5718 + C92097 * C5724) *
                                   C92252) *
                C4027) *
               C2665 -
           ((C68230 + C68229) * C4027 + (C68228 + C68227) * C4026 +
            (C42892 * C92252 +
             (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                 C61039) *
                C4025) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C31254 +
             (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
             (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
                C61039 +
            ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
             C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
             C19824 * C31251) *
                C92252) *
               C2664 +
           (((C11010 - C11009) * C31254 + (C11012 - C11011) * C31249 +
             C12882 * C31256 + C12883 * C31250 + C23027 * C31258 +
             C23028 * C31251) *
                C61039 +
            ((C11014 - C11013) * C31254 + (C11016 - C11015) * C31249 +
             C12884 * C31256 + C12885 * C31250 + (C9504 - C9505) * C31258 +
             (C9506 - C9507) * C31251) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C31254 + (C199 - C198) * C31249 +
             (C201 - C200) * C31256 + (C203 - C202) * C31250 +
             (C205 - C204) * C31258 + (C207 - C206) * C31251) *
                C61039 +
            (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
             C23028 * C31250 + (C2747 - C2748) * C31258 +
             (C2749 - C2750) * C31251) *
                C92252) *
               C2664 +
           ((C12880 * C31254 + C12881 * C31249 + C19823 * C31256 +
             C19824 * C31250 + (C2748 - C2747) * C31258 +
             (C2750 - C2749) * C31251) *
                C61039 +
            (C11017 * C31254 + C11018 * C31249 + (C9505 - C9504) * C31256 +
             (C9507 - C9506) * C31250 +
             (C92177 * C1464 - C182 * C1382) * C31258 +
             (C92177 * C1472 - C182 * C1398) * C31251) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
              C4027 * C880 - C4108 * C798) *
                 C36262 +
             (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
              C4027 * C888 - C4108 * C811) *
                 C92097) *
                C61039 +
            ((C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C36262 +
             (C67539 - C67540 + C67541 - C67542 + C67543 - C67544) * C92097) *
                C92252) *
               C2664 +
           (((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C36262 +
             (C67540 - C67539 + C67542 - C67541 + C67544 - C67543) * C92097) *
                C61039 +
            ((C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C36262 +
             (C67551 - C67552 + C67553 - C67554 + C67555 - C67556) * C92097) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
             (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
                C61039 +
            ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
             (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
                C92252) *
               C2664 +
           (((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C36262 +
             (C7600 - C7599 + C7602 - C7601 + C7604 - C7603) * C92097) *
                C61039 +
            ((C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
              C4027 * C5804 - C4108 * C5706) *
                 C36262 +
             (C4025 * C1470 - C4106 * C1394 + C4026 * C5809 - C4107 * C5714 +
              C4027 * C5810 - C4108 * C5718) *
                 C92097) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C31254 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C31249 +
            (C61192 - C61193 + C61194 - C61195) * C31256 +
            (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
            C61221 * C31251) *
               C92177 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C31254 +
            (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
             C92252 * C1535) *
                C31249 +
            (C64402 - C64403 + C64404 - C64405) * C31256 +
            (C64406 - C64407 + C64408 - C64409) * C31250 +
            (C64410 - C64411 + C64412 - C64413) * C31258 +
            (C64414 - C64415 + C64416 - C64417) * C31251) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C31254 +
            (C61197 - C61196 + C61199 - C61198) * C31249 +
            (C61201 - C61200 + C61203 - C61202) * C31256 +
            (C61205 - C61204 + C61207 - C61206) * C31250 +
            (C61208 - C61209 + C61210 - C61211) * C31258 +
            (C61212 - C61213 + C61214 - C61215) * C31251) *
               C92177 * C2664 +
           ((C64403 - C64402 + C64405 - C64404) * C31254 +
            (C64407 - C64406 + C64409 - C64408) * C31249 +
            (C64411 - C64410 + C64413 - C64412) * C31256 +
            (C64415 - C64414 + C64417 - C64416) * C31250 +
            (C61039 * C1526 - C61189 * C1375 + C92252 * C1530 -
             C61190 * C1382) *
                C31258 +
            (C61039 * C1534 - C61189 * C1384 + C92252 * C1538 -
             C61190 * C1398) *
                C31251) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C36262 +
             (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                 C92097) *
                C4025 +
            ((C66843 - C66844 + C66845 - C66846) * C36262 +
             (C66847 - C66848 + C66849 - C66850) * C92097) *
                C4026 +
            C66875 * C4027) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C36262 +
             (C61189 * C1390 - C61039 * C1531 + C61190 * C1392 -
              C92252 * C1535) *
                 C92097) *
                C4025 +
            ((C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
              C92252 * C5887) *
                 C36262 +
             (C61189 * C3362 - C61039 * C3517 + C61190 * C5712 -
              C92252 * C5893) *
                 C92097) *
                C4026 +
            ((C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
              C92252 * C5889) *
                 C36262 +
             (C61189 * C5710 - C61039 * C5891 + C61190 * C5716 -
              C92252 * C5895) *
                 C92097) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C36262 +
             (C61197 - C61196 + C61199 - C61198) * C92097) *
                C4025 +
            ((C63447 - C63448 + C63449 - C63450) * C36262 +
             (C63451 - C63452 + C63453 - C63454) * C92097) *
                C4026 +
            ((C68427 - C68428 + C68429 - C68430) * C36262 +
             (C68431 - C68432 + C68433 - C68434) * C92097) *
                C4027) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C36262 +
             (C64407 - C64406 + C64409 - C64408) * C92097) *
                C4025 +
            ((C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
              C61190 * C5704) *
                 C36262 +
             (C61039 * C3518 - C61189 * C3364 + C92252 * C5894 -
              C61190 * C5714) *
                 C92097) *
                C4026 +
            ((C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
              C61190 * C5706) *
                 C36262 +
             (C61039 * C5892 - C61189 * C5708 + C92252 * C5896 -
              C61190 * C5718) *
                 C92097) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
              C31251 * C118 - C31258 * C110) *
                 C182 +
             (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
              C31251 * C356 - C31258 * C350) *
                 C92177) *
                C61039 +
            ((C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C182 +
             (C62747 - C62748 + C62749 - C62750 + C62751 - C62752) * C92177) *
                C92252) *
               C2664 +
           (((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C182 +
             (C62748 - C62747 + C62750 - C62749 + C62752 - C62751) * C92177) *
                C61039 +
            ((C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C182 +
             (C62759 - C62760 + C62761 - C62762 + C62763 - C62764) * C92177) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
              C31258 * C111 - C31251 * C120) *
                 C182 +
             (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
              C31258 * C351 - C31251 * C357) *
                 C92177) *
                C61039 +
            ((C64516 - C64517 + C64518 - C64519 + C64520 - C64521) * C182 +
             (C64522 - C64523 + C64524 - C64525 + C64526 - C64527) * C92177) *
                C92252) *
               C2664 +
           (((C64517 - C64516 + C64519 - C64518 + C64521 - C64520) * C182 +
             (C64523 - C64522 + C64525 - C64524 + C64527 - C64526) * C92177) *
                C61039 +
            ((C31249 * C1393 - C31254 * C1380 + C31250 * C1395 -
              C31256 * C1381 + C31251 * C1397 - C31258 * C1382) *
                 C182 +
             (C31249 * C1602 - C31254 * C1594 + C31250 * C1603 -
              C31256 * C1595 + C31251 * C1604 - C31258 * C1596) *
                 C92177) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C4106 +
             (C92097 * C354 - C36262 * C348) * C4025 +
             (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
             C36943 * C4108 + C36944 * C4027) *
                C61039 +
            ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
             C44149 * C4107 + C44150 * C4026 + C57085 * C4108 +
             C57086 * C4027) *
                C92252) *
               C2664 +
           (((C41400 - C41399) * C4106 + (C41402 - C41401) * C4025 +
             C44151 * C4107 + C44152 * C4026 + C60428 * C4108 +
             C60429 * C4027) *
                C61039 +
            ((C41404 - C41403) * C4106 + (C41406 - C41405) * C4025 +
             C44153 * C4107 + C44154 * C4026 + (C40600 - C40601) * C4108 +
             (C40602 - C40603) * C4027) *
                C92252) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C4106 +
             (C36262 * C349 - C92097 * C355) * C4025 +
             (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
             (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
                C61039 +
            ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
             (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
             (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
                C92252) *
               C2664 +
           (((C43197 - C43196) * C4106 + (C43199 - C43198) * C4025 +
             (C42281 - C42280) * C4107 + (C42283 - C42282) * C4026 +
             (C58635 - C58634) * C4108 + (C58637 - C58636) * C4027) *
                C61039 +
            ((C43201 - C43200) * C4106 + (C43203 - C43202) * C4025 +
             (C42285 - C42284) * C4107 + (C42287 - C42286) * C4026 +
             (C92097 * C5717 - C36262 * C5706) * C4108 +
             (C92097 * C5982 - C36262 * C5976) * C4027) *
                C92252) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) *
                 C31249 +
             C442 * C31250 + C443 * C31251) *
                C61039 +
            (C62839 + C62840 + C62841) * C92252) *
               C2664 -
           ((C62842 + C62843 + C62844) * C92252 +
            (C62841 + C62840 + C62839) * C61039) *
               C2665) *
              C92136 * C1971 +
          (((C64626 + C64627 + C64628) * C61039 +
            (C9769 * C31249 + C9770 * C31250 +
             (C182 * C1464 - C410 * C1382 - C182 * C1596 + C92177 * C1662) *
                 C31251) *
                C92252) *
               C2665 -
           ((C64628 + C64627 + C64626) * C92252 +
            (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
             C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
             C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
                C92097 * C61039 +
            (C67815 + C67816 + C67817) * C92097 * C92252) *
               C2664 -
           ((C67818 + C67819 + C67820) * C92097 * C92252 +
            (C67817 + C67816 + C67815) * C92097 * C61039) *
               C2665) *
              C92136 * C1971 +
          (((C7932 + C7931 + C7930) * C92097 * C61039 +
            (C4106 * C1462 - C4363 * C1380 - C4106 * C1594 + C4025 * C1660 +
             C4107 * C5803 - C4364 * C5704 - C4107 * C5974 + C4026 * C6061 +
             C4108 * C5804 - C4365 * C5706 - C4108 * C5976 + C4027 * C6062) *
                C92097 * C92252) *
               C2665 -
           ((C7930 + C7931 + C7932) * C92097 * C92252 +
            (C4405 + C4404 + C4403) * C92097 * C61039) *
               C2664) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                 C182 +
             (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                 C92177) *
                C31249 +
            ((C61192 - C61193 + C61194 - C61195) * C182 +
             (C61444 - C61445 + C61446 - C61447) * C92177) *
                C31250 +
            C61461 * C31251) *
               C2664 +
           (((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
              C92252 * C1527) *
                 C182 +
             (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
              C92252 * C1717) *
                 C92177) *
                C31249 +
            ((C64402 - C64403 + C64404 - C64405) * C182 +
             (C64727 - C64728 + C64729 - C64730) * C92177) *
                C31250 +
            ((C64410 - C64411 + C64412 - C64413) * C182 +
             (C64731 - C64732 + C64733 - C64734) * C92177) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C61193 - C61192 + C61195 - C61194) * C182 +
             (C61445 - C61444 + C61447 - C61446) * C92177) *
                C31249 +
            ((C61201 - C61200 + C61203 - C61202) * C182 +
             (C61450 - C61449 + C61452 - C61451) * C92177) *
                C31250 +
            ((C61208 - C61209 + C61210 - C61211) * C182 +
             (C61453 - C61454 + C61455 - C61456) * C92177) *
                C31251) *
               C2664 +
           (((C64403 - C64402 + C64405 - C64404) * C182 +
             (C64728 - C64727 + C64730 - C64729) * C92177) *
                C31249 +
            ((C64411 - C64410 + C64413 - C64412) * C182 +
             (C64732 - C64731 + C64734 - C64733) * C92177) *
                C31250 +
            ((C61039 * C1526 - C61189 * C1375 + C92252 * C1530 -
              C61190 * C1382) *
                 C182 +
             (C61039 * C1716 - C61189 * C1592 + C92252 * C1720 -
              C61190 * C1596) *
                 C92177) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C4106 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C4025 +
            (C66843 - C66844 + C66845 - C66846) * C4107 +
            (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
            C67112 * C4027) *
               C92097 * C2664 +
           ((C61189 * C1378 - C61039 * C1523 + C61190 * C1379 -
             C92252 * C1527) *
                C4106 +
            (C61189 * C1589 - C61039 * C1713 + C61190 * C1593 -
             C92252 * C1717) *
                C4025 +
            (C61189 * C3357 - C61039 * C3513 + C61190 * C5703 -
             C92252 * C5887) *
                C4107 +
            (C61189 * C3587 - C61039 * C3731 + C61190 * C5973 -
             C92252 * C6139) *
                C4026 +
            (C61189 * C5702 - C61039 * C5885 + C61190 * C5705 -
             C92252 * C5889) *
                C4108 +
            (C61189 * C5971 - C61039 * C6137 + C61190 * C5975 -
             C92252 * C6140) *
                C4027) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C61193 - C61192 + C61195 - C61194) * C4106 +
            (C61445 - C61444 + C61447 - C61446) * C4025 +
            (C63447 - C63448 + C63449 - C63450) * C4107 +
            (C63757 - C63758 + C63759 - C63760) * C4026 +
            (C68427 - C68428 + C68429 - C68430) * C4108 +
            (C68729 - C68730 + C68731 - C68732) * C4027) *
               C92097 * C2664 +
           ((C64403 - C64402 + C64405 - C64404) * C4106 +
            (C64728 - C64727 + C64730 - C64729) * C4025 +
            (C61039 * C3514 - C61189 * C3358 + C92252 * C5888 -
             C61190 * C5704) *
                C4107 +
            (C61039 * C3732 - C61189 * C3588 + C92252 * C6141 -
             C61190 * C5974) *
                C4026 +
            (C61039 * C5886 - C61189 * C5701 + C92252 * C5890 -
             C61190 * C5706) *
                C4108 +
            (C61039 * C6138 - C61189 * C5972 + C92252 * C6142 -
             C61190 * C5976) *
                C4027) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C61189 +
            (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
             C31251 * C575 - C31258 * C569) *
                C61039 +
            (C62741 - C62742 + C62743 - C62744 + C62745 - C62746) * C61190 +
            (C62993 - C62994 + C62995 - C62996 + C62997 - C62998) * C92252) *
               C92177 * C2664 +
           ((C62742 - C62741 + C62744 - C62743 + C62746 - C62745) * C61189 +
            (C62994 - C62993 + C62996 - C62995 + C62998 - C62997) * C61039 +
            (C62753 - C62754 + C62755 - C62756 + C62757 - C62758) * C61190 +
            (C62999 - C63000 + C63001 - C63002 + C63003 - C63004) * C92252) *
               C92177 * C2665) *
              C92136 * C1971 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C61189 +
            (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
             C31258 * C570 - C31251 * C576) *
                C61039 +
            (C64516 - C64517 + C64518 - C64519 + C64520 - C64521) * C61190 +
            (C64833 - C64834 + C64835 - C64836 + C64837 - C64838) * C92252) *
               C92177 * C2664 +
           ((C64517 - C64516 + C64519 - C64518 + C64521 - C64520) * C61189 +
            (C64834 - C64833 + C64836 - C64835 + C64838 - C64837) * C61039 +
            (C31249 * C1393 - C31254 * C1380 + C31250 * C1395 - C31256 * C1381 +
             C31251 * C1397 - C31258 * C1382) *
                C61190 +
            (C31249 * C1784 - C31254 * C1776 + C31250 * C1785 - C31256 * C1777 +
             C31251 * C1786 - C31258 * C1778) *
                C92252) *
               C92177 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92097 * C114 - C36262 * C108) * C61189 +
             (C92097 * C573 - C36262 * C567) * C61039 +
             (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
                C4025 +
            ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
             C44149 * C61190 + C44487 * C92252) *
                C4026 +
            C67193 * C4027) *
               C2664 +
           (((C41400 - C41399) * C61189 + (C41697 - C41696) * C61039 +
             (C41404 - C41403) * C61190 + (C41699 - C41698) * C92252) *
                C4025 +
            (C44151 * C61189 + C44488 * C61039 + C44153 * C61190 +
             C44489 * C92252) *
                C4026 +
            (C60428 * C61189 + C60749 * C61039 + (C40600 - C40601) * C61190 +
             (C40840 - C40841) * C92252) *
                C4027) *
               C2665) *
              C92136 * C1971 +
          ((((C36262 * C109 - C92097 * C116) * C61189 +
             (C36262 * C568 - C92097 * C574) * C61039 +
             (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
                C4025 +
            ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
             (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
                C4026 +
            ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
             (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
                C4027) *
               C2664 +
           (((C43197 - C43196) * C61189 + (C43513 - C43512) * C61039 +
             (C43201 - C43200) * C61190 + (C43515 - C43514) * C92252) *
                C4025 +
            ((C42281 - C42280) * C61189 + (C42583 - C42582) * C61039 +
             (C42285 - C42284) * C61190 + (C42585 - C42584) * C92252) *
                C4026 +
            ((C58635 - C58634) * C61189 + (C58933 - C58932) * C61039 +
             (C92097 * C5717 - C36262 * C5706) * C61190 +
             (C92097 * C6228 - C36262 * C6222) * C92252) *
                C4027) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C92177 * C183 - C182 * C108) * C61189 +
             (C92177 * C629 - C182 * C567) * C61039 +
             (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                C31249 +
            ((C196 - C197) * C61189 + (C636 - C637) * C61039 + C12880 * C61190 +
             C13529 * C92252) *
                C31250 +
            C61616 * C31251) *
               C2664 +
           (((C11010 - C11009) * C61189 + (C11600 - C11599) * C61039 +
             (C11014 - C11013) * C61190 + (C11602 - C11601) * C92252) *
                C31249 +
            (C12882 * C61189 + C13530 * C61039 + C12884 * C61190 +
             C13531 * C92252) *
                C31250 +
            (C23027 * C61189 + C23662 * C61039 + (C9504 - C9505) * C61190 +
             (C10007 - C10008) * C92252) *
                C31251) *
               C2665) *
              C92136 * C1971 +
          ((((C197 - C196) * C61189 + (C637 - C636) * C61039 + C12882 * C61190 +
             C13530 * C92252) *
                C31249 +
            ((C201 - C200) * C61189 + (C640 - C639) * C61039 + C23027 * C61190 +
             C23662 * C92252) *
                C31250 +
            ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
             (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                C31251) *
               C2664 +
           ((C12880 * C61189 + C13529 * C61039 + C11017 * C61190 +
             C11603 * C92252) *
                C31249 +
            (C19823 * C61189 + C20322 * C61039 + (C9505 - C9504) * C61190 +
             (C10008 - C10007) * C92252) *
                C31250 +
            ((C2748 - C2747) * C61189 + (C3200 - C3199) * C61039 +
             (C92177 * C1464 - C182 * C1382) * C61190 +
             (C92177 * C1844 - C182 * C1778) * C92252) *
                C31251) *
               C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C61189 +
            (C4025 * C629 - C4106 * C567 + C4026 * C1256 - C4107 * C1190 +
             C4027 * C1260 - C4108 * C1194) *
                C61039 +
            (C67533 - C67534 + C67535 - C67536 + C67537 - C67538) * C61190 +
            (C68043 - C68044 + C68045 - C68046 + C68047 - C68048) * C92252) *
               C92097 * C2664 +
           ((C67534 - C67533 + C67536 - C67535 + C67538 - C67537) * C61189 +
            (C68044 - C68043 + C68046 - C68045 + C68048 - C68047) * C61039 +
            (C67545 - C67546 + C67547 - C67548 + C67549 - C67550) * C61190 +
            (C68049 - C68050 + C68051 - C68052 + C68053 - C68054) * C92252) *
               C92097 * C2665) *
              C92136 * C1971 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
            (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
            (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
            (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
               C92097 * C2664 +
           ((C7594 - C7593 + C7596 - C7595 + C7598 - C7597) * C61189 +
            (C8236 - C8235 + C8238 - C8237 + C8240 - C8239) * C61039 +
            (C4025 * C1462 - C4106 * C1380 + C4026 * C5803 - C4107 * C5704 +
             C4027 * C5804 - C4108 * C5706) *
                C61190 +
            (C4025 * C1842 - C4106 * C1776 + C4026 * C6307 - C4107 * C6220 +
             C4027 * C6308 - C4108 * C6222) *
                C92252) *
               C92097 * C2665) *
              C92136 * C1972)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C61189 * C266 - C61690 * C108 - C61189 * C567 +
                       C61039 * C702 + C61190 * C1523 - C61691 * C1378 -
                       C61190 * C1771 + C92252 * C1898) *
                          C92177 * C31249 +
                      (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
                         C2664 -
                     ((C65059 + C65060) * C92177 * C31251 +
                      (C65061 + C65062) * C92177 * C31250 +
                      (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 +
                       C92252 * C1899 + C61189 * C1523 - C61690 * C1378 -
                       C61189 * C1771 + C61039 * C1898) *
                          C92177 * C31249) *
                         C2665) *
                        C92136 * C1971 +
                    (((C65062 + C65061) * C92177 * C31249 +
                      (C65060 + C65059) * C92177 * C31250 +
                      (C61189 * C1526 - C61690 * C1375 - C61189 * C1774 +
                       C61039 * C1895 + C61190 * C1530 - C61691 * C1382 -
                       C61190 * C1778 + C92252 * C1902) *
                          C92177 * C31251) *
                         C2665 -
                     ((C61733 + C61734) * C92177 * C31251 +
                      (C61732 + C61731) * C92177 * C31250 +
                      (C61730 + C61729) * C92177 * C31249) *
                         C2664) *
                        C92136 * C1972)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C61189 * C266 - C61690 * C108 - C61189 * C567 +
                       C61039 * C702 + C61190 * C1523 - C61691 * C1378 -
                       C61190 * C1771 + C92252 * C1898) *
                          C4025 +
                      (C67378 + C67379) * C4026 + C67384 * C4027) *
                         C92097 * C2664 -
                     ((C61190 * C5889 - C61691 * C5705 - C61190 * C6221 +
                       C92252 * C6386 + C61189 * C5885 - C61690 * C5702 -
                       C61189 * C6217 + C61039 * C6384) *
                          C4027 +
                      (C61190 * C5887 - C61691 * C5703 - C61190 * C6219 +
                       C92252 * C6385 + C61189 * C3513 - C61690 * C3357 -
                       C61189 * C3801 + C61039 * C3945) *
                          C4026 +
                      (C61190 * C1527 - C61691 * C1379 - C61190 * C1775 +
                       C92252 * C1899 + C61189 * C1523 - C61690 * C1378 -
                       C61189 * C1771 + C61039 * C1898) *
                          C4025) *
                         C92097 * C2665) *
                        C92136 * C1971 +
                    (((C65062 + C65061) * C4025 +
                      (C61189 * C3514 - C61690 * C3358 - C61189 * C3802 +
                       C61039 * C3946 + C61190 * C5888 - C61691 * C5704 -
                       C61190 * C6220 + C92252 * C6387) *
                          C4026 +
                      (C61189 * C5886 - C61690 * C5701 - C61189 * C6218 +
                       C61039 * C6383 + C61190 * C5890 - C61691 * C5706 -
                       C61190 * C6222 + C92252 * C6388) *
                          C4027) *
                         C92097 * C2665 -
                     ((C69040 + C69039) * C4027 + (C64085 + C64086) * C4026 +
                      (C61730 + C61729) * C4025) *
                         C92097 * C2664) *
                        C92136 * C1972)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C92136 * C97 -
          ((C31258 * C1383 - C31259 * C1375 - C31258 * C1384 + C31251 * C1399 +
            C31256 * C1385 - C31257 * C1376 - C31256 * C1386 + C31250 * C1400 +
            C31254 * C1387 - C31255 * C1377 - C31254 * C1388 + C31249 * C1401) *
               C92252 +
           (C31258 * C120 - C31259 * C111 - C31258 * C121 + C31251 * C129 +
            C31256 * C118 - C31257 * C110 - C31256 * C119 + C31250 * C128 +
            C31254 * C116 - C31255 * C109 - C31254 * C117 + C31249 * C127) *
               C61039) *
              C92177 * C92150 * C92136 * C98 +
          ((C31254 * C118 - C31255 * C110 - C31254 * C119 + C31249 * C128 +
            C31256 * C120 - C31257 * C111 - C31256 * C121 + C31250 * C129 +
            C31258 * C122 - C31259 * C112 - C31258 * C123 + C31251 * C130) *
               C61039 +
           (C31254 * C1385 - C31255 * C1376 - C31254 * C1386 + C31249 * C1400 +
            C31256 * C1383 - C31257 * C1375 - C31256 * C1384 + C31250 * C1399 +
            C31258 * C2667 - C31259 * C2666 - C31258 * C2668 + C31251 * C2669) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31254 * C114 - C31255 * C108 - C31254 * C115 + C31249 * C126 +
            C31256 * C116 - C31257 * C109 - C31256 * C117 + C31250 * C127 +
            C31258 * C118 - C31259 * C110 - C31258 * C119 + C31251 * C128) *
               C61039 +
           (C31254 * C1389 - C31255 * C1378 - C31254 * C1390 + C31249 * C1402 +
            C31256 * C1387 - C31257 * C1377 - C31256 * C1388 + C31250 * C1401 +
            C31258 * C1385 - C31259 * C1376 - C31258 * C1386 + C31251 * C1400) *
               C92252) *
              C92177 * C92150 * C790 -
          ((C35403 + C35404 + C35405) * C92252 +
           (C32074 + C32073 + C32072) * C61039) *
              C92177 * C92150 * C791 +
          ((C32077 + C32076 + C32075) * C61039 +
           (C31254 * C5709 - C31255 * C5702 - C31254 * C5710 + C31249 * C5720 +
            C31256 * C5707 - C31257 * C5701 - C31256 * C5708 + C31250 * C5719 +
            C31258 * C7489 - C31259 * C7488 - C31258 * C7490 + C31251 * C7491) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C36751 * C61039 + C39015 * C92252) * C4026 +
           (C36752 * C61039 + C39014 * C92252) * C4027) *
              C92150 * C92136 * C97 -
          ((C58338 * C92252 + C37780 * C61039) * C4027 +
           (C41982 * C92252 + C37779 * C61039) * C4026 +
           (C42892 * C92252 +
            (C36262 * C116 - C36263 * C109 - C36262 * C117 + C92097 * C127) *
                C61039) *
               C4025) *
              C92150 * C92136 * C98 +
          (((C36262 * C118 - C36263 * C110 - C36262 * C119 + C92097 * C128) *
                C61039 +
            (C36262 * C1385 - C36263 * C1376 - C36262 * C1386 +
             C92097 * C1400) *
                C92252) *
               C4025 +
           ((C36262 * C804 - C36263 * C795 - C36262 * C805 + C92097 * C819) *
                C61039 +
            (C36262 * C3365 - C36263 * C3359 - C36262 * C3366 +
             C92097 * C3371) *
                C92252) *
               C4026 +
           ((C36262 * C814 - C36263 * C800 - C36262 * C815 + C92097 * C824) *
                C61039 +
            (C36262 * C7489 - C36263 * C7488 - C36262 * C7490 +
             C92097 * C7491) *
                C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C36262 * C114 - C36263 * C108 - C36262 * C115 + C92097 * C126) *
                C61039 +
            C41134 * C92252) *
               C4025 +
           (C66688 + C66689) * C4026 + C66694 * C4027) *
              C92150 * C790 -
          ((C66692 + C66693) * C4027 + (C66691 + C66690) * C4026 +
           (C66689 + C66688) * C4025) *
              C92150 * C791 +
          (C66694 * C4025 + (C66693 + C66692) * C4026 +
           (C36754 * C61039 + (C36262 * C38991 - C36263 * C38990 -
                               C36262 * C38992 + C92097 * C38993) *
                                  C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C197 - C196) * C31254 + (C199 - C198) * C31249 +
            (C201 - C200) * C31256 + (C203 - C202) * C31250 +
            (C205 - C204) * C31258 + (C207 - C206) * C31251) *
               C61039 +
           (C12882 * C31254 + C12883 * C31249 + C23027 * C31256 +
            C23028 * C31250 + (C2747 - C2748) * C31258 +
            (C2749 - C2750) * C31251) *
               C92252) *
              C92150 * C92136 * C98 +
          ((C212 * C31254 + C213 * C31249 + C214 * C31256 + C215 * C31250 +
            (C209 - C208) * C31258 + (C211 - C210) * C31251) *
               C61039 +
           (C19823 * C31254 + C19824 * C31249 + (C2748 - C2747) * C31256 +
            (C2750 - C2749) * C31250 +
            (C92177 * C2736 - C182 * C2666) * C31258 +
            (C92177 * C2737 - C182 * C2668) * C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92177 * C183 - C182 * C108) * C31254 +
            (C92177 * C189 - C182 * C115) * C31249 + (C196 - C197) * C31256 +
            (C198 - C199) * C31250 + C212 * C31258 + C213 * C31251) *
               C61039 +
           ((C11009 - C11010) * C31254 + (C11011 - C11012) * C31249 +
            C12880 * C31256 + C12881 * C31250 + C19823 * C31258 +
            C19824 * C31251) *
               C92252) *
              C92150 * C790 +
          (((C182 * C797 - C92177 * C876) * C31254 +
            (C182 * C809 - C92177 * C884) * C31249 + (C2046 - C2047) * C31256 +
            (C2048 - C2049) * C31250 + (C2050 - C2051) * C31258 +
            (C2052 - C2053) * C31251) *
               C61039 +
           ((C13874 - C13875) * C31254 + (C13876 - C13877) * C31249 +
            (C11889 - C11890) * C31256 + (C11891 - C11892) * C31250 +
            (C22059 - C22060) * C31258 + (C22061 - C22062) * C31251) *
               C92252) *
              C92150 * C791 +
          (((C92177 * C880 - C182 * C798) * C31254 +
            (C92177 * C888 - C182 * C811) * C31249 +
            (C92177 * C881 - C182 * C799) * C31256 +
            (C92177 * C889 - C182 * C813) * C31250 +
            (C92177 * C882 - C182 * C800) * C31258 +
            (C92177 * C890 - C182 * C815) * C31251) *
               C61039 +
           ((C92177 * C5799 - C182 * C5702) * C31254 +
            (C92177 * C5805 - C182 * C5710) * C31249 +
            (C92177 * C5800 - C182 * C5701) * C31256 +
            (C92177 * C5806 - C182 * C5708) * C31250 +
            (C92177 * C7590 - C182 * C7488) * C31258 +
            (C92177 * C7591 - C182 * C7490) * C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C36262 +
            (C4117 - C4116 + C4119 - C4118 + C4121 - C4120) * C92097) *
               C61039 +
           ((C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C36262 +
            (C7599 - C7600 + C7601 - C7602 + C7603 - C7604) * C92097) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C36262 +
            (C4129 - C4128 + C4131 - C4130 + C4133 - C4132) * C92097) *
               C61039 +
           ((C4025 * C1459 - C4106 * C1376 + C4026 * C3441 - C4107 * C3359 +
             C4027 * C7590 - C4108 * C7488) *
                C36262 +
            (C4025 * C1467 - C4106 * C1386 + C4026 * C3445 - C4107 * C3366 +
             C4027 * C7591 - C4108 * C7490) *
                C92097) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4025 * C183 - C4106 * C108 + C4026 * C876 - C4107 * C797 +
             C4027 * C880 - C4108 * C798) *
                C36262 +
            (C4025 * C189 - C4106 * C115 + C4026 * C884 - C4107 * C809 +
             C4027 * C888 - C4108 * C811) *
                C92097) *
               C61039 +
           ((C4025 * C1457 - C4106 * C1378 + C4026 * C3439 - C4107 * C3357 +
             C4027 * C5799 - C4108 * C5702) *
                C36262 +
            (C4025 * C1465 - C4106 * C1390 + C4026 * C3443 - C4107 * C3362 +
             C4027 * C5805 - C4108 * C5710) *
                C92097) *
               C92252) *
              C92150 * C790 +
          (((C4106 * C797 - C4025 * C876 + C4107 * C798 - C4026 * C880 +
             C4108 * C4815 - C4027 * C4948) *
                C36262 +
            (C4106 * C809 - C4025 * C884 + C4107 * C811 - C4026 * C888 +
             C4108 * C4821 - C4027 * C4952) *
                C92097) *
               C61039 +
           ((C4106 * C3357 - C4025 * C3439 + C4107 * C5702 - C4026 * C5799 +
             C4108 * C8454 - C4027 * C8588) *
                C36262 +
            (C4106 * C3362 - C4025 * C3443 + C4107 * C5710 - C4026 * C5805 +
             C4108 * C8457 - C4027 * C8590) *
                C92097) *
               C92252) *
              C92150 * C791 +
          (((C4025 * C880 - C4106 * C798 + C4026 * C4948 - C4107 * C4815 +
             C4027 * C4950 - C4108 * C4816) *
                C36262 +
            (C4025 * C888 - C4106 * C811 + C4026 * C4952 - C4107 * C4821 +
             C4027 * C4954 - C4108 * C4823) *
                C92097) *
               C61039 +
           ((C4025 * C5799 - C4106 * C5702 + C4026 * C8588 - C4107 * C8454 +
             C4027 * C39084 - C4108 * C38990) *
                C36262 +
            (C4025 * C5805 - C4106 * C5710 + C4026 * C8590 - C4107 * C8457 +
             C4027 * C39085 - C4108 * C38992) *
                C92097) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C31254 +
           (C61197 - C61196 + C61199 - C61198) * C31249 +
           (C61201 - C61200 + C61203 - C61202) * C31256 +
           (C61205 - C61204 + C61207 - C61206) * C31250 +
           (C61208 - C61209 + C61210 - C61211) * C31258 +
           (C61212 - C61213 + C61214 - C61215) * C31251) *
              C92177 * C92150 * C92136 * C98 +
          (C61220 * C31254 + C61221 * C31249 +
           (C61209 - C61208 + C61211 - C61210) * C31256 +
           (C61213 - C61212 + C61215 - C61214) * C31250 +
           (C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
               C31258 +
           (C61039 * C276 - C61189 * C123 + C92252 * C2817 - C61190 * C2668) *
               C31251) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C31254 +
           (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
               C31249 +
           (C61192 - C61193 + C61194 - C61195) * C31256 +
           (C61196 - C61197 + C61198 - C61199) * C31250 + C61220 * C31258 +
           C61221 * C31251) *
              C92177 * C92150 * C790 +
          ((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
               C31254 +
           (C61189 * C809 - C61039 * C950 + C61190 * C3362 - C92252 * C3517) *
               C31249 +
           (C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
               C31256 +
           (C61189 * C807 - C61039 * C951 + C61190 * C3364 - C92252 * C3518) *
               C31250 +
           (C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
               C31258 +
           (C61189 * C805 - C61039 * C952 + C61190 * C3366 - C92252 * C3519) *
               C31251) *
              C92177 * C92150 * C791 +
          ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C31254 +
           (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
               C31249 +
           (C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
               C31256 +
           (C61039 * C955 - C61189 * C813 + C92252 * C5892 - C61190 * C5708) *
               C31250 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C31258 +
           (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
               C31251) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
                C36262 +
            (C61039 * C950 - C61189 * C809 + C92252 * C3517 - C61190 * C3362) *
                C92097) *
               C4026 +
           ((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C36262 +
            (C61039 * C954 - C61189 * C811 + C92252 * C5891 - C61190 * C5710) *
                C92097) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C36262 +
            (C61197 - C61196 + C61199 - C61198) * C92097) *
               C4025 +
           ((C63447 - C63448 + C63449 - C63450) * C36262 +
            (C63451 - C63452 + C63453 - C63454) * C92097) *
               C4026 +
           ((C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
                C36262 +
            (C61189 * C813 - C61039 * C955 + C61190 * C5708 - C92252 * C5892) *
                C92097) *
               C4027) *
              C92150 * C92136 * C98 +
          ((C61220 * C36262 + C61221 * C92097) * C4025 +
           ((C63456 - C63455 + C63458 - C63457) * C36262 +
            (C63460 - C63459 + C63462 - C63461) * C92097) *
               C4026 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C36262 +
            (C61039 * C956 - C61189 * C815 + C92252 * C7703 - C61190 * C7490) *
                C92097) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C36262 +
            (C61039 * C272 - C61189 * C115 + C92252 * C1531 - C61190 * C1390) *
                C92097) *
               C4025 +
           ((C66843 - C66844 + C66845 - C66846) * C36262 +
            (C66847 - C66848 + C66849 - C66850) * C92097) *
               C4026 +
           C66875 * C4027) *
              C92150 * C790 +
          (((C66844 - C66843 + C66846 - C66845) * C36262 +
            (C66848 - C66847 + C66850 - C66849) * C92097) *
               C4025 +
           ((C66852 - C66851 + C66854 - C66853) * C36262 +
            (C66856 - C66855 + C66858 - C66857) * C92097) *
               C4026 +
           ((C66859 - C66860 + C66861 - C66862) * C36262 +
            (C66863 - C66864 + C66865 - C66866) * C92097) *
               C4027) *
              C92150 * C791 +
          (C66875 * C4025 +
           ((C66860 - C66859 + C66862 - C66861) * C36262 +
            (C66864 - C66863 + C66866 - C66865) * C92097) *
               C4026 +
           ((C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
             C61190 * C38990) *
                C36262 +
            (C61039 * C5036 - C61189 * C4823 + C92252 * C39153 -
             C61190 * C38992) *
                C92097) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
             C31258 * C111 - C31251 * C120) *
                C182 +
            (C31254 * C349 - C31249 * C355 + C31256 * C350 - C31250 * C356 +
             C31258 * C351 - C31251 * C357) *
                C92177) *
               C61039 +
           ((C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
             C31258 * C1375 - C31251 * C1383) *
                C182 +
            (C31254 * C1590 - C31249 * C1598 + C31256 * C1591 - C31250 * C1599 +
             C31258 * C1592 - C31251 * C1600) *
                C92177) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
             C31251 * C122 - C31258 * C112) *
                C182 +
            (C31249 * C356 - C31254 * C350 + C31250 * C357 - C31256 * C351 +
             C31251 * C358 - C31258 * C352) *
                C92177) *
               C61039 +
           ((C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
             C31251 * C2667 - C31258 * C2666) *
                C182 +
            (C31249 * C1599 - C31254 * C1591 + C31250 * C1600 - C31256 * C1592 +
             C31251 * C2897 - C31258 * C2896) *
                C92177) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
             C31251 * C118 - C31258 * C110) *
                C182 +
            (C31249 * C354 - C31254 * C348 + C31250 * C355 - C31256 * C349 +
             C31251 * C356 - C31258 * C350) *
                C92177) *
               C61039 +
           ((C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
             C31251 * C1385 - C31258 * C1376) *
                C182 +
            (C31249 * C1597 - C31254 * C1589 + C31250 * C1598 - C31256 * C1590 +
             C31251 * C1599 - C31258 * C1591) *
                C92177) *
               C92252) *
              C92150 * C790 +
          (((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C182 +
            (C32307 - C32306 + C32309 - C32308 + C32311 - C32310) * C92177) *
               C61039 +
           ((C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C182 +
            (C35706 - C35707 + C35708 - C35709 + C35710 - C35711) * C92177) *
               C92252) *
              C92150 * C791 +
          (((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C182 +
            (C32319 - C32318 + C32321 - C32320 + C32323 - C32322) * C92177) *
               C61039 +
           ((C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
             C31251 * C7489 - C31258 * C7488) *
                C182 +
            (C31249 * C5977 - C31254 * C5971 + C31250 * C5978 - C31256 * C5972 +
             C31251 * C7811 - C31258 * C7810) *
                C92177) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C4106 +
            (C36262 * C349 - C92097 * C355) * C4025 +
            (C37983 - C37984) * C4107 + (C37985 - C37986) * C4026 +
            (C37987 - C37988) * C4108 + (C37989 - C37990) * C4027) *
               C61039 +
           ((C43196 - C43197) * C4106 + (C43198 - C43199) * C4025 +
            (C42280 - C42281) * C4107 + (C42282 - C42283) * C4026 +
            (C58634 - C58635) * C4108 + (C58636 - C58637) * C4027) *
               C92252) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C4106 +
            (C92097 * C356 - C36262 * C350) * C4025 +
            (C92097 * C804 - C36262 * C795) * C4107 +
            (C92097 * C1018 - C36262 * C1010) * C4026 +
            (C92097 * C814 - C36262 * C800) * C4108 +
            (C92097 * C1022 - C36262 * C1014) * C4027) *
               C61039 +
           ((C92097 * C1385 - C36262 * C1376) * C4106 +
            (C92097 * C1599 - C36262 * C1591) * C4025 +
            (C92097 * C3365 - C36262 * C3359) * C4107 +
            (C92097 * C3593 - C36262 * C3589) * C4026 +
            (C92097 * C7489 - C36262 * C7488) * C4108 +
            (C92097 * C7811 - C36262 * C7810) * C4027) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C4106 +
            (C92097 * C354 - C36262 * C348) * C4025 +
            (C36927 - C36928) * C4107 + (C36929 - C36930) * C4026 +
            C36943 * C4108 + C36944 * C4027) *
               C61039 +
           ((C41399 - C41400) * C4106 + (C41401 - C41402) * C4025 +
            C44149 * C4107 + C44150 * C4026 + C57085 * C4108 + C57086 * C4027) *
               C92252) *
              C92150 * C790 +
          (((C36928 - C36927) * C4106 + (C36930 - C36929) * C4025 +
            (C36932 - C36931) * C4107 + (C36934 - C36933) * C4026 +
            (C36936 - C36935) * C4108 + (C36938 - C36937) * C4027) *
               C61039 +
           (C44151 * C4106 + C44152 * C4025 + C60428 * C4107 + C60429 * C4026 +
            (C39235 - C39236) * C4108 + (C39237 - C39238) * C4027) *
               C92252) *
              C92150 * C791 +
          ((C36943 * C4106 + C36944 * C4025 + C36945 * C4107 + C36946 * C4026 +
            (C36940 - C36939) * C4108 + (C36942 - C36941) * C4027) *
               C61039 +
           (C57085 * C4106 + C57086 * C4025 + (C39236 - C39235) * C4107 +
            (C39238 - C39237) * C4026 +
            (C92097 * C38991 - C36262 * C38990) * C4108 +
            (C92097 * C39225 - C36262 * C39224) * C4027) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C92136 * C97 -
          ((C2984 * C31251 + C2985 * C31250 + C2986 * C31249) * C92252 +
           (C444 * C31251 + C443 * C31250 + C442 * C31249) * C61039) *
              C92150 * C92136 * C98 +
          ((C443 * C31249 + C444 * C31250 + C445 * C31251) * C61039 +
           (C2985 * C31249 + C2984 * C31250 +
            (C182 * C2736 - C410 * C2666 - C182 * C2896 + C92177 * C2964) *
                C31251) *
               C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C182 * C183 - C410 * C108 - C182 * C348 + C92177 * C411) * C31249 +
            C442 * C31250 + C443 * C31251) *
               C61039 +
           (C11337 * C31249 + C2986 * C31250 + C2985 * C31251) * C92252) *
              C92150 * C790 -
          ((C22379 * C31251 + C12221 * C31250 + C14208 * C31249) * C92252 +
           (C2292 * C31251 + C2293 * C31250 +
            (C182 * C876 - C410 * C797 - C182 * C1008 + C92177 * C1077) *
                C31249) *
               C61039) *
              C92150 * C791 +
          (((C182 * C880 - C410 * C798 - C182 * C1012 + C92177 * C1078) *
                C31249 +
            (C182 * C881 - C410 * C799 - C182 * C1013 + C92177 * C1079) *
                C31250 +
            (C182 * C882 - C410 * C800 - C182 * C1014 + C92177 * C1080) *
                C31251) *
               C61039 +
           ((C182 * C5799 - C410 * C5702 - C182 * C5971 + C92177 * C6058) *
                C31249 +
            (C182 * C5800 - C410 * C5701 - C182 * C5972 + C92177 * C6057) *
                C31250 +
            (C182 * C7590 - C410 * C7488 - C182 * C7810 + C92177 * C7910) *
                C31251) *
               C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C92136 * C97 -
          ((C7930 + C7931 + C7932) * C92097 * C92252 +
           (C4405 + C4404 + C4403) * C92097 * C61039) *
              C92150 * C92136 * C98 +
          ((C4408 + C4407 + C4406) * C92097 * C61039 +
           (C4106 * C1459 - C4363 * C1376 - C4106 * C1591 + C4025 * C1656 +
            C4107 * C3441 - C4364 * C3359 - C4107 * C3589 + C4026 * C3663 +
            C4108 * C7590 - C4365 * C7488 - C4108 * C7810 + C4027 * C7910) *
               C92097 * C92252) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4106 * C183 - C4363 * C108 - C4106 * C348 + C4025 * C411 +
            C4107 * C876 - C4364 * C797 - C4107 * C1008 + C4026 * C1077 +
            C4108 * C880 - C4365 * C798 - C4108 * C1012 + C4027 * C1078) *
               C92097 * C61039 +
           (C4106 * C1457 - C4363 * C1378 - C4106 * C1589 + C4025 * C1658 +
            C4107 * C3439 - C4364 * C3357 - C4107 * C3587 + C4026 * C3661 +
            C4108 * C5799 - C4365 * C5702 - C4108 * C5971 + C4027 * C6058) *
               C92097 * C92252) *
              C92150 * C790 -
          ((C4108 * C8588 - C4365 * C8454 - C4108 * C8800 + C4027 * C8918 +
            C4107 * C5799 - C4364 * C5702 - C4107 * C5971 + C4026 * C6058 +
            C4106 * C3439 - C4363 * C3357 - C4106 * C3587 + C4025 * C3661) *
               C92097 * C92252 +
           (C4108 * C4948 - C4365 * C4815 - C4108 * C5139 + C4027 * C5252 +
            C4107 * C880 - C4364 * C798 - C4107 * C1012 + C4026 * C1078 +
            C4106 * C876 - C4363 * C797 - C4106 * C1008 + C4025 * C1077) *
               C92097 * C61039) *
              C92150 * C791 +
          ((C4106 * C880 - C4363 * C798 - C4106 * C1012 + C4025 * C1078 +
            C4107 * C4948 - C4364 * C4815 - C4107 * C5139 + C4026 * C5252 +
            C4108 * C4950 - C4365 * C4816 - C4108 * C5141 + C4027 * C5253) *
               C92097 * C61039 +
           (C4106 * C5799 - C4363 * C5702 - C4106 * C5971 + C4025 * C6058 +
            C4107 * C8588 - C4364 * C8454 - C4107 * C8800 + C4026 * C8918 +
            C4108 * C39084 - C4365 * C38990 - C4108 * C39224 + C4027 * C39304) *
               C92097 * C92252) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C92136 * C97 +
          (((C61193 - C61192 + C61195 - C61194) * C182 +
            (C61445 - C61444 + C61447 - C61446) * C92177) *
               C31249 +
           ((C61201 - C61200 + C61203 - C61202) * C182 +
            (C61450 - C61449 + C61452 - C61451) * C92177) *
               C31250 +
           ((C61208 - C61209 + C61210 - C61211) * C182 +
            (C61453 - C61454 + C61455 - C61456) * C92177) *
               C31251) *
              C92150 * C92136 * C98 +
          (C61461 * C31249 +
           ((C61209 - C61208 + C61211 - C61210) * C182 +
            (C61454 - C61453 + C61456 - C61455) * C92177) *
               C31250 +
           ((C61039 * C270 - C61189 * C112 + C92252 * C2816 - C61190 * C2666) *
                C182 +
            (C61039 * C499 - C61189 * C352 + C92252 * C3052 - C61190 * C2896) *
                C92177) *
               C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
                C182 +
            (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
                C92177) *
               C31249 +
           ((C61192 - C61193 + C61194 - C61195) * C182 +
            (C61444 - C61445 + C61446 - C61447) * C92177) *
               C31250 +
           C61461 * C31251) *
              C92150 * C790 +
          (((C61189 * C797 - C61039 * C942 + C61190 * C3357 - C92252 * C3513) *
                C182 +
            (C61189 * C1008 - C61039 * C1132 + C61190 * C3587 -
             C92252 * C3731) *
                C92177) *
               C31249 +
           ((C61189 * C796 - C61039 * C943 + C61190 * C3358 - C92252 * C3514) *
                C182 +
            (C61189 * C1009 - C61039 * C1133 + C61190 * C3588 -
             C92252 * C3732) *
                C92177) *
               C31250 +
           ((C61189 * C795 - C61039 * C944 + C61190 * C3359 - C92252 * C3515) *
                C182 +
            (C61189 * C1010 - C61039 * C1134 + C61190 * C3589 -
             C92252 * C3733) *
                C92177) *
               C31251) *
              C92150 * C791 +
          (((C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
                C182 +
            (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 -
             C61190 * C5971) *
                C92177) *
               C31249 +
           ((C61039 * C947 - C61189 * C799 + C92252 * C5886 - C61190 * C5701) *
                C182 +
            (C61039 * C1137 - C61189 * C1013 + C92252 * C6138 -
             C61190 * C5972) *
                C92177) *
               C31250 +
           ((C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
                C182 +
            (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 -
             C61190 * C7810) *
                C92177) *
               C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C61039 * C942 - C61189 * C797 + C92252 * C3513 - C61190 * C3357) *
               C4107 +
           (C61039 * C1132 - C61189 * C1008 + C92252 * C3731 - C61190 * C3587) *
               C4026 +
           (C61039 * C946 - C61189 * C798 + C92252 * C5885 - C61190 * C5702) *
               C4108 +
           (C61039 * C1136 - C61189 * C1012 + C92252 * C6137 - C61190 * C5971) *
               C4027) *
              C92097 * C92150 * C92136 * C97 +
          ((C61193 - C61192 + C61195 - C61194) * C4106 +
           (C61445 - C61444 + C61447 - C61446) * C4025 +
           (C63447 - C63448 + C63449 - C63450) * C4107 +
           (C63757 - C63758 + C63759 - C63760) * C4026 +
           (C61189 * C799 - C61039 * C947 + C61190 * C5701 - C92252 * C5886) *
               C4108 +
           (C61189 * C1013 - C61039 * C1137 + C61190 * C5972 - C92252 * C6138) *
               C4027) *
              C92097 * C92150 * C92136 * C98 +
          (C61220 * C4106 + C61459 * C4025 +
           (C63456 - C63455 + C63458 - C63457) * C4107 +
           (C63762 - C63761 + C63764 - C63763) * C4026 +
           (C61039 * C948 - C61189 * C800 + C92252 * C7702 - C61190 * C7488) *
               C4108 +
           (C61039 * C1138 - C61189 * C1014 + C92252 * C8030 - C61190 * C7810) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61039 * C266 - C61189 * C108 + C92252 * C1523 - C61190 * C1378) *
               C4106 +
           (C61039 * C495 - C61189 * C348 + C92252 * C1713 - C61190 * C1589) *
               C4025 +
           (C66843 - C66844 + C66845 - C66846) * C4107 +
           (C67098 - C67099 + C67100 - C67101) * C4026 + C66871 * C4108 +
           C67112 * C4027) *
              C92097 * C92150 * C790 +
          ((C66844 - C66843 + C66846 - C66845) * C4106 +
           (C67099 - C67098 + C67101 - C67100) * C4025 +
           (C66852 - C66851 + C66854 - C66853) * C4107 +
           (C67103 - C67102 + C67105 - C67104) * C4026 +
           (C66859 - C66860 + C66861 - C66862) * C4108 +
           (C67106 - C67107 + C67108 - C67109) * C4027) *
              C92097 * C92150 * C791 +
          (C66871 * C4106 + C67112 * C4025 +
           (C66860 - C66859 + C66862 - C66861) * C4107 +
           (C67107 - C67106 + C67109 - C67108) * C4026 +
           (C61039 * C5032 - C61189 * C4816 + C92252 * C39152 -
            C61190 * C38990) *
               C4108 +
           (C61039 * C5331 - C61189 * C5141 + C92252 * C39371 -
            C61190 * C39224) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C92136 * C97 +
          ((C31254 * C109 - C31249 * C116 + C31256 * C110 - C31250 * C118 +
            C31258 * C111 - C31251 * C120) *
               C61189 +
           (C31254 * C568 - C31249 * C574 + C31256 * C569 - C31250 * C575 +
            C31258 * C570 - C31251 * C576) *
               C61039 +
           (C31254 * C1377 - C31249 * C1387 + C31256 * C1376 - C31250 * C1385 +
            C31258 * C1375 - C31251 * C1383) *
               C61190 +
           (C31254 * C1772 - C31249 * C1780 + C31256 * C1773 - C31250 * C1781 +
            C31258 * C1774 - C31251 * C1782) *
               C92252) *
              C92177 * C92150 * C92136 * C98 +
          ((C31249 * C118 - C31254 * C110 + C31250 * C120 - C31256 * C111 +
            C31251 * C122 - C31258 * C112) *
               C61189 +
           (C31249 * C575 - C31254 * C569 + C31250 * C576 - C31256 * C570 +
            C31251 * C577 - C31258 * C571) *
               C61039 +
           (C31249 * C1385 - C31254 * C1376 + C31250 * C1383 - C31256 * C1375 +
            C31251 * C2667 - C31258 * C2666) *
               C61190 +
           (C31249 * C1781 - C31254 * C1773 + C31250 * C1782 - C31256 * C1774 +
            C31251 * C3126 - C31258 * C3125) *
               C92252) *
              C92177 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31249 * C114 - C31254 * C108 + C31250 * C116 - C31256 * C109 +
            C31251 * C118 - C31258 * C110) *
               C61189 +
           (C31249 * C573 - C31254 * C567 + C31250 * C574 - C31256 * C568 +
            C31251 * C575 - C31258 * C569) *
               C61039 +
           (C31249 * C1389 - C31254 * C1378 + C31250 * C1387 - C31256 * C1377 +
            C31251 * C1385 - C31258 * C1376) *
               C61190 +
           (C31249 * C1779 - C31254 * C1771 + C31250 * C1780 - C31256 * C1772 +
            C31251 * C1781 - C31258 * C1773) *
               C92252) *
              C92177 * C92150 * C790 +
          ((C32301 - C32300 + C32303 - C32302 + C32305 - C32304) * C61189 +
           (C32547 - C32546 + C32549 - C32548 + C32551 - C32550) * C61039 +
           (C35700 - C35701 + C35702 - C35703 + C35704 - C35705) * C61190 +
           (C36006 - C36007 + C36008 - C36009 + C36010 - C36011) * C92252) *
              C92177 * C92150 * C791 +
          ((C32313 - C32312 + C32315 - C32314 + C32317 - C32316) * C61189 +
           (C32553 - C32552 + C32555 - C32554 + C32557 - C32556) * C61039 +
           (C31249 * C5709 - C31254 * C5702 + C31250 * C5707 - C31256 * C5701 +
            C31251 * C7489 - C31258 * C7488) *
               C61190 +
           (C31249 * C6223 - C31254 * C6217 + C31250 * C6224 - C31256 * C6218 +
            C31251 * C8134 - C31258 * C8133) *
               C92252) *
              C92177 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           (C36943 * C61189 + C37114 * C61039 + C57085 * C61190 +
            C57319 * C92252) *
               C4027) *
              C92150 * C92136 * C97 +
          (((C36262 * C109 - C92097 * C116) * C61189 +
            (C36262 * C568 - C92097 * C574) * C61039 +
            (C43196 - C43197) * C61190 + (C43512 - C43513) * C92252) *
               C4025 +
           ((C37983 - C37984) * C61189 + (C38193 - C38194) * C61039 +
            (C42280 - C42281) * C61190 + (C42582 - C42583) * C92252) *
               C4026 +
           ((C37987 - C37988) * C61189 + (C38195 - C38196) * C61039 +
            (C58634 - C58635) * C61190 + (C58932 - C58933) * C92252) *
               C4027) *
              C92150 * C92136 * C98 +
          (((C92097 * C118 - C36262 * C110) * C61189 +
            (C92097 * C575 - C36262 * C569) * C61039 +
            (C92097 * C1385 - C36262 * C1376) * C61190 +
            (C92097 * C1781 - C36262 * C1773) * C92252) *
               C4025 +
           ((C92097 * C804 - C36262 * C795) * C61189 +
            (C92097 * C1200 - C36262 * C1192) * C61039 +
            (C92097 * C3365 - C36262 * C3359) * C61190 +
            (C92097 * C3807 - C36262 * C3803) * C92252) *
               C4026 +
           ((C92097 * C814 - C36262 * C800) * C61189 +
            (C92097 * C1204 - C36262 * C1196) * C61039 +
            (C92097 * C7489 - C36262 * C7488) * C61190 +
            (C92097 * C8134 - C36262 * C8133) * C92252) *
               C4027) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C92097 * C114 - C36262 * C108) * C61189 +
            (C92097 * C573 - C36262 * C567) * C61039 +
            (C41399 - C41400) * C61190 + (C41696 - C41697) * C92252) *
               C4025 +
           ((C36927 - C36928) * C61189 + (C37104 - C37105) * C61039 +
            C44149 * C61190 + C44487 * C92252) *
               C4026 +
           C67193 * C4027) *
              C92150 * C790 +
          (((C36928 - C36927) * C61189 + (C37105 - C37104) * C61039 +
            C44151 * C61190 + C44488 * C92252) *
               C4025 +
           ((C36932 - C36931) * C61189 + (C37108 - C37107) * C61039 +
            C60428 * C61190 + C60749 * C92252) *
               C4026 +
           ((C36936 - C36935) * C61189 + (C37111 - C37110) * C61039 +
            (C39235 - C39236) * C61190 + (C39447 - C39448) * C92252) *
               C4027) *
              C92150 * C791 +
          (C67193 * C4025 +
           (C36945 * C61189 + C37115 * C61039 + (C39236 - C39235) * C61190 +
            (C39448 - C39447) * C92252) *
               C4026 +
           ((C36940 - C36939) * C61189 + (C37113 - C37112) * C61039 +
            (C92097 * C38991 - C36262 * C38990) * C61190 +
            (C92097 * C39441 - C36262 * C39440) * C92252) *
               C4027) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C61189 +
                      (C92177 * C629 - C182 * C567) * C61039 +
                      (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                         C31249 +
                     ((C196 - C197) * C61189 + (C636 - C637) * C61039 +
                      C12880 * C61190 + C13529 * C92252) *
                         C31250 +
                     C61616 * C31251) *
                        C92150 * C92136 * C97 +
                    (((C197 - C196) * C61189 + (C637 - C636) * C61039 +
                      C12882 * C61190 + C13530 * C92252) *
                         C31249 +
                     ((C201 - C200) * C61189 + (C640 - C639) * C61039 +
                      C23027 * C61190 + C23662 * C92252) *
                         C31250 +
                     ((C205 - C204) * C61189 + (C643 - C642) * C61039 +
                      (C2747 - C2748) * C61190 + (C3199 - C3200) * C92252) *
                         C31251) *
                        C92150 * C92136 * C98 +
                    (C61616 * C31249 +
                     (C214 * C61189 + C647 * C61039 + (C2748 - C2747) * C61190 +
                      (C3200 - C3199) * C92252) *
                         C31250 +
                     ((C209 - C208) * C61189 + (C645 - C644) * C61039 +
                      (C92177 * C2736 - C182 * C2666) * C61190 +
                      (C92177 * C3193 - C182 * C3125) * C92252) *
                         C31251) *
                        C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C92177 * C183 - C182 * C108) * C61189 +
                      (C92177 * C629 - C182 * C567) * C61039 +
                      (C11009 - C11010) * C61190 + (C11599 - C11600) * C92252) *
                         C31249 +
                     ((C196 - C197) * C61189 + (C636 - C637) * C61039 +
                      C12880 * C61190 + C13529 * C92252) *
                         C31250 +
                     C61616 * C31251) *
                        C92150 * C790 +
                    (((C182 * C797 - C92177 * C876) * C61189 +
                      (C182 * C1190 - C92177 * C1256) * C61039 +
                      (C13874 - C13875) * C61190 + (C14518 - C14519) * C92252) *
                         C31249 +
                     ((C2046 - C2047) * C61189 + (C2502 - C2503) * C61039 +
                      (C11889 - C11890) * C61190 + (C12526 - C12527) * C92252) *
                         C31250 +
                     ((C2050 - C2051) * C61189 + (C2504 - C2505) * C61039 +
                      (C22059 - C22060) * C61190 + (C22682 - C22683) * C92252) *
                         C31251) *
                        C92150 * C791 +
                    (((C92177 * C880 - C182 * C798) * C61189 +
                      (C92177 * C1260 - C182 * C1194) * C61039 +
                      (C92177 * C5799 - C182 * C5702) * C61190 +
                      (C92177 * C6303 - C182 * C6217) * C92252) *
                         C31249 +
                     ((C92177 * C881 - C182 * C799) * C61189 +
                      (C92177 * C1261 - C182 * C1195) * C61039 +
                      (C92177 * C5800 - C182 * C5701) * C61190 +
                      (C92177 * C6304 - C182 * C6218) * C92252) *
                         C31250 +
                     ((C92177 * C882 - C182 * C800) * C61189 +
                      (C92177 * C1262 - C182 * C1196) * C61039 +
                      (C92177 * C7590 - C182 * C7488) * C61190 +
                      (C92177 * C8233 - C182 * C8133) * C92252) *
                         C31251) *
                        C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C4025 * C183 - C4106 * C108 + C4026 * C876 -
                      C4107 * C797 + C4027 * C880 - C4108 * C798) *
                         C61189 +
                     (C4025 * C629 - C4106 * C567 + C4026 * C1256 -
                      C4107 * C1190 + C4027 * C1260 - C4108 * C1194) *
                         C61039 +
                     (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 -
                      C4107 * C3357 + C4027 * C5799 - C4108 * C5702) *
                         C61190 +
                     (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 -
                      C4107 * C3801 + C4027 * C6303 - C4108 * C6217) *
                         C92252) *
                        C92097 * C92150 * C92136 * C97 +
                    ((C4111 - C4110 + C4113 - C4112 + C4115 - C4114) * C61189 +
                     (C4636 - C4635 + C4638 - C4637 + C4640 - C4639) * C61039 +
                     (C7593 - C7594 + C7595 - C7596 + C7597 - C7598) * C61190 +
                     (C8235 - C8236 + C8237 - C8238 + C8239 - C8240) * C92252) *
                        C92097 * C92150 * C92136 * C98 +
                    ((C4123 - C4122 + C4125 - C4124 + C4127 - C4126) * C61189 +
                     (C4642 - C4641 + C4644 - C4643 + C4646 - C4645) * C61039 +
                     (C4025 * C1459 - C4106 * C1376 + C4026 * C3441 -
                      C4107 * C3359 + C4027 * C7590 - C4108 * C7488) *
                         C61190 +
                     (C4025 * C1839 - C4106 * C1773 + C4026 * C3877 -
                      C4107 * C3803 + C4027 * C8233 - C4108 * C8133) *
                         C92252) *
                        C92097 * C92150 * C92136 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C4025 * C183 - C4106 * C108 + C4026 * C876 -
                      C4107 * C797 + C4027 * C880 - C4108 * C798) *
                         C61189 +
                     (C4025 * C629 - C4106 * C567 + C4026 * C1256 -
                      C4107 * C1190 + C4027 * C1260 - C4108 * C1194) *
                         C61039 +
                     (C4025 * C1457 - C4106 * C1378 + C4026 * C3439 -
                      C4107 * C3357 + C4027 * C5799 - C4108 * C5702) *
                         C61190 +
                     (C4025 * C1837 - C4106 * C1771 + C4026 * C3875 -
                      C4107 * C3801 + C4027 * C6303 - C4108 * C6217) *
                         C92252) *
                        C92097 * C92150 * C790 +
                    ((C4106 * C797 - C4025 * C876 + C4107 * C798 -
                      C4026 * C880 + C4108 * C4815 - C4027 * C4948) *
                         C61189 +
                     (C4106 * C1190 - C4025 * C1256 + C4107 * C1194 -
                      C4026 * C1260 + C4108 * C5417 - C4027 * C5517) *
                         C61039 +
                     (C4106 * C3357 - C4025 * C3439 + C4107 * C5702 -
                      C4026 * C5799 + C4108 * C8454 - C4027 * C8588) *
                         C61190 +
                     (C4106 * C3801 - C4025 * C3875 + C4107 * C6217 -
                      C4026 * C6303 + C4108 * C9122 - C4027 * C9232) *
                         C92252) *
                        C92097 * C92150 * C791 +
                    ((C4025 * C880 - C4106 * C798 + C4026 * C4948 -
                      C4107 * C4815 + C4027 * C4950 - C4108 * C4816) *
                         C61189 +
                     (C4025 * C1260 - C4106 * C1194 + C4026 * C5517 -
                      C4107 * C5417 + C4027 * C5519 - C4108 * C5419) *
                         C61039 +
                     (C4025 * C5799 - C4106 * C5702 + C4026 * C8588 -
                      C4107 * C8454 + C4027 * C39084 - C4108 * C38990) *
                         C61190 +
                     (C4025 * C6303 - C4106 * C6217 + C4026 * C9232 -
                      C4107 * C9122 + C4027 * C39514 - C4108 * C39440) *
                         C92252) *
                        C92097 * C92150 * C792) *
                   C92124) /
                      (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C92136 * C97 -
          ((C61733 + C61734) * C92177 * C31251 +
           (C61732 + C61731) * C92177 * C31250 +
           (C61730 + C61729) * C92177 * C31249) *
              C92150 * C92136 * C98 +
          (C61736 * C31249 + (C61734 + C61733) * C92177 * C31250 +
           (C61189 * C270 - C61690 * C112 - C61189 * C571 + C61039 * C706 +
            C61190 * C2816 - C61691 * C2666 - C61190 * C3125 + C92252 * C3266) *
               C92177 * C31251) *
              C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C92177 * C31249 +
           (C61729 + C61730) * C92177 * C31250 + C61736 * C31251) *
              C92150 * C790 -
          ((C61190 * C3515 - C61691 * C3359 - C61190 * C3803 + C92252 * C3947 +
            C61189 * C944 - C61690 * C795 - C61189 * C1192 + C61039 * C1315) *
               C92177 * C31251 +
           (C61190 * C3514 - C61691 * C3358 - C61190 * C3802 + C92252 * C3946 +
            C61189 * C943 - C61690 * C796 - C61189 * C1191 + C61039 * C1316) *
               C92177 * C31250 +
           (C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945 +
            C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317) *
               C92177 * C31249) *
              C92150 * C791 +
          ((C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C92177 * C31249 +
           (C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319 +
            C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383) *
               C92177 * C31250 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C92177 * C31251) *
              C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C61189 * C942 - C61690 * C797 - C61189 * C1190 + C61039 * C1317 +
            C61190 * C3513 - C61691 * C3357 - C61190 * C3801 + C92252 * C3945) *
               C4026 +
           (C61189 * C946 - C61690 * C798 - C61189 * C1194 + C61039 * C1318 +
            C61190 * C5885 - C61691 * C5702 - C61190 * C6217 + C92252 * C6384) *
               C4027) *
              C92097 * C92150 * C92136 * C97 -
          ((C61190 * C5886 - C61691 * C5701 - C61190 * C6218 + C92252 * C6383 +
            C61189 * C947 - C61690 * C799 - C61189 * C1195 + C61039 * C1319) *
               C4027 +
           (C64085 + C64086) * C4026 + (C61730 + C61729) * C4025) *
              C92097 * C92150 * C92136 * C98 +
          (C61735 * C4025 + (C64084 + C64083) * C4026 +
           (C61189 * C948 - C61690 * C800 - C61189 * C1196 + C61039 * C1320 +
            C61190 * C7702 - C61691 * C7488 - C61190 * C8133 + C92252 * C8338) *
               C4027) *
              C92097 * C92150 * C92136 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C61189 * C266 - C61690 * C108 - C61189 * C567 + C61039 * C702 +
            C61190 * C1523 - C61691 * C1378 - C61190 * C1771 + C92252 * C1898) *
               C4025 +
           (C67378 + C67379) * C4026 + C67384 * C4027) *
              C92097 * C92150 * C790 -
          ((C67382 + C67383) * C4027 + (C67381 + C67380) * C4026 +
           (C67379 + C67378) * C4025) *
              C92097 * C92150 * C791 +
          (C67384 * C4025 + (C67383 + C67382) * C4026 +
           (C61189 * C5032 - C61690 * C4816 - C61189 * C5419 + C61039 * C5597 +
            C61190 * C39152 - C61691 * C38990 - C61190 * C39440 +
            C92252 * C39581) *
               C4027) *
              C92097 * C92150 * C792) *
         C92124) /
            (p * q * std::sqrt(p + q));
}
