/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46746 = ae * be;
    const double C46745 = ae + be;
    const double C46744 = 0 * be;
    const double C46743 = xA - xB;
    const double C46759 = yA - yB;
    const double C46779 = 0 * be;
    const double C46794 = xP - xQ;
    const double C46793 = yP - yQ;
    const double C46792 = p + q;
    const double C46791 = p * q;
    const double C46801 = std::pow(ae, 2);
    const double C46799 = bs[3];
    const double C46809 = bs[4];
    const double C46818 = bs[5];
    const double C46832 = bs[6];
    const double C46854 = bs[7];
    const double C47007 = zP - zQ;
    const double C47104 = bs[2];
    const double C117 = bs[0];
    const double C47480 = ce + de;
    const double C47479 = ce * de;
    const double C47478 = xC - xD;
    const double C47512 = yC - yD;
    const double C47530 = zC - zD;
    const double C47704 = zA - zB;
    const double C46747 = std::pow(C46745, 2);
    const double C47469 = 2 * C46745;
    const double C46748 = C46746 * C46743;
    const double C47460 = std::pow(C46743, 2);
    const double C47765 = C46743 * be;
    const double C47764 = C46743 * ae;
    const double C46780 = C46746 * C46759;
    const double C47717 = std::pow(C46759, 2);
    const double C47799 = C46759 * be;
    const double C47797 = C46759 * ae;
    const double C46819 = std::pow(C46794, 2);
    const double C46877 = C46794 * ae;
    const double C46802 = C46793 * ae;
    const double C46800 = C46794 * C46793;
    const double C46974 = std::pow(C46793, 2);
    const double C46795 = 2 * C46791;
    const double C47011 = std::pow(C47007, 2);
    const double C47484 = 2 * C47480;
    const double C47483 = std::pow(C47480, 2);
    const double C47485 = C47478 * de;
    const double C47482 = C47478 * ce;
    const double C47481 = std::pow(C47478, 2);
    const double C47513 = std::pow(C47512, 2);
    const double C47572 = C47512 * de;
    const double C47570 = C47512 * ce;
    const double C47531 = std::pow(C47530, 2);
    const double C47614 = C47530 * de;
    const double C47612 = C47530 * ce;
    const double C47734 = std::pow(C47704, 2);
    const double C47800 = C47704 * be;
    const double C47798 = C47704 * ae;
    const double C46749 = 2 * C46747;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C46747;
    const double C47766 = std::pow(C47469, -1);
    const double C47461 = C47460 * C46746;
    const double C47718 = C47717 * C46746;
    const double C46882 = C46799 * C46877;
    const double C46885 = C46809 * C46877;
    const double C46891 = C46818 * C46877;
    const double C46905 = C46832 * C46877;
    const double C46926 = C46854 * C46877;
    const double C46805 = C46799 * C46802;
    const double C46811 = C46809 * C46802;
    const double C46821 = C46818 * C46802;
    const double C46836 = C46832 * C46802;
    const double C46860 = C46854 * C46802;
    const double C46804 = C46800 * C46801;
    const double C46796 = C46795 / C46792;
    const double C124 = (-(bs[1] * C46802 * C46795) / C46792) / C46745;
    const double C125 = (-(bs[1] * C46877 * C46795) / C46792) / C46745;
    const double C118 = -(C46794 * bs[1] * C46795) / C46792;
    const double C293 = -(C46793 * bs[1] * C46795) / C46792;
    const double C482 = -(C47007 * bs[1] * C46795) / C46792;
    const double C47497 = std::pow(C47484, -1);
    const double C47774 = std::pow(C47484, -2);
    const double C47498 = 2 * C47483;
    const double C47778 = C47483 * C47484;
    const double C47777 = 4 * C47483;
    const double C47767 = std::pow(C47482, 2);
    const double C47486 = C47481 * C47479;
    const double C47514 = C47513 * C47479;
    const double C47779 = std::pow(C47570, 2);
    const double C47532 = C47531 * C47479;
    const double C47781 = std::pow(C47612, 2);
    const double C47735 = C47734 * C46746;
    const double C47462 = C47461 / C46745;
    const double C47719 = C47718 / C46745;
    const double C46810 = C46809 * C46804;
    const double C46820 = C46818 * C46804;
    const double C46834 = C46832 * C46804;
    const double C46858 = C46854 * C46804;
    const double C46798 = -C46796;
    const double C46808 = std::pow(C46796, 4);
    const double C46831 = std::pow(C46796, 6);
    const double C139 = (ae * std::pow(C46796, 2) * bs[2] * C46793 * ae +
                         C46794 * std::pow(-C46796, 3) * bs[3] * C46794 *
                             C46793 * std::pow(ae, 2)) /
                        C46747;
    const double C47103 = std::pow(C46796, 2);
    const double C126 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46802) / C46745;
    const double C127 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46877) / C46745 -
        (ae * bs[1] * C46795) / (C46792 * C46745);
    const double C47812 = 4 * C47778;
    const double C47811 = C47480 * C47777;
    const double C47487 = C47486 / C47480;
    const double C47515 = C47514 / C47480;
    const double C47533 = C47532 / C47480;
    const double C47736 = C47735 / C46745;
    const double C47463 = -C47462;
    const double C47720 = -C47719;
    const double C46803 = std::pow(C46798, 3);
    const double C46817 = std::pow(C46798, 5);
    const double C46853 = std::pow(C46798, 7);
    const double C46813 = C46808 * C46811;
    const double C46812 = C46808 * C46810;
    const double C46887 = C46808 * C46885;
    const double C46892 = C46809 * C46808;
    const double C46839 = C46831 * C46836;
    const double C46838 = C46831 * C46834;
    const double C46907 = C46831 * C46905;
    const double C46927 = C46832 * C46831;
    const double C47105 = C47104 * C47103;
    const double C305 = (C46793 * C47103 * C47104 * C46877) / C46745;
    const double C306 = (C46793 * C47103 * C47104 * C46802) / C46745 -
                        (ae * bs[1] * C46795) / (C46792 * C46745);
    const double C494 = (C47007 * C47103 * C47104 * C46877) / C46745;
    const double C495 = (C47007 * C47103 * C47104 * C46802) / C46745;
    const double C47488 = -C47487;
    const double C47516 = -C47515;
    const double C47534 = -C47533;
    const double C47737 = -C47736;
    const double C47464 = std::exp(C47463);
    const double C47721 = std::exp(C47720);
    const double C46806 = C46803 * C46805;
    const double C46878 = C46799 * C46803;
    const double C46883 = C46803 * C46882;
    const double C323 = (ae * std::pow(C46796, 2) * bs[2] * C46877 +
                         C46793 * C46803 * C46799 * C46804) /
                        C46747;
    const double C512 = ((zP - zQ) * C46803 * C46799 * C46804) / C46747;
    const double C46823 = C46817 * C46821;
    const double C46822 = C46817 * C46820;
    const double C46893 = C46817 * C46891;
    const double C46906 = C46818 * C46817;
    const double C46863 = C46853 * C46860;
    const double C46862 = C46853 * C46858;
    const double C46929 = C46853 * C46926;
    const double C46816 = ae * C46813;
    const double C46815 = C46794 * C46813;
    const double C47184 = C46793 * C46813;
    const double C513 =
        (C46803 * C46799 * C46804 + C46812 * std::pow(zP - zQ, 2)) / C46747;
    const double C46888 = C46794 * C46887;
    const double C46972 = ae * C46887;
    const double C46971 = C46793 * C46887;
    const double C46895 = C46794 * C46892;
    const double C46894 = C46892 * ae;
    const double C47111 = C46892 * C46819;
    const double C47186 = C46892 * C46974;
    const double C47256 = C46793 * C46892;
    const double C47436 = C46892 * C47011;
    const double C47450 = C47007 * C46892;
    const double C46841 = C46839 * C46819;
    const double C46852 = ae * C46839;
    const double C46851 = C46794 * C46839;
    const double C47312 = C46793 * C46839;
    const double C47348 = C46839 * C47011;
    const double C46840 = C46794 * C46838;
    const double C47022 = C46793 * C46838;
    const double C47056 = C46838 * C47011;
    const double C47091 = C47007 * C46838;
    const double C46911 = C46794 * C46907;
    const double C47023 = C46907 * C46974;
    const double C47065 = ae * C46907;
    const double C47064 = C46793 * C46907;
    const double C47355 = C46907 * C47011;
    const double C46932 = C46927 * C46819;
    const double C46931 = C46794 * C46927;
    const double C46930 = C46927 * ae;
    const double C47315 = C46927 * C46974;
    const double C119 = C47105 * C46819 - (bs[1] * C46795) / C46792;
    const double C292 = C46793 * C46794 * C47105;
    const double C294 = C47105 * C46974 - (bs[1] * C46795) / C46792;
    const double C481 = C47007 * C46794 * C47105;
    const double C483 = C47105 * C47011 - (bs[1] * C46795) / C46792;
    const double C926 = C47007 * C46793 * C47105;
    const double C47489 = std::exp(C47488);
    const double C47517 = std::exp(C47516);
    const double C47535 = std::exp(C47534);
    const double C47738 = std::exp(C47737);
    const double C46750 = C46748 * C47464;
    const double C47802 = C47766 * C47464;
    const double C47801 = C47464 * C47764;
    const double C4757 = -(C47464 * C47765) / C46745;
    const double C149 = C47721 * C139;
    const double C147 = C47721 * C126;
    const double C10787 = C47721 * C495;
    const double C46781 = C46780 * C47721;
    const double C113 = -(2 * ae * be * (yA - yB) * C47721) / (ae + be);
    const double C4759 =
        ((C47721 - (C46759 * 2 * C46746 * C46759 * C47721) / C46745) * ae) /
            C46745 -
        (0 * be) / C46749;
    const double C4760 =
        (0 * ae) / C46745 - (C46746 * C46759 * C47721) / C46747;
    const double C16117 =
        (-(0 * be) / C46745) / (2 * C46745) -
        ((C47721 - (C46759 * 2 * C46746 * C46759 * C47721) / C46745) * be) /
            C46745;
    const double C16118 =
        (-(2 * C46746 * C46759 * C47721) / C46745) / (2 * C46745) -
        (0 * be) / C46745;
    const double C47833 = C47766 * C47721;
    const double C47832 = C47721 * C47797;
    const double C16113 = -(C47721 * C47799) / C46745;
    const double C140 = (C46803 * C46799 * C46804 + ae * C46794 * C46806 +
                         C46794 * (ae * C46806 + C46794 * std::pow(C46796, 4) *
                                                     bs[4] * C46804)) /
                        C46747;
    const double C141 =
        (2 * (ae * C46806 + C46794 * C46812) +
         ae * (C46806 + C46813 * std::pow(C46794, 2)) +
         C46794 * (C46812 + ae * C46794 * C46813 +
                   C46794 * (ae * C46813 +
                             C46794 * std::pow(C46798, 5) * bs[5] * C46804))) /
        C46747;
    const double C322 = (ae * (C46794 * C46803 * C46799 * C46877 +
                               bs[2] * std::pow(C46796, 2) * ae) +
                         C46793 * (ae * C46806 + C46794 * C46812)) /
                        C46747;
    const double C511 = ((zP - zQ) * (ae * C46806 + C46794 * C46812)) / C46747;
    const double C128 =
        (std::pow(C46796, 2) * bs[2] * C46802 + C46806 * C46819) / C46745;
    const double C131 =
        (2 * C46794 * C46806 + C46794 * (C46806 + C46813 * C46819)) / C46745;
    const double C304 =
        (C46793 * C46794 * C46806 + C46794 * C47105 * ae) / C46745;
    const double C307 =
        (C47103 * C47104 * C46802 + C46793 * (C46793 * C46806 + C47105 * ae) +
         C46793 * C47105 * ae) /
        C46745;
    const double C491 = (C47007 * (C46806 + C46813 * C46819)) / C46745;
    const double C493 = (C47007 * C46794 * C46806) / C46745;
    const double C496 = (C47103 * C47104 * C46802 + C46806 * C47011) / C46745;
    const double C931 = (C47007 * (C46793 * C46806 + C47105 * ae)) / C46745;
    const double C2011 =
        (2 * C47007 * C46806 + C47007 * (C46806 + C46813 * C47011)) / C46745;
    const double C46886 = C46878 * ae;
    const double C47110 = C46794 * C46878;
    const double C47185 = C46793 * C46878;
    const double C302 = (C46793 * (C46806 + C46813 * C46819) +
                         (C47105 + C46878 * C46819) * ae) /
                        C46745;
    const double C120 =
        2 * C46794 * C47105 + C46794 * (C47105 + C46878 * C46819);
    const double C291 = C46793 * (C47105 + C46878 * C46819);
    const double C480 = C47007 * (C47105 + C46878 * C46819);
    const double C1150 =
        2 * C46793 * C47105 + C46793 * (C47105 + C46878 * C46974);
    const double C1287 = C47007 * (C47105 + C46878 * C46974);
    const double C2002 =
        2 * C47007 * C47105 + C47007 * (C47105 + C46878 * C47011);
    const double C2003 =
        3 * (C47105 + C46878 * C47011) +
        C47007 * (2 * C47007 * C46878 + C47007 * (C46878 + C46892 * C47011));
    const double C324 = (C46803 * C46799 * C46804 + ae * C46793 * C46883 +
                         C46793 * (ae * C46883 + C46793 * C46812)) /
                        C46747;
    const double C941 = ((zP - zQ) * (ae * C46883 + C46793 * C46812)) / C46747;
    const double C129 =
        (C47103 * C47104 * C46877 + C46794 * (C46794 * C46883 + C47105 * ae) +
         C46794 * C47105 * ae) /
        C46745;
    const double C303 = (C46793 * (C46794 * C46883 + C47105 * ae)) / C46745;
    const double C308 = (C47103 * C47104 * C46877 + C46883 * C46974) / C46745;
    const double C492 = (C47007 * (C46794 * C46883 + C47105 * ae)) / C46745;
    const double C497 = (C47103 * C47104 * C46877 + C46883 * C47011) / C46745;
    const double C932 = (C47007 * C46793 * C46883) / C46745;
    const double C1158 =
        (2 * C46793 * C46883 + C46793 * (C46883 + C46887 * C46974)) / C46745;
    const double C1301 = (C47007 * (C46883 + C46887 * C46974)) / C46745;
    const double C2010 =
        (2 * C47007 * C46883 + C47007 * (C46883 + C46887 * C47011)) / C46745;
    const double C10789 = C47721 * C512;
    const double C46825 = C46823 * C46819;
    const double C46830 = ae * C46823;
    const double C46829 = C46794 * C46823;
    const double C47255 = C46793 * C46823;
    const double C47299 = C46823 * C47011;
    const double C47347 = C47007 * C46823;
    const double C2012 =
        (3 * (C46806 + C46813 * C47011) +
         C47007 * (2 * C47007 * C46813 + C47007 * (C46813 + C46823 * C47011))) /
        C46745;
    const double C46824 = C46794 * C46822;
    const double C46973 = C46793 * C46822;
    const double C1168 = (2 * (ae * C46883 + C46793 * C46812) +
                          ae * (C46883 + C46887 * std::pow(C46793, 2)) +
                          C46793 * (C46812 + ae * C46793 * C46887 +
                                    C46793 * (ae * C46887 + C46793 * C46822))) /
                         C46747;
    const double C2020 = (2 * C47007 * C46812 +
                          C47007 * (C46812 + C46822 * std::pow(C47007, 2))) /
                         C46747;
    const double C2021 =
        (3 * (C46812 + C46822 * C47011) +
         C47007 * (2 * C47007 * C46822 + C47007 * (C46822 + C46838 * C47011))) /
        C46747;
    const double C46896 = C46794 * C46893;
    const double C46976 = C46893 * C46974;
    const double C47021 = ae * C46893;
    const double C47020 = C46793 * C46893;
    const double C47302 = C46893 * C47011;
    const double C47354 = C47007 * C46893;
    const double C2013 =
        (3 * (C46883 + C46887 * C47011) +
         C47007 * (2 * C47007 * C46887 + C47007 * (C46887 + C46893 * C47011))) /
        C46745;
    const double C46910 = C46906 * C46819;
    const double C46909 = C46794 * C46906;
    const double C46908 = C46906 * ae;
    const double C47257 = C46906 * C46974;
    const double C47313 = C46793 * C46906;
    const double C47451 = C46906 * C47011;
    const double C46865 = C46863 * C46819;
    const double C46864 = C46794 * C46862;
    const double C47066 = C46793 * C46862;
    const double C47092 = C46862 * C47011;
    const double C46933 = C46794 * C46929;
    const double C47068 = C46929 * C46974;
    const double C498 = (C46794 * C46806 + C46815 * C47011) / C46745;
    const double C10795 = C47721 * C513;
    const double C1295 = (C46793 * C46883 + C46971 * C47011) / C46745;
    const double C46897 = C46895 * ae;
    const double C47114 = 2 * C46895;
    const double C47192 = C46793 * C46895;
    const double C47112 = C46878 + C47111;
    const double C47188 = C46878 + C47186;
    const double C47261 = 2 * C47256;
    const double C47259 = C47256 * ae;
    const double C47437 = C46878 + C47436;
    const double C47452 = 2 * C47450;
    const double C46843 = C46823 + C46841;
    const double C46859 = 2 * C46851;
    const double C46857 = ae * C46851;
    const double C47269 = C46793 * C46851;
    const double C47305 = C46851 * C47011;
    const double C47350 = C46823 + C47348;
    const double C47057 = C46822 + C47056;
    const double C47093 = 2 * C47091;
    const double C47027 = C46893 + C47023;
    const double C47072 = 2 * C47064;
    const double C47070 = ae * C47064;
    const double C47344 = C47064 * C47011;
    const double C47357 = C46893 + C47355;
    const double C46935 = C46906 + C46932;
    const double C46934 = C46931 * ae;
    const double C47271 = C46931 * C46974;
    const double C47319 = C46906 + C47315;
    const double C47491 = C47489 * C47482;
    const double C47490 = C47489 / C47484;
    const double C47500 = C47497 * C47489;
    const double C47770 = C47489 * C47485;
    const double C47809 = C47774 * C47489;
    const double C47803 = C47489 * C47767;
    const double C47571 = C47517 / C47484;
    const double C47573 = C47517 * C47570;
    const double C47580 = C47497 * C47517;
    const double C47785 = C47517 * C47572;
    const double C47815 = C47774 * C47517;
    const double C47813 = C47517 * C47779;
    const double C47613 = C47535 / C47484;
    const double C47615 = C47535 * C47612;
    const double C47622 = C47497 * C47535;
    const double C47791 = C47535 * C47614;
    const double C47818 = C47774 * C47535;
    const double C47816 = C47535 * C47781;
    const double C47835 = C47766 * C47738;
    const double C47834 = C47738 * C47798;
    const double C31513 = -(C47738 * C47800) / C46745;
    const double C116 = ((0 * ae) / C46745 - C46750 / C46747) / (2 * C46745) -
                        (0 * be) / C46745;
    const double C4761 =
        (-C46744 / C46745) / (2 * C46745) -
        ((C47464 - (C46743 * 2 * C46750) / C46745) * be) / C46745;
    const double C4762 =
        (-(2 * C46750) / C46745) / (2 * C46745) - (0 * be) / C46745;
    const double C16119 =
        ((C47464 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
        C46744 / C46749;
    const double C16120 = (0 * ae) / C46745 - C46750 / C46747;
    const double C21796 = -(2 * C46750) / C46745;
    const double C115 =
        (((C47464 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
         C46744 / C46749) /
            (2 * C46745) -
        ((C46743 * ((0 * ae) / C46745 - C46750 / C46747) + C47802) * be) /
            C46745;
    const double C104 = C47802 / C47469;
    const double C102 = C47464 / C47469 - (C47801 * C47765) / C46747;
    const double C103 = C47801 / C46749 - (C47802 * C47765) / C46745;
    const double C16115 = C47801 / C46745;
    const double C21795 = ((0 * ae) / C46745 - C46781 / C46747) / (2 * C46745) -
                          (0 * be) / C46745;
    const double C150 = C113 * C119;
    const double C148 = C113 * C127;
    const double C146 = C113 * C118;
    const double C338 = C113 * C292;
    const double C527 = C113 * C481;
    const double C10796 = C113 * C483;
    const double C10788 = C113 * C494;
    const double C10786 = C113 * C482;
    const double C11280 = C113 * C926;
    const double C4778 = C4759 * C119;
    const double C4768 = C4759 * C127;
    const double C4764 = C4759 * C118;
    const double C4964 = C4759 * C292;
    const double C5158 = C4759 * C481;
    const double C37350 = C4759 * C483;
    const double C37340 = C4759 * C494;
    const double C37336 = C4759 * C482;
    const double C37814 = C4759 * C926;
    const double C4766 = C4760 * C292;
    const double C37338 = C4760 * C926;
    const double C16136 = C16117 * C119;
    const double C16126 = C16117 * C127;
    const double C16122 = C16117 * C118;
    const double C16322 = C16117 * C292;
    const double C16516 = C16117 * C481;
    const double C26248 = C16117 * C483;
    const double C26238 = C16117 * C494;
    const double C26234 = C16117 * C482;
    const double C26712 = C16117 * C926;
    const double C16124 = C16118 * C292;
    const double C26236 = C16118 * C926;
    const double C21794 =
        (((C47721 - (C46759 * 2 * C46781) / C46745) * ae) / C46745 -
         C46779 / C46749) /
            (2 * C46745) -
        ((C46759 * ((0 * ae) / C46745 - C46781 / C46747) + C47833) * be) /
            C46745;
    const double C21791 = C47833 / C47469;
    const double C4755 = C47832 / C46745;
    const double C21789 = C47721 / C47469 - (C47832 * C47799) / C46747;
    const double C21790 = C47832 / C46749 - (C47833 * C47799) / C46745;
    const double C16127 = C16113 * C139;
    const double C16123 = C16113 * C126;
    const double C26245 = C16113 * C513;
    const double C26239 = C16113 * C512;
    const double C26235 = C16113 * C495;
    const double C153 = C47721 * C140;
    const double C16133 = C16113 * C140;
    const double C155 = C47721 * C141;
    const double C16143 = C16113 * C141;
    const double C337 = C47721 * C322;
    const double C4771 = C47833 * C322;
    const double C16129 = C47833 * C322;
    const double C16319 = C16113 * C322;
    const double C526 = C47721 * C511;
    const double C16513 = C16113 * C511;
    const double C151 = C47721 * C128;
    const double C16137 = C16113 * C128;
    const double C157 = C47721 * C131;
    const double C16139 = C16113 * C131;
    const double C339 = C47721 * C304;
    const double C4767 = C47833 * C304;
    const double C16125 = C47833 * C304;
    const double C16323 = C16113 * C304;
    const double C524 = C47721 * C491;
    const double C16527 = C16113 * C491;
    const double C528 = C47721 * C493;
    const double C16517 = C16113 * C493;
    const double C10797 = C47721 * C496;
    const double C26249 = C16113 * C496;
    const double C11281 = C47721 * C931;
    const double C26237 = C47833 * C931;
    const double C26713 = C16113 * C931;
    const double C37339 = C47833 * C931;
    const double C12565 = C47721 * C2011;
    const double C27979 = C16113 * C2011;
    const double C46889 = C46888 + C46886;
    const double C47187 = C47184 + C46886;
    const double C1159 =
        (2 * (C46793 * C46806 + C47105 * ae) +
         C46793 * (C46806 + C46793 * (C46793 * C46813 + C46886) +
                   C46793 * C46878 * ae) +
         (C47105 + C46878 * C46974) * ae) /
        C46745;
    const double C309 =
        (C46794 * C46806 + C46793 * (C46793 * C46815 + C47110 * ae) +
         C46793 * C47110 * ae) /
        C46745;
    const double C933 = (C47007 * (C46793 * C46815 + C47110 * ae)) / C46745;
    const double C295 = C46794 * C47105 + C47110 * C46974;
    const double C484 = C46794 * C47105 + C47110 * C47011;
    const double C927 = C47007 * C46793 * C47110;
    const double C1149 =
        2 * C46793 * C47110 + C46793 * (C47110 + C46895 * C46974);
    const double C1286 = C47007 * (C47110 + C46895 * C46974);
    const double C2001 =
        2 * C47007 * C47110 + C47007 * (C47110 + C46895 * C47011);
    const double C1284 = C46793 * C47105 + C47185 * C47011;
    const double C2402 =
        2 * C47007 * C47185 + C47007 * (C47185 + C47256 * C47011);
    const double C335 = C47721 * C302;
    const double C4777 = C47833 * C302;
    const double C16135 = C47833 * C302;
    const double C16333 = C16113 * C302;
    const double C156 = C113 * C120;
    const double C4780 = C4759 * C120;
    const double C16138 = C16117 * C120;
    const double C334 = C113 * C291;
    const double C4776 = C4760 * C291;
    const double C4974 = C4759 * C291;
    const double C16134 = C16118 * C291;
    const double C16332 = C16117 * C291;
    const double C523 = C113 * C480;
    const double C5168 = C4759 * C480;
    const double C16526 = C16117 * C480;
    const double C11678 = C113 * C1287;
    const double C26714 = C16118 * C1287;
    const double C27106 = C16117 * C1287;
    const double C37816 = C4760 * C1287;
    const double C38208 = C4759 * C1287;
    const double C12564 = C113 * C2002;
    const double C27978 = C16117 * C2002;
    const double C39076 = C4759 * C2002;
    const double C12576 = C113 * C2003;
    const double C27992 = C16117 * C2003;
    const double C39090 = C4759 * C2003;
    const double C11283 = C47721 * C941;
    const double C26241 = C47833 * C941;
    const double C26717 = C16113 * C941;
    const double C37343 = C47833 * C941;
    const double C152 = C113 * C129;
    const double C4774 = C4759 * C129;
    const double C16132 = C16117 * C129;
    const double C336 = C113 * C303;
    const double C4770 = C4760 * C303;
    const double C4960 = C4759 * C303;
    const double C16128 = C16118 * C303;
    const double C16318 = C16117 * C303;
    const double C525 = C113 * C492;
    const double C5154 = C4759 * C492;
    const double C16512 = C16117 * C492;
    const double C10794 = C113 * C497;
    const double C26244 = C16117 * C497;
    const double C37346 = C4759 * C497;
    const double C11282 = C113 * C932;
    const double C26240 = C16118 * C932;
    const double C26716 = C16117 * C932;
    const double C37342 = C4760 * C932;
    const double C37818 = C4759 * C932;
    const double C11680 = C113 * C1301;
    const double C26718 = C16118 * C1301;
    const double C27110 = C16117 * C1301;
    const double C37820 = C4760 * C1301;
    const double C38212 = C4759 * C1301;
    const double C12566 = C113 * C2010;
    const double C27982 = C16117 * C2010;
    const double C39080 = C4759 * C2010;
    const double C46827 = C46813 + C46825;
    const double C46842 = C46830 + C46840;
    const double C46835 = 2 * C46829;
    const double C46833 = ae * C46829;
    const double C47191 = C46793 * C46829;
    const double C2009 =
        (2 * C47007 * C46815 + C47007 * (C46815 + C46829 * C47011)) / C46745;
    const double C2014 =
        (3 * (C46815 + C46829 * C47011) +
         C47007 * (2 * C47007 * C46829 + C47007 * (C46829 + C46851 * C47011))) /
        C46745;
    const double C47258 = C47255 + C46894;
    const double C47300 = C46813 + C47299;
    const double C47349 = 2 * C47347;
    const double C12577 = C47721 * C2012;
    const double C27993 = C16113 * C2012;
    const double C46826 = C46816 + C46824;
    const double C46975 = C46972 + C46973;
    const double C12567 = C47721 * C2020;
    const double C27983 = C16113 * C2020;
    const double C12575 = C47721 * C2021;
    const double C27989 = C16113 * C2021;
    const double C46898 = C46896 + C46894;
    const double C46977 = C46887 + C46976;
    const double C47025 = C47021 + C47022;
    const double C47026 = 2 * C47020;
    const double C47024 = ae * C47020;
    const double C2406 =
        (2 * C47007 * C46971 + C47007 * (C46971 + C47020 * C47011)) / C46745;
    const double C6954 =
        (3 * (C46971 + C47020 * C47011) +
         C47007 * (2 * C47007 * C47020 + C47007 * (C47020 + C47064 * C47011))) /
        C46745;
    const double C47303 = C46887 + C47302;
    const double C47356 = 2 * C47354;
    const double C12574 = C113 * C2013;
    const double C27988 = C16117 * C2013;
    const double C39086 = C4759 * C2013;
    const double C46913 = C46892 + C46910;
    const double C46912 = C46909 * ae;
    const double C46928 = 2 * C46909;
    const double C47193 = C46909 * C46974;
    const double C47270 = C46793 * C46909;
    const double C47439 = C46909 * C47011;
    const double C2004 =
        3 * (C47110 + C46895 * C47011) +
        C47007 * (2 * C47007 * C46895 + C47007 * (C46895 + C46909 * C47011));
    const double C46914 = C46911 + C46908;
    const double C47317 = C47312 + C46908;
    const double C47260 = C46892 + C47257;
    const double C47320 = 2 * C47313;
    const double C47318 = C47313 * ae;
    const double C47447 = C47313 * C47011;
    const double C6951 =
        3 * (C47185 + C47256 * C47011) +
        C47007 * (2 * C47007 * C47256 + C47007 * (C47256 + C47313 * C47011));
    const double C47453 = C46892 + C47451;
    const double C46867 = C46839 + C46865;
    const double C46866 = C46852 + C46864;
    const double C47071 = C47065 + C47066;
    const double C47094 = C46838 + C47092;
    const double C46936 = C46933 + C46930;
    const double C47073 = C46907 + C47068;
    const double C530 = C47721 * C498;
    const double C16519 = C16113 * C498;
    const double C11674 = C113 * C1295;
    const double C26242 = C16118 * C1295;
    const double C27102 = C16117 * C1295;
    const double C37344 = C4760 * C1295;
    const double C38204 = C4759 * C1295;
    const double C1157 =
        (2 * (C46793 * C46815 + C47110 * ae) +
         C46793 * (C46815 + C46793 * (C46793 * C46829 + C46897) +
                   C46793 * C46895 * ae) +
         (C47110 + C46895 * C46974) * ae) /
        C46745;
    const double C1283 = C46793 * C47110 + C47192 * C47011;
    const double C121 = 3 * (C47105 + C46878 * C46819) +
                        C46794 * (2 * C47110 + C46794 * C47112);
    const double C296 = C47105 + C46878 * C46819 + C47112 * C46974;
    const double C297 = C46793 * (2 * C47110 + C46794 * C47112);
    const double C485 = C47105 + C46878 * C46819 + C47112 * C47011;
    const double C486 = C47007 * (2 * C47110 + C46794 * C47112);
    const double C928 = C47007 * C46793 * C47112;
    const double C1151 = 3 * (C47105 + C46878 * C46974) +
                         C46793 * (2 * C47185 + C46793 * C47188);
    const double C1288 = C47105 + C46878 * C46974 + C47188 * C47011;
    const double C1698 = C47007 * (2 * C47185 + C46793 * C47188);
    const double C12555 =
        4 * (2 * C47007 * C46878 + C47007 * C47437) +
        C47007 * (3 * C47437 + C47007 * (2 * C47007 * C46892 +
                                         C47007 * (C46892 + C46906 * C47011)));
    const double C46845 = C46794 * C46843;
    const double C46855 = 3 * C46843;
    const double C46850 = ae * C46843;
    const double C47198 = C46793 * C46843;
    const double C46861 = C46838 + C46857;
    const double C47306 = C46829 + C47305;
    const double C47351 = C47007 * C47350;
    const double C12561 =
        (4 * (2 * C47007 * C46822 + C47007 * C47057) +
         C47007 *
             (3 * C47057 + C47007 * (2 * C47007 * C46838 +
                                     C47007 * (C46838 + C46862 * C47011)))) /
        C46747;
    const double C47030 = C46793 * C47027;
    const double C47067 = 3 * C47027;
    const double C47063 = ae * C47027;
    const double C47074 = C46838 + C47070;
    const double C47345 = C47020 + C47344;
    const double C47358 = C47007 * C47357;
    const double C46938 = C46794 * C46935;
    const double C46937 = C46935 * ae;
    const double C47200 = C46935 * C46974;
    const double C47274 = C46909 + C47271;
    const double C47322 = C46793 * C47319;
    const double C47492 = C47491 * C47485;
    const double C47499 = C47491 / C47498;
    const double C47771 = C47497 * C47491;
    const double C47769 = C47491 / C47480;
    const double C288 = (C47489 * std::pow(C47485, 2)) / C47483 + C47490;
    const double C47501 = C47500 * C47485;
    const double C47775 = C47482 * C47500;
    const double C47773 = 2 * C47500;
    const double C47819 = C47500 / C47777;
    const double C112 = C47500 / C47812;
    const double C2883 = C47500 / C47484;
    const double C47805 = C47770 / C47480;
    const double C289 = (-2 * C47497 * C47770) / C47480;
    const double C47836 = C47803 / C47483;
    const double C1074 = (C47517 * std::pow(C47572, 2)) / C47483 + C47571;
    const double C47574 = C47573 * C47572;
    const double C47579 = C47573 / C47498;
    const double C47783 = C47573 / C47480;
    const double C47780 = C47497 * C47573;
    const double C47581 = C47580 * C47572;
    const double C47789 = C47570 * C47580;
    const double C47788 = 2 * C47580;
    const double C47825 = C47580 / C47777;
    const double C1146 = C47580 / C47812;
    const double C2880 = C47580 / C47484;
    const double C47821 = C47785 / C47480;
    const double C1075 = (-2 * C47497 * C47785) / C47480;
    const double C47841 = C47813 / C47483;
    const double C1820 = (C47535 * std::pow(C47614, 2)) / C47483 + C47613;
    const double C47616 = C47615 * C47614;
    const double C47621 = C47615 / C47498;
    const double C47784 = C47615 / C47480;
    const double C47782 = C47497 * C47615;
    const double C47623 = C47622 * C47614;
    const double C47795 = C47612 * C47622;
    const double C47794 = 2 * C47622;
    const double C47831 = C47622 / C47777;
    const double C1999 = C47622 / C47812;
    const double C3782 = C47622 / C47484;
    const double C47827 = C47791 / C47480;
    const double C1821 = (-2 * C47497 * C47791) / C47480;
    const double C47843 = C47816 / C47483;
    const double C42593 = C47835 / C47469;
    const double C10491 = C47834 / C46745;
    const double C42591 = C47738 / C47469 - (C47834 * C47800) / C46747;
    const double C42592 = C47834 / C46749 - (C47835 * C47800) / C46745;
    const double C114 =
        (((0 - (C46743 * C46744) / C46745) * ae) / C46745 - (0 * be) / C46749) /
            (2 * C46745) -
        ((C46743 * (((C47464 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
                    C46744 / C46749) +
          C16115) *
         be) /
            C46745 +
        (0 * ae) / C46745 - C46750 / C46747;
    const double C167 = C148 + C149;
    const double C166 = C146 + C147;
    const double C10815 = C10788 + C10789;
    const double C10814 = C10786 + C10787;
    const double C4785 = C4755 * C141;
    const double C4781 = C4755 * C131;
    const double C4779 = C4755 * C128;
    const double C4775 = C4755 * C140;
    const double C4769 = C4755 * C139;
    const double C4765 = C4755 * C126;
    const double C4975 = C4755 * C302;
    const double C4965 = C4755 * C304;
    const double C4961 = C4755 * C322;
    const double C5169 = C4755 * C491;
    const double C5161 = C4755 * C498;
    const double C5159 = C4755 * C493;
    const double C5155 = C4755 * C511;
    const double C37351 = C4755 * C496;
    const double C37347 = C4755 * C513;
    const double C37341 = C4755 * C512;
    const double C37337 = C4755 * C495;
    const double C37819 = C4755 * C941;
    const double C37815 = C4755 * C931;
    const double C39091 = C4755 * C2012;
    const double C39087 = C4755 * C2021;
    const double C39081 = C4755 * C2020;
    const double C39077 = C4755 * C2011;
    const double C21793 =
        (((0 - (C46759 * C46779) / C46745) * ae) / C46745 - (0 * be) / C46749) /
            (2 * C46745) -
        ((C46759 * (((C47721 - (C46759 * 2 * C46781) / C46745) * ae) / C46745 -
                    C46779 / C46749) +
          C4755) *
         be) /
            C46745 +
        (0 * ae) / C46745 - C46781 / C46747;
    const double C16156 = C16126 + C16127;
    const double C16154 = C16122 + C16123;
    const double C26252 = C26238 + C26239;
    const double C26250 = C26234 + C26235;
    const double C168 = C150 + C151;
    const double C16161 = C16136 + C16137;
    const double C359 = C338 + C339;
    const double C4797 = C4766 + C4767;
    const double C16155 = C16124 + C16125;
    const double C16351 = C16322 + C16323;
    const double C548 = C527 + C528;
    const double C16545 = C16516 + C16517;
    const double C10817 = C10796 + C10797;
    const double C26257 = C26248 + C26249;
    const double C11294 = C11280 + C11281;
    const double C26251 = C26236 + C26237;
    const double C26720 = C26712 + C26713;
    const double C37353 = C37338 + C37339;
    const double C130 =
        (2 * (C46794 * C46883 + C47105 * ae) +
         C46794 * (C46883 + C46794 * C46889 + C46794 * C46878 * ae) +
         (C47105 + C46878 * C46819) * ae) /
        C46745;
    const double C301 =
        (C46793 * (C46883 + C46794 * C46889 + C47110 * ae)) / C46745;
    const double C310 =
        (C46794 * C46883 + C47105 * ae + C46889 * C46974) / C46745;
    const double C490 =
        (C47007 * (C46883 + C46794 * C46889 + C47110 * ae)) / C46745;
    const double C499 =
        (C46794 * C46883 + C47105 * ae + C46889 * C47011) / C46745;
    const double C934 = (C47007 * C46793 * C46889) / C46745;
    const double C1160 =
        (3 * (C46806 + C46793 * C47187 + C47185 * ae) +
         C46793 * (2 * C47187 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46894) +
                             C46793 * C46892 * ae) +
                   C47188 * ae) +
         (2 * C47185 + C46793 * C47188) * ae) /
        C46745;
    const double C1296 =
        (C46793 * C46806 + C47105 * ae + C47187 * C47011) / C46745;
    const double C1302 =
        (C47007 * (C46806 + C46793 * C47187 + C47185 * ae)) / C46745;
    const double C1303 =
        (C46806 + C46793 * C47187 + C47185 * ae +
         (C46813 + C46793 * (C46793 * C46823 + C46894) + C46793 * C46892 * ae) *
             C47011) /
        C46745;
    const double C1701 =
        (C47007 * (2 * C47187 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46894) +
                             C46793 * C46892 * ae) +
                   C47188 * ae)) /
        C46745;
    const double C2405 =
        (2 * C47007 * C47187 +
         C47007 * (C47187 + (C46793 * C46823 + C46894) * C47011)) /
        C46745;
    const double C341 = C47721 * C309;
    const double C4967 = C4755 * C309;
    const double C4963 = C47833 * C309;
    const double C16325 = C16113 * C309;
    const double C16321 = C47833 * C309;
    const double C948 = C47721 * C933;
    const double C5157 = C47833 * C933;
    const double C5679 = C4755 * C933;
    const double C16515 = C47833 * C933;
    const double C17037 = C16113 * C933;
    const double C340 = C113 * C295;
    const double C4966 = C4759 * C295;
    const double C4962 = C4760 * C295;
    const double C16324 = C16117 * C295;
    const double C16320 = C16118 * C295;
    const double C529 = C113 * C484;
    const double C5160 = C4759 * C484;
    const double C16518 = C16117 * C484;
    const double C947 = C113 * C927;
    const double C5156 = C4760 * C927;
    const double C5678 = C4759 * C927;
    const double C16514 = C16118 * C927;
    const double C17036 = C16117 * C927;
    const double C1433 = C113 * C1149;
    const double C4968 = C4760 * C1149;
    const double C6228 = C4759 * C1149;
    const double C16326 = C16118 * C1149;
    const double C17570 = C16117 * C1149;
    const double C1595 = C113 * C1286;
    const double C5680 = C4760 * C1286;
    const double C6434 = C4759 * C1286;
    const double C17038 = C16118 * C1286;
    const double C17776 = C16117 * C1286;
    const double C2299 = C113 * C2001;
    const double C7302 = C4759 * C2001;
    const double C18628 = C16117 * C2001;
    const double C11672 = C113 * C1284;
    const double C26246 = C16118 * C1284;
    const double C27098 = C16117 * C1284;
    const double C37348 = C4760 * C1284;
    const double C38200 = C4759 * C1284;
    const double C13062 = C113 * C2402;
    const double C27980 = C16118 * C2402;
    const double C28462 = C16117 * C2402;
    const double C39078 = C4760 * C2402;
    const double C39560 = C4759 * C2402;
    const double C171 = C156 + C157;
    const double C16162 = C16138 + C16139;
    const double C357 = C334 + C335;
    const double C4802 = C4776 + C4777;
    const double C16160 = C16134 + C16135;
    const double C16356 = C16332 + C16333;
    const double C546 = C523 + C524;
    const double C16550 = C16526 + C16527;
    const double C12578 = C12564 + C12565;
    const double C27994 = C27978 + C27979;
    const double C169 = C152 + C153;
    const double C16159 = C16132 + C16133;
    const double C358 = C336 + C337;
    const double C4799 = C4770 + C4771;
    const double C16157 = C16128 + C16129;
    const double C16349 = C16318 + C16319;
    const double C547 = C525 + C526;
    const double C16543 = C16512 + C16513;
    const double C10816 = C10794 + C10795;
    const double C26255 = C26244 + C26245;
    const double C11295 = C11282 + C11283;
    const double C26253 = C26240 + C26241;
    const double C26722 = C26716 + C26717;
    const double C37355 = C37342 + C37343;
    const double C132 = (3 * (C46806 + C46813 * C46819) +
                         C46794 * (2 * C46815 + C46794 * C46827)) /
                        C46745;
    const double C311 =
        (C46806 + C46813 * C46819 + C46793 * (C46793 * C46827 + C47112 * ae) +
         C46793 * C47112 * ae) /
        C46745;
    const double C313 = (C46793 * (2 * C46815 + C46794 * C46827) +
                         (2 * C47110 + C46794 * C47112) * ae) /
                        C46745;
    const double C500 = (C46806 + C46813 * C46819 + C46827 * C47011) / C46745;
    const double C502 = (C47007 * (2 * C46815 + C46794 * C46827)) / C46745;
    const double C935 = (C47007 * (C46793 * C46827 + C47112 * ae)) / C46745;
    const double C2007 =
        (2 * C47007 * C46827 + C47007 * (C46827 + C46843 * C47011)) / C46745;
    const double C46844 = C46794 * C46842;
    const double C46849 = 2 * C46842;
    const double C46981 = C46793 * C46842;
    const double C46837 = C46822 + C46833;
    const double C47194 = C47191 + C46897;
    const double C2300 = C47721 * C2009;
    const double C7303 = C4755 * C2009;
    const double C18629 = C16113 * C2009;
    const double C12573 = C47721 * C2014;
    const double C47262 = C46793 * C47258;
    const double C47311 = 2 * C47258;
    const double C6953 =
        (3 * (C47187 + C47258 * C47011) +
         C47007 * (2 * C47007 * C47258 +
                   C47007 * (C47258 + (C46793 * C46839 + C46908) * C47011))) /
        C46745;
    const double C12557 =
        (4 * (2 * C47007 * C46813 + C47007 * C47300) +
         C47007 *
             (3 * C47300 + C47007 * (2 * C47007 * C46823 +
                                     C47007 * (C46823 + C46839 * C47011)))) /
        C46745;
    const double C12583 = C12576 + C12577;
    const double C28001 = C27992 + C27993;
    const double C142 =
        (3 * (C46812 + ae * C46815 + C46794 * C46826) +
         ae * (2 * C46815 + C46794 * C46827) +
         C46794 *
             (2 * C46826 + ae * C46827 +
              C46794 * (C46822 + ae * C46794 * C46823 +
                        C46794 * (ae * C46823 + C46794 * std::pow(C46796, 6) *
                                                    bs[6] * C46804)))) /
        C46747;
    const double C321 =
        (ae * (C46803 * C46799 * C46877 +
               C46794 * (C46794 * C46808 * C46809 * C46877 + C46878 * ae) +
               C46794 * C46878 * ae) +
         C46793 * (C46812 + ae * C46815 + C46794 * C46826)) /
        C46747;
    const double C325 = (ae * C46806 + C46794 * C46812 + ae * C46793 * C46889 +
                         C46793 * (ae * C46889 + C46793 * C46826)) /
                        C46747;
    const double C510 =
        ((zP - zQ) * (C46812 + ae * C46815 + C46794 * C46826)) / C46747;
    const double C514 =
        (ae * C46806 + C46794 * C46812 + C46826 * std::pow(zP - zQ, 2)) /
        C46747;
    const double C942 = ((zP - zQ) * (ae * C46889 + C46793 * C46826)) / C46747;
    const double C2019 = (2 * C47007 * C46826 +
                          C47007 * (C46826 + C46842 * std::pow(C47007, 2))) /
                         C46747;
    const double C1311 =
        (ae * C46883 + C46793 * C46812 + C46975 * std::pow(zP - zQ, 2)) /
        C46747;
    const double C1314 =
        ((zP - zQ) * (C46812 + ae * C46971 + C46793 * C46975)) / C46747;
    const double C1315 = (C46812 + ae * C46971 + C46793 * C46975 +
                          (C46822 + ae * C46793 * C46893 +
                           C46793 * (ae * C46893 + C46793 * C46838)) *
                              std::pow(zP - zQ, 2)) /
                         C46747;
    const double C2411 =
        (2 * C47007 * C46975 +
         C47007 * (C46975 + (ae * C46893 + C46793 * C46838) * C47011)) /
        C46747;
    const double C12579 = C12566 + C12567;
    const double C27996 = C27982 + C27983;
    const double C46899 = C46794 * C46898;
    const double C46904 = 2 * C46898;
    const double C46980 = ae * C46898;
    const double C46979 = C46793 * C46898;
    const double C1167 = (2 * (ae * C46889 + C46793 * C46826) +
                          ae * (C46889 + C46898 * std::pow(C46793, 2)) +
                          C46793 * (C46826 + ae * C46793 * C46898 +
                                    C46793 * (ae * C46898 + C46793 * C46842))) /
                         C46747;
    const double C1156 =
        (2 * C46793 * C46889 + C46793 * (C46889 + C46898 * C46974)) / C46745;
    const double C1299 = (C47007 * (C46889 + C46898 * C46974)) / C46745;
    const double C2008 =
        (2 * C47007 * C46889 + C47007 * (C46889 + C46898 * C47011)) / C46745;
    const double C1169 =
        (3 * (C46812 + ae * C46971 + C46793 * C46975) +
         ae * (2 * C46971 + C46793 * C46977) +
         C46793 * (2 * C46975 + ae * C46977 +
                   C46793 * (C46822 + ae * C46793 * C46893 +
                             C46793 * (ae * C46893 + C46793 * C46838)))) /
        C46747;
    const double C1707 =
        ((zP - zQ) * (2 * C46975 + ae * C46977 +
                      C46793 * (C46822 + ae * C46793 * C46893 +
                                C46793 * (ae * C46893 + C46793 * C46838)))) /
        C46747;
    const double C1161 = (3 * (C46883 + C46887 * C46974) +
                          C46793 * (2 * C46971 + C46793 * C46977)) /
                         C46745;
    const double C1304 = (C46883 + C46887 * C46974 + C46977 * C47011) / C46745;
    const double C1702 = (C47007 * (2 * C46971 + C46793 * C46977)) / C46745;
    const double C7440 =
        (2 * C47007 * C46977 + C47007 * (C46977 + C47027 * C47011)) / C46745;
    const double C47029 = C46793 * C47025;
    const double C47062 = 2 * C47025;
    const double C6957 =
        (3 * (C46975 + C47025 * C47011) +
         C47007 *
             (2 * C47007 * C47025 +
              C47007 * (C47025 + (ae * C46907 + C46793 * C46862) * C47011))) /
        C46747;
    const double C47028 = C46822 + C47024;
    const double C13060 = C113 * C2406;
    const double C27984 = C16118 * C2406;
    const double C28458 = C16117 * C2406;
    const double C39082 = C4760 * C2406;
    const double C39556 = C4759 * C2406;
    const double C27986 = C16118 * C6954;
    const double C39084 = C4760 * C6954;
    const double C44495 = C113 * C6954;
    const double C12558 =
        (4 * (2 * C47007 * C46887 + C47007 * C47303) +
         C47007 *
             (3 * C47303 + C47007 * (2 * C47007 * C46893 +
                                     C47007 * (C46893 + C46907 * C47011)))) /
        C46745;
    const double C12582 = C12574 + C12575;
    const double C27999 = C27988 + C27989;
    const double C46915 = C46913 * ae;
    const double C47115 = C46794 * C46913;
    const double C47120 = 3 * C46913;
    const double C47199 = C46793 * C46913;
    const double C1148 =
        2 * C46793 * C47112 + C46793 * (C47112 + C46913 * C46974);
    const double C1285 = C47007 * (C47112 + C46913 * C46974);
    const double C2000 =
        2 * C47007 * C47112 + C47007 * (C47112 + C46913 * C47011);
    const double C2005 =
        3 * (C47112 + C46913 * C47011) +
        C47007 * (2 * C47007 * C46913 + C47007 * (C46913 + C46935 * C47011));
    const double C47272 = C47269 + C46912;
    const double C47195 = C46895 + C47193;
    const double C47275 = 2 * C47270;
    const double C47273 = C47270 * ae;
    const double C2403 =
        2 * C47007 * C47192 + C47007 * (C47192 + C47270 * C47011);
    const double C6952 =
        3 * (C47192 + C47270 * C47011) +
        C47007 * (2 * C47007 * C47270 +
                  C47007 * (C47270 + C46793 * C46931 * C47011));
    const double C47440 = C46895 + C47439;
    const double C12572 = C113 * C2004;
    const double C46916 = C46794 * C46914;
    const double C46925 = 2 * C46914;
    const double C46982 = C46914 * C46974;
    const double C47035 = ae * C46914;
    const double C47034 = C46793 * C46914;
    const double C47308 = C46914 * C47011;
    const double C2015 =
        (3 * (C46889 + C46898 * C47011) +
         C47007 * (2 * C47007 * C46898 + C47007 * (C46898 + C46914 * C47011))) /
        C46745;
    const double C47321 = C46793 * C47317;
    const double C47341 = C47317 * C47011;
    const double C47263 = C46793 * C47260;
    const double C47316 = 3 * C47260;
    const double C47314 = C47260 * ae;
    const double C7437 =
        2 * C47007 * C47188 + C47007 * (C47188 + C47260 * C47011);
    const double C23277 =
        3 * (C47188 + C47260 * C47011) +
        C47007 * (2 * C47007 * C47260 + C47007 * (C47260 + C47319 * C47011));
    const double C47448 = C47256 + C47447;
    const double C27990 = C16118 * C6951;
    const double C39088 = C4760 * C6951;
    const double C44497 = C113 * C6951;
    const double C47454 = C47007 * C47453;
    const double C46869 = C46794 * C46867;
    const double C2016 =
        (3 * (C46827 + C46843 * C47011) +
         C47007 * (2 * C47007 * C46843 + C47007 * (C46843 + C46867 * C47011))) /
        C46745;
    const double C46868 = C46794 * C46866;
    const double C47036 = C46793 * C46866;
    const double C47059 = C46866 * C47011;
    const double C2022 =
        (3 * (C46826 + C46842 * C47011) +
         C47007 * (2 * C47007 * C46842 + C47007 * (C46842 + C46866 * C47011))) /
        C46747;
    const double C47075 = C46793 * C47071;
    const double C47088 = C47071 * C47011;
    const double C47095 = C47007 * C47094;
    const double C46939 = C46794 * C46936;
    const double C47037 = C46936 * C46974;
    const double C47076 = C46793 * C47073;
    const double C23279 =
        (3 * (C46977 + C47027 * C47011) +
         C47007 * (2 * C47007 * C47027 + C47007 * (C47027 + C47073 * C47011))) /
        C46745;
    const double C1434 = C47721 * C1157;
    const double C4969 = C47833 * C1157;
    const double C6229 = C4755 * C1157;
    const double C16327 = C47833 * C1157;
    const double C17571 = C16113 * C1157;
    const double C2181 = C113 * C1283;
    const double C5162 = C4760 * C1283;
    const double C7160 = C4759 * C1283;
    const double C16520 = C16118 * C1283;
    const double C18486 = C16117 * C1283;
    const double C158 = C113 * C121;
    const double C4794 = C4759 * C121;
    const double C16152 = C16117 * C121;
    const double C344 = C113 * C296;
    const double C4988 = C4759 * C296;
    const double C4976 = C4760 * C296;
    const double C16346 = C16117 * C296;
    const double C16334 = C16118 * C296;
    const double C348 = C113 * C297;
    const double C4782 = C4760 * C297;
    const double C5336 = C4759 * C297;
    const double C16140 = C16118 * C297;
    const double C16694 = C16117 * C297;
    const double C533 = C113 * C485;
    const double C5182 = C4759 * C485;
    const double C16540 = C16117 * C485;
    const double C537 = C113 * C486;
    const double C5478 = C4759 * C486;
    const double C16836 = C16117 * C486;
    const double C951 = C113 * C928;
    const double C5170 = C4760 * C928;
    const double C5692 = C4759 * C928;
    const double C16528 = C16118 * C928;
    const double C17050 = C16117 * C928;
    const double C11690 = C113 * C1288;
    const double C27120 = C16117 * C1288;
    const double C27100 = C16118 * C1288;
    const double C38222 = C4759 * C1288;
    const double C38202 = C4760 * C1288;
    const double C12172 = C113 * C1698;
    const double C27108 = C16118 * C1698;
    const double C27588 = C16117 * C1698;
    const double C38210 = C4760 * C1698;
    const double C38690 = C4759 * C1698;
    const double C44139 = C113 * C12555;
    const double C46847 = C46835 + C46845;
    const double C12559 =
        (4 * (2 * C47007 * C46829 + C47007 * C47306) +
         C47007 * (3 * C47306 +
                   C47007 * (2 * C47007 * C46851 +
                             C47007 * (C46851 + C46794 * C46863 * C47011)))) /
        C46745;
    const double C47352 = C47349 + C47351;
    const double C44138 = C47721 * C12561;
    const double C47032 = C47026 + C47030;
    const double C27975 =
        (4 * (2 * C47007 * C47020 + C47007 * C47345) +
         C47007 * (3 * C47345 +
                   C47007 * (2 * C47007 * C47064 +
                             C47007 * (C47064 + C46793 * C46929 * C47011)))) /
        C46745;
    const double C47359 = C47356 + C47358;
    const double C46940 = C46928 + C46938;
    const double C47202 = C46913 + C47200;
    const double C47277 = C46793 * C47274;
    const double C47324 = C47320 + C47322;
    const double C47493 = C47492 / C47483;
    const double C47806 = 2 * C47771;
    const double C47502 = C47501 / C47480;
    const double C47810 = C47775 / C47498;
    const double C47837 = C47769 - C47805;
    const double C2620 = -C47805;
    const double C47851 = C47836 + C47490;
    const double C47575 = C47574 / C47483;
    const double C47814 = 2 * C47780;
    const double C47582 = C47581 / C47480;
    const double C47824 = C47789 / C47498;
    const double C47845 = C47783 - C47821;
    const double C2512 = -C47821;
    const double C47854 = C47841 + C47571;
    const double C47617 = C47616 / C47483;
    const double C47817 = 2 * C47782;
    const double C47624 = C47623 / C47480;
    const double C47830 = C47795 / C47498;
    const double C47848 = C47784 - C47827;
    const double C3274 = -C47827;
    const double C47855 = C47843 + C47613;
    const double C10819 = C10815 * C4757;
    const double C31809 = C10815 * C16115;
    const double C42816 = C10815 * C47464;
    const double C10818 = C10814 * C4761;
    const double C31808 = C10814 * C16119;
    const double C42815 = C10814 * C21796;
    const double C4804 = C4780 + C4781;
    const double C4803 = C4778 + C4779;
    const double C4801 = C4774 + C4775;
    const double C4798 = C4768 + C4769;
    const double C4796 = C4764 + C4765;
    const double C4998 = C4974 + C4975;
    const double C4993 = C4964 + C4965;
    const double C4991 = C4960 + C4961;
    const double C5192 = C5168 + C5169;
    const double C5187 = C5158 + C5159;
    const double C5185 = C5154 + C5155;
    const double C37359 = C37350 + C37351;
    const double C37357 = C37346 + C37347;
    const double C37354 = C37340 + C37341;
    const double C37352 = C37336 + C37337;
    const double C37824 = C37818 + C37819;
    const double C37822 = C37814 + C37815;
    const double C39099 = C39090 + C39091;
    const double C39097 = C39086 + C39087;
    const double C39094 = C39080 + C39081;
    const double C39092 = C39076 + C39077;
    const double C10798 = C548 * C4761;
    const double C10790 = C548 * C4762;
    const double C31816 = C548 * C16119;
    const double C31810 = C548 * C16120;
    const double C42821 = C548 * C21796;
    const double C10821 = C10817 * C4761;
    const double C31815 = C10817 * C16119;
    const double C42817 = C10817 * C21796;
    const double C11296 = C11294 * C4761;
    const double C32290 = C11294 * C16119;
    const double C43182 = C11294 * C21796;
    const double C154 = C113 * C130;
    const double C4784 = C4759 * C130;
    const double C16142 = C16117 * C130;
    const double C332 = C113 * C301;
    const double C4772 = C4760 * C301;
    const double C4978 = C4759 * C301;
    const double C16130 = C16118 * C301;
    const double C16336 = C16117 * C301;
    const double C342 = C113 * C310;
    const double C4970 = C4759 * C310;
    const double C4958 = C4760 * C310;
    const double C16328 = C16117 * C310;
    const double C16316 = C16118 * C310;
    const double C521 = C113 * C490;
    const double C5172 = C4759 * C490;
    const double C16530 = C16117 * C490;
    const double C531 = C113 * C499;
    const double C5164 = C4759 * C499;
    const double C16522 = C16117 * C499;
    const double C949 = C113 * C934;
    const double C5152 = C4760 * C934;
    const double C5682 = C4759 * C934;
    const double C16510 = C16118 * C934;
    const double C17040 = C16117 * C934;
    const double C11673 = C47721 * C1296;
    const double C26247 = C47833 * C1296;
    const double C27099 = C16113 * C1296;
    const double C37349 = C47833 * C1296;
    const double C38201 = C4755 * C1296;
    const double C11679 = C47721 * C1302;
    const double C26715 = C47833 * C1302;
    const double C27107 = C16113 * C1302;
    const double C37817 = C47833 * C1302;
    const double C38209 = C4755 * C1302;
    const double C11691 = C47721 * C1303;
    const double C27121 = C16113 * C1303;
    const double C27101 = C47833 * C1303;
    const double C38223 = C4755 * C1303;
    const double C38203 = C47833 * C1303;
    const double C12173 = C47721 * C1701;
    const double C27109 = C47833 * C1701;
    const double C27589 = C16113 * C1701;
    const double C38211 = C47833 * C1701;
    const double C38691 = C4755 * C1701;
    const double C13063 = C47721 * C2405;
    const double C27981 = C47833 * C2405;
    const double C28463 = C16113 * C2405;
    const double C39079 = C47833 * C2405;
    const double C39561 = C4755 * C2405;
    const double C360 = C340 + C341;
    const double C4994 = C4966 + C4967;
    const double C4992 = C4962 + C4963;
    const double C16352 = C16324 + C16325;
    const double C16350 = C16320 + C16321;
    const double C549 = C529 + C530;
    const double C5188 = C5160 + C5161;
    const double C16546 = C16518 + C16519;
    const double C959 = C947 + C948;
    const double C5186 = C5156 + C5157;
    const double C5694 = C5678 + C5679;
    const double C16544 = C16514 + C16515;
    const double C17052 = C17036 + C17037;
    const double C10806 = C546 * C4761;
    const double C10800 = C546 * C4762;
    const double C31824 = C546 * C16119;
    const double C31818 = C546 * C16120;
    const double C42827 = C546 * C21796;
    const double C12584 = C12578 * C4761;
    const double C33524 = C12578 * C16119;
    const double C42820 = C12578 * C21796;
    const double C10799 = C547 * C4757;
    const double C10791 = C547 * C47802;
    const double C31817 = C547 * C16115;
    const double C31811 = C547 * C47802;
    const double C42822 = C547 * C47464;
    const double C10820 = C10816 * C4757;
    const double C31814 = C10816 * C16115;
    const double C42818 = C10816 * C47464;
    const double C11297 = C11295 * C4757;
    const double C32291 = C11295 * C16115;
    const double C43183 = C11295 * C47464;
    const double C159 = C47721 * C132;
    const double C4795 = C4755 * C132;
    const double C16153 = C16113 * C132;
    const double C345 = C47721 * C311;
    const double C4989 = C4755 * C311;
    const double C4977 = C47833 * C311;
    const double C16347 = C16113 * C311;
    const double C16335 = C47833 * C311;
    const double C349 = C47721 * C313;
    const double C4783 = C47833 * C313;
    const double C5337 = C4755 * C313;
    const double C16141 = C47833 * C313;
    const double C16695 = C16113 * C313;
    const double C534 = C47721 * C500;
    const double C5183 = C4755 * C500;
    const double C16541 = C16113 * C500;
    const double C538 = C47721 * C502;
    const double C5479 = C4755 * C502;
    const double C16837 = C16113 * C502;
    const double C952 = C47721 * C935;
    const double C5171 = C47833 * C935;
    const double C5693 = C4755 * C935;
    const double C16529 = C47833 * C935;
    const double C17051 = C16113 * C935;
    const double C2296 = C47721 * C2007;
    const double C46856 = C46849 + C46850;
    const double C46846 = C46837 + C46844;
    const double C1294 =
        (C46793 * C46815 + C47110 * ae + C47194 * C47011) / C46745;
    const double C1300 =
        (C47007 * (C46815 + C46793 * C47194 + C47192 * ae)) / C46745;
    const double C1305 =
        (C46815 + C46793 * C47194 + C47192 * ae +
         (C46829 + C46793 * (C46793 * C46851 + C46912) + C46793 * C46909 * ae) *
             C47011) /
        C46745;
    const double C2407 =
        (2 * C47007 * C47194 +
         C47007 * (C47194 + (C46793 * C46851 + C46912) * C47011)) /
        C46745;
    const double C2304 = C2299 + C2300;
    const double C7307 = C7302 + C7303;
    const double C18633 = C18628 + C18629;
    const double C47264 = C46813 + C47262;
    const double C27991 = C47833 * C6953;
    const double C39089 = C47833 * C6953;
    const double C44498 = C47721 * C6953;
    const double C44140 = C47721 * C12557;
    const double C12589 = C12583 * C4761;
    const double C33531 = C12583 * C16119;
    const double C44135 = C12583 * C21796;
    const double C161 = C47721 * C142;
    const double C4791 = C4755 * C142;
    const double C16149 = C16113 * C142;
    const double C333 = C47721 * C321;
    const double C4773 = C47833 * C321;
    const double C4979 = C4755 * C321;
    const double C16131 = C47833 * C321;
    const double C16337 = C16113 * C321;
    const double C343 = C47721 * C325;
    const double C4971 = C4755 * C325;
    const double C4959 = C47833 * C325;
    const double C16329 = C16113 * C325;
    const double C16317 = C47833 * C325;
    const double C522 = C47721 * C510;
    const double C5173 = C4755 * C510;
    const double C16531 = C16113 * C510;
    const double C532 = C47721 * C514;
    const double C5165 = C4755 * C514;
    const double C16523 = C16113 * C514;
    const double C950 = C47721 * C942;
    const double C5153 = C47833 * C942;
    const double C5683 = C4755 * C942;
    const double C16511 = C47833 * C942;
    const double C17041 = C16113 * C942;
    const double C2298 = C47721 * C2019;
    const double C7299 = C4755 * C2019;
    const double C18625 = C16113 * C2019;
    const double C11675 = C47721 * C1311;
    const double C26243 = C47833 * C1311;
    const double C27103 = C16113 * C1311;
    const double C37345 = C47833 * C1311;
    const double C38205 = C4755 * C1311;
    const double C11681 = C47721 * C1314;
    const double C26719 = C47833 * C1314;
    const double C27111 = C16113 * C1314;
    const double C37821 = C47833 * C1314;
    const double C38213 = C4755 * C1314;
    const double C11689 = C47721 * C1315;
    const double C27117 = C16113 * C1315;
    const double C27105 = C47833 * C1315;
    const double C38219 = C4755 * C1315;
    const double C38207 = C47833 * C1315;
    const double C13061 = C47721 * C2411;
    const double C27985 = C47833 * C2411;
    const double C28459 = C16113 * C2411;
    const double C39083 = C47833 * C2411;
    const double C39557 = C4755 * C2411;
    const double C12585 = C12579 * C4757;
    const double C33525 = C12579 * C16115;
    const double C42819 = C12579 * C47464;
    const double C46900 = C46887 + C46899;
    const double C46983 = C46980 + C46981;
    const double C1293 = (C46793 * C46889 + C46979 * C47011) / C46745;
    const double C1432 = C47721 * C1167;
    const double C4973 = C47833 * C1167;
    const double C6225 = C4755 * C1167;
    const double C16331 = C47833 * C1167;
    const double C17567 = C16113 * C1167;
    const double C1431 = C113 * C1156;
    const double C4972 = C4760 * C1156;
    const double C6224 = C4759 * C1156;
    const double C16330 = C16118 * C1156;
    const double C17566 = C16117 * C1156;
    const double C1593 = C113 * C1299;
    const double C5684 = C4760 * C1299;
    const double C6430 = C4759 * C1299;
    const double C17042 = C16118 * C1299;
    const double C17772 = C16117 * C1299;
    const double C2297 = C113 * C2008;
    const double C7298 = C4759 * C2008;
    const double C18624 = C16117 * C2008;
    const double C12175 = C47721 * C1707;
    const double C27113 = C47833 * C1707;
    const double C27593 = C16113 * C1707;
    const double C38215 = C47833 * C1707;
    const double C38695 = C4755 * C1707;
    const double C11688 = C113 * C1304;
    const double C27116 = C16117 * C1304;
    const double C27104 = C16118 * C1304;
    const double C38218 = C4759 * C1304;
    const double C38206 = C4760 * C1304;
    const double C12174 = C113 * C1702;
    const double C27112 = C16118 * C1702;
    const double C27592 = C16117 * C1702;
    const double C38214 = C4760 * C1702;
    const double C38694 = C4759 * C1702;
    const double C28456 = C16118 * C7440;
    const double C39554 = C4760 * C7440;
    const double C43483 = C113 * C7440;
    const double C47069 = C47062 + C47063;
    const double C27987 = C47833 * C6957;
    const double C39085 = C47833 * C6957;
    const double C44496 = C47721 * C6957;
    const double C47031 = C47028 + C47029;
    const double C44137 = C113 * C12558;
    const double C12588 = C12582 * C4757;
    const double C33530 = C12582 * C16115;
    const double C44136 = C12582 * C47464;
    const double C47201 = C47198 + C46915;
    const double C1155 =
        (2 * (C46793 * C46827 + C47112 * ae) +
         C46793 * (C46827 + C46793 * (C46793 * C46843 + C46915) +
                   C46793 * C46913 * ae) +
         (C47112 + C46913 * C46974) * ae) /
        C46745;
    const double C47116 = C47114 + C47115;
    const double C1282 = C46793 * C47112 + C47199 * C47011;
    const double C2404 =
        2 * C47007 * C47199 + C47007 * (C47199 + C46793 * C46935 * C47011);
    const double C1429 = C113 * C1148;
    const double C4986 = C4760 * C1148;
    const double C16344 = C16118 * C1148;
    const double C1591 = C113 * C1285;
    const double C5690 = C4760 * C1285;
    const double C17048 = C16118 * C1285;
    const double C2295 = C113 * C2000;
    const double C47276 = C46793 * C47272;
    const double C6955 =
        (3 * (C47194 + C47272 * C47011) +
         C47007 * (2 * C47007 * C47272 +
                   C47007 * (C47272 +
                             (C46793 * C46794 * C46863 + C46934) * C47011))) /
        C46745;
    const double C1162 =
        (3 * (C46815 + C46793 * C47194 + C47192 * ae) +
         C46793 * (2 * C47194 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46912) +
                             C46793 * C46909 * ae) +
                   C47195 * ae) +
         (2 * C47192 + C46793 * C47195) * ae) /
        C46745;
    const double C1703 =
        (C47007 * (2 * C47194 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46912) +
                             C46793 * C46909 * ae) +
                   C47195 * ae)) /
        C46745;
    const double C1152 = 3 * (C47110 + C46895 * C46974) +
                         C46793 * (2 * C47192 + C46793 * C47195);
    const double C1289 = C47110 + C46895 * C46974 + C47195 * C47011;
    const double C1699 = C47007 * (2 * C47192 + C46793 * C47195);
    const double C7438 =
        2 * C47007 * C47195 + C47007 * (C47195 + C47274 * C47011);
    const double C7300 = C4760 * C2403;
    const double C12786 = C113 * C2403;
    const double C18626 = C16118 * C2403;
    const double C12556 =
        4 * (2 * C47007 * C46895 + C47007 * C47440) +
        C47007 * (3 * C47440 + C47007 * (2 * C47007 * C46909 +
                                         C47007 * (C46909 + C46931 * C47011)));
    const double C12581 = C12572 + C12573;
    const double C46917 = C46893 + C46916;
    const double C46984 = C46898 + C46982;
    const double C47040 = 2 * C47034;
    const double C47038 = ae * C47034;
    const double C2408 =
        (2 * C47007 * C46979 + C47007 * (C46979 + C47034 * C47011)) / C46745;
    const double C6956 =
        (3 * (C46979 + C47034 * C47011) +
         C47007 * (2 * C47007 * C47034 +
                   C47007 * (C47034 + C46793 * C46936 * C47011))) /
        C46745;
    const double C47309 = C46898 + C47308;
    const double C12570 = C113 * C2015;
    const double C47323 = C46823 + C47321;
    const double C47342 = C47258 + C47341;
    const double C47265 = C47261 + C47263;
    const double C28460 = C16118 * C7437;
    const double C39558 = C4760 * C7437;
    const double C43485 = C113 * C7437;
    const double C27973 =
        4 * (2 * C47007 * C47256 + C47007 * C47448) +
        C47007 * (3 * C47448 +
                  C47007 * (2 * C47007 * C47313 +
                            C47007 * (C47313 + C46793 * C46927 * C47011)));
    const double C47455 = C47452 + C47454;
    const double C46871 = C46859 + C46869;
    const double C46870 = C46861 + C46868;
    const double C47039 = C47035 + C47036;
    const double C47060 = C46842 + C47059;
    const double C12571 = C47721 * C2022;
    const double C47077 = C47074 + C47075;
    const double C47089 = C47025 + C47088;
    const double C47096 = C47093 + C47095;
    const double C46941 = C46907 + C46939;
    const double C47041 = C46914 + C47037;
    const double C47078 = C47072 + C47076;
    const double C1438 = C1433 + C1434;
    const double C4995 = C4968 + C4969;
    const double C6233 = C6228 + C6229;
    const double C16353 = C16326 + C16327;
    const double C17575 = C17570 + C17571;
    const double C135 = (4 * (2 * C46815 + C46794 * C46827) +
                         C46794 * (3 * C46827 + C46794 * C46847)) /
                        C46745;
    const double C505 =
        (2 * C46815 + C46794 * C46827 + C46847 * C47011) / C46745;
    const double C507 = (C47007 * (3 * C46827 + C46794 * C46847)) / C46745;
    const double C44130 =
        (5 * (3 * C47300 + C47007 * C47352) +
         C47007 * (4 * C47352 +
                   C47007 * (3 * C47350 +
                             C47007 * (2 * C47007 * C46839 +
                                       C47007 * (C46839 + C46863 * C47011))))) /
        C46745;
    const double C5932 = (4 * (2 * C46971 + C46793 * C46977) +
                          C46793 * (3 * C46977 + C46793 * C47032)) /
                         C46745;
    const double C6086 =
        (2 * C46971 + C46793 * C46977 + C47032 * C47011) / C46745;
    const double C6572 = (C47007 * (3 * C46977 + C46793 * C47032)) / C46745;
    const double C44131 =
        (5 * (3 * C47303 + C47007 * C47359) +
         C47007 * (4 * C47359 +
                   C47007 * (3 * C47357 +
                             C47007 * (2 * C47007 * C46907 +
                                       C47007 * (C46907 + C46929 * C47011))))) /
        C46745;
    const double C46942 = C46940 * ae;
    const double C47121 = C46794 * C46940;
    const double C1153 = 3 * (C47112 + C46913 * C46974) +
                         C46793 * (2 * C47199 + C46793 * C47202);
    const double C1290 = C47112 + C46913 * C46974 + C47202 * C47011;
    const double C1700 = C47007 * (2 * C47199 + C46793 * C47202);
    const double C47279 = C47275 + C47277;
    const double C47326 = C46793 * C47324;
    const double C47494 = C47490 - C47493;
    const double C47838 = C47806 / C47480;
    const double C47503 = C47499 - C47502;
    const double C47852 = C47837 / C47484;
    const double C47576 = C47571 - C47575;
    const double C47842 = C47814 / C47480;
    const double C47583 = C47579 - C47582;
    const double C47856 = C47845 / C47484;
    const double C47618 = C47613 - C47617;
    const double C47844 = C47817 / C47480;
    const double C47625 = C47621 - C47624;
    const double C47858 = C47848 / C47484;
    const double C170 = C154 + C155;
    const double C4806 = C4784 + C4785;
    const double C16164 = C16142 + C16143;
    const double C11692 = C11672 + C11673;
    const double C26256 = C26246 + C26247;
    const double C27122 = C27098 + C27099;
    const double C37358 = C37348 + C37349;
    const double C38224 = C38200 + C38201;
    const double C11694 = C11678 + C11679;
    const double C26721 = C26714 + C26715;
    const double C27126 = C27106 + C27107;
    const double C37823 = C37816 + C37817;
    const double C38228 = C38208 + C38209;
    const double C11699 = C11690 + C11691;
    const double C27133 = C27120 + C27121;
    const double C27123 = C27100 + C27101;
    const double C38235 = C38222 + C38223;
    const double C38225 = C38202 + C38203;
    const double C12178 = C12172 + C12173;
    const double C27127 = C27108 + C27109;
    const double C27596 = C27588 + C27589;
    const double C38229 = C38210 + C38211;
    const double C38698 = C38690 + C38691;
    const double C13065 = C13062 + C13063;
    const double C27995 = C27980 + C27981;
    const double C28467 = C28462 + C28463;
    const double C39093 = C39078 + C39079;
    const double C39565 = C39560 + C39561;
    const double C10802 = C549 * C4761;
    const double C10793 = C549 * C4762;
    const double C31820 = C549 * C16119;
    const double C31813 = C549 * C16120;
    const double C42823 = C549 * C21796;
    const double C11286 = C959 * C4761;
    const double C11284 = C959 * C4762;
    const double C32294 = C959 * C16119;
    const double C32292 = C959 * C16120;
    const double C43186 = C959 * C21796;
    const double C42833 = C42817 + C42818;
    const double C172 = C158 + C159;
    const double C4811 = C4794 + C4795;
    const double C16169 = C16152 + C16153;
    const double C362 = C344 + C345;
    const double C5005 = C4988 + C4989;
    const double C4999 = C4976 + C4977;
    const double C16363 = C16346 + C16347;
    const double C16357 = C16334 + C16335;
    const double C364 = C348 + C349;
    const double C4805 = C4782 + C4783;
    const double C5341 = C5336 + C5337;
    const double C16163 = C16140 + C16141;
    const double C16699 = C16694 + C16695;
    const double C551 = C533 + C534;
    const double C5199 = C5182 + C5183;
    const double C16557 = C16540 + C16541;
    const double C553 = C537 + C538;
    const double C5483 = C5478 + C5479;
    const double C16841 = C16836 + C16837;
    const double C961 = C951 + C952;
    const double C5193 = C5170 + C5171;
    const double C5701 = C5692 + C5693;
    const double C16551 = C16528 + C16529;
    const double C17059 = C17050 + C17051;
    const double C143 =
        (4 * (2 * C46826 + ae * C46827 + C46794 * C46846) +
         ae * (3 * C46827 + C46794 * C46847) +
         C46794 * (3 * C46846 + ae * C46847 +
                   C46794 * (2 * C46842 + ae * C46843 +
                             C46794 * (C46838 + ae * C46794 * C46839 +
                                       C46794 * (ae * C46839 +
                                                 C46794 * std::pow(C46798, 7) *
                                                     bs[7] * C46804))))) /
        C46747;
    const double C515 = (C46812 + ae * C46815 + C46794 * C46826 +
                         C46846 * std::pow(zP - zQ, 2)) /
                        C46747;
    const double C516 =
        ((zP - zQ) * (2 * C46826 + ae * C46827 + C46794 * C46846)) / C46747;
    const double C2182 = C47721 * C1294;
    const double C5163 = C47833 * C1294;
    const double C7161 = C4755 * C1294;
    const double C16521 = C47833 * C1294;
    const double C18487 = C16113 * C1294;
    const double C1596 = C47721 * C1300;
    const double C5681 = C47833 * C1300;
    const double C6435 = C4755 * C1300;
    const double C17039 = C47833 * C1300;
    const double C17777 = C16113 * C1300;
    const double C7159 = C47833 * C1305;
    const double C11687 = C47721 * C1305;
    const double C18485 = C47833 * C1305;
    const double C7301 = C47833 * C2407;
    const double C12787 = C47721 * C2407;
    const double C18627 = C47833 * C2407;
    const double C12568 = C2304 * C4762;
    const double C12927 = C2304 * C4761;
    const double C33526 = C2304 * C16120;
    const double C33863 = C2304 * C16119;
    const double C42825 = C2304 * C21796;
    const double C47266 = C47264 + C47259;
    const double C28000 = C27990 + C27991;
    const double C39098 = C39088 + C39089;
    const double C44500 = C44497 + C44498;
    const double C44143 = C44139 + C44140;
    const double C356 = C332 + C333;
    const double C4800 = C4772 + C4773;
    const double C5000 = C4978 + C4979;
    const double C16158 = C16130 + C16131;
    const double C16358 = C16336 + C16337;
    const double C361 = C342 + C343;
    const double C4996 = C4970 + C4971;
    const double C4990 = C4958 + C4959;
    const double C16354 = C16328 + C16329;
    const double C16348 = C16316 + C16317;
    const double C545 = C521 + C522;
    const double C5194 = C5172 + C5173;
    const double C16552 = C16530 + C16531;
    const double C550 = C531 + C532;
    const double C5190 = C5164 + C5165;
    const double C16548 = C16522 + C16523;
    const double C960 = C949 + C950;
    const double C5184 = C5152 + C5153;
    const double C5696 = C5682 + C5683;
    const double C16542 = C16510 + C16511;
    const double C17054 = C17040 + C17041;
    const double C11693 = C11674 + C11675;
    const double C26254 = C26242 + C26243;
    const double C27124 = C27102 + C27103;
    const double C37356 = C37344 + C37345;
    const double C38226 = C38204 + C38205;
    const double C11695 = C11680 + C11681;
    const double C26723 = C26718 + C26719;
    const double C27128 = C27110 + C27111;
    const double C37825 = C37820 + C37821;
    const double C38230 = C38212 + C38213;
    const double C13064 = C13060 + C13061;
    const double C27997 = C27984 + C27985;
    const double C28465 = C28458 + C28459;
    const double C39095 = C39082 + C39083;
    const double C39563 = C39556 + C39557;
    const double C44134 = C42819 + C42820;
    const double C46901 = C46900 + C46897;
    const double C1310 =
        (ae * C46889 + C46793 * C46826 + C46983 * std::pow(zP - zQ, 2)) /
        C46747;
    const double C1313 =
        ((zP - zQ) * (C46826 + ae * C46979 + C46793 * C46983)) / C46747;
    const double C1316 = (C46826 + ae * C46979 + C46793 * C46983 +
                          (C46842 + ae * C46793 * C46914 +
                           C46793 * (ae * C46914 + C46793 * C46866)) *
                              std::pow(zP - zQ, 2)) /
                         C46747;
    const double C2412 =
        (2 * C47007 * C46983 +
         C47007 * (C46983 + (ae * C46914 + C46793 * C46866) * C47011)) /
        C46747;
    const double C2179 = C113 * C1293;
    const double C5166 = C4760 * C1293;
    const double C7156 = C4759 * C1293;
    const double C16524 = C16118 * C1293;
    const double C18482 = C16117 * C1293;
    const double C1437 = C1431 + C1432;
    const double C4997 = C4972 + C4973;
    const double C6231 = C6224 + C6225;
    const double C16355 = C16330 + C16331;
    const double C17573 = C17566 + C17567;
    const double C2303 = C2297 + C2298;
    const double C7305 = C7298 + C7299;
    const double C18631 = C18624 + C18625;
    const double C11698 = C11688 + C11689;
    const double C27131 = C27116 + C27117;
    const double C27125 = C27104 + C27105;
    const double C38233 = C38218 + C38219;
    const double C38227 = C38206 + C38207;
    const double C12179 = C12174 + C12175;
    const double C27129 = C27112 + C27113;
    const double C27598 = C27592 + C27593;
    const double C38231 = C38214 + C38215;
    const double C38700 = C38694 + C38695;
    const double C27998 = C27986 + C27987;
    const double C39096 = C39084 + C39085;
    const double C44499 = C44495 + C44496;
    const double C5935 =
        (4 * (2 * C46975 + ae * C46977 + C46793 * C47031) +
         ae * (3 * C46977 + C46793 * C47032) +
         C46793 *
             (3 * C47031 + ae * C47032 +
              C46793 * (2 * C47025 + ae * C47027 +
                        C46793 * (C46838 + ae * C46793 * C46907 +
                                  C46793 * (ae * C46907 + C46793 * C46862))))) /
        C46747;
    const double C6089 =
        (2 * C46975 + ae * C46977 + C46793 * C47031 +
         (2 * C47025 + ae * C47027 +
          C46793 * (C46838 + ae * C46793 * C46907 +
                    C46793 * (ae * C46907 + C46793 * C46862))) *
             C47011) /
        C46747;
    const double C6575 =
        (C47007 *
         (3 * C47031 + ae * C47032 +
          C46793 * (2 * C47025 + ae * C47027 +
                    C46793 * (C46838 + ae * C46793 * C46907 +
                              C46793 * (ae * C46907 + C46793 * C46862))))) /
        C46747;
    const double C7443 =
        (2 * C47007 * C47031 +
         C47007 * (C47031 + (C46838 + ae * C46793 * C46907 +
                             C46793 * (ae * C46907 + C46793 * C46862)) *
                                C47011)) /
        C46747;
    const double C44142 = C44137 + C44138;
    const double C44141 = C44135 + C44136;
    const double C1164 =
        (3 * (C46827 + C46793 * C47201 + C47199 * ae) +
         C46793 * (2 * C47201 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46937) +
                             C46793 * C46935 * ae) +
                   C47202 * ae) +
         (2 * C47199 + C46793 * C47202) * ae) /
        C46745;
    const double C1292 =
        (C46793 * C46827 + C47112 * ae + C47201 * C47011) / C46745;
    const double C1298 =
        (C47007 * (C46827 + C46793 * C47201 + C47199 * ae)) / C46745;
    const double C1307 =
        (C46827 + C46793 * C47201 + C47199 * ae +
         (C46843 + C46793 * (C46793 * C46867 + C46937) + C46793 * C46935 * ae) *
             C47011) /
        C46745;
    const double C1705 =
        (C47007 * (2 * C47201 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46937) +
                             C46793 * C46935 * ae) +
                   C47202 * ae)) /
        C46745;
    const double C2409 =
        (2 * C47007 * C47201 +
         C47007 * (C47201 + (C46793 * C46867 + C46937) * C47011)) /
        C46745;
    const double C1430 = C47721 * C1155;
    const double C4987 = C47833 * C1155;
    const double C16345 = C47833 * C1155;
    const double C316 =
        (2 * C46815 + C46794 * C46827 +
         C46793 * (C46793 * C46847 + C47116 * ae) + C46793 * C47116 * ae) /
        C46745;
    const double C318 = (C46793 * (3 * C46827 + C46794 * C46847) +
                         (3 * C47112 + C46794 * C47116) * ae) /
                        C46745;
    const double C938 = (C47007 * (C46793 * C46847 + C47116 * ae)) / C46745;
    const double C122 = 4 * (2 * C47110 + C46794 * C47112) +
                        C46794 * (3 * C47112 + C46794 * C47116);
    const double C298 = 2 * C47110 + C46794 * C47112 + C47116 * C46974;
    const double C299 = C46793 * (3 * C47112 + C46794 * C47116);
    const double C487 = 2 * C47110 + C46794 * C47112 + C47116 * C47011;
    const double C488 = C47007 * (3 * C47112 + C46794 * C47116);
    const double C929 = C47007 * C46793 * C47116;
    const double C1422 =
        2 * C46793 * C47116 + C46793 * (C47116 + C46940 * C46974);
    const double C1584 = C47007 * (C47116 + C46940 * C46974);
    const double C2170 = C46793 * C47116 + C46793 * C46940 * C47011;
    const double C2288 =
        2 * C47007 * C47116 + C47007 * (C47116 + C46940 * C47011);
    const double C2177 = C113 * C1282;
    const double C5180 = C4760 * C1282;
    const double C16538 = C16118 * C1282;
    const double C2302 = C2295 + C2296;
    const double C47278 = C46829 + C47276;
    const double C6227 = C47833 * C1162;
    const double C17569 = C47833 * C1162;
    const double C6433 = C47833 * C1703;
    const double C11841 = C47721 * C1703;
    const double C17775 = C47833 * C1703;
    const double C6226 = C4760 * C1152;
    const double C17568 = C16118 * C1152;
    const double C7158 = C4760 * C1289;
    const double C11686 = C113 * C1289;
    const double C18484 = C16118 * C1289;
    const double C6432 = C4760 * C1699;
    const double C11840 = C113 * C1699;
    const double C17774 = C16118 * C1699;
    const double C12587 = C12581 * C4762;
    const double C33529 = C12581 * C16120;
    const double C44395 = C12581 * C21796;
    const double C46918 = C46917 + C46912;
    const double C1170 =
        (3 * (C46826 + ae * C46979 + C46793 * C46983) +
         ae * (2 * C46979 + C46793 * C46984) +
         C46793 * (2 * C46983 + ae * C46984 +
                   C46793 * (C46842 + ae * C46793 * C46914 +
                             C46793 * (ae * C46914 + C46793 * C46866)))) /
        C46747;
    const double C1708 =
        ((zP - zQ) * (2 * C46983 + ae * C46984 +
                      C46793 * (C46842 + ae * C46793 * C46914 +
                                C46793 * (ae * C46914 + C46793 * C46866)))) /
        C46747;
    const double C1163 = (3 * (C46889 + C46898 * C46974) +
                          C46793 * (2 * C46979 + C46793 * C46984)) /
                         C46745;
    const double C1306 = (C46889 + C46898 * C46974 + C46984 * C47011) / C46745;
    const double C1704 = (C47007 * (2 * C46979 + C46793 * C46984)) / C46745;
    const double C47042 = C46842 + C47038;
    const double C7296 = C4760 * C2408;
    const double C12784 = C113 * C2408;
    const double C18622 = C16118 * C2408;
    const double C12560 =
        (4 * (2 * C47007 * C46898 + C47007 * C47309) +
         C47007 *
             (3 * C47309 + C47007 * (2 * C47007 * C46914 +
                                     C47007 * (C46914 + C46936 * C47011)))) /
        C46745;
    const double C47325 = C47323 + C47318;
    const double C27974 =
        (4 * (2 * C47007 * C47258 + C47007 * C47342) +
         C47007 * (3 * C47342 +
                   C47007 * (2 * C47007 * C47317 +
                             C47007 * (C47317 +
                                       (C46793 * C46863 + C46930) * C47011)))) /
        C46745;
    const double C5929 = 4 * (2 * C47185 + C46793 * C47188) +
                         C46793 * (3 * C47188 + C46793 * C47265);
    const double C6083 = 2 * C47185 + C46793 * C47188 + C47265 * C47011;
    const double C6569 = C47007 * (3 * C47188 + C46793 * C47265);
    const double C23623 =
        2 * C47007 * C47265 + C47007 * (C47265 + C47324 * C47011);
    const double C44129 =
        5 * (3 * C47437 + C47007 * C47455) +
        C47007 * (4 * C47455 +
                  C47007 * (3 * C47453 +
                            C47007 * (2 * C47007 * C46906 +
                                      C47007 * (C46906 + C46927 * C47011))));
    const double C46873 = C46794 * C46871;
    const double C2289 =
        (2 * C47007 * C46847 + C47007 * (C46847 + C46871 * C47011)) / C46745;
    const double C46872 = C46794 * C46870;
    const double C46988 = C46793 * C46870;
    const double C2018 = (2 * C47007 * C46846 +
                          C47007 * (C46846 + C46870 * std::pow(C47007, 2))) /
                         C46747;
    const double C2023 =
        (3 * (C46846 + C46870 * C47011) +
         C47007 * (2 * C47007 * C46870 +
                   C47007 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C47011))) /
        C46747;
    const double C47043 = C46793 * C47039;
    const double C6958 =
        (3 * (C46983 + C47039 * C47011) +
         C47007 * (2 * C47007 * C47039 +
                   C47007 * (C47039 + (ae * C46936 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C47011))) /
        C46747;
    const double C12562 =
        (4 * (2 * C47007 * C46842 + C47007 * C47060) +
         C47007 * (3 * C47060 +
                   C47007 * (2 * C47007 * C46866 +
                             C47007 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C47011)))) /
        C46747;
    const double C12580 = C12570 + C12571;
    const double C47079 = C46793 * C47077;
    const double C23280 =
        (3 * (C47031 + C47077 * C47011) +
         C47007 * (2 * C47007 * C47077 +
                   C47007 * (C47077 + (C46862 + ae * C46793 * C46929 +
                                       C46793 * (ae * C46929 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C47011))) /
        C46747;
    const double C27976 =
        (4 * (2 * C47007 * C47025 + C47007 * C47089) +
         C47007 * (3 * C47089 +
                   C47007 * (2 * C47007 * C47071 +
                             C47007 * (C47071 + (ae * C46929 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C47011)))) /
        C46747;
    const double C44132 =
        (5 * (3 * C47057 + C47007 * C47096) +
         C47007 * (4 * C47096 +
                   C47007 * (3 * C47094 +
                             C47007 * (2 * C47007 * C46862 +
                                       C47007 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C47011))))) /
        C46747;
    const double C46943 = C46941 + C46934;
    const double C47044 = C46793 * C47041;
    const double C7442 =
        (2 * C47007 * C46984 + C47007 * (C46984 + C47041 * C47011)) / C46745;
    const double C47080 = C46793 * C47078;
    const double C23625 =
        (2 * C47007 * C47032 + C47007 * (C47032 + C47078 * C47011)) / C46745;
    const double C165 = C47721 * C135;
    const double C544 = C47721 * C505;
    const double C778 = C47721 * C507;
    const double C27114 = C16118 * C6086;
    const double C38216 = C4760 * C6086;
    const double C43842 = C113 * C6086;
    const double C27594 = C16118 * C6572;
    const double C38696 = C4760 * C6572;
    const double C1423 =
        (2 * (C46793 * C46847 + C47116 * ae) +
         C46793 * (C46847 + C46793 * (C46793 * C46871 + C46942) +
                   C46793 * C46940 * ae) +
         (C47116 + C46940 * C46974) * ae) /
        C46745;
    const double C1585 =
        (C47007 * (C46847 + C46793 * (C46793 * C46871 + C46942) +
                   C46793 * C46940 * ae)) /
        C46745;
    const double C2171 =
        (C46793 * C46847 + C47116 * ae + (C46793 * C46871 + C46942) * C47011) /
        C46745;
    const double C47122 = C47120 + C47121;
    const double C5930 = 4 * (2 * C47192 + C46793 * C47195) +
                         C46793 * (3 * C47195 + C46793 * C47279);
    const double C6084 = 2 * C47192 + C46793 * C47195 + C47279 * C47011;
    const double C6570 = C47007 * (3 * C47195 + C46793 * C47279);
    const double C47328 = C47316 + C47326;
    const double C47768 = C47494 * C47482;
    const double C47808 = C47773 + C47494;
    const double C47776 = C47503 / C47484;
    const double C47772 = C47503 * C47482;
    const double C656 = C47852 - (C47494 * C47485) / C47480;
    const double C47786 = C47576 * C47570;
    const double C47823 = C47788 + C47576;
    const double C47790 = C47583 / C47484;
    const double C47787 = C47583 * C47570;
    const double C1416 = C47856 - (C47576 * C47572) / C47480;
    const double C47792 = C47618 * C47612;
    const double C47829 = C47794 + C47618;
    const double C47796 = C47625 / C47484;
    const double C47793 = C47625 * C47612;
    const double C2284 = C47858 - (C47618 * C47614) / C47480;
    const double C11700 = C11692 * C4761;
    const double C32676 = C11692 * C16119;
    const double C43184 = C11692 * C21796;
    const double C11702 = C11694 * C4761;
    const double C32680 = C11694 * C16119;
    const double C43479 = C11694 * C21796;
    const double C11707 = C11699 * C4761;
    const double C32687 = C11699 * C16119;
    const double C43481 = C11699 * C21796;
    const double C12180 = C12178 * C4761;
    const double C33146 = C12178 * C16119;
    const double C43838 = C12178 * C21796;
    const double C13067 = C13065 * C4761;
    const double C33997 = C13065 * C16119;
    const double C43476 = C13065 * C21796;
    const double C10813 = C551 * C4761;
    const double C10804 = C551 * C4762;
    const double C31831 = C551 * C16119;
    const double C31822 = C551 * C16120;
    const double C42829 = C551 * C21796;
    const double C10808 = C553 * C4762;
    const double C11082 = C553 * C4761;
    const double C31826 = C553 * C16120;
    const double C32092 = C553 * C16119;
    const double C43032 = C553 * C21796;
    const double C11290 = C961 * C4761;
    const double C11288 = C961 * C4762;
    const double C32298 = C961 * C16119;
    const double C32296 = C961 * C16120;
    const double C43190 = C961 * C21796;
    const double C163 = C47721 * C143;
    const double C536 = C47721 * C515;
    const double C5179 = C4755 * C515;
    const double C16537 = C16113 * C515;
    const double C540 = C47721 * C516;
    const double C5475 = C4755 * C516;
    const double C16833 = C16113 * C516;
    const double C2186 = C2181 + C2182;
    const double C5189 = C5162 + C5163;
    const double C7165 = C7160 + C7161;
    const double C16547 = C16520 + C16521;
    const double C18491 = C18486 + C18487;
    const double C1600 = C1595 + C1596;
    const double C5695 = C5680 + C5681;
    const double C6439 = C6434 + C6435;
    const double C17053 = C17038 + C17039;
    const double C17781 = C17776 + C17777;
    const double C7306 = C7300 + C7301;
    const double C12793 = C12786 + C12787;
    const double C18632 = C18626 + C18627;
    const double C5931 =
        (4 * (2 * C47187 + C46793 * C47266 + C47188 * ae) +
         C46793 *
             (3 * C47266 +
              C46793 * (2 * C47258 +
                        C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                                  C46793 * C46906 * ae) +
                        C47260 * ae) +
              C47265 * ae) +
         (3 * C47188 + C46793 * C47265) * ae) /
        C46745;
    const double C6085 =
        (2 * C47187 + C46793 * C47266 + C47188 * ae +
         (2 * C47258 +
          C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                    C46793 * C46906 * ae) +
          C47260 * ae) *
             C47011) /
        C46745;
    const double C6571 =
        (C47007 *
         (3 * C47266 +
          C46793 * (2 * C47258 +
                    C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                              C46793 * C46906 * ae) +
                    C47260 * ae) +
          C47265 * ae)) /
        C46745;
    const double C7439 =
        (2 * C47007 * C47266 +
         C47007 * (C47266 + (C46823 + C46793 * (C46793 * C46839 + C46908) +
                             C46793 * C46906 * ae) *
                                C47011)) /
        C46745;
    const double C44502 = C44500 * C21796;
    const double C44145 = C44143 * C21796;
    const double C10807 = C545 * C4757;
    const double C10801 = C545 * C47802;
    const double C31825 = C545 * C16115;
    const double C31819 = C545 * C47802;
    const double C42828 = C545 * C47464;
    const double C10803 = C550 * C4757;
    const double C10792 = C550 * C47802;
    const double C31821 = C550 * C16115;
    const double C31812 = C550 * C47802;
    const double C42824 = C550 * C47464;
    const double C11287 = C960 * C4757;
    const double C11285 = C960 * C47802;
    const double C32295 = C960 * C16115;
    const double C32293 = C960 * C47802;
    const double C43187 = C960 * C47464;
    const double C11701 = C11693 * C4757;
    const double C32677 = C11693 * C16115;
    const double C43185 = C11693 * C47464;
    const double C11703 = C11695 * C4757;
    const double C32681 = C11695 * C16115;
    const double C43480 = C11695 * C47464;
    const double C13066 = C13064 * C4757;
    const double C33996 = C13064 * C16115;
    const double C43477 = C13064 * C47464;
    const double C326 =
        (C46812 + ae * C46815 + C46794 * C46826 + ae * C46793 * C46901 +
         C46793 * (ae * C46901 + C46793 * C46846)) /
        C46747;
    const double C327 =
        (ae * (2 * C46889 + C46794 * C46901 + (C46878 + C46892 * C46819) * ae) +
         C46793 * (2 * C46826 + ae * C46827 + C46794 * C46846)) /
        C46747;
    const double C943 = ((zP - zQ) * (ae * C46901 + C46793 * C46846)) / C46747;
    const double C133 = (3 * (C46883 + C46794 * C46889 + C47110 * ae) +
                         C46794 * (2 * C46889 + C46794 * C46901 + C47112 * ae) +
                         (2 * C47110 + C46794 * C47112) * ae) /
                        C46745;
    const double C312 =
        (C46883 + C46794 * C46889 + C47110 * ae + C46901 * C46974) / C46745;
    const double C314 =
        (C46793 * (2 * C46889 + C46794 * C46901 + C47112 * ae)) / C46745;
    const double C501 =
        (C46883 + C46794 * C46889 + C47110 * ae + C46901 * C47011) / C46745;
    const double C503 =
        (C47007 * (2 * C46889 + C46794 * C46901 + C47112 * ae)) / C46745;
    const double C936 = (C47007 * C46793 * C46901) / C46745;
    const double C2180 = C47721 * C1310;
    const double C5167 = C47833 * C1310;
    const double C7157 = C4755 * C1310;
    const double C16525 = C47833 * C1310;
    const double C18483 = C16113 * C1310;
    const double C1594 = C47721 * C1313;
    const double C5685 = C47833 * C1313;
    const double C6431 = C4755 * C1313;
    const double C17043 = C47833 * C1313;
    const double C17773 = C16113 * C1313;
    const double C7155 = C47833 * C1316;
    const double C11685 = C47721 * C1316;
    const double C18481 = C47833 * C1316;
    const double C7297 = C47833 * C2412;
    const double C12785 = C47721 * C2412;
    const double C18623 = C47833 * C2412;
    const double C12569 = C2303 * C47802;
    const double C12926 = C2303 * C4757;
    const double C33527 = C2303 * C47802;
    const double C33862 = C2303 * C16115;
    const double C42826 = C2303 * C47464;
    const double C11706 = C11698 * C4757;
    const double C32686 = C11698 * C16115;
    const double C43482 = C11698 * C47464;
    const double C12181 = C12179 * C4757;
    const double C33147 = C12179 * C16115;
    const double C43839 = C12179 * C47464;
    const double C44501 = C44499 * C47464;
    const double C27115 = C47833 * C6089;
    const double C38217 = C47833 * C6089;
    const double C43843 = C47721 * C6089;
    const double C27595 = C47833 * C6575;
    const double C38697 = C47833 * C6575;
    const double C28457 = C47833 * C7443;
    const double C39555 = C47833 * C7443;
    const double C43484 = C47721 * C7443;
    const double C44144 = C44142 * C47464;
    const double C2178 = C47721 * C1292;
    const double C5181 = C47833 * C1292;
    const double C16539 = C47833 * C1292;
    const double C1592 = C47721 * C1298;
    const double C5691 = C47833 * C1298;
    const double C17049 = C47833 * C1298;
    const double C1436 = C1429 + C1430;
    const double C5004 = C4986 + C4987;
    const double C16362 = C16344 + C16345;
    const double C355 = C47721 * C316;
    const double C5335 = C47833 * C316;
    const double C16693 = C47833 * C316;
    const double C668 = C47721 * C318;
    const double C4793 = C47833 * C318;
    const double C16151 = C47833 * C318;
    const double C958 = C47721 * C938;
    const double C5477 = C47833 * C938;
    const double C16835 = C47833 * C938;
    const double C164 = C113 * C122;
    const double C354 = C113 * C298;
    const double C5334 = C4760 * C298;
    const double C16692 = C16118 * C298;
    const double C667 = C113 * C299;
    const double C4792 = C4760 * C299;
    const double C16150 = C16118 * C299;
    const double C543 = C113 * C487;
    const double C777 = C113 * C488;
    const double C957 = C113 * C929;
    const double C5476 = C4760 * C929;
    const double C16834 = C16118 * C929;
    const double C12925 = C2302 * C4762;
    const double C33861 = C2302 * C16120;
    const double C42832 = C2302 * C21796;
    const double C47280 = C47278 + C47273;
    const double C6232 = C6226 + C6227;
    const double C17574 = C17568 + C17569;
    const double C7164 = C7158 + C7159;
    const double C11697 = C11686 + C11687;
    const double C18490 = C18484 + C18485;
    const double C6438 = C6432 + C6433;
    const double C11843 = C11840 + C11841;
    const double C17780 = C17774 + C17775;
    const double C46919 = C46794 * C46918;
    const double C46924 = 3 * C46918;
    const double C46987 = ae * C46918;
    const double C46986 = C46793 * C46918;
    const double C1166 = (2 * (ae * C46901 + C46793 * C46846) +
                          ae * (C46901 + C46918 * std::pow(C46793, 2)) +
                          C46793 * (C46846 + ae * C46793 * C46918 +
                                    C46793 * (ae * C46918 + C46793 * C46870))) /
                         C46747;
    const double C1154 =
        (2 * C46793 * C46901 + C46793 * (C46901 + C46918 * C46974)) / C46745;
    const double C1297 = (C47007 * (C46901 + C46918 * C46974)) / C46745;
    const double C2006 =
        (2 * C47007 * C46901 + C47007 * (C46901 + C46918 * C47011)) / C46745;
    const double C6223 = C47833 * C1170;
    const double C17565 = C47833 * C1170;
    const double C6429 = C47833 * C1708;
    const double C11839 = C47721 * C1708;
    const double C17771 = C47833 * C1708;
    const double C6222 = C4760 * C1163;
    const double C17564 = C16118 * C1163;
    const double C7154 = C4760 * C1306;
    const double C11684 = C113 * C1306;
    const double C18480 = C16118 * C1306;
    const double C6428 = C4760 * C1704;
    const double C11838 = C113 * C1704;
    const double C17770 = C16118 * C1704;
    const double C47327 = C46793 * C47325;
    const double C23278 =
        (3 * (C47266 + C47325 * C47011) +
         C47007 *
             (2 * C47007 * C47325 +
              C47007 * (C47325 + (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) *
                                     C47011))) /
        C46745;
    const double C27118 = C16118 * C6083;
    const double C38220 = C4760 * C6083;
    const double C43840 = C113 * C6083;
    const double C27590 = C16118 * C6569;
    const double C38692 = C4760 * C6569;
    const double C46875 = C46855 + C46873;
    const double C46874 = C46856 + C46872;
    const double C2294 = C47721 * C2018;
    const double C47045 = C47042 + C47043;
    const double C12586 = C12580 * C47802;
    const double C33528 = C12580 * C47802;
    const double C44394 = C12580 * C47464;
    const double C47081 = C47069 + C47079;
    const double C46944 = C46794 * C46943;
    const double C46989 = C46943 * C46974;
    const double C2017 =
        (3 * (C46901 + C46918 * C47011) +
         C47007 * (2 * C47007 * C46918 + C47007 * (C46918 + C46943 * C47011))) /
        C46745;
    const double C47046 = C47040 + C47044;
    const double C47082 = C47067 + C47080;
    const double C123 = 5 * (3 * C47112 + C46794 * C47116) +
                        C46794 * (4 * C47116 + C46794 * C47122);
    const double C300 = 3 * C47112 + C46794 * C47116 + C47122 * C46974;
    const double C489 = 3 * C47112 + C46794 * C47116 + C47122 * C47011;
    const double C660 = C46793 * (4 * C47116 + C46794 * C47122);
    const double C770 = C47007 * (4 * C47116 + C46794 * C47122);
    const double C930 = C47007 * C46793 * C47122;
    const double C22531 = 5 * (3 * C47188 + C46793 * C47265) +
                          C46793 * (4 * C47265 + C46793 * C47328);
    const double C22645 = 3 * C47188 + C46793 * C47265 + C47328 * C47011;
    const double C22991 = C47007 * (4 * C47265 + C46793 * C47328);
    const double C47804 = C47768 / C47480;
    const double C47839 = C47808 / C47484;
    const double C47840 = C47810 + C47776;
    const double C658 = C47776 - C47501 / C47498;
    const double C47807 = C47772 / C47480;
    const double C47820 = C47786 / C47480;
    const double C47846 = C47823 / C47484;
    const double C47847 = C47824 + C47790;
    const double C1418 = C47790 - C47581 / C47498;
    const double C47822 = C47787 / C47480;
    const double C47826 = C47792 / C47480;
    const double C47849 = C47829 / C47484;
    const double C47850 = C47830 + C47796;
    const double C2286 = C47796 - C47623 / C47498;
    const double C47828 = C47793 / C47480;
    const double C11676 = C2186 * C4762;
    const double C12791 = C2186 * C4761;
    const double C32678 = C2186 * C16120;
    const double C33729 = C2186 * C16119;
    const double C43188 = C2186 * C21796;
    const double C11682 = C1600 * C4762;
    const double C12038 = C1600 * C4761;
    const double C32682 = C1600 * C16120;
    const double C33012 = C1600 * C16119;
    const double C43736 = C1600 * C21796;
    const double C13059 = C12793 * C4762;
    const double C33995 = C12793 * C16120;
    const double C44294 = C12793 * C21796;
    const double C27119 = C47833 * C6085;
    const double C38221 = C47833 * C6085;
    const double C43841 = C47721 * C6085;
    const double C27591 = C47833 * C6571;
    const double C38693 = C47833 * C6571;
    const double C28461 = C47833 * C7439;
    const double C39559 = C47833 * C7439;
    const double C43486 = C47721 * C7439;
    const double C42834 = C42824 + C42823;
    const double C43478 = C43185 + C43184;
    const double C44494 = C43476 + C43477;
    const double C347 = C47721 * C326;
    const double C4985 = C4755 * C326;
    const double C4981 = C47833 * C326;
    const double C16343 = C16113 * C326;
    const double C16339 = C47833 * C326;
    const double C351 = C47721 * C327;
    const double C4787 = C47833 * C327;
    const double C5333 = C4755 * C327;
    const double C16145 = C47833 * C327;
    const double C16691 = C16113 * C327;
    const double C954 = C47721 * C943;
    const double C5175 = C47833 * C943;
    const double C5689 = C4755 * C943;
    const double C16533 = C47833 * C943;
    const double C17047 = C16113 * C943;
    const double C160 = C113 * C133;
    const double C4790 = C4759 * C133;
    const double C16148 = C16117 * C133;
    const double C346 = C113 * C312;
    const double C4984 = C4759 * C312;
    const double C4980 = C4760 * C312;
    const double C16342 = C16117 * C312;
    const double C16338 = C16118 * C312;
    const double C350 = C113 * C314;
    const double C4786 = C4760 * C314;
    const double C5332 = C4759 * C314;
    const double C16144 = C16118 * C314;
    const double C16690 = C16117 * C314;
    const double C535 = C113 * C501;
    const double C5178 = C4759 * C501;
    const double C16536 = C16117 * C501;
    const double C539 = C113 * C503;
    const double C5474 = C4759 * C503;
    const double C16832 = C16117 * C503;
    const double C953 = C113 * C936;
    const double C5174 = C4760 * C936;
    const double C5688 = C4759 * C936;
    const double C16532 = C16118 * C936;
    const double C17046 = C16117 * C936;
    const double C2185 = C2179 + C2180;
    const double C5191 = C5166 + C5167;
    const double C7163 = C7156 + C7157;
    const double C16549 = C16524 + C16525;
    const double C18489 = C18482 + C18483;
    const double C1599 = C1593 + C1594;
    const double C5697 = C5684 + C5685;
    const double C6437 = C6430 + C6431;
    const double C17055 = C17042 + C17043;
    const double C17779 = C17772 + C17773;
    const double C7304 = C7296 + C7297;
    const double C12792 = C12784 + C12785;
    const double C18630 = C18622 + C18623;
    const double C44393 = C42825 + C42826;
    const double C43487 = C43481 + C43482;
    const double C27130 = C27114 + C27115;
    const double C38232 = C38216 + C38217;
    const double C43845 = C43842 + C43843;
    const double C27599 = C27594 + C27595;
    const double C38701 = C38696 + C38697;
    const double C28464 = C28456 + C28457;
    const double C39562 = C39554 + C39555;
    const double C43488 = C43483 + C43484;
    const double C2184 = C2177 + C2178;
    const double C5198 = C5180 + C5181;
    const double C16556 = C16538 + C16539;
    const double C1598 = C1591 + C1592;
    const double C5700 = C5690 + C5691;
    const double C17058 = C17048 + C17049;
    const double C175 = C164 + C165;
    const double C367 = C354 + C355;
    const double C5340 = C5334 + C5335;
    const double C16698 = C16692 + C16693;
    const double C670 = C667 + C668;
    const double C4810 = C4792 + C4793;
    const double C16168 = C16150 + C16151;
    const double C556 = C543 + C544;
    const double C780 = C777 + C778;
    const double C964 = C957 + C958;
    const double C5482 = C5476 + C5477;
    const double C16840 = C16834 + C16835;
    const double C5933 =
        (4 * (2 * C47194 + C46793 * C47280 + C47195 * ae) +
         C46793 *
             (3 * C47280 +
              C46793 * (2 * C47272 +
                        C46793 * (C46851 +
                                  C46793 * (C46793 * C46794 * C46863 + C46934) +
                                  C46793 * C46931 * ae) +
                        C47274 * ae) +
              C47279 * ae) +
         (3 * C47195 + C46793 * C47279) * ae) /
        C46745;
    const double C6087 =
        (2 * C47194 + C46793 * C47280 + C47195 * ae +
         (2 * C47272 +
          C46793 * (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                    C46793 * C46931 * ae) +
          C47274 * ae) *
             C47011) /
        C46745;
    const double C6573 =
        (C47007 *
         (3 * C47280 +
          C46793 *
              (2 * C47272 +
               C46793 * (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                         C46793 * C46931 * ae) +
               C47274 * ae) +
          C47279 * ae)) /
        C46745;
    const double C7441 =
        (2 * C47007 * C47280 +
         C47007 *
             (C47280 + (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                        C46793 * C46931 * ae) *
                           C47011)) /
        C46745;
    const double C11705 = C11697 * C4762;
    const double C32685 = C11697 * C16120;
    const double C43738 = C11697 * C21796;
    const double C12176 = C11843 * C4762;
    const double C33148 = C11843 * C16120;
    const double C46920 = C46904 + C46919;
    const double C46990 = C46987 + C46988;
    const double C1291 = (C46793 * C46901 + C46986 * C47011) / C46745;
    const double C2410 =
        (2 * C47007 * C46986 + C47007 * (C46986 + C46793 * C46943 * C47011)) /
        C46745;
    const double C1428 = C47721 * C1166;
    const double C4983 = C47833 * C1166;
    const double C16341 = C47833 * C1166;
    const double C1427 = C113 * C1154;
    const double C4982 = C4760 * C1154;
    const double C16340 = C16118 * C1154;
    const double C1589 = C113 * C1297;
    const double C5686 = C4760 * C1297;
    const double C17044 = C16118 * C1297;
    const double C2293 = C113 * C2006;
    const double C6230 = C6222 + C6223;
    const double C17572 = C17564 + C17565;
    const double C7162 = C7154 + C7155;
    const double C11696 = C11684 + C11685;
    const double C18488 = C18480 + C18481;
    const double C6436 = C6428 + C6429;
    const double C11842 = C11838 + C11839;
    const double C17778 = C17770 + C17771;
    const double C47329 = C47311 + C47327;
    const double C136 = (5 * (3 * C46827 + C46794 * C46847) +
                         C46794 * (4 * C46847 + C46794 * C46875)) /
                        C46745;
    const double C319 =
        (3 * C46827 + C46794 * C46847 +
         C46793 * (C46793 * C46875 + C47122 * ae) + C46793 * C47122 * ae) /
        C46745;
    const double C508 =
        (3 * C46827 + C46794 * C46847 + C46875 * C47011) / C46745;
    const double C661 = (C46793 * (4 * C46847 + C46794 * C46875) +
                         (4 * C47116 + C46794 * C47122) * ae) /
                        C46745;
    const double C771 = (C47007 * (4 * C46847 + C46794 * C46875)) / C46745;
    const double C939 = (C47007 * (C46793 * C46875 + C47122 * ae)) / C46745;
    const double C144 =
        (5 * (3 * C46846 + ae * C46847 + C46794 * C46874) +
         ae * (4 * C46847 + C46794 * C46875) +
         C46794 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C517 = (2 * C46826 + ae * C46827 + C46794 * C46846 +
                         C46874 * std::pow(zP - zQ, 2)) /
                        C46747;
    const double C518 =
        ((zP - zQ) * (3 * C46846 + ae * C46847 + C46794 * C46874)) / C46747;
    const double C519 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 +
         (3 * C46870 + ae * C46871 +
          C46794 *
              (2 * C46866 + ae * C46867 +
               C46794 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             std::pow(zP - zQ, 2)) /
        C46747;
    const double C773 =
        ((zP - zQ) *
         (4 * C46874 + ae * C46875 +
          C46794 * (3 * C46870 + ae * C46871 +
                    C46794 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C2291 =
        (2 * C47007 * C46874 +
         C47007 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C47011)) /
        C46747;
    const double C6090 =
        (2 * C46983 + ae * C46984 + C46793 * C47045 +
         (2 * C47039 + ae * C47041 +
          C46793 *
              (C46866 + ae * C46793 * C46936 +
               C46793 * (ae * C46936 +
                         C46793 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             C47011) /
        C46747;
    const double C7444 =
        (2 * C47007 * C47045 +
         C47007 * (C47045 + (C46866 + ae * C46793 * C46936 +
                             C46793 * (ae * C46936 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C47011)) /
        C46747;
    const double C22648 =
        (3 * C47031 + ae * C47032 + C46793 * C47081 +
         (3 * C47077 + ae * C47078 +
          C46793 *
              (2 * C47071 + ae * C47073 +
               C46793 * (C46862 + ae * C46793 * C46929 +
                         C46793 * (ae * C46929 + C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             C47011) /
        C46747;
    const double C23626 =
        (2 * C47007 * C47081 +
         C47007 * (C47081 + (2 * C47071 + ae * C47073 +
                             C46793 * (C46862 + ae * C46793 * C46929 +
                                       C46793 * (ae * C46929 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C47011)) /
        C46747;
    const double C46945 = C46925 + C46944;
    const double C46991 = C46918 + C46989;
    const double C5936 =
        (4 * (2 * C46983 + ae * C46984 + C46793 * C47045) +
         ae * (3 * C46984 + C46793 * C47046) +
         C46793 *
             (3 * C47045 + ae * C47046 +
              C46793 *
                  (2 * C47039 + ae * C47041 +
                   C46793 * (C46866 + ae * C46793 * C46936 +
                             C46793 * (ae * C46936 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C6576 =
        (C47007 *
         (3 * C47045 + ae * C47046 +
          C46793 * (2 * C47039 + ae * C47041 +
                    C46793 * (C46866 + ae * C46793 * C46936 +
                              C46793 * (ae * C46936 +
                                        C46793 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C5934 = (4 * (2 * C46979 + C46793 * C46984) +
                          C46793 * (3 * C46984 + C46793 * C47046)) /
                         C46745;
    const double C6088 =
        (2 * C46979 + C46793 * C46984 + C47046 * C47011) / C46745;
    const double C6574 = (C47007 * (3 * C46984 + C46793 * C47046)) / C46745;
    const double C22534 =
        (5 * (3 * C47031 + ae * C47032 + C46793 * C47081) +
         ae * (4 * C47032 + C46793 * C47082) +
         C46793 *
             (4 * C47081 + ae * C47082 +
              C46793 *
                  (3 * C47077 + ae * C47078 +
                   C46793 * (2 * C47071 + ae * C47073 +
                             C46793 * (C46862 + ae * C46793 * C46929 +
                                       C46793 * (ae * C46929 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C22994 =
        (C47007 *
         (4 * C47081 + ae * C47082 +
          C46793 * (3 * C47077 + ae * C47078 +
                    C46793 * (2 * C47071 + ae * C47073 +
                              C46793 * (C46862 + ae * C46793 * C46929 +
                                        C46793 * (ae * C46929 +
                                                  C46793 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C22533 = (5 * (3 * C46977 + C46793 * C47032) +
                           C46793 * (4 * C47032 + C46793 * C47082)) /
                          C46745;
    const double C22647 =
        (3 * C46977 + C46793 * C47032 + C47082 * C47011) / C46745;
    const double C22993 = (C47007 * (4 * C47032 + C46793 * C47082)) / C46745;
    const double C47860 = C47804 + C47852;
    const double C657 = C47839 - (C47503 * C47485) / C47480;
    const double C111 = C47840 / C47484 - C47501 / C47811;
    const double C47853 = C47807 + C47839;
    const double C47861 = C47820 + C47856;
    const double C1417 = C47846 - (C47583 * C47572) / C47480;
    const double C1145 = C47847 / C47484 - C47581 / C47811;
    const double C47857 = C47822 + C47846;
    const double C47862 = C47826 + C47858;
    const double C2285 = C47849 - (C47625 * C47614) / C47480;
    const double C1998 = C47850 / C47484 - C47623 / C47811;
    const double C47859 = C47828 + C47849;
    const double C27132 = C27118 + C27119;
    const double C38234 = C38220 + C38221;
    const double C43844 = C43840 + C43841;
    const double C27597 = C27590 + C27591;
    const double C38699 = C38692 + C38693;
    const double C28466 = C28460 + C28461;
    const double C39564 = C39558 + C39559;
    const double C43489 = C43485 + C43486;
    const double C173 = C160 + C161;
    const double C4809 = C4790 + C4791;
    const double C16167 = C16148 + C16149;
    const double C363 = C346 + C347;
    const double C5003 = C4984 + C4985;
    const double C5001 = C4980 + C4981;
    const double C16361 = C16342 + C16343;
    const double C16359 = C16338 + C16339;
    const double C365 = C350 + C351;
    const double C4807 = C4786 + C4787;
    const double C5339 = C5332 + C5333;
    const double C16165 = C16144 + C16145;
    const double C16697 = C16690 + C16691;
    const double C552 = C535 + C536;
    const double C5197 = C5178 + C5179;
    const double C16555 = C16536 + C16537;
    const double C554 = C539 + C540;
    const double C5481 = C5474 + C5475;
    const double C16839 = C16832 + C16833;
    const double C962 = C953 + C954;
    const double C5195 = C5174 + C5175;
    const double C5699 = C5688 + C5689;
    const double C16553 = C16532 + C16533;
    const double C17057 = C17046 + C17047;
    const double C11677 = C2185 * C47802;
    const double C12790 = C2185 * C4757;
    const double C32679 = C2185 * C47802;
    const double C33728 = C2185 * C16115;
    const double C43189 = C2185 * C47464;
    const double C11683 = C1599 * C47802;
    const double C12039 = C1599 * C4757;
    const double C32683 = C1599 * C47802;
    const double C33013 = C1599 * C16115;
    const double C43737 = C1599 * C47464;
    const double C13058 = C12792 * C47802;
    const double C33994 = C12792 * C47802;
    const double C44293 = C12792 * C47464;
    const double C43847 = C43845 * C47464;
    const double C43490 = C43488 * C47464;
    const double C12789 = C2184 * C4762;
    const double C33727 = C2184 * C16120;
    const double C43192 = C2184 * C21796;
    const double C12040 = C1598 * C4762;
    const double C33014 = C1598 * C16120;
    const double C10811 = C556 * C4762;
    const double C31829 = C556 * C16120;
    const double C43034 = C556 * C21796;
    const double C11084 = C780 * C4762;
    const double C32094 = C780 * C16120;
    const double C11292 = C964 * C4762;
    const double C32300 = C964 * C16120;
    const double C46921 = C46920 + C46915;
    const double C1309 =
        (ae * C46901 + C46793 * C46846 + C46990 * std::pow(zP - zQ, 2)) /
        C46747;
    const double C1312 =
        ((zP - zQ) * (C46846 + ae * C46986 + C46793 * C46990)) / C46747;
    const double C1317 =
        (C46846 + ae * C46986 + C46793 * C46990 +
         (C46870 + ae * C46793 * C46943 +
          C46793 *
              (ae * C46943 +
               C46793 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             std::pow(zP - zQ, 2)) /
        C46747;
    const double C2413 =
        (2 * C47007 * C46990 +
         C47007 * (C46990 + (ae * C46943 +
                             C46793 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C47011)) /
        C46747;
    const double C2175 = C113 * C1291;
    const double C5176 = C4760 * C1291;
    const double C16534 = C16118 * C1291;
    const double C1435 = C1427 + C1428;
    const double C5002 = C4982 + C4983;
    const double C16360 = C16340 + C16341;
    const double C2301 = C2293 + C2294;
    const double C11704 = C11696 * C47802;
    const double C32684 = C11696 * C47802;
    const double C43739 = C11696 * C47464;
    const double C12177 = C11842 * C47802;
    const double C33149 = C11842 * C47802;
    const double C47330 = C47329 + C47314;
    const double C542 = C47721 * C517;
    const double C776 = C47721 * C518;
    const double C46946 = C46945 + C46937;
    const double C1171 =
        (3 * (C46846 + ae * C46986 + C46793 * C46990) +
         ae * (2 * C46986 + C46793 * C46991) +
         C46793 *
             (2 * C46990 + ae * C46991 +
              C46793 *
                  (C46870 + ae * C46793 * C46943 +
                   C46793 * (ae * C46943 +
                             C46793 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C1709 =
        ((zP - zQ) *
         (2 * C46990 + ae * C46991 +
          C46793 * (C46870 + ae * C46793 * C46943 +
                    C46793 * (ae * C46943 +
                              C46793 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C1165 = (3 * (C46901 + C46918 * C46974) +
                          C46793 * (2 * C46986 + C46793 * C46991)) /
                         C46745;
    const double C1308 = (C46901 + C46918 * C46974 + C46991 * C47011) / C46745;
    const double C1706 = (C47007 * (2 * C46986 + C46793 * C46991)) / C46745;
    const double C108 =
        (C47851 + 2 * C47494) / C47484 - (C47860 * C47485) / C47480;
    const double C109 =
        (C47838 + 2 * C47503 + C47860) / C47484 - (C47853 * C47485) / C47480;
    const double C110 = (C47809 + C47500 / C47480 + C47853) / C47484 -
                        (C47840 * C47485) / C47480;
    const double C1142 =
        (C47854 + 2 * C47576) / C47484 - (C47861 * C47572) / C47480;
    const double C1143 =
        (C47842 + 2 * C47583 + C47861) / C47484 - (C47857 * C47572) / C47480;
    const double C1144 = (C47815 + C47580 / C47480 + C47857) / C47484 -
                         (C47847 * C47572) / C47480;
    const double C1995 =
        (C47855 + 2 * C47618) / C47484 - (C47862 * C47614) / C47480;
    const double C1996 =
        (C47844 + 2 * C47625 + C47862) / C47484 - (C47859 * C47614) / C47480;
    const double C1997 = (C47818 + C47622 / C47480 + C47859) / C47484 -
                         (C47850 * C47614) / C47480;
    const double C43846 = C43844 * C21796;
    const double C43491 = C43489 * C21796;
    const double C10812 = C552 * C4757;
    const double C10805 = C552 * C47802;
    const double C31830 = C552 * C16115;
    const double C31823 = C552 * C47802;
    const double C42830 = C552 * C47464;
    const double C10809 = C554 * C47802;
    const double C11083 = C554 * C4757;
    const double C31827 = C554 * C47802;
    const double C32093 = C554 * C16115;
    const double C43033 = C554 * C47464;
    const double C11291 = C962 * C4757;
    const double C11289 = C962 * C47802;
    const double C32299 = C962 * C16115;
    const double C32297 = C962 * C47802;
    const double C43191 = C962 * C47464;
    const double C44292 = C43188 + C43189;
    const double C328 =
        (2 * C46826 + ae * C46827 + C46794 * C46846 + ae * C46793 * C46921 +
         C46793 * (ae * C46921 + C46793 * C46874)) /
        C46747;
    const double C329 =
        (ae * (3 * C46901 + C46794 * C46921 +
               (2 * C46895 + C46794 * C46913) * ae) +
         C46793 * (3 * C46846 + ae * C46847 + C46794 * C46874)) /
        C46747;
    const double C944 = ((zP - zQ) * (ae * C46921 + C46793 * C46874)) / C46747;
    const double C134 = (4 * (2 * C46889 + C46794 * C46901 + C47112 * ae) +
                         C46794 * (3 * C46901 + C46794 * C46921 + C47116 * ae) +
                         (3 * C47112 + C46794 * C47116) * ae) /
                        C46745;
    const double C315 =
        (2 * C46889 + C46794 * C46901 + C47112 * ae + C46921 * C46974) / C46745;
    const double C317 =
        (C46793 * (3 * C46901 + C46794 * C46921 + C47116 * ae)) / C46745;
    const double C504 =
        (2 * C46889 + C46794 * C46901 + C47112 * ae + C46921 * C47011) / C46745;
    const double C506 =
        (C47007 * (3 * C46901 + C46794 * C46921 + C47116 * ae)) / C46745;
    const double C937 = (C47007 * C46793 * C46921) / C46745;
    const double C2176 = C47721 * C1309;
    const double C5177 = C47833 * C1309;
    const double C16535 = C47833 * C1309;
    const double C1590 = C47721 * C1312;
    const double C5687 = C47833 * C1312;
    const double C17045 = C47833 * C1312;
    const double C12924 = C2301 * C47802;
    const double C33860 = C2301 * C47802;
    const double C42831 = C2301 * C47464;
    const double C22532 =
        (5 * (3 * C47266 + C46793 * C47330 + C47265 * ae) +
         C46793 *
             (4 * C47330 +
              C46793 *
                  (3 * C47325 +
                   C46793 *
                       (2 * C47317 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) +
                        C47319 * ae) +
                   C47324 * ae) +
              C47328 * ae) +
         (4 * C47265 + C46793 * C47328) * ae) /
        C46745;
    const double C22646 =
        (3 * C47266 + C46793 * C47330 + C47265 * ae +
         (3 * C47325 +
          C46793 * (2 * C47317 +
                    C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                              C46793 * C46927 * ae) +
                    C47319 * ae) +
          C47324 * ae) *
             C47011) /
        C46745;
    const double C22992 =
        (C47007 *
         (4 * C47330 +
          C46793 * (3 * C47325 +
                    C46793 * (2 * C47317 +
                              C46793 * (C46839 +
                                        C46793 * (C46793 * C46863 + C46930) +
                                        C46793 * C46927 * ae) +
                              C47319 * ae) +
                    C47324 * ae) +
          C47328 * ae)) /
        C46745;
    const double C23624 =
        (2 * C47007 * C47330 +
         C47007 *
             (C47330 + (2 * C47317 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) +
                        C47319 * ae) *
                           C47011)) /
        C46745;
    const double C46947 = C46794 * C46946;
    const double C1425 =
        (2 * (ae * C46921 + C46793 * C46874) + ae * (C46921 + C46946 * C46974) +
         C46793 *
             (C46874 + ae * C46793 * C46946 +
              C46793 *
                  (ae * C46946 +
                   C46793 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C1587 =
        ((zP - zQ) *
         (C46874 + ae * C46793 * C46946 +
          C46793 * (ae * C46946 +
                    C46793 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C2173 =
        (ae * C46921 + C46793 * C46874 +
         (ae * C46946 +
          C46793 *
              (2 * C46866 + ae * C46867 +
               C46794 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             C47011) /
        C46747;
    const double C1424 =
        (2 * C46793 * C46921 + C46793 * (C46921 + C46946 * C46974)) / C46745;
    const double C1586 = (C47007 * (C46921 + C46946 * C46974)) / C46745;
    const double C2172 = (C46793 * C46921 + C46793 * C46946 * C47011) / C46745;
    const double C2290 =
        (2 * C47007 * C46921 + C47007 * (C46921 + C46946 * C47011)) / C46745;
    const double C42835 = C42829 + C42830;
    const double C353 = C47721 * C328;
    const double C5331 = C47833 * C328;
    const double C16689 = C47833 * C328;
    const double C666 = C47721 * C329;
    const double C4789 = C47833 * C329;
    const double C16147 = C47833 * C329;
    const double C956 = C47721 * C944;
    const double C5473 = C47833 * C944;
    const double C16831 = C47833 * C944;
    const double C162 = C113 * C134;
    const double C352 = C113 * C315;
    const double C5330 = C4760 * C315;
    const double C16688 = C16118 * C315;
    const double C665 = C113 * C317;
    const double C4788 = C4760 * C317;
    const double C16146 = C16118 * C317;
    const double C541 = C113 * C504;
    const double C775 = C113 * C506;
    const double C955 = C113 * C937;
    const double C5472 = C4760 * C937;
    const double C16830 = C16118 * C937;
    const double C2183 = C2175 + C2176;
    const double C5196 = C5176 + C5177;
    const double C16554 = C16534 + C16535;
    const double C1597 = C1589 + C1590;
    const double C5698 = C5686 + C5687;
    const double C17056 = C17044 + C17045;
    const double C46948 = C46924 + C46947;
    const double C174 = C162 + C163;
    const double C366 = C352 + C353;
    const double C5338 = C5330 + C5331;
    const double C16696 = C16688 + C16689;
    const double C669 = C665 + C666;
    const double C4808 = C4788 + C4789;
    const double C16166 = C16146 + C16147;
    const double C555 = C541 + C542;
    const double C779 = C775 + C776;
    const double C963 = C955 + C956;
    const double C5480 = C5472 + C5473;
    const double C16838 = C16830 + C16831;
    const double C12788 = C2183 * C47802;
    const double C33726 = C2183 * C47802;
    const double C43193 = C2183 * C47464;
    const double C12041 = C1597 * C47802;
    const double C33015 = C1597 * C47802;
    const double C46949 = C46948 + C46942;
    const double C10810 = C555 * C47802;
    const double C31828 = C555 * C47802;
    const double C43035 = C555 * C47464;
    const double C11085 = C779 * C47802;
    const double C32095 = C779 * C47802;
    const double C11293 = C963 * C47802;
    const double C32301 = C963 * C47802;
    const double C330 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 + ae * C46793 * C46949 +
         C46793 *
             (ae * C46949 +
              C46793 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C663 =
        (ae * (4 * C46921 + C46794 * C46949 +
               (3 * C46913 + C46794 * C46940) * ae) +
         C46793 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C945 =
        ((zP - zQ) *
         (ae * C46949 +
          C46793 * (3 * C46870 + ae * C46871 +
                    C46794 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C137 = (5 * (3 * C46901 + C46794 * C46921 + C47116 * ae) +
                         C46794 * (4 * C46921 + C46794 * C46949 + C47122 * ae) +
                         (4 * C47116 + C46794 * C47122) * ae) /
                        C46745;
    const double C320 =
        (3 * C46901 + C46794 * C46921 + C47116 * ae + C46949 * C46974) / C46745;
    const double C509 =
        (3 * C46901 + C46794 * C46921 + C47116 * ae + C46949 * C47011) / C46745;
    const double C662 =
        (C46793 * (4 * C46921 + C46794 * C46949 + C47122 * ae)) / C46745;
    const double C772 =
        (C47007 * (4 * C46921 + C46794 * C46949 + C47122 * ae)) / C46745;
    const double C940 = (C47007 * C46793 * C46949) / C46745;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47576 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C47583 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C2880) *
                     C47494 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47738 * C47535 * C47583 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47576 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47738 * C47535 * C2880) *
                     C47503 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C47576 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47738 * C47535 * C47583 +
                  (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                   (C113 * C300 + C47721 * C319) * C116 +
                   (C113 * C320 + C47721 * C330) * C104) *
                      C47738 * C47535 * C2880) *
                     C2883)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47576 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47784) *
                      C47583 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47784 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47622) *
                      C2880) *
                     C2620 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47784) *
                      C47576 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47784 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47622) *
                      C47583 +
                  ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                    (C113 * C1584 + C47721 * C1585) * C116 +
                    (C113 * C1586 + C47721 * C1587) * C104) *
                       C47738 * C47622 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47784) *
                      C2880) *
                     C47500)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47861 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C47857 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C47847 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C47825) *
                     C2620 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47738 * C47535 * C47857 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47861 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47738 * C47535 * C47847 +
                  (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                   (C113 * C1422 + C47721 * C1423) * C116 +
                   (C113 * C1424 + C47721 * C1425) * C104) *
                      C47738 * C47535 * C47825) *
                     C47500)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C2512 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C47580) *
                     C47860 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47738 * C47535 * C47580 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C2512) *
                     C47853 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C2512 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47738 * C47535 * C47580) *
                     C47840 +
                 ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                   (C113 * C660 + C47721 * C661) * C116 +
                   (C113 * C662 + C47721 * C663) * C104) *
                      C47738 * C47535 * C47580 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47738 * C47535 * C2512) *
                     C47819)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47855 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47844 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C2512 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47844 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47855 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C47818) *
                      C47580) *
                     C2620 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47844 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47855 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47818) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47855 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47844 +
                   (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                    (C113 * C2170 + C47721 * C2171) * C116 +
                    (C113 * C2172 + C47721 * C2173) * C104) *
                       C47738 * C47818) *
                      C47580) *
                     C47500)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C2512 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47784) *
                      C47580) *
                     C47494 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47784) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47784 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47622) *
                      C47580) *
                     C47503 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47784 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47721 * C939) * C116 +
                    (C113 * C940 + C47721 * C945) * C104) *
                       C47738 * C47622 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47784) *
                      C47580) *
                     C2883)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C2512 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C47580) *
                     C47860 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47738 * C47535 * C47580 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C2512) *
                     C47853 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C2512 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47738 * C47535 * C47580) *
                     C47840 +
                 ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                   (C113 * C660 + C47721 * C661) * C116 +
                   (C113 * C662 + C47721 * C663) * C104) *
                      C47738 * C47535 * C47580 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47738 * C47535 * C2512) *
                     C47819)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47861 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C47857 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C47847 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C47825) *
                     C2620 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47738 * C47535 * C47857 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47861 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47738 * C47535 * C47847 +
                  (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                   (C113 * C1422 + C47721 * C1423) * C116 +
                   (C113 * C1424 + C47721 * C1425) * C104) *
                      C47738 * C47535 * C47825) *
                     C47500)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47576 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C3274) *
                      C47583 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C3274 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47622) *
                      C2880) *
                     C47769 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C3274) *
                      C47576 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47622) *
                      C47583 +
                  ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                    (C113 * C1584 + C47721 * C1585) * C116 +
                    (C113 * C1586 + C47721 * C1587) * C104) *
                       C47738 * C47622 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C3274) *
                      C2880) *
                     C47500)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47618 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47721 * C512) * C102 +
                   (C113 * C482 + C47721 * C495) * C114) *
                      C47738 * C47625 +
                  ((C113 * C483 + C47721 * C496) * C114 +
                   (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47738 * C3782) *
                     C47576 +
                 (((C113 * C926 + C47721 * C931) * C114 +
                   (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47738 * C47625 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47618 -
                  (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                   (C113 * C1295 + C47721 * C1311) * C102 +
                   (C113 * C1284 + C47721 * C1296) * C114) *
                      C47738 * C3782) *
                     C47583 +
                 (((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47618 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47721 * C1314) * C102 +
                   (C113 * C1287 + C47721 * C1302) * C114) *
                      C47738 * C47625 +
                  ((C113 * C1288 + C47721 * C1303) * C114 +
                   (C113 * C1304 + C47721 * C1315) * C102 +
                   (C113 * C1289 + C47721 * C1305) * C115 +
                   (C113 * C1306 + C47721 * C1316) * C103 +
                   (C113 * C1290 + C47721 * C1307) * C116 +
                   (C113 * C1308 + C47721 * C1317) * C104) *
                      C47738 * C3782) *
                     C2880) *
                C47489) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C3274 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47721 * C512) * C102 +
                   (C113 * C482 + C47721 * C495) * C114) *
                      C47738 * C47622) *
                     C47861 +
                 (((C113 * C926 + C47721 * C931) * C114 +
                   (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47738 * C47622 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C3274) *
                     C47857 +
                 (((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C3274 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47721 * C1314) * C102 +
                   (C113 * C1287 + C47721 * C1302) * C114) *
                      C47738 * C47622) *
                     C47847 +
                 (((C113 * C1698 + C47721 * C1701) * C114 +
                   (C113 * C1702 + C47721 * C1707) * C102 +
                   (C113 * C1699 + C47721 * C1703) * C115 +
                   (C113 * C1704 + C47721 * C1708) * C103 +
                   (C113 * C1700 + C47721 * C1705) * C116 +
                   (C113 * C1706 + C47721 * C1709) * C104) *
                      C47738 * C47622 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C3274) *
                     C47825) *
                C47489) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C2512 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C3274) *
                      C47580) *
                     C47851 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C3274) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47622) *
                      C47580) *
                     C47838 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47721 * C939) * C116 +
                    (C113 * C940 + C47721 * C945) * C104) *
                       C47738 * C47622 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C3274) *
                      C47580) *
                     C47809)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47862 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47721 * C512) * C102 +
                   (C113 * C482 + C47721 * C495) * C114) *
                      C47738 * C47859 +
                  ((C113 * C483 + C47721 * C496) * C114 +
                   (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47738 * C47850 -
                  (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                   (C113 * C2010 + C47721 * C2020) * C102 +
                   (C113 * C2002 + C47721 * C2011) * C114) *
                      C47738 * C47831) *
                     C2512 +
                 (((C113 * C926 + C47721 * C931) * C114 +
                   (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47738 * C47859 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47862 -
                  (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                   (C113 * C1295 + C47721 * C1311) * C102 +
                   (C113 * C1284 + C47721 * C1296) * C114) *
                      C47738 * C47850 +
                  ((C113 * C2402 + C47721 * C2405) * C114 +
                   (C113 * C2406 + C47721 * C2411) * C102 +
                   (C113 * C2403 + C47721 * C2407) * C115 +
                   (C113 * C2408 + C47721 * C2412) * C103 +
                   (C113 * C2404 + C47721 * C2409) * C116 +
                   (C113 * C2410 + C47721 * C2413) * C104) *
                      C47738 * C47831) *
                     C47580) *
                C47489) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47618 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47625 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C3782) *
                      C2512 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47625 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47618 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C3782) *
                      C47580) *
                     C47769 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47625 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47618 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C3782) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47618 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47625 +
                   (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                    (C113 * C2170 + C47721 * C2171) * C116 +
                    (C113 * C2172 + C47721 * C2173) * C104) *
                       C47738 * C3782) *
                      C47580) *
                     C47500)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C2512 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C3274) *
                      C47580) *
                     C47851 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C3274) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47738 * C47622) *
                      C47580) *
                     C47838 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47721 * C939) * C116 +
                    (C113 * C940 + C47721 * C945) * C104) *
                       C47738 * C47622 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C3274) *
                      C47580) *
                     C47809)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C3274 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47721 * C512) * C102 +
                   (C113 * C482 + C47721 * C495) * C114) *
                      C47738 * C47622) *
                     C47861 +
                 (((C113 * C926 + C47721 * C931) * C114 +
                   (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47738 * C47622 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C3274) *
                     C47857 +
                 (((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C3274 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47721 * C1314) * C102 +
                   (C113 * C1287 + C47721 * C1302) * C114) *
                      C47738 * C47622) *
                     C47847 +
                 (((C113 * C1698 + C47721 * C1701) * C114 +
                   (C113 * C1702 + C47721 * C1707) * C102 +
                   (C113 * C1699 + C47721 * C1703) * C115 +
                   (C113 * C1704 + C47721 * C1708) * C103 +
                   (C113 * C1700 + C47721 * C1705) * C116 +
                   (C113 * C1706 + C47721 * C1709) * C104) *
                      C47738 * C47622 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C3274) *
                     C47825) *
                C47489) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1416 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1417 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C1418 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47721 * C1168) * C102 +
                    (C113 * C1150 + C47721 * C1159) * C114) *
                       C47738 * C47535 * C47825) *
                      C47769 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1417 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1416 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C1418 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C47721 * C1423) * C116 +
                    (C113 * C1424 + C47721 * C1425) * C104) *
                       C47738 * C47535 * C47825) *
                      C47500)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C47783 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C47580) *
                      C656 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C47580 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C47783) *
                      C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C47783 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C47580) *
                      C658 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C47721 * C661) * C116 +
                    (C113 * C662 + C47721 * C663) * C104) *
                       C47738 * C47535 * C47580 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C47535 * C47783) *
                      C47819)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C1821 +
                    ((C113 * C483 + C47721 * C496) * C114 +
                     (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C47738 * C47818) *
                       C47783 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C1821 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C1820 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C47721 * C1311) * C102 +
                     (C113 * C1284 + C47721 * C1296) * C114) *
                        C47738 * C47818) *
                       C47580) *
                      C47769 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C1821 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C1820 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C47738 * C47818) *
                       C47783 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C1820 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C1821 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C47721 * C2171) * C116 +
                     (C113 * C2172 + C47721 * C2173) * C104) *
                        C47738 * C47818) *
                       C47580) *
                      C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C1416 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47784) *
                      C1417 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47784 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47622) *
                      C1418 +
                  (((C113 * C1698 + C47721 * C1701) * C114 +
                    (C113 * C1702 + C47721 * C1707) * C102 +
                    (C113 * C1699 + C47721 * C1703) * C115 +
                    (C113 * C1704 + C47721 * C1708) * C103 +
                    (C113 * C1700 + C47721 * C1705) * C116 +
                    (C113 * C1706 + C47721 * C1709) * C104) *
                       C47738 * C47622 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47721 * C1168) * C102 +
                    (C113 * C1150 + C47721 * C1159) * C114) *
                       C47738 * C47784) *
                      C47825) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C47784 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C47783 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C47784) *
                       C47580) *
                      C288 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C47784) *
                       C47783 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C47784 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C47580) *
                      C289 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47738 * C47784 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47738 * C47622) *
                       C47783 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47721 * C939) * C116 +
                     (C113 * C940 + C47721 * C945) * C104) *
                        C47738 * C47622 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47738 * C47784) *
                       C47580) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C2284 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C2285 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C2286 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47721 * C2020) * C102 +
                    (C113 * C2002 + C47721 * C2011) * C114) *
                       C47738 * C47831) *
                      C47783 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C2285 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C2284 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C2286 +
                   ((C113 * C2402 + C47721 * C2405) * C114 +
                    (C113 * C2406 + C47721 * C2411) * C102 +
                    (C113 * C2403 + C47721 * C2407) * C115 +
                    (C113 * C2408 + C47721 * C2412) * C103 +
                    (C113 * C2404 + C47721 * C2409) * C116 +
                    (C113 * C2410 + C47721 * C2413) * C104) *
                       C47738 * C47831) *
                      C47580) *
                 C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] += (0.5 * std::pow(Pi, 2.5) *
                     (((C113 * C117 + C47721 * C124) * C114 +
                       (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                       C167 * C103 + C168 * C116 + C169 * C104) *
                          C47738 * C47535 * C47517 * C108 -
                      (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                       C167 * C102 + C166 * C114) *
                          C47738 * C47535 * C47517 * C109 +
                      (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                       C172 * C116 + C173 * C104) *
                          C47738 * C47535 * C47517 * C110 -
                      (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                       C170 * C102 + C171 * C114) *
                          C47738 * C47535 * C47517 * C111 +
                      (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                       (C113 * C123 + C47721 * C136) * C116 +
                       (C113 * C137 + C47721 * C144) * C104) *
                          C47738 * C47535 * C47517 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C47721 * C124) * C114 +
                        (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C47738 * C47535 * C47854 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C47721 * C323) * C102 +
                        (C113 * C293 + C47721 * C306) * C114) *
                           C47738 * C47535 * C47842 +
                       ((C113 * C294 + C47721 * C307) * C114 +
                        (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                        C361 * C103 + C362 * C116 + C363 * C104) *
                           C47738 * C47535 * C47815) *
                          C288 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C47738 * C47535 * C47842 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C47738 * C47535 * C47854 -
                       (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                        C361 * C102 + C360 * C114) *
                           C47738 * C47535 * C47815) *
                          C289 +
                      ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C47738 * C47535 * C47854 -
                       ((C113 * C317 + C47721 * C329) * C104 +
                        (C113 * C299 + C47721 * C318) * C116 + C365 * C103 +
                        C364 * C115 + C356 * C102 + C357 * C114) *
                           C47738 * C47535 * C47842 +
                       (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                        (C113 * C300 + C47721 * C319) * C116 +
                        (C113 * C320 + C47721 * C330) * C104) *
                           C47738 * C47535 * C47815) *
                          C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47855 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47844 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47517 * C288 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47844 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47855 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47818) *
                      C47517 * C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47855 -
                   ((C113 * C506 + C47721 * C518) * C104 +
                    (C113 * C488 + C47721 * C507) * C116 + C554 * C103 +
                    C553 * C115 + C545 * C102 + C546 * C114) *
                       C47738 * C47844 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47721 * C508) * C116 +
                    (C113 * C509 + C47721 * C519) * C104) *
                       C47738 * C47818) *
                      C47517 * C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1075 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C47851 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C1143 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C1144 -
                  ((C113 * C1154 + C47721 * C1166) * C104 +
                   (C113 * C1148 + C47721 * C1155) * C116 +
                   (C113 * C1156 + C47721 * C1167) * C103 +
                   (C113 * C1149 + C47721 * C1157) * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C1145 +
                  ((C113 * C1151 + C47721 * C1160) * C114 +
                   (C113 * C1161 + C47721 * C1169) * C102 +
                   (C113 * C1152 + C47721 * C1162) * C115 +
                   (C113 * C1163 + C47721 * C1170) * C103 +
                   (C113 * C1153 + C47721 * C1164) * C116 +
                   (C113 * C1165 + C47721 * C1171) * C104) *
                      C47738 * C47535 * C1146) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47855 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47844 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C1074 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47844 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47855 -
                   ((C113 * C1291 + C47721 * C1309) * C104 +
                    (C113 * C1282 + C47721 * C1292) * C116 +
                    (C113 * C1293 + C47721 * C1310) * C103 +
                    (C113 * C1283 + C47721 * C1294) * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C47818) *
                      C1075 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47855 -
                   ((C113 * C1297 + C47721 * C1312) * C104 +
                    (C113 * C1285 + C47721 * C1298) * C116 +
                    (C113 * C1299 + C47721 * C1313) * C103 +
                    (C113 * C1286 + C47721 * C1300) * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47844 +
                   ((C113 * C1288 + C47721 * C1303) * C114 +
                    (C113 * C1304 + C47721 * C1315) * C102 +
                    (C113 * C1289 + C47721 * C1305) * C115 +
                    (C113 * C1306 + C47721 * C1316) * C103 +
                    (C113 * C1290 + C47721 * C1307) * C116 +
                    (C113 * C1308 + C47721 * C1317) * C104) *
                       C47738 * C47818) *
                      C47815) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C1821 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47517 * C47851 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C1821 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C1820 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47818) *
                      C47517 * C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C1820 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C1821 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47721 * C508) * C116 +
                    (C113 * C509 + C47721 * C519) * C104) *
                       C47738 * C47818) *
                      C47517 * C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C1821 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47854 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C1821 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C1820 -
                   ((C113 * C1291 + C47721 * C1309) * C104 +
                    (C113 * C1282 + C47721 * C1292) * C116 +
                    (C113 * C1293 + C47721 * C1310) * C103 +
                    (C113 * C1283 + C47721 * C1294) * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C47818) *
                      C47842 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C1820 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C1821 +
                   ((C113 * C1288 + C47721 * C1303) * C114 +
                    (C113 * C1304 + C47721 * C1315) * C102 +
                    (C113 * C1289 + C47721 * C1305) * C115 +
                    (C113 * C1306 + C47721 * C1316) * C103 +
                    (C113 * C1290 + C47721 * C1307) * C116 +
                    (C113 * C1308 + C47721 * C1317) * C104) *
                       C47738 * C47818) *
                      C47815) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C1995 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47721 * C512) * C102 +
                   (C113 * C482 + C47721 * C495) * C114) *
                      C47738 * C1996 +
                  ((C113 * C483 + C47721 * C496) * C114 +
                   (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47738 * C1997 -
                  ((C113 * C2006 + C47721 * C2018) * C104 +
                   (C113 * C2000 + C47721 * C2007) * C116 +
                   (C113 * C2008 + C47721 * C2019) * C103 +
                   (C113 * C2001 + C47721 * C2009) * C115 +
                   (C113 * C2010 + C47721 * C2020) * C102 +
                   (C113 * C2002 + C47721 * C2011) * C114) *
                      C47738 * C1998 +
                  ((C113 * C2003 + C47721 * C2012) * C114 +
                   (C113 * C2013 + C47721 * C2021) * C102 +
                   (C113 * C2004 + C47721 * C2014) * C115 +
                   (C113 * C2015 + C47721 * C2022) * C103 +
                   (C113 * C2005 + C47721 * C2016) * C116 +
                   (C113 * C2017 + C47721 * C2023) * C104) *
                      C47738 * C1999) *
                 C47517 * C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C47784 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C1074 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C47784) *
                       C1075 +
                   (((C113 * C294 + C47721 * C307) * C114 +
                     (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47738 * C47784 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47721 * C1314) * C102 +
                     (C113 * C1287 + C47721 * C1302) * C114) *
                        C47738 * C47622) *
                       C47815) *
                      C47769 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C47784) *
                       C1074 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C47784 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C1075 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47721 * C1585) * C116 +
                     (C113 * C1586 + C47721 * C1587) * C104) *
                        C47738 * C47622 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47738 * C47784) *
                       C47815) *
                      C47500)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47517 * C656 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47784) *
                      C47517 * C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47784 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C47517 * C658 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47721 * C771) * C116 +
                    (C113 * C772 + C47721 * C773) * C104) *
                       C47738 * C47622 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C47784) *
                      C47517 * C47819)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C2284 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C2285 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C2286 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47721 * C2020) * C102 +
                    (C113 * C2002 + C47721 * C2011) * C114) *
                       C47738 * C47831) *
                      C47517 * C47769 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C2285 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C2284 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C2286 +
                   (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                    (C113 * C2288 + C47721 * C2289) * C116 +
                    (C113 * C2290 + C47721 * C2291) * C104) *
                       C47738 * C47831) *
                      C47517 * C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C47854 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C47842 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C47842 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C47854 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C47854 -
                   ((C113 * C317 + C47721 * C329) * C104 +
                    (C113 * C299 + C47721 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C47842 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47517 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47517 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C47517 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47738 * C47535 * C47517 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47721 * C136) * C116 +
                   (C113 * C137 + C47721 * C144) * C104) *
                      C47738 * C47535 * C47517 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1075 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C47851 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C1143 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C1144 -
                  ((C113 * C1154 + C47721 * C1166) * C104 +
                   (C113 * C1148 + C47721 * C1155) * C116 +
                   (C113 * C1156 + C47721 * C1167) * C103 +
                   (C113 * C1149 + C47721 * C1157) * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C1145 +
                  ((C113 * C1151 + C47721 * C1160) * C114 +
                   (C113 * C1161 + C47721 * C1169) * C102 +
                   (C113 * C1152 + C47721 * C1162) * C115 +
                   (C113 * C1163 + C47721 * C1170) * C103 +
                   (C113 * C1153 + C47721 * C1164) * C116 +
                   (C113 * C1165 + C47721 * C1171) * C104) *
                      C47738 * C47535 * C1146) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C1821 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47517 * C47851 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C1821 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C1820 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47818) *
                      C47517 * C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C1820 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C1821 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47721 * C508) * C116 +
                    (C113 * C509 + C47721 * C519) * C104) *
                       C47738 * C47818) *
                      C47517 * C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C1821 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47854 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C1821 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C1820 -
                   ((C113 * C1291 + C47721 * C1309) * C104 +
                    (C113 * C1282 + C47721 * C1292) * C116 +
                    (C113 * C1293 + C47721 * C1310) * C103 +
                    (C113 * C1283 + C47721 * C1294) * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C47818) *
                      C47842 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C1820 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C1821 +
                   ((C113 * C1288 + C47721 * C1303) * C114 +
                    (C113 * C1304 + C47721 * C1315) * C102 +
                    (C113 * C1289 + C47721 * C1305) * C115 +
                    (C113 * C1306 + C47721 * C1316) * C103 +
                    (C113 * C1290 + C47721 * C1307) * C116 +
                    (C113 * C1308 + C47721 * C1317) * C104) *
                       C47738 * C47818) *
                      C47815) *
                 C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C47783 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C3274) *
                       C47580) *
                      C47494 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C3274) *
                       C47783 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C47580) *
                      C47503 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47738 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47738 * C47622) *
                       C47783 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47721 * C939) * C116 +
                     (C113 * C940 + C47721 * C945) * C104) *
                        C47738 * C47622 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47738 * C3274) *
                       C47580) *
                      C2883)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C47618 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47625 +
                    ((C113 * C483 + C47721 * C496) * C114 +
                     (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C47738 * C3782) *
                       C47783 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47625 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C47618 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C47721 * C1311) * C102 +
                     (C113 * C1284 + C47721 * C1296) * C114) *
                        C47738 * C3782) *
                       C47580) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47625 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C47618 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C47738 * C3782) *
                       C47783 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C47618 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47625 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C47721 * C2171) * C116 +
                     (C113 * C2172 + C47721 * C2173) * C104) *
                        C47738 * C3782) *
                       C47580) *
                      C47500)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C47854 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C3274) *
                       C47842 +
                   (((C113 * C294 + C47721 * C307) * C114 +
                     (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47738 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47721 * C1314) * C102 +
                     (C113 * C1287 + C47721 * C1302) * C114) *
                        C47738 * C47622) *
                       C47815) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C3274) *
                       C47854 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C47842 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47721 * C1585) * C116 +
                     (C113 * C1586 + C47721 * C1587) * C104) *
                        C47738 * C47622 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47738 * C3274) *
                       C47815) *
                      C47500)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47517 * C47860 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C3274) *
                      C47517 * C47853 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C47517 * C47840 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47721 * C771) * C116 +
                    (C113 * C772 + C47721 * C773) * C104) *
                       C47738 * C47622 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C3274) *
                      C47517 * C47819)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47862 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47859 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47850 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47721 * C2020) * C102 +
                    (C113 * C2002 + C47721 * C2011) * C114) *
                       C47738 * C47831) *
                      C47517 * C2620 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47859 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47862 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47850 +
                   (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                    (C113 * C2288 + C47721 * C2289) * C116 +
                    (C113 * C2290 + C47721 * C2291) * C104) *
                       C47738 * C47831) *
                      C47517 * C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47618 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47625 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C3782) *
                      C47517 * C47494 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47625 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47618 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C3782) *
                      C47517 * C47503 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47618 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47625 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47721 * C508) * C116 +
                    (C113 * C509 + C47721 * C519) * C104) *
                       C47738 * C3782) *
                      C47517 * C2883)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47517 * C47860 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C3274) *
                      C47517 * C47853 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C47517 * C47840 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47721 * C771) * C116 +
                    (C113 * C772 + C47721 * C773) * C104) *
                       C47738 * C47622 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C3274) *
                      C47517 * C47819)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C47854 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C3274) *
                       C47842 +
                   (((C113 * C294 + C47721 * C307) * C114 +
                     (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47738 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47721 * C1314) * C102 +
                     (C113 * C1287 + C47721 * C1302) * C114) *
                        C47738 * C47622) *
                       C47815) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C3274) *
                       C47854 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C47842 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47721 * C1585) * C116 +
                     (C113 * C1586 + C47721 * C1587) * C104) *
                        C47738 * C47622 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47738 * C3274) *
                       C47815) *
                      C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C47783 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C47580) *
                      C656 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C47580 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C47783) *
                      C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C47783 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C47580) *
                      C658 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C47721 * C661) * C116 +
                    (C113 * C662 + C47721 * C663) * C104) *
                       C47738 * C47535 * C47580 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C47535 * C47783) *
                      C47819)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1416 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1417 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C1418 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47721 * C1168) * C102 +
                    (C113 * C1150 + C47721 * C1159) * C114) *
                       C47738 * C47535 * C47825) *
                      C47769 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1417 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1416 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C1418 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C47721 * C1423) * C116 +
                    (C113 * C1424 + C47721 * C1425) * C104) *
                       C47738 * C47535 * C47825) *
                      C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C47784 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C47783 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C47784) *
                       C47580) *
                      C288 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C47784) *
                       C47783 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C47784 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C47580) *
                      C289 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47738 * C47784 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47738 * C47622) *
                       C47783 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47721 * C939) * C116 +
                     (C113 * C940 + C47721 * C945) * C104) *
                        C47738 * C47622 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47738 * C47784) *
                       C47580) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C1416 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47622 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47784) *
                      C1417 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47784 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47622) *
                      C1418 +
                  (((C113 * C1698 + C47721 * C1701) * C114 +
                    (C113 * C1702 + C47721 * C1707) * C102 +
                    (C113 * C1699 + C47721 * C1703) * C115 +
                    (C113 * C1704 + C47721 * C1708) * C103 +
                    (C113 * C1700 + C47721 * C1705) * C116 +
                    (C113 * C1706 + C47721 * C1709) * C104) *
                       C47738 * C47622 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47721 * C1168) * C102 +
                    (C113 * C1150 + C47721 * C1159) * C114) *
                       C47738 * C47784) *
                      C47825) *
                 C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C47854 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C47842 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C47842 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C47854 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C47854 -
                   ((C113 * C317 + C47721 * C329) * C104 +
                    (C113 * C299 + C47721 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C47842 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47517 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47517 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C47517 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47738 * C47535 * C47517 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47721 * C136) * C116 +
                   (C113 * C137 + C47721 * C144) * C104) *
                      C47738 * C47535 * C47517 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47855 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47844 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C47517 * C288 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47844 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47855 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47738 * C47818) *
                      C47517 * C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47855 -
                   ((C113 * C506 + C47721 * C518) * C104 +
                    (C113 * C488 + C47721 * C507) * C116 + C554 * C103 +
                    C553 * C115 + C545 * C102 + C546 * C114) *
                       C47738 * C47844 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47721 * C508) * C116 +
                    (C113 * C509 + C47721 * C519) * C104) *
                       C47738 * C47818) *
                      C47517 * C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1075 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C47851 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C1143 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C1144 -
                  ((C113 * C1154 + C47721 * C1166) * C104 +
                   (C113 * C1148 + C47721 * C1155) * C116 +
                   (C113 * C1156 + C47721 * C1167) * C103 +
                   (C113 * C1149 + C47721 * C1157) * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C1145 +
                  ((C113 * C1151 + C47721 * C1160) * C114 +
                   (C113 * C1161 + C47721 * C1169) * C102 +
                   (C113 * C1152 + C47721 * C1162) * C115 +
                   (C113 * C1163 + C47721 * C1170) * C103 +
                   (C113 * C1153 + C47721 * C1164) * C116 +
                   (C113 * C1165 + C47721 * C1171) * C104) *
                      C47738 * C47535 * C1146) *
                 C47489) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47855 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47844 +
                   ((C113 * C483 + C47721 * C496) * C114 +
                    (C113 * C497 + C47721 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47738 * C47818) *
                      C1074 +
                  (((C113 * C926 + C47721 * C931) * C114 +
                    (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47738 * C47844 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47855 -
                   ((C113 * C1291 + C47721 * C1309) * C104 +
                    (C113 * C1282 + C47721 * C1292) * C116 +
                    (C113 * C1293 + C47721 * C1310) * C103 +
                    (C113 * C1283 + C47721 * C1294) * C115 +
                    (C113 * C1295 + C47721 * C1311) * C102 +
                    (C113 * C1284 + C47721 * C1296) * C114) *
                       C47738 * C47818) *
                      C1075 +
                  (((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47855 -
                   ((C113 * C1297 + C47721 * C1312) * C104 +
                    (C113 * C1285 + C47721 * C1298) * C116 +
                    (C113 * C1299 + C47721 * C1313) * C103 +
                    (C113 * C1286 + C47721 * C1300) * C115 +
                    (C113 * C1301 + C47721 * C1314) * C102 +
                    (C113 * C1287 + C47721 * C1302) * C114) *
                       C47738 * C47844 +
                   ((C113 * C1288 + C47721 * C1303) * C114 +
                    (C113 * C1304 + C47721 * C1315) * C102 +
                    (C113 * C1289 + C47721 * C1305) * C115 +
                    (C113 * C1306 + C47721 * C1316) * C103 +
                    (C113 * C1290 + C47721 * C1307) * C116 +
                    (C113 * C1308 + C47721 * C1317) * C104) *
                       C47738 * C47818) *
                      C47815) *
                 C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47784 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47721 * C512) * C102 +
                    (C113 * C482 + C47721 * C495) * C114) *
                       C47738 * C47622) *
                      C47517 * C656 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47738 * C47622 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47784) *
                      C47517 * C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47784 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47738 * C47622) *
                      C47517 * C658 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47721 * C771) * C116 +
                    (C113 * C772 + C47721 * C773) * C104) *
                       C47738 * C47622 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47738 * C47784) *
                      C47517 * C47819)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C114 +
                     (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47738 * C47784 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47721 * C512) * C102 +
                     (C113 * C482 + C47721 * C495) * C114) *
                        C47738 * C47622) *
                       C1074 +
                   (((C113 * C926 + C47721 * C931) * C114 +
                     (C113 * C932 + C47721 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47738 * C47622 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47721 * C323) * C102 +
                     (C113 * C293 + C47721 * C306) * C114) *
                        C47738 * C47784) *
                       C1075 +
                   (((C113 * C294 + C47721 * C307) * C114 +
                     (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47738 * C47784 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47721 * C1314) * C102 +
                     (C113 * C1287 + C47721 * C1302) * C114) *
                        C47738 * C47622) *
                       C47815) *
                      C47769 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47738 * C47622 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47738 * C47784) *
                       C1074 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47738 * C47784 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47738 * C47622) *
                       C1075 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47721 * C1585) * C116 +
                     (C113 * C1586 + C47721 * C1587) * C104) *
                        C47738 * C47622 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47738 * C47784) *
                       C47815) *
                      C47500)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C47517 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47738 * C47535 * C47517 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47738 * C47535 * C47517 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47738 * C47535 * C47517 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47721 * C136) * C116 +
                   (C113 * C137 + C47721 * C144) * C104) *
                      C47738 * C47535 * C47517 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C47854 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C47842 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C47842 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C47854 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C47854 -
                   ((C113 * C317 + C47721 * C329) * C104 +
                    (C113 * C299 + C47721 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C47842 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47721 * C124) * C114 +
                    (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47738 * C47535 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47721 * C323) * C102 +
                    (C113 * C293 + C47721 * C306) * C114) *
                       C47738 * C47535 * C1075 +
                   ((C113 * C294 + C47721 * C307) * C114 +
                    (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47738 * C47535 * C47815) *
                      C47851 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47738 * C47535 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47738 * C47535 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47738 * C47535 * C47815) *
                      C47838 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47738 * C47535 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47738 * C47535 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47721 * C319) * C116 +
                    (C113 * C320 + C47721 * C330) * C104) *
                       C47738 * C47535 * C47815) *
                      C47809)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47721 * C124) * C114 +
                   (C113 * C125 + C47721 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47738 * C47535 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47721 * C323) * C102 +
                   (C113 * C293 + C47721 * C306) * C114) *
                      C47738 * C47535 * C1143 +
                  ((C113 * C294 + C47721 * C307) * C114 +
                   (C113 * C308 + C47721 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47738 * C47535 * C1144 -
                  ((C113 * C1154 + C47721 * C1166) * C104 +
                   (C113 * C1148 + C47721 * C1155) * C116 +
                   (C113 * C1156 + C47721 * C1167) * C103 +
                   (C113 * C1149 + C47721 * C1157) * C115 +
                   (C113 * C1158 + C47721 * C1168) * C102 +
                   (C113 * C1150 + C47721 * C1159) * C114) *
                      C47738 * C47535 * C1145 +
                  ((C113 * C1151 + C47721 * C1160) * C114 +
                   (C113 * C1161 + C47721 * C1169) * C102 +
                   (C113 * C1152 + C47721 * C1162) * C115 +
                   (C113 * C1163 + C47721 * C1170) * C103 +
                   (C113 * C1153 + C47721 * C1164) * C116 +
                   (C113 * C1165 + C47721 * C1171) * C104) *
                      C47738 * C47535 * C1146) *
                 C47489) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47576 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47583 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C2880) *
              C47494 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47583 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47576 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C2880) *
              C47503 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47576 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47583 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47576 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C47583 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C47784 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C2880) *
              C2620 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C47576 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47583 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47861 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47857 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47847 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47535 * C47825) *
              C2620 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47857 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47861 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47847 +
           ((C6233 + C6232) * C4761 + (C6231 + C6230) * C4757 +
            (C4759 * C1148 + C4755 * C1155 + C4760 * C1153 + C47833 * C1164) *
                C4762 +
            (C4759 * C1154 + C4755 * C1166 + C4760 * C1165 + C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C2512 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47580) *
              C47860 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47580 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C2512) *
              C47853 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C2512 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47580) *
              C47840 +
          (((C5341 + C5340) * C4761 + (C5339 + C5338) * C4757 +
            (C4759 * C299 + C4755 * C318 + C4760 * C300 + C47833 * C319) *
                C4762 +
            (C4759 * C317 + C4755 * C329 + C4760 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47855 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47844 +
            ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                 C4761 +
             (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                 C4757 +
             (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
                C47738 * C47818) *
               C2512 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47844 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47855 -
            ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
             (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                 C4757 +
             (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                 C4761) *
                C47738 * C47818) *
               C47580) *
              C2620 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47844 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47855 -
            ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
             (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
                C47738 * C47818) *
               C2512 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47855 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47844 +
            ((C7165 + C7164) * C4761 + (C7163 + C7162) * C4757 +
             (C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                 C4762 +
             (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                 C47802) *
                C47738 * C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C2512 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C47580) *
              C47494 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C2512 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C47503 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C47784 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C2512 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C2512 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47580) *
              C47860 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47580 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C2512) *
              C47853 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C2512 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47580) *
              C47840 +
          (((C5341 + C5340) * C4761 + (C5339 + C5338) * C4757 +
            (C4759 * C299 + C4755 * C318 + C4760 * C300 + C47833 * C319) *
                C4762 +
            (C4759 * C317 + C4755 * C329 + C4760 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47861 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47857 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47847 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47535 * C47825) *
              C2620 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47857 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47861 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47847 +
           ((C6233 + C6232) * C4761 + (C6231 + C6230) * C4757 +
            (C4759 * C1148 + C4755 * C1155 + C4760 * C1153 + C47833 * C1164) *
                C4762 +
            (C4759 * C1154 + C4755 * C1166 + C4760 * C1165 + C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47576 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47583 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C3274 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C2880) *
              C47769 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C47576 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47583 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47618 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47625 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C3782) *
              C47576 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47625 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47618 -
           ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C3782) *
              C47583 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47618 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47625 +
           ((C4759 * C1288 + C4755 * C1303 + C4760 * C6083 + C47833 * C6085) *
                C4761 +
            (C4759 * C1304 + C4755 * C1315 + C4760 * C6086 + C47833 * C6089) *
                C4757 +
            (C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                C4762 +
            (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                C47802) *
               C47738 * C3782) *
              C2880) *
         C47489) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C3274 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47861 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47622 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C3274) *
              C47857 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C3274 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47622) *
              C47847 +
          (((C4759 * C1698 + C4755 * C1701 + C4760 * C6569 + C47833 * C6571) *
                C4761 +
            (C4759 * C1702 + C4755 * C1707 + C4760 * C6572 + C47833 * C6575) *
                C4757 +
            (C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                C4762 +
            (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C2512 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47580) *
              C47851 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C2512 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C47838 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C3274 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C2512 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47862 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47859 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47850 -
           ((C7304 + C7305) * C47802 + (C7306 + C7307) * C4762 +
            (C4760 * C2406 + C47833 * C2411 + C4759 * C2010 + C4755 * C2020) *
                C4757 +
            (C4760 * C2402 + C47833 * C2405 + C4759 * C2002 + C4755 * C2011) *
                C4761) *
               C47738 * C47831) *
              C2512 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47859 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47862 -
           ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C47850 +
           ((C4759 * C2402 + C4755 * C2405 + C4760 * C7437 + C47833 * C7439) *
                C4761 +
            (C4759 * C2406 + C4755 * C2411 + C4760 * C7440 + C47833 * C7443) *
                C4757 +
            (C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                C4762 +
            (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                C47802) *
               C47738 * C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47618 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47625 +
            ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                 C4761 +
             (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                 C4757 +
             (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
                C47738 * C3782) *
               C2512 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47625 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47618 -
            ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
             (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                 C4757 +
             (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                 C4761) *
                C47738 * C3782) *
               C47580) *
              C47769 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47625 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47618 -
            ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
             (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
                C47738 * C3782) *
               C2512 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47618 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47625 +
            ((C7165 + C7164) * C4761 + (C7163 + C7162) * C4757 +
             (C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                 C4762 +
             (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                 C47802) *
                C47738 * C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C2512 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47580) *
              C47851 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C2512 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C47838 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C3274 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C2512 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C3274 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47861 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47622 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C3274) *
              C47857 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C3274 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47622) *
              C47847 +
          (((C4759 * C1698 + C4755 * C1701 + C4760 * C6569 + C47833 * C6571) *
                C4761 +
            (C4759 * C1702 + C4755 * C1707 + C4760 * C6572 + C47833 * C6575) *
                C4757 +
            (C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                C4762 +
            (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1416 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1417 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C1418 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47535 * C47825) *
              C47769 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1417 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1416 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C1418 +
           ((C6233 + C6232) * C4761 + (C6231 + C6230) * C4757 +
            (C4759 * C1148 + C4755 * C1155 + C4760 * C1153 + C47833 * C1164) *
                C4762 +
            (C4759 * C1154 + C4755 * C1166 + C4760 * C1165 + C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47783 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47580) *
              C656 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47580 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47783) *
              C657 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47783 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47580) *
              C658 +
          (((C5341 + C5340) * C4761 + (C5339 + C5338) * C4757 +
            (C4759 * C299 + C4755 * C318 + C4760 * C300 + C47833 * C319) *
                C4762 +
            (C4759 * C317 + C4755 * C329 + C4760 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C1820 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C1821 +
            ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                 C4761 +
             (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                 C4757 +
             (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
                C47738 * C47818) *
               C47783 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C1821 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C1820 -
            ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
             (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                 C4757 +
             (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                 C4761) *
                C47738 * C47818) *
               C47580) *
              C47769 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C1821 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C1820 -
            ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
             (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
                C47738 * C47818) *
               C47783 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C1820 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C1821 +
            ((C7165 + C7164) * C4761 + (C7163 + C7162) * C4757 +
             (C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                 C4762 +
             (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                 C47802) *
                C47738 * C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47784 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C1416 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47622 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47784) *
              C1417 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47784 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47622) *
              C1418 +
          (((C4759 * C1698 + C4755 * C1701 + C4760 * C6569 + C47833 * C6571) *
                C4761 +
            (C4759 * C1702 + C4755 * C1707 + C4760 * C6572 + C47833 * C6575) *
                C4757 +
            (C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                C4762 +
            (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47783 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C47580) *
              C288 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C47783 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C289 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C47784 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C47783 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C2284 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C2285 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C2286 -
           ((C7304 + C7305) * C47802 + (C7306 + C7307) * C4762 +
            (C4760 * C2406 + C47833 * C2411 + C4759 * C2010 + C4755 * C2020) *
                C4757 +
            (C4760 * C2402 + C47833 * C2405 + C4759 * C2002 + C4755 * C2011) *
                C4761) *
               C47738 * C47831) *
              C47783 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C2285 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C2284 -
           ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C2286 +
           ((C4759 * C2402 + C4755 * C2405 + C4760 * C7437 + C47833 * C7439) *
                C4761 +
            (C4759 * C2406 + C4755 * C2411 + C4760 * C7440 + C47833 * C7443) *
                C4757 +
            (C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                C4762 +
            (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                C47802) *
               C47738 * C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                   C4761 +
               (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                   C4757 +
               (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                  C47738 * C47535 * C47517 * C108 -
              ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
               (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                  C47738 * C47535 * C47517 * C109 +
              ((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
               (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                  C47738 * C47535 * C47517 * C110 -
              ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
               (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
                  C47738 * C47535 * C47517 * C111 +
              ((C4811 + C4810) * C4761 + (C4809 + C4808) * C4757 +
               (C4759 * C122 + C4755 * C135 + C4760 * C660 + C47833 * C661) *
                   C4762 +
               (C4759 * C134 + C4755 * C143 + C4760 * C662 + C47833 * C663) *
                   C47802) *
                  C47738 * C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                    C4761 +
                (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                    C4757 +
                (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                   C47738 * C47535 * C47854 -
               ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
                (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                    C4757 +
                (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                    C4761) *
                   C47738 * C47535 * C47842 +
               ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                    C4761 +
                (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                    C4757 +
                (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                   C47738 * C47535 * C47815) *
                  C288 +
              (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
                (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                   C47738 * C47535 * C47842 -
               ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
                (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                   C47738 * C47535 * C47854 -
               ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
                (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                   C47738 * C47535 * C47815) *
                  C289 +
              (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
                (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                   C47738 * C47535 * C47854 -
               ((C4760 * C315 + C47833 * C328 + C4759 * C314 + C4755 * C327) *
                    C47802 +
                (C4760 * C298 + C47833 * C316 + C4759 * C297 + C4755 * C313) *
                    C4762 +
                (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                   C47738 * C47535 * C47842 +
               ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
                (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                    C4762 +
                (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                    C47802) *
                   C47738 * C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47855 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47517 * C288 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47844 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47855 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C47818) *
              C47517 * C289 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47855 -
           ((C4760 * C937 + C47833 * C944 + C4759 * C503 + C4755 * C516) *
                C47802 +
            (C4760 * C929 + C47833 * C938 + C4759 * C486 + C4755 * C502) *
                C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47844 +
           ((C5199 + C5198) * C4761 + (C5197 + C5196) * C4757 +
            (C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                C4762 +
            (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1074 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1075 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1075 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1074 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C1074 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C1075 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C1142 -
          ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
           (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
               C4757 +
           (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
               C4761) *
              C47738 * C47535 * C1143 +
          ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
               C4761 +
           (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
               C4757 +
           (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
              C47738 * C47535 * C1144 -
          ((C4760 * C1163 + C47833 * C1170 + C4759 * C1156 + C4755 * C1167) *
               C47802 +
           (C4760 * C1152 + C47833 * C1162 + C4759 * C1149 + C4755 * C1157) *
               C4762 +
           (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
               C4757 +
           (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
               C4761) *
              C47738 * C47535 * C1145 +
          ((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
               C4761 +
           (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
               C4757 +
           (C4759 * C1152 + C4755 * C1162 + C4760 * C5930 + C47833 * C5933) *
               C4762 +
           (C4759 * C1163 + C4755 * C1170 + C4760 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47855 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C1074 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47844 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47855 -
           ((C4760 * C1306 + C47833 * C1316 + C4759 * C1293 + C4755 * C1310) *
                C47802 +
            (C4760 * C1289 + C47833 * C1305 + C4759 * C1283 + C4755 * C1294) *
                C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C47818) *
              C1075 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47855 -
           ((C4760 * C1704 + C47833 * C1708 + C4759 * C1299 + C4755 * C1313) *
                C47802 +
            (C4760 * C1699 + C47833 * C1703 + C4759 * C1286 + C4755 * C1300) *
                C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C1288 + C4755 * C1303 + C4760 * C6083 + C47833 * C6085) *
                C4761 +
            (C4759 * C1304 + C4755 * C1315 + C4760 * C6086 + C47833 * C6089) *
                C4757 +
            (C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                C4762 +
            (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C1820 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47517 * C47851 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C1821 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C1820 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C47818) *
              C47517 * C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C1820 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C1821 +
           ((C5199 + C5198) * C4761 + (C5197 + C5196) * C4757 +
            (C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                C4762 +
            (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C1820 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47854 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C1821 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C1820 -
           ((C4760 * C1306 + C47833 * C1316 + C4759 * C1293 + C4755 * C1310) *
                C47802 +
            (C4760 * C1289 + C47833 * C1305 + C4759 * C1283 + C4755 * C1294) *
                C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C47818) *
              C47842 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C1820 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C1288 + C4755 * C1303 + C4760 * C6083 + C47833 * C6085) *
                C4761 +
            (C4759 * C1304 + C4755 * C1315 + C4760 * C6086 + C47833 * C6089) *
                C4757 +
            (C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                C4762 +
            (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C1995 -
          ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
           (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
               C4757 +
           (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
               C4761) *
              C47738 * C1996 +
          ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
               C4761 +
           (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
               C4757 +
           (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
              C47738 * C1997 -
          ((C4760 * C2408 + C47833 * C2412 + C4759 * C2008 + C4755 * C2019) *
               C47802 +
           (C4760 * C2403 + C47833 * C2407 + C4759 * C2001 + C4755 * C2009) *
               C4762 +
           (C4760 * C2406 + C47833 * C2411 + C4759 * C2010 + C4755 * C2020) *
               C4757 +
           (C4760 * C2402 + C47833 * C2405 + C4759 * C2002 + C4755 * C2011) *
               C4761) *
              C47738 * C1998 +
          ((C4759 * C2003 + C4755 * C2012 + C4760 * C6951 + C47833 * C6953) *
               C4761 +
           (C4759 * C2013 + C4755 * C2021 + C4760 * C6954 + C47833 * C6957) *
               C4757 +
           (C4759 * C2004 + C4755 * C2014 + C4760 * C6952 + C47833 * C6955) *
               C4762 +
           (C4759 * C2015 + C4755 * C2022 + C4760 * C6956 + C47833 * C6958) *
               C47802) *
              C47738 * C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C1074 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C47784 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C47815) *
              C47769 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C1074 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C1075 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47784 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47517 * C656 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47622 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47784) *
              C47517 * C657 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47784 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47622) *
              C47517 * C658 +
          (((C5483 + C5482) * C4761 + (C5481 + C5480) * C4757 +
            (C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C4762 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C2284 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C2285 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C2286 -
           ((C7304 + C7305) * C47802 + (C7306 + C7307) * C4762 +
            (C4760 * C2406 + C47833 * C2411 + C4759 * C2010 + C4755 * C2020) *
                C4757 +
            (C4760 * C2402 + C47833 * C2405 + C4759 * C2002 + C4755 * C2011) *
                C4761) *
               C47738 * C47831) *
              C47517 * C47769 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C2285 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C2284 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C2286 +
           ((C7307 + C7306) * C4761 + (C7305 + C7304) * C4757 +
            (C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                C4762 +
            (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                C47802) *
               C47738 * C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47842 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47842 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47854 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4760 * C315 + C47833 * C328 + C4759 * C314 + C4755 * C327) *
                C47802 +
            (C4760 * C298 + C47833 * C316 + C4759 * C297 + C4755 * C313) *
                C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47842 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
           (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
              C47738 * C47535 * C47517 * C109 +
          ((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
           (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
           (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
              C47738 * C47535 * C47517 * C111 +
          ((C4811 + C4810) * C4761 + (C4809 + C4808) * C4757 +
           (C4759 * C122 + C4755 * C135 + C4760 * C660 + C47833 * C661) *
               C4762 +
           (C4759 * C134 + C4755 * C143 + C4760 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1074 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1075 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1075 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1074 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C1074 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C1075 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C1142 -
          ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
           (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
               C4757 +
           (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
               C4761) *
              C47738 * C47535 * C1143 +
          ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
               C4761 +
           (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
               C4757 +
           (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
              C47738 * C47535 * C1144 -
          ((C4760 * C1163 + C47833 * C1170 + C4759 * C1156 + C4755 * C1167) *
               C47802 +
           (C4760 * C1152 + C47833 * C1162 + C4759 * C1149 + C4755 * C1157) *
               C4762 +
           (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
               C4757 +
           (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
               C4761) *
              C47738 * C47535 * C1145 +
          ((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
               C4761 +
           (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
               C4757 +
           (C4759 * C1152 + C4755 * C1162 + C4760 * C5930 + C47833 * C5933) *
               C4762 +
           (C4759 * C1163 + C4755 * C1170 + C4760 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C1820 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47517 * C47851 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C1821 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C1820 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C47818) *
              C47517 * C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C1820 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C1821 +
           ((C5199 + C5198) * C4761 + (C5197 + C5196) * C4757 +
            (C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                C4762 +
            (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C1820 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47854 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C1821 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C1820 -
           ((C4760 * C1306 + C47833 * C1316 + C4759 * C1293 + C4755 * C1310) *
                C47802 +
            (C4760 * C1289 + C47833 * C1305 + C4759 * C1283 + C4755 * C1294) *
                C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C47818) *
              C47842 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C1820 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C1821 +
           ((C4759 * C1288 + C4755 * C1303 + C4760 * C6083 + C47833 * C6085) *
                C4761 +
            (C4759 * C1304 + C4755 * C1315 + C4760 * C6086 + C47833 * C6089) *
                C4757 +
            (C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                C4762 +
            (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47783 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47580) *
              C47494 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C47783 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C47503 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C3274 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C47783 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47618 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47625 +
            ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                 C4761 +
             (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                 C4757 +
             (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
                C47738 * C3782) *
               C47783 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47625 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47618 -
            ((C7162 + C7163) * C47802 + (C7164 + C7165) * C4762 +
             (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                 C4757 +
             (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                 C4761) *
                C47738 * C3782) *
               C47580) *
              C2620 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47625 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47618 -
            ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
             (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
                C47738 * C3782) *
               C47783 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47618 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47625 +
            ((C7165 + C7164) * C4761 + (C7163 + C7162) * C4757 +
             (C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                 C4762 +
             (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                 C47802) *
                C47738 * C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47854 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47842 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C3274 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C47815) *
              C2620 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C47854 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47842 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C3274 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47517 * C47860 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47622 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C3274) *
              C47517 * C47853 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C3274 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47622) *
              C47517 * C47840 +
          (((C5483 + C5482) * C4761 + (C5481 + C5480) * C4757 +
            (C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C4762 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47862 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47859 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47850 -
           ((C7304 + C7305) * C47802 + (C7306 + C7307) * C4762 +
            (C4760 * C2406 + C47833 * C2411 + C4759 * C2010 + C4755 * C2020) *
                C4757 +
            (C4760 * C2402 + C47833 * C2405 + C4759 * C2002 + C4755 * C2011) *
                C4761) *
               C47738 * C47831) *
              C47517 * C2620 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47859 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47862 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C47850 +
           ((C7307 + C7306) * C4761 + (C7305 + C7304) * C4757 +
            (C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                C4762 +
            (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                C47802) *
               C47738 * C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47618 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47625 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C3782) *
              C47517 * C47494 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47625 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47618 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C3782) *
              C47517 * C47503 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47618 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47625 +
           ((C5199 + C5198) * C4761 + (C5197 + C5196) * C4757 +
            (C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                C4762 +
            (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C3274 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47517 * C47860 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47622 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C3274) *
              C47517 * C47853 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C3274 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47622) *
              C47517 * C47840 +
          (((C5483 + C5482) * C4761 + (C5481 + C5480) * C4757 +
            (C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C4762 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C3274 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47854 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C3274) *
               C47842 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C3274 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C47815) *
              C2620 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C3274) *
               C47854 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C3274 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47842 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47783 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47580) *
              C656 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47580 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47783) *
              C657 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47783 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47580) *
              C658 +
          (((C5341 + C5340) * C4761 + (C5339 + C5338) * C4757 +
            (C4759 * C299 + C4755 * C318 + C4760 * C300 + C47833 * C319) *
                C4762 +
            (C4759 * C317 + C4755 * C329 + C4760 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1416 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1417 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C1418 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47535 * C47825) *
              C47769 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1417 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1416 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C1418 +
           ((C6233 + C6232) * C4761 + (C6231 + C6230) * C4757 +
            (C4759 * C1148 + C4755 * C1155 + C4760 * C1153 + C47833 * C1164) *
                C4762 +
            (C4759 * C1154 + C4755 * C1166 + C4760 * C1165 + C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C47783 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C47580) *
              C288 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C47783 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C47580) *
              C289 +
          ((((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
             (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
                C47738 * C47784 -
            ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
             (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
                C47738 * C47622) *
               C47783 +
           (((C5701 + C5700) * C4761 + (C5699 + C5698) * C4757 +
             (C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C4762 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
             (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
                C47738 * C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47784 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C1416 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47622 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47784) *
              C1417 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47784 -
           ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47622) *
              C1418 +
          (((C4759 * C1698 + C4755 * C1701 + C4760 * C6569 + C47833 * C6571) *
                C4761 +
            (C4759 * C1702 + C4755 * C1707 + C4760 * C6572 + C47833 * C6575) *
                C4757 +
            (C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                C4762 +
            (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C6230 + C6231) * C47802 + (C6232 + C6233) * C4762 +
            (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C4757 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C4761) *
               C47738 * C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47842 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47842 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47854 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4760 * C315 + C47833 * C328 + C4759 * C314 + C4755 * C327) *
                C47802 +
            (C4760 * C298 + C47833 * C316 + C4759 * C297 + C4755 * C313) *
                C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47842 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
           (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
              C47738 * C47535 * C47517 * C109 +
          ((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
           (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
           (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
              C47738 * C47535 * C47517 * C111 +
          ((C4811 + C4810) * C4761 + (C4809 + C4808) * C4757 +
           (C4759 * C122 + C4755 * C135 + C4760 * C660 + C47833 * C661) *
               C4762 +
           (C4759 * C134 + C4755 * C143 + C4760 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47855 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C47517 * C288 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47844 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47855 -
           ((C5196 + C5197) * C47802 + (C5198 + C5199) * C4762 +
            (C5191 + C5190) * C4757 + (C5189 + C5188) * C4761) *
               C47738 * C47818) *
              C47517 * C289 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47855 -
           ((C4760 * C937 + C47833 * C944 + C4759 * C503 + C4755 * C516) *
                C47802 +
            (C4760 * C929 + C47833 * C938 + C4759 * C486 + C4755 * C502) *
                C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47844 +
           ((C5199 + C5198) * C4761 + (C5197 + C5196) * C4757 +
            (C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                C4762 +
            (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1074 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1075 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1075 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1074 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C1074 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C1075 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C1142 -
          ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
           (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
               C4757 +
           (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
               C4761) *
              C47738 * C47535 * C1143 +
          ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
               C4761 +
           (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
               C4757 +
           (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
              C47738 * C47535 * C1144 -
          ((C4760 * C1163 + C47833 * C1170 + C4759 * C1156 + C4755 * C1167) *
               C47802 +
           (C4760 * C1152 + C47833 * C1162 + C4759 * C1149 + C4755 * C1157) *
               C4762 +
           (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
               C4757 +
           (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
               C4761) *
              C47738 * C47535 * C1145 +
          ((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
               C4761 +
           (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
               C4757 +
           (C4759 * C1152 + C4755 * C1162 + C4760 * C5930 + C47833 * C5933) *
               C4762 +
           (C4759 * C1163 + C4755 * C1170 + C4760 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47855 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C483 + C4755 * C496 + C4760 * C1284 + C47833 * C1296) *
                C4761 +
            (C4759 * C497 + C4755 * C513 + C4760 * C1295 + C47833 * C1311) *
                C4757 +
            (C5188 + C5189) * C4762 + (C5190 + C5191) * C47802) *
               C47738 * C47818) *
              C1074 +
          (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                C4761 +
            (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                C4757 +
            (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
               C47738 * C47844 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47855 -
           ((C4760 * C1306 + C47833 * C1316 + C4759 * C1293 + C4755 * C1310) *
                C47802 +
            (C4760 * C1289 + C47833 * C1305 + C4759 * C1283 + C4755 * C1294) *
                C4762 +
            (C4760 * C1304 + C47833 * C1315 + C4759 * C1295 + C4755 * C1311) *
                C4757 +
            (C4760 * C1288 + C47833 * C1303 + C4759 * C1284 + C4755 * C1296) *
                C4761) *
               C47738 * C47818) *
              C1075 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47855 -
           ((C4760 * C1704 + C47833 * C1708 + C4759 * C1299 + C4755 * C1313) *
                C47802 +
            (C4760 * C1699 + C47833 * C1703 + C4759 * C1286 + C4755 * C1300) *
                C4762 +
            (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                C4757 +
            (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                C4761) *
               C47738 * C47844 +
           ((C4759 * C1288 + C4755 * C1303 + C4760 * C6083 + C47833 * C6085) *
                C4761 +
            (C4759 * C1304 + C4755 * C1315 + C4760 * C6086 + C47833 * C6089) *
                C4757 +
            (C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                C4762 +
            (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47784 -
           ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
            (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                C4757 +
            (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                C4761) *
               C47738 * C47622) *
              C47517 * C656 +
          (((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
            (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
               C47738 * C47622 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47784) *
              C47517 * C657 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47784 -
           ((C5480 + C5481) * C47802 + (C5482 + C5483) * C4762 +
            (C5195 + C5194) * C4757 + (C5193 + C5192) * C4761) *
               C47738 * C47622) *
              C47517 * C658 +
          (((C5483 + C5482) * C4761 + (C5481 + C5480) * C4757 +
            (C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C4762 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
            (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
               C47738 * C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C4761 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C4757 +
             (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
                C47738 * C47784 -
            ((C5184 + C5185) * C47802 + (C5186 + C5187) * C4762 +
             (C4760 * C932 + C47833 * C941 + C4759 * C494 + C4755 * C512) *
                 C4757 +
             (C4760 * C926 + C47833 * C931 + C4759 * C482 + C4755 * C495) *
                 C4761) *
                C47738 * C47622) *
               C1074 +
           (((C4759 * C926 + C4755 * C931 + C4760 * C1287 + C47833 * C1302) *
                 C4761 +
             (C4759 * C932 + C4755 * C941 + C4760 * C1301 + C47833 * C1314) *
                 C4757 +
             (C5694 + C5695) * C4762 + (C5696 + C5697) * C47802) *
                C47738 * C47622 -
            ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
             (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C4757 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C4761) *
                C47738 * C47784) *
               C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C4761 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C4757 +
             (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
                C47738 * C47784 -
            ((C6436 + C6437) * C47802 + (C6438 + C6439) * C4762 +
             (C4760 * C1702 + C47833 * C1707 + C4759 * C1301 + C4755 * C1314) *
                 C4757 +
             (C4760 * C1698 + C47833 * C1701 + C4759 * C1287 + C4755 * C1302) *
                 C4761) *
                C47738 * C47622) *
               C47815) *
              C47769 +
          ((((C5187 + C5186) * C4761 + (C5185 + C5184) * C4757 +
             (C5192 + C5193) * C4762 + (C5194 + C5195) * C47802) *
                C47738 * C47622 -
            ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
             (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
                C47738 * C47784) *
               C1074 +
           (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
             (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
                C47738 * C47784 -
            ((C5698 + C5699) * C47802 + (C5700 + C5701) * C4762 +
             (C5697 + C5696) * C4757 + (C5695 + C5694) * C4761) *
                C47738 * C47622) *
               C1075 +
           (((C6439 + C6438) * C4761 + (C6437 + C6436) * C4757 +
             (C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C4762 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
             (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
                C47738 * C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
           (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
              C47738 * C47535 * C47517 * C109 +
          ((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
           (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C4808 + C4809) * C47802 + (C4810 + C4811) * C4762 +
           (C4807 + C4806) * C4757 + (C4805 + C4804) * C4761) *
              C47738 * C47535 * C47517 * C111 +
          ((C4811 + C4810) * C4761 + (C4809 + C4808) * C4757 +
           (C4759 * C122 + C4755 * C135 + C4760 * C660 + C47833 * C661) *
               C4762 +
           (C4759 * C134 + C4755 * C143 + C4760 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C47842 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C47842 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C47854 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C47854 -
           ((C4760 * C315 + C47833 * C328 + C4759 * C314 + C4755 * C327) *
                C47802 +
            (C4760 * C298 + C47833 * C316 + C4759 * C297 + C4755 * C313) *
                C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C47842 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C4761 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C4757 +
            (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
               C47738 * C47535 * C1074 -
           ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
            (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C4757 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C4761) *
               C47738 * C47535 * C1075 +
           ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C4761 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C4757 +
            (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C4993 + C4992) * C4761 + (C4991 + C4990) * C4757 +
            (C4998 + C4999) * C4762 + (C5000 + C5001) * C47802) *
               C47738 * C47535 * C1075 -
           ((C4800 + C4801) * C47802 + (C4802 + C4803) * C4762 +
            (C4799 + C4798) * C4757 + (C4797 + C4796) * C4761) *
               C47738 * C47535 * C1074 -
           ((C5002 + C5003) * C47802 + (C5004 + C5005) * C4762 +
            (C4997 + C4996) * C4757 + (C4995 + C4994) * C4761) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C4803 + C4802) * C4761 + (C4801 + C4800) * C4757 +
            (C4804 + C4805) * C4762 + (C4806 + C4807) * C47802) *
               C47738 * C47535 * C1074 -
           ((C5338 + C5339) * C47802 + (C5340 + C5341) * C4762 +
            (C5001 + C5000) * C4757 + (C4999 + C4998) * C4761) *
               C47738 * C47535 * C1075 +
           ((C5005 + C5004) * C4761 + (C5003 + C5002) * C4757 +
            (C4759 * C298 + C4755 * C316 + C4760 * C1422 + C47833 * C1423) *
                C4762 +
            (C4759 * C315 + C4755 * C328 + C4760 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
               C4761 +
           (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
               C4757 +
           (C4796 + C4797) * C4762 + (C4798 + C4799) * C47802) *
              C47738 * C47535 * C1142 -
          ((C4990 + C4991) * C47802 + (C4992 + C4993) * C4762 +
           (C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
               C4757 +
           (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
               C4761) *
              C47738 * C47535 * C1143 +
          ((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
               C4761 +
           (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
               C4757 +
           (C4994 + C4995) * C4762 + (C4996 + C4997) * C47802) *
              C47738 * C47535 * C1144 -
          ((C4760 * C1163 + C47833 * C1170 + C4759 * C1156 + C4755 * C1167) *
               C47802 +
           (C4760 * C1152 + C47833 * C1162 + C4759 * C1149 + C4755 * C1157) *
               C4762 +
           (C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
               C4757 +
           (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
               C4761) *
              C47738 * C47535 * C1145 +
          ((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
               C4761 +
           (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
               C4757 +
           (C4759 * C1152 + C4755 * C1162 + C4760 * C5930 + C47833 * C5933) *
               C4762 +
           (C4759 * C1163 + C4755 * C1170 + C4760 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C47576 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47583 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47535 * C2880) *
              C47494 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C47583 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47576 -
           ((C12041 + C12040 + C12039 + C12038) * C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C2880) *
              C47503 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C47576 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47583 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47576 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C47583 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C47784 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C2880) *
              C2620 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C47576 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47583 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C47861 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47857 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47535 * C47847 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47535 * C47825) *
              C2620 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C47857 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47861 -
           ((C12041 + C12040 + C12039 + C12038) * C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47847 +
           ((C1438 * C4761 + C1437 * C4757 + C1436 * C4762 + C1435 * C47802) *
                C10491 +
            (C11843 * C4761 + C11842 * C4757 +
             (C113 * C1700 + C47721 * C1705) * C4762 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C2512 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47580) *
              C47860 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C47580 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C2512) *
              C47853 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C2512 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47580) *
              C47840 +
          (((C364 * C4761 + C365 * C4757 + C670 * C4762 + C669 * C47802) *
                C10491 +
            (C964 * C4761 + C963 * C4757 +
             (C113 * C930 + C47721 * C939) * C4762 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47855 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47844 +
            ((C10821 + C10820 + C10793 + C10792) * C10491 +
             (C12584 + C12585 + C12568 + C12569) * C47835) *
                C47818) *
               C2512 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47844 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47855 -
            ((C13058 + C13059 + C13066 + C13067) * C47835 +
             (C11677 + C11676 + C11701 + C11700) * C10491) *
                C47818) *
               C47580) *
              C2620 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47844 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47855 -
            ((C12924 + C12925 + C12926 + C12927) * C47835 +
             (C10805 + C10804 + C10803 + C10802) * C10491) *
                C47818) *
               C2512 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47855 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47844 +
            ((C12791 + C12790 + C12789 + C12788) * C10491 +
             (C12793 * C4761 + C12792 * C4757 +
              (C113 * C2404 + C47721 * C2409) * C4762 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C2512 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C47494 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C2512 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C47503 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C47784 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C2512 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C2512 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47580) *
              C47860 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C47580 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C2512) *
              C47853 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C2512 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47580) *
              C47840 +
          (((C364 * C4761 + C365 * C4757 + C670 * C4762 + C669 * C47802) *
                C10491 +
            (C964 * C4761 + C963 * C4757 +
             (C113 * C930 + C47721 * C939) * C4762 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C47861 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47857 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47535 * C47847 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47535 * C47825) *
              C2620 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C47857 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47861 -
           ((C12041 + C12040 + C12039 + C12038) * C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47847 +
           ((C1438 * C4761 + C1437 * C4757 + C1436 * C4762 + C1435 * C47802) *
                C10491 +
            (C11843 * C4761 + C11842 * C4757 +
             (C113 * C1700 + C47721 * C1705) * C4762 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47576 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47583 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C3274 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C2880) *
              C47769 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C47576 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47583 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47721 * C124) * C4761 +
                     (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
                     C167 * C47802) *
                        C10491 +
                    (C10818 + C10819 + C10790 + C10791) * C47835) *
                       C47618 -
                   ((C10792 + C10793 + C10820 + C10821) * C47835 +
                    (C10791 + C10790 + C10819 + C10818) * C10491) *
                       C47625 +
                   ((C10821 + C10820 + C10793 + C10792) * C10491 +
                    (C12584 + C12585 + C12568 + C12569) * C47835) *
                       C3782) *
                      C47576 +
                  (((C11296 + C11297 + C11284 + C11285) * C10491 +
                    (C11700 + C11701 + C11676 + C11677) * C47835) *
                       C47625 -
                   ((C11285 + C11284 + C11297 + C11296) * C47835 +
                    (C358 * C47802 + C359 * C4762 +
                     (C113 * C305 + C47721 * C323) * C4757 +
                     (C113 * C293 + C47721 * C306) * C4761) *
                        C10491) *
                       C47618 -
                   ((C13058 + C13059 + C13066 + C13067) * C47835 +
                    (C11677 + C11676 + C11701 + C11700) * C10491) *
                       C3782) *
                      C47583 +
                  ((((C113 * C294 + C47721 * C307) * C4761 +
                     (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
                     C361 * C47802) *
                        C10491 +
                    (C11702 + C11703 + C11682 + C11683) * C47835) *
                       C47618 -
                   ((C11704 + C11705 + C11706 + C11707) * C47835 +
                    (C11683 + C11682 + C11703 + C11702) * C10491) *
                       C47625 +
                   ((C11707 + C11706 + C11705 + C11704) * C10491 +
                    ((C113 * C7437 + C47721 * C7439) * C4761 +
                     (C113 * C7440 + C47721 * C7443) * C4757 +
                     (C113 * C7438 + C47721 * C7441) * C4762 +
                     (C113 * C7442 + C47721 * C7444) * C47802) *
                        C47835) *
                       C3782) *
                      C2880) *
                 C47489) /
                (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C3274 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47861 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47622 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C3274) *
              C47857 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C3274 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47622) *
              C47847 +
          (((C12180 + C12181 + C12176 + C12177) * C10491 +
            ((C113 * C6083 + C47721 * C6085) * C4761 +
             (C113 * C6086 + C47721 * C6089) * C4757 +
             (C113 * C6084 + C47721 * C6087) * C4762 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C2512 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C47851 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C2512 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C47838 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C3274 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C2512 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47862 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47859 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            (C12584 + C12585 + C12568 + C12569) * C47835) *
               C47850 -
           ((C12586 + C12587 + C12588 + C12589) * C47835 +
            (C12569 + C12568 + C12585 + C12584) * C10491) *
               C47831) *
              C2512 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47859 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47862 -
           ((C13058 + C13059 + C13066 + C13067) * C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C47850 +
           ((C13067 + C13066 + C13059 + C13058) * C10491 +
            ((C113 * C6951 + C47721 * C6953) * C4761 +
             (C113 * C6954 + C47721 * C6957) * C4757 +
             (C113 * C6952 + C47721 * C6955) * C4762 +
             (C113 * C6956 + C47721 * C6958) * C47802) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47618 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47625 +
            ((C10821 + C10820 + C10793 + C10792) * C10491 +
             (C12584 + C12585 + C12568 + C12569) * C47835) *
                C3782) *
               C2512 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47625 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47618 -
            ((C13058 + C13059 + C13066 + C13067) * C47835 +
             (C11677 + C11676 + C11701 + C11700) * C10491) *
                C3782) *
               C47580) *
              C47769 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47625 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47618 -
            ((C12924 + C12925 + C12926 + C12927) * C47835 +
             (C10805 + C10804 + C10803 + C10802) * C10491) *
                C3782) *
               C2512 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47618 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47625 +
            ((C12791 + C12790 + C12789 + C12788) * C10491 +
             (C12793 * C4761 + C12792 * C4757 +
              (C113 * C2404 + C47721 * C2409) * C4762 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C2512 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C47851 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C2512 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C47838 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C3274 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C2512 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C3274 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47861 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47622 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C3274) *
              C47857 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C3274 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47622) *
              C47847 +
          (((C12180 + C12181 + C12176 + C12177) * C10491 +
            ((C113 * C6083 + C47721 * C6085) * C4761 +
             (C113 * C6086 + C47721 * C6089) * C4757 +
             (C113 * C6084 + C47721 * C6087) * C4762 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1416 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1417 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47535 * C1418 -
           ((C11842 * C47802 + C11843 * C4762 +
             (C113 * C1702 + C47721 * C1707) * C4757 +
             (C113 * C1698 + C47721 * C1701) * C4761) *
                C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47535 * C47825) *
              C47769 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1417 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1416 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C1418 +
           ((C1438 * C4761 + C1437 * C4757 + C1436 * C4762 + C1435 * C47802) *
                C10491 +
            (C11843 * C4761 + C11842 * C4757 +
             (C113 * C1700 + C47721 * C1705) * C4762 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C47783 -
           ((C960 * C47802 + C959 * C4762 +
             (C113 * C932 + C47721 * C941) * C4757 +
             (C113 * C926 + C47721 * C931) * C4761) *
                C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47580) *
              C656 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47783) *
              C657 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C47783 -
           ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47580) *
              C658 +
          (((C364 * C4761 + C365 * C4757 + C670 * C4762 + C669 * C47802) *
                C10491 +
            (C964 * C4761 + C963 * C4757 +
             (C113 * C930 + C47721 * C939) * C4762 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
                C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C1820 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C1821 +
            ((C10821 + C10820 + C10793 + C10792) * C10491 +
             (C12584 + C12585 + C12568 + C12569) * C47835) *
                C47818) *
               C47783 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C1821 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C1820 -
            ((C12792 * C47802 + C12793 * C4762 +
              (C113 * C2406 + C47721 * C2411) * C4757 +
              (C113 * C2402 + C47721 * C2405) * C4761) *
                 C47835 +
             (C11677 + C11676 + C11701 + C11700) * C10491) *
                C47818) *
               C47580) *
              C47769 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C1821 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C1820 -
            ((C2301 * C47802 + C2302 * C4762 + C2303 * C4757 + C2304 * C4761) *
                 C47835 +
             (C10805 + C10804 + C10803 + C10802) * C10491) *
                C47818) *
               C47783 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C1820 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C1821 +
            ((C12791 + C12790 + C12789 + C12788) * C10491 +
             (C12793 * C4761 + C12792 * C4757 +
              (C113 * C2404 + C47721 * C2409) * C4762 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47784 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C1416 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47622 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47784) *
              C1417 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47784 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47622) *
              C1418 +
          (((C12180 + C12181 + C12176 + C12177) * C10491 +
            ((C113 * C6083 + C47721 * C6085) * C4761 +
             (C113 * C6086 + C47721 * C6089) * C4757 +
             (C113 * C6084 + C47721 * C6087) * C4762 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47783 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             ((C113 * C1284 + C47721 * C1296) * C4761 +
              (C113 * C1295 + C47721 * C1311) * C4757 + C2186 * C4762 +
              C2185 * C47802) *
                 C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C288 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C47783 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C4762 + C2185 * C4757 + C2186 * C4761) *
                 C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C289 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C47784 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C47783 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C2284 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C2285 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            (C12584 + C12585 + C12568 + C12569) * C47835) *
               C2286 -
           ((C12586 + C12587 + C12588 + C12589) * C47835 +
            (C12569 + C12568 + C12585 + C12584) * C10491) *
               C47831) *
              C47783 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C2285 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C2284 -
           ((C13058 + C13059 + C13066 + C13067) * C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C2286 +
           ((C13067 + C13066 + C13059 + C13058) * C10491 +
            ((C113 * C6951 + C47721 * C6953) * C4761 +
             (C113 * C6954 + C47721 * C6957) * C4757 +
             (C113 * C6952 + C47721 * C6955) * C4762 +
             (C113 * C6956 + C47721 * C6958) * C47802) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47721 * C124) * C4761 +
                (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
                C167 * C47802) *
                   C10491 +
               ((C113 * C482 + C47721 * C495) * C4761 +
                (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
                C547 * C47802) *
                   C47835) *
                  C47535 * C47517 * C108 -
              ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
                   C47835 +
               (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                   C10491) *
                  C47535 * C47517 * C109 +
              ((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                   C10491 +
               (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
                   C47835) *
                  C47535 * C47517 * C110 -
              ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
                   C47835 +
               (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                   C10491) *
                  C47535 * C47517 * C111 +
              ((C172 * C4761 + C173 * C4757 + C175 * C4762 + C174 * C47802) *
                   C10491 +
               (C780 * C4761 + C779 * C4757 +
                (C113 * C770 + C47721 * C771) * C4762 +
                (C113 * C772 + C47721 * C773) * C47802) *
                   C47835) *
                  C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47721 * C124) * C4761 +
                 (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
                 C167 * C47802) *
                    C10491 +
                ((C113 * C482 + C47721 * C495) * C4761 +
                 (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
                 C547 * C47802) *
                    C47835) *
                   C47535 * C47854 -
               ((C960 * C47802 + C959 * C4762 +
                 (C113 * C932 + C47721 * C941) * C4757 +
                 (C113 * C926 + C47721 * C931) * C4761) *
                    C47835 +
                (C358 * C47802 + C359 * C4762 +
                 (C113 * C305 + C47721 * C323) * C4757 +
                 (C113 * C293 + C47721 * C306) * C4761) *
                    C10491) *
                   C47535 * C47842 +
               (((C113 * C294 + C47721 * C307) * C4761 +
                 (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
                 C361 * C47802) *
                    C10491 +
                ((C113 * C1287 + C47721 * C1302) * C4761 +
                 (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
                 C1599 * C47802) *
                    C47835) *
                   C47535 * C47815) *
                  C288 +
              (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                    C10491 +
                (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                    C47835) *
                   C47535 * C47842 -
               ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
                    C47835 +
                (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                    C10491) *
                   C47535 * C47854 -
               ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 +
                 C1600 * C4761) *
                    C47835 +
                (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                    C10491) *
                   C47535 * C47815) *
                  C289 +
              (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                    C10491 +
                (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
                    C47835) *
                   C47535 * C47854 -
               ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                    C47835 +
                (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                    C10491) *
                   C47535 * C47842 +
               ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                    C10491 +
                (C1598 * C4761 + C1597 * C4757 +
                 (C113 * C1584 + C47721 * C1585) * C4762 +
                 (C113 * C1586 + C47721 * C1587) * C47802) *
                    C47835) *
                   C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47855 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47844 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C288 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47844 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47855 -
           ((C2301 * C47802 + C2302 * C4762 + C2303 * C4757 + C2304 * C4761) *
                C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C47818) *
              C47517 * C289 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47855 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47844 +
           ((C10813 + C10812 + C10811 + C10810) * C10491 +
            (C2302 * C4761 + C2301 * C4757 +
             (C113 * C2288 + C47721 * C2289) * C4762 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1074 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1075 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C1074 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C1075 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           (C10818 + C10819 + C10790 + C10791) * C47835) *
              C47535 * C1142 -
          ((C11285 + C11284 + C11297 + C11296) * C47835 +
           (C358 * C47802 + C359 * C4762 +
            (C113 * C305 + C47721 * C323) * C4757 +
            (C113 * C293 + C47721 * C306) * C4761) *
               C10491) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C4761 +
            (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
            C361 * C47802) *
               C10491 +
           ((C113 * C1287 + C47721 * C1302) * C4761 +
            (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          (((C113 * C1704 + C47721 * C1708) * C47802 +
            (C113 * C1699 + C47721 * C1703) * C4762 +
            (C113 * C1702 + C47721 * C1707) * C4757 +
            (C113 * C1698 + C47721 * C1701) * C4761) *
               C47835 +
           (C1437 * C47802 + C1438 * C4762 +
            (C113 * C1158 + C47721 * C1168) * C4757 +
            (C113 * C1150 + C47721 * C1159) * C4761) *
               C10491) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C4761 +
            (C113 * C1161 + C47721 * C1169) * C4757 +
            (C113 * C1152 + C47721 * C1162) * C4762 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C10491 +
           ((C113 * C6569 + C47721 * C6571) * C4761 +
            (C113 * C6572 + C47721 * C6575) * C4757 +
            (C113 * C6570 + C47721 * C6573) * C4762 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47855 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47844 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C1074 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47844 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47855 -
           (((C113 * C2408 + C47721 * C2412) * C47802 +
             (C113 * C2403 + C47721 * C2407) * C4762 +
             (C113 * C2406 + C47721 * C2411) * C4757 +
             (C113 * C2402 + C47721 * C2405) * C4761) *
                C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C47818) *
              C1075 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47855 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47844 +
           ((C11707 + C11706 + C11705 + C11704) * C10491 +
            ((C113 * C7437 + C47721 * C7439) * C4761 +
             (C113 * C7440 + C47721 * C7443) * C4757 +
             (C113 * C7438 + C47721 * C7441) * C4762 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C1820 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C1821 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C1821 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C1820 -
           ((C2301 * C47802 + C2302 * C4762 + C2303 * C4757 + C2304 * C4761) *
                C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C47818) *
              C47517 * C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C1820 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C1821 +
           ((C10813 + C10812 + C10811 + C10810) * C10491 +
            (C2302 * C4761 + C2301 * C4757 +
             (C113 * C2288 + C47721 * C2289) * C4762 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C1820 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C1821 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47854 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C1821 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C1820 -
           (((C113 * C2408 + C47721 * C2412) * C47802 +
             (C113 * C2403 + C47721 * C2407) * C4762 +
             (C113 * C2406 + C47721 * C2411) * C4757 +
             (C113 * C2402 + C47721 * C2405) * C4761) *
                C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C47818) *
              C47842 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C1820 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C1821 +
           ((C11707 + C11706 + C11705 + C11704) * C10491 +
            ((C113 * C7437 + C47721 * C7439) * C4761 +
             (C113 * C7440 + C47721 * C7443) * C4757 +
             (C113 * C7438 + C47721 * C7441) * C4762 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           (C10818 + C10819 + C10790 + C10791) * C47835) *
              C1995 -
          ((C10792 + C10793 + C10820 + C10821) * C47835 +
           (C10791 + C10790 + C10819 + C10818) * C10491) *
              C1996 +
          ((C10821 + C10820 + C10793 + C10792) * C10491 +
           (C12584 + C12585 + C12568 + C12569) * C47835) *
              C1997 -
          ((C12586 + C12587 + C12588 + C12589) * C47835 +
           (C12569 + C12568 + C12585 + C12584) * C10491) *
              C1998 +
          ((C12589 + C12588 + C12587 + C12586) * C10491 +
           ((C113 * C12555 + C47721 * C12557) * C4761 +
            (C113 * C12558 + C47721 * C12561) * C4757 +
            (C113 * C12556 + C47721 * C12559) * C4762 +
            (C113 * C12560 + C47721 * C12562) * C47802) *
               C47835) *
              C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C1074 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C1075 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C47784 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C47815) *
              C47769 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C1074 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C4762 + C2185 * C4757 + C2186 * C4761) *
                 C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C1075 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47784 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47517 * C656 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47622 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47784) *
              C47517 * C657 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47784 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47622) *
              C47517 * C658 +
          (((C11082 + C11083 + C11084 + C11085) * C10491 +
            (C556 * C4761 + C555 * C4757 +
             (C113 * C489 + C47721 * C508) * C4762 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C2284 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C2285 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            (C12584 + C12585 + C12568 + C12569) * C47835) *
               C2286 -
           ((C12586 + C12587 + C12588 + C12589) * C47835 +
            (C12569 + C12568 + C12585 + C12584) * C10491) *
               C47831) *
              C47517 * C47769 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C2285 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C2284 -
           ((C12924 + C12925 + C12926 + C12927) * C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C2286 +
           ((C12927 + C12926 + C12925 + C12924) * C10491 +
            (C12581 * C4761 + C12580 * C4757 +
             (C113 * C2005 + C47721 * C2016) * C4762 +
             (C113 * C2017 + C47721 * C2023) * C47802) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            ((C113 * C482 + C47721 * C495) * C4761 +
             (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C4762 +
             (C113 * C932 + C47721 * C941) * C4757 +
             (C113 * C926 + C47721 * C931) * C4761) *
                C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
                C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C289 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47842 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           ((C113 * C482 + C47721 * C495) * C4761 +
            (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
            C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
               C47835 +
           (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
               C10491) *
              C47535 * C47517 * C109 +
          ((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
               C10491 +
           (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
               C47835 +
           (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
               C10491) *
              C47535 * C47517 * C111 +
          ((C172 * C4761 + C173 * C4757 + C175 * C4762 + C174 * C47802) *
               C10491 +
           (C780 * C4761 + C779 * C4757 +
            (C113 * C770 + C47721 * C771) * C4762 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1074 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1075 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C1074 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C1075 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           (C10818 + C10819 + C10790 + C10791) * C47835) *
              C47535 * C1142 -
          ((C11285 + C11284 + C11297 + C11296) * C47835 +
           (C358 * C47802 + C359 * C4762 +
            (C113 * C305 + C47721 * C323) * C4757 +
            (C113 * C293 + C47721 * C306) * C4761) *
               C10491) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C4761 +
            (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
            C361 * C47802) *
               C10491 +
           ((C113 * C1287 + C47721 * C1302) * C4761 +
            (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          (((C113 * C1704 + C47721 * C1708) * C47802 +
            (C113 * C1699 + C47721 * C1703) * C4762 +
            (C113 * C1702 + C47721 * C1707) * C4757 +
            (C113 * C1698 + C47721 * C1701) * C4761) *
               C47835 +
           (C1437 * C47802 + C1438 * C4762 +
            (C113 * C1158 + C47721 * C1168) * C4757 +
            (C113 * C1150 + C47721 * C1159) * C4761) *
               C10491) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C4761 +
            (C113 * C1161 + C47721 * C1169) * C4757 +
            (C113 * C1152 + C47721 * C1162) * C4762 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C10491 +
           ((C113 * C6569 + C47721 * C6571) * C4761 +
            (C113 * C6572 + C47721 * C6575) * C4757 +
            (C113 * C6570 + C47721 * C6573) * C4762 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C1820 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C1821 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C1821 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C1820 -
           ((C2301 * C47802 + C2302 * C4762 + C2303 * C4757 + C2304 * C4761) *
                C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C47818) *
              C47517 * C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C1820 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C1821 +
           ((C10813 + C10812 + C10811 + C10810) * C10491 +
            (C2302 * C4761 + C2301 * C4757 +
             (C113 * C2288 + C47721 * C2289) * C4762 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C1820 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C1821 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47854 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C1821 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C1820 -
           (((C113 * C2408 + C47721 * C2412) * C47802 +
             (C113 * C2403 + C47721 * C2407) * C4762 +
             (C113 * C2406 + C47721 * C2411) * C4757 +
             (C113 * C2402 + C47721 * C2405) * C4761) *
                C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C47818) *
              C47842 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C1820 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C1821 +
           ((C11707 + C11706 + C11705 + C11704) * C10491 +
            ((C113 * C7437 + C47721 * C7439) * C4761 +
             (C113 * C7440 + C47721 * C7443) * C4757 +
             (C113 * C7438 + C47721 * C7441) * C4762 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47783 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C47494 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C47783 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C47503 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C3274 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C47783 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47618 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47625 +
            ((C10821 + C10820 + C10793 + C10792) * C10491 +
             (C12584 + C12585 + C12568 + C12569) * C47835) *
                C3782) *
               C47783 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47625 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47618 -
            ((C13058 + C13059 + C13066 + C13067) * C47835 +
             (C11677 + C11676 + C11701 + C11700) * C10491) *
                C3782) *
               C47580) *
              C2620 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47625 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47618 -
            ((C12924 + C12925 + C12926 + C12927) * C47835 +
             (C10805 + C10804 + C10803 + C10802) * C10491) *
                C3782) *
               C47783 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47618 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47625 +
            ((C12791 + C12790 + C12789 + C12788) * C10491 +
             (C12793 * C4761 + C12792 * C4757 +
              (C113 * C2404 + C47721 * C2409) * C4762 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47854 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47842 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C3274 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C47815) *
              C2620 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C47854 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47842 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C3274 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47517 * C47860 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47622 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C3274) *
              C47517 * C47853 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C3274 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47622) *
              C47517 * C47840 +
          (((C11082 + C11083 + C11084 + C11085) * C10491 +
            (C556 * C4761 + C555 * C4757 +
             (C113 * C489 + C47721 * C508) * C4762 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47862 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47859 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            (C12584 + C12585 + C12568 + C12569) * C47835) *
               C47850 -
           ((C12586 + C12587 + C12588 + C12589) * C47835 +
            (C12569 + C12568 + C12585 + C12584) * C10491) *
               C47831) *
              C47517 * C2620 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47859 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47862 -
           ((C12924 + C12925 + C12926 + C12927) * C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C47850 +
           ((C12927 + C12926 + C12925 + C12924) * C10491 +
            (C12581 * C4761 + C12580 * C4757 +
             (C113 * C2005 + C47721 * C2016) * C4762 +
             (C113 * C2017 + C47721 * C2023) * C47802) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47618 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47625 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            (C12584 + C12585 + C12568 + C12569) * C47835) *
               C3782) *
              C47517 * C47494 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47625 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47618 -
           ((C12924 + C12925 + C12926 + C12927) * C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C3782) *
              C47517 * C47503 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47618 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47625 +
           ((C10813 + C10812 + C10811 + C10810) * C10491 +
            (C2302 * C4761 + C2301 * C4757 +
             (C113 * C2288 + C47721 * C2289) * C4762 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C3274 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47517 * C47860 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47622 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C3274) *
              C47517 * C47853 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C3274 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47622) *
              C47517 * C47840 +
          (((C11082 + C11083 + C11084 + C11085) * C10491 +
            (C556 * C4761 + C555 * C4757 +
             (C113 * C489 + C47721 * C508) * C4762 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C3274 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47854 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C3274) *
               C47842 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C3274 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C47815) *
              C2620 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C3274) *
               C47854 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C3274 -
            ((C12788 + C12789 + C12790 + C12791) * C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47842 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C47783 -
           ((C960 * C47802 + C959 * C4762 +
             (C113 * C932 + C47721 * C941) * C4757 +
             (C113 * C926 + C47721 * C931) * C4761) *
                C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47580) *
              C656 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47783) *
              C657 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C47783 -
           ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47580) *
              C658 +
          (((C364 * C4761 + C365 * C4757 + C670 * C4762 + C669 * C47802) *
                C10491 +
            (C964 * C4761 + C963 * C4757 +
             (C113 * C930 + C47721 * C939) * C4762 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
                C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1416 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1417 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47535 * C1418 -
           ((C11842 * C47802 + C11843 * C4762 +
             (C113 * C1702 + C47721 * C1707) * C4757 +
             (C113 * C1698 + C47721 * C1701) * C4761) *
                C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47535 * C47825) *
              C47769 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1417 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1416 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C1418 +
           ((C1438 * C4761 + C1437 * C4757 + C1436 * C4762 + C1435 * C47802) *
                C10491 +
            (C11843 * C4761 + C11842 * C4757 +
             (C113 * C1700 + C47721 * C1705) * C4762 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C47783 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             ((C113 * C1284 + C47721 * C1296) * C4761 +
              (C113 * C1295 + C47721 * C1311) * C4757 + C2186 * C4762 +
              C2185 * C47802) *
                 C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C288 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C47783 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C4762 + C2185 * C4757 + C2186 * C4761) *
                 C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C47580) *
              C289 +
          ((((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                 C10491 +
             (C10806 + C10807 + C10808 + C10809) * C47835) *
                C47784 -
            ((C10810 + C10811 + C10812 + C10813) * C47835 +
             (C10809 + C10808 + C10807 + C10806) * C10491) *
                C47622) *
               C47783 +
           (((C11290 + C11291 + C11292 + C11293) * C10491 +
             (C2184 * C4761 + C2183 * C4757 +
              (C113 * C2170 + C47721 * C2171) * C4762 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C11293 + C11292 + C11291 + C11290) * C47835 +
             (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                 C10491) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47784 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C1416 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47622 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47784) *
              C1417 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47784 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47622) *
              C1418 +
          (((C12180 + C12181 + C12176 + C12177) * C10491 +
            ((C113 * C6083 + C47721 * C6085) * C4761 +
             (C113 * C6086 + C47721 * C6089) * C4757 +
             (C113 * C6084 + C47721 * C6087) * C4762 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C12177 + C12176 + C12181 + C12180) * C47835 +
            (C1437 * C47802 + C1438 * C4762 +
             (C113 * C1158 + C47721 * C1168) * C4757 +
             (C113 * C1150 + C47721 * C1159) * C4761) *
                C10491) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            ((C113 * C482 + C47721 * C495) * C4761 +
             (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C4762 +
             (C113 * C932 + C47721 * C941) * C4757 +
             (C113 * C926 + C47721 * C931) * C4761) *
                C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
                C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C289 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47842 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           ((C113 * C482 + C47721 * C495) * C4761 +
            (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
            C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
               C47835 +
           (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
               C10491) *
              C47535 * C47517 * C109 +
          ((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
               C10491 +
           (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
               C47835 +
           (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
               C10491) *
              C47535 * C47517 * C111 +
          ((C172 * C4761 + C173 * C4757 + C175 * C4762 + C174 * C47802) *
               C10491 +
           (C780 * C4761 + C779 * C4757 +
            (C113 * C770 + C47721 * C771) * C4762 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47855 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47844 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C288 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47844 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47855 -
           ((C2301 * C47802 + C2302 * C4762 + C2303 * C4757 + C2304 * C4761) *
                C47835 +
            (C10805 + C10804 + C10803 + C10802) * C10491) *
               C47818) *
              C47517 * C289 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47855 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47844 +
           ((C10813 + C10812 + C10811 + C10810) * C10491 +
            (C2302 * C4761 + C2301 * C4757 +
             (C113 * C2288 + C47721 * C2289) * C4762 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1074 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1075 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C1074 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C1075 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           (C10818 + C10819 + C10790 + C10791) * C47835) *
              C47535 * C1142 -
          ((C11285 + C11284 + C11297 + C11296) * C47835 +
           (C358 * C47802 + C359 * C4762 +
            (C113 * C305 + C47721 * C323) * C4757 +
            (C113 * C293 + C47721 * C306) * C4761) *
               C10491) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C4761 +
            (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
            C361 * C47802) *
               C10491 +
           ((C113 * C1287 + C47721 * C1302) * C4761 +
            (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          (((C113 * C1704 + C47721 * C1708) * C47802 +
            (C113 * C1699 + C47721 * C1703) * C4762 +
            (C113 * C1702 + C47721 * C1707) * C4757 +
            (C113 * C1698 + C47721 * C1701) * C4761) *
               C47835 +
           (C1437 * C47802 + C1438 * C4762 +
            (C113 * C1158 + C47721 * C1168) * C4757 +
            (C113 * C1150 + C47721 * C1159) * C4761) *
               C10491) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C4761 +
            (C113 * C1161 + C47721 * C1169) * C4757 +
            (C113 * C1152 + C47721 * C1162) * C4762 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C10491 +
           ((C113 * C6569 + C47721 * C6571) * C4761 +
            (C113 * C6572 + C47721 * C6575) * C4757 +
            (C113 * C6570 + C47721 * C6573) * C4762 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47855 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47844 +
           ((C10821 + C10820 + C10793 + C10792) * C10491 +
            ((C113 * C2002 + C47721 * C2011) * C4761 +
             (C113 * C2010 + C47721 * C2020) * C4757 + C2304 * C4762 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C1074 +
          (((C11296 + C11297 + C11284 + C11285) * C10491 +
            (C11700 + C11701 + C11676 + C11677) * C47835) *
               C47844 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47855 -
           (((C113 * C2408 + C47721 * C2412) * C47802 +
             (C113 * C2403 + C47721 * C2407) * C4762 +
             (C113 * C2406 + C47721 * C2411) * C4757 +
             (C113 * C2402 + C47721 * C2405) * C4761) *
                C47835 +
            (C11677 + C11676 + C11701 + C11700) * C10491) *
               C47818) *
              C1075 +
          ((((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            (C11702 + C11703 + C11682 + C11683) * C47835) *
               C47855 -
           ((C11704 + C11705 + C11706 + C11707) * C47835 +
            (C11683 + C11682 + C11703 + C11702) * C10491) *
               C47844 +
           ((C11707 + C11706 + C11705 + C11704) * C10491 +
            ((C113 * C7437 + C47721 * C7439) * C4761 +
             (C113 * C7440 + C47721 * C7443) * C4757 +
             (C113 * C7438 + C47721 * C7441) * C4762 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47784 -
           ((C10792 + C10793 + C10820 + C10821) * C47835 +
            (C10791 + C10790 + C10819 + C10818) * C10491) *
               C47622) *
              C47517 * C656 +
          (((C10798 + C10799 + C10800 + C10801) * C10491 +
            (C10802 + C10803 + C10804 + C10805) * C47835) *
               C47622 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47784) *
              C47517 * C657 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47784 -
           ((C10810 + C10811 + C10812 + C10813) * C47835 +
            (C10809 + C10808 + C10807 + C10806) * C10491) *
               C47622) *
              C47517 * C658 +
          (((C11082 + C11083 + C11084 + C11085) * C10491 +
            (C556 * C4761 + C555 * C4757 +
             (C113 * C489 + C47721 * C508) * C4762 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C11085 + C11084 + C11083 + C11082) * C47835 +
            (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
                C10491) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C4761 +
              (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
              C167 * C47802) *
                 C10491 +
             (C10818 + C10819 + C10790 + C10791) * C47835) *
                C47784 -
            ((C10792 + C10793 + C10820 + C10821) * C47835 +
             (C10791 + C10790 + C10819 + C10818) * C10491) *
                C47622) *
               C1074 +
           (((C11296 + C11297 + C11284 + C11285) * C10491 +
             (C11700 + C11701 + C11676 + C11677) * C47835) *
                C47622 -
            ((C11285 + C11284 + C11297 + C11296) * C47835 +
             (C358 * C47802 + C359 * C4762 +
              (C113 * C305 + C47721 * C323) * C4757 +
              (C113 * C293 + C47721 * C306) * C4761) *
                 C10491) *
                C47784) *
               C1075 +
           ((((C113 * C294 + C47721 * C307) * C4761 +
              (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
              C361 * C47802) *
                 C10491 +
             (C11702 + C11703 + C11682 + C11683) * C47835) *
                C47784 -
            ((C11704 + C11705 + C11706 + C11707) * C47835 +
             (C11683 + C11682 + C11703 + C11702) * C10491) *
                C47622) *
               C47815) *
              C47769 +
          ((((C10798 + C10799 + C10800 + C10801) * C10491 +
             (C10802 + C10803 + C10804 + C10805) * C47835) *
                C47622 -
            ((C10801 + C10800 + C10799 + C10798) * C47835 +
             (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                 C10491) *
                C47784) *
               C1074 +
           (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                 C10491 +
             (C11286 + C11287 + C11288 + C11289) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C4762 + C2185 * C4757 + C2186 * C4761) *
                 C47835 +
             (C11289 + C11288 + C11287 + C11286) * C10491) *
                C47622) *
               C1075 +
           (((C12038 + C12039 + C12040 + C12041) * C10491 +
             (C11697 * C4761 + C11696 * C4757 +
              (C113 * C1290 + C47721 * C1307) * C4762 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C12041 + C12040 + C12039 + C12038) * C47835 +
             (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                 C10491) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           ((C113 * C482 + C47721 * C495) * C4761 +
            (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
            C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
               C47835 +
           (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
               C10491) *
              C47535 * C47517 * C109 +
          ((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
               C10491 +
           (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C4762 + C554 * C4757 + C553 * C4761) *
               C47835 +
           (C173 * C47802 + C172 * C4762 + C170 * C4757 + C171 * C4761) *
               C10491) *
              C47535 * C47517 * C111 +
          ((C172 * C4761 + C173 * C4757 + C175 * C4762 + C174 * C47802) *
               C10491 +
           (C780 * C4761 + C779 * C4757 +
            (C113 * C770 + C47721 * C771) * C4762 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            ((C113 * C482 + C47721 * C495) * C4761 +
             (C113 * C494 + C47721 * C512) * C4757 + C548 * C4762 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C4762 +
             (C113 * C932 + C47721 * C941) * C4757 +
             (C113 * C926 + C47721 * C931) * C4761) *
                C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C959 * C4761 + C960 * C4757 + C961 * C4762 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C4762 + C547 * C4757 + C548 * C4761) *
                C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C289 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C546 * C4761 + C545 * C4757 + C553 * C4762 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C4762 + C962 * C4757 + C961 * C4761) *
                C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C47842 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C4761 +
             (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
             C167 * C47802) *
                C10491 +
            (C10818 + C10819 + C10790 + C10791) * C47835) *
               C47535 * C1074 -
           ((C11285 + C11284 + C11297 + C11296) * C47835 +
            (C358 * C47802 + C359 * C4762 +
             (C113 * C305 + C47721 * C323) * C4757 +
             (C113 * C293 + C47721 * C306) * C4761) *
                C10491) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C4761 +
             (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
             C361 * C47802) *
                C10491 +
            ((C113 * C1287 + C47721 * C1302) * C4761 +
             (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C4761 + C358 * C4757 + C357 * C4762 + C356 * C47802) *
                C10491 +
            (C11286 + C11287 + C11288 + C11289) * C47835) *
               C47535 * C1075 -
           ((C10801 + C10800 + C10799 + C10798) * C47835 +
            (C169 * C47802 + C168 * C4762 + C167 * C4757 + C166 * C4761) *
                C10491) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C4762 + C1599 * C4757 + C1600 * C4761) *
                C47835 +
            (C363 * C47802 + C362 * C4762 + C361 * C4757 + C360 * C4761) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C4761 + C169 * C4757 + C171 * C4762 + C170 * C47802) *
                C10491 +
            (C10806 + C10807 + C10808 + C10809) * C47835) *
               C47535 * C1074 -
           ((C11293 + C11292 + C11291 + C11290) * C47835 +
            (C365 * C47802 + C364 * C4762 + C356 * C4757 + C357 * C4761) *
                C10491) *
               C47535 * C1075 +
           ((C362 * C4761 + C363 * C4757 + C367 * C4762 + C366 * C47802) *
                C10491 +
            (C1598 * C4761 + C1597 * C4757 +
             (C113 * C1584 + C47721 * C1585) * C4762 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C4761 +
            (C113 * C125 + C47721 * C138) * C4757 + C166 * C4762 +
            C167 * C47802) *
               C10491 +
           (C10818 + C10819 + C10790 + C10791) * C47835) *
              C47535 * C1142 -
          ((C11285 + C11284 + C11297 + C11296) * C47835 +
           (C358 * C47802 + C359 * C4762 +
            (C113 * C305 + C47721 * C323) * C4757 +
            (C113 * C293 + C47721 * C306) * C4761) *
               C10491) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C4761 +
            (C113 * C308 + C47721 * C324) * C4757 + C360 * C4762 +
            C361 * C47802) *
               C10491 +
           ((C113 * C1287 + C47721 * C1302) * C4761 +
            (C113 * C1301 + C47721 * C1314) * C4757 + C1600 * C4762 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          (((C113 * C1704 + C47721 * C1708) * C47802 +
            (C113 * C1699 + C47721 * C1703) * C4762 +
            (C113 * C1702 + C47721 * C1707) * C4757 +
            (C113 * C1698 + C47721 * C1701) * C4761) *
               C47835 +
           (C1437 * C47802 + C1438 * C4762 +
            (C113 * C1158 + C47721 * C1168) * C4757 +
            (C113 * C1150 + C47721 * C1159) * C4761) *
               C10491) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C4761 +
            (C113 * C1161 + C47721 * C1169) * C4757 +
            (C113 * C1152 + C47721 * C1162) * C4762 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C10491 +
           ((C113 * C6569 + C47721 * C6571) * C4761 +
            (C113 * C6572 + C47721 * C6575) * C4757 +
            (C113 * C6570 + C47721 * C6573) * C4762 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47576 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47583 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C2880) *
              C47494 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47583 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47576 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C2880) *
              C47503 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47576 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47583 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47576 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C47583 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C47784 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C2880) *
              C2620 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C47576 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47583 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47861 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47857 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47847 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47535 * C47825) *
              C2620 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47857 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47861 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47847 +
           ((C17575 + C17574) * C16119 + (C17573 + C17572) * C16115 +
            (C16117 * C1148 + C16113 * C1155 + C16118 * C1153 +
             C47833 * C1164) *
                C16120 +
            (C16117 * C1154 + C16113 * C1166 + C16118 * C1165 +
             C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C2512 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47580) *
              C47860 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47580 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C2512) *
              C47853 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C2512 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47580) *
              C47840 +
          (((C16699 + C16698) * C16119 + (C16697 + C16696) * C16115 +
            (C16117 * C299 + C16113 * C318 + C16118 * C300 + C47833 * C319) *
                C16120 +
            (C16117 * C317 + C16113 * C329 + C16118 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47855 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47844 +
            ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                 C16119 +
             (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                 C16115 +
             (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
                C47738 * C47818) *
               C2512 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47844 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47855 -
            ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
             (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
              C16113 * C1311) *
                 C16115 +
             (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
              C16113 * C1296) *
                 C16119) *
                C47738 * C47818) *
               C47580) *
              C2620 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47844 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47855 -
            ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
             (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
                C47738 * C47818) *
               C2512 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47855 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47844 +
            ((C18491 + C18490) * C16119 + (C18489 + C18488) * C16115 +
             (C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
              C47833 * C1307) *
                 C16120 +
             (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
              C47833 * C1317) *
                 C47802) *
                C47738 * C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C2512 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C47580) *
              C47494 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C2512 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C47503 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C47784 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C2512 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C2512 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47580) *
              C47860 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47580 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C2512) *
              C47853 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C2512 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47580) *
              C47840 +
          (((C16699 + C16698) * C16119 + (C16697 + C16696) * C16115 +
            (C16117 * C299 + C16113 * C318 + C16118 * C300 + C47833 * C319) *
                C16120 +
            (C16117 * C317 + C16113 * C329 + C16118 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47861 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47857 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47847 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47535 * C47825) *
              C2620 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47857 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47861 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47847 +
           ((C17575 + C17574) * C16119 + (C17573 + C17572) * C16115 +
            (C16117 * C1148 + C16113 * C1155 + C16118 * C1153 +
             C47833 * C1164) *
                C16120 +
            (C16117 * C1154 + C16113 * C1166 + C16118 * C1165 +
             C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47576 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47583 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C3274 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C2880) *
              C47769 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C47576 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47583 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47618 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47625 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C3782) *
              C47576 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47625 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47618 -
           ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C3782) *
              C47583 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47618 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47625 +
           ((C16117 * C1288 + C16113 * C1303 + C16118 * C6083 +
             C47833 * C6085) *
                C16119 +
            (C16117 * C1304 + C16113 * C1315 + C16118 * C6086 +
             C47833 * C6089) *
                C16115 +
            (C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
             C47833 * C6087) *
                C16120 +
            (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
             C47833 * C6090) *
                C47802) *
               C47738 * C3782) *
              C2880) *
         C47489) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C3274 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47861 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47622 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C3274) *
              C47857 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C3274 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47622) *
              C47847 +
          (((C16117 * C1698 + C16113 * C1701 + C16118 * C6569 +
             C47833 * C6571) *
                C16119 +
            (C16117 * C1702 + C16113 * C1707 + C16118 * C6572 +
             C47833 * C6575) *
                C16115 +
            (C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
             C47833 * C6573) *
                C16120 +
            (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
             C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C2512 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47580) *
              C47851 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C2512 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C47838 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C3274 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C2512 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47862 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47859 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47850 -
           ((C18630 + C18631) * C47802 + (C18632 + C18633) * C16120 +
            (C16118 * C2406 + C47833 * C2411 + C16117 * C2010 +
             C16113 * C2020) *
                C16115 +
            (C16118 * C2402 + C47833 * C2405 + C16117 * C2002 +
             C16113 * C2011) *
                C16119) *
               C47738 * C47831) *
              C2512 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47859 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47862 -
           ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C47850 +
           ((C16117 * C2402 + C16113 * C2405 + C16118 * C7437 +
             C47833 * C7439) *
                C16119 +
            (C16117 * C2406 + C16113 * C2411 + C16118 * C7440 +
             C47833 * C7443) *
                C16115 +
            (C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
             C47833 * C7441) *
                C16120 +
            (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
             C47833 * C7444) *
                C47802) *
               C47738 * C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47618 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47625 +
            ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                 C16119 +
             (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                 C16115 +
             (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
                C47738 * C3782) *
               C2512 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47625 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47618 -
            ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
             (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
              C16113 * C1311) *
                 C16115 +
             (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
              C16113 * C1296) *
                 C16119) *
                C47738 * C3782) *
               C47580) *
              C47769 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47625 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47618 -
            ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
             (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
                C47738 * C3782) *
               C2512 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47618 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47625 +
            ((C18491 + C18490) * C16119 + (C18489 + C18488) * C16115 +
             (C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
              C47833 * C1307) *
                 C16120 +
             (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
              C47833 * C1317) *
                 C47802) *
                C47738 * C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C2512 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47580) *
              C47851 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C2512 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C47838 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C3274 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C2512 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C3274 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47861 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47622 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C3274) *
              C47857 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C3274 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47622) *
              C47847 +
          (((C16117 * C1698 + C16113 * C1701 + C16118 * C6569 +
             C47833 * C6571) *
                C16119 +
            (C16117 * C1702 + C16113 * C1707 + C16118 * C6572 +
             C47833 * C6575) *
                C16115 +
            (C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
             C47833 * C6573) *
                C16120 +
            (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
             C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1416 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1417 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C1418 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47535 * C47825) *
              C47769 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1417 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1416 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C1418 +
           ((C17575 + C17574) * C16119 + (C17573 + C17572) * C16115 +
            (C16117 * C1148 + C16113 * C1155 + C16118 * C1153 +
             C47833 * C1164) *
                C16120 +
            (C16117 * C1154 + C16113 * C1166 + C16118 * C1165 +
             C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47783 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47580) *
              C656 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47580 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47783) *
              C657 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47783 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47580) *
              C658 +
          (((C16699 + C16698) * C16119 + (C16697 + C16696) * C16115 +
            (C16117 * C299 + C16113 * C318 + C16118 * C300 + C47833 * C319) *
                C16120 +
            (C16117 * C317 + C16113 * C329 + C16118 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C1820 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C1821 +
            ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                 C16119 +
             (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                 C16115 +
             (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
                C47738 * C47818) *
               C47783 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C1821 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C1820 -
            ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
             (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
              C16113 * C1311) *
                 C16115 +
             (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
              C16113 * C1296) *
                 C16119) *
                C47738 * C47818) *
               C47580) *
              C47769 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C1821 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C1820 -
            ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
             (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
                C47738 * C47818) *
               C47783 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C1820 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C1821 +
            ((C18491 + C18490) * C16119 + (C18489 + C18488) * C16115 +
             (C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
              C47833 * C1307) *
                 C16120 +
             (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
              C47833 * C1317) *
                 C47802) *
                C47738 * C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47784 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C1416 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47622 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47784) *
              C1417 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47784 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47622) *
              C1418 +
          (((C16117 * C1698 + C16113 * C1701 + C16118 * C6569 +
             C47833 * C6571) *
                C16119 +
            (C16117 * C1702 + C16113 * C1707 + C16118 * C6572 +
             C47833 * C6575) *
                C16115 +
            (C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
             C47833 * C6573) *
                C16120 +
            (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
             C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47783 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C47580) *
              C288 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C47783 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C289 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C47784 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C47783 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C2284 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C2285 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C2286 -
           ((C18630 + C18631) * C47802 + (C18632 + C18633) * C16120 +
            (C16118 * C2406 + C47833 * C2411 + C16117 * C2010 +
             C16113 * C2020) *
                C16115 +
            (C16118 * C2402 + C47833 * C2405 + C16117 * C2002 +
             C16113 * C2011) *
                C16119) *
               C47738 * C47831) *
              C47783 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C2285 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C2284 -
           ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C2286 +
           ((C16117 * C2402 + C16113 * C2405 + C16118 * C7437 +
             C47833 * C7439) *
                C16119 +
            (C16117 * C2406 + C16113 * C2411 + C16118 * C7440 +
             C47833 * C7443) *
                C16115 +
            (C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
             C47833 * C7441) *
                C16120 +
            (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
             C47833 * C7444) *
                C47802) *
               C47738 * C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                   C16119 +
               (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                   C16115 +
               (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                  C47738 * C47535 * C47517 * C108 -
              ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
               (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                  C47738 * C47535 * C47517 * C109 +
              ((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
               (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                  C47738 * C47535 * C47517 * C110 -
              ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
               (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
                  C47738 * C47535 * C47517 * C111 +
              ((C16169 + C16168) * C16119 + (C16167 + C16166) * C16115 +
               (C16117 * C122 + C16113 * C135 + C16118 * C660 + C47833 * C661) *
                   C16120 +
               (C16117 * C134 + C16113 * C143 + C16118 * C662 + C47833 * C663) *
                   C47802) *
                  C47738 * C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16117 * C117 + C16113 * C124 + C16118 * C293 +
                 C47833 * C306) *
                    C16119 +
                (C16117 * C125 + C16113 * C138 + C16118 * C305 +
                 C47833 * C323) *
                    C16115 +
                (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                   C47738 * C47535 * C47854 -
               ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
                (C16118 * C308 + C47833 * C324 + C16117 * C305 +
                 C16113 * C323) *
                    C16115 +
                (C16118 * C294 + C47833 * C307 + C16117 * C293 +
                 C16113 * C306) *
                    C16119) *
                   C47738 * C47535 * C47842 +
               ((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
                 C47833 * C1159) *
                    C16119 +
                (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
                 C47833 * C1168) *
                    C16115 +
                (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                   C47738 * C47535 * C47815) *
                  C288 +
              (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
                (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                   C47738 * C47535 * C47842 -
               ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
                (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                   C47738 * C47535 * C47854 -
               ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
                (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                   C47738 * C47535 * C47815) *
                  C289 +
              (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
                (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                   C47738 * C47535 * C47854 -
               ((C16118 * C315 + C47833 * C328 + C16117 * C314 +
                 C16113 * C327) *
                    C47802 +
                (C16118 * C298 + C47833 * C316 + C16117 * C297 +
                 C16113 * C313) *
                    C16120 +
                (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                   C47738 * C47535 * C47842 +
               ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
                (C16117 * C298 + C16113 * C316 + C16118 * C1422 +
                 C47833 * C1423) *
                    C16120 +
                (C16117 * C315 + C16113 * C328 + C16118 * C1424 +
                 C47833 * C1425) *
                    C47802) *
                   C47738 * C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47855 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47517 * C288 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47844 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47855 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C47818) *
              C47517 * C289 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47855 -
           ((C16118 * C937 + C47833 * C944 + C16117 * C503 + C16113 * C516) *
                C47802 +
            (C16118 * C929 + C47833 * C938 + C16117 * C486 + C16113 * C502) *
                C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47844 +
           ((C16557 + C16556) * C16119 + (C16555 + C16554) * C16115 +
            (C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                C16120 +
            (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1075 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1075 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1074 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C1075 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C1142 -
          ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
           (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
               C16115 +
           (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
               C16119) *
              C47738 * C47535 * C1143 +
          ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
               C16119 +
           (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
               C16115 +
           (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
              C47738 * C47535 * C1144 -
          ((C16118 * C1163 + C47833 * C1170 + C16117 * C1156 + C16113 * C1167) *
               C47802 +
           (C16118 * C1152 + C47833 * C1162 + C16117 * C1149 + C16113 * C1157) *
               C16120 +
           (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 + C16113 * C1168) *
               C16115 +
           (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 + C16113 * C1159) *
               C16119) *
              C47738 * C47535 * C1145 +
          ((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 + C47833 * C5931) *
               C16119 +
           (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 + C47833 * C5935) *
               C16115 +
           (C16117 * C1152 + C16113 * C1162 + C16118 * C5930 + C47833 * C5933) *
               C16120 +
           (C16117 * C1163 + C16113 * C1170 + C16118 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47855 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C1074 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47844 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47855 -
           ((C16118 * C1306 + C47833 * C1316 + C16117 * C1293 +
             C16113 * C1310) *
                C47802 +
            (C16118 * C1289 + C47833 * C1305 + C16117 * C1283 +
             C16113 * C1294) *
                C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C47818) *
              C1075 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47855 -
           ((C16118 * C1704 + C47833 * C1708 + C16117 * C1299 +
             C16113 * C1313) *
                C47802 +
            (C16118 * C1699 + C47833 * C1703 + C16117 * C1286 +
             C16113 * C1300) *
                C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C1288 + C16113 * C1303 + C16118 * C6083 +
             C47833 * C6085) *
                C16119 +
            (C16117 * C1304 + C16113 * C1315 + C16118 * C6086 +
             C47833 * C6089) *
                C16115 +
            (C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
             C47833 * C6087) *
                C16120 +
            (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
             C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C1820 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47517 * C47851 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C1821 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C1820 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C47818) *
              C47517 * C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C1820 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C1821 +
           ((C16557 + C16556) * C16119 + (C16555 + C16554) * C16115 +
            (C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                C16120 +
            (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C1820 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47854 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C1821 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C1820 -
           ((C16118 * C1306 + C47833 * C1316 + C16117 * C1293 +
             C16113 * C1310) *
                C47802 +
            (C16118 * C1289 + C47833 * C1305 + C16117 * C1283 +
             C16113 * C1294) *
                C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C47818) *
              C47842 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C1820 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C1288 + C16113 * C1303 + C16118 * C6083 +
             C47833 * C6085) *
                C16119 +
            (C16117 * C1304 + C16113 * C1315 + C16118 * C6086 +
             C47833 * C6089) *
                C16115 +
            (C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
             C47833 * C6087) *
                C16120 +
            (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
             C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C1995 -
          ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
           (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
               C16115 +
           (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
               C16119) *
              C47738 * C1996 +
          ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
               C16119 +
           (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
               C16115 +
           (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
              C47738 * C1997 -
          ((C16118 * C2408 + C47833 * C2412 + C16117 * C2008 + C16113 * C2019) *
               C47802 +
           (C16118 * C2403 + C47833 * C2407 + C16117 * C2001 + C16113 * C2009) *
               C16120 +
           (C16118 * C2406 + C47833 * C2411 + C16117 * C2010 + C16113 * C2020) *
               C16115 +
           (C16118 * C2402 + C47833 * C2405 + C16117 * C2002 + C16113 * C2011) *
               C16119) *
              C47738 * C1998 +
          ((C16117 * C2003 + C16113 * C2012 + C16118 * C6951 + C47833 * C6953) *
               C16119 +
           (C16117 * C2013 + C16113 * C2021 + C16118 * C6954 + C47833 * C6957) *
               C16115 +
           (C16117 * C2004 + C16113 * C2014 + C16118 * C6952 + C47833 * C6955) *
               C16120 +
           (C16117 * C2015 + C16113 * C2022 + C16118 * C6956 + C47833 * C6958) *
               C47802) *
              C47738 * C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C1074 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C47784 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C47815) *
              C47769 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C1074 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C1075 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47784 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47517 * C656 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47622 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47784) *
              C47517 * C657 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47784 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47622) *
              C47517 * C658 +
          (((C16841 + C16840) * C16119 + (C16839 + C16838) * C16115 +
            (C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C16120 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C2284 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C2285 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C2286 -
           ((C18630 + C18631) * C47802 + (C18632 + C18633) * C16120 +
            (C16118 * C2406 + C47833 * C2411 + C16117 * C2010 +
             C16113 * C2020) *
                C16115 +
            (C16118 * C2402 + C47833 * C2405 + C16117 * C2002 +
             C16113 * C2011) *
                C16119) *
               C47738 * C47831) *
              C47517 * C47769 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C2285 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C2284 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C2286 +
           ((C18633 + C18632) * C16119 + (C18631 + C18630) * C16115 +
            (C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
             C47833 * C2409) *
                C16120 +
            (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
             C47833 * C2413) *
                C47802) *
               C47738 * C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47842 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47842 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47854 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16118 * C315 + C47833 * C328 + C16117 * C314 + C16113 * C327) *
                C47802 +
            (C16118 * C298 + C47833 * C316 + C16117 * C297 + C16113 * C313) *
                C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47842 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
           (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
              C47738 * C47535 * C47517 * C109 +
          ((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
           (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
           (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
              C47738 * C47535 * C47517 * C111 +
          ((C16169 + C16168) * C16119 + (C16167 + C16166) * C16115 +
           (C16117 * C122 + C16113 * C135 + C16118 * C660 + C47833 * C661) *
               C16120 +
           (C16117 * C134 + C16113 * C143 + C16118 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1075 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1075 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1074 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C1075 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C1142 -
          ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
           (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
               C16115 +
           (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
               C16119) *
              C47738 * C47535 * C1143 +
          ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
               C16119 +
           (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
               C16115 +
           (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
              C47738 * C47535 * C1144 -
          ((C16118 * C1163 + C47833 * C1170 + C16117 * C1156 + C16113 * C1167) *
               C47802 +
           (C16118 * C1152 + C47833 * C1162 + C16117 * C1149 + C16113 * C1157) *
               C16120 +
           (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 + C16113 * C1168) *
               C16115 +
           (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 + C16113 * C1159) *
               C16119) *
              C47738 * C47535 * C1145 +
          ((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 + C47833 * C5931) *
               C16119 +
           (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 + C47833 * C5935) *
               C16115 +
           (C16117 * C1152 + C16113 * C1162 + C16118 * C5930 + C47833 * C5933) *
               C16120 +
           (C16117 * C1163 + C16113 * C1170 + C16118 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C1820 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47517 * C47851 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C1821 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C1820 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C47818) *
              C47517 * C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C1820 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C1821 +
           ((C16557 + C16556) * C16119 + (C16555 + C16554) * C16115 +
            (C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                C16120 +
            (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C1820 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47854 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C1821 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C1820 -
           ((C16118 * C1306 + C47833 * C1316 + C16117 * C1293 +
             C16113 * C1310) *
                C47802 +
            (C16118 * C1289 + C47833 * C1305 + C16117 * C1283 +
             C16113 * C1294) *
                C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C47818) *
              C47842 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C1820 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C1821 +
           ((C16117 * C1288 + C16113 * C1303 + C16118 * C6083 +
             C47833 * C6085) *
                C16119 +
            (C16117 * C1304 + C16113 * C1315 + C16118 * C6086 +
             C47833 * C6089) *
                C16115 +
            (C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
             C47833 * C6087) *
                C16120 +
            (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
             C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47783 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47580) *
              C47494 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C47783 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C47503 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C3274 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C47783 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47618 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47625 +
            ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                 C16119 +
             (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                 C16115 +
             (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
                C47738 * C3782) *
               C47783 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47625 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47618 -
            ((C18488 + C18489) * C47802 + (C18490 + C18491) * C16120 +
             (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
              C16113 * C1311) *
                 C16115 +
             (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
              C16113 * C1296) *
                 C16119) *
                C47738 * C3782) *
               C47580) *
              C2620 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47625 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47618 -
            ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
             (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
                C47738 * C3782) *
               C47783 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47618 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47625 +
            ((C18491 + C18490) * C16119 + (C18489 + C18488) * C16115 +
             (C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
              C47833 * C1307) *
                 C16120 +
             (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
              C47833 * C1317) *
                 C47802) *
                C47738 * C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47854 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47842 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C3274 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C47815) *
              C2620 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C47854 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47842 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C3274 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47517 * C47860 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47622 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C3274) *
              C47517 * C47853 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C3274 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47622) *
              C47517 * C47840 +
          (((C16841 + C16840) * C16119 + (C16839 + C16838) * C16115 +
            (C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C16120 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47862 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47859 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47850 -
           ((C18630 + C18631) * C47802 + (C18632 + C18633) * C16120 +
            (C16118 * C2406 + C47833 * C2411 + C16117 * C2010 +
             C16113 * C2020) *
                C16115 +
            (C16118 * C2402 + C47833 * C2405 + C16117 * C2002 +
             C16113 * C2011) *
                C16119) *
               C47738 * C47831) *
              C47517 * C2620 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47859 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47862 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C47850 +
           ((C18633 + C18632) * C16119 + (C18631 + C18630) * C16115 +
            (C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
             C47833 * C2409) *
                C16120 +
            (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
             C47833 * C2413) *
                C47802) *
               C47738 * C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47618 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47625 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C3782) *
              C47517 * C47494 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47625 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47618 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C3782) *
              C47517 * C47503 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47618 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47625 +
           ((C16557 + C16556) * C16119 + (C16555 + C16554) * C16115 +
            (C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                C16120 +
            (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C3274 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47517 * C47860 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47622 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C3274) *
              C47517 * C47853 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C3274 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47622) *
              C47517 * C47840 +
          (((C16841 + C16840) * C16119 + (C16839 + C16838) * C16115 +
            (C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C16120 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C3274 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47854 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C3274) *
               C47842 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C3274 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C47815) *
              C2620 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C3274) *
               C47854 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C3274 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47842 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47783 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47580) *
              C656 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47580 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47783) *
              C657 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47783 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47580) *
              C658 +
          (((C16699 + C16698) * C16119 + (C16697 + C16696) * C16115 +
            (C16117 * C299 + C16113 * C318 + C16118 * C300 + C47833 * C319) *
                C16120 +
            (C16117 * C317 + C16113 * C329 + C16118 * C320 + C47833 * C330) *
                C47802) *
               C47738 * C47535 * C47580 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1416 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1417 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C1418 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47535 * C47825) *
              C47769 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1417 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1416 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C1418 +
           ((C17575 + C17574) * C16119 + (C17573 + C17572) * C16115 +
            (C16117 * C1148 + C16113 * C1155 + C16118 * C1153 +
             C47833 * C1164) *
                C16120 +
            (C16117 * C1154 + C16113 * C1166 + C16118 * C1165 +
             C47833 * C1171) *
                C47802) *
               C47738 * C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C47783 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C47580) *
              C288 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C47783 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C47580) *
              C289 +
          ((((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
             (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
                C47738 * C47784 -
            ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
             (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
                C47738 * C47622) *
               C47783 +
           (((C17059 + C17058) * C16119 + (C17057 + C17056) * C16115 +
             (C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C16120 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47802) *
                C47738 * C47622 -
            ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
             (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
                C47738 * C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47784 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C1416 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47622 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47784) *
              C1417 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47784 -
           ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47622) *
              C1418 +
          (((C16117 * C1698 + C16113 * C1701 + C16118 * C6569 +
             C47833 * C6571) *
                C16119 +
            (C16117 * C1702 + C16113 * C1707 + C16118 * C6572 +
             C47833 * C6575) *
                C16115 +
            (C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
             C47833 * C6573) *
                C16120 +
            (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
             C47833 * C6576) *
                C47802) *
               C47738 * C47622 -
           ((C17572 + C17573) * C47802 + (C17574 + C17575) * C16120 +
            (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C16115 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C16119) *
               C47738 * C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47842 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47842 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47854 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16118 * C315 + C47833 * C328 + C16117 * C314 + C16113 * C327) *
                C47802 +
            (C16118 * C298 + C47833 * C316 + C16117 * C297 + C16113 * C313) *
                C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47842 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
           (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
              C47738 * C47535 * C47517 * C109 +
          ((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
           (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
           (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
              C47738 * C47535 * C47517 * C111 +
          ((C16169 + C16168) * C16119 + (C16167 + C16166) * C16115 +
           (C16117 * C122 + C16113 * C135 + C16118 * C660 + C47833 * C661) *
               C16120 +
           (C16117 * C134 + C16113 * C143 + C16118 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47855 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C47517 * C288 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47844 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47855 -
           ((C16554 + C16555) * C47802 + (C16556 + C16557) * C16120 +
            (C16549 + C16548) * C16115 + (C16547 + C16546) * C16119) *
               C47738 * C47818) *
              C47517 * C289 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47855 -
           ((C16118 * C937 + C47833 * C944 + C16117 * C503 + C16113 * C516) *
                C47802 +
            (C16118 * C929 + C47833 * C938 + C16117 * C486 + C16113 * C502) *
                C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47844 +
           ((C16557 + C16556) * C16119 + (C16555 + C16554) * C16115 +
            (C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                C16120 +
            (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                C47802) *
               C47738 * C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1075 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1075 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1074 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C1075 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C1142 -
          ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
           (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
               C16115 +
           (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
               C16119) *
              C47738 * C47535 * C1143 +
          ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
               C16119 +
           (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
               C16115 +
           (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
              C47738 * C47535 * C1144 -
          ((C16118 * C1163 + C47833 * C1170 + C16117 * C1156 + C16113 * C1167) *
               C47802 +
           (C16118 * C1152 + C47833 * C1162 + C16117 * C1149 + C16113 * C1157) *
               C16120 +
           (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 + C16113 * C1168) *
               C16115 +
           (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 + C16113 * C1159) *
               C16119) *
              C47738 * C47535 * C1145 +
          ((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 + C47833 * C5931) *
               C16119 +
           (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 + C47833 * C5935) *
               C16115 +
           (C16117 * C1152 + C16113 * C1162 + C16118 * C5930 + C47833 * C5933) *
               C16120 +
           (C16117 * C1163 + C16113 * C1170 + C16118 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47855 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C483 + C16113 * C496 + C16118 * C1284 + C47833 * C1296) *
                C16119 +
            (C16117 * C497 + C16113 * C513 + C16118 * C1295 + C47833 * C1311) *
                C16115 +
            (C16546 + C16547) * C16120 + (C16548 + C16549) * C47802) *
               C47738 * C47818) *
              C1074 +
          (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                C16119 +
            (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                C16115 +
            (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
               C47738 * C47844 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47855 -
           ((C16118 * C1306 + C47833 * C1316 + C16117 * C1293 +
             C16113 * C1310) *
                C47802 +
            (C16118 * C1289 + C47833 * C1305 + C16117 * C1283 +
             C16113 * C1294) *
                C16120 +
            (C16118 * C1304 + C47833 * C1315 + C16117 * C1295 +
             C16113 * C1311) *
                C16115 +
            (C16118 * C1288 + C47833 * C1303 + C16117 * C1284 +
             C16113 * C1296) *
                C16119) *
               C47738 * C47818) *
              C1075 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47855 -
           ((C16118 * C1704 + C47833 * C1708 + C16117 * C1299 +
             C16113 * C1313) *
                C47802 +
            (C16118 * C1699 + C47833 * C1703 + C16117 * C1286 +
             C16113 * C1300) *
                C16120 +
            (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
             C16113 * C1314) *
                C16115 +
            (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
             C16113 * C1302) *
                C16119) *
               C47738 * C47844 +
           ((C16117 * C1288 + C16113 * C1303 + C16118 * C6083 +
             C47833 * C6085) *
                C16119 +
            (C16117 * C1304 + C16113 * C1315 + C16118 * C6086 +
             C47833 * C6089) *
                C16115 +
            (C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
             C47833 * C6087) *
                C16120 +
            (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
             C47833 * C6090) *
                C47802) *
               C47738 * C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47784 -
           ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
            (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                C16115 +
            (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                C16119) *
               C47738 * C47622) *
              C47517 * C656 +
          (((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
            (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
               C47738 * C47622 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47784) *
              C47517 * C657 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47784 -
           ((C16838 + C16839) * C47802 + (C16840 + C16841) * C16120 +
            (C16553 + C16552) * C16115 + (C16551 + C16550) * C16119) *
               C47738 * C47622) *
              C47517 * C658 +
          (((C16841 + C16840) * C16119 + (C16839 + C16838) * C16115 +
            (C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C16120 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47802) *
               C47738 * C47622 -
           ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
            (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
               C47738 * C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C16119 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C16115 +
             (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
                C47738 * C47784 -
            ((C16542 + C16543) * C47802 + (C16544 + C16545) * C16120 +
             (C16118 * C932 + C47833 * C941 + C16117 * C494 + C16113 * C512) *
                 C16115 +
             (C16118 * C926 + C47833 * C931 + C16117 * C482 + C16113 * C495) *
                 C16119) *
                C47738 * C47622) *
               C1074 +
           (((C16117 * C926 + C16113 * C931 + C16118 * C1287 + C47833 * C1302) *
                 C16119 +
             (C16117 * C932 + C16113 * C941 + C16118 * C1301 + C47833 * C1314) *
                 C16115 +
             (C17052 + C17053) * C16120 + (C17054 + C17055) * C47802) *
                C47738 * C47622 -
            ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
             (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C16115 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C16119) *
                C47738 * C47784) *
               C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C16119 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C16115 +
             (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
                C47738 * C47784 -
            ((C17778 + C17779) * C47802 + (C17780 + C17781) * C16120 +
             (C16118 * C1702 + C47833 * C1707 + C16117 * C1301 +
              C16113 * C1314) *
                 C16115 +
             (C16118 * C1698 + C47833 * C1701 + C16117 * C1287 +
              C16113 * C1302) *
                 C16119) *
                C47738 * C47622) *
               C47815) *
              C47769 +
          ((((C16545 + C16544) * C16119 + (C16543 + C16542) * C16115 +
             (C16550 + C16551) * C16120 + (C16552 + C16553) * C47802) *
                C47738 * C47622 -
            ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
             (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
                C47738 * C47784) *
               C1074 +
           (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
             (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
                C47738 * C47784 -
            ((C17056 + C17057) * C47802 + (C17058 + C17059) * C16120 +
             (C17055 + C17054) * C16115 + (C17053 + C17052) * C16119) *
                C47738 * C47622) *
               C1075 +
           (((C17781 + C17780) * C16119 + (C17779 + C17778) * C16115 +
             (C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C16120 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47802) *
                C47738 * C47622 -
            ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
             (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
                C47738 * C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C47517 * C108 -
          ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
           (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
              C47738 * C47535 * C47517 * C109 +
          ((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
           (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
              C47738 * C47535 * C47517 * C110 -
          ((C16166 + C16167) * C47802 + (C16168 + C16169) * C16120 +
           (C16165 + C16164) * C16115 + (C16163 + C16162) * C16119) *
              C47738 * C47535 * C47517 * C111 +
          ((C16169 + C16168) * C16119 + (C16167 + C16166) * C16115 +
           (C16117 * C122 + C16113 * C135 + C16118 * C660 + C47833 * C661) *
               C16120 +
           (C16117 * C134 + C16113 * C143 + C16118 * C662 + C47833 * C663) *
               C47802) *
              C47738 * C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C47842 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C288 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C47842 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C47854 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C289 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C47854 -
           ((C16118 * C315 + C47833 * C328 + C16117 * C314 + C16113 * C327) *
                C47802 +
            (C16118 * C298 + C47833 * C316 + C16117 * C297 + C16113 * C313) *
                C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C47842 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C16119 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C16115 +
            (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
            (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C16115 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C16119) *
               C47738 * C47535 * C1075 +
           ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C16119 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C16115 +
            (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
               C47738 * C47535 * C47815) *
              C47851 +
          (((C16351 + C16350) * C16119 + (C16349 + C16348) * C16115 +
            (C16356 + C16357) * C16120 + (C16358 + C16359) * C47802) *
               C47738 * C47535 * C1075 -
           ((C16158 + C16159) * C47802 + (C16160 + C16161) * C16120 +
            (C16157 + C16156) * C16115 + (C16155 + C16154) * C16119) *
               C47738 * C47535 * C1074 -
           ((C16360 + C16361) * C47802 + (C16362 + C16363) * C16120 +
            (C16355 + C16354) * C16115 + (C16353 + C16352) * C16119) *
               C47738 * C47535 * C47815) *
              C47838 +
          (((C16161 + C16160) * C16119 + (C16159 + C16158) * C16115 +
            (C16162 + C16163) * C16120 + (C16164 + C16165) * C47802) *
               C47738 * C47535 * C1074 -
           ((C16696 + C16697) * C47802 + (C16698 + C16699) * C16120 +
            (C16359 + C16358) * C16115 + (C16357 + C16356) * C16119) *
               C47738 * C47535 * C1075 +
           ((C16363 + C16362) * C16119 + (C16361 + C16360) * C16115 +
            (C16117 * C298 + C16113 * C316 + C16118 * C1422 + C47833 * C1423) *
                C16120 +
            (C16117 * C315 + C16113 * C328 + C16118 * C1424 + C47833 * C1425) *
                C47802) *
               C47738 * C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
               C16119 +
           (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
               C16115 +
           (C16154 + C16155) * C16120 + (C16156 + C16157) * C47802) *
              C47738 * C47535 * C1142 -
          ((C16348 + C16349) * C47802 + (C16350 + C16351) * C16120 +
           (C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
               C16115 +
           (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
               C16119) *
              C47738 * C47535 * C1143 +
          ((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
               C16119 +
           (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
               C16115 +
           (C16352 + C16353) * C16120 + (C16354 + C16355) * C47802) *
              C47738 * C47535 * C1144 -
          ((C16118 * C1163 + C47833 * C1170 + C16117 * C1156 + C16113 * C1167) *
               C47802 +
           (C16118 * C1152 + C47833 * C1162 + C16117 * C1149 + C16113 * C1157) *
               C16120 +
           (C16118 * C1161 + C47833 * C1169 + C16117 * C1158 + C16113 * C1168) *
               C16115 +
           (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 + C16113 * C1159) *
               C16119) *
              C47738 * C47535 * C1145 +
          ((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 + C47833 * C5931) *
               C16119 +
           (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 + C47833 * C5935) *
               C16115 +
           (C16117 * C1152 + C16113 * C1162 + C16118 * C5930 + C47833 * C5933) *
               C16120 +
           (C16117 * C1163 + C16113 * C1170 + C16118 * C5934 + C47833 * C5936) *
               C47802) *
              C47738 * C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47576 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47583 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C2880) *
                       C47494 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47583 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47576 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C2880) *
                       C47503 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47576 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47583 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C2880) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47576 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C47583 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C2880) *
                       C2620 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C47576 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47583 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C47784) *
                        C2880) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47861 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47857 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47847 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47535 * C47825) *
                       C2620 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47857 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47861 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47847 +
                    ((C21793 * C1149 + C21789 * C1157 + C21794 * C1152 +
                      C21790 * C1162 + C21795 * C5930 + C21791 * C5933) *
                         C21796 +
                     (C21793 * C1156 + C21789 * C1167 + C21794 * C1163 +
                      C21790 * C1170 + C21795 * C5934 + C21791 * C5936) *
                         C47464) *
                        C47738 * C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C2512 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C47860 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C2512) *
                       C47853 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C2512 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C47840 +
                   (((C21793 * C297 + C21789 * C313 + C21794 * C298 +
                      C21790 * C316 + C21795 * C1422 + C21791 * C1423) *
                         C21796 +
                     (C21793 * C314 + C21789 * C327 + C21794 * C315 +
                      C21790 * C328 + C21795 * C1424 + C21791 * C1425) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47535 * C2512) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47855 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47844 +
                     ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                       C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                          C21796 +
                      (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                       C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                          C47464) *
                         C47738 * C47818) *
                        C2512 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47844 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47855 -
                     ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                       C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                          C47464 +
                      (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                       C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                          C21796) *
                         C47738 * C47818) *
                        C47580) *
                       C2620 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47844 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47855 -
                     ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                       C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                          C47464 +
                      (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                       C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                          C21796) *
                         C47738 * C47818) *
                        C2512 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47855 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47844 +
                     ((C21793 * C1283 + C21789 * C1294 + C21794 * C1289 +
                       C21790 * C1305 + C21795 * C6084 + C21791 * C6087) *
                          C21796 +
                      (C21793 * C1293 + C21789 * C1310 + C21794 * C1306 +
                       C21790 * C1316 + C21795 * C6088 + C21791 * C6090) *
                          C47464) *
                         C47738 * C47818) *
                        C47580) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C47494 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C2512 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C47503 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C2512 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C47860 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C2512) *
                       C47853 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C2512 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C47840 +
                   (((C21793 * C297 + C21789 * C313 + C21794 * C298 +
                      C21790 * C316 + C21795 * C1422 + C21791 * C1423) *
                         C21796 +
                     (C21793 * C314 + C21789 * C327 + C21794 * C315 +
                      C21790 * C328 + C21795 * C1424 + C21791 * C1425) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47535 * C2512) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47861 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47857 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47847 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47535 * C47825) *
                       C2620 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47857 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47861 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47847 +
                    ((C21793 * C1149 + C21789 * C1157 + C21794 * C1152 +
                      C21790 * C1162 + C21795 * C5930 + C21791 * C5933) *
                         C21796 +
                     (C21793 * C1156 + C21789 * C1167 + C21794 * C1163 +
                      C21790 * C1170 + C21795 * C5934 + C21791 * C5936) *
                         C47464) *
                        C47738 * C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47576 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47583 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C2880) *
                       C47769 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C47576 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47583 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C3274) *
                        C2880) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47618 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47625 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C3782) *
                       C47576 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47625 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47618 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C3782) *
                       C47583 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47618 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47625 +
                    ((C21793 * C1288 + C21789 * C1303 + C21794 * C6083 +
                      C21790 * C6085 + C21795 * C22645 + C21791 * C22646) *
                         C21796 +
                     (C21793 * C1304 + C21789 * C1315 + C21794 * C6086 +
                      C21790 * C6089 + C21795 * C22647 + C21791 * C22648) *
                         C47464) *
                        C47738 * C3782) *
                       C2880) *
                  C47489) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47861 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C3274) *
                       C47857 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47622) *
                       C47847 +
                   (((C21793 * C1698 + C21789 * C1701 + C21794 * C6569 +
                      C21790 * C6571 + C21795 * C22991 + C21791 * C22992) *
                         C21796 +
                     (C21793 * C1702 + C21789 * C1707 + C21794 * C6572 +
                      C21790 * C6575 + C21795 * C22993 + C21791 * C22994) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C3274) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C47851 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C2512 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C47838 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47862 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47859 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47850 -
                    ((C21795 * C7440 + C21791 * C7443 + C21794 * C2406 +
                      C21790 * C2411 + C21793 * C2010 + C21789 * C2020) *
                         C47464 +
                     (C21795 * C7437 + C21791 * C7439 + C21794 * C2402 +
                      C21790 * C2405 + C21793 * C2002 + C21789 * C2011) *
                         C21796) *
                        C47738 * C47831) *
                       C2512 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47859 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47862 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C47850 +
                    ((C21793 * C2402 + C21789 * C2405 + C21794 * C7437 +
                      C21790 * C7439 + C21795 * C23623 + C21791 * C23624) *
                         C21796 +
                     (C21793 * C2406 + C21789 * C2411 + C21794 * C7440 +
                      C21790 * C7443 + C21795 * C23625 + C21791 * C23626) *
                         C47464) *
                        C47738 * C47831) *
                       C47580) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47618 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47625 +
                     ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                       C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                          C21796 +
                      (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                       C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                          C47464) *
                         C47738 * C3782) *
                        C2512 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47625 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47618 -
                     ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                       C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                          C47464 +
                      (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                       C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                          C21796) *
                         C47738 * C3782) *
                        C47580) *
                       C47769 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47625 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47618 -
                     ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                       C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                          C47464 +
                      (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                       C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                          C21796) *
                         C47738 * C3782) *
                        C2512 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47618 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47625 +
                     ((C21793 * C1283 + C21789 * C1294 + C21794 * C1289 +
                       C21790 * C1305 + C21795 * C6084 + C21791 * C6087) *
                          C21796 +
                      (C21793 * C1293 + C21789 * C1310 + C21794 * C1306 +
                       C21790 * C1316 + C21795 * C6088 + C21791 * C6090) *
                          C47464) *
                         C47738 * C3782) *
                        C47580) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C47851 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C2512 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C47838 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C2512 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47861 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C3274) *
                       C47857 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47622) *
                       C47847 +
                   (((C21793 * C1698 + C21789 * C1701 + C21794 * C6569 +
                      C21790 * C6571 + C21795 * C22991 + C21791 * C22992) *
                         C21796 +
                     (C21793 * C1702 + C21789 * C1707 + C21794 * C6572 +
                      C21790 * C6575 + C21795 * C22993 + C21791 * C22994) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C3274) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1416 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1417 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C1418 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47535 * C47825) *
                       C47769 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1417 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1416 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C1418 +
                    ((C21793 * C1149 + C21789 * C1157 + C21794 * C1152 +
                      C21790 * C1162 + C21795 * C5930 + C21791 * C5933) *
                         C21796 +
                     (C21793 * C1156 + C21789 * C1167 + C21794 * C1163 +
                      C21790 * C1170 + C21795 * C5934 + C21791 * C5936) *
                         C47464) *
                        C47738 * C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47783 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C656 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47783) *
                       C657 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47783 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C658 +
                   (((C21793 * C297 + C21789 * C313 + C21794 * C298 +
                      C21790 * C316 + C21795 * C1422 + C21791 * C1423) *
                         C21796 +
                     (C21793 * C314 + C21789 * C327 + C21794 * C315 +
                      C21790 * C328 + C21795 * C1424 + C21791 * C1425) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47535 * C47783) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C1820 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C1821 +
                     ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                       C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                          C21796 +
                      (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                       C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                          C47464) *
                         C47738 * C47818) *
                        C47783 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C1821 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C1820 -
                     ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                       C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                          C47464 +
                      (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                       C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                          C21796) *
                         C47738 * C47818) *
                        C47580) *
                       C47769 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C1821 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C1820 -
                     ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                       C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                          C47464 +
                      (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                       C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                          C21796) *
                         C47738 * C47818) *
                        C47783 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C1820 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C1821 +
                     ((C21793 * C1283 + C21789 * C1294 + C21794 * C1289 +
                       C21790 * C1305 + C21795 * C6084 + C21791 * C6087) *
                          C21796 +
                      (C21793 * C1293 + C21789 * C1310 + C21794 * C1306 +
                       C21790 * C1316 + C21795 * C6088 + C21791 * C6090) *
                          C47464) *
                         C47738 * C47818) *
                        C47580) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C1416 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47784) *
                       C1417 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47622) *
                       C1418 +
                   (((C21793 * C1698 + C21789 * C1701 + C21794 * C6569 +
                      C21790 * C6571 + C21795 * C22991 + C21791 * C22992) *
                         C21796 +
                     (C21793 * C1702 + C21789 * C1707 + C21794 * C6572 +
                      C21790 * C6575 + C21795 * C22993 + C21791 * C22994) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47784) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C288 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C47783 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C289 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C2284 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C2285 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C2286 -
                    ((C21795 * C7440 + C21791 * C7443 + C21794 * C2406 +
                      C21790 * C2411 + C21793 * C2010 + C21789 * C2020) *
                         C47464 +
                     (C21795 * C7437 + C21791 * C7439 + C21794 * C2402 +
                      C21790 * C2405 + C21793 * C2002 + C21789 * C2011) *
                         C21796) *
                        C47738 * C47831) *
                       C47783 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C2285 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C2284 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C2286 +
                    ((C21793 * C2402 + C21789 * C2405 + C21794 * C7437 +
                      C21790 * C7439 + C21795 * C23623 + C21791 * C23624) *
                         C21796 +
                     (C21793 * C2406 + C21789 * C2411 + C21794 * C7440 +
                      C21790 * C7443 + C21795 * C23625 + C21791 * C23626) *
                         C47464) *
                        C47738 * C47831) *
                       C47580) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                         C21790 * C306 + C21795 * C294 + C21791 * C307) *
                            C21796 +
                        (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                         C21790 * C323 + C21795 * C308 + C21791 * C324) *
                            C47464) *
                           C47738 * C47535 * C47517 * C108 -
                       ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                         C21790 * C322 + C21793 * C127 + C21789 * C139) *
                            C47464 +
                        (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                         C21790 * C304 + C21793 * C118 + C21789 * C126) *
                            C21796) *
                           C47738 * C47535 * C47517 * C109 +
                       ((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                         C21790 * C302 + C21795 * C296 + C21791 * C311) *
                            C21796 +
                        (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                         C21790 * C321 + C21795 * C312 + C21791 * C326) *
                            C47464) *
                           C47738 * C47535 * C47517 * C110 -
                       ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                         C21790 * C327 + C21793 * C130 + C21789 * C141) *
                            C47464 +
                        (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                         C21790 * C313 + C21793 * C120 + C21789 * C131) *
                            C21796) *
                           C47738 * C47535 * C47517 * C111 +
                       ((C21793 * C121 + C21789 * C132 + C21794 * C299 +
                         C21790 * C318 + C21795 * C300 + C21791 * C319) *
                            C21796 +
                        (C21793 * C133 + C21789 * C142 + C21794 * C317 +
                         C21790 * C329 + C21795 * C320 + C21791 * C330) *
                            C47464) *
                           C47738 * C47535 * C47517 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                          C21790 * C306 + C21795 * C294 + C21791 * C307) *
                             C21796 +
                         (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                          C21790 * C323 + C21795 * C308 + C21791 * C324) *
                             C47464) *
                            C47738 * C47535 * C47854 -
                        ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                          C21790 * C324 + C21793 * C305 + C21789 * C323) *
                             C47464 +
                         (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                          C21790 * C307 + C21793 * C293 + C21789 * C306) *
                             C21796) *
                            C47738 * C47535 * C47842 +
                        ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                          C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                             C21796 +
                         (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                          C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                             C47464) *
                            C47738 * C47535 * C47815) *
                           C288 +
                       (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                          C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                             C21796 +
                         (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                          C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                             C47464) *
                            C47738 * C47535 * C47842 -
                        ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                          C21790 * C322 + C21793 * C127 + C21789 * C139) *
                             C47464 +
                         (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                          C21790 * C304 + C21793 * C118 + C21789 * C126) *
                             C21796) *
                            C47738 * C47535 * C47854 -
                        ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                          C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                             C47464 +
                         (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                          C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                             C21796) *
                            C47738 * C47535 * C47815) *
                           C289 +
                       (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                          C21790 * C302 + C21795 * C296 + C21791 * C311) *
                             C21796 +
                         (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                          C21790 * C321 + C21795 * C312 + C21791 * C326) *
                             C47464) *
                            C47738 * C47535 * C47854 -
                        ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                          C21790 * C326 + C21793 * C301 + C21789 * C321) *
                             C47464 +
                         (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                          C21790 * C311 + C21793 * C291 + C21789 * C302) *
                             C21796) *
                            C47738 * C47535 * C47842 +
                        ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                          C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                             C21796 +
                         (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                          C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                             C47464) *
                            C47738 * C47535 * C47815) *
                           C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C288 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47844 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47855 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C47818) *
                       C47517 * C289 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C485 + C21789 * C500 + C21794 * C1282 +
                      C21790 * C1292 + C21795 * C1290 + C21791 * C1307) *
                         C21796 +
                     (C21793 * C501 + C21789 * C515 + C21794 * C1291 +
                      C21790 * C1309 + C21795 * C1308 + C21791 * C1317) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47851 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1075 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C1142 -
                   ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                     C21790 * C324 + C21793 * C305 + C21789 * C323) *
                        C47464 +
                    (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                     C21790 * C307 + C21793 * C293 + C21789 * C306) *
                        C21796) *
                       C47738 * C47535 * C1143 +
                   ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                     C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                        C21796 +
                    (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                     C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                        C47464) *
                       C47738 * C47535 * C1144 -
                   ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                     C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                        C47464 +
                    (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                     C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                        C21796) *
                       C47738 * C47535 * C1145 +
                   ((C21793 * C1151 + C21789 * C1160 + C21794 * C5929 +
                     C21790 * C5931 + C21795 * C22531 + C21791 * C22532) *
                        C21796 +
                    (C21793 * C1161 + C21789 * C1169 + C21794 * C5932 +
                     C21790 * C5935 + C21795 * C22533 + C21791 * C22534) *
                        C47464) *
                       C47738 * C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C1074 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47844 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47855 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C47818) *
                       C1075 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C1288 + C21789 * C1303 + C21794 * C6083 +
                      C21790 * C6085 + C21795 * C22645 + C21791 * C22646) *
                         C21796 +
                     (C21793 * C1304 + C21789 * C1315 + C21794 * C6086 +
                      C21790 * C6089 + C21795 * C22647 + C21791 * C22648) *
                         C47464) *
                        C47738 * C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47851 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C1821 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C1820 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C47818) *
                       C47517 * C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C485 + C21789 * C500 + C21794 * C1282 +
                      C21790 * C1292 + C21795 * C1290 + C21791 * C1307) *
                         C21796 +
                     (C21793 * C501 + C21789 * C515 + C21794 * C1291 +
                      C21790 * C1309 + C21795 * C1308 + C21791 * C1317) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47854 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C1821 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C1820 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C47818) *
                       C47842 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C1288 + C21789 * C1303 + C21794 * C6083 +
                      C21790 * C6085 + C21795 * C22645 + C21791 * C22646) *
                         C21796 +
                     (C21793 * C1304 + C21789 * C1315 + C21794 * C6086 +
                      C21790 * C6089 + C21795 * C22647 + C21791 * C22648) *
                         C47464) *
                        C47738 * C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C1995 -
                   ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                     C21790 * C941 + C21793 * C494 + C21789 * C512) *
                        C47464 +
                    (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                     C21790 * C931 + C21793 * C482 + C21789 * C495) *
                        C21796) *
                       C47738 * C1996 +
                   ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                     C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                        C21796 +
                    (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                     C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                        C47464) *
                       C47738 * C1997 -
                   ((C21795 * C7440 + C21791 * C7443 + C21794 * C2406 +
                     C21790 * C2411 + C21793 * C2010 + C21789 * C2020) *
                        C47464 +
                    (C21795 * C7437 + C21791 * C7439 + C21794 * C2402 +
                     C21790 * C2405 + C21793 * C2002 + C21789 * C2011) *
                        C21796) *
                       C47738 * C1998 +
                   ((C21793 * C2003 + C21789 * C2012 + C21794 * C6951 +
                     C21790 * C6953 + C21795 * C23277 + C21791 * C23278) *
                        C21796 +
                    (C21793 * C2013 + C21789 * C2021 + C21794 * C6954 +
                     C21790 * C6957 + C21795 * C23279 + C21791 * C23280) *
                        C47464) *
                       C47738 * C1999) *
                  C47517 * C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C1074 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C1075 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C47815) *
                       C47769 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C1074 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C1075 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C47784) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C656 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47784) *
                       C47517 * C657 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C658 +
                   (((C21793 * C486 + C21789 * C502 + C21794 * C929 +
                      C21790 * C938 + C21795 * C1584 + C21791 * C1585) *
                         C21796 +
                     (C21793 * C503 + C21789 * C516 + C21794 * C937 +
                      C21790 * C944 + C21795 * C1586 + C21791 * C1587) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47784) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C2284 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C2285 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C2286 -
                    ((C21795 * C7440 + C21791 * C7443 + C21794 * C2406 +
                      C21790 * C2411 + C21793 * C2010 + C21789 * C2020) *
                         C47464 +
                     (C21795 * C7437 + C21791 * C7439 + C21794 * C2402 +
                      C21790 * C2405 + C21793 * C2002 + C21789 * C2011) *
                         C21796) *
                        C47738 * C47831) *
                       C47517 * C47769 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C2285 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C2284 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C2286 +
                    ((C21793 * C2001 + C21789 * C2009 + C21794 * C2403 +
                      C21790 * C2407 + C21795 * C7438 + C21791 * C7441) *
                         C21796 +
                     (C21793 * C2008 + C21789 * C2019 + C21794 * C2408 +
                      C21790 * C2412 + C21795 * C7442 + C21791 * C7444) *
                         C47464) *
                        C47738 * C47831) *
                       C47517 * C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C288 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47842 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C289 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C47517 * C108 -
                   ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                     C21790 * C322 + C21793 * C127 + C21789 * C139) *
                        C47464 +
                    (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                     C21790 * C304 + C21793 * C118 + C21789 * C126) *
                        C21796) *
                       C47738 * C47535 * C47517 * C109 +
                   ((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                     C21790 * C302 + C21795 * C296 + C21791 * C311) *
                        C21796 +
                    (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                     C21790 * C321 + C21795 * C312 + C21791 * C326) *
                        C47464) *
                       C47738 * C47535 * C47517 * C110 -
                   ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                     C21790 * C327 + C21793 * C130 + C21789 * C141) *
                        C47464 +
                    (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                     C21790 * C313 + C21793 * C120 + C21789 * C131) *
                        C21796) *
                       C47738 * C47535 * C47517 * C111 +
                   ((C21793 * C121 + C21789 * C132 + C21794 * C299 +
                     C21790 * C318 + C21795 * C300 + C21791 * C319) *
                        C21796 +
                    (C21793 * C133 + C21789 * C142 + C21794 * C317 +
                     C21790 * C329 + C21795 * C320 + C21791 * C330) *
                        C47464) *
                       C47738 * C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47851 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1075 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C1142 -
                   ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                     C21790 * C324 + C21793 * C305 + C21789 * C323) *
                        C47464 +
                    (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                     C21790 * C307 + C21793 * C293 + C21789 * C306) *
                        C21796) *
                       C47738 * C47535 * C1143 +
                   ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                     C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                        C21796 +
                    (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                     C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                        C47464) *
                       C47738 * C47535 * C1144 -
                   ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                     C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                        C47464 +
                    (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                     C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                        C21796) *
                       C47738 * C47535 * C1145 +
                   ((C21793 * C1151 + C21789 * C1160 + C21794 * C5929 +
                     C21790 * C5931 + C21795 * C22531 + C21791 * C22532) *
                        C21796 +
                    (C21793 * C1161 + C21789 * C1169 + C21794 * C5932 +
                     C21790 * C5935 + C21795 * C22533 + C21791 * C22534) *
                        C47464) *
                       C47738 * C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47851 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C1821 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C1820 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C47818) *
                       C47517 * C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C485 + C21789 * C500 + C21794 * C1282 +
                      C21790 * C1292 + C21795 * C1290 + C21791 * C1307) *
                         C21796 +
                     (C21793 * C501 + C21789 * C515 + C21794 * C1291 +
                      C21790 * C1309 + C21795 * C1308 + C21791 * C1317) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47854 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C1821 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C1820 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C47818) *
                       C47842 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C1820 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C1821 +
                    ((C21793 * C1288 + C21789 * C1303 + C21794 * C6083 +
                      C21790 * C6085 + C21795 * C22645 + C21791 * C22646) *
                         C21796 +
                     (C21793 * C1304 + C21789 * C1315 + C21794 * C6086 +
                      C21790 * C6089 + C21795 * C22647 + C21791 * C22648) *
                         C47464) *
                        C47738 * C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C47494 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C47783 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C47503 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C3274) *
                        C47580) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47618 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47625 +
                     ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                       C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                          C21796 +
                      (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                       C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                          C47464) *
                         C47738 * C3782) *
                        C47783 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47625 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47618 -
                     ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                       C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                          C47464 +
                      (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                       C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                          C21796) *
                         C47738 * C3782) *
                        C47580) *
                       C2620 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47625 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47618 -
                     ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                       C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                          C47464 +
                      (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                       C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                          C21796) *
                         C47738 * C3782) *
                        C47783 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47618 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47625 +
                     ((C21793 * C1283 + C21789 * C1294 + C21794 * C1289 +
                       C21790 * C1305 + C21795 * C6084 + C21791 * C6087) *
                          C21796 +
                      (C21793 * C1293 + C21789 * C1310 + C21794 * C1306 +
                       C21790 * C1316 + C21795 * C6088 + C21791 * C6090) *
                          C47464) *
                         C47738 * C3782) *
                        C47580) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47854 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47842 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C47815) *
                       C2620 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C47854 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47842 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C3274) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C47860 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C3274) *
                       C47517 * C47853 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C47840 +
                   (((C21793 * C486 + C21789 * C502 + C21794 * C929 +
                      C21790 * C938 + C21795 * C1584 + C21791 * C1585) *
                         C21796 +
                     (C21793 * C503 + C21789 * C516 + C21794 * C937 +
                      C21790 * C944 + C21795 * C1586 + C21791 * C1587) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C3274) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47862 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47859 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47850 -
                    ((C21795 * C7440 + C21791 * C7443 + C21794 * C2406 +
                      C21790 * C2411 + C21793 * C2010 + C21789 * C2020) *
                         C47464 +
                     (C21795 * C7437 + C21791 * C7439 + C21794 * C2402 +
                      C21790 * C2405 + C21793 * C2002 + C21789 * C2011) *
                         C21796) *
                        C47738 * C47831) *
                       C47517 * C2620 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47859 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47862 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C47850 +
                    ((C21793 * C2001 + C21789 * C2009 + C21794 * C2403 +
                      C21790 * C2407 + C21795 * C7438 + C21791 * C7441) *
                         C21796 +
                     (C21793 * C2008 + C21789 * C2019 + C21794 * C2408 +
                      C21790 * C2412 + C21795 * C7442 + C21791 * C7444) *
                         C47464) *
                        C47738 * C47831) *
                       C47517 * C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47618 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47625 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C3782) *
                       C47517 * C47494 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47625 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47618 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C3782) *
                       C47517 * C47503 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47618 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47625 +
                    ((C21793 * C485 + C21789 * C500 + C21794 * C1282 +
                      C21790 * C1292 + C21795 * C1290 + C21791 * C1307) *
                         C21796 +
                     (C21793 * C501 + C21789 * C515 + C21794 * C1291 +
                      C21790 * C1309 + C21795 * C1308 + C21791 * C1317) *
                         C47464) *
                        C47738 * C3782) *
                       C47517 * C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C47860 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C3274) *
                       C47517 * C47853 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C3274 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C47840 +
                   (((C21793 * C486 + C21789 * C502 + C21794 * C929 +
                      C21790 * C938 + C21795 * C1584 + C21791 * C1585) *
                         C21796 +
                     (C21793 * C503 + C21789 * C516 + C21794 * C937 +
                      C21790 * C944 + C21795 * C1586 + C21791 * C1587) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C3274) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47854 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C3274) *
                        C47842 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C47815) *
                       C2620 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C3274) *
                        C47854 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C3274 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47842 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C3274) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47783 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C656 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47783) *
                       C657 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47783 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47580) *
                       C658 +
                   (((C21793 * C297 + C21789 * C313 + C21794 * C298 +
                      C21790 * C316 + C21795 * C1422 + C21791 * C1423) *
                         C21796 +
                     (C21793 * C314 + C21789 * C327 + C21794 * C315 +
                      C21790 * C328 + C21795 * C1424 + C21791 * C1425) *
                         C47464) *
                        C47738 * C47535 * C47580 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47535 * C47783) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1416 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1417 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C1418 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47535 * C47825) *
                       C47769 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1417 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1416 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C1418 +
                    ((C21793 * C1149 + C21789 * C1157 + C21794 * C1152 +
                      C21790 * C1162 + C21795 * C5930 + C21791 * C5933) *
                         C21796 +
                     (C21793 * C1156 + C21789 * C1167 + C21794 * C1163 +
                      C21790 * C1170 + C21795 * C5934 + C21791 * C5936) *
                         C47464) *
                        C47738 * C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C288 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C47783 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C47580) *
                       C289 +
                   ((((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                       C21790 * C302 + C21795 * C296 + C21791 * C311) *
                          C21796 +
                      (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                       C21790 * C321 + C21795 * C312 + C21791 * C326) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                       C21790 * C943 + C21793 * C490 + C21789 * C510) *
                          C47464 +
                      (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                       C21790 * C935 + C21793 * C480 + C21789 * C491) *
                          C21796) *
                         C47738 * C47622) *
                        C47783 +
                    (((C21793 * C928 + C21789 * C935 + C21794 * C1285 +
                       C21790 * C1298 + C21795 * C1700 + C21791 * C1705) *
                          C21796 +
                      (C21793 * C936 + C21789 * C943 + C21794 * C1297 +
                       C21790 * C1312 + C21795 * C1706 + C21791 * C1709) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                       C21790 * C326 + C21793 * C301 + C21789 * C321) *
                          C47464 +
                      (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                       C21790 * C311 + C21793 * C291 + C21789 * C302) *
                          C21796) *
                         C47738 * C47784) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C1416 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47784) *
                       C1417 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47622) *
                       C1418 +
                   (((C21793 * C1698 + C21789 * C1701 + C21794 * C6569 +
                      C21790 * C6571 + C21795 * C22991 + C21791 * C22992) *
                         C21796 +
                     (C21793 * C1702 + C21789 * C1707 + C21794 * C6572 +
                      C21790 * C6575 + C21795 * C22993 + C21791 * C22994) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                      C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                         C47464 +
                     (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                      C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                         C21796) *
                        C47738 * C47784) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C288 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47842 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C289 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C47517 * C108 -
                   ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                     C21790 * C322 + C21793 * C127 + C21789 * C139) *
                        C47464 +
                    (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                     C21790 * C304 + C21793 * C118 + C21789 * C126) *
                        C21796) *
                       C47738 * C47535 * C47517 * C109 +
                   ((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                     C21790 * C302 + C21795 * C296 + C21791 * C311) *
                        C21796 +
                    (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                     C21790 * C321 + C21795 * C312 + C21791 * C326) *
                        C47464) *
                       C47738 * C47535 * C47517 * C110 -
                   ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                     C21790 * C327 + C21793 * C130 + C21789 * C141) *
                        C47464 +
                    (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                     C21790 * C313 + C21793 * C120 + C21789 * C131) *
                        C21796) *
                       C47738 * C47535 * C47517 * C111 +
                   ((C21793 * C121 + C21789 * C132 + C21794 * C299 +
                     C21790 * C318 + C21795 * C300 + C21791 * C319) *
                        C21796 +
                    (C21793 * C133 + C21789 * C142 + C21794 * C317 +
                     C21790 * C329 + C21795 * C320 + C21791 * C330) *
                        C47464) *
                       C47738 * C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C288 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47844 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47855 -
                    ((C21795 * C1306 + C21791 * C1316 + C21794 * C1293 +
                      C21790 * C1310 + C21793 * C499 + C21789 * C514) *
                         C47464 +
                     (C21795 * C1289 + C21791 * C1305 + C21794 * C1283 +
                      C21790 * C1294 + C21793 * C484 + C21789 * C498) *
                         C21796) *
                        C47738 * C47818) *
                       C47517 * C289 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C485 + C21789 * C500 + C21794 * C1282 +
                      C21790 * C1292 + C21795 * C1290 + C21791 * C1307) *
                         C21796 +
                     (C21793 * C501 + C21789 * C515 + C21794 * C1291 +
                      C21790 * C1309 + C21795 * C1308 + C21791 * C1317) *
                         C47464) *
                        C47738 * C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47851 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1075 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C1142 -
                   ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                     C21790 * C324 + C21793 * C305 + C21789 * C323) *
                        C47464 +
                    (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                     C21790 * C307 + C21793 * C293 + C21789 * C306) *
                        C21796) *
                       C47738 * C47535 * C1143 +
                   ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                     C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                        C21796 +
                    (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                     C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                        C47464) *
                       C47738 * C47535 * C1144 -
                   ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                     C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                        C47464 +
                    (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                     C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                        C21796) *
                       C47738 * C47535 * C1145 +
                   ((C21793 * C1151 + C21789 * C1160 + C21794 * C5929 +
                     C21790 * C5931 + C21795 * C22531 + C21791 * C22532) *
                        C21796 +
                    (C21793 * C1161 + C21789 * C1169 + C21794 * C5932 +
                     C21790 * C5935 + C21795 * C22533 + C21791 * C22534) *
                        C47464) *
                       C47738 * C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C483 + C21789 * C496 + C21794 * C1284 +
                      C21790 * C1296 + C21795 * C1288 + C21791 * C1303) *
                         C21796 +
                     (C21793 * C497 + C21789 * C513 + C21794 * C1295 +
                      C21790 * C1311 + C21795 * C1304 + C21791 * C1315) *
                         C47464) *
                        C47738 * C47818) *
                       C1074 +
                   (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                      C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                         C21796 +
                     (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                      C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                         C47464) *
                        C47738 * C47844 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47855 -
                    ((C21795 * C6086 + C21791 * C6089 + C21794 * C1304 +
                      C21790 * C1315 + C21793 * C1295 + C21789 * C1311) *
                         C47464 +
                     (C21795 * C6083 + C21791 * C6085 + C21794 * C1288 +
                      C21790 * C1303 + C21793 * C1284 + C21789 * C1296) *
                         C21796) *
                        C47738 * C47818) *
                       C1075 +
                   (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47855 -
                    ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                      C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                         C47464 +
                     (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                      C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                         C21796) *
                        C47738 * C47844 +
                    ((C21793 * C1288 + C21789 * C1303 + C21794 * C6083 +
                      C21790 * C6085 + C21795 * C22645 + C21791 * C22646) *
                         C21796 +
                     (C21793 * C1304 + C21789 * C1315 + C21794 * C6086 +
                      C21790 * C6089 + C21795 * C22647 + C21791 * C22648) *
                         C47464) *
                        C47738 * C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                      C21790 * C941 + C21793 * C494 + C21789 * C512) *
                         C47464 +
                     (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                      C21790 * C931 + C21793 * C482 + C21789 * C495) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C656 +
                   (((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                      C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                         C21796 +
                     (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                      C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47784) *
                       C47517 * C657 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47784 -
                    ((C21795 * C1297 + C21791 * C1312 + C21794 * C936 +
                      C21790 * C943 + C21793 * C490 + C21789 * C510) *
                         C47464 +
                     (C21795 * C1285 + C21791 * C1298 + C21794 * C928 +
                      C21790 * C935 + C21793 * C480 + C21789 * C491) *
                         C21796) *
                        C47738 * C47622) *
                       C47517 * C658 +
                   (((C21793 * C486 + C21789 * C502 + C21794 * C929 +
                      C21790 * C938 + C21795 * C1584 + C21791 * C1585) *
                         C21796 +
                     (C21793 * C503 + C21789 * C516 + C21794 * C937 +
                      C21790 * C944 + C21795 * C1586 + C21791 * C1587) *
                         C47464) *
                        C47738 * C47622 -
                    ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                      C21790 * C327 + C21793 * C130 + C21789 * C141) *
                         C47464 +
                     (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                      C21790 * C313 + C21793 * C120 + C21789 * C131) *
                         C21796) *
                        C47738 * C47784) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                       C21790 * C306 + C21795 * C294 + C21791 * C307) *
                          C21796 +
                      (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                       C21790 * C323 + C21795 * C308 + C21791 * C324) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1301 + C21791 * C1314 + C21794 * C932 +
                       C21790 * C941 + C21793 * C494 + C21789 * C512) *
                          C47464 +
                      (C21795 * C1287 + C21791 * C1302 + C21794 * C926 +
                       C21790 * C931 + C21793 * C482 + C21789 * C495) *
                          C21796) *
                         C47738 * C47622) *
                        C1074 +
                    (((C21793 * C926 + C21789 * C931 + C21794 * C1287 +
                       C21790 * C1302 + C21795 * C1698 + C21791 * C1701) *
                          C21796 +
                      (C21793 * C932 + C21789 * C941 + C21794 * C1301 +
                       C21790 * C1314 + C21795 * C1702 + C21791 * C1707) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                       C21790 * C324 + C21793 * C305 + C21789 * C323) *
                          C47464 +
                      (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                       C21790 * C307 + C21793 * C293 + C21789 * C306) *
                          C21796) *
                         C47738 * C47784) *
                        C1075 +
                    (((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                       C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                          C21796 +
                      (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                       C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C6572 + C21791 * C6575 + C21794 * C1702 +
                       C21790 * C1707 + C21793 * C1301 + C21789 * C1314) *
                          C47464 +
                      (C21795 * C6569 + C21791 * C6571 + C21794 * C1698 +
                       C21790 * C1701 + C21793 * C1287 + C21789 * C1302) *
                          C21796) *
                         C47738 * C47622) *
                        C47815) *
                       C47769 +
                   ((((C21793 * C481 + C21789 * C493 + C21794 * C927 +
                       C21790 * C933 + C21795 * C1286 + C21791 * C1300) *
                          C21796 +
                      (C21793 * C492 + C21789 * C511 + C21794 * C934 +
                       C21790 * C942 + C21795 * C1299 + C21791 * C1313) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                       C21790 * C322 + C21793 * C127 + C21789 * C139) *
                          C47464 +
                      (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                       C21790 * C304 + C21793 * C118 + C21789 * C126) *
                          C21796) *
                         C47738 * C47784) *
                        C1074 +
                    (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                       C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                          C21796 +
                      (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                       C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                          C47464) *
                         C47738 * C47784 -
                     ((C21795 * C1704 + C21791 * C1708 + C21794 * C1299 +
                       C21790 * C1313 + C21793 * C934 + C21789 * C942) *
                          C47464 +
                      (C21795 * C1699 + C21791 * C1703 + C21794 * C1286 +
                       C21790 * C1300 + C21793 * C927 + C21789 * C933) *
                          C21796) *
                         C47738 * C47622) *
                        C1075 +
                    (((C21793 * C1286 + C21789 * C1300 + C21794 * C1699 +
                       C21790 * C1703 + C21795 * C6570 + C21791 * C6573) *
                          C21796 +
                      (C21793 * C1299 + C21789 * C1313 + C21794 * C1704 +
                       C21790 * C1708 + C21795 * C6574 + C21791 * C6576) *
                          C47464) *
                         C47738 * C47622 -
                     ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                       C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                          C47464 +
                      (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                       C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                          C21796) *
                         C47738 * C47784) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C47517 * C108 -
                   ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                     C21790 * C322 + C21793 * C127 + C21789 * C139) *
                        C47464 +
                    (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                     C21790 * C304 + C21793 * C118 + C21789 * C126) *
                        C21796) *
                       C47738 * C47535 * C47517 * C109 +
                   ((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                     C21790 * C302 + C21795 * C296 + C21791 * C311) *
                        C21796 +
                    (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                     C21790 * C321 + C21795 * C312 + C21791 * C326) *
                        C47464) *
                       C47738 * C47535 * C47517 * C110 -
                   ((C21795 * C315 + C21791 * C328 + C21794 * C314 +
                     C21790 * C327 + C21793 * C130 + C21789 * C141) *
                        C47464 +
                    (C21795 * C298 + C21791 * C316 + C21794 * C297 +
                     C21790 * C313 + C21793 * C120 + C21789 * C131) *
                        C21796) *
                       C47738 * C47535 * C47517 * C111 +
                   ((C21793 * C121 + C21789 * C132 + C21794 * C299 +
                     C21790 * C318 + C21795 * C300 + C21791 * C319) *
                        C21796 +
                    (C21793 * C133 + C21789 * C142 + C21794 * C317 +
                     C21790 * C329 + C21795 * C320 + C21791 * C330) *
                        C47464) *
                       C47738 * C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C288 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C47842 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C289 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C47854 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C47842 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                      C21790 * C306 + C21795 * C294 + C21791 * C307) *
                         C21796 +
                     (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                      C21790 * C323 + C21795 * C308 + C21791 * C324) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                      C21790 * C324 + C21793 * C305 + C21789 * C323) *
                         C47464 +
                     (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                      C21790 * C307 + C21793 * C293 + C21789 * C306) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                      C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                         C21796 +
                     (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                      C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47851 +
                   (((C21793 * C292 + C21789 * C304 + C21794 * C295 +
                      C21790 * C309 + C21795 * C1149 + C21791 * C1157) *
                         C21796 +
                     (C21793 * C303 + C21789 * C322 + C21794 * C310 +
                      C21790 * C325 + C21795 * C1156 + C21791 * C1167) *
                         C47464) *
                        C47738 * C47535 * C1075 -
                    ((C21795 * C310 + C21791 * C325 + C21794 * C303 +
                      C21790 * C322 + C21793 * C127 + C21789 * C139) *
                         C47464 +
                     (C21795 * C295 + C21791 * C309 + C21794 * C292 +
                      C21790 * C304 + C21793 * C118 + C21789 * C126) *
                         C21796) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1163 + C21791 * C1170 + C21794 * C1156 +
                      C21790 * C1167 + C21793 * C310 + C21789 * C325) *
                         C47464 +
                     (C21795 * C1152 + C21791 * C1162 + C21794 * C1149 +
                      C21790 * C1157 + C21793 * C295 + C21789 * C309) *
                         C21796) *
                        C47738 * C47535 * C47815) *
                       C47838 +
                   (((C21793 * C119 + C21789 * C128 + C21794 * C291 +
                      C21790 * C302 + C21795 * C296 + C21791 * C311) *
                         C21796 +
                     (C21793 * C129 + C21789 * C140 + C21794 * C301 +
                      C21790 * C321 + C21795 * C312 + C21791 * C326) *
                         C47464) *
                        C47738 * C47535 * C1074 -
                    ((C21795 * C1154 + C21791 * C1166 + C21794 * C312 +
                      C21790 * C326 + C21793 * C301 + C21789 * C321) *
                         C47464 +
                     (C21795 * C1148 + C21791 * C1155 + C21794 * C296 +
                      C21790 * C311 + C21793 * C291 + C21789 * C302) *
                         C21796) *
                        C47738 * C47535 * C1075 +
                    ((C21793 * C296 + C21789 * C311 + C21794 * C1148 +
                      C21790 * C1155 + C21795 * C1153 + C21791 * C1164) *
                         C21796 +
                     (C21793 * C312 + C21789 * C326 + C21794 * C1154 +
                      C21790 * C1166 + C21795 * C1165 + C21791 * C1171) *
                         C47464) *
                        C47738 * C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21793 * C117 + C21789 * C124 + C21794 * C293 +
                     C21790 * C306 + C21795 * C294 + C21791 * C307) *
                        C21796 +
                    (C21793 * C125 + C21789 * C138 + C21794 * C305 +
                     C21790 * C323 + C21795 * C308 + C21791 * C324) *
                        C47464) *
                       C47738 * C47535 * C1142 -
                   ((C21795 * C1158 + C21791 * C1168 + C21794 * C308 +
                     C21790 * C324 + C21793 * C305 + C21789 * C323) *
                        C47464 +
                    (C21795 * C1150 + C21791 * C1159 + C21794 * C294 +
                     C21790 * C307 + C21793 * C293 + C21789 * C306) *
                        C21796) *
                       C47738 * C47535 * C1143 +
                   ((C21793 * C294 + C21789 * C307 + C21794 * C1150 +
                     C21790 * C1159 + C21795 * C1151 + C21791 * C1160) *
                        C21796 +
                    (C21793 * C308 + C21789 * C324 + C21794 * C1158 +
                     C21790 * C1168 + C21795 * C1161 + C21791 * C1169) *
                        C47464) *
                       C47738 * C47535 * C1144 -
                   ((C21795 * C5932 + C21791 * C5935 + C21794 * C1161 +
                     C21790 * C1169 + C21793 * C1158 + C21789 * C1168) *
                        C47464 +
                    (C21795 * C5929 + C21791 * C5931 + C21794 * C1151 +
                     C21790 * C1160 + C21793 * C1150 + C21789 * C1159) *
                        C21796) *
                       C47738 * C47535 * C1145 +
                   ((C21793 * C1151 + C21789 * C1160 + C21794 * C5929 +
                     C21790 * C5931 + C21795 * C22531 + C21791 * C22532) *
                        C21796 +
                    (C21793 * C1161 + C21789 * C1169 + C21794 * C5932 +
                     C21790 * C5935 + C21795 * C22533 + C21791 * C22534) *
                        C47464) *
                       C47738 * C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C47576 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47583 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47535 * C2880) *
              C47494 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47583 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47576 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C2880) *
              C47503 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47576 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47583 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47576 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C47583 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C47784 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C2880) *
              C2620 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C47576 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47583 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C47861 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47857 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47535 * C47847 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47535 * C47825) *
              C2620 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47857 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47861 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47847 +
           (((C17575 + C17574) * C21796 + (C17573 + C17572) * C47464) * C10491 +
            ((C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
              C47833 * C6573) *
                 C21796 +
             (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
              C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47580) *
              C47860 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C2512) *
              C47853 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47580) *
              C47840 +
          ((((C16699 + C16698) * C21796 + (C16697 + C16696) * C47464) * C10491 +
            ((C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C21796 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47855 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47844 +
            (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) *
                 C10491 +
             ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                 C47835) *
                C47818) *
               C2512 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47844 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47855 -
            (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) *
                 C47835 +
             ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                 C10491) *
                C47818) *
               C47580) *
              C2620 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47844 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47855 -
            (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) *
                 C47835 +
             ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                 C10491) *
                C47818) *
               C2512 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47855 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47844 +
            (((C18491 + C18490) * C21796 + (C18489 + C18488) * C47464) *
                 C10491 +
             ((C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
               C47833 * C7441) *
                  C21796 +
              (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
               C47833 * C7444) *
                  C47464) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C47494 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C2512 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C47503 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C47784 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47580) *
              C47860 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C2512) *
              C47853 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47580) *
              C47840 +
          ((((C16699 + C16698) * C21796 + (C16697 + C16696) * C47464) * C10491 +
            ((C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C21796 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C47861 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47857 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47535 * C47847 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47535 * C47825) *
              C2620 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47857 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47861 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47847 +
           (((C17575 + C17574) * C21796 + (C17573 + C17572) * C47464) * C10491 +
            ((C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
              C47833 * C6573) *
                 C21796 +
             (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
              C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47576 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47583 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C3274 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C2880) *
              C47769 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C47576 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47583 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47618 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47625 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C3782) *
              C47576 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47625 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47618 -
           (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) * C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C3782) *
              C47583 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47618 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47625 +
           (((C27133 + C27132) * C21796 + (C27131 + C27130) * C47464) * C10491 +
            ((C16117 * C7437 + C16113 * C7439 + C16118 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C16117 * C7440 + C16113 * C7443 + C16118 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C3782) *
              C2880) *
         C47489) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C3274 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47861 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47622 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C3274) *
              C47857 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C3274 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47622) *
              C47847 +
          ((((C27596 + C27597) * C21796 + (C27598 + C27599) * C47464) * C10491 +
            ((C16117 * C6083 + C16113 * C6085 + C16118 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C16117 * C6086 + C16113 * C6089 + C16118 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C47851 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C2512 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C47838 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C3274 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47862 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47859 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C47850 -
           (((C27998 + C27999) * C47464 + (C28000 + C28001) * C21796) * C47835 +
            ((C27997 + C27996) * C47464 + (C27995 + C27994) * C21796) *
                C10491) *
               C47831) *
              C2512 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47859 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47862 -
           (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) * C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C47850 +
           (((C28467 + C28466) * C21796 + (C28465 + C28464) * C47464) * C10491 +
            ((C16117 * C6951 + C16113 * C6953 + C16118 * C23277 +
              C47833 * C23278) *
                 C21796 +
             (C16117 * C6954 + C16113 * C6957 + C16118 * C23279 +
              C47833 * C23280) *
                 C47464) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47618 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47625 +
            (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) *
                 C10491 +
             ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                 C47835) *
                C3782) *
               C2512 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47625 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47618 -
            (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) *
                 C47835 +
             ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                 C10491) *
                C3782) *
               C47580) *
              C47769 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47625 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47618 -
            (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) *
                 C47835 +
             ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                 C10491) *
                C3782) *
               C2512 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47618 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47625 +
            (((C18491 + C18490) * C21796 + (C18489 + C18488) * C47464) *
                 C10491 +
             ((C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
               C47833 * C7441) *
                  C21796 +
              (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
               C47833 * C7444) *
                  C47464) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C47851 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C2512 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C47838 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C3274 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C2512 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C3274 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47861 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47622 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C3274) *
              C47857 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C3274 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47622) *
              C47847 +
          ((((C27596 + C27597) * C21796 + (C27598 + C27599) * C47464) * C10491 +
            ((C16117 * C6083 + C16113 * C6085 + C16118 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C16117 * C6086 + C16113 * C6089 + C16118 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1416 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1417 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47535 * C1418 -
           (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
              C16113 * C1707) *
                 C47464 +
             (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
              C16113 * C1701) *
                 C21796) *
                C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47535 * C47825) *
              C47769 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1417 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1416 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C1418 +
           (((C17575 + C17574) * C21796 + (C17573 + C17572) * C47464) * C10491 +
            ((C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
              C47833 * C6573) *
                 C21796 +
             (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
              C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 + C16113 * C941) *
                 C47464 +
             (C16118 * C1287 + C47833 * C1302 + C16117 * C926 + C16113 * C931) *
                 C21796) *
                C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47580) *
              C656 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47783) *
              C657 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47580) *
              C658 +
          ((((C16699 + C16698) * C21796 + (C16697 + C16696) * C47464) * C10491 +
            ((C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C21796 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C1820 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C1821 +
            (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) *
                 C10491 +
             ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                 C47835) *
                C47818) *
               C47783 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C1821 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C1820 -
            (((C16118 * C7440 + C47833 * C7443 + C16117 * C2406 +
               C16113 * C2411) *
                  C47464 +
              (C16118 * C7437 + C47833 * C7439 + C16117 * C2402 +
               C16113 * C2405) *
                  C21796) *
                 C47835 +
             ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                 C10491) *
                C47818) *
               C47580) *
              C47769 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C1821 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C1820 -
            (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) *
                 C47835 +
             ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                 C10491) *
                C47818) *
               C47783 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C1820 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C1821 +
            (((C18491 + C18490) * C21796 + (C18489 + C18488) * C47464) *
                 C10491 +
             ((C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
               C47833 * C7441) *
                  C21796 +
              (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
               C47833 * C7444) *
                  C47464) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47784 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C1416 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47622 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47784) *
              C1417 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47784 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47622) *
              C1418 +
          ((((C27596 + C27597) * C21796 + (C27598 + C27599) * C47464) * C10491 +
            ((C16117 * C6083 + C16113 * C6085 + C16118 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C16117 * C6086 + C16113 * C6089 + C16118 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C16117 * C1284 + C16113 * C1296 + C16118 * C1288 +
               C47833 * C1303) *
                  C21796 +
              (C16117 * C1295 + C16113 * C1311 + C16118 * C1304 +
               C47833 * C1315) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C288 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C47783 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C289 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C47784 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C2284 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C2285 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C2286 -
           (((C27998 + C27999) * C47464 + (C28000 + C28001) * C21796) * C47835 +
            ((C27997 + C27996) * C47464 + (C27995 + C27994) * C21796) *
                C10491) *
               C47831) *
              C47783 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C2285 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C2284 -
           (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) * C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C2286 +
           (((C28467 + C28466) * C21796 + (C28465 + C28464) * C47464) * C10491 +
            ((C16117 * C6951 + C16113 * C6953 + C16118 * C23277 +
              C47833 * C23278) *
                 C21796 +
             (C16117 * C6954 + C16113 * C6957 + C16118 * C23279 +
              C47833 * C23280) *
                 C47464) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16117 * C117 + C16113 * C124 + C16118 * C293 +
                 C47833 * C306) *
                    C21796 +
                (C16117 * C125 + C16113 * C138 + C16118 * C305 +
                 C47833 * C323) *
                    C47464) *
                   C10491 +
               ((C16117 * C482 + C16113 * C495 + C16118 * C926 +
                 C47833 * C931) *
                    C21796 +
                (C16117 * C494 + C16113 * C512 + C16118 * C932 +
                 C47833 * C941) *
                    C47464) *
                   C47835) *
                  C47535 * C47517 * C108 -
              (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                   C47835 +
               ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                   C10491) *
                  C47535 * C47517 * C109 +
              (((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                   C10491 +
               ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                   C47835) *
                  C47535 * C47517 * C110 -
              (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) *
                   C47835 +
               ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                   C10491) *
                  C47535 * C47517 * C111 +
              (((C16169 + C16168) * C21796 + (C16167 + C16166) * C47464) *
                   C10491 +
               ((C16117 * C488 + C16113 * C507 + C16118 * C930 +
                 C47833 * C939) *
                    C21796 +
                (C16117 * C506 + C16113 * C518 + C16118 * C940 +
                 C47833 * C945) *
                    C47464) *
                   C47835) *
                  C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16117 * C117 + C16113 * C124 + C16118 * C293 +
                  C47833 * C306) *
                     C21796 +
                 (C16117 * C125 + C16113 * C138 + C16118 * C305 +
                  C47833 * C323) *
                     C47464) *
                    C10491 +
                ((C16117 * C482 + C16113 * C495 + C16118 * C926 +
                  C47833 * C931) *
                     C21796 +
                 (C16117 * C494 + C16113 * C512 + C16118 * C932 +
                  C47833 * C941) *
                     C47464) *
                    C47835) *
                   C47535 * C47854 -
               (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 +
                  C16113 * C941) *
                     C47464 +
                 (C16118 * C1287 + C47833 * C1302 + C16117 * C926 +
                  C16113 * C931) *
                     C21796) *
                    C47835 +
                ((C16118 * C308 + C47833 * C324 + C16117 * C305 +
                  C16113 * C323) *
                     C47464 +
                 (C16118 * C294 + C47833 * C307 + C16117 * C293 +
                  C16113 * C306) *
                     C21796) *
                    C10491) *
                   C47535 * C47842 +
               (((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
                  C47833 * C1159) *
                     C21796 +
                 (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
                  C47833 * C1168) *
                     C47464) *
                    C10491 +
                ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
                  C47833 * C1701) *
                     C21796 +
                 (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
                  C47833 * C1707) *
                     C47464) *
                    C47835) *
                   C47535 * C47815) *
                  C288 +
              ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                    C10491 +
                ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                    C47835) *
                   C47535 * C47842 -
               (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                    C47835 +
                ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                    C10491) *
                   C47535 * C47854 -
               (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                    C47835 +
                ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                    C10491) *
                   C47535 * C47815) *
                  C289 +
              ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                    C10491 +
                ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                    C47835) *
                   C47535 * C47854 -
               (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                    C47835 +
                ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                    C10491) *
                   C47535 * C47842 +
               (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) *
                    C10491 +
                ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
                  C47833 * C1705) *
                     C21796 +
                 (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
                  C47833 * C1709) *
                     C47464) *
                    C47835) *
                   C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47855 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47844 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C288 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47844 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47855 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C47818) *
              C47517 * C289 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47855 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47844 +
           (((C16557 + C16556) * C21796 + (C16555 + C16554) * C47464) * C10491 +
            ((C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
              C47833 * C2409) *
                 C21796 +
             (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
              C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1075 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1074 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) * C47835) *
              C47535 * C1142 -
          (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
           ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C47464 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C21796) *
               C10491) *
              C47535 * C1143 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C21796 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C47464) *
               C10491 +
           ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
             C47833 * C1701) *
                C21796 +
            (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
             C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
             C16113 * C1707) *
                C47464 +
            (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
             C16113 * C1701) *
                C21796) *
               C47835 +
           ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C47464 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C21796) *
               C10491) *
              C47535 * C1145 +
          (((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 +
             C47833 * C5931) *
                C21796 +
            (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 +
             C47833 * C5935) *
                C47464) *
               C10491 +
           ((C16117 * C6569 + C16113 * C6571 + C16118 * C22991 +
             C47833 * C22992) *
                C21796 +
            (C16117 * C6572 + C16113 * C6575 + C16118 * C22993 +
             C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47855 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47844 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C1074 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47844 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47855 -
           (((C16118 * C7440 + C47833 * C7443 + C16117 * C2406 +
              C16113 * C2411) *
                 C47464 +
             (C16118 * C7437 + C47833 * C7439 + C16117 * C2402 +
              C16113 * C2405) *
                 C21796) *
                C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C47818) *
              C1075 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47855 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47844 +
           (((C27133 + C27132) * C21796 + (C27131 + C27130) * C47464) * C10491 +
            ((C16117 * C7437 + C16113 * C7439 + C16118 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C16117 * C7440 + C16113 * C7443 + C16118 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C1820 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C1821 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C1821 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C1820 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C47818) *
              C47517 * C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C1820 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C1821 +
           (((C16557 + C16556) * C21796 + (C16555 + C16554) * C47464) * C10491 +
            ((C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
              C47833 * C2409) *
                 C21796 +
             (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
              C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C1820 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C1821 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47854 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C1821 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C1820 -
           (((C16118 * C7440 + C47833 * C7443 + C16117 * C2406 +
              C16113 * C2411) *
                 C47464 +
             (C16118 * C7437 + C47833 * C7439 + C16117 * C2402 +
              C16113 * C2405) *
                 C21796) *
                C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C47818) *
              C47842 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C1820 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C1821 +
           (((C27133 + C27132) * C21796 + (C27131 + C27130) * C47464) * C10491 +
            ((C16117 * C7437 + C16113 * C7439 + C16118 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C16117 * C7440 + C16113 * C7443 + C16118 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) * C47835) *
              C1995 -
          (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
           ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) * C10491) *
              C1996 +
          (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
           ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) * C47835) *
              C1997 -
          (((C27998 + C27999) * C47464 + (C28000 + C28001) * C21796) * C47835 +
           ((C27997 + C27996) * C47464 + (C27995 + C27994) * C21796) * C10491) *
              C1998 +
          (((C28001 + C28000) * C21796 + (C27999 + C27998) * C47464) * C10491 +
           ((C16117 * C12555 + C16113 * C12557 + C16118 * C27973 +
             C47833 * C27974) *
                C21796 +
            (C16117 * C12558 + C16113 * C12561 + C16118 * C27975 +
             C47833 * C27976) *
                C47464) *
               C47835) *
              C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C1074 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C1075 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C47784 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C47815) *
              C47769 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C1074 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C1075 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47784 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47517 * C656 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47622 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47784) *
              C47517 * C657 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47784 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47622) *
              C47517 * C658 +
          ((((C16841 + C16840) * C21796 + (C16839 + C16838) * C47464) * C10491 +
            ((C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                 C21796 +
             (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C2284 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C2285 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C2286 -
           (((C27998 + C27999) * C47464 + (C28000 + C28001) * C21796) * C47835 +
            ((C27997 + C27996) * C47464 + (C27995 + C27994) * C21796) *
                C10491) *
               C47831) *
              C47517 * C47769 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C2285 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C2284 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C2286 +
           (((C18633 + C18632) * C21796 + (C18631 + C18630) * C47464) * C10491 +
            ((C16117 * C2004 + C16113 * C2014 + C16118 * C6952 +
              C47833 * C6955) *
                 C21796 +
             (C16117 * C2015 + C16113 * C2022 + C16118 * C6956 +
              C47833 * C6958) *
                 C47464) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                 C21796 +
             (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 + C16113 * C941) *
                 C47464 +
             (C16118 * C1287 + C47833 * C1302 + C16117 * C926 + C16113 * C931) *
                 C21796) *
                C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47842 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47854 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C289 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47854 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                C21796 +
            (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
           ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) * C10491) *
              C47535 * C47517 * C109 +
          (((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
           ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
           ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) * C10491) *
              C47535 * C47517 * C111 +
          (((C16169 + C16168) * C21796 + (C16167 + C16166) * C47464) * C10491 +
           ((C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C21796 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1075 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1074 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) * C47835) *
              C47535 * C1142 -
          (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
           ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C47464 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C21796) *
               C10491) *
              C47535 * C1143 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C21796 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C47464) *
               C10491 +
           ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
             C47833 * C1701) *
                C21796 +
            (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
             C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
             C16113 * C1707) *
                C47464 +
            (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
             C16113 * C1701) *
                C21796) *
               C47835 +
           ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C47464 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C21796) *
               C10491) *
              C47535 * C1145 +
          (((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 +
             C47833 * C5931) *
                C21796 +
            (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 +
             C47833 * C5935) *
                C47464) *
               C10491 +
           ((C16117 * C6569 + C16113 * C6571 + C16118 * C22991 +
             C47833 * C22992) *
                C21796 +
            (C16117 * C6572 + C16113 * C6575 + C16118 * C22993 +
             C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C1820 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C1821 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C1821 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C1820 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C47818) *
              C47517 * C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C1820 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C1821 +
           (((C16557 + C16556) * C21796 + (C16555 + C16554) * C47464) * C10491 +
            ((C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
              C47833 * C2409) *
                 C21796 +
             (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
              C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C1820 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C1821 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47854 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C1821 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C1820 -
           (((C16118 * C7440 + C47833 * C7443 + C16117 * C2406 +
              C16113 * C2411) *
                 C47464 +
             (C16118 * C7437 + C47833 * C7439 + C16117 * C2402 +
              C16113 * C2405) *
                 C21796) *
                C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C47818) *
              C47842 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C1820 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C1821 +
           (((C27133 + C27132) * C21796 + (C27131 + C27130) * C47464) * C10491 +
            ((C16117 * C7437 + C16113 * C7439 + C16118 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C16117 * C7440 + C16113 * C7443 + C16118 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C47494 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C47783 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C47503 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C3274 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47618 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47625 +
            (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) *
                 C10491 +
             ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                 C47835) *
                C3782) *
               C47783 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47625 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47618 -
            (((C28464 + C28465) * C47464 + (C28466 + C28467) * C21796) *
                 C47835 +
             ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                 C10491) *
                C3782) *
               C47580) *
              C2620 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47625 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47618 -
            (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) *
                 C47835 +
             ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                 C10491) *
                C3782) *
               C47783 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47618 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47625 +
            (((C18491 + C18490) * C21796 + (C18489 + C18488) * C47464) *
                 C10491 +
             ((C16117 * C2403 + C16113 * C2407 + C16118 * C7438 +
               C47833 * C7441) *
                  C21796 +
              (C16117 * C2408 + C16113 * C2412 + C16118 * C7442 +
               C47833 * C7444) *
                  C47464) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47854 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47842 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C3274 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C47815) *
              C2620 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C47854 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47842 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C3274 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47517 * C47860 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47622 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C3274) *
              C47517 * C47853 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C3274 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47622) *
              C47517 * C47840 +
          ((((C16841 + C16840) * C21796 + (C16839 + C16838) * C47464) * C10491 +
            ((C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                 C21796 +
             (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47862 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47859 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C47850 -
           (((C27998 + C27999) * C47464 + (C28000 + C28001) * C21796) * C47835 +
            ((C27997 + C27996) * C47464 + (C27995 + C27994) * C21796) *
                C10491) *
               C47831) *
              C47517 * C2620 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47859 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47862 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C47850 +
           (((C18633 + C18632) * C21796 + (C18631 + C18630) * C47464) * C10491 +
            ((C16117 * C2004 + C16113 * C2014 + C16118 * C6952 +
              C47833 * C6955) *
                 C21796 +
             (C16117 * C2015 + C16113 * C2022 + C16118 * C6956 +
              C47833 * C6958) *
                 C47464) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47618 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47625 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C27994 + C27995) * C21796 + (C27996 + C27997) * C47464) *
                C47835) *
               C3782) *
              C47517 * C47494 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47625 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47618 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C3782) *
              C47517 * C47503 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47618 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47625 +
           (((C16557 + C16556) * C21796 + (C16555 + C16554) * C47464) * C10491 +
            ((C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
              C47833 * C2409) *
                 C21796 +
             (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
              C47833 * C2413) *
                 C47464) *
                C47835) *
               C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C3274 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47517 * C47860 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47622 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C3274) *
              C47517 * C47853 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C3274 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47622) *
              C47517 * C47840 +
          ((((C16841 + C16840) * C21796 + (C16839 + C16838) * C47464) * C10491 +
            ((C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                 C21796 +
             (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C3274 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47854 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C3274) *
               C47842 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C3274 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C47815) *
              C2620 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C3274) *
               C47854 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C3274 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47842 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 + C16113 * C941) *
                 C47464 +
             (C16118 * C1287 + C47833 * C1302 + C16117 * C926 + C16113 * C931) *
                 C21796) *
                C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47580) *
              C656 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47783) *
              C657 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47580) *
              C658 +
          ((((C16699 + C16698) * C21796 + (C16697 + C16696) * C47464) * C10491 +
            ((C16117 * C929 + C16113 * C938 + C16118 * C1584 + C47833 * C1585) *
                 C21796 +
             (C16117 * C937 + C16113 * C944 + C16118 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1416 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1417 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47535 * C1418 -
           (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
              C16113 * C1707) *
                 C47464 +
             (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
              C16113 * C1701) *
                 C21796) *
                C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47535 * C47825) *
              C47769 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1417 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1416 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C1418 +
           (((C17575 + C17574) * C21796 + (C17573 + C17572) * C47464) * C10491 +
            ((C16117 * C1699 + C16113 * C1703 + C16118 * C6570 +
              C47833 * C6573) *
                 C21796 +
             (C16117 * C1704 + C16113 * C1708 + C16118 * C6574 +
              C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C16117 * C1284 + C16113 * C1296 + C16118 * C1288 +
               C47833 * C1303) *
                  C21796 +
              (C16117 * C1295 + C16113 * C1311 + C16118 * C1304 +
               C47833 * C1315) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C288 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C47783 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C47580) *
              C289 +
          (((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) *
                 C10491 +
             ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                 C47835) *
                C47784 -
            (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) *
                 C47835 +
             ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                 C10491) *
                C47622) *
               C47783 +
           ((((C17059 + C17058) * C21796 + (C17057 + C17056) * C47464) *
                 C10491 +
             ((C16117 * C1282 + C16113 * C1292 + C16118 * C1290 +
               C47833 * C1307) *
                  C21796 +
              (C16117 * C1291 + C16113 * C1309 + C16118 * C1308 +
               C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) *
                 C47835 +
             ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                 C10491) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47784 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C1416 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47622 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47784) *
              C1417 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47784 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47622) *
              C1418 +
          ((((C27596 + C27597) * C21796 + (C27598 + C27599) * C47464) * C10491 +
            ((C16117 * C6083 + C16113 * C6085 + C16118 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C16117 * C6086 + C16113 * C6089 + C16118 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C27599 + C27598) * C47464 + (C27597 + C27596) * C21796) * C47835 +
            ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
              C16113 * C1168) *
                 C47464 +
             (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
              C16113 * C1159) *
                 C21796) *
                C10491) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                 C21796 +
             (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 + C16113 * C941) *
                 C47464 +
             (C16118 * C1287 + C47833 * C1302 + C16117 * C926 + C16113 * C931) *
                 C21796) *
                C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47842 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47854 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C289 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47854 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                C21796 +
            (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
           ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) * C10491) *
              C47535 * C47517 * C109 +
          (((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
           ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
           ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) * C10491) *
              C47535 * C47517 * C111 +
          (((C16169 + C16168) * C21796 + (C16167 + C16166) * C47464) * C10491 +
           ((C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C21796 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47855 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47844 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C288 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47844 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47855 -
           (((C18630 + C18631) * C47464 + (C18632 + C18633) * C21796) * C47835 +
            ((C16549 + C16548) * C47464 + (C16547 + C16546) * C21796) *
                C10491) *
               C47818) *
              C47517 * C289 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47855 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47844 +
           (((C16557 + C16556) * C21796 + (C16555 + C16554) * C47464) * C10491 +
            ((C16117 * C2000 + C16113 * C2007 + C16118 * C2404 +
              C47833 * C2409) *
                 C21796 +
             (C16117 * C2006 + C16113 * C2018 + C16118 * C2410 +
              C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1075 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1074 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) * C47835) *
              C47535 * C1142 -
          (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
           ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C47464 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C21796) *
               C10491) *
              C47535 * C1143 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C21796 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C47464) *
               C10491 +
           ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
             C47833 * C1701) *
                C21796 +
            (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
             C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
             C16113 * C1707) *
                C47464 +
            (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
             C16113 * C1701) *
                C21796) *
               C47835 +
           ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C47464 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C21796) *
               C10491) *
              C47535 * C1145 +
          (((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 +
             C47833 * C5931) *
                C21796 +
            (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 +
             C47833 * C5935) *
                C47464) *
               C10491 +
           ((C16117 * C6569 + C16113 * C6571 + C16118 * C22991 +
             C47833 * C22992) *
                C21796 +
            (C16117 * C6572 + C16113 * C6575 + C16118 * C22993 +
             C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47855 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47844 +
           (((C26257 + C26256) * C21796 + (C26255 + C26254) * C47464) * C10491 +
            ((C16117 * C2002 + C16113 * C2011 + C16118 * C2402 +
              C47833 * C2405) *
                 C21796 +
             (C16117 * C2010 + C16113 * C2020 + C16118 * C2406 +
              C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C1074 +
          ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) * C10491 +
            ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                C47835) *
               C47844 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47855 -
           (((C16118 * C7440 + C47833 * C7443 + C16117 * C2406 +
              C16113 * C2411) *
                 C47464 +
             (C16118 * C7437 + C47833 * C7439 + C16117 * C2402 +
              C16113 * C2405) *
                 C21796) *
                C47835 +
            ((C27125 + C27124) * C47464 + (C27123 + C27122) * C21796) *
                C10491) *
               C47818) *
              C1075 +
          ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                C47835) *
               C47855 -
           (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) * C47835 +
            ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                C10491) *
               C47844 +
           (((C27133 + C27132) * C21796 + (C27131 + C27130) * C47464) * C10491 +
            ((C16117 * C7437 + C16113 * C7439 + C16118 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C16117 * C7440 + C16113 * C7443 + C16118 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47784 -
           (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) * C47835 +
            ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                C10491) *
               C47622) *
              C47517 * C656 +
          ((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) * C10491 +
            ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                C47835) *
               C47622 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47784) *
              C47517 * C657 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47784 -
           (((C16554 + C16555) * C47464 + (C16556 + C16557) * C21796) * C47835 +
            ((C16553 + C16552) * C47464 + (C16551 + C16550) * C21796) *
                C10491) *
               C47622) *
              C47517 * C658 +
          ((((C16841 + C16840) * C21796 + (C16839 + C16838) * C47464) * C10491 +
            ((C16117 * C487 + C16113 * C505 + C16118 * C2170 + C47833 * C2171) *
                 C21796 +
             (C16117 * C504 + C16113 * C517 + C16118 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
            ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) *
                C10491) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                  C21796 +
              (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                  C47464) *
                 C10491 +
             ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                 C47835) *
                C47784 -
            (((C26254 + C26255) * C47464 + (C26256 + C26257) * C21796) *
                 C47835 +
             ((C26253 + C26252) * C47464 + (C26251 + C26250) * C21796) *
                 C10491) *
                C47622) *
               C1074 +
           ((((C26720 + C26721) * C21796 + (C26722 + C26723) * C47464) *
                 C10491 +
             ((C27122 + C27123) * C21796 + (C27124 + C27125) * C47464) *
                 C47835) *
                C47622 -
            (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) *
                 C47835 +
             ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                  C47464 +
              (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                  C21796) *
                 C10491) *
                C47784) *
               C1075 +
           ((((C16117 * C294 + C16113 * C307 + C16118 * C1150 +
               C47833 * C1159) *
                  C21796 +
              (C16117 * C308 + C16113 * C324 + C16118 * C1158 +
               C47833 * C1168) *
                  C47464) *
                 C10491 +
             ((C27126 + C27127) * C21796 + (C27128 + C27129) * C47464) *
                 C47835) *
                C47784 -
            (((C27130 + C27131) * C47464 + (C27132 + C27133) * C21796) *
                 C47835 +
             ((C27129 + C27128) * C47464 + (C27127 + C27126) * C21796) *
                 C10491) *
                C47622) *
               C47815) *
              C47769 +
          (((((C16545 + C16544) * C21796 + (C16543 + C16542) * C47464) *
                 C10491 +
             ((C16546 + C16547) * C21796 + (C16548 + C16549) * C47464) *
                 C47835) *
                C47622 -
            (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) *
                 C47835 +
             ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                 C10491) *
                C47784) *
               C1074 +
           ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) *
                 C10491 +
             ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                 C47835) *
                C47784 -
            (((C18488 + C18489) * C47464 + (C18490 + C18491) * C21796) *
                 C47835 +
             ((C17055 + C17054) * C47464 + (C17053 + C17052) * C21796) *
                 C10491) *
                C47622) *
               C1075 +
           ((((C17781 + C17780) * C21796 + (C17779 + C17778) * C47464) *
                 C10491 +
             ((C16117 * C1289 + C16113 * C1305 + C16118 * C6084 +
               C47833 * C6087) *
                  C21796 +
              (C16117 * C1306 + C16113 * C1316 + C16118 * C6088 +
               C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) *
                 C47835 +
             ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                 C10491) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                C21796 +
            (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
           ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) * C10491) *
              C47535 * C47517 * C109 +
          (((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
           ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C16838 + C16839) * C47464 + (C16840 + C16841) * C21796) * C47835 +
           ((C16165 + C16164) * C47464 + (C16163 + C16162) * C21796) * C10491) *
              C47535 * C47517 * C111 +
          (((C16169 + C16168) * C21796 + (C16167 + C16166) * C47464) * C10491 +
           ((C16117 * C488 + C16113 * C507 + C16118 * C930 + C47833 * C939) *
                C21796 +
            (C16117 * C506 + C16113 * C518 + C16118 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C16117 * C482 + C16113 * C495 + C16118 * C926 + C47833 * C931) *
                 C21796 +
             (C16117 * C494 + C16113 * C512 + C16118 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C16118 * C1301 + C47833 * C1314 + C16117 * C932 + C16113 * C941) *
                 C47464 +
             (C16118 * C1287 + C47833 * C1302 + C16117 * C926 + C16113 * C931) *
                 C21796) *
                C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C47842 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C47854 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C289 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C47854 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C47842 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                 C21796 +
             (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                 C47464) *
                C10491 +
            ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
            ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                 C47464 +
             (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                 C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                 C21796 +
             (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                 C47464) *
                C10491 +
            ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
              C47833 * C1701) *
                 C21796 +
             (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
              C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C16351 + C16350) * C21796 + (C16349 + C16348) * C47464) * C10491 +
            ((C17052 + C17053) * C21796 + (C17054 + C17055) * C47464) *
                C47835) *
               C47535 * C1075 -
           (((C16542 + C16543) * C47464 + (C16544 + C16545) * C21796) * C47835 +
            ((C16157 + C16156) * C47464 + (C16155 + C16154) * C21796) *
                C10491) *
               C47535 * C1074 -
           (((C17778 + C17779) * C47464 + (C17780 + C17781) * C21796) * C47835 +
            ((C16355 + C16354) * C47464 + (C16353 + C16352) * C21796) *
                C10491) *
               C47535 * C47815) *
              C47838 +
          ((((C16161 + C16160) * C21796 + (C16159 + C16158) * C47464) * C10491 +
            ((C16550 + C16551) * C21796 + (C16552 + C16553) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C17056 + C17057) * C47464 + (C17058 + C17059) * C21796) * C47835 +
            ((C16359 + C16358) * C47464 + (C16357 + C16356) * C21796) *
                C10491) *
               C47535 * C1075 +
           (((C16363 + C16362) * C21796 + (C16361 + C16360) * C47464) * C10491 +
            ((C16117 * C1285 + C16113 * C1298 + C16118 * C1700 +
              C47833 * C1705) *
                 C21796 +
             (C16117 * C1297 + C16113 * C1312 + C16118 * C1706 +
              C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16117 * C117 + C16113 * C124 + C16118 * C293 + C47833 * C306) *
                C21796 +
            (C16117 * C125 + C16113 * C138 + C16118 * C305 + C47833 * C323) *
                C47464) *
               C10491 +
           ((C26250 + C26251) * C21796 + (C26252 + C26253) * C47464) * C47835) *
              C47535 * C1142 -
          (((C26723 + C26722) * C47464 + (C26721 + C26720) * C21796) * C47835 +
           ((C16118 * C308 + C47833 * C324 + C16117 * C305 + C16113 * C323) *
                C47464 +
            (C16118 * C294 + C47833 * C307 + C16117 * C293 + C16113 * C306) *
                C21796) *
               C10491) *
              C47535 * C1143 +
          (((C16117 * C294 + C16113 * C307 + C16118 * C1150 + C47833 * C1159) *
                C21796 +
            (C16117 * C308 + C16113 * C324 + C16118 * C1158 + C47833 * C1168) *
                C47464) *
               C10491 +
           ((C16117 * C1287 + C16113 * C1302 + C16118 * C1698 +
             C47833 * C1701) *
                C21796 +
            (C16117 * C1301 + C16113 * C1314 + C16118 * C1702 +
             C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C16118 * C6572 + C47833 * C6575 + C16117 * C1702 +
             C16113 * C1707) *
                C47464 +
            (C16118 * C6569 + C47833 * C6571 + C16117 * C1698 +
             C16113 * C1701) *
                C21796) *
               C47835 +
           ((C16118 * C1161 + C47833 * C1169 + C16117 * C1158 +
             C16113 * C1168) *
                C47464 +
            (C16118 * C1151 + C47833 * C1160 + C16117 * C1150 +
             C16113 * C1159) *
                C21796) *
               C10491) *
              C47535 * C1145 +
          (((C16117 * C1151 + C16113 * C1160 + C16118 * C5929 +
             C47833 * C5931) *
                C21796 +
            (C16117 * C1161 + C16113 * C1169 + C16118 * C5932 +
             C47833 * C5935) *
                C47464) *
               C10491 +
           ((C16117 * C6569 + C16113 * C6571 + C16118 * C22991 +
             C47833 * C22992) *
                C21796 +
            (C16117 * C6572 + C16113 * C6575 + C16118 * C22993 +
             C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C47576 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47583 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47535 * C2880) *
              C47494 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C47583 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47576 -
           ((C33015 + C33014 + C33013 + C33012) * C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C2880) *
              C47503 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C47576 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47583 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47576 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C47583 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C47784 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C2880) *
              C2620 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C47576 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47583 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C47861 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47857 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47535 * C47847 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47535 * C47825) *
              C2620 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C47857 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47861 -
           ((C33015 + C33014 + C33013 + C33012) * C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47847 +
           ((C1438 * C16119 + C1437 * C16115 + C1436 * C16120 +
             C1435 * C47802) *
                C31513 +
            (C11843 * C16119 + C11842 * C16115 +
             (C113 * C1700 + C47721 * C1705) * C16120 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C2512 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47580) *
              C47860 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C47580 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C2512) *
              C47853 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C2512 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47580) *
              C47840 +
          (((C364 * C16119 + C365 * C16115 + C670 * C16120 + C669 * C47802) *
                C31513 +
            (C964 * C16119 + C963 * C16115 +
             (C113 * C930 + C47721 * C939) * C16120 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47855 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47844 +
            ((C31815 + C31814 + C31813 + C31812) * C31513 +
             (C33524 + C33525 + C33526 + C33527) * C47835) *
                C47818) *
               C2512 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47844 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47855 -
            ((C33994 + C33995 + C33996 + C33997) * C47835 +
             (C32679 + C32678 + C32677 + C32676) * C31513) *
                C47818) *
               C47580) *
              C2620 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47844 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47855 -
            ((C33860 + C33861 + C33862 + C33863) * C47835 +
             (C31823 + C31822 + C31821 + C31820) * C31513) *
                C47818) *
               C2512 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47855 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47844 +
            ((C33729 + C33728 + C33727 + C33726) * C31513 +
             (C12793 * C16119 + C12792 * C16115 +
              (C113 * C2404 + C47721 * C2409) * C16120 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C2512 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C47494 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C2512 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C47503 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C47784 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C2512 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C2512 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47580) *
              C47860 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C47580 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C2512) *
              C47853 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C2512 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47580) *
              C47840 +
          (((C364 * C16119 + C365 * C16115 + C670 * C16120 + C669 * C47802) *
                C31513 +
            (C964 * C16119 + C963 * C16115 +
             (C113 * C930 + C47721 * C939) * C16120 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C47861 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47857 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47535 * C47847 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47535 * C47825) *
              C2620 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C47857 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47861 -
           ((C33015 + C33014 + C33013 + C33012) * C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47847 +
           ((C1438 * C16119 + C1437 * C16115 + C1436 * C16120 +
             C1435 * C47802) *
                C31513 +
            (C11843 * C16119 + C11842 * C16115 +
             (C113 * C1700 + C47721 * C1705) * C16120 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47576 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47583 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C3274 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C2880) *
              C47769 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C47576 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47583 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C16119 +
                      (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
                      C167 * C47802) *
                         C31513 +
                     (C31808 + C31809 + C31810 + C31811) * C47835) *
                        C47618 -
                    ((C31812 + C31813 + C31814 + C31815) * C47835 +
                     (C31811 + C31810 + C31809 + C31808) * C31513) *
                        C47625 +
                    ((C31815 + C31814 + C31813 + C31812) * C31513 +
                     (C33524 + C33525 + C33526 + C33527) * C47835) *
                        C3782) *
                       C47576 +
                   (((C32290 + C32291 + C32292 + C32293) * C31513 +
                     (C32676 + C32677 + C32678 + C32679) * C47835) *
                        C47625 -
                    ((C32293 + C32292 + C32291 + C32290) * C47835 +
                     (C358 * C47802 + C359 * C16120 +
                      (C113 * C305 + C47721 * C323) * C16115 +
                      (C113 * C293 + C47721 * C306) * C16119) *
                         C31513) *
                        C47618 -
                    ((C33994 + C33995 + C33996 + C33997) * C47835 +
                     (C32679 + C32678 + C32677 + C32676) * C31513) *
                        C3782) *
                       C47583 +
                   ((((C113 * C294 + C47721 * C307) * C16119 +
                      (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
                      C361 * C47802) *
                         C31513 +
                     (C32680 + C32681 + C32682 + C32683) * C47835) *
                        C47618 -
                    ((C32684 + C32685 + C32686 + C32687) * C47835 +
                     (C32683 + C32682 + C32681 + C32680) * C31513) *
                        C47625 +
                    ((C32687 + C32686 + C32685 + C32684) * C31513 +
                     ((C113 * C7437 + C47721 * C7439) * C16119 +
                      (C113 * C7440 + C47721 * C7443) * C16115 +
                      (C113 * C7438 + C47721 * C7441) * C16120 +
                      (C113 * C7442 + C47721 * C7444) * C47802) *
                         C47835) *
                        C3782) *
                       C2880) *
                  C47489) /
                 (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C3274 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47861 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47622 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C3274) *
              C47857 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C3274 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47622) *
              C47847 +
          (((C33146 + C33147 + C33148 + C33149) * C31513 +
            ((C113 * C6083 + C47721 * C6085) * C16119 +
             (C113 * C6086 + C47721 * C6089) * C16115 +
             (C113 * C6084 + C47721 * C6087) * C16120 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C2512 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C47851 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C2512 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C47838 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C3274 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C2512 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47862 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47859 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C33524 + C33525 + C33526 + C33527) * C47835) *
               C47850 -
           ((C33528 + C33529 + C33530 + C33531) * C47835 +
            (C33527 + C33526 + C33525 + C33524) * C31513) *
               C47831) *
              C2512 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47859 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47862 -
           ((C33994 + C33995 + C33996 + C33997) * C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C47850 +
           ((C33997 + C33996 + C33995 + C33994) * C31513 +
            ((C113 * C6951 + C47721 * C6953) * C16119 +
             (C113 * C6954 + C47721 * C6957) * C16115 +
             (C113 * C6952 + C47721 * C6955) * C16120 +
             (C113 * C6956 + C47721 * C6958) * C47802) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47618 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47625 +
            ((C31815 + C31814 + C31813 + C31812) * C31513 +
             (C33524 + C33525 + C33526 + C33527) * C47835) *
                C3782) *
               C2512 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47625 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47618 -
            ((C33994 + C33995 + C33996 + C33997) * C47835 +
             (C32679 + C32678 + C32677 + C32676) * C31513) *
                C3782) *
               C47580) *
              C47769 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47625 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47618 -
            ((C33860 + C33861 + C33862 + C33863) * C47835 +
             (C31823 + C31822 + C31821 + C31820) * C31513) *
                C3782) *
               C2512 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47618 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47625 +
            ((C33729 + C33728 + C33727 + C33726) * C31513 +
             (C12793 * C16119 + C12792 * C16115 +
              (C113 * C2404 + C47721 * C2409) * C16120 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C2512 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C47851 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C2512 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C47838 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C3274 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C2512 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C3274 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47861 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47622 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C3274) *
              C47857 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C3274 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47622) *
              C47847 +
          (((C33146 + C33147 + C33148 + C33149) * C31513 +
            ((C113 * C6083 + C47721 * C6085) * C16119 +
             (C113 * C6086 + C47721 * C6089) * C16115 +
             (C113 * C6084 + C47721 * C6087) * C16120 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1416 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1417 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47535 * C1418 -
           ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
             C12178 * C16119) *
                C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47535 * C47825) *
              C47769 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1417 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1416 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C1418 +
           ((C1438 * C16119 + C1437 * C16115 + C1436 * C16120 +
             C1435 * C47802) *
                C31513 +
            (C11843 * C16119 + C11842 * C16115 +
             (C113 * C1700 + C47721 * C1705) * C16120 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C47783 -
           ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
             C11294 * C16119) *
                C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47580) *
              C656 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C959 * C16119 + C960 * C16115 + C961 * C16120 + C962 * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47783) *
              C657 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C47783 -
           ((C963 * C47802 + C964 * C16120 + C962 * C16115 + C961 * C16119) *
                C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47580) *
              C658 +
          (((C364 * C16119 + C365 * C16115 + C670 * C16120 + C669 * C47802) *
                C31513 +
            (C964 * C16119 + C963 * C16115 +
             (C113 * C930 + C47721 * C939) * C16120 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
                C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C1820 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C1821 +
            ((C31815 + C31814 + C31813 + C31812) * C31513 +
             (C33524 + C33525 + C33526 + C33527) * C47835) *
                C47818) *
               C47783 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C1821 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C1820 -
            ((C12792 * C47802 + C12793 * C16120 + C13064 * C16115 +
              C13065 * C16119) *
                 C47835 +
             (C32679 + C32678 + C32677 + C32676) * C31513) *
                C47818) *
               C47580) *
              C47769 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C1821 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C1820 -
            ((C2301 * C47802 + C2302 * C16120 + C2303 * C16115 +
              C2304 * C16119) *
                 C47835 +
             (C31823 + C31822 + C31821 + C31820) * C31513) *
                C47818) *
               C47783 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C1820 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C1821 +
            ((C33729 + C33728 + C33727 + C33726) * C31513 +
             (C12793 * C16119 + C12792 * C16115 +
              (C113 * C2404 + C47721 * C2409) * C16120 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47784 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C1416 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47622 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47784) *
              C1417 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47784 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47622) *
              C1418 +
          (((C33146 + C33147 + C33148 + C33149) * C31513 +
            ((C113 * C6083 + C47721 * C6085) * C16119 +
             (C113 * C6086 + C47721 * C6089) * C16115 +
             (C113 * C6084 + C47721 * C6087) * C16120 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47783 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C11692 * C16119 + C11693 * C16115 + C2186 * C16120 +
              C2185 * C47802) *
                 C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C288 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C47783 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C16120 + C2185 * C16115 +
              C2186 * C16119) *
                 C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C289 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C47784 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C47783 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C2284 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C2285 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C33524 + C33525 + C33526 + C33527) * C47835) *
               C2286 -
           ((C33528 + C33529 + C33530 + C33531) * C47835 +
            (C33527 + C33526 + C33525 + C33524) * C31513) *
               C47831) *
              C47783 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C2285 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C2284 -
           ((C33994 + C33995 + C33996 + C33997) * C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C2286 +
           ((C33997 + C33996 + C33995 + C33994) * C31513 +
            ((C113 * C6951 + C47721 * C6953) * C16119 +
             (C113 * C6954 + C47721 * C6957) * C16115 +
             (C113 * C6952 + C47721 * C6955) * C16120 +
             (C113 * C6956 + C47721 * C6958) * C47802) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47721 * C124) * C16119 +
                (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
                C167 * C47802) *
                   C31513 +
               (C10814 * C16119 + C10815 * C16115 + C548 * C16120 +
                C547 * C47802) *
                   C47835) *
                  C47535 * C47517 * C108 -
              ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
                   C47835 +
               (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                   C31513) *
                  C47535 * C47517 * C109 +
              ((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                   C31513 +
               (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
                   C47835) *
                  C47535 * C47517 * C110 -
              ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
                   C47835 +
               (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                   C31513) *
                  C47535 * C47517 * C111 +
              ((C172 * C16119 + C173 * C16115 + C175 * C16120 + C174 * C47802) *
                   C31513 +
               (C780 * C16119 + C779 * C16115 +
                (C113 * C770 + C47721 * C771) * C16120 +
                (C113 * C772 + C47721 * C773) * C47802) *
                   C47835) *
                  C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47721 * C124) * C16119 +
                 (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
                 C167 * C47802) *
                    C31513 +
                (C10814 * C16119 + C10815 * C16115 + C548 * C16120 +
                 C547 * C47802) *
                    C47835) *
                   C47535 * C47854 -
               ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
                 C11294 * C16119) *
                    C47835 +
                (C358 * C47802 + C359 * C16120 +
                 (C113 * C305 + C47721 * C323) * C16115 +
                 (C113 * C293 + C47721 * C306) * C16119) *
                    C31513) *
                   C47535 * C47842 +
               (((C113 * C294 + C47721 * C307) * C16119 +
                 (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
                 C361 * C47802) *
                    C31513 +
                (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
                 C1599 * C47802) *
                    C47835) *
                   C47535 * C47815) *
                  C288 +
              (((C359 * C16119 + C358 * C16115 + C357 * C16120 +
                 C356 * C47802) *
                    C31513 +
                (C959 * C16119 + C960 * C16115 + C961 * C16120 +
                 C962 * C47802) *
                    C47835) *
                   C47535 * C47842 -
               ((C545 * C47802 + C546 * C16120 + C547 * C16115 +
                 C548 * C16119) *
                    C47835 +
                (C169 * C47802 + C168 * C16120 + C167 * C16115 +
                 C166 * C16119) *
                    C31513) *
                   C47535 * C47854 -
               ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
                 C1600 * C16119) *
                    C47835 +
                (C363 * C47802 + C362 * C16120 + C361 * C16115 +
                 C360 * C16119) *
                    C31513) *
                   C47535 * C47815) *
                  C289 +
              (((C168 * C16119 + C169 * C16115 + C171 * C16120 +
                 C170 * C47802) *
                    C31513 +
                (C546 * C16119 + C545 * C16115 + C553 * C16120 +
                 C554 * C47802) *
                    C47835) *
                   C47535 * C47854 -
               ((C963 * C47802 + C964 * C16120 + C962 * C16115 +
                 C961 * C16119) *
                    C47835 +
                (C365 * C47802 + C364 * C16120 + C356 * C16115 +
                 C357 * C16119) *
                    C31513) *
                   C47535 * C47842 +
               ((C362 * C16119 + C363 * C16115 + C367 * C16120 +
                 C366 * C47802) *
                    C31513 +
                (C1598 * C16119 + C1597 * C16115 +
                 (C113 * C1584 + C47721 * C1585) * C16120 +
                 (C113 * C1586 + C47721 * C1587) * C47802) *
                    C47835) *
                   C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47855 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47844 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C288 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47844 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47855 -
           ((C2301 * C47802 + C2302 * C16120 + C2303 * C16115 +
             C2304 * C16119) *
                C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C47818) *
              C47517 * C289 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47855 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47844 +
           ((C31831 + C31830 + C31829 + C31828) * C31513 +
            (C2302 * C16119 + C2301 * C16115 +
             (C113 * C2288 + C47721 * C2289) * C16120 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1074 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1075 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C1074 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C1075 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C31808 + C31809 + C31810 + C31811) * C47835) *
              C47535 * C1142 -
          ((C32293 + C32292 + C32291 + C32290) * C47835 +
           (C358 * C47802 + C359 * C16120 +
            (C113 * C305 + C47721 * C323) * C16115 +
            (C113 * C293 + C47721 * C306) * C16119) *
               C31513) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C16119 +
            (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
            C361 * C47802) *
               C31513 +
           (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
            C12178 * C16119) *
               C47835 +
           (C1437 * C47802 + C1438 * C16120 +
            (C113 * C1158 + C47721 * C1168) * C16115 +
            (C113 * C1150 + C47721 * C1159) * C16119) *
               C31513) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C16119 +
            (C113 * C1161 + C47721 * C1169) * C16115 +
            (C113 * C1152 + C47721 * C1162) * C16120 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C31513 +
           ((C113 * C6569 + C47721 * C6571) * C16119 +
            (C113 * C6572 + C47721 * C6575) * C16115 +
            (C113 * C6570 + C47721 * C6573) * C16120 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47855 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47844 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C1074 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47844 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47855 -
           ((C12792 * C47802 + C12793 * C16120 + C13064 * C16115 +
             C13065 * C16119) *
                C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C47818) *
              C1075 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47855 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47844 +
           ((C32687 + C32686 + C32685 + C32684) * C31513 +
            ((C113 * C7437 + C47721 * C7439) * C16119 +
             (C113 * C7440 + C47721 * C7443) * C16115 +
             (C113 * C7438 + C47721 * C7441) * C16120 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C1820 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C1821 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C1821 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C1820 -
           ((C2301 * C47802 + C2302 * C16120 + C2303 * C16115 +
             C2304 * C16119) *
                C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C47818) *
              C47517 * C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C1820 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C1821 +
           ((C31831 + C31830 + C31829 + C31828) * C31513 +
            (C2302 * C16119 + C2301 * C16115 +
             (C113 * C2288 + C47721 * C2289) * C16120 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C1820 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C1821 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47854 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C1821 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C1820 -
           ((C12792 * C47802 + C12793 * C16120 + C13064 * C16115 +
             C13065 * C16119) *
                C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C47818) *
              C47842 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C1820 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C1821 +
           ((C32687 + C32686 + C32685 + C32684) * C31513 +
            ((C113 * C7437 + C47721 * C7439) * C16119 +
             (C113 * C7440 + C47721 * C7443) * C16115 +
             (C113 * C7438 + C47721 * C7441) * C16120 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C31808 + C31809 + C31810 + C31811) * C47835) *
              C1995 -
          ((C31812 + C31813 + C31814 + C31815) * C47835 +
           (C31811 + C31810 + C31809 + C31808) * C31513) *
              C1996 +
          ((C31815 + C31814 + C31813 + C31812) * C31513 +
           (C33524 + C33525 + C33526 + C33527) * C47835) *
              C1997 -
          ((C33528 + C33529 + C33530 + C33531) * C47835 +
           (C33527 + C33526 + C33525 + C33524) * C31513) *
              C1998 +
          ((C33531 + C33530 + C33529 + C33528) * C31513 +
           ((C113 * C12555 + C47721 * C12557) * C16119 +
            (C113 * C12558 + C47721 * C12561) * C16115 +
            (C113 * C12556 + C47721 * C12559) * C16120 +
            (C113 * C12560 + C47721 * C12562) * C47802) *
               C47835) *
              C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C1074 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C1075 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C47784 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C47815) *
              C47769 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C1074 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C16120 + C2185 * C16115 +
              C2186 * C16119) *
                 C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C1075 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47784 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47517 * C656 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47622 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47784) *
              C47517 * C657 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47784 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47622) *
              C47517 * C658 +
          (((C32092 + C32093 + C32094 + C32095) * C31513 +
            (C556 * C16119 + C555 * C16115 +
             (C113 * C489 + C47721 * C508) * C16120 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C2284 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C2285 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C33524 + C33525 + C33526 + C33527) * C47835) *
               C2286 -
           ((C33528 + C33529 + C33530 + C33531) * C47835 +
            (C33527 + C33526 + C33525 + C33524) * C31513) *
               C47831) *
              C47517 * C47769 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C2285 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C2284 -
           ((C33860 + C33861 + C33862 + C33863) * C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C2286 +
           ((C33863 + C33862 + C33861 + C33860) * C31513 +
            (C12581 * C16119 + C12580 * C16115 +
             (C113 * C2005 + C47721 * C2016) * C16120 +
             (C113 * C2017 + C47721 * C2023) * C47802) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C10814 * C16119 + C10815 * C16115 + C548 * C16120 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
             C11294 * C16119) *
                C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C959 * C16119 + C960 * C16115 + C961 * C16120 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
                C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C289 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C16120 + C962 * C16115 + C961 * C16119) *
                C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47842 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C10814 * C16119 + C10815 * C16115 + C548 * C16120 + C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
               C47835 +
           (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
               C31513) *
              C47535 * C47517 * C109 +
          ((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
               C31513 +
           (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
               C47835 +
           (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
               C31513) *
              C47535 * C47517 * C111 +
          ((C172 * C16119 + C173 * C16115 + C175 * C16120 + C174 * C47802) *
               C31513 +
           (C780 * C16119 + C779 * C16115 +
            (C113 * C770 + C47721 * C771) * C16120 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1074 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1075 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C1074 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C1075 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C31808 + C31809 + C31810 + C31811) * C47835) *
              C47535 * C1142 -
          ((C32293 + C32292 + C32291 + C32290) * C47835 +
           (C358 * C47802 + C359 * C16120 +
            (C113 * C305 + C47721 * C323) * C16115 +
            (C113 * C293 + C47721 * C306) * C16119) *
               C31513) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C16119 +
            (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
            C361 * C47802) *
               C31513 +
           (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
            C12178 * C16119) *
               C47835 +
           (C1437 * C47802 + C1438 * C16120 +
            (C113 * C1158 + C47721 * C1168) * C16115 +
            (C113 * C1150 + C47721 * C1159) * C16119) *
               C31513) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C16119 +
            (C113 * C1161 + C47721 * C1169) * C16115 +
            (C113 * C1152 + C47721 * C1162) * C16120 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C31513 +
           ((C113 * C6569 + C47721 * C6571) * C16119 +
            (C113 * C6572 + C47721 * C6575) * C16115 +
            (C113 * C6570 + C47721 * C6573) * C16120 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C1820 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C1821 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C1821 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C1820 -
           ((C2301 * C47802 + C2302 * C16120 + C2303 * C16115 +
             C2304 * C16119) *
                C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C47818) *
              C47517 * C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C1820 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C1821 +
           ((C31831 + C31830 + C31829 + C31828) * C31513 +
            (C2302 * C16119 + C2301 * C16115 +
             (C113 * C2288 + C47721 * C2289) * C16120 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C1820 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C1821 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47854 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C1821 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C1820 -
           ((C12792 * C47802 + C12793 * C16120 + C13064 * C16115 +
             C13065 * C16119) *
                C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C47818) *
              C47842 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C1820 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C1821 +
           ((C32687 + C32686 + C32685 + C32684) * C31513 +
            ((C113 * C7437 + C47721 * C7439) * C16119 +
             (C113 * C7440 + C47721 * C7443) * C16115 +
             (C113 * C7438 + C47721 * C7441) * C16120 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47783 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C47494 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C47783 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C47503 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C3274 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C47783 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47618 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47625 +
            ((C31815 + C31814 + C31813 + C31812) * C31513 +
             (C33524 + C33525 + C33526 + C33527) * C47835) *
                C3782) *
               C47783 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47625 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47618 -
            ((C33994 + C33995 + C33996 + C33997) * C47835 +
             (C32679 + C32678 + C32677 + C32676) * C31513) *
                C3782) *
               C47580) *
              C2620 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47625 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47618 -
            ((C33860 + C33861 + C33862 + C33863) * C47835 +
             (C31823 + C31822 + C31821 + C31820) * C31513) *
                C3782) *
               C47783 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47618 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47625 +
            ((C33729 + C33728 + C33727 + C33726) * C31513 +
             (C12793 * C16119 + C12792 * C16115 +
              (C113 * C2404 + C47721 * C2409) * C16120 +
              (C113 * C2410 + C47721 * C2413) * C47802) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47854 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47842 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C3274 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C47815) *
              C2620 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C47854 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47842 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C3274 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47517 * C47860 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47622 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C3274) *
              C47517 * C47853 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C3274 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47622) *
              C47517 * C47840 +
          (((C32092 + C32093 + C32094 + C32095) * C31513 +
            (C556 * C16119 + C555 * C16115 +
             (C113 * C489 + C47721 * C508) * C16120 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47862 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47859 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C33524 + C33525 + C33526 + C33527) * C47835) *
               C47850 -
           ((C33528 + C33529 + C33530 + C33531) * C47835 +
            (C33527 + C33526 + C33525 + C33524) * C31513) *
               C47831) *
              C47517 * C2620 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47859 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47862 -
           ((C33860 + C33861 + C33862 + C33863) * C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C47850 +
           ((C33863 + C33862 + C33861 + C33860) * C31513 +
            (C12581 * C16119 + C12580 * C16115 +
             (C113 * C2005 + C47721 * C2016) * C16120 +
             (C113 * C2017 + C47721 * C2023) * C47802) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47618 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47625 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C33524 + C33525 + C33526 + C33527) * C47835) *
               C3782) *
              C47517 * C47494 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47625 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47618 -
           ((C33860 + C33861 + C33862 + C33863) * C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C3782) *
              C47517 * C47503 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47618 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47625 +
           ((C31831 + C31830 + C31829 + C31828) * C31513 +
            (C2302 * C16119 + C2301 * C16115 +
             (C113 * C2288 + C47721 * C2289) * C16120 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C3274 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47517 * C47860 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47622 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C3274) *
              C47517 * C47853 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C3274 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47622) *
              C47517 * C47840 +
          (((C32092 + C32093 + C32094 + C32095) * C31513 +
            (C556 * C16119 + C555 * C16115 +
             (C113 * C489 + C47721 * C508) * C16120 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C3274 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47854 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C3274) *
               C47842 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C3274 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C47815) *
              C2620 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C3274) *
               C47854 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C3274 -
            ((C33726 + C33727 + C33728 + C33729) * C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47842 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C47783 -
           ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
             C11294 * C16119) *
                C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47580) *
              C656 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C959 * C16119 + C960 * C16115 + C961 * C16120 + C962 * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47783) *
              C657 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C47783 -
           ((C963 * C47802 + C964 * C16120 + C962 * C16115 + C961 * C16119) *
                C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47580) *
              C658 +
          (((C364 * C16119 + C365 * C16115 + C670 * C16120 + C669 * C47802) *
                C31513 +
            (C964 * C16119 + C963 * C16115 +
             (C113 * C930 + C47721 * C939) * C16120 +
             (C113 * C940 + C47721 * C945) * C47802) *
                C47835) *
               C47535 * C47580 -
           ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
                C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1416 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1417 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47535 * C1418 -
           ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
             C12178 * C16119) *
                C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47535 * C47825) *
              C47769 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1417 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1416 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C1418 +
           ((C1438 * C16119 + C1437 * C16115 + C1436 * C16120 +
             C1435 * C47802) *
                C31513 +
            (C11843 * C16119 + C11842 * C16115 +
             (C113 * C1700 + C47721 * C1705) * C16120 +
             (C113 * C1706 + C47721 * C1709) * C47802) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C47783 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C11692 * C16119 + C11693 * C16115 + C2186 * C16120 +
              C2185 * C47802) *
                 C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C288 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C47783 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C16120 + C2185 * C16115 +
              C2186 * C16119) *
                 C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C47580) *
              C289 +
          ((((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                 C31513 +
             (C31824 + C31825 + C31826 + C31827) * C47835) *
                C47784 -
            ((C31828 + C31829 + C31830 + C31831) * C47835 +
             (C31827 + C31826 + C31825 + C31824) * C31513) *
                C47622) *
               C47783 +
           (((C32298 + C32299 + C32300 + C32301) * C31513 +
             (C2184 * C16119 + C2183 * C16115 +
              (C113 * C2170 + C47721 * C2171) * C16120 +
              (C113 * C2172 + C47721 * C2173) * C47802) *
                 C47835) *
                C47622 -
            ((C32301 + C32300 + C32299 + C32298) * C47835 +
             (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                 C31513) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47784 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C1416 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47622 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47784) *
              C1417 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47784 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47622) *
              C1418 +
          (((C33146 + C33147 + C33148 + C33149) * C31513 +
            ((C113 * C6083 + C47721 * C6085) * C16119 +
             (C113 * C6086 + C47721 * C6089) * C16115 +
             (C113 * C6084 + C47721 * C6087) * C16120 +
             (C113 * C6088 + C47721 * C6090) * C47802) *
                C47835) *
               C47622 -
           ((C33149 + C33148 + C33147 + C33146) * C47835 +
            (C1437 * C47802 + C1438 * C16120 +
             (C113 * C1158 + C47721 * C1168) * C16115 +
             (C113 * C1150 + C47721 * C1159) * C16119) *
                C31513) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C10814 * C16119 + C10815 * C16115 + C548 * C16120 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
             C11294 * C16119) *
                C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C959 * C16119 + C960 * C16115 + C961 * C16120 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
                C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C289 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C16120 + C962 * C16115 + C961 * C16119) *
                C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47842 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C10814 * C16119 + C10815 * C16115 + C548 * C16120 + C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
               C47835 +
           (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
               C31513) *
              C47535 * C47517 * C109 +
          ((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
               C31513 +
           (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
               C47835 +
           (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
               C31513) *
              C47535 * C47517 * C111 +
          ((C172 * C16119 + C173 * C16115 + C175 * C16120 + C174 * C47802) *
               C31513 +
           (C780 * C16119 + C779 * C16115 +
            (C113 * C770 + C47721 * C771) * C16120 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47855 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47844 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C47517 * C288 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47844 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47855 -
           ((C2301 * C47802 + C2302 * C16120 + C2303 * C16115 +
             C2304 * C16119) *
                C47835 +
            (C31823 + C31822 + C31821 + C31820) * C31513) *
               C47818) *
              C47517 * C289 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47855 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47844 +
           ((C31831 + C31830 + C31829 + C31828) * C31513 +
            (C2302 * C16119 + C2301 * C16115 +
             (C113 * C2288 + C47721 * C2289) * C16120 +
             (C113 * C2290 + C47721 * C2291) * C47802) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1074 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1075 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C1074 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C1075 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C31808 + C31809 + C31810 + C31811) * C47835) *
              C47535 * C1142 -
          ((C32293 + C32292 + C32291 + C32290) * C47835 +
           (C358 * C47802 + C359 * C16120 +
            (C113 * C305 + C47721 * C323) * C16115 +
            (C113 * C293 + C47721 * C306) * C16119) *
               C31513) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C16119 +
            (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
            C361 * C47802) *
               C31513 +
           (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
            C12178 * C16119) *
               C47835 +
           (C1437 * C47802 + C1438 * C16120 +
            (C113 * C1158 + C47721 * C1168) * C16115 +
            (C113 * C1150 + C47721 * C1159) * C16119) *
               C31513) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C16119 +
            (C113 * C1161 + C47721 * C1169) * C16115 +
            (C113 * C1152 + C47721 * C1162) * C16120 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C31513 +
           ((C113 * C6569 + C47721 * C6571) * C16119 +
            (C113 * C6572 + C47721 * C6575) * C16115 +
            (C113 * C6570 + C47721 * C6573) * C16120 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47855 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47844 +
           ((C31815 + C31814 + C31813 + C31812) * C31513 +
            (C12578 * C16119 + C12579 * C16115 + C2304 * C16120 +
             C2303 * C47802) *
                C47835) *
               C47818) *
              C1074 +
          (((C32290 + C32291 + C32292 + C32293) * C31513 +
            (C32676 + C32677 + C32678 + C32679) * C47835) *
               C47844 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47855 -
           ((C12792 * C47802 + C12793 * C16120 + C13064 * C16115 +
             C13065 * C16119) *
                C47835 +
            (C32679 + C32678 + C32677 + C32676) * C31513) *
               C47818) *
              C1075 +
          ((((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C32680 + C32681 + C32682 + C32683) * C47835) *
               C47855 -
           ((C32684 + C32685 + C32686 + C32687) * C47835 +
            (C32683 + C32682 + C32681 + C32680) * C31513) *
               C47844 +
           ((C32687 + C32686 + C32685 + C32684) * C31513 +
            ((C113 * C7437 + C47721 * C7439) * C16119 +
             (C113 * C7440 + C47721 * C7443) * C16115 +
             (C113 * C7438 + C47721 * C7441) * C16120 +
             (C113 * C7442 + C47721 * C7444) * C47802) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47784 -
           ((C31812 + C31813 + C31814 + C31815) * C47835 +
            (C31811 + C31810 + C31809 + C31808) * C31513) *
               C47622) *
              C47517 * C656 +
          (((C31816 + C31817 + C31818 + C31819) * C31513 +
            (C31820 + C31821 + C31822 + C31823) * C47835) *
               C47622 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47784) *
              C47517 * C657 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47784 -
           ((C31828 + C31829 + C31830 + C31831) * C47835 +
            (C31827 + C31826 + C31825 + C31824) * C31513) *
               C47622) *
              C47517 * C658 +
          (((C32092 + C32093 + C32094 + C32095) * C31513 +
            (C556 * C16119 + C555 * C16115 +
             (C113 * C489 + C47721 * C508) * C16120 +
             (C113 * C509 + C47721 * C519) * C47802) *
                C47835) *
               C47622 -
           ((C32095 + C32094 + C32093 + C32092) * C47835 +
            (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
                C31513) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C16119 +
              (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
              C167 * C47802) *
                 C31513 +
             (C31808 + C31809 + C31810 + C31811) * C47835) *
                C47784 -
            ((C31812 + C31813 + C31814 + C31815) * C47835 +
             (C31811 + C31810 + C31809 + C31808) * C31513) *
                C47622) *
               C1074 +
           (((C32290 + C32291 + C32292 + C32293) * C31513 +
             (C32676 + C32677 + C32678 + C32679) * C47835) *
                C47622 -
            ((C32293 + C32292 + C32291 + C32290) * C47835 +
             (C358 * C47802 + C359 * C16120 +
              (C113 * C305 + C47721 * C323) * C16115 +
              (C113 * C293 + C47721 * C306) * C16119) *
                 C31513) *
                C47784) *
               C1075 +
           ((((C113 * C294 + C47721 * C307) * C16119 +
              (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
              C361 * C47802) *
                 C31513 +
             (C32680 + C32681 + C32682 + C32683) * C47835) *
                C47784 -
            ((C32684 + C32685 + C32686 + C32687) * C47835 +
             (C32683 + C32682 + C32681 + C32680) * C31513) *
                C47622) *
               C47815) *
              C47769 +
          ((((C31816 + C31817 + C31818 + C31819) * C31513 +
             (C31820 + C31821 + C31822 + C31823) * C47835) *
                C47622 -
            ((C31819 + C31818 + C31817 + C31816) * C47835 +
             (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                 C31513) *
                C47784) *
               C1074 +
           (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                 C31513 +
             (C32294 + C32295 + C32296 + C32297) * C47835) *
                C47784 -
            ((C2183 * C47802 + C2184 * C16120 + C2185 * C16115 +
              C2186 * C16119) *
                 C47835 +
             (C32297 + C32296 + C32295 + C32294) * C31513) *
                C47622) *
               C1075 +
           (((C33012 + C33013 + C33014 + C33015) * C31513 +
             (C11697 * C16119 + C11696 * C16115 +
              (C113 * C1290 + C47721 * C1307) * C16120 +
              (C113 * C1308 + C47721 * C1317) * C47802) *
                 C47835) *
                C47622 -
            ((C33015 + C33014 + C33013 + C33012) * C47835 +
             (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                 C31513) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C10814 * C16119 + C10815 * C16115 + C548 * C16120 + C547 * C47802) *
               C47835) *
              C47535 * C47517 * C108 -
          ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
               C47835 +
           (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
               C31513) *
              C47535 * C47517 * C109 +
          ((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
               C31513 +
           (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
               C47835) *
              C47535 * C47517 * C110 -
          ((C779 * C47802 + C780 * C16120 + C554 * C16115 + C553 * C16119) *
               C47835 +
           (C173 * C47802 + C172 * C16120 + C170 * C16115 + C171 * C16119) *
               C31513) *
              C47535 * C47517 * C111 +
          ((C172 * C16119 + C173 * C16115 + C175 * C16120 + C174 * C47802) *
               C31513 +
           (C780 * C16119 + C779 * C16115 +
            (C113 * C770 + C47721 * C771) * C16120 +
            (C113 * C772 + C47721 * C773) * C47802) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C10814 * C16119 + C10815 * C16115 + C548 * C16120 +
             C547 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C960 * C47802 + C959 * C16120 + C11295 * C16115 +
             C11294 * C16119) *
                C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C47842 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C288 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C959 * C16119 + C960 * C16115 + C961 * C16120 + C962 * C47802) *
                C47835) *
               C47535 * C47842 -
           ((C545 * C47802 + C546 * C16120 + C547 * C16115 + C548 * C16119) *
                C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C47854 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C289 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C546 * C16119 + C545 * C16115 + C553 * C16120 + C554 * C47802) *
                C47835) *
               C47535 * C47854 -
           ((C963 * C47802 + C964 * C16120 + C962 * C16115 + C961 * C16119) *
                C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C47842 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C16119 +
             (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
             C167 * C47802) *
                C31513 +
            (C31808 + C31809 + C31810 + C31811) * C47835) *
               C47535 * C1074 -
           ((C32293 + C32292 + C32291 + C32290) * C47835 +
            (C358 * C47802 + C359 * C16120 +
             (C113 * C305 + C47721 * C323) * C16115 +
             (C113 * C293 + C47721 * C306) * C16119) *
                C31513) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C16119 +
             (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
             C361 * C47802) *
                C31513 +
            (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
             C1599 * C47802) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C16119 + C358 * C16115 + C357 * C16120 + C356 * C47802) *
                C31513 +
            (C32294 + C32295 + C32296 + C32297) * C47835) *
               C47535 * C1075 -
           ((C31819 + C31818 + C31817 + C31816) * C47835 +
            (C169 * C47802 + C168 * C16120 + C167 * C16115 + C166 * C16119) *
                C31513) *
               C47535 * C1074 -
           ((C1597 * C47802 + C1598 * C16120 + C1599 * C16115 +
             C1600 * C16119) *
                C47835 +
            (C363 * C47802 + C362 * C16120 + C361 * C16115 + C360 * C16119) *
                C31513) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C16119 + C169 * C16115 + C171 * C16120 + C170 * C47802) *
                C31513 +
            (C31824 + C31825 + C31826 + C31827) * C47835) *
               C47535 * C1074 -
           ((C32301 + C32300 + C32299 + C32298) * C47835 +
            (C365 * C47802 + C364 * C16120 + C356 * C16115 + C357 * C16119) *
                C31513) *
               C47535 * C1075 +
           ((C362 * C16119 + C363 * C16115 + C367 * C16120 + C366 * C47802) *
                C31513 +
            (C1598 * C16119 + C1597 * C16115 +
             (C113 * C1584 + C47721 * C1585) * C16120 +
             (C113 * C1586 + C47721 * C1587) * C47802) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C16119 +
            (C113 * C125 + C47721 * C138) * C16115 + C166 * C16120 +
            C167 * C47802) *
               C31513 +
           (C31808 + C31809 + C31810 + C31811) * C47835) *
              C47535 * C1142 -
          ((C32293 + C32292 + C32291 + C32290) * C47835 +
           (C358 * C47802 + C359 * C16120 +
            (C113 * C305 + C47721 * C323) * C16115 +
            (C113 * C293 + C47721 * C306) * C16119) *
               C31513) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C16119 +
            (C113 * C308 + C47721 * C324) * C16115 + C360 * C16120 +
            C361 * C47802) *
               C31513 +
           (C11694 * C16119 + C11695 * C16115 + C1600 * C16120 +
            C1599 * C47802) *
               C47835) *
              C47535 * C1144 -
          ((C11842 * C47802 + C11843 * C16120 + C12179 * C16115 +
            C12178 * C16119) *
               C47835 +
           (C1437 * C47802 + C1438 * C16120 +
            (C113 * C1158 + C47721 * C1168) * C16115 +
            (C113 * C1150 + C47721 * C1159) * C16119) *
               C31513) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C16119 +
            (C113 * C1161 + C47721 * C1169) * C16115 +
            (C113 * C1152 + C47721 * C1162) * C16120 +
            (C113 * C1163 + C47721 * C1170) * C47802) *
               C31513 +
           ((C113 * C6569 + C47721 * C6571) * C16119 +
            (C113 * C6572 + C47721 * C6575) * C16115 +
            (C113 * C6570 + C47721 * C6573) * C16120 +
            (C113 * C6574 + C47721 * C6576) * C47802) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C47576 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47583 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47535 * C2880) *
              C47494 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47583 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47576 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C2880) *
              C47503 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47576 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47583 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47576 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C47583 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C47784 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C2880) *
              C2620 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C47576 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47583 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C47784) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C47861 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47857 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47535 * C47847 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47535 * C47825) *
              C2620 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47857 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47861 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47847 +
           (((C6233 + C6232) * C21796 + (C6231 + C6230) * C47464) * C31513 +
            ((C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                 C21796 +
             (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47580) *
              C47860 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47580 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C2512) *
              C47853 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C2512 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47580) *
              C47840 +
          ((((C5341 + C5340) * C21796 + (C5339 + C5338) * C47464) * C31513 +
            ((C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C21796 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47855 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47844 +
            (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) *
                 C31513 +
             ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                 C47835) *
                C47818) *
               C2512 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47844 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47855 -
            (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) *
                 C47835 +
             ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                 C31513) *
                C47818) *
               C47580) *
              C2620 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47844 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47855 -
            (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
             ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
                C47818) *
               C2512 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47855 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47844 +
            (((C7165 + C7164) * C21796 + (C7163 + C7162) * C47464) * C31513 +
             ((C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                  C21796 +
              (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                  C47464) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C2512 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C47580) *
              C47494 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C2512 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C47503 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C47784 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C2512 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C47784) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C2512 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47580) *
              C47860 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47580 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C2512) *
              C47853 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C2512 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47580) *
              C47840 +
          ((((C5341 + C5340) * C21796 + (C5339 + C5338) * C47464) * C31513 +
            ((C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C21796 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C47861 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47857 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47535 * C47847 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47535 * C47825) *
              C2620 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47857 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47861 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47847 +
           (((C6233 + C6232) * C21796 + (C6231 + C6230) * C47464) * C31513 +
            ((C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                 C21796 +
             (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47576 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47583 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C3274 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C2880) *
              C47769 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C47576 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47583 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C3274) *
               C2880) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47618 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47625 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C3782) *
              C47576 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47625 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47618 -
           (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) * C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C3782) *
              C47583 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47618 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47625 +
           (((C38235 + C38234) * C21796 + (C38233 + C38232) * C47464) * C31513 +
            ((C4759 * C7437 + C4755 * C7439 + C4760 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C4759 * C7440 + C4755 * C7443 + C4760 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C3782) *
              C2880) *
         C47489) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C3274 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47861 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47622 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C3274) *
              C47857 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C3274 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47622) *
              C47847 +
          ((((C38698 + C38699) * C21796 + (C38700 + C38701) * C47464) * C31513 +
            ((C4759 * C6083 + C4755 * C6085 + C4760 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C4759 * C6086 + C4755 * C6089 + C4760 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C2512 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47580) *
              C47851 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C2512 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C47838 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C3274 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C2512 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47862 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47859 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C47850 -
           (((C39096 + C39097) * C47464 + (C39098 + C39099) * C21796) * C47835 +
            ((C39095 + C39094) * C47464 + (C39093 + C39092) * C21796) *
                C31513) *
               C47831) *
              C2512 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47859 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47862 -
           (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) * C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C47850 +
           (((C39565 + C39564) * C21796 + (C39563 + C39562) * C47464) * C31513 +
            ((C4759 * C6951 + C4755 * C6953 + C4760 * C23277 +
              C47833 * C23278) *
                 C21796 +
             (C4759 * C6954 + C4755 * C6957 + C4760 * C23279 +
              C47833 * C23280) *
                 C47464) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47618 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47625 +
            (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) *
                 C31513 +
             ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                 C47835) *
                C3782) *
               C2512 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47625 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47618 -
            (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) *
                 C47835 +
             ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                 C31513) *
                C3782) *
               C47580) *
              C47769 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47625 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47618 -
            (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
             ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
                C3782) *
               C2512 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47618 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47625 +
            (((C7165 + C7164) * C21796 + (C7163 + C7162) * C47464) * C31513 +
             ((C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                  C21796 +
              (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                  C47464) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C2512 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47580) *
              C47851 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C2512 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C47838 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C3274 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C2512 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C3274 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47861 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47622 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C3274) *
              C47857 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C3274 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47622) *
              C47847 +
          ((((C38698 + C38699) * C21796 + (C38700 + C38701) * C47464) * C31513 +
            ((C4759 * C6083 + C4755 * C6085 + C4760 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C4759 * C6086 + C4755 * C6089 + C4760 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1416 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1417 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47535 * C1418 -
           (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                 C47464 +
             (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                 C21796) *
                C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47535 * C47825) *
              C47769 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1417 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1416 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C1418 +
           (((C6233 + C6232) * C21796 + (C6231 + C6230) * C47464) * C31513 +
            ((C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                 C21796 +
             (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 + C4755 * C941) *
                 C47464 +
             (C4760 * C1287 + C47833 * C1302 + C4759 * C926 + C4755 * C931) *
                 C21796) *
                C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47580) *
              C656 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47580 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47783) *
              C657 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47783 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47580) *
              C658 +
          ((((C5341 + C5340) * C21796 + (C5339 + C5338) * C47464) * C31513 +
            ((C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C21796 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C1820 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C1821 +
            (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) *
                 C31513 +
             ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                 C47835) *
                C47818) *
               C47783 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C1821 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C1820 -
            (((C4760 * C7440 + C47833 * C7443 + C4759 * C2406 + C4755 * C2411) *
                  C47464 +
              (C4760 * C7437 + C47833 * C7439 + C4759 * C2402 + C4755 * C2405) *
                  C21796) *
                 C47835 +
             ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                 C31513) *
                C47818) *
               C47580) *
              C47769 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C1821 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C1820 -
            (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
             ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
                C47818) *
               C47783 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C1820 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C1821 +
            (((C7165 + C7164) * C21796 + (C7163 + C7162) * C47464) * C31513 +
             ((C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                  C21796 +
              (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                  C47464) *
                 C47835) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47784 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C1416 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47622 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47784) *
              C1417 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47784 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47622) *
              C1418 +
          ((((C38698 + C38699) * C21796 + (C38700 + C38701) * C47464) * C31513 +
            ((C4759 * C6083 + C4755 * C6085 + C4760 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C4759 * C6086 + C4755 * C6089 + C4760 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47783 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C4759 * C1284 + C4755 * C1296 + C4760 * C1288 + C47833 * C1303) *
                  C21796 +
              (C4759 * C1295 + C4755 * C1311 + C4760 * C1304 + C47833 * C1315) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C47580) *
              C288 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C47783 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C289 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C47784 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C47783 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C2284 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C2285 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C2286 -
           (((C39096 + C39097) * C47464 + (C39098 + C39099) * C21796) * C47835 +
            ((C39095 + C39094) * C47464 + (C39093 + C39092) * C21796) *
                C31513) *
               C47831) *
              C47783 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C2285 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C2284 -
           (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) * C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C2286 +
           (((C39565 + C39564) * C21796 + (C39563 + C39562) * C47464) * C31513 +
            ((C4759 * C6951 + C4755 * C6953 + C4760 * C23277 +
              C47833 * C23278) *
                 C21796 +
             (C4759 * C6954 + C4755 * C6957 + C4760 * C23279 +
              C47833 * C23280) *
                 C47464) *
                C47835) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                    C21796 +
                (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                    C47464) *
                   C31513 +
               ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                    C21796 +
                (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                    C47464) *
                   C47835) *
                  C47535 * C47517 * C108 -
              (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
               ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                  C47535 * C47517 * C109 +
              (((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
               ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                  C47535 * C47517 * C110 -
              (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
               ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
                  C47535 * C47517 * C111 +
              (((C4811 + C4810) * C21796 + (C4809 + C4808) * C47464) * C31513 +
               ((C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                    C21796 +
                (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                    C47464) *
                   C47835) *
                  C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                     C21796 +
                 (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                     C47464) *
                    C31513 +
                ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                     C21796 +
                 (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                     C47464) *
                    C47835) *
                   C47535 * C47854 -
               (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 +
                  C4755 * C941) *
                     C47464 +
                 (C4760 * C1287 + C47833 * C1302 + C4759 * C926 +
                  C4755 * C931) *
                     C21796) *
                    C47835 +
                ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                     C47464 +
                 (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                     C21796) *
                    C31513) *
                   C47535 * C47842 +
               (((C4759 * C294 + C4755 * C307 + C4760 * C1150 +
                  C47833 * C1159) *
                     C21796 +
                 (C4759 * C308 + C4755 * C324 + C4760 * C1158 +
                  C47833 * C1168) *
                     C47464) *
                    C31513 +
                ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 +
                  C47833 * C1701) *
                     C21796 +
                 (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 +
                  C47833 * C1707) *
                     C47464) *
                    C47835) *
                   C47535 * C47815) *
                  C288 +
              ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
                ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) *
                    C47835) *
                   C47535 * C47842 -
               (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
                ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) *
                    C31513) *
                   C47535 * C47854 -
               (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
                ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) *
                    C31513) *
                   C47535 * C47815) *
                  C289 +
              ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
                ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) *
                    C47835) *
                   C47535 * C47854 -
               (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
                ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) *
                    C31513) *
                   C47535 * C47842 +
               (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
                ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 +
                  C47833 * C1705) *
                     C21796 +
                 (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 +
                  C47833 * C1709) *
                     C47464) *
                    C47835) *
                   C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47855 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47844 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C288 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47844 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47855 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C47818) *
              C47517 * C289 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47855 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47844 +
           (((C5199 + C5198) * C21796 + (C5197 + C5196) * C47464) * C31513 +
            ((C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                 C21796 +
             (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1075 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1074 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C1074 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C1075 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) * C47835) *
              C47535 * C1142 -
          (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
           ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C47464 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C21796) *
               C31513) *
              C47535 * C1143 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C21796 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C47464) *
               C31513 +
           ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                C21796 +
            (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                C47464 +
            (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                C21796) *
               C47835 +
           ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C47464 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C21796) *
               C31513) *
              C47535 * C1145 +
          (((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
                C21796 +
            (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
                C47464) *
               C31513 +
           ((C4759 * C6569 + C4755 * C6571 + C4760 * C22991 + C47833 * C22992) *
                C21796 +
            (C4759 * C6572 + C4755 * C6575 + C4760 * C22993 + C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47855 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47844 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C1074 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47844 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47855 -
           (((C4760 * C7440 + C47833 * C7443 + C4759 * C2406 + C4755 * C2411) *
                 C47464 +
             (C4760 * C7437 + C47833 * C7439 + C4759 * C2402 + C4755 * C2405) *
                 C21796) *
                C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C47818) *
              C1075 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47855 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47844 +
           (((C38235 + C38234) * C21796 + (C38233 + C38232) * C47464) * C31513 +
            ((C4759 * C7437 + C4755 * C7439 + C4760 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C4759 * C7440 + C4755 * C7443 + C4760 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C1820 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C1821 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C1821 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C1820 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C47818) *
              C47517 * C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C1820 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C1821 +
           (((C5199 + C5198) * C21796 + (C5197 + C5196) * C47464) * C31513 +
            ((C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                 C21796 +
             (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C1820 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C1821 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47854 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C1821 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C1820 -
           (((C4760 * C7440 + C47833 * C7443 + C4759 * C2406 + C4755 * C2411) *
                 C47464 +
             (C4760 * C7437 + C47833 * C7439 + C4759 * C2402 + C4755 * C2405) *
                 C21796) *
                C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C47818) *
              C47842 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C1820 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C1821 +
           (((C38235 + C38234) * C21796 + (C38233 + C38232) * C47464) * C31513 +
            ((C4759 * C7437 + C4755 * C7439 + C4760 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C4759 * C7440 + C4755 * C7443 + C4760 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) * C47835) *
              C1995 -
          (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
           ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) * C31513) *
              C1996 +
          (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
           ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) * C47835) *
              C1997 -
          (((C39096 + C39097) * C47464 + (C39098 + C39099) * C21796) * C47835 +
           ((C39095 + C39094) * C47464 + (C39093 + C39092) * C21796) * C31513) *
              C1998 +
          (((C39099 + C39098) * C21796 + (C39097 + C39096) * C47464) * C31513 +
           ((C4759 * C12555 + C4755 * C12557 + C4760 * C27973 +
             C47833 * C27974) *
                C21796 +
            (C4759 * C12558 + C4755 * C12561 + C4760 * C27975 +
             C47833 * C27976) *
                C47464) *
               C47835) *
              C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C1074 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C1075 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C47784 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C47815) *
              C47769 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C1074 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C1075 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47784 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47517 * C656 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47622 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47784) *
              C47517 * C657 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47784 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47622) *
              C47517 * C658 +
          ((((C5483 + C5482) * C21796 + (C5481 + C5480) * C47464) * C31513 +
            ((C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                 C21796 +
             (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C2284 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C2285 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C2286 -
           (((C39096 + C39097) * C47464 + (C39098 + C39099) * C21796) * C47835 +
            ((C39095 + C39094) * C47464 + (C39093 + C39092) * C21796) *
                C31513) *
               C47831) *
              C47517 * C47769 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C2285 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C2284 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C2286 +
           (((C7307 + C7306) * C21796 + (C7305 + C7304) * C47464) * C31513 +
            ((C4759 * C2004 + C4755 * C2014 + C4760 * C6952 + C47833 * C6955) *
                 C21796 +
             (C4759 * C2015 + C4755 * C2022 + C4760 * C6956 + C47833 * C6958) *
                 C47464) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                 C21796 +
             (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 + C4755 * C941) *
                 C47464 +
             (C4760 * C1287 + C47833 * C1302 + C4759 * C926 + C4755 * C931) *
                 C21796) *
                C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47842 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47842 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47854 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C289 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47854 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47842 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                C21796 +
            (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
           ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
              C47535 * C47517 * C109 +
          (((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
           ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
           ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
              C47535 * C47517 * C111 +
          (((C4811 + C4810) * C21796 + (C4809 + C4808) * C47464) * C31513 +
           ((C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C21796 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1075 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1074 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C1074 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C1075 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) * C47835) *
              C47535 * C1142 -
          (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
           ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C47464 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C21796) *
               C31513) *
              C47535 * C1143 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C21796 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C47464) *
               C31513 +
           ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                C21796 +
            (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                C47464 +
            (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                C21796) *
               C47835 +
           ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C47464 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C21796) *
               C31513) *
              C47535 * C1145 +
          (((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
                C21796 +
            (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
                C47464) *
               C31513 +
           ((C4759 * C6569 + C4755 * C6571 + C4760 * C22991 + C47833 * C22992) *
                C21796 +
            (C4759 * C6572 + C4755 * C6575 + C4760 * C22993 + C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C1820 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C1821 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47851 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C1821 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C1820 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C47818) *
              C47517 * C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C1820 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C1821 +
           (((C5199 + C5198) * C21796 + (C5197 + C5196) * C47464) * C31513 +
            ((C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                 C21796 +
             (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C1820 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C1821 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47854 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C1821 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C1820 -
           (((C4760 * C7440 + C47833 * C7443 + C4759 * C2406 + C4755 * C2411) *
                 C47464 +
             (C4760 * C7437 + C47833 * C7439 + C4759 * C2402 + C4755 * C2405) *
                 C21796) *
                C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C47818) *
              C47842 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C1820 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C1821 +
           (((C38235 + C38234) * C21796 + (C38233 + C38232) * C47464) * C31513 +
            ((C4759 * C7437 + C4755 * C7439 + C4760 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C4759 * C7440 + C4755 * C7443 + C4760 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47783 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47580) *
              C47494 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C47783 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C47503 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C3274 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C47783 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C3274) *
               C47580) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47618 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47625 +
            (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) *
                 C31513 +
             ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                 C47835) *
                C3782) *
               C47783 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47625 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47618 -
            (((C39562 + C39563) * C47464 + (C39564 + C39565) * C21796) *
                 C47835 +
             ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                 C31513) *
                C3782) *
               C47580) *
              C2620 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47625 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47618 -
            (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
             ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
                C3782) *
               C47783 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47618 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47625 +
            (((C7165 + C7164) * C21796 + (C7163 + C7162) * C47464) * C31513 +
             ((C4759 * C2403 + C4755 * C2407 + C4760 * C7438 + C47833 * C7441) *
                  C21796 +
              (C4759 * C2408 + C4755 * C2412 + C4760 * C7442 + C47833 * C7444) *
                  C47464) *
                 C47835) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47854 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47842 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C3274 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C47815) *
              C2620 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C47854 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47842 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C3274 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47517 * C47860 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47622 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C3274) *
              C47517 * C47853 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C3274 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47622) *
              C47517 * C47840 +
          ((((C5483 + C5482) * C21796 + (C5481 + C5480) * C47464) * C31513 +
            ((C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                 C21796 +
             (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47862 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47859 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C47850 -
           (((C39096 + C39097) * C47464 + (C39098 + C39099) * C21796) * C47835 +
            ((C39095 + C39094) * C47464 + (C39093 + C39092) * C21796) *
                C31513) *
               C47831) *
              C47517 * C2620 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47859 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47862 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C47850 +
           (((C7307 + C7306) * C21796 + (C7305 + C7304) * C47464) * C31513 +
            ((C4759 * C2004 + C4755 * C2014 + C4760 * C6952 + C47833 * C6955) *
                 C21796 +
             (C4759 * C2015 + C4755 * C2022 + C4760 * C6956 + C47833 * C6958) *
                 C47464) *
                C47835) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47618 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47625 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C39092 + C39093) * C21796 + (C39094 + C39095) * C47464) *
                C47835) *
               C3782) *
              C47517 * C47494 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47625 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47618 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C3782) *
              C47517 * C47503 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47618 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47625 +
           (((C5199 + C5198) * C21796 + (C5197 + C5196) * C47464) * C31513 +
            ((C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                 C21796 +
             (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                 C47464) *
                C47835) *
               C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C3274 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47517 * C47860 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47622 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C3274) *
              C47517 * C47853 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C3274 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47622) *
              C47517 * C47840 +
          ((((C5483 + C5482) * C21796 + (C5481 + C5480) * C47464) * C31513 +
            ((C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                 C21796 +
             (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C3274 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47854 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C3274) *
               C47842 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C3274 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C47815) *
              C2620 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C3274) *
               C47854 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C3274 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47842 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C47783 -
           (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 + C4755 * C941) *
                 C47464 +
             (C4760 * C1287 + C47833 * C1302 + C4759 * C926 + C4755 * C931) *
                 C21796) *
                C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47580) *
              C656 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47580 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47783) *
              C657 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47783 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47580) *
              C658 +
          ((((C5341 + C5340) * C21796 + (C5339 + C5338) * C47464) * C31513 +
            ((C4759 * C929 + C4755 * C938 + C4760 * C1584 + C47833 * C1585) *
                 C21796 +
             (C4759 * C937 + C4755 * C944 + C4760 * C1586 + C47833 * C1587) *
                 C47464) *
                C47835) *
               C47535 * C47580 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1416 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1417 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47535 * C1418 -
           (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                 C47464 +
             (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                 C21796) *
                C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47535 * C47825) *
              C47769 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1417 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1416 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C1418 +
           (((C6233 + C6232) * C21796 + (C6231 + C6230) * C47464) * C31513 +
            ((C4759 * C1699 + C4755 * C1703 + C4760 * C6570 + C47833 * C6573) *
                 C21796 +
             (C4759 * C1704 + C4755 * C1708 + C4760 * C6574 + C47833 * C6576) *
                 C47464) *
                C47835) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C47783 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C4759 * C1284 + C4755 * C1296 + C4760 * C1288 + C47833 * C1303) *
                  C21796 +
              (C4759 * C1295 + C4755 * C1311 + C4760 * C1304 + C47833 * C1315) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C47580) *
              C288 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C47783 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C47580) *
              C289 +
          (((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
             ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
                C47784 -
            (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
             ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
                C47622) *
               C47783 +
           ((((C5701 + C5700) * C21796 + (C5699 + C5698) * C47464) * C31513 +
             ((C4759 * C1282 + C4755 * C1292 + C4760 * C1290 + C47833 * C1307) *
                  C21796 +
              (C4759 * C1291 + C4755 * C1309 + C4760 * C1308 + C47833 * C1317) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
             ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47784 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C1416 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47622 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47784) *
              C1417 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47784 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47622) *
              C1418 +
          ((((C38698 + C38699) * C21796 + (C38700 + C38701) * C47464) * C31513 +
            ((C4759 * C6083 + C4755 * C6085 + C4760 * C22645 +
              C47833 * C22646) *
                 C21796 +
             (C4759 * C6086 + C4755 * C6089 + C4760 * C22647 +
              C47833 * C22648) *
                 C47464) *
                C47835) *
               C47622 -
           (((C38701 + C38700) * C47464 + (C38699 + C38698) * C21796) * C47835 +
            ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                 C47464 +
             (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                 C21796) *
                C31513) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                 C21796 +
             (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 + C4755 * C941) *
                 C47464 +
             (C4760 * C1287 + C47833 * C1302 + C4759 * C926 + C4755 * C931) *
                 C21796) *
                C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47842 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47842 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47854 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C289 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47854 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47842 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                C21796 +
            (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
           ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
              C47535 * C47517 * C109 +
          (((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
           ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
           ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
              C47535 * C47517 * C111 +
          (((C4811 + C4810) * C21796 + (C4809 + C4808) * C47464) * C31513 +
           ((C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C21796 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47855 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47844 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C288 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47844 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47855 -
           (((C7304 + C7305) * C47464 + (C7306 + C7307) * C21796) * C47835 +
            ((C5191 + C5190) * C47464 + (C5189 + C5188) * C21796) * C31513) *
               C47818) *
              C47517 * C289 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47855 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47844 +
           (((C5199 + C5198) * C21796 + (C5197 + C5196) * C47464) * C31513 +
            ((C4759 * C2000 + C4755 * C2007 + C4760 * C2404 + C47833 * C2409) *
                 C21796 +
             (C4759 * C2006 + C4755 * C2018 + C4760 * C2410 + C47833 * C2413) *
                 C47464) *
                C47835) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1075 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1074 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C1074 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C1075 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) * C47835) *
              C47535 * C1142 -
          (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
           ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C47464 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C21796) *
               C31513) *
              C47535 * C1143 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C21796 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C47464) *
               C31513 +
           ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                C21796 +
            (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                C47464 +
            (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                C21796) *
               C47835 +
           ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C47464 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C21796) *
               C31513) *
              C47535 * C1145 +
          (((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
                C21796 +
            (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
                C47464) *
               C31513 +
           ((C4759 * C6569 + C4755 * C6571 + C4760 * C22991 + C47833 * C22992) *
                C21796 +
            (C4759 * C6572 + C4755 * C6575 + C4760 * C22993 + C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47855 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47844 +
           (((C37359 + C37358) * C21796 + (C37357 + C37356) * C47464) * C31513 +
            ((C4759 * C2002 + C4755 * C2011 + C4760 * C2402 + C47833 * C2405) *
                 C21796 +
             (C4759 * C2010 + C4755 * C2020 + C4760 * C2406 + C47833 * C2411) *
                 C47464) *
                C47835) *
               C47818) *
              C1074 +
          ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) * C31513 +
            ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                C47835) *
               C47844 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47855 -
           (((C4760 * C7440 + C47833 * C7443 + C4759 * C2406 + C4755 * C2411) *
                 C47464 +
             (C4760 * C7437 + C47833 * C7439 + C4759 * C2402 + C4755 * C2405) *
                 C21796) *
                C47835 +
            ((C38227 + C38226) * C47464 + (C38225 + C38224) * C21796) *
                C31513) *
               C47818) *
              C1075 +
          ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                C47835) *
               C47855 -
           (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) * C47835 +
            ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                C31513) *
               C47844 +
           (((C38235 + C38234) * C21796 + (C38233 + C38232) * C47464) * C31513 +
            ((C4759 * C7437 + C4755 * C7439 + C4760 * C23623 +
              C47833 * C23624) *
                 C21796 +
             (C4759 * C7440 + C4755 * C7443 + C4760 * C23625 +
              C47833 * C23626) *
                 C47464) *
                C47835) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47784 -
           (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) * C47835 +
            ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                C31513) *
               C47622) *
              C47517 * C656 +
          ((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
            ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
               C47622 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47784) *
              C47517 * C657 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47784 -
           (((C5196 + C5197) * C47464 + (C5198 + C5199) * C21796) * C47835 +
            ((C5195 + C5194) * C47464 + (C5193 + C5192) * C21796) * C31513) *
               C47622) *
              C47517 * C658 +
          ((((C5483 + C5482) * C21796 + (C5481 + C5480) * C47464) * C31513 +
            ((C4759 * C487 + C4755 * C505 + C4760 * C2170 + C47833 * C2171) *
                 C21796 +
             (C4759 * C504 + C4755 * C517 + C4760 * C2172 + C47833 * C2173) *
                 C47464) *
                C47835) *
               C47622 -
           (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
            ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                  C21796 +
              (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                  C47464) *
                 C31513 +
             ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                 C47835) *
                C47784 -
            (((C37356 + C37357) * C47464 + (C37358 + C37359) * C21796) *
                 C47835 +
             ((C37355 + C37354) * C47464 + (C37353 + C37352) * C21796) *
                 C31513) *
                C47622) *
               C1074 +
           ((((C37822 + C37823) * C21796 + (C37824 + C37825) * C47464) *
                 C31513 +
             ((C38224 + C38225) * C21796 + (C38226 + C38227) * C47464) *
                 C47835) *
                C47622 -
            (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) *
                 C47835 +
             ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                  C47464 +
              (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                  C21796) *
                 C31513) *
                C47784) *
               C1075 +
           ((((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                  C21796 +
              (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                  C47464) *
                 C31513 +
             ((C38228 + C38229) * C21796 + (C38230 + C38231) * C47464) *
                 C47835) *
                C47784 -
            (((C38232 + C38233) * C47464 + (C38234 + C38235) * C21796) *
                 C47835 +
             ((C38231 + C38230) * C47464 + (C38229 + C38228) * C21796) *
                 C31513) *
                C47622) *
               C47815) *
              C47769 +
          (((((C5187 + C5186) * C21796 + (C5185 + C5184) * C47464) * C31513 +
             ((C5188 + C5189) * C21796 + (C5190 + C5191) * C47464) * C47835) *
                C47622 -
            (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
             ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
                C47784) *
               C1074 +
           ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
             ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
                C47784 -
            (((C7162 + C7163) * C47464 + (C7164 + C7165) * C21796) * C47835 +
             ((C5697 + C5696) * C47464 + (C5695 + C5694) * C21796) * C31513) *
                C47622) *
               C1075 +
           ((((C6439 + C6438) * C21796 + (C6437 + C6436) * C47464) * C31513 +
             ((C4759 * C1289 + C4755 * C1305 + C4760 * C6084 + C47833 * C6087) *
                  C21796 +
              (C4759 * C1306 + C4755 * C1316 + C4760 * C6088 + C47833 * C6090) *
                  C47464) *
                 C47835) *
                C47622 -
            (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
             ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                C21796 +
            (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                C47464) *
               C47835) *
              C47535 * C47517 * C108 -
          (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
           ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
              C47535 * C47517 * C109 +
          (((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
           ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
              C47535 * C47517 * C110 -
          (((C5480 + C5481) * C47464 + (C5482 + C5483) * C21796) * C47835 +
           ((C4807 + C4806) * C47464 + (C4805 + C4804) * C21796) * C31513) *
              C47535 * C47517 * C111 +
          (((C4811 + C4810) * C21796 + (C4809 + C4808) * C47464) * C31513 +
           ((C4759 * C488 + C4755 * C507 + C4760 * C930 + C47833 * C939) *
                C21796 +
            (C4759 * C506 + C4755 * C518 + C4760 * C940 + C47833 * C945) *
                C47464) *
               C47835) *
              C47535 * C47517 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C4759 * C482 + C4755 * C495 + C4760 * C926 + C47833 * C931) *
                 C21796 +
             (C4759 * C494 + C4755 * C512 + C4760 * C932 + C47833 * C941) *
                 C47464) *
                C47835) *
               C47535 * C47854 -
           (((C4760 * C1301 + C47833 * C1314 + C4759 * C932 + C4755 * C941) *
                 C47464 +
             (C4760 * C1287 + C47833 * C1302 + C4759 * C926 + C4755 * C931) *
                 C21796) *
                C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C47842 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C288 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C47842 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C47854 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C289 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C47854 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C47842 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                 C21796 +
             (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                 C47464) *
                C31513 +
            ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) *
                C47835) *
               C47535 * C1074 -
           (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
            ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                 C47464 +
             (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                 C21796) *
                C31513) *
               C47535 * C1075 +
           (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                 C21796 +
             (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                 C47464) *
                C31513 +
            ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                 C21796 +
             (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47851 +
          ((((C4993 + C4992) * C21796 + (C4991 + C4990) * C47464) * C31513 +
            ((C5694 + C5695) * C21796 + (C5696 + C5697) * C47464) * C47835) *
               C47535 * C1075 -
           (((C5184 + C5185) * C47464 + (C5186 + C5187) * C21796) * C47835 +
            ((C4799 + C4798) * C47464 + (C4797 + C4796) * C21796) * C31513) *
               C47535 * C1074 -
           (((C6436 + C6437) * C47464 + (C6438 + C6439) * C21796) * C47835 +
            ((C4997 + C4996) * C47464 + (C4995 + C4994) * C21796) * C31513) *
               C47535 * C47815) *
              C47838 +
          ((((C4803 + C4802) * C21796 + (C4801 + C4800) * C47464) * C31513 +
            ((C5192 + C5193) * C21796 + (C5194 + C5195) * C47464) * C47835) *
               C47535 * C1074 -
           (((C5698 + C5699) * C47464 + (C5700 + C5701) * C21796) * C47835 +
            ((C5001 + C5000) * C47464 + (C4999 + C4998) * C21796) * C31513) *
               C47535 * C1075 +
           (((C5005 + C5004) * C21796 + (C5003 + C5002) * C47464) * C31513 +
            ((C4759 * C1285 + C4755 * C1298 + C4760 * C1700 + C47833 * C1705) *
                 C21796 +
             (C4759 * C1297 + C4755 * C1312 + C4760 * C1706 + C47833 * C1709) *
                 C47464) *
                C47835) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4759 * C117 + C4755 * C124 + C4760 * C293 + C47833 * C306) *
                C21796 +
            (C4759 * C125 + C4755 * C138 + C4760 * C305 + C47833 * C323) *
                C47464) *
               C31513 +
           ((C37352 + C37353) * C21796 + (C37354 + C37355) * C47464) * C47835) *
              C47535 * C1142 -
          (((C37825 + C37824) * C47464 + (C37823 + C37822) * C21796) * C47835 +
           ((C4760 * C308 + C47833 * C324 + C4759 * C305 + C4755 * C323) *
                C47464 +
            (C4760 * C294 + C47833 * C307 + C4759 * C293 + C4755 * C306) *
                C21796) *
               C31513) *
              C47535 * C1143 +
          (((C4759 * C294 + C4755 * C307 + C4760 * C1150 + C47833 * C1159) *
                C21796 +
            (C4759 * C308 + C4755 * C324 + C4760 * C1158 + C47833 * C1168) *
                C47464) *
               C31513 +
           ((C4759 * C1287 + C4755 * C1302 + C4760 * C1698 + C47833 * C1701) *
                C21796 +
            (C4759 * C1301 + C4755 * C1314 + C4760 * C1702 + C47833 * C1707) *
                C47464) *
               C47835) *
              C47535 * C1144 -
          (((C4760 * C6572 + C47833 * C6575 + C4759 * C1702 + C4755 * C1707) *
                C47464 +
            (C4760 * C6569 + C47833 * C6571 + C4759 * C1698 + C4755 * C1701) *
                C21796) *
               C47835 +
           ((C4760 * C1161 + C47833 * C1169 + C4759 * C1158 + C4755 * C1168) *
                C47464 +
            (C4760 * C1151 + C47833 * C1160 + C4759 * C1150 + C4755 * C1159) *
                C21796) *
               C31513) *
              C47535 * C1145 +
          (((C4759 * C1151 + C4755 * C1160 + C4760 * C5929 + C47833 * C5931) *
                C21796 +
            (C4759 * C1161 + C4755 * C1169 + C4760 * C5932 + C47833 * C5935) *
                C47464) *
               C31513 +
           ((C4759 * C6569 + C4755 * C6571 + C4760 * C22991 + C47833 * C22992) *
                C21796 +
            (C4759 * C6572 + C4755 * C6575 + C4760 * C22993 + C47833 * C22994) *
                C47464) *
               C47835) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C47576 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47583 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C47535 * C2880) *
                       C47494 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + C44292 * C42593) *
                        C47535 * C47583 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47576 -
                    ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C2880) *
                       C47503 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C47576 -
                    ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47583 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C2880) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C47784 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C47576 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C47784) *
                        C47583 +
                    ((((C113 * C294 + C47721 * C307) * C21796 +
                       (C113 * C308 + C47721 * C324) * C47464) *
                          C42591 +
                      (C43479 + C43480) * C42592 + C43487 * C42593) *
                         C47784 -
                     ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                      (C43480 + C43479) * C42591) *
                         C47622) *
                        C2880) *
                       C2620 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C47784) *
                        C47576 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C47784 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47583 +
                    (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
                      ((C113 * C7438 + C47721 * C7441) * C21796 +
                       (C113 * C7442 + C47721 * C7444) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                      (C361 * C47464 + C360 * C21796) * C42591) *
                         C47784) *
                        C2880) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47535 * C47861 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47535 * C47857 +
           (((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C47535 * C47847 -
           ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
            ((C113 * C1158 + C47721 * C1168) * C47464 +
             (C113 * C1150 + C47721 * C1159) * C21796) *
                C42591) *
               C47535 * C47825) *
              C2620 +
          (((C359 * C21796 + C358 * C47464) * C42591 +
            (C43186 + C43187) * C42592 + C44292 * C42593) *
               C47535 * C47857 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47535 * C47861 -
           ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
            (C361 * C47464 + C360 * C21796) * C42591) *
               C47535 * C47847 +
           ((C1438 * C21796 + C1437 * C47464) * C42591 +
            (C11843 * C21796 + C11842 * C47464) * C42592 +
            ((C113 * C6084 + C47721 * C6087) * C21796 +
             (C113 * C6088 + C47721 * C6090) * C47464) *
                C42593) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47535 * C2512 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47535 * C47580) *
              C47860 +
          (((C359 * C21796 + C358 * C47464) * C42591 +
            (C43186 + C43187) * C42592 + C44292 * C42593) *
               C47535 * C47580 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47535 * C2512) *
              C47853 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47535 * C2512 -
           ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
            (C356 * C47464 + C357 * C21796) * C42591) *
               C47535 * C47580) *
              C47840 +
          (((C364 * C21796 + C365 * C47464) * C42591 +
            (C964 * C21796 + C963 * C47464) * C42592 +
            ((C113 * C2170 + C47721 * C2171) * C21796 +
             (C113 * C2172 + C47721 * C2173) * C47464) *
                C42593) *
               C47535 * C47580 -
           ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
            (C170 * C47464 + C171 * C21796) * C42591) *
               C47535 * C2512) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C47855 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47844 +
            (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C47818) *
               C2512 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             C44494 * C42593) *
                C47844 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C47855 -
            ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
             C43478 * C42591) *
                C47818) *
               C47580) *
              C2620 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47844 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C47855 -
            ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
             C42834 * C42591) *
                C47818) *
               C2512 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C47855 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C47844 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C113 * C6952 + C47721 * C6955) * C21796 +
              (C113 * C6956 + C47721 * C6958) * C47464) *
                 C42593) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C47784 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C2512 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C47784) *
                        C47580) *
                       C47494 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C47784) *
                        C2512 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C47784 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47580) *
                       C47503 +
                   ((((C168 * C21796 + C169 * C47464) * C42591 +
                      (C42827 + C42828) * C42592 + C42835 * C42593) *
                         C47784 -
                     ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47622) *
                        C2512 +
                    (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
                      ((C113 * C2404 + C47721 * C2409) * C21796 +
                       (C113 * C2410 + C47721 * C2413) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                      (C356 * C47464 + C357 * C21796) * C42591) *
                         C47784) *
                        C47580) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C2512 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47580) *
                       C47860 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + C44292 * C42593) *
                        C47535 * C47580 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C2512) *
                       C47853 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C2512 -
                    ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47580) *
                       C47840 +
                   (((C364 * C21796 + C365 * C47464) * C42591 +
                     (C964 * C21796 + C963 * C47464) * C42592 +
                     ((C113 * C2170 + C47721 * C2171) * C21796 +
                      (C113 * C2172 + C47721 * C2173) * C47464) *
                         C42593) *
                        C47535 * C47580 -
                    ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
                     (C170 * C47464 + C171 * C21796) * C42591) *
                        C47535 * C2512) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C47861 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47857 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C47535 * C47847 -
                    ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
                     ((C113 * C1158 + C47721 * C1168) * C47464 +
                      (C113 * C1150 + C47721 * C1159) * C21796) *
                         C42591) *
                        C47535 * C47825) *
                       C2620 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + C44292 * C42593) *
                        C47535 * C47857 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47861 -
                    ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47847 +
                    ((C1438 * C21796 + C1437 * C47464) * C42591 +
                     (C11843 * C21796 + C11842 * C47464) * C42592 +
                     ((C113 * C6084 + C47721 * C6087) * C21796 +
                      (C113 * C6088 + C47721 * C6090) * C47464) *
                         C42593) *
                        C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C3274 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C47576 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C3274) *
                        C47583 +
                    ((((C113 * C294 + C47721 * C307) * C21796 +
                       (C113 * C308 + C47721 * C324) * C47464) *
                          C42591 +
                      (C43479 + C43480) * C42592 + C43487 * C42593) *
                         C3274 -
                     ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                      (C43480 + C43479) * C42591) *
                         C47622) *
                        C2880) *
                       C47769 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C3274) *
                        C47576 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C3274 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47583 +
                    (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
                      ((C113 * C7438 + C47721 * C7441) * C21796 +
                       (C113 * C7442 + C47721 * C7444) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                      (C361 * C47464 + C360 * C21796) * C42591) *
                         C3274) *
                        C2880) *
                       C47500)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47618 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47625 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C3782) *
              C47576 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            C44494 * C42593) *
               C47625 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47618 -
           ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
            C43478 * C42591) *
               C3782) *
              C47583 +
          ((((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C47618 -
           ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
            (C43480 + C43479) * C42591) *
               C47625 +
           (C43487 * C42591 + (C43491 + C43490) * C42592 +
            ((C113 * C23277 + C47721 * C23278) * C21796 +
             (C113 * C23279 + C47721 * C23280) * C47464) *
                C42593) *
               C3782) *
              C2880) *
         C47489) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C3274 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47622) *
              C47861 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            C44494 * C42593) *
               C47622 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C3274) *
              C47857 +
          ((((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C3274 -
           ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
            (C43480 + C43479) * C42591) *
               C47622) *
              C47847 +
          (((C43838 + C43839) * C42591 + (C43846 + C43847) * C42592 +
            ((C113 * C23623 + C47721 * C23624) * C21796 +
             (C113 * C23625 + C47721 * C23626) * C47464) *
                C42593) *
               C47622 -
           ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
            ((C113 * C1158 + C47721 * C1168) * C47464 +
             (C113 * C1150 + C47721 * C1159) * C21796) *
                C42591) *
               C3274) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C3274 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47622) *
               C2512 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             C44494 * C42593) *
                C47622 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C3274) *
               C47580) *
              C47851 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47622 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C3274) *
               C2512 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C3274 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C47622) *
               C47580) *
              C47838 +
          ((((C168 * C21796 + C169 * C47464) * C42591 +
             (C42827 + C42828) * C42592 + C42835 * C42593) *
                C3274 -
            ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
             (C42828 + C42827) * C42591) *
                C47622) *
               C2512 +
           (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
             ((C113 * C2404 + C47721 * C2409) * C21796 +
              (C113 * C2410 + C47721 * C2413) * C47464) *
                 C42593) *
                C47622 -
            ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
             (C356 * C47464 + C357 * C21796) * C42591) *
                C3274) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47862 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47859 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C47850 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47831) *
              C2512 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            C44494 * C42593) *
               C47859 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47862 -
           ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
            C43478 * C42591) *
               C47850 +
           (C44494 * C42591 + (C44502 + C44501) * C42592 +
            ((C113 * C27973 + C47721 * C27974) * C21796 +
             (C113 * C27975 + C47721 * C27976) * C47464) *
                C42593) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C47618 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47625 +
            (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C3782) *
               C2512 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             C44494 * C42593) *
                C47625 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C47618 -
            ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
             C43478 * C42591) *
                C3782) *
               C47580) *
              C47769 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47625 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C47618 -
            ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
             C42834 * C42591) *
                C3782) *
               C2512 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C47618 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C47625 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C113 * C6952 + C47721 * C6955) * C21796 +
              (C113 * C6956 + C47721 * C6958) * C47464) *
                 C42593) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C3274 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C2512 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C3274) *
                        C47580) *
                       C47851 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C3274) *
                        C2512 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C3274 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47580) *
                       C47838 +
                   ((((C168 * C21796 + C169 * C47464) * C42591 +
                      (C42827 + C42828) * C42592 + C42835 * C42593) *
                         C3274 -
                     ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47622) *
                        C2512 +
                    (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
                      ((C113 * C2404 + C47721 * C2409) * C21796 +
                       (C113 * C2410 + C47721 * C2413) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                      (C356 * C47464 + C357 * C21796) * C42591) *
                         C3274) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C3274 -
                    (C44134 * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47622) *
                       C47861 +
                   (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                     C44494 * C42593) *
                        C47622 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C3274) *
                       C47857 +
                   ((((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C3274 -
                    ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                     (C43480 + C43479) * C42591) *
                        C47622) *
                       C47847 +
                   (((C43838 + C43839) * C42591 + (C43846 + C43847) * C42592 +
                     ((C113 * C23623 + C47721 * C23624) * C21796 +
                      (C113 * C23625 + C47721 * C23626) * C47464) *
                         C42593) *
                        C47622 -
                    ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
                     ((C113 * C1158 + C47721 * C1168) * C47464 +
                      (C113 * C1150 + C47721 * C1159) * C21796) *
                         C42591) *
                        C3274) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47535 * C1416 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47535 * C1417 +
           (((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C47535 * C1418 -
           (((C113 * C6086 + C47721 * C6089) * C47464 +
             (C113 * C6083 + C47721 * C6085) * C21796) *
                C42593 +
            (C12179 * C47464 + C12178 * C21796) * C42592 +
            ((C113 * C1158 + C47721 * C1168) * C47464 +
             (C113 * C1150 + C47721 * C1159) * C21796) *
                C42591) *
               C47535 * C47825) *
              C47769 +
          (((C359 * C21796 + C358 * C47464) * C42591 +
            (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
               C47535 * C1417 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47535 * C1416 -
           ((C11696 * C47464 + C11697 * C21796) * C42593 +
            (C1599 * C47464 + C1600 * C21796) * C42592 +
            (C361 * C47464 + C360 * C21796) * C42591) *
               C47535 * C1418 +
           ((C1438 * C21796 + C1437 * C47464) * C42591 +
            (C11843 * C21796 + C11842 * C47464) * C42592 +
            ((C113 * C6084 + C47721 * C6087) * C21796 +
             (C113 * C6088 + C47721 * C6090) * C47464) *
                C42593) *
               C47535 * C47825) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47535 * C47783 -
           ((C11693 * C47464 + C11692 * C21796) * C42593 +
            (C11295 * C47464 + C11294 * C21796) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47535 * C47580) *
              C656 +
          (((C359 * C21796 + C358 * C47464) * C42591 +
            (C959 * C21796 + C960 * C47464) * C42592 +
            (C2186 * C21796 + C2185 * C47464) * C42593) *
               C47535 * C47580 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47535 * C47783) *
              C657 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47535 * C47783 -
           ((C2183 * C47464 + C2184 * C21796) * C42593 +
            (C962 * C47464 + C961 * C21796) * C42592 +
            (C356 * C47464 + C357 * C21796) * C42591) *
               C47535 * C47580) *
              C658 +
          (((C364 * C21796 + C365 * C47464) * C42591 +
            (C964 * C21796 + C963 * C47464) * C42592 +
            ((C113 * C2170 + C47721 * C2171) * C21796 +
             (C113 * C2172 + C47721 * C2173) * C47464) *
                C42593) *
               C47535 * C47580 -
           ((C555 * C47464 + C556 * C21796) * C42593 +
            (C554 * C47464 + C553 * C21796) * C42592 +
            (C170 * C47464 + C171 * C21796) * C42591) *
               C47535 * C47783) *
              C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C1820 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C1821 +
            (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C47818) *
               C47783 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             (C43476 + C43477) * C42593) *
                C1821 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C1820 -
            (((C113 * C6954 + C47721 * C6957) * C47464 +
              (C113 * C6951 + C47721 * C6953) * C21796) *
                 C42593 +
             (C43477 + C43476) * C42592 + C43478 * C42591) *
                C47818) *
               C47580) *
              C47769 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C1821 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C1820 -
            ((C12580 * C47464 + C12581 * C21796) * C42593 +
             (C42826 + C42825) * C42592 + C42834 * C42591) *
                C47818) *
               C47783 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C1820 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C1821 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C113 * C6952 + C47721 * C6955) * C21796 +
              (C113 * C6956 + C47721 * C6958) * C47464) *
                 C42593) *
                C47818) *
               C47580) *
              C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47784 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47622) *
              C1416 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            (C43476 + C43477) * C42593) *
               C47622 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47784) *
              C1417 +
          ((((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C47784 -
           ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
            (C43480 + C43479) * C42591) *
               C47622) *
              C1418 +
          (((C43838 + C43839) * C42591 + (C43846 + C43847) * C42592 +
            ((C113 * C23623 + C47721 * C23624) * C21796 +
             (C113 * C23625 + C47721 * C23626) * C47464) *
                C42593) *
               C47622 -
           ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
            ((C113 * C1158 + C47721 * C1168) * C47464 +
             (C113 * C1150 + C47721 * C1159) * C21796) *
                C42591) *
               C47784) *
              C47825) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C47784 -
            ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47622) *
               C47783 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             (C13065 * C21796 + C13064 * C47464) * C42593) *
                C47622 -
            ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C47784) *
               C47580) *
              C288 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C47622 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C47784) *
               C47783 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                C47784 -
            ((C12792 * C47464 + C12793 * C21796) * C42593 +
             (C43189 + C43188) * C42592 + (C43187 + C43186) * C42591) *
                C47622) *
               C47580) *
              C289 +
          ((((C168 * C21796 + C169 * C47464) * C42591 +
             (C42827 + C42828) * C42592 + C42835 * C42593) *
                C47784 -
            ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
             (C42828 + C42827) * C42591) *
                C47622) *
               C47783 +
           (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
             ((C113 * C2404 + C47721 * C2409) * C21796 +
              (C113 * C2410 + C47721 * C2413) * C47464) *
                 C42593) *
                C47622 -
            ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
             (C356 * C47464 + C357 * C21796) * C42591) *
                C47784) *
               C47580) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C2284 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C2285 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C2286 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47831) *
              C47783 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            C44494 * C42593) *
               C2285 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C2284 -
           ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
            C43478 * C42591) *
               C2286 +
           (C44494 * C42591 + (C44502 + C44501) * C42592 +
            ((C113 * C27973 + C47721 * C27974) * C21796 +
             (C113 * C27975 + C47721 * C27976) * C47464) *
                C42593) *
               C47831) *
              C47580) *
         C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47721 * C124) * C21796 +
                (C113 * C125 + C47721 * C138) * C47464) *
                   C42591 +
               (C10814 * C21796 + C10815 * C47464) * C42592 +
               (C10817 * C21796 + C10816 * C47464) * C42593) *
                  C47535 * C47517 * C108 -
              ((C550 * C47464 + C549 * C21796) * C42593 +
               (C547 * C47464 + C548 * C21796) * C42592 +
               (C167 * C47464 + C166 * C21796) * C42591) *
                  C47535 * C47517 * C109 +
              ((C168 * C21796 + C169 * C47464) * C42591 +
               (C546 * C21796 + C545 * C47464) * C42592 +
               (C551 * C21796 + C552 * C47464) * C42593) *
                  C47535 * C47517 * C110 -
              ((C555 * C47464 + C556 * C21796) * C42593 +
               (C554 * C47464 + C553 * C21796) * C42592 +
               (C170 * C47464 + C171 * C21796) * C42591) *
                  C47535 * C47517 * C111 +
              ((C172 * C21796 + C173 * C47464) * C42591 +
               (C780 * C21796 + C779 * C47464) * C42592 +
               ((C113 * C489 + C47721 * C508) * C21796 +
                (C113 * C509 + C47721 * C519) * C47464) *
                   C42593) *
                  C47535 * C47517 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47721 * C124) * C21796 +
                 (C113 * C125 + C47721 * C138) * C47464) *
                    C42591 +
                (C10814 * C21796 + C10815 * C47464) * C42592 +
                (C10817 * C21796 + C10816 * C47464) * C42593) *
                   C47535 * C47854 -
               ((C11693 * C47464 + C11692 * C21796) * C42593 +
                (C11295 * C47464 + C11294 * C21796) * C42592 +
                ((C113 * C305 + C47721 * C323) * C47464 +
                 (C113 * C293 + C47721 * C306) * C21796) *
                    C42591) *
                   C47535 * C47842 +
               (((C113 * C294 + C47721 * C307) * C21796 +
                 (C113 * C308 + C47721 * C324) * C47464) *
                    C42591 +
                (C11694 * C21796 + C11695 * C47464) * C42592 +
                (C11699 * C21796 + C11698 * C47464) * C42593) *
                   C47535 * C47815) *
                  C288 +
              (((C359 * C21796 + C358 * C47464) * C42591 +
                (C959 * C21796 + C960 * C47464) * C42592 +
                (C2186 * C21796 + C2185 * C47464) * C42593) *
                   C47535 * C47842 -
               ((C550 * C47464 + C549 * C21796) * C42593 +
                (C547 * C47464 + C548 * C21796) * C42592 +
                (C167 * C47464 + C166 * C21796) * C42591) *
                   C47535 * C47854 -
               ((C11696 * C47464 + C11697 * C21796) * C42593 +
                (C1599 * C47464 + C1600 * C21796) * C42592 +
                (C361 * C47464 + C360 * C21796) * C42591) *
                   C47535 * C47815) *
                  C289 +
              (((C168 * C21796 + C169 * C47464) * C42591 +
                (C546 * C21796 + C545 * C47464) * C42592 +
                (C551 * C21796 + C552 * C47464) * C42593) *
                   C47535 * C47854 -
               ((C2183 * C47464 + C2184 * C21796) * C42593 +
                (C962 * C47464 + C961 * C21796) * C42592 +
                (C356 * C47464 + C357 * C21796) * C42591) *
                   C47535 * C47842 +
               ((C362 * C21796 + C363 * C47464) * C42591 +
                (C1598 * C21796 + C1597 * C47464) * C42592 +
                ((C113 * C1290 + C47721 * C1307) * C21796 +
                 (C113 * C1308 + C47721 * C1317) * C47464) *
                    C42593) *
                   C47535 * C47815) *
                  C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47855 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47844 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 +
            (C12583 * C21796 + C12582 * C47464) * C42593) *
               C47818) *
              C47517 * C288 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C47844 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47855 -
           ((C12580 * C47464 + C12581 * C21796) * C42593 +
            (C42826 + C42825) * C42592 + C42834 * C42591) *
               C47818) *
              C47517 * C289 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47855 -
           ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47844 +
           (C42835 * C42591 + (C42832 + C42831) * C42592 +
            ((C113 * C2005 + C47721 * C2016) * C21796 +
             (C113 * C2017 + C47721 * C2023) * C47464) *
                C42593) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47535 * C1074 -
           ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47535 * C1075 +
           (((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C11694 * C21796 + C11695 * C47464) * C42592 +
            (C11699 * C21796 + C11698 * C47464) * C42593) *
               C47535 * C47815) *
              C47851 +
          (((C359 * C21796 + C358 * C47464) * C42591 +
            (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
               C47535 * C1075 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47535 * C1074 -
           ((C11696 * C47464 + C11697 * C21796) * C42593 +
            (C1599 * C47464 + C1600 * C21796) * C42592 +
            (C361 * C47464 + C360 * C21796) * C42591) *
               C47535 * C47815) *
              C47838 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47535 * C1074 -
           ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
            (C356 * C47464 + C357 * C21796) * C42591) *
               C47535 * C1075 +
           ((C362 * C21796 + C363 * C47464) * C42591 +
            (C1598 * C21796 + C1597 * C47464) * C42592 +
            ((C113 * C1290 + C47721 * C1307) * C21796 +
             (C113 * C1308 + C47721 * C1317) * C47464) *
                C42593) *
               C47535 * C47815) *
              C47809)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C21796 +
            (C113 * C125 + C47721 * C138) * C47464) *
               C42591 +
           (C42815 + C42816) * C42592 + C42833 * C42593) *
              C47535 * C1142 -
          ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
           ((C113 * C305 + C47721 * C323) * C47464 +
            (C113 * C293 + C47721 * C306) * C21796) *
               C42591) *
              C47535 * C1143 +
          (((C113 * C294 + C47721 * C307) * C21796 +
            (C113 * C308 + C47721 * C324) * C47464) *
               C42591 +
           (C11694 * C21796 + C11695 * C47464) * C42592 +
           (C11699 * C21796 + C11698 * C47464) * C42593) *
              C47535 * C1144 -
          (((C113 * C6086 + C47721 * C6089) * C47464 +
            (C113 * C6083 + C47721 * C6085) * C21796) *
               C42593 +
           (C12179 * C47464 + C12178 * C21796) * C42592 +
           ((C113 * C1158 + C47721 * C1168) * C47464 +
            (C113 * C1150 + C47721 * C1159) * C21796) *
               C42591) *
              C47535 * C1145 +
          (((C113 * C1151 + C47721 * C1160) * C21796 +
            (C113 * C1161 + C47721 * C1169) * C47464) *
               C42591 +
           ((C113 * C6569 + C47721 * C6571) * C21796 +
            (C113 * C6572 + C47721 * C6575) * C47464) *
               C42592 +
           ((C113 * C22645 + C47721 * C22646) * C21796 +
            (C113 * C22647 + C47721 * C22648) * C47464) *
               C42593) *
              C47535 * C1146) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47855 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47844 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 +
            (C12583 * C21796 + C12582 * C47464) * C42593) *
               C47818) *
              C1074 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            (C43476 + C43477) * C42593) *
               C47844 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C47855 -
           (((C113 * C6954 + C47721 * C6957) * C47464 +
             (C113 * C6951 + C47721 * C6953) * C21796) *
                C42593 +
            (C43477 + C43476) * C42592 + C43478 * C42591) *
               C47818) *
              C1075 +
          ((((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C47855 -
           ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
            (C43480 + C43479) * C42591) *
               C47844 +
           (C43487 * C42591 + (C43491 + C43490) * C42592 +
            ((C113 * C23277 + C47721 * C23278) * C21796 +
             (C113 * C23279 + C47721 * C23280) * C47464) *
                C42593) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C1820 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C1821 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 +
            (C12583 * C21796 + C12582 * C47464) * C42593) *
               C47818) *
              C47517 * C47851 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C1821 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C1820 -
           ((C12580 * C47464 + C12581 * C21796) * C42593 +
            (C42826 + C42825) * C42592 + C42834 * C42591) *
               C47818) *
              C47517 * C47838 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C1820 -
           ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C1821 +
           (C42835 * C42591 + (C42832 + C42831) * C42592 +
            ((C113 * C2005 + C47721 * C2016) * C21796 +
             (C113 * C2017 + C47721 * C2023) * C47464) *
                C42593) *
               C47818) *
              C47517 * C47809)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C1820 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C1821 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 +
            (C12583 * C21796 + C12582 * C47464) * C42593) *
               C47818) *
              C47854 +
          (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
            (C43476 + C43477) * C42593) *
               C1821 -
           (C43478 * C42593 + (C43183 + C43182) * C42592 +
            ((C113 * C305 + C47721 * C323) * C47464 +
             (C113 * C293 + C47721 * C306) * C21796) *
                C42591) *
               C1820 -
           (((C113 * C6954 + C47721 * C6957) * C47464 +
             (C113 * C6951 + C47721 * C6953) * C21796) *
                C42593 +
            (C43477 + C43476) * C42592 + C43478 * C42591) *
               C47818) *
              C47842 +
          ((((C113 * C294 + C47721 * C307) * C21796 +
             (C113 * C308 + C47721 * C324) * C47464) *
                C42591 +
            (C43479 + C43480) * C42592 + C43487 * C42593) *
               C1820 -
           ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
            (C43480 + C43479) * C42591) *
               C1821 +
           (C43487 * C42591 + (C43491 + C43490) * C42592 +
            ((C113 * C23277 + C47721 * C23278) * C21796 +
             (C113 * C23279 + C47721 * C23280) * C47464) *
                C42593) *
               C47818) *
              C47815) *
         C47489) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47721 * C124) * C21796 +
            (C113 * C125 + C47721 * C138) * C47464) *
               C42591 +
           (C42815 + C42816) * C42592 + C42833 * C42593) *
              C1995 -
          (C44134 * C42593 + (C42818 + C42817) * C42592 +
           (C42816 + C42815) * C42591) *
              C1996 +
          (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
              C1997 -
          ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
           C44134 * C42591) *
              C1998 +
          (C44141 * C42591 + (C44145 + C44144) * C42592 +
           ((C113 * C44129 + C47721 * C44130) * C21796 +
            (C113 * C44131 + C47721 * C44132) * C47464) *
               C42593) *
              C1999) *
         C47517 * C47489) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C47784 -
            ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47622) *
               C1074 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             (C43476 + C43477) * C42593) *
                C47622 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C47784) *
               C1075 +
           ((((C113 * C294 + C47721 * C307) * C21796 +
              (C113 * C308 + C47721 * C324) * C47464) *
                 C42591 +
             (C43479 + C43480) * C42592 + C43487 * C42593) *
                C47784 -
            ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
             (C43480 + C43479) * C42591) *
                C47622) *
               C47815) *
              C47769 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C47622 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C47784) *
               C1074 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                C47784 -
            ((C12792 * C47464 + C12793 * C21796) * C42593 +
             (C43189 + C43188) * C42592 + (C43187 + C43186) * C42591) *
                C47622) *
               C1075 +
           (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
             ((C113 * C7438 + C47721 * C7441) * C21796 +
              (C113 * C7442 + C47721 * C7444) * C47464) *
                 C42593) *
                C47622 -
            ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
             (C361 * C47464 + C360 * C21796) * C42591) *
                C47784) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47784 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47622) *
              C47517 * C656 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C47622 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47784) *
              C47517 * C657 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47784 -
           ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47622) *
              C47517 * C658 +
          (((C43032 + C43033) * C42591 + (C43034 + C43035) * C42592 +
            ((C113 * C2288 + C47721 * C2289) * C21796 +
             (C113 * C2290 + C47721 * C2291) * C47464) *
                C42593) *
               C47622 -
           ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
            (C170 * C47464 + C171 * C21796) * C42591) *
               C47784) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C2284 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C2285 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C2286 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47831) *
              C47517 * C47769 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C2285 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C2284 -
           ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
            C42834 * C42591) *
               C2286 +
           (C44393 * C42591 + (C44395 + C44394) * C42592 +
            ((C113 * C12556 + C47721 * C12559) * C21796 +
             (C113 * C12560 + C47721 * C12562) * C47464) *
                C42593) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C10814 * C21796 + C10815 * C47464) * C42592 +
                     (C10817 * C21796 + C10816 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C11693 * C47464 + C11692 * C21796) * C42593 +
                     (C11295 * C47464 + C11294 * C21796) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47842 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C288 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C959 * C21796 + C960 * C47464) * C42592 +
                     (C2186 * C21796 + C2185 * C47464) * C42593) *
                        C47535 * C47842 -
                    ((C550 * C47464 + C549 * C21796) * C42593 +
                     (C547 * C47464 + C548 * C21796) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47854 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C289 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C546 * C21796 + C545 * C47464) * C42592 +
                     (C551 * C21796 + C552 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C2183 * C47464 + C2184 * C21796) * C42593 +
                     (C962 * C47464 + C961 * C21796) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47842 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C10814 * C21796 + C10815 * C47464) * C42592 +
                    (C10817 * C21796 + C10816 * C47464) * C42593) *
                       C47535 * C47517 * C108 -
                   ((C550 * C47464 + C549 * C21796) * C42593 +
                    (C547 * C47464 + C548 * C21796) * C42592 +
                    (C167 * C47464 + C166 * C21796) * C42591) *
                       C47535 * C47517 * C109 +
                   ((C168 * C21796 + C169 * C47464) * C42591 +
                    (C546 * C21796 + C545 * C47464) * C42592 +
                    (C551 * C21796 + C552 * C47464) * C42593) *
                       C47535 * C47517 * C110 -
                   ((C555 * C47464 + C556 * C21796) * C42593 +
                    (C554 * C47464 + C553 * C21796) * C42592 +
                    (C170 * C47464 + C171 * C21796) * C42591) *
                       C47535 * C47517 * C111 +
                   ((C172 * C21796 + C173 * C47464) * C42591 +
                    (C780 * C21796 + C779 * C47464) * C42592 +
                    ((C113 * C489 + C47721 * C508) * C21796 +
                     (C113 * C509 + C47721 * C519) * C47464) *
                        C42593) *
                       C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C1074 -
                    ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C1075 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C47851 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                        C47535 * C1075 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C1074 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C47838 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C1074 -
                    ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C1075 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42833 * C42593) *
                       C47535 * C1142 -
                   ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                    ((C113 * C305 + C47721 * C323) * C47464 +
                     (C113 * C293 + C47721 * C306) * C21796) *
                        C42591) *
                       C47535 * C1143 +
                   (((C113 * C294 + C47721 * C307) * C21796 +
                     (C113 * C308 + C47721 * C324) * C47464) *
                        C42591 +
                    (C11694 * C21796 + C11695 * C47464) * C42592 +
                    (C11699 * C21796 + C11698 * C47464) * C42593) *
                       C47535 * C1144 -
                   (((C113 * C6086 + C47721 * C6089) * C47464 +
                     (C113 * C6083 + C47721 * C6085) * C21796) *
                        C42593 +
                    (C12179 * C47464 + C12178 * C21796) * C42592 +
                    ((C113 * C1158 + C47721 * C1168) * C47464 +
                     (C113 * C1150 + C47721 * C1159) * C21796) *
                        C42591) *
                       C47535 * C1145 +
                   (((C113 * C1151 + C47721 * C1160) * C21796 +
                     (C113 * C1161 + C47721 * C1169) * C47464) *
                        C42591 +
                    ((C113 * C6569 + C47721 * C6571) * C21796 +
                     (C113 * C6572 + C47721 * C6575) * C47464) *
                        C42592 +
                    ((C113 * C22645 + C47721 * C22646) * C21796 +
                     (C113 * C22647 + C47721 * C22648) * C47464) *
                        C42593) *
                       C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C1820 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C1821 +
                    (C42833 * C42591 + (C42820 + C42819) * C42592 +
                     (C12583 * C21796 + C12582 * C47464) * C42593) *
                        C47818) *
                       C47517 * C47851 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C1821 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C1820 -
                    ((C12580 * C47464 + C12581 * C21796) * C42593 +
                     (C42826 + C42825) * C42592 + C42834 * C42591) *
                        C47818) *
                       C47517 * C47838 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C1820 -
                    ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C1821 +
                    (C42835 * C42591 + (C42832 + C42831) * C42592 +
                     ((C113 * C2005 + C47721 * C2016) * C21796 +
                      (C113 * C2017 + C47721 * C2023) * C47464) *
                         C42593) *
                        C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C1820 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C1821 +
                    (C42833 * C42591 + (C42820 + C42819) * C42592 +
                     (C12583 * C21796 + C12582 * C47464) * C42593) *
                        C47818) *
                       C47854 +
                   (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                     (C43476 + C43477) * C42593) *
                        C1821 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C1820 -
                    (((C113 * C6954 + C47721 * C6957) * C47464 +
                      (C113 * C6951 + C47721 * C6953) * C21796) *
                         C42593 +
                     (C43477 + C43476) * C42592 + C43478 * C42591) *
                        C47818) *
                       C47842 +
                   ((((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C1820 -
                    ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                     (C43480 + C43479) * C42591) *
                        C1821 +
                    (C43487 * C42591 + (C43491 + C43490) * C42592 +
                     ((C113 * C23277 + C47721 * C23278) * C21796 +
                      (C113 * C23279 + C47721 * C23280) * C47464) *
                         C42593) *
                        C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C3274 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C47783 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C3274) *
                        C47580) *
                       C47494 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C3274) *
                        C47783 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C3274 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47580) *
                       C47503 +
                   ((((C168 * C21796 + C169 * C47464) * C42591 +
                      (C42827 + C42828) * C42592 + C42835 * C42593) *
                         C3274 -
                     ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47622) *
                        C47783 +
                    (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
                      ((C113 * C2404 + C47721 * C2409) * C21796 +
                       (C113 * C2410 + C47721 * C2413) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                      (C356 * C47464 + C357 * C21796) * C42591) *
                         C3274) *
                        C47580) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C47618 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47625 +
            (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C3782) *
               C47783 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             C44494 * C42593) *
                C47625 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C47618 -
            ((C44501 + C44502) * C42593 + (C43477 + C43476) * C42592 +
             C43478 * C42591) *
                C3782) *
               C47580) *
              C2620 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47625 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C47618 -
            ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
             C42834 * C42591) *
                C3782) *
               C47783 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C47618 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C47625 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C113 * C6952 + C47721 * C6955) * C21796 +
              (C113 * C6956 + C47721 * C6958) * C47464) *
                 C42593) *
                C3782) *
               C47580) *
              C47500)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47721 * C124) * C21796 +
              (C113 * C125 + C47721 * C138) * C47464) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42833 * C42593) *
                C3274 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47622) *
               C47854 +
           (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
             C44494 * C42593) *
                C47622 -
            (C43478 * C42593 + (C43183 + C43182) * C42592 +
             ((C113 * C305 + C47721 * C323) * C47464 +
              (C113 * C293 + C47721 * C306) * C21796) *
                 C42591) *
                C3274) *
               C47842 +
           ((((C113 * C294 + C47721 * C307) * C21796 +
              (C113 * C308 + C47721 * C324) * C47464) *
                 C42591 +
             (C43479 + C43480) * C42592 + C43487 * C42593) *
                C3274 -
            ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
             (C43480 + C43479) * C42591) *
                C47622) *
               C47815) *
              C2620 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47622 -
            (C42834 * C42593 + (C42822 + C42821) * C42592 +
             (C167 * C47464 + C166 * C21796) * C42591) *
                C3274) *
               C47854 +
           (((C359 * C21796 + C358 * C47464) * C42591 +
             (C43186 + C43187) * C42592 + C44292 * C42593) *
                C3274 -
            ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
             (C43187 + C43186) * C42591) *
                C47622) *
               C47842 +
           (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
             ((C113 * C7438 + C47721 * C7441) * C21796 +
              (C113 * C7442 + C47721 * C7444) * C47464) *
                 C42593) *
                C47622 -
            ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
             (C361 * C47464 + C360 * C21796) * C42591) *
                C3274) *
               C47815) *
              C47500)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C3274 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47622) *
              C47517 * C47860 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47622 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C3274) *
              C47517 * C47853 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C3274 -
           ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47622) *
              C47517 * C47840 +
          (((C43032 + C43033) * C42591 + (C43034 + C43035) * C42592 +
            ((C113 * C2288 + C47721 * C2289) * C21796 +
             (C113 * C2290 + C47721 * C2291) * C47464) *
                C42593) *
               C47622 -
           ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
            (C170 * C47464 + C171 * C21796) * C42591) *
               C3274) *
              C47517 * C47819)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47862 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47859 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C47850 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47831) *
              C47517 * C2620 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47859 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47862 -
           ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
            C42834 * C42591) *
               C47850 +
           (C44393 * C42591 + (C44395 + C44394) * C42592 +
            ((C113 * C12556 + C47721 * C12559) * C21796 +
             (C113 * C12560 + C47721 * C12562) * C47464) *
                C42593) *
               C47831) *
              C47517 * C47500)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47721 * C124) * C21796 +
             (C113 * C125 + C47721 * C138) * C47464) *
                C42591 +
            (C42815 + C42816) * C42592 + C42833 * C42593) *
               C47618 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47625 +
           (C42833 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C3782) *
              C47517 * C47494 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47625 -
           (C42834 * C42593 + (C42822 + C42821) * C42592 +
            (C167 * C47464 + C166 * C21796) * C42591) *
               C47618 -
           ((C44394 + C44395) * C42593 + (C42826 + C42825) * C42592 +
            C42834 * C42591) *
               C3782) *
              C47517 * C47503 +
          (((C168 * C21796 + C169 * C47464) * C42591 +
            (C42827 + C42828) * C42592 + C42835 * C42593) *
               C47618 -
           ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47625 +
           (C42835 * C42591 + (C42832 + C42831) * C42592 +
            ((C113 * C2005 + C47721 * C2016) * C21796 +
             (C113 * C2017 + C47721 * C2023) * C47464) *
                C42593) *
               C3782) *
              C47517 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C3274 -
                    (C44134 * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47622) *
                       C47517 * C47860 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     C44393 * C42593) *
                        C47622 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C3274) *
                       C47517 * C47853 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C3274 -
                    ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47622) *
                       C47517 * C47840 +
                   (((C43032 + C43033) * C42591 + (C43034 + C43035) * C42592 +
                     ((C113 * C2288 + C47721 * C2289) * C21796 +
                      (C113 * C2290 + C47721 * C2291) * C47464) *
                         C42593) *
                        C47622 -
                    ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
                     (C170 * C47464 + C171 * C21796) * C42591) *
                        C3274) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C3274 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C47854 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      C44494 * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C3274) *
                        C47842 +
                    ((((C113 * C294 + C47721 * C307) * C21796 +
                       (C113 * C308 + C47721 * C324) * C47464) *
                          C42591 +
                      (C43479 + C43480) * C42592 + C43487 * C42593) *
                         C3274 -
                     ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                      (C43480 + C43479) * C42591) *
                         C47622) *
                        C47815) *
                       C2620 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C3274) *
                        C47854 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + C44292 * C42593) *
                         C3274 -
                     ((C44293 + C44294) * C42593 + (C43189 + C43188) * C42592 +
                      (C43187 + C43186) * C42591) *
                         C47622) *
                        C47842 +
                    (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
                      ((C113 * C7438 + C47721 * C7441) * C21796 +
                       (C113 * C7442 + C47721 * C7444) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                      (C361 * C47464 + C360 * C21796) * C42591) *
                         C3274) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C47783 -
                    ((C11693 * C47464 + C11692 * C21796) * C42593 +
                     (C11295 * C47464 + C11294 * C21796) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47580) *
                       C656 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C959 * C21796 + C960 * C47464) * C42592 +
                     (C2186 * C21796 + C2185 * C47464) * C42593) *
                        C47535 * C47580 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47783) *
                       C657 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C47783 -
                    ((C2183 * C47464 + C2184 * C21796) * C42593 +
                     (C962 * C47464 + C961 * C21796) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47580) *
                       C658 +
                   (((C364 * C21796 + C365 * C47464) * C42591 +
                     (C964 * C21796 + C963 * C47464) * C42592 +
                     ((C113 * C2170 + C47721 * C2171) * C21796 +
                      (C113 * C2172 + C47721 * C2173) * C47464) *
                         C42593) *
                        C47535 * C47580 -
                    ((C555 * C47464 + C556 * C21796) * C42593 +
                     (C554 * C47464 + C553 * C21796) * C42592 +
                     (C170 * C47464 + C171 * C21796) * C42591) *
                        C47535 * C47783) *
                       C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C1416 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C1417 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C47535 * C1418 -
                    (((C113 * C6086 + C47721 * C6089) * C47464 +
                      (C113 * C6083 + C47721 * C6085) * C21796) *
                         C42593 +
                     (C12179 * C47464 + C12178 * C21796) * C42592 +
                     ((C113 * C1158 + C47721 * C1168) * C47464 +
                      (C113 * C1150 + C47721 * C1159) * C21796) *
                         C42591) *
                        C47535 * C47825) *
                       C47769 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                        C47535 * C1417 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C1416 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C1418 +
                    ((C1438 * C21796 + C1437 * C47464) * C42591 +
                     (C11843 * C21796 + C11842 * C47464) * C42592 +
                     ((C113 * C6084 + C47721 * C6087) * C21796 +
                      (C113 * C6088 + C47721 * C6090) * C47464) *
                         C42593) *
                        C47535 * C47825) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C47784 -
                     ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C47783 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      (C13065 * C21796 + C13064 * C47464) * C42593) *
                         C47622 -
                     ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C47784) *
                        C47580) *
                       C288 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      (C42825 + C42826) * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C47784) *
                        C47783 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                         C47784 -
                     ((C12792 * C47464 + C12793 * C21796) * C42593 +
                      (C43189 + C43188) * C42592 + (C43187 + C43186) * C42591) *
                         C47622) *
                        C47580) *
                       C289 +
                   ((((C168 * C21796 + C169 * C47464) * C42591 +
                      (C42827 + C42828) * C42592 + C42835 * C42593) *
                         C47784 -
                     ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47622) *
                        C47783 +
                    (((C43190 + C43191) * C42591 + (C43192 + C43193) * C42592 +
                      ((C113 * C2404 + C47721 * C2409) * C21796 +
                       (C113 * C2410 + C47721 * C2413) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                      (C356 * C47464 + C357 * C21796) * C42591) *
                         C47784) *
                        C47580) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47784 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47622) *
                       C1416 +
                   (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                     (C43476 + C43477) * C42593) *
                        C47622 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47784) *
                       C1417 +
                   ((((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C47784 -
                    ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                     (C43480 + C43479) * C42591) *
                        C47622) *
                       C1418 +
                   (((C43838 + C43839) * C42591 + (C43846 + C43847) * C42592 +
                     ((C113 * C23623 + C47721 * C23624) * C21796 +
                      (C113 * C23625 + C47721 * C23626) * C47464) *
                         C42593) *
                        C47622 -
                    ((C43847 + C43846) * C42593 + (C43839 + C43838) * C42592 +
                     ((C113 * C1158 + C47721 * C1168) * C47464 +
                      (C113 * C1150 + C47721 * C1159) * C21796) *
                         C42591) *
                        C47784) *
                       C47825) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C10814 * C21796 + C10815 * C47464) * C42592 +
                     (C10817 * C21796 + C10816 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C11693 * C47464 + C11692 * C21796) * C42593 +
                     (C11295 * C47464 + C11294 * C21796) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47842 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C288 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C959 * C21796 + C960 * C47464) * C42592 +
                     (C2186 * C21796 + C2185 * C47464) * C42593) *
                        C47535 * C47842 -
                    ((C550 * C47464 + C549 * C21796) * C42593 +
                     (C547 * C47464 + C548 * C21796) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47854 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C289 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C546 * C21796 + C545 * C47464) * C42592 +
                     (C551 * C21796 + C552 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C2183 * C47464 + C2184 * C21796) * C42593 +
                     (C962 * C47464 + C961 * C21796) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47842 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C10814 * C21796 + C10815 * C47464) * C42592 +
                    (C10817 * C21796 + C10816 * C47464) * C42593) *
                       C47535 * C47517 * C108 -
                   ((C550 * C47464 + C549 * C21796) * C42593 +
                    (C547 * C47464 + C548 * C21796) * C42592 +
                    (C167 * C47464 + C166 * C21796) * C42591) *
                       C47535 * C47517 * C109 +
                   ((C168 * C21796 + C169 * C47464) * C42591 +
                    (C546 * C21796 + C545 * C47464) * C42592 +
                    (C551 * C21796 + C552 * C47464) * C42593) *
                       C47535 * C47517 * C110 -
                   ((C555 * C47464 + C556 * C21796) * C42593 +
                    (C554 * C47464 + C553 * C21796) * C42592 +
                    (C170 * C47464 + C171 * C21796) * C42591) *
                       C47535 * C47517 * C111 +
                   ((C172 * C21796 + C173 * C47464) * C42591 +
                    (C780 * C21796 + C779 * C47464) * C42592 +
                    ((C113 * C489 + C47721 * C508) * C21796 +
                     (C113 * C509 + C47721 * C519) * C47464) *
                        C42593) *
                       C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47855 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47844 +
                    (C42833 * C42591 + (C42820 + C42819) * C42592 +
                     (C12583 * C21796 + C12582 * C47464) * C42593) *
                        C47818) *
                       C47517 * C288 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C47844 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47855 -
                    ((C12580 * C47464 + C12581 * C21796) * C42593 +
                     (C42826 + C42825) * C42592 + C42834 * C42591) *
                        C47818) *
                       C47517 * C289 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47855 -
                    ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47844 +
                    (C42835 * C42591 + (C42832 + C42831) * C42592 +
                     ((C113 * C2005 + C47721 * C2016) * C21796 +
                      (C113 * C2017 + C47721 * C2023) * C47464) *
                         C42593) *
                        C47818) *
                       C47517 * C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C1074 -
                    ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C1075 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C47851 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                        C47535 * C1075 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C1074 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C47838 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C1074 -
                    ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C1075 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42833 * C42593) *
                       C47535 * C1142 -
                   ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                    ((C113 * C305 + C47721 * C323) * C47464 +
                     (C113 * C293 + C47721 * C306) * C21796) *
                        C42591) *
                       C47535 * C1143 +
                   (((C113 * C294 + C47721 * C307) * C21796 +
                     (C113 * C308 + C47721 * C324) * C47464) *
                        C42591 +
                    (C11694 * C21796 + C11695 * C47464) * C42592 +
                    (C11699 * C21796 + C11698 * C47464) * C42593) *
                       C47535 * C1144 -
                   (((C113 * C6086 + C47721 * C6089) * C47464 +
                     (C113 * C6083 + C47721 * C6085) * C21796) *
                        C42593 +
                    (C12179 * C47464 + C12178 * C21796) * C42592 +
                    ((C113 * C1158 + C47721 * C1168) * C47464 +
                     (C113 * C1150 + C47721 * C1159) * C21796) *
                        C42591) *
                       C47535 * C1145 +
                   (((C113 * C1151 + C47721 * C1160) * C21796 +
                     (C113 * C1161 + C47721 * C1169) * C47464) *
                        C42591 +
                    ((C113 * C6569 + C47721 * C6571) * C21796 +
                     (C113 * C6572 + C47721 * C6575) * C47464) *
                        C42592 +
                    ((C113 * C22645 + C47721 * C22646) * C21796 +
                     (C113 * C22647 + C47721 * C22648) * C47464) *
                        C42593) *
                       C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47855 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47844 +
                    (C42833 * C42591 + (C42820 + C42819) * C42592 +
                     (C12583 * C21796 + C12582 * C47464) * C42593) *
                        C47818) *
                       C1074 +
                   (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                     (C43476 + C43477) * C42593) *
                        C47844 -
                    (C43478 * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47855 -
                    (((C113 * C6954 + C47721 * C6957) * C47464 +
                      (C113 * C6951 + C47721 * C6953) * C21796) *
                         C42593 +
                     (C43477 + C43476) * C42592 + C43478 * C42591) *
                        C47818) *
                       C1075 +
                   ((((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C43479 + C43480) * C42592 + C43487 * C42593) *
                        C47855 -
                    ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                     (C43480 + C43479) * C42591) *
                        C47844 +
                    (C43487 * C42591 + (C43491 + C43490) * C42592 +
                     ((C113 * C23277 + C47721 * C23278) * C21796 +
                      (C113 * C23279 + C47721 * C23280) * C47464) *
                         C42593) *
                        C47818) *
                       C47815) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47784 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47622) *
                       C47517 * C656 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C47622 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47784) *
                       C47517 * C657 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47784 -
                    ((C42831 + C42832) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47622) *
                       C47517 * C658 +
                   (((C43032 + C43033) * C42591 + (C43034 + C43035) * C42592 +
                     ((C113 * C2288 + C47721 * C2289) * C21796 +
                      (C113 * C2290 + C47721 * C2291) * C47464) *
                         C42593) *
                        C47622 -
                    ((C43035 + C43034) * C42593 + (C43033 + C43032) * C42592 +
                     (C170 * C47464 + C171 * C21796) * C42591) *
                        C47784) *
                       C47517 * C47819)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47721 * C124) * C21796 +
                       (C113 * C125 + C47721 * C138) * C47464) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42833 * C42593) *
                         C47784 -
                     ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47622) *
                        C1074 +
                    (((C43182 + C43183) * C42591 + (C43184 + C43185) * C42592 +
                      (C43476 + C43477) * C42593) *
                         C47622 -
                     (C43478 * C42593 + (C43183 + C43182) * C42592 +
                      ((C113 * C305 + C47721 * C323) * C47464 +
                       (C113 * C293 + C47721 * C306) * C21796) *
                          C42591) *
                         C47784) *
                        C1075 +
                    ((((C113 * C294 + C47721 * C307) * C21796 +
                       (C113 * C308 + C47721 * C324) * C47464) *
                          C42591 +
                      (C43479 + C43480) * C42592 + C43487 * C42593) *
                         C47784 -
                     ((C43490 + C43491) * C42593 + (C43482 + C43481) * C42592 +
                      (C43480 + C43479) * C42591) *
                         C47622) *
                        C47815) *
                       C47769 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      (C42825 + C42826) * C42593) *
                         C47622 -
                     (C42834 * C42593 + (C42822 + C42821) * C42592 +
                      (C167 * C47464 + C166 * C21796) * C42591) *
                         C47784) *
                        C1074 +
                    (((C359 * C21796 + C358 * C47464) * C42591 +
                      (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                         C47784 -
                     ((C12792 * C47464 + C12793 * C21796) * C42593 +
                      (C43189 + C43188) * C42592 + (C43187 + C43186) * C42591) *
                         C47622) *
                        C1075 +
                    (((C43736 + C43737) * C42591 + (C43738 + C43739) * C42592 +
                      ((C113 * C7438 + C47721 * C7441) * C21796 +
                       (C113 * C7442 + C47721 * C7444) * C47464) *
                          C42593) *
                         C47622 -
                     ((C43739 + C43738) * C42593 + (C43737 + C43736) * C42592 +
                      (C361 * C47464 + C360 * C21796) * C42591) *
                         C47784) *
                        C47815) *
                       C47500)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C10814 * C21796 + C10815 * C47464) * C42592 +
                    (C10817 * C21796 + C10816 * C47464) * C42593) *
                       C47535 * C47517 * C108 -
                   ((C550 * C47464 + C549 * C21796) * C42593 +
                    (C547 * C47464 + C548 * C21796) * C42592 +
                    (C167 * C47464 + C166 * C21796) * C42591) *
                       C47535 * C47517 * C109 +
                   ((C168 * C21796 + C169 * C47464) * C42591 +
                    (C546 * C21796 + C545 * C47464) * C42592 +
                    (C551 * C21796 + C552 * C47464) * C42593) *
                       C47535 * C47517 * C110 -
                   ((C555 * C47464 + C556 * C21796) * C42593 +
                    (C554 * C47464 + C553 * C21796) * C42592 +
                    (C170 * C47464 + C171 * C21796) * C42591) *
                       C47535 * C47517 * C111 +
                   ((C172 * C21796 + C173 * C47464) * C42591 +
                    (C780 * C21796 + C779 * C47464) * C42592 +
                    ((C113 * C489 + C47721 * C508) * C21796 +
                     (C113 * C509 + C47721 * C519) * C47464) *
                        C42593) *
                       C47535 * C47517 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C10814 * C21796 + C10815 * C47464) * C42592 +
                     (C10817 * C21796 + C10816 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C11693 * C47464 + C11692 * C21796) * C42593 +
                     (C11295 * C47464 + C11294 * C21796) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C47842 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C288 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C959 * C21796 + C960 * C47464) * C42592 +
                     (C2186 * C21796 + C2185 * C47464) * C42593) *
                        C47535 * C47842 -
                    ((C550 * C47464 + C549 * C21796) * C42593 +
                     (C547 * C47464 + C548 * C21796) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C47854 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C289 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C546 * C21796 + C545 * C47464) * C42592 +
                     (C551 * C21796 + C552 * C47464) * C42593) *
                        C47535 * C47854 -
                    ((C2183 * C47464 + C2184 * C21796) * C42593 +
                     (C962 * C47464 + C961 * C21796) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C47842 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47721 * C124) * C21796 +
                      (C113 * C125 + C47721 * C138) * C47464) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42833 * C42593) *
                        C47535 * C1074 -
                    ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                     ((C113 * C305 + C47721 * C323) * C47464 +
                      (C113 * C293 + C47721 * C306) * C21796) *
                         C42591) *
                        C47535 * C1075 +
                    (((C113 * C294 + C47721 * C307) * C21796 +
                      (C113 * C308 + C47721 * C324) * C47464) *
                         C42591 +
                     (C11694 * C21796 + C11695 * C47464) * C42592 +
                     (C11699 * C21796 + C11698 * C47464) * C42593) *
                        C47535 * C47815) *
                       C47851 +
                   (((C359 * C21796 + C358 * C47464) * C42591 +
                     (C43186 + C43187) * C42592 + (C43188 + C43189) * C42593) *
                        C47535 * C1075 -
                    (C42834 * C42593 + (C42822 + C42821) * C42592 +
                     (C167 * C47464 + C166 * C21796) * C42591) *
                        C47535 * C1074 -
                    ((C11696 * C47464 + C11697 * C21796) * C42593 +
                     (C1599 * C47464 + C1600 * C21796) * C42592 +
                     (C361 * C47464 + C360 * C21796) * C42591) *
                        C47535 * C47815) *
                       C47838 +
                   (((C168 * C21796 + C169 * C47464) * C42591 +
                     (C42827 + C42828) * C42592 + C42835 * C42593) *
                        C47535 * C1074 -
                    ((C43193 + C43192) * C42593 + (C43191 + C43190) * C42592 +
                     (C356 * C47464 + C357 * C21796) * C42591) *
                        C47535 * C1075 +
                    ((C362 * C21796 + C363 * C47464) * C42591 +
                     (C1598 * C21796 + C1597 * C47464) * C42592 +
                     ((C113 * C1290 + C47721 * C1307) * C21796 +
                      (C113 * C1308 + C47721 * C1317) * C47464) *
                         C42593) *
                        C47535 * C47815) *
                       C47809)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C47721 * C124) * C21796 +
                     (C113 * C125 + C47721 * C138) * C47464) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42833 * C42593) *
                       C47535 * C1142 -
                   ((C43185 + C43184) * C42593 + (C43183 + C43182) * C42592 +
                    ((C113 * C305 + C47721 * C323) * C47464 +
                     (C113 * C293 + C47721 * C306) * C21796) *
                        C42591) *
                       C47535 * C1143 +
                   (((C113 * C294 + C47721 * C307) * C21796 +
                     (C113 * C308 + C47721 * C324) * C47464) *
                        C42591 +
                    (C11694 * C21796 + C11695 * C47464) * C42592 +
                    (C11699 * C21796 + C11698 * C47464) * C42593) *
                       C47535 * C1144 -
                   (((C113 * C6086 + C47721 * C6089) * C47464 +
                     (C113 * C6083 + C47721 * C6085) * C21796) *
                        C42593 +
                    (C12179 * C47464 + C12178 * C21796) * C42592 +
                    ((C113 * C1158 + C47721 * C1168) * C47464 +
                     (C113 * C1150 + C47721 * C1159) * C21796) *
                        C42591) *
                       C47535 * C1145 +
                   (((C113 * C1151 + C47721 * C1160) * C21796 +
                     (C113 * C1161 + C47721 * C1169) * C47464) *
                        C42591 +
                    ((C113 * C6569 + C47721 * C6571) * C21796 +
                     (C113 * C6572 + C47721 * C6575) * C47464) *
                        C42592 +
                    ((C113 * C22645 + C47721 * C22646) * C21796 +
                     (C113 * C22647 + C47721 * C22648) * C47464) *
                        C42593) *
                       C47535 * C1146) *
                  C47489) /
                     (p * q * std::sqrt(p + q));
}
