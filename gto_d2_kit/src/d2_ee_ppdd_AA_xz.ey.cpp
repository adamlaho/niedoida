/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46746 = ae * be;
    const double C46745 = ae + be;
    const double C46744 = 0 * be;
    const double C46743 = xA - xB;
    const double C46763 = zA - zB;
    const double C46781 = 0 * be;
    const double C46794 = xP - xQ;
    const double C46793 = zP - zQ;
    const double C46792 = p + q;
    const double C46791 = p * q;
    const double C46801 = std::pow(ae, 2);
    const double C46799 = bs[3];
    const double C46809 = bs[4];
    const double C46818 = bs[5];
    const double C46832 = bs[6];
    const double C46854 = bs[7];
    const double C46963 = yP - yQ;
    const double C47172 = bs[2];
    const double C117 = bs[0];
    const double C47592 = ce + de;
    const double C47591 = ce * de;
    const double C47590 = xC - xD;
    const double C47624 = yC - yD;
    const double C47642 = zC - zD;
    const double C47812 = yA - yB;
    const double C46747 = std::pow(C46745, 2);
    const double C47581 = 2 * C46745;
    const double C46748 = C46746 * C46743;
    const double C47572 = std::pow(C46743, 2);
    const double C47877 = C46743 * be;
    const double C47876 = C46743 * ae;
    const double C46782 = C46746 * C46763;
    const double C47846 = std::pow(C46763, 2);
    const double C47912 = C46763 * be;
    const double C47910 = C46763 * ae;
    const double C46819 = std::pow(C46794, 2);
    const double C46887 = C46794 * ae;
    const double C46802 = C46793 * ae;
    const double C46800 = C46794 * C46793;
    const double C47005 = std::pow(C46793, 2);
    const double C46795 = 2 * C46791;
    const double C46972 = std::pow(C46963, 2);
    const double C47596 = 2 * C47592;
    const double C47595 = std::pow(C47592, 2);
    const double C47597 = C47590 * de;
    const double C47594 = C47590 * ce;
    const double C47593 = std::pow(C47590, 2);
    const double C47625 = std::pow(C47624, 2);
    const double C47684 = C47624 * de;
    const double C47682 = C47624 * ce;
    const double C47643 = std::pow(C47642, 2);
    const double C47726 = C47642 * de;
    const double C47724 = C47642 * ce;
    const double C47831 = std::pow(C47812, 2);
    const double C47911 = C47812 * be;
    const double C47909 = C47812 * ae;
    const double C46749 = 2 * C46747;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C46747;
    const double C47878 = std::pow(C47581, -1);
    const double C47573 = C47572 * C46746;
    const double C47847 = C47846 * C46746;
    const double C46892 = C46799 * C46887;
    const double C46895 = C46809 * C46887;
    const double C46901 = C46818 * C46887;
    const double C46915 = C46832 * C46887;
    const double C46936 = C46854 * C46887;
    const double C46805 = C46799 * C46802;
    const double C46811 = C46809 * C46802;
    const double C46821 = C46818 * C46802;
    const double C46836 = C46832 * C46802;
    const double C46860 = C46854 * C46802;
    const double C46804 = C46800 * C46801;
    const double C46796 = C46795 / C46792;
    const double C124 = (-(bs[1] * C46802 * C46795) / C46792) / C46745;
    const double C125 = (-(bs[1] * C46887 * C46795) / C46792) / C46745;
    const double C118 = -(C46794 * bs[1] * C46795) / C46792;
    const double C293 = -(C46963 * bs[1] * C46795) / C46792;
    const double C482 = -(C46793 * bs[1] * C46795) / C46792;
    const double C47609 = std::pow(C47596, -1);
    const double C47886 = std::pow(C47596, -2);
    const double C47610 = 2 * C47595;
    const double C47890 = C47595 * C47596;
    const double C47889 = 4 * C47595;
    const double C47879 = std::pow(C47594, 2);
    const double C47598 = C47593 * C47591;
    const double C47626 = C47625 * C47591;
    const double C47891 = std::pow(C47682, 2);
    const double C47644 = C47643 * C47591;
    const double C47893 = std::pow(C47724, 2);
    const double C47832 = C47831 * C46746;
    const double C47574 = C47573 / C46745;
    const double C47848 = C47847 / C46745;
    const double C46810 = C46809 * C46804;
    const double C46820 = C46818 * C46804;
    const double C46834 = C46832 * C46804;
    const double C46858 = C46854 * C46804;
    const double C46798 = -C46796;
    const double C46808 = std::pow(C46796, 4);
    const double C46831 = std::pow(C46796, 6);
    const double C139 = (ae * std::pow(C46796, 2) * bs[2] * C46793 * ae +
                         C46794 * std::pow(-C46796, 3) * bs[3] * C46794 *
                             C46793 * std::pow(ae, 2)) /
                        C46747;
    const double C47171 = std::pow(C46796, 2);
    const double C126 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46802) / C46745;
    const double C127 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46887) / C46745 -
        (ae * bs[1] * C46795) / (C46792 * C46745);
    const double C47924 = 4 * C47890;
    const double C47923 = C47592 * C47889;
    const double C47599 = C47598 / C47592;
    const double C47627 = C47626 / C47592;
    const double C47645 = C47644 / C47592;
    const double C47833 = C47832 / C46745;
    const double C47575 = -C47574;
    const double C47849 = -C47848;
    const double C46803 = std::pow(C46798, 3);
    const double C46817 = std::pow(C46798, 5);
    const double C46853 = std::pow(C46798, 7);
    const double C46813 = C46808 * C46811;
    const double C46812 = C46808 * C46810;
    const double C46897 = C46808 * C46895;
    const double C46902 = C46809 * C46808;
    const double C46839 = C46831 * C46836;
    const double C46838 = C46831 * C46834;
    const double C46917 = C46831 * C46915;
    const double C46937 = C46832 * C46831;
    const double C47173 = C47172 * C47171;
    const double C305 = (C46963 * C47171 * C47172 * C46887) / C46745;
    const double C306 = (C46963 * C47171 * C47172 * C46802) / C46745;
    const double C494 = (C46793 * C47171 * C47172 * C46887) / C46745;
    const double C495 = (C46793 * C47171 * C47172 * C46802) / C46745 -
                        (ae * bs[1] * C46795) / (C46792 * C46745);
    const double C47600 = -C47599;
    const double C47628 = -C47627;
    const double C47646 = -C47645;
    const double C47834 = -C47833;
    const double C47576 = std::exp(C47575);
    const double C47850 = std::exp(C47849);
    const double C46806 = C46803 * C46805;
    const double C46888 = C46799 * C46803;
    const double C46893 = C46803 * C46892;
    const double C323 = ((yP - yQ) * C46803 * C46799 * C46804) / C46747;
    const double C512 = (ae * std::pow(C46796, 2) * bs[2] * C46887 +
                         C46793 * C46803 * C46799 * C46804) /
                        C46747;
    const double C46823 = C46817 * C46821;
    const double C46822 = C46817 * C46820;
    const double C46903 = C46817 * C46901;
    const double C46916 = C46818 * C46817;
    const double C46863 = C46853 * C46860;
    const double C46862 = C46853 * C46858;
    const double C46939 = C46853 * C46936;
    const double C46816 = ae * C46813;
    const double C46815 = C46794 * C46813;
    const double C47301 = C46793 * C46813;
    const double C47327 = C46963 * C46813;
    const double C324 =
        (C46803 * C46799 * C46804 + C46812 * std::pow(yP - yQ, 2)) / C46747;
    const double C46898 = C46794 * C46897;
    const double C46980 = C46963 * C46897;
    const double C47003 = ae * C46897;
    const double C47002 = C46793 * C46897;
    const double C46905 = C46794 * C46902;
    const double C46904 = C46902 * ae;
    const double C47179 = C46902 * C46819;
    const double C47273 = C46902 * C46972;
    const double C47303 = C46902 * C47005;
    const double C47328 = C46963 * C46902;
    const double C47390 = C46793 * C46902;
    const double C46841 = C46839 * C46819;
    const double C46852 = ae * C46839;
    const double C46851 = C46794 * C46839;
    const double C47418 = C46839 * C46972;
    const double C47446 = C46963 * C46839;
    const double C47464 = C46793 * C46839;
    const double C46840 = C46794 * C46838;
    const double C47036 = C46838 * C46972;
    const double C47058 = C46963 * C46838;
    const double C47078 = C46793 * C46838;
    const double C46921 = C46794 * C46917;
    const double C47043 = C46917 * C46972;
    const double C47059 = C46963 * C46917;
    const double C47079 = C46917 * C47005;
    const double C47147 = ae * C46917;
    const double C47146 = C46793 * C46917;
    const double C46942 = C46937 * C46819;
    const double C46941 = C46794 * C46937;
    const double C46940 = C46937 * ae;
    const double C47426 = C46937 * C46972;
    const double C47449 = C46963 * C46937;
    const double C47467 = C46937 * C47005;
    const double C119 = C47173 * C46819 - (bs[1] * C46795) / C46792;
    const double C292 = C46963 * C46794 * C47173;
    const double C294 = C47173 * C46972 - (bs[1] * C46795) / C46792;
    const double C481 = C46793 * C46794 * C47173;
    const double C483 = C47173 * C47005 - (bs[1] * C46795) / C46792;
    const double C926 = C46793 * C46963 * C47173;
    const double C47601 = std::exp(C47600);
    const double C47629 = std::exp(C47628);
    const double C47647 = std::exp(C47646);
    const double C47835 = std::exp(C47834);
    const double C46750 = C46748 * C47576;
    const double C47914 = C47878 * C47576;
    const double C47913 = C47576 * C47876;
    const double C4755 = -(C47576 * C47877) / C46745;
    const double C149 = C47850 * C139;
    const double C147 = C47850 * C126;
    const double C4909 = C47850 * C306;
    const double C46783 = C46782 * C47850;
    const double C113 = -(2 * ae * be * (zA - zB) * C47850) / (ae + be);
    const double C10415 =
        ((C47850 - (C46763 * 2 * C46746 * C46763 * C47850) / C46745) * ae) /
            C46745 -
        (0 * be) / C46749;
    const double C10416 =
        (0 * ae) / C46745 - (C46746 * C46763 * C47850) / C46747;
    const double C31444 =
        (-(0 * be) / C46745) / (2 * C46745) -
        ((C47850 - (C46763 * 2 * C46746 * C46763 * C47850) / C46745) * be) /
            C46745;
    const double C31445 =
        (-(2 * C46746 * C46763 * C47850) / C46745) / (2 * C46745) -
        (0 * be) / C46745;
    const double C47947 = C47878 * C47850;
    const double C47946 = C47850 * C47910;
    const double C31442 = -(C47850 * C47912) / C46745;
    const double C140 = (C46803 * C46799 * C46804 + ae * C46794 * C46806 +
                         C46794 * (ae * C46806 + C46794 * std::pow(C46796, 4) *
                                                     bs[4] * C46804)) /
                        C46747;
    const double C141 =
        (2 * (ae * C46806 + C46794 * C46812) +
         ae * (C46806 + C46813 * std::pow(C46794, 2)) +
         C46794 * (C46812 + ae * C46794 * C46813 +
                   C46794 * (ae * C46813 +
                             C46794 * std::pow(C46798, 5) * bs[5] * C46804))) /
        C46747;
    const double C322 = ((yP - yQ) * (ae * C46806 + C46794 * C46812)) / C46747;
    const double C511 = (ae * (C46794 * C46803 * C46799 * C46887 +
                               bs[2] * std::pow(C46796, 2) * ae) +
                         C46793 * (ae * C46806 + C46794 * C46812)) /
                        C46747;
    const double C128 =
        (std::pow(C46796, 2) * bs[2] * C46802 + C46806 * C46819) / C46745;
    const double C131 =
        (2 * C46794 * C46806 + C46794 * (C46806 + C46813 * C46819)) / C46745;
    const double C302 = (C46963 * (C46806 + C46813 * C46819)) / C46745;
    const double C304 = (C46963 * C46794 * C46806) / C46745;
    const double C307 = (C47171 * C47172 * C46802 + C46806 * C46972) / C46745;
    const double C493 =
        (C46793 * C46794 * C46806 + C46794 * C47173 * ae) / C46745;
    const double C496 =
        (C47171 * C47172 * C46802 + C46793 * (C46793 * C46806 + C47173 * ae) +
         C46793 * C47173 * ae) /
        C46745;
    const double C931 =
        (C46793 * C46963 * C46806 + C46963 * C47173 * ae) / C46745;
    const double C1159 =
        (2 * C46963 * C46806 + C46963 * (C46806 + C46813 * C46972)) / C46745;
    const double C46896 = C46888 * ae;
    const double C47178 = C46794 * C46888;
    const double C47265 = C46963 * C46888;
    const double C47302 = C46793 * C46888;
    const double C491 = (C46793 * (C46806 + C46813 * C46819) +
                         (C47173 + C46888 * C46819) * ae) /
                        C46745;
    const double C1302 = (C46793 * (C46806 + C46813 * C46972) +
                          (C47173 + C46888 * C46972) * ae) /
                         C46745;
    const double C120 =
        2 * C46794 * C47173 + C46794 * (C47173 + C46888 * C46819);
    const double C291 = C46963 * (C47173 + C46888 * C46819);
    const double C480 = C46793 * (C47173 + C46888 * C46819);
    const double C1150 =
        2 * C46963 * C47173 + C46963 * (C47173 + C46888 * C46972);
    const double C1287 = C46793 * (C47173 + C46888 * C46972);
    const double C2002 =
        2 * C46793 * C47173 + C46793 * (C47173 + C46888 * C47005);
    const double C513 = (C46803 * C46799 * C46804 + ae * C46793 * C46893 +
                         C46793 * (ae * C46893 + C46793 * C46812)) /
                        C46747;
    const double C941 =
        (ae * C46963 * C46893 + C46793 * C46963 * C46812) / C46747;
    const double C129 =
        (C47171 * C47172 * C46887 + C46794 * (C46794 * C46893 + C47173 * ae) +
         C46794 * C47173 * ae) /
        C46745;
    const double C303 = (C46963 * (C46794 * C46893 + C47173 * ae)) / C46745;
    const double C308 = (C47171 * C47172 * C46887 + C46893 * C46972) / C46745;
    const double C492 = (C46793 * (C46794 * C46893 + C47173 * ae)) / C46745;
    const double C497 = (C47171 * C47172 * C46887 + C46893 * C47005) / C46745;
    const double C932 = (C46793 * C46963 * C46893) / C46745;
    const double C1158 =
        (2 * C46963 * C46893 + C46963 * (C46893 + C46897 * C46972)) / C46745;
    const double C1301 = (C46793 * (C46893 + C46897 * C46972)) / C46745;
    const double C2010 =
        (2 * C46793 * C46893 + C46793 * (C46893 + C46897 * C47005)) / C46745;
    const double C4911 = C47850 * C323;
    const double C46825 = C46823 * C46819;
    const double C46830 = ae * C46823;
    const double C46829 = C46794 * C46823;
    const double C47339 = C46823 * C46972;
    const double C47365 = C46963 * C46823;
    const double C47389 = C46793 * C46823;
    const double C1160 =
        (3 * (C46806 + C46813 * C46972) +
         C46963 * (2 * C46963 * C46813 + C46963 * (C46813 + C46823 * C46972))) /
        C46745;
    const double C46824 = C46794 * C46822;
    const double C47004 = C46793 * C46822;
    const double C47027 = C46963 * C46822;
    const double C1168 = (2 * C46963 * C46812 +
                          C46963 * (C46812 + C46822 * std::pow(C46963, 2))) /
                         C46747;
    const double C1169 =
        (3 * (C46812 + C46822 * C46972) +
         C46963 * (2 * C46963 * C46822 + C46963 * (C46822 + C46838 * C46972))) /
        C46747;
    const double C1314 = (ae * (C46893 + C46897 * C46972) +
                          C46793 * (C46812 + C46822 * C46972)) /
                         C46747;
    const double C2020 = (2 * (ae * C46893 + C46793 * C46812) +
                          ae * (C46893 + C46897 * std::pow(C46793, 2)) +
                          C46793 * (C46812 + ae * C46793 * C46897 +
                                    C46793 * (ae * C46897 + C46793 * C46822))) /
                         C46747;
    const double C46906 = C46794 * C46903;
    const double C46985 = C46903 * C46972;
    const double C47007 = C46903 * C47005;
    const double C47028 = C46963 * C46903;
    const double C47077 = ae * C46903;
    const double C47076 = C46793 * C46903;
    const double C46920 = C46916 * C46819;
    const double C46919 = C46794 * C46916;
    const double C46918 = C46916 * ae;
    const double C47348 = C46916 * C46972;
    const double C47368 = C46963 * C46916;
    const double C47391 = C46916 * C47005;
    const double C47465 = C46793 * C46916;
    const double C46865 = C46863 * C46819;
    const double C46864 = C46794 * C46862;
    const double C47105 = C46862 * C46972;
    const double C47130 = C46963 * C46862;
    const double C47148 = C46793 * C46862;
    const double C46943 = C46794 * C46939;
    const double C47112 = C46939 * C46972;
    const double C47131 = C46963 * C46939;
    const double C47150 = C46939 * C47005;
    const double C309 = (C46794 * C46806 + C46815 * C46972) / C46745;
    const double C4917 = C47850 * C324;
    const double C1311 = (C46963 * C46812 + ae * C46793 * C46980 +
                          C46793 * (ae * C46980 + C46793 * C46963 * C46822)) /
                         C46747;
    const double C1295 = (C46963 * C46893 + C46980 * C47005) / C46745;
    const double C46907 = C46905 * ae;
    const double C47182 = 2 * C46905;
    const double C47262 = C46963 * C46905;
    const double C47309 = C46793 * C46905;
    const double C47180 = C46888 + C47179;
    const double C47274 = C46888 + C47273;
    const double C47305 = C46888 + C47303;
    const double C47347 = 2 * C47328;
    const double C47367 = C46793 * C47328;
    const double C47366 = C47328 * ae;
    const double C47395 = 2 * C47390;
    const double C47393 = C47390 * ae;
    const double C46843 = C46823 + C46841;
    const double C46859 = 2 * C46851;
    const double C46857 = ae * C46851;
    const double C47343 = C46851 * C46972;
    const double C47375 = C46963 * C46851;
    const double C47403 = C46793 * C46851;
    const double C47419 = C46823 + C47418;
    const double C47450 = C46793 * C47446;
    const double C47037 = C46822 + C47036;
    const double C47060 = C46793 * C47058;
    const double C47104 = 2 * C47058;
    const double C47044 = C46903 + C47043;
    const double C47061 = C47059 * C47005;
    const double C47111 = 2 * C47059;
    const double C47129 = ae * C47059;
    const double C47128 = C46793 * C47059;
    const double C47083 = C46903 + C47079;
    const double C47154 = 2 * C47146;
    const double C47152 = ae * C47146;
    const double C46945 = C46916 + C46942;
    const double C46944 = C46941 * ae;
    const double C47355 = C46941 * C46972;
    const double C47378 = C46963 * C46941;
    const double C47405 = C46941 * C47005;
    const double C47427 = C46916 + C47426;
    const double C47452 = C47449 * C47005;
    const double C47471 = C46916 + C47467;
    const double C47603 = C47601 * C47594;
    const double C47602 = C47601 / C47596;
    const double C47612 = C47609 * C47601;
    const double C47882 = C47601 * C47597;
    const double C47921 = C47886 * C47601;
    const double C47915 = C47601 * C47879;
    const double C47683 = C47629 / C47596;
    const double C47685 = C47629 * C47682;
    const double C47692 = C47609 * C47629;
    const double C47897 = C47629 * C47684;
    const double C47927 = C47886 * C47629;
    const double C47925 = C47629 * C47891;
    const double C47725 = C47647 / C47596;
    const double C47727 = C47647 * C47724;
    const double C47734 = C47609 * C47647;
    const double C47903 = C47647 * C47726;
    const double C47930 = C47886 * C47647;
    const double C47928 = C47647 * C47893;
    const double C47945 = C47878 * C47835;
    const double C47944 = C47835 * C47909;
    const double C16115 = -(C47835 * C47911) / C46745;
    const double C116 = ((0 * ae) / C46745 - C46750 / C46747) / (2 * C46745) -
                        (0 * be) / C46745;
    const double C4759 =
        (-C46744 / C46745) / (2 * C46745) -
        ((C47576 - (C46743 * 2 * C46750) / C46745) * be) / C46745;
    const double C4760 =
        (-(2 * C46750) / C46745) / (2 * C46745) - (0 * be) / C46745;
    const double C16117 =
        ((C47576 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
        C46744 / C46749;
    const double C16118 = (0 * ae) / C46745 - C46750 / C46747;
    const double C21631 = -(2 * C46750) / C46745;
    const double C115 =
        (((C47576 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
         C46744 / C46749) /
            (2 * C46745) -
        ((C46743 * ((0 * ae) / C46745 - C46750 / C46747) + C47914) * be) /
            C46745;
    const double C104 = C47914 / C47581;
    const double C102 = C47576 / C47581 - (C47913 * C47877) / C46747;
    const double C103 = C47913 / C46749 - (C47914 * C47877) / C46745;
    const double C16113 = C47913 / C46745;
    const double C42687 = ((0 * ae) / C46745 - C46783 / C46747) / (2 * C46745) -
                          (0 * be) / C46745;
    const double C150 = C113 * C119;
    const double C148 = C113 * C127;
    const double C146 = C113 * C118;
    const double C338 = C113 * C292;
    const double C527 = C113 * C481;
    const double C4918 = C113 * C294;
    const double C4910 = C113 * C305;
    const double C4908 = C113 * C293;
    const double C5552 = C113 * C926;
    const double C10432 = C10415 * C119;
    const double C10422 = C10415 * C127;
    const double C10418 = C10415 * C118;
    const double C10618 = C10415 * C292;
    const double C10812 = C10415 * C481;
    const double C26031 = C10415 * C294;
    const double C26021 = C10415 * C305;
    const double C26017 = C10415 * C293;
    const double C26647 = C10415 * C926;
    const double C10420 = C10416 * C481;
    const double C26019 = C10416 * C926;
    const double C31461 = C31444 * C119;
    const double C31451 = C31444 * C127;
    const double C31447 = C31444 * C118;
    const double C31647 = C31444 * C292;
    const double C31841 = C31444 * C481;
    const double C37295 = C31444 * C294;
    const double C37285 = C31444 * C305;
    const double C37281 = C31444 * C293;
    const double C37911 = C31444 * C926;
    const double C31449 = C31445 * C481;
    const double C37283 = C31445 * C926;
    const double C42686 =
        (((C47850 - (C46763 * 2 * C46783) / C46745) * ae) / C46745 -
         C46781 / C46749) /
            (2 * C46745) -
        ((C46763 * ((0 * ae) / C46745 - C46783 / C46747) + C47947) * be) /
            C46745;
    const double C42684 = C47947 / C47581;
    const double C10413 = C47946 / C46745;
    const double C42682 = C47850 / C47581 - (C47946 * C47912) / C46747;
    const double C42683 = C47946 / C46749 - (C47947 * C47912) / C46745;
    const double C31452 = C31442 * C139;
    const double C31448 = C31442 * C126;
    const double C37292 = C31442 * C324;
    const double C37286 = C31442 * C323;
    const double C37282 = C31442 * C306;
    const double C153 = C47850 * C140;
    const double C31458 = C31442 * C140;
    const double C155 = C47850 * C141;
    const double C31468 = C31442 * C141;
    const double C337 = C47850 * C322;
    const double C31644 = C31442 * C322;
    const double C526 = C47850 * C511;
    const double C10425 = C47947 * C511;
    const double C31454 = C47947 * C511;
    const double C31838 = C31442 * C511;
    const double C151 = C47850 * C128;
    const double C31462 = C31442 * C128;
    const double C157 = C47850 * C131;
    const double C31464 = C31442 * C131;
    const double C335 = C47850 * C302;
    const double C31658 = C31442 * C302;
    const double C339 = C47850 * C304;
    const double C31648 = C31442 * C304;
    const double C4919 = C47850 * C307;
    const double C37296 = C31442 * C307;
    const double C528 = C47850 * C493;
    const double C10421 = C47947 * C493;
    const double C31450 = C47947 * C493;
    const double C31842 = C31442 * C493;
    const double C5553 = C47850 * C931;
    const double C26020 = C47947 * C931;
    const double C37284 = C47947 * C931;
    const double C37912 = C31442 * C931;
    const double C5803 = C47850 * C1159;
    const double C38146 = C31442 * C1159;
    const double C46899 = C46898 + C46896;
    const double C47304 = C47301 + C46896;
    const double C2011 =
        (2 * (C46793 * C46806 + C47173 * ae) +
         C46793 * (C46806 + C46793 * (C46793 * C46813 + C46896) +
                   C46793 * C46888 * ae) +
         (C47173 + C46888 * C47005) * ae) /
        C46745;
    const double C498 =
        (C46794 * C46806 + C46793 * (C46793 * C46815 + C47178 * ae) +
         C46793 * C47178 * ae) /
        C46745;
    const double C933 =
        (C46793 * C46963 * C46815 + C46963 * C47178 * ae) / C46745;
    const double C295 = C46794 * C47173 + C47178 * C46972;
    const double C484 = C46794 * C47173 + C47178 * C47005;
    const double C927 = C46793 * C46963 * C47178;
    const double C1149 =
        2 * C46963 * C47178 + C46963 * (C47178 + C46905 * C46972);
    const double C1286 = C46793 * (C47178 + C46905 * C46972);
    const double C2001 =
        2 * C46793 * C47178 + C46793 * (C47178 + C46905 * C47005);
    const double C1296 =
        (C46963 * C46806 + C46793 * (C46793 * C46963 * C46813 + C47265 * ae) +
         C46793 * C47265 * ae) /
        C46745;
    const double C2405 =
        (2 * (C46793 * C47327 + C47265 * ae) +
         C46793 * (C47327 + C46793 * (C46793 * C46963 * C46823 + C47328 * ae) +
                   C46793 * C47328 * ae) +
         (C47265 + C47328 * C47005) * ae) /
        C46745;
    const double C1284 = C46963 * C47173 + C47265 * C47005;
    const double C2402 =
        2 * C46793 * C47265 + C46793 * (C47265 + C47328 * C47005);
    const double C524 = C47850 * C491;
    const double C10431 = C47947 * C491;
    const double C31460 = C47947 * C491;
    const double C31852 = C31442 * C491;
    const double C5989 = C47850 * C1302;
    const double C26030 = C47947 * C1302;
    const double C37294 = C47947 * C1302;
    const double C38324 = C31442 * C1302;
    const double C156 = C113 * C120;
    const double C10434 = C10415 * C120;
    const double C31463 = C31444 * C120;
    const double C334 = C113 * C291;
    const double C10628 = C10415 * C291;
    const double C31657 = C31444 * C291;
    const double C523 = C113 * C480;
    const double C10430 = C10416 * C480;
    const double C10822 = C10415 * C480;
    const double C31459 = C31445 * C480;
    const double C31851 = C31444 * C480;
    const double C5802 = C113 * C1150;
    const double C26881 = C10415 * C1150;
    const double C38145 = C31444 * C1150;
    const double C5988 = C113 * C1287;
    const double C26029 = C10416 * C1287;
    const double C27059 = C10415 * C1287;
    const double C37293 = C31445 * C1287;
    const double C38323 = C31444 * C1287;
    const double C5551 = C47850 * C941;
    const double C26024 = C47947 * C941;
    const double C37288 = C47947 * C941;
    const double C37908 = C31442 * C941;
    const double C152 = C113 * C129;
    const double C10428 = C10415 * C129;
    const double C31457 = C31444 * C129;
    const double C336 = C113 * C303;
    const double C10614 = C10415 * C303;
    const double C31643 = C31444 * C303;
    const double C4916 = C113 * C308;
    const double C26027 = C10415 * C308;
    const double C37291 = C31444 * C308;
    const double C525 = C113 * C492;
    const double C10424 = C10416 * C492;
    const double C10808 = C10415 * C492;
    const double C31453 = C31445 * C492;
    const double C31837 = C31444 * C492;
    const double C5550 = C113 * C932;
    const double C26023 = C10416 * C932;
    const double C26643 = C10415 * C932;
    const double C37287 = C31445 * C932;
    const double C37907 = C31444 * C932;
    const double C5804 = C113 * C1158;
    const double C26885 = C10415 * C1158;
    const double C38149 = C31444 * C1158;
    const double C5990 = C113 * C1301;
    const double C26025 = C10416 * C1301;
    const double C27063 = C10415 * C1301;
    const double C37289 = C31445 * C1301;
    const double C38327 = C31444 * C1301;
    const double C46827 = C46813 + C46825;
    const double C46842 = C46830 + C46840;
    const double C46835 = 2 * C46829;
    const double C46833 = ae * C46829;
    const double C47308 = C46793 * C46829;
    const double C47331 = C46963 * C46829;
    const double C1157 =
        (2 * C46963 * C46815 + C46963 * (C46815 + C46829 * C46972)) / C46745;
    const double C1162 =
        (3 * (C46815 + C46829 * C46972) +
         C46963 * (2 * C46963 * C46829 + C46963 * (C46829 + C46851 * C46972))) /
        C46745;
    const double C1300 = (C46793 * (C46815 + C46829 * C46972) +
                          (C47178 + C46905 * C46972) * ae) /
                         C46745;
    const double C47340 = C46813 + C47339;
    const double C47369 = C46793 * C47365;
    const double C47417 = 2 * C47365;
    const double C47392 = C47389 + C46904;
    const double C5815 = C47850 * C1160;
    const double C38160 = C31442 * C1160;
    const double C46826 = C46816 + C46824;
    const double C47006 = C47003 + C47004;
    const double C5805 = C47850 * C1168;
    const double C38150 = C31442 * C1168;
    const double C5813 = C47850 * C1169;
    const double C38156 = C31442 * C1169;
    const double C5991 = C47850 * C1314;
    const double C26026 = C47947 * C1314;
    const double C37290 = C47947 * C1314;
    const double C38328 = C31442 * C1314;
    const double C46908 = C46906 + C46904;
    const double C46986 = C46897 + C46985;
    const double C47008 = C46897 + C47007;
    const double C47042 = 2 * C47028;
    const double C47057 = ae * C47028;
    const double C47056 = C46793 * C47028;
    const double C2411 =
        (2 * (ae * C46980 + C46793 * C47027) + ae * (C46980 + C47028 * C47005) +
         C46793 * (C47027 + ae * C46793 * C47028 +
                   C46793 * (ae * C47028 + C46793 * C46963 * C46838))) /
        C46747;
    const double C2406 =
        (2 * C46793 * C46980 + C46793 * (C46980 + C47028 * C47005)) / C46745;
    const double C47081 = C47077 + C47078;
    const double C47082 = 2 * C47076;
    const double C47080 = ae * C47076;
    const double C46923 = C46902 + C46920;
    const double C46922 = C46919 * ae;
    const double C46938 = 2 * C46919;
    const double C47277 = C46919 * C46972;
    const double C47310 = C46919 * C47005;
    const double C47332 = C46963 * C46919;
    const double C47404 = C46793 * C46919;
    const double C46924 = C46921 + C46918;
    const double C47469 = C47464 + C46918;
    const double C47349 = C46902 + C47348;
    const double C47370 = C47368 * C47005;
    const double C47425 = 2 * C47368;
    const double C47448 = C46793 * C47368;
    const double C47447 = C47368 * ae;
    const double C47394 = C46902 + C47391;
    const double C47472 = 2 * C47465;
    const double C47470 = C47465 * ae;
    const double C46867 = C46839 + C46865;
    const double C46866 = C46852 + C46864;
    const double C47106 = C46838 + C47105;
    const double C47133 = C46793 * C47130;
    const double C47153 = C47147 + C47148;
    const double C46946 = C46943 + C46940;
    const double C47113 = C46917 + C47112;
    const double C47135 = C47131 * C47005;
    const double C47155 = C46917 + C47150;
    const double C341 = C47850 * C309;
    const double C31650 = C31442 * C309;
    const double C5985 = C47850 * C1311;
    const double C26642 = C47947 * C1311;
    const double C37906 = C47947 * C1311;
    const double C38320 = C31442 * C1311;
    const double C5984 = C113 * C1295;
    const double C26641 = C10416 * C1295;
    const double C27055 = C10415 * C1295;
    const double C37905 = C31445 * C1295;
    const double C38319 = C31444 * C1295;
    const double C2009 =
        (2 * (C46793 * C46815 + C47178 * ae) +
         C46793 * (C46815 + C46793 * (C46793 * C46829 + C46907) +
                   C46793 * C46905 * ae) +
         (C47178 + C46905 * C47005) * ae) /
        C46745;
    const double C1294 =
        (C46963 * C46815 + C46793 * (C46793 * C46963 * C46829 + C47262 * ae) +
         C46793 * C47262 * ae) /
        C46745;
    const double C1283 = C46963 * C47178 + C47262 * C47005;
    const double C121 = 3 * (C47173 + C46888 * C46819) +
                        C46794 * (2 * C47178 + C46794 * C47180);
    const double C296 = C47173 + C46888 * C46819 + C47180 * C46972;
    const double C297 = C46963 * (2 * C47178 + C46794 * C47180);
    const double C485 = C47173 + C46888 * C46819 + C47180 * C47005;
    const double C486 = C46793 * (2 * C47178 + C46794 * C47180);
    const double C928 = C46793 * C46963 * C47180;
    const double C1303 =
        (C46806 + C46813 * C46972 +
         C46793 * (C46793 * (C46813 + C46823 * C46972) + C47274 * ae) +
         C46793 * C47274 * ae) /
        C46745;
    const double C1701 =
        (C46793 * (2 * C46963 * C46813 + C46963 * (C46813 + C46823 * C46972)) +
         (2 * C47265 + C46963 * C47274) * ae) /
        C46745;
    const double C1151 = 3 * (C47173 + C46888 * C46972) +
                         C46963 * (2 * C47265 + C46963 * C47274);
    const double C1288 = C47173 + C46888 * C46972 + C47274 * C47005;
    const double C1698 = C46793 * (2 * C47265 + C46963 * C47274);
    const double C2003 = 3 * (C47173 + C46888 * C47005) +
                         C46793 * (2 * C47302 + C46793 * C47305);
    const double C46845 = C46794 * C46843;
    const double C46855 = 3 * C46843;
    const double C46850 = ae * C46843;
    const double C47315 = C46793 * C46843;
    const double C47335 = C46963 * C46843;
    const double C46861 = C46838 + C46857;
    const double C47344 = C46829 + C47343;
    const double C47379 = C46793 * C47375;
    const double C47420 = C46963 * C47419;
    const double C47436 = C46793 * C47419;
    const double C5799 =
        (4 * (2 * C47027 + C46963 * C47037) +
         C46963 *
             (3 * C47037 + C46963 * (2 * C46963 * C46838 +
                                     C46963 * (C46838 + C46862 * C46972)))) /
        C46747;
    const double C47045 = C46963 * C47044;
    const double C47110 = 3 * C47044;
    const double C47121 = ae * C47044;
    const double C47120 = C46793 * C47044;
    const double C47063 = C47028 + C47061;
    const double C47134 = 2 * C47128;
    const double C47132 = ae * C47128;
    const double C47086 = C46793 * C47083;
    const double C47149 = 3 * C47083;
    const double C47145 = ae * C47083;
    const double C47156 = C46838 + C47152;
    const double C46948 = C46794 * C46945;
    const double C46947 = C46945 * ae;
    const double C47281 = C46945 * C46972;
    const double C47317 = C46945 * C47005;
    const double C47336 = C46963 * C46945;
    const double C47356 = C46919 + C47355;
    const double C47380 = C47378 * C47005;
    const double C47408 = C46919 + C47405;
    const double C47428 = C46963 * C47427;
    const double C47439 = C47427 * C47005;
    const double C47455 = C47368 + C47452;
    const double C47474 = C46793 * C47471;
    const double C47604 = C47603 * C47597;
    const double C47611 = C47603 / C47610;
    const double C47883 = C47609 * C47603;
    const double C47881 = C47603 / C47592;
    const double C288 = (C47601 * std::pow(C47597, 2)) / C47595 + C47602;
    const double C47613 = C47612 * C47597;
    const double C47887 = C47594 * C47612;
    const double C47885 = 2 * C47612;
    const double C47931 = C47612 / C47889;
    const double C112 = C47612 / C47924;
    const double C2883 = C47612 / C47596;
    const double C47917 = C47882 / C47592;
    const double C289 = (-2 * C47609 * C47882) / C47592;
    const double C47948 = C47915 / C47595;
    const double C1074 = (C47629 * std::pow(C47684, 2)) / C47595 + C47683;
    const double C47686 = C47685 * C47684;
    const double C47691 = C47685 / C47610;
    const double C47895 = C47685 / C47592;
    const double C47892 = C47609 * C47685;
    const double C47693 = C47692 * C47684;
    const double C47901 = C47682 * C47692;
    const double C47900 = 2 * C47692;
    const double C47937 = C47692 / C47889;
    const double C1146 = C47692 / C47924;
    const double C2880 = C47692 / C47596;
    const double C47933 = C47897 / C47592;
    const double C1075 = (-2 * C47609 * C47897) / C47592;
    const double C47953 = C47925 / C47595;
    const double C1820 = (C47647 * std::pow(C47726, 2)) / C47595 + C47725;
    const double C47728 = C47727 * C47726;
    const double C47733 = C47727 / C47610;
    const double C47896 = C47727 / C47592;
    const double C47894 = C47609 * C47727;
    const double C47735 = C47734 * C47726;
    const double C47907 = C47724 * C47734;
    const double C47906 = 2 * C47734;
    const double C47943 = C47734 / C47889;
    const double C1999 = C47734 / C47924;
    const double C3782 = C47734 / C47596;
    const double C47939 = C47903 / C47592;
    const double C1821 = (-2 * C47609 * C47903) / C47592;
    const double C47955 = C47928 / C47595;
    const double C21630 = C47945 / C47581;
    const double C4757 = C47944 / C46745;
    const double C21628 = C47835 / C47581 - (C47944 * C47911) / C46747;
    const double C21629 = C47944 / C46749 - (C47945 * C47911) / C46745;
    const double C114 =
        (((0 - (C46743 * C46744) / C46745) * ae) / C46745 - (0 * be) / C46749) /
            (2 * C46745) -
        ((C46743 * (((C47576 - (C46743 * 2 * C46750) / C46745) * ae) / C46745 -
                    C46744 / C46749) +
          C16113) *
         be) /
            C46745 +
        (0 * ae) / C46745 - C46750 / C46747;
    const double C167 = C148 + C149;
    const double C166 = C146 + C147;
    const double C4937 = C4910 + C4911;
    const double C4936 = C4908 + C4909;
    const double C10439 = C10413 * C141;
    const double C10435 = C10413 * C131;
    const double C10433 = C10413 * C128;
    const double C10429 = C10413 * C140;
    const double C10423 = C10413 * C139;
    const double C10419 = C10413 * C126;
    const double C10629 = C10413 * C302;
    const double C10621 = C10413 * C309;
    const double C10619 = C10413 * C304;
    const double C10615 = C10413 * C322;
    const double C10823 = C10413 * C491;
    const double C10813 = C10413 * C493;
    const double C10809 = C10413 * C511;
    const double C26032 = C10413 * C307;
    const double C26028 = C10413 * C324;
    const double C26022 = C10413 * C323;
    const double C26018 = C10413 * C306;
    const double C26648 = C10413 * C931;
    const double C26644 = C10413 * C941;
    const double C26896 = C10413 * C1160;
    const double C26892 = C10413 * C1169;
    const double C26886 = C10413 * C1168;
    const double C26882 = C10413 * C1159;
    const double C27064 = C10413 * C1314;
    const double C27060 = C10413 * C1302;
    const double C27056 = C10413 * C1311;
    const double C42685 =
        (((0 - (C46763 * C46781) / C46745) * ae) / C46745 - (0 * be) / C46749) /
            (2 * C46745) -
        ((C46763 * (((C47850 - (C46763 * 2 * C46783) / C46745) * ae) / C46745 -
                    C46781 / C46749) +
          C10413) *
         be) /
            C46745 +
        (0 * ae) / C46745 - C46783 / C46747;
    const double C31481 = C31451 + C31452;
    const double C31479 = C31447 + C31448;
    const double C37299 = C37285 + C37286;
    const double C37297 = C37281 + C37282;
    const double C168 = C150 + C151;
    const double C31486 = C31461 + C31462;
    const double C359 = C338 + C339;
    const double C31676 = C31647 + C31648;
    const double C4939 = C4918 + C4919;
    const double C37304 = C37295 + C37296;
    const double C548 = C527 + C528;
    const double C10451 = C10420 + C10421;
    const double C31480 = C31449 + C31450;
    const double C31870 = C31841 + C31842;
    const double C5563 = C5552 + C5553;
    const double C26034 = C26019 + C26020;
    const double C37298 = C37283 + C37284;
    const double C37916 = C37911 + C37912;
    const double C130 =
        (2 * (C46794 * C46893 + C47173 * ae) +
         C46794 * (C46893 + C46794 * C46899 + C46794 * C46888 * ae) +
         (C47173 + C46888 * C46819) * ae) /
        C46745;
    const double C301 =
        (C46963 * (C46893 + C46794 * C46899 + C47178 * ae)) / C46745;
    const double C310 =
        (C46794 * C46893 + C47173 * ae + C46899 * C46972) / C46745;
    const double C490 =
        (C46793 * (C46893 + C46794 * C46899 + C47178 * ae)) / C46745;
    const double C499 =
        (C46794 * C46893 + C47173 * ae + C46899 * C47005) / C46745;
    const double C934 = (C46793 * C46963 * C46899) / C46745;
    const double C2012 =
        (3 * (C46806 + C46793 * C47304 + C47302 * ae) +
         C46793 * (2 * C47304 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46904) +
                             C46793 * C46902 * ae) +
                   C47305 * ae) +
         (2 * C47302 + C46793 * C47305) * ae) /
        C46745;
    const double C530 = C47850 * C498;
    const double C10815 = C10413 * C498;
    const double C10811 = C47947 * C498;
    const double C31844 = C31442 * C498;
    const double C31840 = C47947 * C498;
    const double C948 = C47850 * C933;
    const double C10617 = C47947 * C933;
    const double C11333 = C10413 * C933;
    const double C31646 = C47947 * C933;
    const double C32362 = C31442 * C933;
    const double C340 = C113 * C295;
    const double C10620 = C10415 * C295;
    const double C31649 = C31444 * C295;
    const double C529 = C113 * C484;
    const double C10814 = C10415 * C484;
    const double C10810 = C10416 * C484;
    const double C31843 = C31444 * C484;
    const double C31839 = C31445 * C484;
    const double C947 = C113 * C927;
    const double C10616 = C10416 * C927;
    const double C11332 = C10415 * C927;
    const double C31645 = C31445 * C927;
    const double C32361 = C31444 * C927;
    const double C1433 = C113 * C1149;
    const double C11866 = C10415 * C1149;
    const double C32895 = C31444 * C1149;
    const double C1595 = C113 * C1286;
    const double C10622 = C10416 * C1286;
    const double C12072 = C10415 * C1286;
    const double C31651 = C31445 * C1286;
    const double C33101 = C31444 * C1286;
    const double C2299 = C113 * C2001;
    const double C10816 = C10416 * C2001;
    const double C12932 = C10415 * C2001;
    const double C31845 = C31445 * C2001;
    const double C33953 = C31444 * C2001;
    const double C5983 = C47850 * C1296;
    const double C26646 = C47947 * C1296;
    const double C27052 = C10413 * C1296;
    const double C37910 = C47947 * C1296;
    const double C38316 = C31442 * C1296;
    const double C7363 = C47850 * C2405;
    const double C27054 = C47947 * C2405;
    const double C28392 = C10413 * C2405;
    const double C38318 = C47947 * C2405;
    const double C39652 = C31442 * C2405;
    const double C5982 = C113 * C1284;
    const double C26645 = C10416 * C1284;
    const double C27051 = C10415 * C1284;
    const double C37909 = C31445 * C1284;
    const double C38315 = C31444 * C1284;
    const double C7362 = C113 * C2402;
    const double C27053 = C10416 * C2402;
    const double C28391 = C10415 * C2402;
    const double C38317 = C31445 * C2402;
    const double C39651 = C31444 * C2402;
    const double C171 = C156 + C157;
    const double C31487 = C31463 + C31464;
    const double C357 = C334 + C335;
    const double C31681 = C31657 + C31658;
    const double C546 = C523 + C524;
    const double C10456 = C10430 + C10431;
    const double C31485 = C31459 + C31460;
    const double C31875 = C31851 + C31852;
    const double C5816 = C5802 + C5803;
    const double C38161 = C38145 + C38146;
    const double C6004 = C5988 + C5989;
    const double C26039 = C26029 + C26030;
    const double C37303 = C37293 + C37294;
    const double C38343 = C38323 + C38324;
    const double C169 = C152 + C153;
    const double C31484 = C31457 + C31458;
    const double C358 = C336 + C337;
    const double C31674 = C31643 + C31644;
    const double C4938 = C4916 + C4917;
    const double C37302 = C37291 + C37292;
    const double C547 = C525 + C526;
    const double C10453 = C10424 + C10425;
    const double C31482 = C31453 + C31454;
    const double C31868 = C31837 + C31838;
    const double C5562 = C5550 + C5551;
    const double C26036 = C26023 + C26024;
    const double C37300 = C37287 + C37288;
    const double C37914 = C37907 + C37908;
    const double C132 = (3 * (C46806 + C46813 * C46819) +
                         C46794 * (2 * C46815 + C46794 * C46827)) /
                        C46745;
    const double C311 = (C46806 + C46813 * C46819 + C46827 * C46972) / C46745;
    const double C313 = (C46963 * (2 * C46815 + C46794 * C46827)) / C46745;
    const double C500 =
        (C46806 + C46813 * C46819 + C46793 * (C46793 * C46827 + C47180 * ae) +
         C46793 * C47180 * ae) /
        C46745;
    const double C502 = (C46793 * (2 * C46815 + C46794 * C46827) +
                         (2 * C47178 + C46794 * C47180) * ae) /
                        C46745;
    const double C935 =
        (C46793 * C46963 * C46827 + C46963 * C47180 * ae) / C46745;
    const double C1155 =
        (2 * C46963 * C46827 + C46963 * (C46827 + C46843 * C46972)) / C46745;
    const double C46844 = C46794 * C46842;
    const double C46849 = 2 * C46842;
    const double C47012 = C46793 * C46842;
    const double C47030 = C46963 * C46842;
    const double C46837 = C46822 + C46833;
    const double C47311 = C47308 + C46907;
    const double C1434 = C47850 * C1157;
    const double C11867 = C10413 * C1157;
    const double C32896 = C31442 * C1157;
    const double C5811 = C47850 * C1162;
    const double C1596 = C47850 * C1300;
    const double C10623 = C47947 * C1300;
    const double C12073 = C10413 * C1300;
    const double C31652 = C47947 * C1300;
    const double C33102 = C31442 * C1300;
    const double C5795 =
        (4 * (2 * C47327 + C46963 * C47340) +
         C46963 *
             (3 * C47340 + C46963 * (2 * C46963 * C46823 +
                                     C46963 * (C46823 + C46839 * C46972)))) /
        C46745;
    const double C47371 = C47369 + C47366;
    const double C47396 = C46793 * C47392;
    const double C47463 = 2 * C47392;
    const double C142 =
        (3 * (C46812 + ae * C46815 + C46794 * C46826) +
         ae * (2 * C46815 + C46794 * C46827) +
         C46794 *
             (2 * C46826 + ae * C46827 +
              C46794 * (C46822 + ae * C46794 * C46823 +
                        C46794 * (ae * C46823 + C46794 * std::pow(C46796, 6) *
                                                    bs[6] * C46804)))) /
        C46747;
    const double C321 =
        ((yP - yQ) * (C46812 + ae * C46815 + C46794 * C46826)) / C46747;
    const double C325 =
        (ae * C46806 + C46794 * C46812 + C46826 * std::pow(yP - yQ, 2)) /
        C46747;
    const double C510 =
        (ae * (C46803 * C46799 * C46887 +
               C46794 * (C46794 * C46808 * C46809 * C46887 + C46888 * ae) +
               C46794 * C46888 * ae) +
         C46793 * (C46812 + ae * C46815 + C46794 * C46826)) /
        C46747;
    const double C514 = (ae * C46806 + C46794 * C46812 + ae * C46793 * C46899 +
                         C46793 * (ae * C46899 + C46793 * C46826)) /
                        C46747;
    const double C942 =
        (ae * C46963 * C46899 + C46793 * C46963 * C46826) / C46747;
    const double C1167 = (2 * C46963 * C46826 +
                          C46963 * (C46826 + C46842 * std::pow(C46963, 2))) /
                         C46747;
    const double C5817 = C5804 + C5805;
    const double C38163 = C38149 + C38150;
    const double C6005 = C5990 + C5991;
    const double C26037 = C26025 + C26026;
    const double C37301 = C37289 + C37290;
    const double C38345 = C38327 + C38328;
    const double C46909 = C46794 * C46908;
    const double C46914 = 2 * C46908;
    const double C46978 = C46963 * C46908;
    const double C47011 = ae * C46908;
    const double C47010 = C46793 * C46908;
    const double C1313 = (ae * (C46899 + C46908 * C46972) +
                          C46793 * (C46826 + C46842 * C46972)) /
                         C46747;
    const double C2019 = (2 * (ae * C46899 + C46793 * C46826) +
                          ae * (C46899 + C46908 * std::pow(C46793, 2)) +
                          C46793 * (C46826 + ae * C46793 * C46908 +
                                    C46793 * (ae * C46908 + C46793 * C46842))) /
                         C46747;
    const double C1156 =
        (2 * C46963 * C46899 + C46963 * (C46899 + C46908 * C46972)) / C46745;
    const double C1299 = (C46793 * (C46899 + C46908 * C46972)) / C46745;
    const double C2008 =
        (2 * C46793 * C46899 + C46793 * (C46899 + C46908 * C47005)) / C46745;
    const double C1315 =
        (C46812 + C46822 * C46972 + ae * C46793 * C46986 +
         C46793 * (ae * C46986 + C46793 * (C46822 + C46838 * C46972))) /
        C46747;
    const double C1707 =
        (ae * (2 * C46980 + C46963 * C46986) +
         C46793 * (2 * C46963 * C46822 + C46963 * (C46822 + C46838 * C46972))) /
        C46747;
    const double C7355 =
        (2 * (ae * C46986 + C46793 * C47037) + ae * (C46986 + C47044 * C47005) +
         C46793 *
             (C47037 + ae * C46793 * C47044 +
              C46793 * (ae * C47044 + C46793 * (C46838 + C46862 * C46972)))) /
        C46747;
    const double C1161 = (3 * (C46893 + C46897 * C46972) +
                          C46963 * (2 * C46980 + C46963 * C46986)) /
                         C46745;
    const double C1304 = (C46893 + C46897 * C46972 + C46986 * C47005) / C46745;
    const double C1702 = (C46793 * (2 * C46980 + C46963 * C46986)) / C46745;
    const double C7352 =
        (2 * C46793 * C46986 + C46793 * (C46986 + C47044 * C47005)) / C46745;
    const double C2021 =
        (3 * (C46812 + ae * C47002 + C46793 * C47006) +
         ae * (2 * C47002 + C46793 * C47008) +
         C46793 * (2 * C47006 + ae * C47008 +
                   C46793 * (C46822 + ae * C46793 * C46903 +
                             C46793 * (ae * C46903 + C46793 * C46838)))) /
        C46747;
    const double C2013 = (3 * (C46893 + C46897 * C47005) +
                          C46793 * (2 * C47002 + C46793 * C47008)) /
                         C46745;
    const double C47062 = C47057 + C47060;
    const double C7361 = C47850 * C2411;
    const double C27058 = C47947 * C2411;
    const double C28388 = C10413 * C2411;
    const double C38322 = C47947 * C2411;
    const double C39648 = C31442 * C2411;
    const double C7360 = C113 * C2406;
    const double C27057 = C10416 * C2406;
    const double C28387 = C10415 * C2406;
    const double C38321 = C31445 * C2406;
    const double C39647 = C31444 * C2406;
    const double C47085 = C46793 * C47081;
    const double C47144 = 2 * C47081;
    const double C47084 = C46822 + C47080;
    const double C46925 = C46923 * ae;
    const double C47183 = C46794 * C46923;
    const double C47188 = 3 * C46923;
    const double C47259 = C46963 * C46923;
    const double C47316 = C46793 * C46923;
    const double C1298 = (C46793 * (C46827 + C46843 * C46972) +
                          (C47180 + C46923 * C46972) * ae) /
                         C46745;
    const double C1148 =
        2 * C46963 * C47180 + C46963 * (C47180 + C46923 * C46972);
    const double C1285 = C46793 * (C47180 + C46923 * C46972);
    const double C2000 =
        2 * C46793 * C47180 + C46793 * (C47180 + C46923 * C47005);
    const double C47406 = C47403 + C46922;
    const double C47278 = C46905 + C47277;
    const double C47312 = C46905 + C47310;
    const double C47354 = 2 * C47332;
    const double C47377 = C46793 * C47332;
    const double C47376 = C47332 * ae;
    const double C2407 =
        (2 * (C46793 * C47331 + C47262 * ae) +
         C46793 * (C47331 + C46793 * (C46793 * C46963 * C46851 + C47332 * ae) +
                   C46793 * C47332 * ae) +
         (C47262 + C47332 * C47005) * ae) /
        C46745;
    const double C2403 =
        2 * C46793 * C47262 + C46793 * (C47262 + C47332 * C47005);
    const double C47409 = 2 * C47404;
    const double C47407 = C47404 * ae;
    const double C46926 = C46794 * C46924;
    const double C46935 = 2 * C46924;
    const double C46988 = C46924 * C46972;
    const double C47013 = C46924 * C47005;
    const double C47031 = C46963 * C46924;
    const double C47091 = ae * C46924;
    const double C47090 = C46793 * C46924;
    const double C47473 = C46793 * C47469;
    const double C47350 = C46963 * C47349;
    const double C47424 = 3 * C47349;
    const double C47438 = C46793 * C47349;
    const double C47437 = C47349 * ae;
    const double C7351 =
        (2 * (C46793 * C47340 + C47274 * ae) +
         C46793 *
             (C47340 +
              C46793 * (C46793 * (C46823 + C46839 * C46972) + C47349 * ae) +
              C46793 * C47349 * ae) +
         (C47274 + C47349 * C47005) * ae) /
        C46745;
    const double C7349 =
        2 * C46793 * C47274 + C46793 * (C47274 + C47349 * C47005);
    const double C47372 = C47328 + C47370;
    const double C47453 = 2 * C47448;
    const double C47451 = C47448 * ae;
    const double C47454 = C47450 + C47447;
    const double C47397 = C46793 * C47394;
    const double C47468 = 3 * C47394;
    const double C47466 = C47394 * ae;
    const double C46869 = C46794 * C46867;
    const double C1164 =
        (3 * (C46827 + C46843 * C46972) +
         C46963 * (2 * C46963 * C46843 + C46963 * (C46843 + C46867 * C46972))) /
        C46745;
    const double C46868 = C46794 * C46866;
    const double C47039 = C46866 * C46972;
    const double C47067 = C46963 * C46866;
    const double C47092 = C46793 * C46866;
    const double C1170 =
        (3 * (C46826 + C46842 * C46972) +
         C46963 * (2 * C46963 * C46842 + C46963 * (C46842 + C46866 * C46972))) /
        C46747;
    const double C47107 = C46963 * C47106;
    const double C47122 = C46793 * C47106;
    const double C47137 = C47129 + C47133;
    const double C47157 = C46793 * C47153;
    const double C46949 = C46794 * C46946;
    const double C47049 = C46946 * C46972;
    const double C47068 = C46963 * C46946;
    const double C47093 = C46946 * C47005;
    const double C47114 = C46963 * C47113;
    const double C47123 = C47113 * C47005;
    const double C47138 = C47059 + C47135;
    const double C47158 = C46793 * C47155;
    const double C6003 = C5984 + C5985;
    const double C26649 = C26641 + C26642;
    const double C37913 = C37905 + C37906;
    const double C38341 = C38319 + C38320;
    const double C2300 = C47850 * C2009;
    const double C10817 = C47947 * C2009;
    const double C12933 = C10413 * C2009;
    const double C31846 = C47947 * C2009;
    const double C33954 = C31442 * C2009;
    const double C2182 = C47850 * C1294;
    const double C11335 = C47947 * C1294;
    const double C12791 = C10413 * C1294;
    const double C32364 = C47947 * C1294;
    const double C33812 = C31442 * C1294;
    const double C2181 = C113 * C1283;
    const double C11334 = C10416 * C1283;
    const double C12790 = C10415 * C1283;
    const double C32363 = C31445 * C1283;
    const double C33811 = C31444 * C1283;
    const double C158 = C113 * C121;
    const double C10448 = C10415 * C121;
    const double C31477 = C31444 * C121;
    const double C344 = C113 * C296;
    const double C10642 = C10415 * C296;
    const double C31671 = C31444 * C296;
    const double C348 = C113 * C297;
    const double C10990 = C10415 * C297;
    const double C32019 = C31444 * C297;
    const double C533 = C113 * C485;
    const double C10836 = C10415 * C485;
    const double C10824 = C10416 * C485;
    const double C31865 = C31444 * C485;
    const double C31853 = C31445 * C485;
    const double C537 = C113 * C486;
    const double C10436 = C10416 * C486;
    const double C11132 = C10415 * C486;
    const double C31465 = C31445 * C486;
    const double C32161 = C31444 * C486;
    const double C951 = C113 * C928;
    const double C10630 = C10416 * C928;
    const double C11346 = C10415 * C928;
    const double C31659 = C31445 * C928;
    const double C32375 = C31444 * C928;
    const double C6001 = C47850 * C1303;
    const double C27074 = C10413 * C1303;
    const double C27062 = C47947 * C1303;
    const double C38338 = C31442 * C1303;
    const double C38326 = C47947 * C1303;
    const double C6499 = C47850 * C1701;
    const double C26884 = C47947 * C1701;
    const double C27548 = C10413 * C1701;
    const double C38148 = C47947 * C1701;
    const double C38812 = C31442 * C1701;
    const double C5814 = C113 * C1151;
    const double C26895 = C10415 * C1151;
    const double C38159 = C31444 * C1151;
    const double C6000 = C113 * C1288;
    const double C27073 = C10415 * C1288;
    const double C27061 = C10416 * C1288;
    const double C38337 = C31444 * C1288;
    const double C38325 = C31445 * C1288;
    const double C6498 = C113 * C1698;
    const double C26883 = C10416 * C1698;
    const double C27547 = C10415 * C1698;
    const double C38147 = C31445 * C1698;
    const double C38811 = C31444 * C1698;
    const double C46847 = C46835 + C46845;
    const double C5797 =
        (4 * (2 * C47331 + C46963 * C47344) +
         C46963 * (3 * C47344 +
                   C46963 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972)))) /
        C46745;
    const double C47421 = C47417 + C47420;
    const double C22412 = C47850 * C5799;
    const double C47046 = C47042 + C47045;
    const double C6880 = (3 * (C46980 + C47028 * C47005) +
                          C46793 * (2 * C47056 + C46793 * C47063)) /
                         C46745;
    const double C47136 = C47058 + C47132;
    const double C47088 = C47082 + C47086;
    const double C46950 = C46938 + C46948;
    const double C47282 = C46923 + C47281;
    const double C47319 = C46923 + C47317;
    const double C47357 = C46963 * C47356;
    const double C47382 = C47332 + C47380;
    const double C47411 = C46793 * C47408;
    const double C47429 = C47425 + C47428;
    const double C47441 = C47349 + C47439;
    const double C47457 = C46793 * C47455;
    const double C47476 = C47472 + C47474;
    const double C47605 = C47604 / C47595;
    const double C47918 = 2 * C47883;
    const double C47614 = C47613 / C47592;
    const double C47922 = C47887 / C47610;
    const double C47949 = C47881 - C47917;
    const double C2620 = -C47917;
    const double C47963 = C47948 + C47602;
    const double C47687 = C47686 / C47595;
    const double C47926 = 2 * C47892;
    const double C47694 = C47693 / C47592;
    const double C47936 = C47901 / C47610;
    const double C47957 = C47895 - C47933;
    const double C2512 = -C47933;
    const double C47966 = C47953 + C47683;
    const double C47729 = C47728 / C47595;
    const double C47929 = 2 * C47894;
    const double C47736 = C47735 / C47592;
    const double C47942 = C47907 / C47610;
    const double C47960 = C47896 - C47939;
    const double C3274 = -C47939;
    const double C47967 = C47955 + C47725;
    const double C4941 = C4937 * C4755;
    const double C16267 = C4937 * C16113;
    const double C21744 = C4937 * C47576;
    const double C4940 = C4936 * C4759;
    const double C16266 = C4936 * C16117;
    const double C21743 = C4936 * C21631;
    const double C10458 = C10434 + C10435;
    const double C10457 = C10432 + C10433;
    const double C10455 = C10428 + C10429;
    const double C10452 = C10422 + C10423;
    const double C10450 = C10418 + C10419;
    const double C10652 = C10628 + C10629;
    const double C10647 = C10618 + C10619;
    const double C10645 = C10614 + C10615;
    const double C10846 = C10822 + C10823;
    const double C10841 = C10812 + C10813;
    const double C10839 = C10808 + C10809;
    const double C26040 = C26031 + C26032;
    const double C26038 = C26027 + C26028;
    const double C26035 = C26021 + C26022;
    const double C26033 = C26017 + C26018;
    const double C26652 = C26647 + C26648;
    const double C26650 = C26643 + C26644;
    const double C26899 = C26885 + C26886;
    const double C26897 = C26881 + C26882;
    const double C27081 = C27063 + C27064;
    const double C27079 = C27059 + C27060;
    const double C27077 = C27055 + C27056;
    const double C4920 = C359 * C4759;
    const double C4912 = C359 * C4760;
    const double C16274 = C359 * C16117;
    const double C16268 = C359 * C16118;
    const double C21749 = C359 * C21631;
    const double C4943 = C4939 * C4759;
    const double C16273 = C4939 * C16117;
    const double C21745 = C4939 * C21631;
    const double C5565 = C5563 * C4759;
    const double C16897 = C5563 * C16117;
    const double C22223 = C5563 * C21631;
    const double C154 = C113 * C130;
    const double C10438 = C10415 * C130;
    const double C31467 = C31444 * C130;
    const double C332 = C113 * C301;
    const double C10632 = C10415 * C301;
    const double C31661 = C31444 * C301;
    const double C342 = C113 * C310;
    const double C10624 = C10415 * C310;
    const double C31653 = C31444 * C310;
    const double C521 = C113 * C490;
    const double C10426 = C10416 * C490;
    const double C10826 = C10415 * C490;
    const double C31455 = C31445 * C490;
    const double C31855 = C31444 * C490;
    const double C531 = C113 * C499;
    const double C10818 = C10415 * C499;
    const double C10806 = C10416 * C499;
    const double C31847 = C31444 * C499;
    const double C31835 = C31445 * C499;
    const double C949 = C113 * C934;
    const double C10612 = C10416 * C934;
    const double C11336 = C10415 * C934;
    const double C31641 = C31445 * C934;
    const double C32365 = C31444 * C934;
    const double C360 = C340 + C341;
    const double C10648 = C10620 + C10621;
    const double C31677 = C31649 + C31650;
    const double C549 = C529 + C530;
    const double C10842 = C10814 + C10815;
    const double C10840 = C10810 + C10811;
    const double C31871 = C31843 + C31844;
    const double C31869 = C31839 + C31840;
    const double C959 = C947 + C948;
    const double C10646 = C10616 + C10617;
    const double C11348 = C11332 + C11333;
    const double C31675 = C31645 + C31646;
    const double C32377 = C32361 + C32362;
    const double C6002 = C5982 + C5983;
    const double C26651 = C26645 + C26646;
    const double C27075 = C27051 + C27052;
    const double C37915 = C37909 + C37910;
    const double C38339 = C38315 + C38316;
    const double C7365 = C7362 + C7363;
    const double C27076 = C27053 + C27054;
    const double C28396 = C28391 + C28392;
    const double C38340 = C38317 + C38318;
    const double C39656 = C39651 + C39652;
    const double C4928 = C357 * C4759;
    const double C4922 = C357 * C4760;
    const double C16282 = C357 * C16117;
    const double C16276 = C357 * C16118;
    const double C21755 = C357 * C21631;
    const double C5822 = C5816 * C4759;
    const double C17134 = C5816 * C16117;
    const double C21748 = C5816 * C21631;
    const double C6012 = C6004 * C4759;
    const double C17292 = C6004 * C16117;
    const double C22221 = C6004 * C21631;
    const double C4921 = C358 * C4755;
    const double C4913 = C358 * C47914;
    const double C16275 = C358 * C16113;
    const double C16269 = C358 * C47914;
    const double C21750 = C358 * C47576;
    const double C4942 = C4938 * C4755;
    const double C16272 = C4938 * C16113;
    const double C21746 = C4938 * C47576;
    const double C5564 = C5562 * C4755;
    const double C16896 = C5562 * C16113;
    const double C22222 = C5562 * C47576;
    const double C159 = C47850 * C132;
    const double C10449 = C10413 * C132;
    const double C31478 = C31442 * C132;
    const double C345 = C47850 * C311;
    const double C10643 = C10413 * C311;
    const double C31672 = C31442 * C311;
    const double C349 = C47850 * C313;
    const double C10991 = C10413 * C313;
    const double C32020 = C31442 * C313;
    const double C534 = C47850 * C500;
    const double C10837 = C10413 * C500;
    const double C10825 = C47947 * C500;
    const double C31866 = C31442 * C500;
    const double C31854 = C47947 * C500;
    const double C538 = C47850 * C502;
    const double C10437 = C47947 * C502;
    const double C11133 = C10413 * C502;
    const double C31466 = C47947 * C502;
    const double C32162 = C31442 * C502;
    const double C952 = C47850 * C935;
    const double C10631 = C47947 * C935;
    const double C11347 = C10413 * C935;
    const double C31660 = C47947 * C935;
    const double C32376 = C31442 * C935;
    const double C1430 = C47850 * C1155;
    const double C46856 = C46849 + C46850;
    const double C46846 = C46837 + C46844;
    const double C1438 = C1433 + C1434;
    const double C11871 = C11866 + C11867;
    const double C32900 = C32895 + C32896;
    const double C1600 = C1595 + C1596;
    const double C10649 = C10622 + C10623;
    const double C12077 = C12072 + C12073;
    const double C31678 = C31651 + C31652;
    const double C33106 = C33101 + C33102;
    const double C22414 = C47850 * C5795;
    const double C47398 = C46813 + C47396;
    const double C161 = C47850 * C142;
    const double C10445 = C10413 * C142;
    const double C31474 = C31442 * C142;
    const double C333 = C47850 * C321;
    const double C10633 = C10413 * C321;
    const double C31662 = C31442 * C321;
    const double C343 = C47850 * C325;
    const double C10625 = C10413 * C325;
    const double C31654 = C31442 * C325;
    const double C522 = C47850 * C510;
    const double C10427 = C47947 * C510;
    const double C10827 = C10413 * C510;
    const double C31456 = C47947 * C510;
    const double C31856 = C31442 * C510;
    const double C532 = C47850 * C514;
    const double C10819 = C10413 * C514;
    const double C10807 = C47947 * C514;
    const double C31848 = C31442 * C514;
    const double C31836 = C47947 * C514;
    const double C950 = C47850 * C942;
    const double C10613 = C47947 * C942;
    const double C11337 = C10413 * C942;
    const double C31642 = C47947 * C942;
    const double C32366 = C31442 * C942;
    const double C1432 = C47850 * C1167;
    const double C11863 = C10413 * C1167;
    const double C32892 = C31442 * C1167;
    const double C5823 = C5817 * C4755;
    const double C17135 = C5817 * C16113;
    const double C21747 = C5817 * C47576;
    const double C6013 = C6005 * C4755;
    const double C17293 = C6005 * C16113;
    const double C22220 = C6005 * C47576;
    const double C46910 = C46897 + C46909;
    const double C1310 = (C46963 * C46826 + ae * C46793 * C46978 +
                          C46793 * (ae * C46978 + C46793 * C46963 * C46842)) /
                         C46747;
    const double C1293 = (C46963 * C46899 + C46978 * C47005) / C46745;
    const double C47014 = C47011 + C47012;
    const double C1594 = C47850 * C1313;
    const double C10627 = C47947 * C1313;
    const double C12069 = C10413 * C1313;
    const double C31656 = C47947 * C1313;
    const double C33098 = C31442 * C1313;
    const double C2298 = C47850 * C2019;
    const double C10821 = C47947 * C2019;
    const double C12929 = C10413 * C2019;
    const double C31850 = C47947 * C2019;
    const double C33950 = C31442 * C2019;
    const double C1431 = C113 * C1156;
    const double C11862 = C10415 * C1156;
    const double C32891 = C31444 * C1156;
    const double C1593 = C113 * C1299;
    const double C10626 = C10416 * C1299;
    const double C12068 = C10415 * C1299;
    const double C31655 = C31445 * C1299;
    const double C33097 = C31444 * C1299;
    const double C2297 = C113 * C2008;
    const double C10820 = C10416 * C2008;
    const double C12928 = C10415 * C2008;
    const double C31849 = C31445 * C2008;
    const double C33949 = C31444 * C2008;
    const double C5999 = C47850 * C1315;
    const double C27070 = C10413 * C1315;
    const double C27066 = C47947 * C1315;
    const double C38334 = C31442 * C1315;
    const double C38330 = C47947 * C1315;
    const double C6497 = C47850 * C1707;
    const double C26888 = C47947 * C1707;
    const double C27544 = C10413 * C1707;
    const double C38152 = C47947 * C1707;
    const double C38808 = C31442 * C1707;
    const double C23548 = C47850 * C7355;
    const double C27068 = C47947 * C7355;
    const double C38332 = C47947 * C7355;
    const double C5812 = C113 * C1161;
    const double C26891 = C10415 * C1161;
    const double C38155 = C31444 * C1161;
    const double C5998 = C113 * C1304;
    const double C27069 = C10415 * C1304;
    const double C27065 = C10416 * C1304;
    const double C38333 = C31444 * C1304;
    const double C38329 = C31445 * C1304;
    const double C6496 = C113 * C1702;
    const double C26887 = C10416 * C1702;
    const double C27543 = C10415 * C1702;
    const double C38151 = C31445 * C1702;
    const double C38807 = C31444 * C1702;
    const double C23547 = C113 * C7352;
    const double C27067 = C10416 * C7352;
    const double C38331 = C31445 * C7352;
    const double C6883 =
        (3 * (C47027 + ae * C47056 + C46793 * C47062) +
         ae * (2 * C47056 + C46793 * C47063) +
         C46793 *
             (2 * C47062 + ae * C47063 +
              C46793 * (C47058 + ae * C46793 * C47059 +
                        C46793 * (ae * C47059 + C46793 * C46963 * C46862)))) /
        C46747;
    const double C7364 = C7360 + C7361;
    const double C27078 = C27057 + C27058;
    const double C28394 = C28387 + C28388;
    const double C38342 = C38321 + C38322;
    const double C39654 = C39647 + C39648;
    const double C47151 = C47144 + C47145;
    const double C47087 = C47084 + C47085;
    const double C47318 = C47315 + C46925;
    const double C2007 =
        (2 * (C46793 * C46827 + C47180 * ae) +
         C46793 * (C46827 + C46793 * (C46793 * C46843 + C46925) +
                   C46793 * C46923 * ae) +
         (C47180 + C46923 * C47005) * ae) /
        C46745;
    const double C47184 = C47182 + C47183;
    const double C1292 =
        (C46963 * C46827 + C46793 * (C46793 * C46963 * C46843 + C47259 * ae) +
         C46793 * C47259 * ae) /
        C46745;
    const double C2409 =
        (2 * (C46793 * C47335 + C47259 * ae) +
         C46793 * (C47335 + C46793 * (C46793 * C46963 * C46867 + C47336 * ae) +
                   C46793 * C47336 * ae) +
         (C47259 + C47336 * C47005) * ae) /
        C46745;
    const double C1282 = C46963 * C47180 + C47259 * C47005;
    const double C2404 =
        2 * C46793 * C47259 + C46793 * (C47259 + C47336 * C47005);
    const double C1592 = C47850 * C1298;
    const double C10641 = C47947 * C1298;
    const double C31670 = C47947 * C1298;
    const double C1429 = C113 * C1148;
    const double C1591 = C113 * C1285;
    const double C10640 = C10416 * C1285;
    const double C31669 = C31445 * C1285;
    const double C2295 = C113 * C2000;
    const double C10834 = C10416 * C2000;
    const double C31863 = C31445 * C2000;
    const double C47410 = C46793 * C47406;
    const double C1305 =
        (C46815 + C46829 * C46972 +
         C46793 * (C46793 * (C46829 + C46851 * C46972) + C47278 * ae) +
         C46793 * C47278 * ae) /
        C46745;
    const double C1703 =
        (C46793 * (2 * C46963 * C46829 + C46963 * (C46829 + C46851 * C46972)) +
         (2 * C47262 + C46963 * C47278) * ae) /
        C46745;
    const double C7353 =
        (2 * (C46793 * C47344 + C47278 * ae) +
         C46793 * (C47344 +
                   C46793 * (C46793 * (C46851 + C46794 * C46863 * C46972) +
                             C47356 * ae) +
                   C46793 * C47356 * ae) +
         (C47278 + C47356 * C47005) * ae) /
        C46745;
    const double C1152 = 3 * (C47178 + C46905 * C46972) +
                         C46963 * (2 * C47262 + C46963 * C47278);
    const double C1289 = C47178 + C46905 * C46972 + C47278 * C47005;
    const double C1699 = C46793 * (2 * C47262 + C46963 * C47278);
    const double C7350 =
        2 * C46793 * C47278 + C46793 * (C47278 + C47356 * C47005);
    const double C2014 =
        (3 * (C46815 + C46793 * C47311 + C47309 * ae) +
         C46793 * (2 * C47311 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46922) +
                             C46793 * C46919 * ae) +
                   C47312 * ae) +
         (2 * C47309 + C46793 * C47312) * ae) /
        C46745;
    const double C2004 = 3 * (C47178 + C46905 * C47005) +
                         C46793 * (2 * C47309 + C46793 * C47312);
    const double C47381 = C47379 + C47376;
    const double C7217 = C47850 * C2407;
    const double C12789 = C47947 * C2407;
    const double C33810 = C47947 * C2407;
    const double C7216 = C113 * C2403;
    const double C12788 = C10416 * C2403;
    const double C33809 = C31445 * C2403;
    const double C46927 = C46903 + C46926;
    const double C46989 = C46908 + C46988;
    const double C47015 = C46908 + C47013;
    const double C47048 = 2 * C47031;
    const double C47066 = ae * C47031;
    const double C47065 = C46793 * C47031;
    const double C2412 =
        (2 * (ae * C46978 + C46793 * C47030) + ae * (C46978 + C47031 * C47005) +
         C46793 * (C47030 + ae * C46793 * C47031 +
                   C46793 * (ae * C47031 + C46793 * C46963 * C46866))) /
        C46747;
    const double C2408 =
        (2 * C46793 * C46978 + C46793 * (C46978 + C47031 * C47005)) / C46745;
    const double C47096 = 2 * C47090;
    const double C47094 = ae * C47090;
    const double C47475 = C46823 + C47473;
    const double C47351 = C47347 + C47350;
    const double C47440 = C47436 + C47437;
    const double C23550 = C47850 * C7351;
    const double C27072 = C47947 * C7351;
    const double C38336 = C47947 * C7351;
    const double C23549 = C113 * C7349;
    const double C27071 = C10416 * C7349;
    const double C38335 = C31445 * C7349;
    const double C6879 =
        (3 * (C47327 + C46793 * C47371 + C47367 * ae) +
         C46793 * (2 * C47371 +
                   C46793 * (C47365 +
                             C46793 * (C46793 * C46963 * C46839 + C47368 * ae) +
                             C46793 * C47368 * ae) +
                   C47372 * ae) +
         (2 * C47367 + C46793 * C47372) * ae) /
        C46745;
    const double C6877 = 3 * (C47265 + C47328 * C47005) +
                         C46793 * (2 * C47367 + C46793 * C47372);
    const double C47456 = C46793 * C47454;
    const double C47399 = C47395 + C47397;
    const double C46871 = C46859 + C46869;
    const double C46870 = C46861 + C46868;
    const double C47040 = C46842 + C47039;
    const double C47069 = C46793 * C47067;
    const double C47095 = C47091 + C47092;
    const double C5809 = C47850 * C1170;
    const double C47108 = C47104 + C47107;
    const double C47124 = C47121 + C47122;
    const double C47139 = C46793 * C47137;
    const double C47159 = C47156 + C47157;
    const double C46951 = C46917 + C46949;
    const double C47050 = C46924 + C47049;
    const double C47070 = C47068 * C47005;
    const double C47097 = C46924 + C47093;
    const double C47115 = C47111 + C47114;
    const double C47125 = C47044 + C47123;
    const double C47140 = C46793 * C47138;
    const double C47160 = C47154 + C47158;
    const double C6011 = C6003 * C4755;
    const double C17289 = C6003 * C16113;
    const double C22536 = C6003 * C47576;
    const double C2304 = C2299 + C2300;
    const double C10843 = C10816 + C10817;
    const double C12937 = C12932 + C12933;
    const double C31872 = C31845 + C31846;
    const double C33958 = C33953 + C33954;
    const double C2186 = C2181 + C2182;
    const double C11349 = C11334 + C11335;
    const double C12795 = C12790 + C12791;
    const double C32378 = C32363 + C32364;
    const double C33816 = C33811 + C33812;
    const double C5821 = C5814 + C5815;
    const double C26904 = C26895 + C26896;
    const double C38168 = C38159 + C38160;
    const double C6009 = C6000 + C6001;
    const double C27086 = C27073 + C27074;
    const double C27080 = C27061 + C27062;
    const double C38350 = C38337 + C38338;
    const double C38344 = C38325 + C38326;
    const double C6501 = C6498 + C6499;
    const double C26898 = C26883 + C26884;
    const double C27552 = C27547 + C27548;
    const double C38162 = C38147 + C38148;
    const double C38816 = C38811 + C38812;
    const double C135 = (4 * (2 * C46815 + C46794 * C46827) +
                         C46794 * (3 * C46827 + C46794 * C46847)) /
                        C46745;
    const double C316 =
        (2 * C46815 + C46794 * C46827 + C46847 * C46972) / C46745;
    const double C318 = (C46963 * (3 * C46827 + C46794 * C46847)) / C46745;
    const double C22404 =
        (5 * (3 * C47340 + C46963 * C47421) +
         C46963 * (4 * C47421 +
                   C46963 * (3 * C47419 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972))))) /
        C46745;
    const double C5979 =
        (2 * C47027 + C46963 * C47037 + ae * C46793 * C47046 +
         C46793 *
             (ae * C47046 + C46793 * (2 * C46963 * C46838 +
                                      C46963 * (C46838 + C46862 * C46972)))) /
        C46747;
    const double C6491 =
        (ae * (3 * C46986 + C46963 * C47046) +
         C46793 *
             (3 * C47037 + C46963 * (2 * C46963 * C46838 +
                                     C46963 * (C46838 + C46862 * C46972)))) /
        C46747;
    const double C5796 = (4 * (2 * C46980 + C46963 * C46986) +
                          C46963 * (3 * C46986 + C46963 * C47046)) /
                         C46745;
    const double C5976 =
        (2 * C46980 + C46963 * C46986 + C47046 * C47005) / C46745;
    const double C6488 = (C46793 * (3 * C46986 + C46963 * C47046)) / C46745;
    const double C28385 = C10416 * C6880;
    const double C39645 = C31445 * C6880;
    const double C12584 = (4 * (2 * C47002 + C46793 * C47008) +
                           C46793 * (3 * C47008 + C46793 * C47088)) /
                          C46745;
    const double C46952 = C46950 * ae;
    const double C47189 = C46794 * C46950;
    const double C47322 = C46963 * C46950;
    const double C1307 =
        (C46827 + C46843 * C46972 +
         C46793 * (C46793 * (C46843 + C46867 * C46972) + C47282 * ae) +
         C46793 * C47282 * ae) /
        C46745;
    const double C1705 =
        (C46793 * (2 * C46963 * C46843 + C46963 * (C46843 + C46867 * C46972)) +
         (2 * C47259 + C46963 * C47282) * ae) /
        C46745;
    const double C1153 = 3 * (C47180 + C46923 * C46972) +
                         C46963 * (2 * C47259 + C46963 * C47282);
    const double C1290 = C47180 + C46923 * C46972 + C47282 * C47005;
    const double C1700 = C46793 * (2 * C47259 + C46963 * C47282);
    const double C2005 = 3 * (C47180 + C46923 * C47005) +
                         C46793 * (2 * C47316 + C46793 * C47319);
    const double C47358 = C47354 + C47357;
    const double C6878 = 3 * (C47262 + C47332 * C47005) +
                         C46793 * (2 * C47377 + C46793 * C47382);
    const double C47413 = C47409 + C47411;
    const double C47430 = C46963 * C47429;
    const double C23192 = 3 * (C47274 + C47349 * C47005) +
                          C46793 * (2 * C47438 + C46793 * C47441);
    const double C47459 = C47453 + C47457;
    const double C47478 = C46793 * C47476;
    const double C47606 = C47602 - C47605;
    const double C47950 = C47918 / C47592;
    const double C47615 = C47611 - C47614;
    const double C47964 = C47949 / C47596;
    const double C47688 = C47683 - C47687;
    const double C47954 = C47926 / C47592;
    const double C47695 = C47691 - C47694;
    const double C47968 = C47957 / C47596;
    const double C47730 = C47725 - C47729;
    const double C47956 = C47929 / C47592;
    const double C47737 = C47733 - C47736;
    const double C47970 = C47960 / C47596;
    const double C170 = C154 + C155;
    const double C10460 = C10438 + C10439;
    const double C31489 = C31467 + C31468;
    const double C4924 = C360 * C4759;
    const double C4915 = C360 * C4760;
    const double C16278 = C360 * C16117;
    const double C16271 = C360 * C16118;
    const double C21751 = C360 * C21631;
    const double C5554 = C959 * C4759;
    const double C5549 = C959 * C4760;
    const double C16898 = C959 * C16117;
    const double C16895 = C959 * C16118;
    const double C22224 = C959 * C21631;
    const double C6010 = C6002 * C4759;
    const double C17288 = C6002 * C16117;
    const double C22535 = C6002 * C21631;
    const double C7367 = C7365 * C4759;
    const double C18601 = C7365 * C16117;
    const double C23552 = C7365 * C21631;
    const double C21761 = C21745 + C21746;
    const double C172 = C158 + C159;
    const double C10465 = C10448 + C10449;
    const double C31494 = C31477 + C31478;
    const double C362 = C344 + C345;
    const double C10659 = C10642 + C10643;
    const double C31688 = C31671 + C31672;
    const double C364 = C348 + C349;
    const double C10995 = C10990 + C10991;
    const double C32024 = C32019 + C32020;
    const double C551 = C533 + C534;
    const double C10853 = C10836 + C10837;
    const double C10847 = C10824 + C10825;
    const double C31882 = C31865 + C31866;
    const double C31876 = C31853 + C31854;
    const double C553 = C537 + C538;
    const double C10459 = C10436 + C10437;
    const double C11137 = C11132 + C11133;
    const double C31488 = C31465 + C31466;
    const double C32166 = C32161 + C32162;
    const double C961 = C951 + C952;
    const double C10653 = C10630 + C10631;
    const double C11355 = C11346 + C11347;
    const double C31682 = C31659 + C31660;
    const double C32384 = C32375 + C32376;
    const double C143 =
        (4 * (2 * C46826 + ae * C46827 + C46794 * C46846) +
         ae * (3 * C46827 + C46794 * C46847) +
         C46794 * (3 * C46846 + ae * C46847 +
                   C46794 * (2 * C46842 + ae * C46843 +
                             C46794 * (C46838 + ae * C46794 * C46839 +
                                       C46794 * (ae * C46839 +
                                                 C46794 * std::pow(C46798, 7) *
                                                     bs[7] * C46804))))) /
        C46747;
    const double C326 = (C46812 + ae * C46815 + C46794 * C46826 +
                         C46846 * std::pow(yP - yQ, 2)) /
                        C46747;
    const double C327 =
        ((yP - yQ) * (2 * C46826 + ae * C46827 + C46794 * C46846)) / C46747;
    const double C5806 = C1438 * C4760;
    const double C6151 = C1438 * C4759;
    const double C17136 = C1438 * C16118;
    const double C17433 = C1438 * C16117;
    const double C21753 = C1438 * C21631;
    const double C5992 = C1600 * C4760;
    const double C6353 = C1600 * C4759;
    const double C17294 = C1600 * C16118;
    const double C17631 = C1600 * C16117;
    const double C22226 = C1600 * C21631;
    const double C47400 = C47398 + C47393;
    const double C356 = C332 + C333;
    const double C10654 = C10632 + C10633;
    const double C31683 = C31661 + C31662;
    const double C361 = C342 + C343;
    const double C10650 = C10624 + C10625;
    const double C31679 = C31653 + C31654;
    const double C545 = C521 + C522;
    const double C10454 = C10426 + C10427;
    const double C10848 = C10826 + C10827;
    const double C31483 = C31455 + C31456;
    const double C31877 = C31855 + C31856;
    const double C550 = C531 + C532;
    const double C10844 = C10818 + C10819;
    const double C10838 = C10806 + C10807;
    const double C31873 = C31847 + C31848;
    const double C31867 = C31835 + C31836;
    const double C960 = C949 + C950;
    const double C10644 = C10612 + C10613;
    const double C11350 = C11336 + C11337;
    const double C31673 = C31641 + C31642;
    const double C32379 = C32365 + C32366;
    const double C22408 = C21747 + C21748;
    const double C22534 = C22220 + C22221;
    const double C46911 = C46910 + C46907;
    const double C2180 = C47850 * C1310;
    const double C11339 = C47947 * C1310;
    const double C12787 = C10413 * C1310;
    const double C32368 = C47947 * C1310;
    const double C33808 = C31442 * C1310;
    const double C2179 = C113 * C1293;
    const double C11338 = C10416 * C1293;
    const double C12786 = C10415 * C1293;
    const double C32367 = C31445 * C1293;
    const double C33807 = C31444 * C1293;
    const double C1437 = C1431 + C1432;
    const double C11869 = C11862 + C11863;
    const double C32898 = C32891 + C32892;
    const double C1599 = C1593 + C1594;
    const double C10651 = C10626 + C10627;
    const double C12075 = C12068 + C12069;
    const double C31680 = C31655 + C31656;
    const double C33104 = C33097 + C33098;
    const double C2303 = C2297 + C2298;
    const double C10845 = C10820 + C10821;
    const double C12935 = C12928 + C12929;
    const double C31874 = C31849 + C31850;
    const double C33956 = C33949 + C33950;
    const double C5820 = C5812 + C5813;
    const double C26902 = C26891 + C26892;
    const double C38166 = C38155 + C38156;
    const double C6008 = C5998 + C5999;
    const double C27084 = C27069 + C27070;
    const double C27082 = C27065 + C27066;
    const double C38348 = C38333 + C38334;
    const double C38346 = C38329 + C38330;
    const double C6500 = C6496 + C6497;
    const double C26900 = C26887 + C26888;
    const double C27550 = C27543 + C27544;
    const double C38164 = C38151 + C38152;
    const double C38814 = C38807 + C38808;
    const double C23553 = C23547 + C23548;
    const double C27083 = C27067 + C27068;
    const double C38347 = C38331 + C38332;
    const double C28386 = C47947 * C6883;
    const double C39646 = C47947 * C6883;
    const double C7366 = C7364 * C4755;
    const double C18600 = C7364 * C16113;
    const double C23551 = C7364 * C47576;
    const double C12587 =
        (4 * (2 * C47006 + ae * C47008 + C46793 * C47087) +
         ae * (3 * C47008 + C46793 * C47088) +
         C46793 *
             (3 * C47087 + ae * C47088 +
              C46793 * (2 * C47081 + ae * C47083 +
                        C46793 * (C46838 + ae * C46793 * C46917 +
                                  C46793 * (ae * C46917 + C46793 * C46862))))) /
        C46747;
    const double C2016 =
        (3 * (C46827 + C46793 * C47318 + C47316 * ae) +
         C46793 * (2 * C47318 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46947) +
                             C46793 * C46945 * ae) +
                   C47319 * ae) +
         (2 * C47316 + C46793 * C47319) * ae) /
        C46745;
    const double C2296 = C47850 * C2007;
    const double C10835 = C47947 * C2007;
    const double C31864 = C47947 * C2007;
    const double C505 =
        (2 * C46815 + C46794 * C46827 +
         C46793 * (C46793 * C46847 + C47184 * ae) + C46793 * C47184 * ae) /
        C46745;
    const double C507 = (C46793 * (3 * C46827 + C46794 * C46847) +
                         (3 * C47180 + C46794 * C47184) * ae) /
                        C46745;
    const double C938 =
        (C46793 * C46963 * C46847 + C46963 * C47184 * ae) / C46745;
    const double C122 = 4 * (2 * C47178 + C46794 * C47180) +
                        C46794 * (3 * C47180 + C46794 * C47184);
    const double C298 = 2 * C47178 + C46794 * C47180 + C47184 * C46972;
    const double C299 = C46963 * (3 * C47180 + C46794 * C47184);
    const double C487 = 2 * C47178 + C46794 * C47180 + C47184 * C47005;
    const double C488 = C46793 * (3 * C47180 + C46794 * C47184);
    const double C929 = C46793 * C46963 * C47184;
    const double C1422 =
        2 * C46963 * C47184 + C46963 * (C47184 + C46950 * C46972);
    const double C1584 = C46793 * (C47184 + C46950 * C46972);
    const double C2288 =
        2 * C46793 * C47184 + C46793 * (C47184 + C46950 * C47005);
    const double C2178 = C47850 * C1292;
    const double C11345 = C47947 * C1292;
    const double C32374 = C47947 * C1292;
    const double C2177 = C113 * C1282;
    const double C11344 = C10416 * C1282;
    const double C32373 = C31445 * C1282;
    const double C1436 = C1429 + C1430;
    const double C1598 = C1591 + C1592;
    const double C10658 = C10640 + C10641;
    const double C31687 = C31669 + C31670;
    const double C47412 = C46829 + C47410;
    const double C5997 = C47850 * C1305;
    const double C12071 = C47947 * C1305;
    const double C33100 = C47947 * C1305;
    const double C6349 = C47850 * C1703;
    const double C11865 = C47947 * C1703;
    const double C32894 = C47947 * C1703;
    const double C5810 = C113 * C1152;
    const double C5996 = C113 * C1289;
    const double C12070 = C10416 * C1289;
    const double C33099 = C31445 * C1289;
    const double C6348 = C113 * C1699;
    const double C11864 = C10416 * C1699;
    const double C32893 = C31445 * C1699;
    const double C12931 = C47947 * C2014;
    const double C33952 = C47947 * C2014;
    const double C12930 = C10416 * C2004;
    const double C33951 = C31445 * C2004;
    const double C6881 =
        (3 * (C47331 + C46793 * C47381 + C47377 * ae) +
         C46793 * (2 * C47381 +
                   C46793 * (C47375 +
                             C46793 * (C46793 * C46963 * C46794 * C46863 +
                                       C47378 * ae) +
                             C46793 * C47378 * ae) +
                   C47382 * ae) +
         (2 * C47377 + C46793 * C47382) * ae) /
        C46745;
    const double C7219 = C7216 + C7217;
    const double C12794 = C12788 + C12789;
    const double C33815 = C33809 + C33810;
    const double C46928 = C46927 + C46922;
    const double C1316 =
        (C46826 + C46842 * C46972 + ae * C46793 * C46989 +
         C46793 * (ae * C46989 + C46793 * (C46842 + C46866 * C46972))) /
        C46747;
    const double C1708 =
        (ae * (2 * C46978 + C46963 * C46989) +
         C46793 * (2 * C46963 * C46842 + C46963 * (C46842 + C46866 * C46972))) /
        C46747;
    const double C1163 = (3 * (C46899 + C46908 * C46972) +
                          C46963 * (2 * C46978 + C46963 * C46989)) /
                         C46745;
    const double C1306 = (C46899 + C46908 * C46972 + C46989 * C47005) / C46745;
    const double C1704 = (C46793 * (2 * C46978 + C46963 * C46989)) / C46745;
    const double C2022 =
        (3 * (C46826 + ae * C47010 + C46793 * C47014) +
         ae * (2 * C47010 + C46793 * C47015) +
         C46793 * (2 * C47014 + ae * C47015 +
                   C46793 * (C46842 + ae * C46793 * C46924 +
                             C46793 * (ae * C46924 + C46793 * C46866)))) /
        C46747;
    const double C2015 = (3 * (C46899 + C46908 * C47005) +
                          C46793 * (2 * C47010 + C46793 * C47015)) /
                         C46745;
    const double C7215 = C47850 * C2412;
    const double C12785 = C47947 * C2412;
    const double C33806 = C47947 * C2412;
    const double C7214 = C113 * C2408;
    const double C12784 = C10416 * C2408;
    const double C33805 = C31445 * C2408;
    const double C47098 = C46842 + C47094;
    const double C47477 = C47475 + C47470;
    const double C5975 =
        (2 * C47327 + C46963 * C47340 +
         C46793 * (C46793 * (2 * C46963 * C46823 +
                             C46963 * (C46823 + C46839 * C46972)) +
                   C47351 * ae) +
         C46793 * C47351 * ae) /
        C46745;
    const double C6487 =
        (C46793 *
             (3 * C47340 + C46963 * (2 * C46963 * C46823 +
                                     C46963 * (C46823 + C46839 * C46972))) +
         (3 * C47274 + C46963 * C47351) * ae) /
        C46745;
    const double C23543 =
        (2 * (C46793 * C47421 + C47351 * ae) +
         C46793 * (C47421 +
                   C46793 * (C46793 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972)) +
                             C47429 * ae) +
                   C46793 * C47429 * ae) +
         (C47351 + C47429 * C47005) * ae) /
        C46745;
    const double C5793 = 4 * (2 * C47265 + C46963 * C47274) +
                         C46963 * (3 * C47274 + C46963 * C47351);
    const double C5973 = 2 * C47265 + C46963 * C47274 + C47351 * C47005;
    const double C6485 = C46793 * (3 * C47274 + C46963 * C47351);
    const double C23542 =
        2 * C46793 * C47351 + C46793 * (C47351 + C47429 * C47005);
    const double C23193 =
        (3 * (C47340 + C46793 * C47440 + C47438 * ae) +
         C46793 * (2 * C47440 +
                   C46793 * (C47419 +
                             C46793 * (C46793 * (C46839 + C46863 * C46972) +
                                       C47427 * ae) +
                             C46793 * C47427 * ae) +
                   C47441 * ae) +
         (2 * C47438 + C46793 * C47441) * ae) /
        C46745;
    const double C23554 = C23549 + C23550;
    const double C27085 = C27071 + C27072;
    const double C38349 = C38335 + C38336;
    const double C28390 = C47947 * C6879;
    const double C39650 = C47947 * C6879;
    const double C28389 = C10416 * C6877;
    const double C39649 = C31445 * C6877;
    const double C47458 = C47365 + C47456;
    const double C12581 = 4 * (2 * C47302 + C46793 * C47305) +
                          C46793 * (3 * C47305 + C46793 * C47399);
    const double C46873 = C46794 * C46871;
    const double C1423 =
        (2 * C46963 * C46847 + C46963 * (C46847 + C46871 * C46972)) / C46745;
    const double C1585 = (C46793 * (C46847 + C46871 * C46972) +
                          (C47184 + C46950 * C46972) * ae) /
                         C46745;
    const double C46872 = C46794 * C46870;
    const double C47019 = C46793 * C46870;
    const double C47033 = C46963 * C46870;
    const double C1166 = (2 * C46963 * C46846 +
                          C46963 * (C46846 + C46870 * std::pow(C46963, 2))) /
                         C46747;
    const double C1171 =
        (3 * (C46846 + C46870 * C46972) +
         C46963 * (2 * C46963 * C46870 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46747;
    const double C5800 =
        (4 * (2 * C47030 + C46963 * C47040) +
         C46963 * (3 * C47040 +
                   C46963 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46747;
    const double C47071 = C47066 + C47069;
    const double C47099 = C46793 * C47095;
    const double C22406 =
        (5 * (3 * C47037 + C46963 * C47108) +
         C46963 * (4 * C47108 +
                   C46963 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46747;
    const double C47141 = C47136 + C47139;
    const double C47161 = C46793 * C47159;
    const double C46953 = C46951 + C46944;
    const double C47051 = C46963 * C47050;
    const double C7356 =
        (2 * (ae * C46989 + C46793 * C47040) + ae * (C46989 + C47050 * C47005) +
         C46793 * (C47040 + ae * C46793 * C47050 +
                   C46793 * (ae * C47050 +
                             C46793 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46747;
    const double C7354 =
        (2 * C46793 * C46989 + C46793 * (C46989 + C47050 * C47005)) / C46745;
    const double C47072 = C47031 + C47070;
    const double C47100 = C46793 * C47097;
    const double C47116 = C46963 * C47115;
    const double C23545 =
        (2 * (ae * C47046 + C46793 * C47108) + ae * (C47046 + C47115 * C47005) +
         C46793 * (C47108 + ae * C46793 * C47115 +
                   C46793 * (ae * C47115 +
                             C46793 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46747;
    const double C23544 =
        (2 * C46793 * C47046 + C46793 * (C47046 + C47115 * C47005)) / C46745;
    const double C23195 =
        (3 * (C47037 + ae * C47120 + C46793 * C47124) +
         ae * (2 * C47120 + C46793 * C47125) +
         C46793 * (2 * C47124 + ae * C47125 +
                   C46793 * (C47106 + ae * C46793 * C47113 +
                             C46793 * (ae * C47113 +
                                       C46793 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46747;
    const double C23194 = (3 * (C46986 + C47044 * C47005) +
                           C46793 * (2 * C47120 + C46793 * C47125)) /
                          C46745;
    const double C47142 = C47134 + C47140;
    const double C47162 = C46793 * C47160;
    const double C5986 = C2186 * C4760;
    const double C7083 = C2186 * C4759;
    const double C17290 = C2186 * C16118;
    const double C18337 = C2186 * C16117;
    const double C23346 = C2186 * C21631;
    const double C5827 = C5821 * C4759;
    const double C17141 = C5821 * C16117;
    const double C22409 = C5821 * C21631;
    const double C6017 = C6009 * C4759;
    const double C17299 = C6009 * C16117;
    const double C22537 = C6009 * C21631;
    const double C6503 = C6501 * C4759;
    const double C17765 = C6501 * C16117;
    const double C22539 = C6501 * C21631;
    const double C165 = C47850 * C135;
    const double C355 = C47850 * C316;
    const double C668 = C47850 * C318;
    const double C22542 = C47850 * C5979;
    const double C27542 = C47947 * C5979;
    const double C38806 = C47947 * C5979;
    const double C22904 = C47850 * C6491;
    const double C26890 = C47947 * C6491;
    const double C38154 = C47947 * C6491;
    const double C22411 = C113 * C5796;
    const double C22541 = C113 * C5976;
    const double C27541 = C10416 * C5976;
    const double C38805 = C31445 * C5976;
    const double C22903 = C113 * C6488;
    const double C26889 = C10416 * C6488;
    const double C38153 = C31445 * C6488;
    const double C2289 =
        (2 * (C46793 * C46847 + C47184 * ae) +
         C46793 * (C46847 + C46793 * (C46793 * C46871 + C46952) +
                   C46793 * C46950 * ae) +
         (C47184 + C46950 * C47005) * ae) /
        C46745;
    const double C47190 = C47188 + C47189;
    const double C2171 =
        (C46963 * C46847 + C46793 * (C46793 * C46963 * C46871 + C47322 * ae) +
         C46793 * C47322 * ae) /
        C46745;
    const double C2170 = C46963 * C47184 + C47322 * C47005;
    const double C5977 =
        (2 * C47331 + C46963 * C47344 +
         C46793 * (C46793 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972)) +
                   C47358 * ae) +
         C46793 * C47358 * ae) /
        C46745;
    const double C6489 =
        (C46793 * (3 * C47344 +
                   C46963 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972))) +
         (3 * C47278 + C46963 * C47358) * ae) /
        C46745;
    const double C5794 = 4 * (2 * C47262 + C46963 * C47278) +
                         C46963 * (3 * C47278 + C46963 * C47358);
    const double C5974 = 2 * C47262 + C46963 * C47278 + C47358 * C47005;
    const double C6486 = C46793 * (3 * C47278 + C46963 * C47358);
    const double C12582 = 4 * (2 * C47309 + C46793 * C47312) +
                          C46793 * (3 * C47312 + C46793 * C47413);
    const double C47431 = C47424 + C47430;
    const double C27926 = 4 * (2 * C47367 + C46793 * C47372) +
                          C46793 * (3 * C47372 + C46793 * C47459);
    const double C47480 = C47468 + C47478;
    const double C47880 = C47606 * C47594;
    const double C47920 = C47885 + C47606;
    const double C47888 = C47615 / C47596;
    const double C47884 = C47615 * C47594;
    const double C656 = C47964 - (C47606 * C47597) / C47592;
    const double C47898 = C47688 * C47682;
    const double C47935 = C47900 + C47688;
    const double C47902 = C47695 / C47596;
    const double C47899 = C47695 * C47682;
    const double C1416 = C47968 - (C47688 * C47684) / C47592;
    const double C47904 = C47730 * C47724;
    const double C47941 = C47906 + C47730;
    const double C47908 = C47737 / C47596;
    const double C47905 = C47737 * C47724;
    const double C2284 = C47970 - (C47730 * C47726) / C47592;
    const double C4935 = C362 * C4759;
    const double C4926 = C362 * C4760;
    const double C16289 = C362 * C16117;
    const double C16280 = C362 * C16118;
    const double C21757 = C362 * C21631;
    const double C4930 = C364 * C4760;
    const double C5220 = C364 * C4759;
    const double C16284 = C364 * C16118;
    const double C16566 = C364 * C16117;
    const double C21972 = C364 * C21631;
    const double C5561 = C961 * C4759;
    const double C5556 = C961 * C4760;
    const double C16905 = C961 * C16117;
    const double C16900 = C961 * C16118;
    const double C22231 = C961 * C21631;
    const double C163 = C47850 * C143;
    const double C347 = C47850 * C326;
    const double C10639 = C10413 * C326;
    const double C31668 = C31442 * C326;
    const double C351 = C47850 * C327;
    const double C10987 = C10413 * C327;
    const double C32016 = C31442 * C327;
    const double C12583 =
        (4 * (2 * C47304 + C46793 * C47400 + C47305 * ae) +
         C46793 *
             (3 * C47400 +
              C46793 * (2 * C47392 +
                        C46793 * (C46823 + C46793 * (C46793 * C46839 + C46918) +
                                  C46793 * C46916 * ae) +
                        C47394 * ae) +
              C47399 * ae) +
         (3 * C47305 + C46793 * C47399) * ae) /
        C46745;
    const double C4929 = C356 * C4755;
    const double C4923 = C356 * C47914;
    const double C16283 = C356 * C16113;
    const double C16277 = C356 * C47914;
    const double C21756 = C356 * C47576;
    const double C4925 = C361 * C4755;
    const double C4914 = C361 * C47914;
    const double C16279 = C361 * C16113;
    const double C16270 = C361 * C47914;
    const double C21752 = C361 * C47576;
    const double C5555 = C960 * C4755;
    const double C5548 = C960 * C47914;
    const double C16899 = C960 * C16113;
    const double C16894 = C960 * C47914;
    const double C22225 = C960 * C47576;
    const double C515 =
        (C46812 + ae * C46815 + C46794 * C46826 + ae * C46793 * C46911 +
         C46793 * (ae * C46911 + C46793 * C46846)) /
        C46747;
    const double C516 =
        (ae * (2 * C46899 + C46794 * C46911 + (C46888 + C46902 * C46819) * ae) +
         C46793 * (2 * C46826 + ae * C46827 + C46794 * C46846)) /
        C46747;
    const double C943 =
        (ae * C46963 * C46911 + C46793 * C46963 * C46846) / C46747;
    const double C133 = (3 * (C46893 + C46794 * C46899 + C47178 * ae) +
                         C46794 * (2 * C46899 + C46794 * C46911 + C47180 * ae) +
                         (2 * C47178 + C46794 * C47180) * ae) /
                        C46745;
    const double C312 =
        (C46893 + C46794 * C46899 + C47178 * ae + C46911 * C46972) / C46745;
    const double C314 =
        (C46963 * (2 * C46899 + C46794 * C46911 + C47180 * ae)) / C46745;
    const double C501 =
        (C46893 + C46794 * C46899 + C47178 * ae + C46911 * C47005) / C46745;
    const double C503 =
        (C46793 * (2 * C46899 + C46794 * C46911 + C47180 * ae)) / C46745;
    const double C936 = (C46793 * C46963 * C46911) / C46745;
    const double C2185 = C2179 + C2180;
    const double C11351 = C11338 + C11339;
    const double C12793 = C12786 + C12787;
    const double C32380 = C32367 + C32368;
    const double C33814 = C33807 + C33808;
    const double C5807 = C1437 * C47914;
    const double C6150 = C1437 * C4755;
    const double C17137 = C1437 * C47914;
    const double C17432 = C1437 * C16113;
    const double C21754 = C1437 * C47576;
    const double C5993 = C1599 * C47914;
    const double C6352 = C1599 * C4755;
    const double C17295 = C1599 * C47914;
    const double C17630 = C1599 * C16113;
    const double C22227 = C1599 * C47576;
    const double C5826 = C5820 * C4755;
    const double C17140 = C5820 * C16113;
    const double C22410 = C5820 * C47576;
    const double C6016 = C6008 * C4755;
    const double C17298 = C6008 * C16113;
    const double C22538 = C6008 * C47576;
    const double C6502 = C6500 * C4755;
    const double C17764 = C6500 * C16113;
    const double C22540 = C6500 * C47576;
    const double C23555 = C23553 * C47576;
    const double C28393 = C28385 + C28386;
    const double C39653 = C39645 + C39646;
    const double C2302 = C2295 + C2296;
    const double C10852 = C10834 + C10835;
    const double C31881 = C31863 + C31864;
    const double C544 = C47850 * C505;
    const double C11131 = C47947 * C505;
    const double C32160 = C47947 * C505;
    const double C778 = C47850 * C507;
    const double C10447 = C47947 * C507;
    const double C31476 = C47947 * C507;
    const double C958 = C47850 * C938;
    const double C10989 = C47947 * C938;
    const double C32018 = C47947 * C938;
    const double C164 = C113 * C122;
    const double C354 = C113 * C298;
    const double C667 = C113 * C299;
    const double C543 = C113 * C487;
    const double C11130 = C10416 * C487;
    const double C32159 = C31445 * C487;
    const double C777 = C113 * C488;
    const double C10446 = C10416 * C488;
    const double C31475 = C31445 * C488;
    const double C957 = C113 * C929;
    const double C10988 = C10416 * C929;
    const double C32017 = C31445 * C929;
    const double C2184 = C2177 + C2178;
    const double C11354 = C11344 + C11345;
    const double C32383 = C32373 + C32374;
    const double C6149 = C1436 * C4760;
    const double C17431 = C1436 * C16118;
    const double C21760 = C1436 * C21631;
    const double C6351 = C1598 * C4760;
    const double C17629 = C1598 * C16118;
    const double C22229 = C1598 * C21631;
    const double C47414 = C47412 + C47407;
    const double C5819 = C5810 + C5811;
    const double C6007 = C5996 + C5997;
    const double C12076 = C12070 + C12071;
    const double C33105 = C33099 + C33100;
    const double C6355 = C6348 + C6349;
    const double C11870 = C11864 + C11865;
    const double C32899 = C32893 + C32894;
    const double C12936 = C12930 + C12931;
    const double C33957 = C33951 + C33952;
    const double C7359 = C7219 * C4760;
    const double C18599 = C7219 * C16118;
    const double C46929 = C46794 * C46928;
    const double C46934 = 3 * C46928;
    const double C46976 = C46963 * C46928;
    const double C47018 = ae * C46928;
    const double C47017 = C46793 * C46928;
    const double C1312 = (ae * (C46911 + C46928 * C46972) +
                          C46793 * (C46846 + C46870 * C46972)) /
                         C46747;
    const double C2018 = (2 * (ae * C46911 + C46793 * C46846) +
                          ae * (C46911 + C46928 * std::pow(C46793, 2)) +
                          C46793 * (C46846 + ae * C46793 * C46928 +
                                    C46793 * (ae * C46928 + C46793 * C46870))) /
                         C46747;
    const double C1154 =
        (2 * C46963 * C46911 + C46963 * (C46911 + C46928 * C46972)) / C46745;
    const double C1297 = (C46793 * (C46911 + C46928 * C46972)) / C46745;
    const double C2006 =
        (2 * C46793 * C46911 + C46793 * (C46911 + C46928 * C47005)) / C46745;
    const double C5995 = C47850 * C1316;
    const double C12067 = C47947 * C1316;
    const double C33096 = C47947 * C1316;
    const double C6347 = C47850 * C1708;
    const double C11861 = C47947 * C1708;
    const double C32890 = C47947 * C1708;
    const double C5808 = C113 * C1163;
    const double C5994 = C113 * C1306;
    const double C12066 = C10416 * C1306;
    const double C33095 = C31445 * C1306;
    const double C6346 = C113 * C1704;
    const double C11860 = C10416 * C1704;
    const double C32889 = C31445 * C1704;
    const double C12927 = C47947 * C2022;
    const double C33948 = C47947 * C2022;
    const double C12926 = C10416 * C2015;
    const double C33947 = C31445 * C2015;
    const double C7218 = C7214 + C7215;
    const double C12792 = C12784 + C12785;
    const double C33813 = C33805 + C33806;
    const double C47479 = C46793 * C47477;
    const double C22544 = C47850 * C5975;
    const double C27546 = C47947 * C5975;
    const double C38810 = C47947 * C5975;
    const double C22906 = C47850 * C6487;
    const double C26894 = C47947 * C6487;
    const double C38158 = C47947 * C6487;
    const double C22413 = C113 * C5793;
    const double C22543 = C113 * C5973;
    const double C27545 = C10416 * C5973;
    const double C38809 = C31445 * C5973;
    const double C22905 = C113 * C6485;
    const double C26893 = C10416 * C6485;
    const double C38157 = C31445 * C6485;
    const double C23556 = C23554 * C21631;
    const double C28395 = C28389 + C28390;
    const double C39655 = C39649 + C39650;
    const double C47460 = C47458 + C47451;
    const double C46875 = C46855 + C46873;
    const double C46874 = C46856 + C46872;
    const double C1428 = C47850 * C1166;
    const double C47101 = C47098 + C47099;
    const double C47163 = C47151 + C47161;
    const double C46954 = C46794 * C46953;
    const double C46991 = C46953 * C46972;
    const double C47020 = C46953 * C47005;
    const double C47034 = C46963 * C46953;
    const double C47052 = C47048 + C47051;
    const double C6884 =
        (3 * (C47030 + ae * C47065 + C46793 * C47071) +
         ae * (2 * C47065 + C46793 * C47072) +
         C46793 * (2 * C47071 + ae * C47072 +
                   C46793 * (C47067 + ae * C46793 * C47068 +
                             C46793 * (ae * C47068 +
                                       C46793 * C46963 *
                                           (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46747;
    const double C6882 = (3 * (C46978 + C47031 * C47005) +
                          C46793 * (2 * C47065 + C46793 * C47072)) /
                         C46745;
    const double C47102 = C47096 + C47100;
    const double C47117 = C47110 + C47116;
    const double C27929 =
        (4 * (2 * C47062 + ae * C47063 + C46793 * C47141) +
         ae * (3 * C47063 + C46793 * C47142) +
         C46793 * (3 * C47141 + ae * C47142 +
                   C46793 * (2 * C47137 + ae * C47138 +
                             C46793 * (C47130 + ae * C46793 * C47131 +
                                       C46793 * (ae * C47131 +
                                                 C46793 * C46963 *
                                                     std::pow(C46796, 8) *
                                                     bs[8] * C46804))))) /
        C46747;
    const double C27928 = (4 * (2 * C47056 + C46793 * C47063) +
                           C46793 * (3 * C47063 + C46793 * C47142)) /
                          C46745;
    const double C47164 = C47149 + C47162;
    const double C22416 = C22411 + C22412;
    const double C22546 = C22541 + C22542;
    const double C27549 = C27541 + C27542;
    const double C38813 = C38805 + C38806;
    const double C22907 = C22903 + C22904;
    const double C26901 = C26889 + C26890;
    const double C38165 = C38153 + C38154;
    const double C123 = 5 * (3 * C47180 + C46794 * C47184) +
                        C46794 * (4 * C47184 + C46794 * C47190);
    const double C300 = 3 * C47180 + C46794 * C47184 + C47190 * C46972;
    const double C489 = 3 * C47180 + C46794 * C47184 + C47190 * C47005;
    const double C660 = C46963 * (4 * C47184 + C46794 * C47190);
    const double C770 = C46793 * (4 * C47184 + C46794 * C47190);
    const double C930 = C46793 * C46963 * C47190;
    const double C22530 =
        (3 * C47340 + C46963 * C47421 +
         C46793 * (C46793 * (3 * C47419 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972))) +
                   C47431 * ae) +
         C46793 * C47431 * ae) /
        C46745;
    const double C22898 =
        (C46793 * (4 * C47421 +
                   C46963 * (3 * C47419 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972)))) +
         (4 * C47351 + C46963 * C47431) * ae) /
        C46745;
    const double C22403 = 5 * (3 * C47274 + C46963 * C47351) +
                          C46963 * (4 * C47351 + C46963 * C47431);
    const double C22529 = 3 * C47274 + C46963 * C47351 + C47431 * C47005;
    const double C22897 = C46793 * (4 * C47351 + C46963 * C47431);
    const double C44156 = 5 * (3 * C47305 + C46793 * C47399) +
                          C46793 * (4 * C47399 + C46793 * C47480);
    const double C47916 = C47880 / C47592;
    const double C47951 = C47920 / C47596;
    const double C47952 = C47922 + C47888;
    const double C658 = C47888 - C47613 / C47610;
    const double C47919 = C47884 / C47592;
    const double C47932 = C47898 / C47592;
    const double C47958 = C47935 / C47596;
    const double C47959 = C47936 + C47902;
    const double C1418 = C47902 - C47693 / C47610;
    const double C47934 = C47899 / C47592;
    const double C47938 = C47904 / C47592;
    const double C47961 = C47941 / C47596;
    const double C47962 = C47942 + C47908;
    const double C2286 = C47908 - C47735 / C47610;
    const double C47940 = C47905 / C47592;
    const double C21762 = C21752 + C21751;
    const double C536 = C47850 * C515;
    const double C10833 = C10413 * C515;
    const double C10829 = C47947 * C515;
    const double C31862 = C31442 * C515;
    const double C31858 = C47947 * C515;
    const double C540 = C47850 * C516;
    const double C10441 = C47947 * C516;
    const double C11129 = C10413 * C516;
    const double C31470 = C47947 * C516;
    const double C32158 = C31442 * C516;
    const double C954 = C47850 * C943;
    const double C10635 = C47947 * C943;
    const double C11343 = C10413 * C943;
    const double C31664 = C47947 * C943;
    const double C32372 = C31442 * C943;
    const double C160 = C113 * C133;
    const double C10444 = C10415 * C133;
    const double C31473 = C31444 * C133;
    const double C346 = C113 * C312;
    const double C10638 = C10415 * C312;
    const double C31667 = C31444 * C312;
    const double C350 = C113 * C314;
    const double C10986 = C10415 * C314;
    const double C32015 = C31444 * C314;
    const double C535 = C113 * C501;
    const double C10832 = C10415 * C501;
    const double C10828 = C10416 * C501;
    const double C31861 = C31444 * C501;
    const double C31857 = C31445 * C501;
    const double C539 = C113 * C503;
    const double C10440 = C10416 * C503;
    const double C11128 = C10415 * C503;
    const double C31469 = C31445 * C503;
    const double C32157 = C31444 * C503;
    const double C953 = C113 * C936;
    const double C10634 = C10416 * C936;
    const double C11342 = C10415 * C936;
    const double C31663 = C31445 * C936;
    const double C32371 = C31444 * C936;
    const double C5987 = C2185 * C47914;
    const double C7082 = C2185 * C4755;
    const double C17291 = C2185 * C47914;
    const double C18336 = C2185 * C16113;
    const double C23345 = C2185 * C47576;
    const double C22648 = C21753 + C21754;
    const double C22797 = C22226 + C22227;
    const double C22415 = C22409 + C22410;
    const double C22545 = C22537 + C22538;
    const double C22902 = C22539 + C22540;
    const double C175 = C164 + C165;
    const double C367 = C354 + C355;
    const double C670 = C667 + C668;
    const double C556 = C543 + C544;
    const double C11136 = C11130 + C11131;
    const double C32165 = C32159 + C32160;
    const double C780 = C777 + C778;
    const double C10464 = C10446 + C10447;
    const double C31493 = C31475 + C31476;
    const double C964 = C957 + C958;
    const double C10994 = C10988 + C10989;
    const double C32023 = C32017 + C32018;
    const double C7081 = C2184 * C4760;
    const double C18335 = C2184 * C16118;
    const double C12585 =
        (4 * (2 * C47311 + C46793 * C47414 + C47312 * ae) +
         C46793 *
             (3 * C47414 +
              C46793 * (2 * C47406 +
                        C46793 * (C46851 +
                                  C46793 * (C46793 * C46794 * C46863 + C46944) +
                                  C46793 * C46941 * ae) +
                        C47408 * ae) +
              C47413 * ae) +
         (3 * C47312 + C46793 * C47413) * ae) /
        C46745;
    const double C5825 = C5819 * C4760;
    const double C17139 = C5819 * C16118;
    const double C22650 = C5819 * C21631;
    const double C6015 = C6007 * C4760;
    const double C17297 = C6007 * C16118;
    const double C23344 = C6007 * C21631;
    const double C6495 = C6355 * C4760;
    const double C17763 = C6355 * C16118;
    const double C22799 = C6355 * C21631;
    const double C46930 = C46914 + C46929;
    const double C1309 = (C46963 * C46846 + ae * C46793 * C46976 +
                          C46793 * (ae * C46976 + C46793 * C46963 * C46870)) /
                         C46747;
    const double C1291 = (C46963 * C46911 + C46976 * C47005) / C46745;
    const double C47021 = C47018 + C47019;
    const double C1590 = C47850 * C1312;
    const double C10637 = C47947 * C1312;
    const double C31666 = C47947 * C1312;
    const double C2294 = C47850 * C2018;
    const double C10831 = C47947 * C2018;
    const double C31860 = C47947 * C2018;
    const double C1427 = C113 * C1154;
    const double C1589 = C113 * C1297;
    const double C10636 = C10416 * C1297;
    const double C31665 = C31445 * C1297;
    const double C2293 = C113 * C2006;
    const double C10830 = C10416 * C2006;
    const double C31859 = C31445 * C2006;
    const double C5818 = C5808 + C5809;
    const double C6006 = C5994 + C5995;
    const double C12074 = C12066 + C12067;
    const double C33103 = C33095 + C33096;
    const double C6354 = C6346 + C6347;
    const double C11868 = C11860 + C11861;
    const double C32897 = C32889 + C32890;
    const double C12934 = C12926 + C12927;
    const double C33955 = C33947 + C33948;
    const double C7358 = C7218 * C47914;
    const double C18598 = C7218 * C47914;
    const double C47481 = C47463 + C47479;
    const double C22417 = C22413 + C22414;
    const double C22547 = C22543 + C22544;
    const double C27551 = C27545 + C27546;
    const double C38815 = C38809 + C38810;
    const double C22908 = C22905 + C22906;
    const double C26903 = C26893 + C26894;
    const double C38167 = C38157 + C38158;
    const double C27927 =
        (4 * (2 * C47371 + C46793 * C47460 + C47372 * ae) +
         C46793 * (3 * C47460 +
                   C46793 * (2 * C47454 +
                             C46793 * (C47446 +
                                       C46793 * (C46793 * C46963 * C46863 +
                                                 C47449 * ae) +
                                       C46793 * C47449 * ae) +
                             C47455 * ae) +
                   C47459 * ae) +
         (3 * C47372 + C46793 * C47459) * ae) /
        C46745;
    const double C136 = (5 * (3 * C46827 + C46794 * C46847) +
                         C46794 * (4 * C46847 + C46794 * C46875)) /
                        C46745;
    const double C319 =
        (3 * C46827 + C46794 * C46847 + C46875 * C46972) / C46745;
    const double C508 =
        (3 * C46827 + C46794 * C46847 +
         C46793 * (C46793 * C46875 + C47190 * ae) + C46793 * C47190 * ae) /
        C46745;
    const double C661 = (C46963 * (4 * C46847 + C46794 * C46875)) / C46745;
    const double C771 = (C46793 * (4 * C46847 + C46794 * C46875) +
                         (4 * C47184 + C46794 * C47190) * ae) /
                        C46745;
    const double C939 =
        (C46793 * C46963 * C46875 + C46963 * C47190 * ae) / C46745;
    const double C144 =
        (5 * (3 * C46846 + ae * C46847 + C46794 * C46874) +
         ae * (4 * C46847 + C46794 * C46875) +
         C46794 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C328 = (2 * C46826 + ae * C46827 + C46794 * C46846 +
                         C46874 * std::pow(yP - yQ, 2)) /
                        C46747;
    const double C329 =
        ((yP - yQ) * (3 * C46846 + ae * C46847 + C46794 * C46874)) / C46747;
    const double C330 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 +
         (3 * C46870 + ae * C46871 +
          C46794 *
              (2 * C46866 + ae * C46867 +
               C46794 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             std::pow(yP - yQ, 2)) /
        C46747;
    const double C663 =
        ((yP - yQ) *
         (4 * C46874 + ae * C46875 +
          C46794 * (3 * C46870 + ae * C46871 +
                    C46794 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46747;
    const double C1425 =
        (2 * C46963 * C46874 +
         C46963 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46972)) /
        C46747;
    const double C46955 = C46935 + C46954;
    const double C46992 = C46928 + C46991;
    const double C47022 = C46928 + C47020;
    const double C2413 =
        (2 * (ae * C46976 + C46793 * C47033) + ae * (C46976 + C47034 * C47005) +
         C46793 * (C47033 + ae * C46793 * C47034 +
                   C46793 * (ae * C47034 +
                             C46793 * C46963 *
                                 (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46747;
    const double C2410 =
        (2 * C46793 * C46976 + C46793 * (C46976 + C47034 * C47005)) / C46745;
    const double C5980 =
        (2 * C47030 + C46963 * C47040 + ae * C46793 * C47052 +
         C46793 * (ae * C47052 +
                   C46793 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46747;
    const double C6492 =
        (ae * (3 * C46989 + C46963 * C47052) +
         C46793 * (3 * C47040 +
                   C46963 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46747;
    const double C5798 = (4 * (2 * C46978 + C46963 * C46989) +
                          C46963 * (3 * C46989 + C46963 * C47052)) /
                         C46745;
    const double C5978 =
        (2 * C46978 + C46963 * C46989 + C47052 * C47005) / C46745;
    const double C6490 = (C46793 * (3 * C46989 + C46963 * C47052)) / C46745;
    const double C12588 =
        (4 * (2 * C47014 + ae * C47015 + C46793 * C47101) +
         ae * (3 * C47015 + C46793 * C47102) +
         C46793 *
             (3 * C47101 + ae * C47102 +
              C46793 *
                  (2 * C47095 + ae * C47097 +
                   C46793 * (C46866 + ae * C46793 * C46946 +
                             C46793 * (ae * C46946 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C12586 = (4 * (2 * C47010 + C46793 * C47015) +
                           C46793 * (3 * C47015 + C46793 * C47102)) /
                          C46745;
    const double C22532 =
        (3 * C47037 + C46963 * C47108 + ae * C46793 * C47117 +
         C46793 * (ae * C47117 +
                   C46793 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46747;
    const double C22900 =
        (ae * (4 * C47046 + C46963 * C47117) +
         C46793 * (4 * C47108 +
                   C46963 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46747;
    const double C22405 = (5 * (3 * C46986 + C46963 * C47046) +
                           C46963 * (4 * C47046 + C46963 * C47117)) /
                          C46745;
    const double C22531 =
        (3 * C46986 + C46963 * C47046 + C47117 * C47005) / C46745;
    const double C22899 = (C46793 * (4 * C47046 + C46963 * C47117)) / C46745;
    const double C44159 =
        (5 * (3 * C47087 + ae * C47088 + C46793 * C47163) +
         ae * (4 * C47088 + C46793 * C47164) +
         C46793 *
             (4 * C47163 + ae * C47164 +
              C46793 *
                  (3 * C47159 + ae * C47160 +
                   C46793 * (2 * C47153 + ae * C47155 +
                             C46793 * (C46862 + ae * C46793 * C46939 +
                                       C46793 * (ae * C46939 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C44158 = (5 * (3 * C47008 + C46793 * C47088) +
                           C46793 * (4 * C47088 + C46793 * C47164)) /
                          C46745;
    const double C22418 = C22416 * C47576;
    const double C22548 = C22546 * C47576;
    const double C22909 = C22907 * C47576;
    const double C47972 = C47916 + C47964;
    const double C657 = C47951 - (C47615 * C47597) / C47592;
    const double C111 = C47952 / C47596 - C47613 / C47923;
    const double C47965 = C47919 + C47951;
    const double C47973 = C47932 + C47968;
    const double C1417 = C47958 - (C47695 * C47684) / C47592;
    const double C1145 = C47959 / C47596 - C47693 / C47923;
    const double C47969 = C47934 + C47958;
    const double C47974 = C47938 + C47970;
    const double C2285 = C47961 - (C47737 * C47726) / C47592;
    const double C1998 = C47962 / C47596 - C47735 / C47923;
    const double C47971 = C47940 + C47961;
    const double C173 = C160 + C161;
    const double C10463 = C10444 + C10445;
    const double C31492 = C31473 + C31474;
    const double C363 = C346 + C347;
    const double C10657 = C10638 + C10639;
    const double C31686 = C31667 + C31668;
    const double C365 = C350 + C351;
    const double C10993 = C10986 + C10987;
    const double C32022 = C32015 + C32016;
    const double C552 = C535 + C536;
    const double C10851 = C10832 + C10833;
    const double C10849 = C10828 + C10829;
    const double C31880 = C31861 + C31862;
    const double C31878 = C31857 + C31858;
    const double C554 = C539 + C540;
    const double C10461 = C10440 + C10441;
    const double C11135 = C11128 + C11129;
    const double C31490 = C31469 + C31470;
    const double C32164 = C32157 + C32158;
    const double C962 = C953 + C954;
    const double C10655 = C10634 + C10635;
    const double C11353 = C11342 + C11343;
    const double C31684 = C31663 + C31664;
    const double C32382 = C32371 + C32372;
    const double C4933 = C367 * C4760;
    const double C16287 = C367 * C16118;
    const double C21974 = C367 * C21631;
    const double C5222 = C670 * C4760;
    const double C16568 = C670 * C16118;
    const double C5559 = C964 * C4760;
    const double C16903 = C964 * C16118;
    const double C46931 = C46930 + C46925;
    const double C2176 = C47850 * C1309;
    const double C11341 = C47947 * C1309;
    const double C32370 = C47947 * C1309;
    const double C2175 = C113 * C1291;
    const double C11340 = C10416 * C1291;
    const double C32369 = C31445 * C1291;
    const double C1435 = C1427 + C1428;
    const double C1597 = C1589 + C1590;
    const double C10656 = C10636 + C10637;
    const double C31685 = C31665 + C31666;
    const double C2301 = C2293 + C2294;
    const double C10850 = C10830 + C10831;
    const double C31879 = C31859 + C31860;
    const double C5824 = C5818 * C47914;
    const double C17138 = C5818 * C47914;
    const double C22649 = C5818 * C47576;
    const double C6014 = C6006 * C47914;
    const double C17296 = C6006 * C47914;
    const double C23343 = C6006 * C47576;
    const double C6494 = C6354 * C47914;
    const double C17762 = C6354 * C47914;
    const double C22798 = C6354 * C47576;
    const double C47482 = C47481 + C47466;
    const double C22419 = C22417 * C21631;
    const double C22549 = C22547 * C21631;
    const double C22910 = C22908 * C21631;
    const double C353 = C47850 * C328;
    const double C666 = C47850 * C329;
    const double C46956 = C46955 + C46947;
    const double C1317 =
        (C46846 + C46870 * C46972 + ae * C46793 * C46992 +
         C46793 * (ae * C46992 +
                   C46793 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46747;
    const double C1709 =
        (ae * (2 * C46976 + C46963 * C46992) +
         C46793 * (2 * C46963 * C46870 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46747;
    const double C1165 = (3 * (C46911 + C46928 * C46972) +
                          C46963 * (2 * C46976 + C46963 * C46992)) /
                         C46745;
    const double C1308 = (C46911 + C46928 * C46972 + C46992 * C47005) / C46745;
    const double C1706 = (C46793 * (2 * C46976 + C46963 * C46992)) / C46745;
    const double C2023 =
        (3 * (C46846 + ae * C47017 + C46793 * C47021) +
         ae * (2 * C47017 + C46793 * C47022) +
         C46793 *
             (2 * C47021 + ae * C47022 +
              C46793 *
                  (C46870 + ae * C46793 * C46953 +
                   C46793 * (ae * C46953 +
                             C46793 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C2017 = (3 * (C46911 + C46928 * C47005) +
                          C46793 * (2 * C47017 + C46793 * C47022)) /
                         C46745;
    const double C108 =
        (C47963 + 2 * C47606) / C47596 - (C47972 * C47597) / C47592;
    const double C109 =
        (C47950 + 2 * C47615 + C47972) / C47596 - (C47965 * C47597) / C47592;
    const double C110 = (C47921 + C47612 / C47592 + C47965) / C47596 -
                        (C47952 * C47597) / C47592;
    const double C1142 =
        (C47966 + 2 * C47688) / C47596 - (C47973 * C47684) / C47592;
    const double C1143 =
        (C47954 + 2 * C47695 + C47973) / C47596 - (C47969 * C47684) / C47592;
    const double C1144 = (C47927 + C47692 / C47592 + C47969) / C47596 -
                         (C47959 * C47684) / C47592;
    const double C1995 =
        (C47967 + 2 * C47730) / C47596 - (C47974 * C47726) / C47592;
    const double C1996 =
        (C47956 + 2 * C47737 + C47974) / C47596 - (C47971 * C47726) / C47592;
    const double C1997 = (C47930 + C47734 / C47592 + C47971) / C47596 -
                         (C47962 * C47726) / C47592;
    const double C4934 = C363 * C4755;
    const double C4927 = C363 * C47914;
    const double C16288 = C363 * C16113;
    const double C16281 = C363 * C47914;
    const double C21758 = C363 * C47576;
    const double C4931 = C365 * C47914;
    const double C5221 = C365 * C4755;
    const double C16285 = C365 * C47914;
    const double C16567 = C365 * C16113;
    const double C21973 = C365 * C47576;
    const double C5560 = C962 * C4755;
    const double C5557 = C962 * C47914;
    const double C16904 = C962 * C16113;
    const double C16901 = C962 * C47914;
    const double C22230 = C962 * C47576;
    const double C517 =
        (2 * C46826 + ae * C46827 + C46794 * C46846 + ae * C46793 * C46931 +
         C46793 * (ae * C46931 + C46793 * C46874)) /
        C46747;
    const double C518 =
        (ae * (3 * C46911 + C46794 * C46931 +
               (2 * C46905 + C46794 * C46923) * ae) +
         C46793 * (3 * C46846 + ae * C46847 + C46794 * C46874)) /
        C46747;
    const double C944 =
        (ae * C46963 * C46931 + C46793 * C46963 * C46874) / C46747;
    const double C134 = (4 * (2 * C46899 + C46794 * C46911 + C47180 * ae) +
                         C46794 * (3 * C46911 + C46794 * C46931 + C47184 * ae) +
                         (3 * C47180 + C46794 * C47184) * ae) /
                        C46745;
    const double C315 =
        (2 * C46899 + C46794 * C46911 + C47180 * ae + C46931 * C46972) / C46745;
    const double C317 =
        (C46963 * (3 * C46911 + C46794 * C46931 + C47184 * ae)) / C46745;
    const double C504 =
        (2 * C46899 + C46794 * C46911 + C47180 * ae + C46931 * C47005) / C46745;
    const double C506 =
        (C46793 * (3 * C46911 + C46794 * C46931 + C47184 * ae)) / C46745;
    const double C937 = (C46793 * C46963 * C46931) / C46745;
    const double C2183 = C2175 + C2176;
    const double C11352 = C11340 + C11341;
    const double C32381 = C32369 + C32370;
    const double C6148 = C1435 * C47914;
    const double C17430 = C1435 * C47914;
    const double C21759 = C1435 * C47576;
    const double C6350 = C1597 * C47914;
    const double C17628 = C1597 * C47914;
    const double C22228 = C1597 * C47576;
    const double C44157 =
        (5 * (3 * C47400 + C46793 * C47482 + C47399 * ae) +
         C46793 *
             (4 * C47482 +
              C46793 *
                  (3 * C47477 +
                   C46793 *
                       (2 * C47469 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46940) +
                                  C46793 * C46937 * ae) +
                        C47471 * ae) +
                   C47476 * ae) +
              C47480 * ae) +
         (4 * C47399 + C46793 * C47480) * ae) /
        C46745;
    const double C46957 = C46794 * C46956;
    const double C47024 = C46963 * C46956;
    const double C1587 =
        (ae * (C46931 + C46956 * C46972) +
         C46793 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46972)) /
        C46747;
    const double C2291 =
        (2 * (ae * C46931 + C46793 * C46874) + ae * (C46931 + C46956 * C47005) +
         C46793 *
             (C46874 + ae * C46793 * C46956 +
              C46793 *
                  (ae * C46956 +
                   C46793 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C1424 =
        (2 * C46963 * C46931 + C46963 * (C46931 + C46956 * C46972)) / C46745;
    const double C1586 = (C46793 * (C46931 + C46956 * C46972)) / C46745;
    const double C2290 =
        (2 * C46793 * C46931 + C46793 * (C46931 + C46956 * C47005)) / C46745;
    const double C21763 = C21757 + C21758;
    const double C542 = C47850 * C517;
    const double C11127 = C47947 * C517;
    const double C32156 = C47947 * C517;
    const double C776 = C47850 * C518;
    const double C10443 = C47947 * C518;
    const double C31472 = C47947 * C518;
    const double C956 = C47850 * C944;
    const double C10985 = C47947 * C944;
    const double C32014 = C47947 * C944;
    const double C162 = C113 * C134;
    const double C352 = C113 * C315;
    const double C665 = C113 * C317;
    const double C541 = C113 * C504;
    const double C11126 = C10416 * C504;
    const double C32155 = C31445 * C504;
    const double C775 = C113 * C506;
    const double C10442 = C10416 * C506;
    const double C31471 = C31445 * C506;
    const double C955 = C113 * C937;
    const double C10984 = C10416 * C937;
    const double C32013 = C31445 * C937;
    const double C7080 = C2183 * C47914;
    const double C18334 = C2183 * C47914;
    const double C46958 = C46934 + C46957;
    const double C2173 =
        (C46963 * C46874 + ae * C46793 * C47024 +
         C46793 * (ae * C47024 +
                   C46793 * C46963 *
                       (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46747;
    const double C2172 = (C46963 * C46931 + C47024 * C47005) / C46745;
    const double C174 = C162 + C163;
    const double C366 = C352 + C353;
    const double C669 = C665 + C666;
    const double C555 = C541 + C542;
    const double C11134 = C11126 + C11127;
    const double C32163 = C32155 + C32156;
    const double C779 = C775 + C776;
    const double C10462 = C10442 + C10443;
    const double C31491 = C31471 + C31472;
    const double C963 = C955 + C956;
    const double C10992 = C10984 + C10985;
    const double C32021 = C32013 + C32014;
    const double C46959 = C46958 + C46952;
    const double C4932 = C366 * C47914;
    const double C16286 = C366 * C47914;
    const double C21975 = C366 * C47576;
    const double C5223 = C669 * C47914;
    const double C16569 = C669 * C47914;
    const double C5558 = C963 * C47914;
    const double C16902 = C963 * C47914;
    const double C519 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 + ae * C46793 * C46959 +
         C46793 *
             (ae * C46959 +
              C46793 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C773 =
        (ae * (4 * C46931 + C46794 * C46959 +
               (3 * C46923 + C46794 * C46950) * ae) +
         C46793 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46747;
    const double C945 =
        (ae * C46963 * C46959 +
         C46793 * C46963 *
             (3 * C46870 + ae * C46871 +
              C46794 * (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46747;
    const double C137 = (5 * (3 * C46911 + C46794 * C46931 + C47184 * ae) +
                         C46794 * (4 * C46931 + C46794 * C46959 + C47190 * ae) +
                         (4 * C47184 + C46794 * C47190) * ae) /
                        C46745;
    const double C320 =
        (3 * C46911 + C46794 * C46931 + C47184 * ae + C46959 * C46972) / C46745;
    const double C509 =
        (3 * C46911 + C46794 * C46931 + C47184 * ae + C46959 * C47005) / C46745;
    const double C662 =
        (C46963 * (4 * C46931 + C46794 * C46959 + C47190 * ae)) / C46745;
    const double C772 =
        (C46793 * (4 * C46931 + C46794 * C46959 + C47190 * ae)) / C46745;
    const double C940 = (C46793 * C46963 * C46959) / C46745;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47688 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C47695 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C2880) *
                     C47606 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47835 * C47647 * C47695 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47688 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47835 * C47647 * C2880) *
                     C47615 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C47688 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47835 * C47647 * C47695 +
                  (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                   (C113 * C300 + C47850 * C319) * C116 +
                   (C113 * C320 + C47850 * C330) * C104) *
                      C47835 * C47647 * C2880) *
                     C2883)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47688 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47896) *
                      C47695 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47896 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47734) *
                      C2880) *
                     C2620 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47896) *
                      C47688 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47896 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47734) *
                      C47695 +
                  ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                    (C113 * C1584 + C47850 * C1585) * C116 +
                    (C113 * C1586 + C47850 * C1587) * C104) *
                       C47835 * C47734 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47896) *
                      C2880) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47973 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C47969 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C47959 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C47937) *
                     C2620 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47835 * C47647 * C47969 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47973 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47835 * C47647 * C47959 +
                  (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                   (C113 * C1422 + C47850 * C1423) * C116 +
                   (C113 * C1424 + C47850 * C1425) * C104) *
                      C47835 * C47647 * C47937) *
                     C47612)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C2512 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C47692) *
                     C47972 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47835 * C47647 * C47692 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C2512) *
                     C47965 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C2512 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47835 * C47647 * C47692) *
                     C47952 +
                 ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                   (C113 * C660 + C47850 * C661) * C116 +
                   (C113 * C662 + C47850 * C663) * C104) *
                      C47835 * C47647 * C47692 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47835 * C47647 * C2512) *
                     C47931)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47967 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47956 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C2512 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47956 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47967 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C47930) *
                      C47692) *
                     C2620 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47956 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47967 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47930) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47967 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47956 +
                   (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                    (C113 * C2170 + C47850 * C2171) * C116 +
                    (C113 * C2172 + C47850 * C2173) * C104) *
                       C47835 * C47930) *
                      C47692) *
                     C47612)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C2512 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47896) *
                      C47692) *
                     C47606 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47896) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47896 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47734) *
                      C47692) *
                     C47615 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47896 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47850 * C939) * C116 +
                    (C113 * C940 + C47850 * C945) * C104) *
                       C47835 * C47734 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47896) *
                      C47692) *
                     C2883)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C2512 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C47692) *
                     C47972 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47835 * C47647 * C47692 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C2512) *
                     C47965 +
                 ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C2512 -
                  (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                   C356 * C102 + C357 * C114) *
                      C47835 * C47647 * C47692) *
                     C47952 +
                 ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                   (C113 * C660 + C47850 * C661) * C116 +
                   (C113 * C662 + C47850 * C663) * C104) *
                      C47835 * C47647 * C47692 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47835 * C47647 * C2512) *
                     C47931)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47973 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C47969 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C47959 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C47937) *
                     C2620 +
                 ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                   C364 * C116 + C365 * C104) *
                      C47835 * C47647 * C47969 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47973 -
                  (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                   C361 * C102 + C360 * C114) *
                      C47835 * C47647 * C47959 +
                  (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                   (C113 * C1422 + C47850 * C1423) * C116 +
                   (C113 * C1424 + C47850 * C1425) * C104) *
                      C47835 * C47647 * C47937) *
                     C47612)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47688 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C3274) *
                      C47695 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C3274 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47734) *
                      C2880) *
                     C47881 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C3274) *
                      C47688 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47734) *
                      C47695 +
                  ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                    (C113 * C1584 + C47850 * C1585) * C116 +
                    (C113 * C1586 + C47850 * C1587) * C104) *
                       C47835 * C47734 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C3274) *
                      C2880) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47730 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47850 * C512) * C102 +
                   (C113 * C482 + C47850 * C495) * C114) *
                      C47835 * C47737 +
                  ((C113 * C483 + C47850 * C496) * C114 +
                   (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47835 * C3782) *
                     C47688 +
                 (((C113 * C926 + C47850 * C931) * C114 +
                   (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47835 * C47737 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47730 -
                  (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                   (C113 * C1295 + C47850 * C1311) * C102 +
                   (C113 * C1284 + C47850 * C1296) * C114) *
                      C47835 * C3782) *
                     C47695 +
                 (((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47730 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47850 * C1314) * C102 +
                   (C113 * C1287 + C47850 * C1302) * C114) *
                      C47835 * C47737 +
                  ((C113 * C1288 + C47850 * C1303) * C114 +
                   (C113 * C1304 + C47850 * C1315) * C102 +
                   (C113 * C1289 + C47850 * C1305) * C115 +
                   (C113 * C1306 + C47850 * C1316) * C103 +
                   (C113 * C1290 + C47850 * C1307) * C116 +
                   (C113 * C1308 + C47850 * C1317) * C104) *
                      C47835 * C3782) *
                     C2880) *
                C47601) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C3274 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47850 * C512) * C102 +
                   (C113 * C482 + C47850 * C495) * C114) *
                      C47835 * C47734) *
                     C47973 +
                 (((C113 * C926 + C47850 * C931) * C114 +
                   (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47835 * C47734 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C3274) *
                     C47969 +
                 (((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C3274 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47850 * C1314) * C102 +
                   (C113 * C1287 + C47850 * C1302) * C114) *
                      C47835 * C47734) *
                     C47959 +
                 (((C113 * C1698 + C47850 * C1701) * C114 +
                   (C113 * C1702 + C47850 * C1707) * C102 +
                   (C113 * C1699 + C47850 * C1703) * C115 +
                   (C113 * C1704 + C47850 * C1708) * C103 +
                   (C113 * C1700 + C47850 * C1705) * C116 +
                   (C113 * C1706 + C47850 * C1709) * C104) *
                      C47835 * C47734 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C3274) *
                     C47937) *
                C47601) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C2512 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C3274) *
                      C47692) *
                     C47963 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C3274) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47734) *
                      C47692) *
                     C47950 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47850 * C939) * C116 +
                    (C113 * C940 + C47850 * C945) * C104) *
                       C47835 * C47734 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C3274) *
                      C47692) *
                     C47921)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47974 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47850 * C512) * C102 +
                   (C113 * C482 + C47850 * C495) * C114) *
                      C47835 * C47971 +
                  ((C113 * C483 + C47850 * C496) * C114 +
                   (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47835 * C47962 -
                  (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                   (C113 * C2010 + C47850 * C2020) * C102 +
                   (C113 * C2002 + C47850 * C2011) * C114) *
                      C47835 * C47943) *
                     C2512 +
                 (((C113 * C926 + C47850 * C931) * C114 +
                   (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47835 * C47971 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47974 -
                  (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                   (C113 * C1295 + C47850 * C1311) * C102 +
                   (C113 * C1284 + C47850 * C1296) * C114) *
                      C47835 * C47962 +
                  ((C113 * C2402 + C47850 * C2405) * C114 +
                   (C113 * C2406 + C47850 * C2411) * C102 +
                   (C113 * C2403 + C47850 * C2407) * C115 +
                   (C113 * C2408 + C47850 * C2412) * C103 +
                   (C113 * C2404 + C47850 * C2409) * C116 +
                   (C113 * C2410 + C47850 * C2413) * C104) *
                      C47835 * C47943) *
                     C47692) *
                C47601) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47730 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47737 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C3782) *
                      C2512 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47737 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47730 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C3782) *
                      C47692) *
                     C47881 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47737 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47730 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C3782) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47730 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47737 +
                   (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                    (C113 * C2170 + C47850 * C2171) * C116 +
                    (C113 * C2172 + C47850 * C2173) * C104) *
                       C47835 * C3782) *
                      C47692) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C2512 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C3274) *
                      C47692) *
                     C47963 +
                 (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C3274) *
                      C2512 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C3274 -
                   (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                    C960 * C102 + C959 * C114) *
                       C47835 * C47734) *
                      C47692) *
                     C47950 +
                 (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C2512 +
                  ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                    (C113 * C930 + C47850 * C939) * C116 +
                    (C113 * C940 + C47850 * C945) * C104) *
                       C47835 * C47734 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C3274) *
                      C47692) *
                     C47921)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C3274 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47850 * C512) * C102 +
                   (C113 * C482 + C47850 * C495) * C114) *
                      C47835 * C47734) *
                     C47973 +
                 (((C113 * C926 + C47850 * C931) * C114 +
                   (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                   C960 * C103 + C961 * C116 + C962 * C104) *
                      C47835 * C47734 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C3274) *
                     C47969 +
                 (((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C3274 -
                  (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                   (C113 * C1301 + C47850 * C1314) * C102 +
                   (C113 * C1287 + C47850 * C1302) * C114) *
                      C47835 * C47734) *
                     C47959 +
                 (((C113 * C1698 + C47850 * C1701) * C114 +
                   (C113 * C1702 + C47850 * C1707) * C102 +
                   (C113 * C1699 + C47850 * C1703) * C115 +
                   (C113 * C1704 + C47850 * C1708) * C103 +
                   (C113 * C1700 + C47850 * C1705) * C116 +
                   (C113 * C1706 + C47850 * C1709) * C104) *
                      C47835 * C47734 -
                  (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C3274) *
                     C47937) *
                C47601) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1416 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1417 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C1418 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47850 * C1168) * C102 +
                    (C113 * C1150 + C47850 * C1159) * C114) *
                       C47835 * C47647 * C47937) *
                      C47881 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1417 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1416 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C1418 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C47850 * C1423) * C116 +
                    (C113 * C1424 + C47850 * C1425) * C104) *
                       C47835 * C47647 * C47937) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C47895 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C47692) *
                      C656 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C47692 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C47895) *
                      C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C47895 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C47692) *
                      C658 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C47850 * C661) * C116 +
                    (C113 * C662 + C47850 * C663) * C104) *
                       C47835 * C47647 * C47692 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C47647 * C47895) *
                      C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C1821 +
                    ((C113 * C483 + C47850 * C496) * C114 +
                     (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C47835 * C47930) *
                       C47895 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C1821 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C1820 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C47850 * C1311) * C102 +
                     (C113 * C1284 + C47850 * C1296) * C114) *
                        C47835 * C47930) *
                       C47692) *
                      C47881 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C1821 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C1820 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C47835 * C47930) *
                       C47895 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C1820 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C1821 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C47850 * C2171) * C116 +
                     (C113 * C2172 + C47850 * C2173) * C104) *
                        C47835 * C47930) *
                       C47692) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C1416 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47896) *
                      C1417 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47896 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47734) *
                      C1418 +
                  (((C113 * C1698 + C47850 * C1701) * C114 +
                    (C113 * C1702 + C47850 * C1707) * C102 +
                    (C113 * C1699 + C47850 * C1703) * C115 +
                    (C113 * C1704 + C47850 * C1708) * C103 +
                    (C113 * C1700 + C47850 * C1705) * C116 +
                    (C113 * C1706 + C47850 * C1709) * C104) *
                       C47835 * C47734 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47850 * C1168) * C102 +
                    (C113 * C1150 + C47850 * C1159) * C114) *
                       C47835 * C47896) *
                      C47937) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C47896 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C47896) *
                       C47692) *
                      C288 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C47896) *
                       C47895 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C47896 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C47692) *
                      C289 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47835 * C47896 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47835 * C47734) *
                       C47895 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47850 * C939) * C116 +
                     (C113 * C940 + C47850 * C945) * C104) *
                        C47835 * C47734 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47835 * C47896) *
                       C47692) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C2284 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C2285 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C2286 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47850 * C2020) * C102 +
                    (C113 * C2002 + C47850 * C2011) * C114) *
                       C47835 * C47943) *
                      C47895 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C2285 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C2284 -
                   (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C2286 +
                   ((C113 * C2402 + C47850 * C2405) * C114 +
                    (C113 * C2406 + C47850 * C2411) * C102 +
                    (C113 * C2403 + C47850 * C2407) * C115 +
                    (C113 * C2408 + C47850 * C2412) * C103 +
                    (C113 * C2404 + C47850 * C2409) * C116 +
                    (C113 * C2410 + C47850 * C2413) * C104) *
                       C47835 * C47943) *
                      C47692) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] += (0.5 * std::pow(Pi, 2.5) *
                     (((C113 * C117 + C47850 * C124) * C114 +
                       (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                       C167 * C103 + C168 * C116 + C169 * C104) *
                          C47835 * C47647 * C47629 * C108 -
                      (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                       C167 * C102 + C166 * C114) *
                          C47835 * C47647 * C47629 * C109 +
                      (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                       C172 * C116 + C173 * C104) *
                          C47835 * C47647 * C47629 * C110 -
                      (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                       C170 * C102 + C171 * C114) *
                          C47835 * C47647 * C47629 * C111 +
                      (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                       (C113 * C123 + C47850 * C136) * C116 +
                       (C113 * C137 + C47850 * C144) * C104) *
                          C47835 * C47647 * C47629 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C47850 * C124) * C114 +
                        (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C47835 * C47647 * C47966 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C47850 * C323) * C102 +
                        (C113 * C293 + C47850 * C306) * C114) *
                           C47835 * C47647 * C47954 +
                       ((C113 * C294 + C47850 * C307) * C114 +
                        (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                        C361 * C103 + C362 * C116 + C363 * C104) *
                           C47835 * C47647 * C47927) *
                          C288 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C47835 * C47647 * C47954 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C47835 * C47647 * C47966 -
                       (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                        C361 * C102 + C360 * C114) *
                           C47835 * C47647 * C47927) *
                          C289 +
                      ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C47835 * C47647 * C47966 -
                       ((C113 * C317 + C47850 * C329) * C104 +
                        (C113 * C299 + C47850 * C318) * C116 + C365 * C103 +
                        C364 * C115 + C356 * C102 + C357 * C114) *
                           C47835 * C47647 * C47954 +
                       (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                        (C113 * C300 + C47850 * C319) * C116 +
                        (C113 * C320 + C47850 * C330) * C104) *
                           C47835 * C47647 * C47927) *
                          C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47967 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47956 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47629 * C288 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47956 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47967 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47930) *
                      C47629 * C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47967 -
                   ((C113 * C506 + C47850 * C518) * C104 +
                    (C113 * C488 + C47850 * C507) * C116 + C554 * C103 +
                    C553 * C115 + C545 * C102 + C546 * C114) *
                       C47835 * C47956 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47850 * C508) * C116 +
                    (C113 * C509 + C47850 * C519) * C104) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1075 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C1143 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C1144 -
                  ((C113 * C1154 + C47850 * C1166) * C104 +
                   (C113 * C1148 + C47850 * C1155) * C116 +
                   (C113 * C1156 + C47850 * C1167) * C103 +
                   (C113 * C1149 + C47850 * C1157) * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C1145 +
                  ((C113 * C1151 + C47850 * C1160) * C114 +
                   (C113 * C1161 + C47850 * C1169) * C102 +
                   (C113 * C1152 + C47850 * C1162) * C115 +
                   (C113 * C1163 + C47850 * C1170) * C103 +
                   (C113 * C1153 + C47850 * C1164) * C116 +
                   (C113 * C1165 + C47850 * C1171) * C104) *
                      C47835 * C47647 * C1146) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47967 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47956 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C1074 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47956 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47967 -
                   ((C113 * C1291 + C47850 * C1309) * C104 +
                    (C113 * C1282 + C47850 * C1292) * C116 +
                    (C113 * C1293 + C47850 * C1310) * C103 +
                    (C113 * C1283 + C47850 * C1294) * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C47930) *
                      C1075 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47967 -
                   ((C113 * C1297 + C47850 * C1312) * C104 +
                    (C113 * C1285 + C47850 * C1298) * C116 +
                    (C113 * C1299 + C47850 * C1313) * C103 +
                    (C113 * C1286 + C47850 * C1300) * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47956 +
                   ((C113 * C1288 + C47850 * C1303) * C114 +
                    (C113 * C1304 + C47850 * C1315) * C102 +
                    (C113 * C1289 + C47850 * C1305) * C115 +
                    (C113 * C1306 + C47850 * C1316) * C103 +
                    (C113 * C1290 + C47850 * C1307) * C116 +
                    (C113 * C1308 + C47850 * C1317) * C104) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C1821 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47629 * C47963 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C1821 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C1820 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47930) *
                      C47629 * C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C1820 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C1821 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47850 * C508) * C116 +
                    (C113 * C509 + C47850 * C519) * C104) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C1821 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47966 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C1821 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C1820 -
                   ((C113 * C1291 + C47850 * C1309) * C104 +
                    (C113 * C1282 + C47850 * C1292) * C116 +
                    (C113 * C1293 + C47850 * C1310) * C103 +
                    (C113 * C1283 + C47850 * C1294) * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C47930) *
                      C47954 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C1820 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C1821 +
                   ((C113 * C1288 + C47850 * C1303) * C114 +
                    (C113 * C1304 + C47850 * C1315) * C102 +
                    (C113 * C1289 + C47850 * C1305) * C115 +
                    (C113 * C1306 + C47850 * C1316) * C103 +
                    (C113 * C1290 + C47850 * C1307) * C116 +
                    (C113 * C1308 + C47850 * C1317) * C104) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C1995 -
                  (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                   (C113 * C494 + C47850 * C512) * C102 +
                   (C113 * C482 + C47850 * C495) * C114) *
                      C47835 * C1996 +
                  ((C113 * C483 + C47850 * C496) * C114 +
                   (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                   C550 * C103 + C551 * C116 + C552 * C104) *
                      C47835 * C1997 -
                  ((C113 * C2006 + C47850 * C2018) * C104 +
                   (C113 * C2000 + C47850 * C2007) * C116 +
                   (C113 * C2008 + C47850 * C2019) * C103 +
                   (C113 * C2001 + C47850 * C2009) * C115 +
                   (C113 * C2010 + C47850 * C2020) * C102 +
                   (C113 * C2002 + C47850 * C2011) * C114) *
                      C47835 * C1998 +
                  ((C113 * C2003 + C47850 * C2012) * C114 +
                   (C113 * C2013 + C47850 * C2021) * C102 +
                   (C113 * C2004 + C47850 * C2014) * C115 +
                   (C113 * C2015 + C47850 * C2022) * C103 +
                   (C113 * C2005 + C47850 * C2016) * C116 +
                   (C113 * C2017 + C47850 * C2023) * C104) *
                      C47835 * C1999) *
                 C47629 * C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C47896 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C1074 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C47896) *
                       C1075 +
                   (((C113 * C294 + C47850 * C307) * C114 +
                     (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47835 * C47896 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47850 * C1314) * C102 +
                     (C113 * C1287 + C47850 * C1302) * C114) *
                        C47835 * C47734) *
                       C47927) *
                      C47881 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C47896) *
                       C1074 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C47896 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C1075 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47850 * C1585) * C116 +
                     (C113 * C1586 + C47850 * C1587) * C104) *
                        C47835 * C47734 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47835 * C47896) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47629 * C656 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47896) *
                      C47629 * C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47896 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C47629 * C658 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47850 * C771) * C116 +
                    (C113 * C772 + C47850 * C773) * C104) *
                       C47835 * C47734 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C47896) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C2284 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C2285 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C2286 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47850 * C2020) * C102 +
                    (C113 * C2002 + C47850 * C2011) * C114) *
                       C47835 * C47943) *
                      C47629 * C47881 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C2285 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C2284 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C2286 +
                   (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                    (C113 * C2288 + C47850 * C2289) * C116 +
                    (C113 * C2290 + C47850 * C2291) * C104) *
                       C47835 * C47943) *
                      C47629 * C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C47966 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C47954 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C47966 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C47966 -
                   ((C113 * C317 + C47850 * C329) * C104 +
                    (C113 * C299 + C47850 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C47954 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47629 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47629 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C47629 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47835 * C47647 * C47629 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47850 * C136) * C116 +
                   (C113 * C137 + C47850 * C144) * C104) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1075 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C1143 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C1144 -
                  ((C113 * C1154 + C47850 * C1166) * C104 +
                   (C113 * C1148 + C47850 * C1155) * C116 +
                   (C113 * C1156 + C47850 * C1167) * C103 +
                   (C113 * C1149 + C47850 * C1157) * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C1145 +
                  ((C113 * C1151 + C47850 * C1160) * C114 +
                   (C113 * C1161 + C47850 * C1169) * C102 +
                   (C113 * C1152 + C47850 * C1162) * C115 +
                   (C113 * C1163 + C47850 * C1170) * C103 +
                   (C113 * C1153 + C47850 * C1164) * C116 +
                   (C113 * C1165 + C47850 * C1171) * C104) *
                      C47835 * C47647 * C1146) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C1821 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47629 * C47963 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C1821 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C1820 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47930) *
                      C47629 * C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C1820 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C1821 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47850 * C508) * C116 +
                    (C113 * C509 + C47850 * C519) * C104) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C1821 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47966 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C1821 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C1820 -
                   ((C113 * C1291 + C47850 * C1309) * C104 +
                    (C113 * C1282 + C47850 * C1292) * C116 +
                    (C113 * C1293 + C47850 * C1310) * C103 +
                    (C113 * C1283 + C47850 * C1294) * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C47930) *
                      C47954 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C1820 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C1821 +
                   ((C113 * C1288 + C47850 * C1303) * C114 +
                    (C113 * C1304 + C47850 * C1315) * C102 +
                    (C113 * C1289 + C47850 * C1305) * C115 +
                    (C113 * C1306 + C47850 * C1316) * C103 +
                    (C113 * C1290 + C47850 * C1307) * C116 +
                    (C113 * C1308 + C47850 * C1317) * C104) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C3274) *
                       C47692) *
                      C47606 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C3274) *
                       C47895 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C47692) *
                      C47615 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47835 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47835 * C47734) *
                       C47895 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47850 * C939) * C116 +
                     (C113 * C940 + C47850 * C945) * C104) *
                        C47835 * C47734 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47835 * C3274) *
                       C47692) *
                      C2883)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C47730 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47737 +
                    ((C113 * C483 + C47850 * C496) * C114 +
                     (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C47835 * C3782) *
                       C47895 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47737 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C47730 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C47850 * C1311) * C102 +
                     (C113 * C1284 + C47850 * C1296) * C114) *
                        C47835 * C3782) *
                       C47692) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47737 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C47730 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C47835 * C3782) *
                       C47895 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C47730 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47737 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C47850 * C2171) * C116 +
                     (C113 * C2172 + C47850 * C2173) * C104) *
                        C47835 * C3782) *
                       C47692) *
                      C47612)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C47966 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C3274) *
                       C47954 +
                   (((C113 * C294 + C47850 * C307) * C114 +
                     (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47835 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47850 * C1314) * C102 +
                     (C113 * C1287 + C47850 * C1302) * C114) *
                        C47835 * C47734) *
                       C47927) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C3274) *
                       C47966 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C47954 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47850 * C1585) * C116 +
                     (C113 * C1586 + C47850 * C1587) * C104) *
                        C47835 * C47734 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47835 * C3274) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47629 * C47972 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C3274) *
                      C47629 * C47965 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C47629 * C47952 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47850 * C771) * C116 +
                    (C113 * C772 + C47850 * C773) * C104) *
                       C47835 * C47734 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C3274) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47974 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47971 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47962 -
                   (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                    (C113 * C2010 + C47850 * C2020) * C102 +
                    (C113 * C2002 + C47850 * C2011) * C114) *
                       C47835 * C47943) *
                      C47629 * C2620 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47971 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47974 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47962 +
                   (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                    (C113 * C2288 + C47850 * C2289) * C116 +
                    (C113 * C2290 + C47850 * C2291) * C104) *
                       C47835 * C47943) *
                      C47629 * C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47730 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47737 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C3782) *
                      C47629 * C47606 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47737 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47730 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C3782) *
                      C47629 * C47615 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47730 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47737 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47850 * C508) * C116 +
                    (C113 * C509 + C47850 * C519) * C104) *
                       C47835 * C3782) *
                      C47629 * C2883)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47629 * C47972 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C3274) *
                      C47629 * C47965 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C47629 * C47952 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47850 * C771) * C116 +
                    (C113 * C772 + C47850 * C773) * C104) *
                       C47835 * C47734 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C3274) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C47966 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C3274) *
                       C47954 +
                   (((C113 * C294 + C47850 * C307) * C114 +
                     (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47835 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47850 * C1314) * C102 +
                     (C113 * C1287 + C47850 * C1302) * C114) *
                        C47835 * C47734) *
                       C47927) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C3274) *
                       C47966 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C47954 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47850 * C1585) * C116 +
                     (C113 * C1586 + C47850 * C1587) * C104) *
                        C47835 * C47734 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47835 * C3274) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C47895 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C47692) *
                      C656 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C47692 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C47895) *
                      C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C47895 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C47692) *
                      C658 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C47850 * C661) * C116 +
                    (C113 * C662 + C47850 * C663) * C104) *
                       C47835 * C47647 * C47692 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C47647 * C47895) *
                      C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1416 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1417 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C1418 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47850 * C1168) * C102 +
                    (C113 * C1150 + C47850 * C1159) * C114) *
                       C47835 * C47647 * C47937) *
                      C47881 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1417 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1416 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C1418 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C47850 * C1423) * C116 +
                    (C113 * C1424 + C47850 * C1425) * C104) *
                       C47835 * C47647 * C47937) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C47896 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C47896) *
                       C47692) *
                      C288 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C47896) *
                       C47895 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C47896 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C47692) *
                      C289 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C47835 * C47896 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C47835 * C47734) *
                       C47895 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C47850 * C939) * C116 +
                     (C113 * C940 + C47850 * C945) * C104) *
                        C47835 * C47734 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C47835 * C47896) *
                       C47692) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C1416 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47734 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47896) *
                      C1417 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47896 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47734) *
                      C1418 +
                  (((C113 * C1698 + C47850 * C1701) * C114 +
                    (C113 * C1702 + C47850 * C1707) * C102 +
                    (C113 * C1699 + C47850 * C1703) * C115 +
                    (C113 * C1704 + C47850 * C1708) * C103 +
                    (C113 * C1700 + C47850 * C1705) * C116 +
                    (C113 * C1706 + C47850 * C1709) * C104) *
                       C47835 * C47734 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C47850 * C1168) * C102 +
                    (C113 * C1150 + C47850 * C1159) * C114) *
                       C47835 * C47896) *
                      C47937) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C47966 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C47954 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C47966 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C47966 -
                   ((C113 * C317 + C47850 * C329) * C104 +
                    (C113 * C299 + C47850 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C47954 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47629 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47629 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C47629 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47835 * C47647 * C47629 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47850 * C136) * C116 +
                   (C113 * C137 + C47850 * C144) * C104) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47967 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47956 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C47629 * C288 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47956 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47967 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C47835 * C47930) *
                      C47629 * C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47967 -
                   ((C113 * C506 + C47850 * C518) * C104 +
                    (C113 * C488 + C47850 * C507) * C116 + C554 * C103 +
                    C553 * C115 + C545 * C102 + C546 * C114) *
                       C47835 * C47956 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C47850 * C508) * C116 +
                    (C113 * C509 + C47850 * C519) * C104) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1075 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C1143 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C1144 -
                  ((C113 * C1154 + C47850 * C1166) * C104 +
                   (C113 * C1148 + C47850 * C1155) * C116 +
                   (C113 * C1156 + C47850 * C1167) * C103 +
                   (C113 * C1149 + C47850 * C1157) * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C1145 +
                  ((C113 * C1151 + C47850 * C1160) * C114 +
                   (C113 * C1161 + C47850 * C1169) * C102 +
                   (C113 * C1152 + C47850 * C1162) * C115 +
                   (C113 * C1163 + C47850 * C1170) * C103 +
                   (C113 * C1153 + C47850 * C1164) * C116 +
                   (C113 * C1165 + C47850 * C1171) * C104) *
                      C47835 * C47647 * C1146) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47967 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47956 +
                   ((C113 * C483 + C47850 * C496) * C114 +
                    (C113 * C497 + C47850 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C47835 * C47930) *
                      C1074 +
                  (((C113 * C926 + C47850 * C931) * C114 +
                    (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C47835 * C47956 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47967 -
                   ((C113 * C1291 + C47850 * C1309) * C104 +
                    (C113 * C1282 + C47850 * C1292) * C116 +
                    (C113 * C1293 + C47850 * C1310) * C103 +
                    (C113 * C1283 + C47850 * C1294) * C115 +
                    (C113 * C1295 + C47850 * C1311) * C102 +
                    (C113 * C1284 + C47850 * C1296) * C114) *
                       C47835 * C47930) *
                      C1075 +
                  (((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47967 -
                   ((C113 * C1297 + C47850 * C1312) * C104 +
                    (C113 * C1285 + C47850 * C1298) * C116 +
                    (C113 * C1299 + C47850 * C1313) * C103 +
                    (C113 * C1286 + C47850 * C1300) * C115 +
                    (C113 * C1301 + C47850 * C1314) * C102 +
                    (C113 * C1287 + C47850 * C1302) * C114) *
                       C47835 * C47956 +
                   ((C113 * C1288 + C47850 * C1303) * C114 +
                    (C113 * C1304 + C47850 * C1315) * C102 +
                    (C113 * C1289 + C47850 * C1305) * C115 +
                    (C113 * C1306 + C47850 * C1316) * C103 +
                    (C113 * C1290 + C47850 * C1307) * C116 +
                    (C113 * C1308 + C47850 * C1317) * C104) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47896 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C47850 * C512) * C102 +
                    (C113 * C482 + C47850 * C495) * C114) *
                       C47835 * C47734) *
                      C47629 * C656 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C47835 * C47734 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47896) *
                      C47629 * C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47896 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C47835 * C47734) *
                      C47629 * C658 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C47850 * C771) * C116 +
                    (C113 * C772 + C47850 * C773) * C104) *
                       C47835 * C47734 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C47835 * C47896) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C114 +
                     (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C47835 * C47896 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C47850 * C512) * C102 +
                     (C113 * C482 + C47850 * C495) * C114) *
                        C47835 * C47734) *
                       C1074 +
                   (((C113 * C926 + C47850 * C931) * C114 +
                     (C113 * C932 + C47850 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C47835 * C47734 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C47850 * C323) * C102 +
                     (C113 * C293 + C47850 * C306) * C114) *
                        C47835 * C47896) *
                       C1075 +
                   (((C113 * C294 + C47850 * C307) * C114 +
                     (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C47835 * C47896 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C47850 * C1314) * C102 +
                     (C113 * C1287 + C47850 * C1302) * C114) *
                        C47835 * C47734) *
                       C47927) *
                      C47881 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C47835 * C47734 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C47835 * C47896) *
                       C1074 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C47835 * C47896 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C47835 * C47734) *
                       C1075 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C47850 * C1585) * C116 +
                     (C113 * C1586 + C47850 * C1587) * C104) *
                        C47835 * C47734 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C47835 * C47896) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C47629 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C47835 * C47647 * C47629 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C47835 * C47647 * C47629 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C47835 * C47647 * C47629 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C47850 * C136) * C116 +
                   (C113 * C137 + C47850 * C144) * C104) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C47966 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C47954 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C47966 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C47966 -
                   ((C113 * C317 + C47850 * C329) * C104 +
                    (C113 * C299 + C47850 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C47954 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C47850 * C124) * C114 +
                    (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C47835 * C47647 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C47850 * C323) * C102 +
                    (C113 * C293 + C47850 * C306) * C114) *
                       C47835 * C47647 * C1075 +
                   ((C113 * C294 + C47850 * C307) * C114 +
                    (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C47835 * C47647 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C47835 * C47647 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C47835 * C47647 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C47835 * C47647 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C47850 * C319) * C116 +
                    (C113 * C320 + C47850 * C330) * C104) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C47850 * C124) * C114 +
                   (C113 * C125 + C47850 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C47835 * C47647 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C47850 * C323) * C102 +
                   (C113 * C293 + C47850 * C306) * C114) *
                      C47835 * C47647 * C1143 +
                  ((C113 * C294 + C47850 * C307) * C114 +
                   (C113 * C308 + C47850 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C47835 * C47647 * C1144 -
                  ((C113 * C1154 + C47850 * C1166) * C104 +
                   (C113 * C1148 + C47850 * C1155) * C116 +
                   (C113 * C1156 + C47850 * C1167) * C103 +
                   (C113 * C1149 + C47850 * C1157) * C115 +
                   (C113 * C1158 + C47850 * C1168) * C102 +
                   (C113 * C1150 + C47850 * C1159) * C114) *
                      C47835 * C47647 * C1145 +
                  ((C113 * C1151 + C47850 * C1160) * C114 +
                   (C113 * C1161 + C47850 * C1169) * C102 +
                   (C113 * C1152 + C47850 * C1162) * C115 +
                   (C113 * C1163 + C47850 * C1170) * C103 +
                   (C113 * C1153 + C47850 * C1164) * C116 +
                   (C113 * C1165 + C47850 * C1171) * C104) *
                      C47835 * C47647 * C1146) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47688 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47695 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47647 * C2880) *
              C47606 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47695 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47688 -
           ((C6148 + C6149 + C6150 + C6151) * C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C2880) *
              C47615 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47688 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47695 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47688 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C47695 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C47896 -
            ((C6494 + C6495 + C6502 + C6503) * C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C2880) *
              C2620 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C47688 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47695 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47973 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47969 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47647 * C47959 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47647 * C47937) *
              C2620 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47969 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47973 -
           ((C6148 + C6149 + C6150 + C6151) * C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47959 +
           ((C6151 + C6150 + C6149 + C6148) * C4757 +
            (C5819 * C4759 + C5818 * C4755 +
             (C113 * C1153 + C47850 * C1164) * C4760 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C2512 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47692) *
              C47972 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47692 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C2512 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47692) *
              C47952 +
          (((C5220 + C5221 + C5222 + C5223) * C4757 +
            (C367 * C4759 + C366 * C4755 +
             (C113 * C300 + C47850 * C319) * C4760 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47967 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47956 +
            (((C113 * C483 + C47850 * C496) * C4759 +
              (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
              C550 * C47914) *
                 C4757 +
             (C6010 + C6011 + C5986 + C5987) * C47945) *
                C47930) *
               C2512 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47956 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47967 -
            ((C6014 + C6015 + C6016 + C6017) * C47945 +
             (C5987 + C5986 + C6011 + C6010) * C4757) *
                C47930) *
               C47692) *
              C2620 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47956 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47967 -
            ((C7080 + C7081 + C7082 + C7083) * C47945 +
             (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                 C4757) *
                C47930) *
               C2512 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47967 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47956 +
            ((C7083 + C7082 + C7081 + C7080) * C4757 +
             (C6007 * C4759 + C6006 * C4755 +
              (C113 * C1290 + C47850 * C1307) * C4760 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C47692) *
              C47606 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C2512 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C47615 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C47896 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C2512 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47692) *
              C47972 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47692 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C2512 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47692) *
              C47952 +
          (((C5220 + C5221 + C5222 + C5223) * C4757 +
            (C367 * C4759 + C366 * C4755 +
             (C113 * C300 + C47850 * C319) * C4760 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47973 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47969 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47647 * C47959 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47647 * C47937) *
              C2620 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47969 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47973 -
           ((C6148 + C6149 + C6150 + C6151) * C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47959 +
           ((C6151 + C6150 + C6149 + C6148) * C4757 +
            (C5819 * C4759 + C5818 * C4755 +
             (C113 * C1153 + C47850 * C1164) * C4760 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47688 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47695 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C3274 -
            ((C6494 + C6495 + C6502 + C6503) * C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C2880) *
              C47881 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C47688 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47695 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C4759 +
                     (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
                     C167 * C47914) *
                        C4757 +
                    (C4940 + C4941 + C4912 + C4913) * C47945) *
                       C47730 -
                   ((C5548 + C5549 + C5564 + C5565) * C47945 +
                    (C547 * C47914 + C548 * C4760 +
                     (C113 * C494 + C47850 * C512) * C4755 +
                     (C113 * C482 + C47850 * C495) * C4759) *
                        C4757) *
                       C47737 +
                   (((C113 * C483 + C47850 * C496) * C4759 +
                     (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
                     C550 * C47914) *
                        C4757 +
                    (C6010 + C6011 + C5986 + C5987) * C47945) *
                       C3782) *
                      C47688 +
                  (((C5565 + C5564 + C5549 + C5548) * C4757 +
                    (C6012 + C6013 + C5992 + C5993) * C47945) *
                       C47737 -
                   ((C4914 + C4915 + C4942 + C4943) * C47945 +
                    (C4913 + C4912 + C4941 + C4940) * C4757) *
                       C47730 -
                   ((C6014 + C6015 + C6016 + C6017) * C47945 +
                    (C5987 + C5986 + C6011 + C6010) * C4757) *
                       C3782) *
                      C47695 +
                  (((C4943 + C4942 + C4915 + C4914) * C4757 +
                    (C5822 + C5823 + C5806 + C5807) * C47945) *
                       C47730 -
                   ((C6494 + C6495 + C6502 + C6503) * C47945 +
                    (C5993 + C5992 + C6013 + C6012) * C4757) *
                       C47737 +
                   ((C6017 + C6016 + C6015 + C6014) * C4757 +
                    ((C113 * C5973 + C47850 * C5975) * C4759 +
                     (C113 * C5976 + C47850 * C5979) * C4755 +
                     (C113 * C5974 + C47850 * C5977) * C4760 +
                     (C113 * C5978 + C47850 * C5980) * C47914) *
                        C47945) *
                       C3782) *
                      C2880) *
                 C47601) /
                (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C3274 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47973 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47734 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C3274) *
              C47969 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C3274 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47734) *
              C47959 +
          (((C6503 + C6502 + C6495 + C6494) * C4757 +
            ((C113 * C6485 + C47850 * C6487) * C4759 +
             (C113 * C6488 + C47850 * C6491) * C4755 +
             (C113 * C6486 + C47850 * C6489) * C4760 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C2512 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C3274 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47974 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47962 -
           ((C7358 + C7359 + C7366 + C7367) * C47945 +
            (C2303 * C47914 + C2304 * C4760 +
             (C113 * C2010 + C47850 * C2020) * C4755 +
             (C113 * C2002 + C47850 * C2011) * C4759) *
                C4757) *
               C47943) *
              C2512 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47971 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47974 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C47962 +
           ((C7367 + C7366 + C7359 + C7358) * C4757 +
            ((C113 * C7349 + C47850 * C7351) * C4759 +
             (C113 * C7352 + C47850 * C7355) * C4755 +
             (C113 * C7350 + C47850 * C7353) * C4760 +
             (C113 * C7354 + C47850 * C7356) * C47914) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47730 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47737 +
            (((C113 * C483 + C47850 * C496) * C4759 +
              (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
              C550 * C47914) *
                 C4757 +
             (C6010 + C6011 + C5986 + C5987) * C47945) *
                C3782) *
               C2512 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47737 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47730 -
            ((C6014 + C6015 + C6016 + C6017) * C47945 +
             (C5987 + C5986 + C6011 + C6010) * C4757) *
                C3782) *
               C47692) *
              C47881 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47737 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47730 -
            ((C7080 + C7081 + C7082 + C7083) * C47945 +
             (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                 C4757) *
                C3782) *
               C2512 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47730 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47737 +
            ((C7083 + C7082 + C7081 + C7080) * C4757 +
             (C6007 * C4759 + C6006 * C4755 +
              (C113 * C1290 + C47850 * C1307) * C4760 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C2512 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C3274 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C2512 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C3274 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47973 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47734 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C3274) *
              C47969 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C3274 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47734) *
              C47959 +
          (((C6503 + C6502 + C6495 + C6494) * C4757 +
            ((C113 * C6485 + C47850 * C6487) * C4759 +
             (C113 * C6488 + C47850 * C6491) * C4755 +
             (C113 * C6486 + C47850 * C6489) * C4760 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1416 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1417 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47647 * C1418 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47647 * C47937) *
              C47881 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1417 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1416 -
           ((C6148 + C6149 + C6150 + C6151) * C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C1418 +
           ((C6151 + C6150 + C6149 + C6148) * C4757 +
            (C5819 * C4759 + C5818 * C4755 +
             (C113 * C1153 + C47850 * C1164) * C4760 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47895 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47692) *
              C656 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47692 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47895) *
              C657 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47895 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47692) *
              C658 +
          (((C5220 + C5221 + C5222 + C5223) * C4757 +
            (C367 * C4759 + C366 * C4755 +
             (C113 * C300 + C47850 * C319) * C4760 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C1820 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C1821 +
            (((C113 * C483 + C47850 * C496) * C4759 +
              (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
              C550 * C47914) *
                 C4757 +
             (C6010 + C6011 + C5986 + C5987) * C47945) *
                C47930) *
               C47895 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C1821 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C1820 -
            ((C6014 + C6015 + C6016 + C6017) * C47945 +
             (C5987 + C5986 + C6011 + C6010) * C4757) *
                C47930) *
               C47692) *
              C47881 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C1821 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C1820 -
            ((C7080 + C7081 + C7082 + C7083) * C47945 +
             (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                 C4757) *
                C47930) *
               C47895 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C1820 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C1821 +
            ((C7083 + C7082 + C7081 + C7080) * C4757 +
             (C6007 * C4759 + C6006 * C4755 +
              (C113 * C1290 + C47850 * C1307) * C4760 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47896 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C1416 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47734 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47896) *
              C1417 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47896 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47734) *
              C1418 +
          (((C6503 + C6502 + C6495 + C6494) * C4757 +
            ((C113 * C6485 + C47850 * C6487) * C4759 +
             (C113 * C6488 + C47850 * C6491) * C4755 +
             (C113 * C6486 + C47850 * C6489) * C4760 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             ((C113 * C1287 + C47850 * C1302) * C4759 +
              (C113 * C1301 + C47850 * C1314) * C4755 + C1600 * C4760 +
              C1599 * C47914) *
                 C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C47895 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C1597 * C47914 + C1598 * C4760 + C1599 * C4755 + C1600 * C4759) *
                 C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C47896 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C2284 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C2286 -
           ((C7358 + C7359 + C7366 + C7367) * C47945 +
            (C2303 * C47914 + C2304 * C4760 +
             (C113 * C2010 + C47850 * C2020) * C4755 +
             (C113 * C2002 + C47850 * C2011) * C4759) *
                C4757) *
               C47943) *
              C47895 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C2285 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C2284 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C2286 +
           ((C7367 + C7366 + C7359 + C7358) * C4757 +
            ((C113 * C7349 + C47850 * C7351) * C4759 +
             (C113 * C7352 + C47850 * C7355) * C4755 +
             (C113 * C7350 + C47850 * C7353) * C4760 +
             (C113 * C7354 + C47850 * C7356) * C47914) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47850 * C124) * C4759 +
                (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
                C167 * C47914) *
                   C4757 +
               ((C113 * C293 + C47850 * C306) * C4759 +
                (C113 * C305 + C47850 * C323) * C4755 + C359 * C4760 +
                C358 * C47914) *
                   C47945) *
                  C47647 * C47629 * C108 -
              ((C356 * C47914 + C357 * C4760 + C358 * C4755 + C359 * C4759) *
                   C47945 +
               (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                   C4757) *
                  C47647 * C47629 * C109 +
              ((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                   C4757 +
               (C357 * C4759 + C356 * C4755 + C364 * C4760 + C365 * C47914) *
                   C47945) *
                  C47647 * C47629 * C110 -
              ((C669 * C47914 + C670 * C4760 + C365 * C4755 + C364 * C4759) *
                   C47945 +
               (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                   C4757) *
                  C47647 * C47629 * C111 +
              ((C172 * C4759 + C173 * C4755 + C175 * C4760 + C174 * C47914) *
                   C4757 +
               (C670 * C4759 + C669 * C4755 +
                (C113 * C660 + C47850 * C661) * C4760 +
                (C113 * C662 + C47850 * C663) * C47914) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47850 * C124) * C4759 +
                 (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
                 C167 * C47914) *
                    C4757 +
                (C4940 + C4941 + C4912 + C4913) * C47945) *
                   C47647 * C47966 -
               ((C4914 + C4915 + C4942 + C4943) * C47945 +
                (C4913 + C4912 + C4941 + C4940) * C4757) *
                   C47647 * C47954 +
               ((C4943 + C4942 + C4915 + C4914) * C4757 +
                ((C113 * C1150 + C47850 * C1159) * C4759 +
                 (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
                 C1437 * C47914) *
                    C47945) *
                   C47647 * C47927) *
                  C288 +
              (((C4920 + C4921 + C4922 + C4923) * C4757 +
                (C4924 + C4925 + C4926 + C4927) * C47945) *
                   C47647 * C47954 -
               ((C4923 + C4922 + C4921 + C4920) * C47945 +
                (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                    C4757) *
                   C47647 * C47966 -
               ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 +
                 C1438 * C4759) *
                    C47945 +
                (C4927 + C4926 + C4925 + C4924) * C4757) *
                   C47647 * C47927) *
                  C289 +
              (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                    C4757 +
                (C4928 + C4929 + C4930 + C4931) * C47945) *
                   C47647 * C47966 -
               ((C4932 + C4933 + C4934 + C4935) * C47945 +
                (C4931 + C4930 + C4929 + C4928) * C4757) *
                   C47647 * C47954 +
               ((C4935 + C4934 + C4933 + C4932) * C4757 +
                (C1436 * C4759 + C1435 * C4755 +
                 (C113 * C1422 + C47850 * C1423) * C4760 +
                 (C113 * C1424 + C47850 * C1425) * C47914) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47967 -
           ((C960 * C47914 + C959 * C4760 +
             (C113 * C932 + C47850 * C941) * C4755 +
             (C113 * C926 + C47850 * C931) * C4759) *
                C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            ((C113 * C1284 + C47850 * C1296) * C4759 +
             (C113 * C1295 + C47850 * C1311) * C4755 + C2186 * C4760 +
             C2185 * C47914) *
                C47945) *
               C47930) *
              C47629 * C288 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C959 * C4759 + C960 * C4755 + C961 * C4760 + C962 * C47914) *
                C47945) *
               C47956 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47967 -
           ((C2183 * C47914 + C2184 * C4760 + C2185 * C4755 + C2186 * C4759) *
                C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C47930) *
              C47629 * C289 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47967 -
           ((C963 * C47914 + C964 * C4760 + C962 * C4755 + C961 * C4759) *
                C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47956 +
           ((C551 * C4759 + C552 * C4755 + C556 * C4760 + C555 * C47914) *
                C4757 +
            (C2184 * C4759 + C2183 * C4755 +
             (C113 * C2170 + C47850 * C2171) * C4760 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1074 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1075 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1075 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C1074 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C1075 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           (C4940 + C4941 + C4912 + C4913) * C47945) *
              C47647 * C1142 -
          ((C4914 + C4915 + C4942 + C4943) * C47945 +
           (C4913 + C4912 + C4941 + C4940) * C4757) *
              C47647 * C1143 +
          ((C4943 + C4942 + C4915 + C4914) * C4757 +
           (C5822 + C5823 + C5806 + C5807) * C47945) *
              C47647 * C1144 -
          ((C5824 + C5825 + C5826 + C5827) * C47945 +
           (C5807 + C5806 + C5823 + C5822) * C4757) *
              C47647 * C1145 +
          ((C5827 + C5826 + C5825 + C5824) * C4757 +
           ((C113 * C5793 + C47850 * C5795) * C4759 +
            (C113 * C5796 + C47850 * C5799) * C4755 +
            (C113 * C5794 + C47850 * C5797) * C4760 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47967 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C1074 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47956 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47967 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C47930) *
              C1075 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47967 -
           (((C113 * C1704 + C47850 * C1708) * C47914 +
             (C113 * C1699 + C47850 * C1703) * C4760 +
             (C113 * C1702 + C47850 * C1707) * C4755 +
             (C113 * C1698 + C47850 * C1701) * C4759) *
                C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47956 +
           ((C6017 + C6016 + C6015 + C6014) * C4757 +
            ((C113 * C5973 + C47850 * C5975) * C4759 +
             (C113 * C5976 + C47850 * C5979) * C4755 +
             (C113 * C5974 + C47850 * C5977) * C4760 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C1820 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C1821 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C1820 -
           ((C2183 * C47914 + C2184 * C4760 + C2185 * C4755 + C2186 * C4759) *
                C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C1820 -
           ((C5558 + C5559 + C5560 + C5561) * C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C1821 +
           ((C551 * C4759 + C552 * C4755 + C556 * C4760 + C555 * C47914) *
                C4757 +
            (C2184 * C4759 + C2183 * C4755 +
             (C113 * C2170 + C47850 * C2171) * C4760 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C1820 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C47966 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C1821 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C1820 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C47930) *
              C47954 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C1820 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C1821 +
           ((C6017 + C6016 + C6015 + C6014) * C4757 +
            ((C113 * C5973 + C47850 * C5975) * C4759 +
             (C113 * C5976 + C47850 * C5979) * C4755 +
             (C113 * C5974 + C47850 * C5977) * C4760 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           (C4940 + C4941 + C4912 + C4913) * C47945) *
              C1995 -
          ((C5548 + C5549 + C5564 + C5565) * C47945 +
           (C547 * C47914 + C548 * C4760 +
            (C113 * C494 + C47850 * C512) * C4755 +
            (C113 * C482 + C47850 * C495) * C4759) *
               C4757) *
              C1996 +
          (((C113 * C483 + C47850 * C496) * C4759 +
            (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
            C550 * C47914) *
               C4757 +
           (C6010 + C6011 + C5986 + C5987) * C47945) *
              C1997 -
          (((C113 * C2408 + C47850 * C2412) * C47914 +
            (C113 * C2403 + C47850 * C2407) * C4760 +
            (C113 * C2406 + C47850 * C2411) * C4755 +
            (C113 * C2402 + C47850 * C2405) * C4759) *
               C47945 +
           (C2303 * C47914 + C2304 * C4760 +
            (C113 * C2010 + C47850 * C2020) * C4755 +
            (C113 * C2002 + C47850 * C2011) * C4759) *
               C4757) *
              C1998 +
          (((C113 * C2003 + C47850 * C2012) * C4759 +
            (C113 * C2013 + C47850 * C2021) * C4755 +
            (C113 * C2004 + C47850 * C2014) * C4760 +
            (C113 * C2015 + C47850 * C2022) * C47914) *
               C4757 +
           ((C113 * C6877 + C47850 * C6879) * C4759 +
            (C113 * C6880 + C47850 * C6883) * C4755 +
            (C113 * C6878 + C47850 * C6881) * C4760 +
            (C113 * C6882 + C47850 * C6884) * C47914) *
               C47945) *
              C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C1074 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C1075 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C47896 -
            ((C6354 * C47914 + C6355 * C4760 +
              (C113 * C1702 + C47850 * C1707) * C4755 +
              (C113 * C1698 + C47850 * C1701) * C4759) *
                 C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C1074 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C1075 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47896 -
           ((C960 * C47914 + C959 * C4760 +
             (C113 * C932 + C47850 * C941) * C4755 +
             (C113 * C926 + C47850 * C931) * C4759) *
                C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47629 * C656 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C959 * C4759 + C960 * C4755 + C961 * C4760 + C962 * C47914) *
                C47945) *
               C47734 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47896) *
              C47629 * C657 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47896 -
           ((C963 * C47914 + C964 * C4760 + C962 * C4755 + C961 * C4759) *
                C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47734) *
              C47629 * C658 +
          (((C553 * C4759 + C554 * C4755 + C780 * C4760 + C779 * C47914) *
                C4757 +
            (C964 * C4759 + C963 * C4755 +
             (C113 * C930 + C47850 * C939) * C4760 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C2284 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C2286 -
           ((C7218 * C47914 + C7219 * C4760 +
             (C113 * C2406 + C47850 * C2411) * C4755 +
             (C113 * C2402 + C47850 * C2405) * C4759) *
                C47945 +
            (C2303 * C47914 + C2304 * C4760 +
             (C113 * C2010 + C47850 * C2020) * C4755 +
             (C113 * C2002 + C47850 * C2011) * C4759) *
                C4757) *
               C47943) *
              C47629 * C47881 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C2285 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C2284 -
           ((C7080 + C7081 + C7082 + C7083) * C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C2286 +
           ((C2304 * C4759 + C2303 * C4755 + C2302 * C4760 + C2301 * C47914) *
                C4757 +
            (C7219 * C4759 + C7218 * C4755 +
             (C113 * C2404 + C47850 * C2409) * C4760 +
             (C113 * C2410 + C47850 * C2413) * C47914) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47966 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47954 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47954 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C289 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47966 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47954 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           ((C113 * C293 + C47850 * C306) * C4759 +
            (C113 * C305 + C47850 * C323) * C4755 + C359 * C4760 +
            C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C4760 + C358 * C4755 + C359 * C4759) *
               C47945 +
           (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
               C4757) *
              C47647 * C47629 * C109 +
          ((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
               C4757 +
           (C357 * C4759 + C356 * C4755 + C364 * C4760 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C4760 + C365 * C4755 + C364 * C4759) *
               C47945 +
           (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
               C4757) *
              C47647 * C47629 * C111 +
          ((C172 * C4759 + C173 * C4755 + C175 * C4760 + C174 * C47914) *
               C4757 +
           (C670 * C4759 + C669 * C4755 +
            (C113 * C660 + C47850 * C661) * C4760 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1074 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1075 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1075 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C1074 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C1075 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           (C4940 + C4941 + C4912 + C4913) * C47945) *
              C47647 * C1142 -
          ((C4914 + C4915 + C4942 + C4943) * C47945 +
           (C4913 + C4912 + C4941 + C4940) * C4757) *
              C47647 * C1143 +
          ((C4943 + C4942 + C4915 + C4914) * C4757 +
           (C5822 + C5823 + C5806 + C5807) * C47945) *
              C47647 * C1144 -
          ((C5824 + C5825 + C5826 + C5827) * C47945 +
           (C5807 + C5806 + C5823 + C5822) * C4757) *
              C47647 * C1145 +
          ((C5827 + C5826 + C5825 + C5824) * C4757 +
           ((C113 * C5793 + C47850 * C5795) * C4759 +
            (C113 * C5796 + C47850 * C5799) * C4755 +
            (C113 * C5794 + C47850 * C5797) * C4760 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C1820 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C1821 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C1820 -
           ((C2183 * C47914 + C2184 * C4760 + C2185 * C4755 + C2186 * C4759) *
                C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C1820 -
           ((C5558 + C5559 + C5560 + C5561) * C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C1821 +
           ((C551 * C4759 + C552 * C4755 + C556 * C4760 + C555 * C47914) *
                C4757 +
            (C2184 * C4759 + C2183 * C4755 +
             (C113 * C2170 + C47850 * C2171) * C4760 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C1820 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C47966 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C1821 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C1820 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C47930) *
              C47954 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C1820 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C1821 +
           ((C6017 + C6016 + C6015 + C6014) * C4757 +
            ((C113 * C5973 + C47850 * C5975) * C4759 +
             (C113 * C5976 + C47850 * C5979) * C4755 +
             (C113 * C5974 + C47850 * C5977) * C4760 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47692) *
              C47606 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C47895 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C47615 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C3274 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47730 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47737 +
            (((C113 * C483 + C47850 * C496) * C4759 +
              (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
              C550 * C47914) *
                 C4757 +
             (C6010 + C6011 + C5986 + C5987) * C47945) *
                C3782) *
               C47895 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47737 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47730 -
            ((C6014 + C6015 + C6016 + C6017) * C47945 +
             (C5987 + C5986 + C6011 + C6010) * C4757) *
                C3782) *
               C47692) *
              C2620 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47737 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47730 -
            ((C7080 + C7081 + C7082 + C7083) * C47945 +
             (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                 C4757) *
                C3782) *
               C47895 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47730 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47737 +
            ((C7083 + C7082 + C7081 + C7080) * C4757 +
             (C6007 * C4759 + C6006 * C4755 +
              (C113 * C1290 + C47850 * C1307) * C4760 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47966 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47954 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C3274 -
            ((C6494 + C6495 + C6502 + C6503) * C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C47966 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47954 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C3274 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C47734 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C3274 -
           ((C5558 + C5559 + C5560 + C5561) * C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C4759 + C554 * C4755 + C780 * C4760 + C779 * C47914) *
                C4757 +
            (C964 * C4759 + C963 * C4755 +
             (C113 * C930 + C47850 * C939) * C4760 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47974 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47962 -
           ((C7358 + C7359 + C7366 + C7367) * C47945 +
            (C2303 * C47914 + C2304 * C4760 +
             (C113 * C2010 + C47850 * C2020) * C4755 +
             (C113 * C2002 + C47850 * C2011) * C4759) *
                C4757) *
               C47943) *
              C47629 * C2620 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C47971 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47974 -
           ((C7080 + C7081 + C7082 + C7083) * C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C47962 +
           ((C2304 * C4759 + C2303 * C4755 + C2302 * C4760 + C2301 * C47914) *
                C4757 +
            (C7219 * C4759 + C7218 * C4755 +
             (C113 * C2404 + C47850 * C2409) * C4760 +
             (C113 * C2410 + C47850 * C2413) * C47914) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47730 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47737 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C3782) *
              C47629 * C47606 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C47737 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47730 -
           ((C7080 + C7081 + C7082 + C7083) * C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C3782) *
              C47629 * C47615 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47730 -
           ((C5558 + C5559 + C5560 + C5561) * C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47737 +
           ((C551 * C4759 + C552 * C4755 + C556 * C4760 + C555 * C47914) *
                C4757 +
            (C2184 * C4759 + C2183 * C4755 +
             (C113 * C2170 + C47850 * C2171) * C4760 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C3274 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C5554 + C5555 + C5556 + C5557) * C47945) *
               C47734 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C3274 -
           ((C5558 + C5559 + C5560 + C5561) * C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C4759 + C554 * C4755 + C780 * C4760 + C779 * C47914) *
                C4757 +
            (C964 * C4759 + C963 * C4755 +
             (C113 * C930 + C47850 * C939) * C4760 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C3274 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47966 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C3274) *
               C47954 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C3274 -
            ((C6494 + C6495 + C6502 + C6503) * C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C3274) *
               C47966 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C3274 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47954 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47895 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47692) *
              C656 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47692 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47895) *
              C657 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47895 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47692) *
              C658 +
          (((C5220 + C5221 + C5222 + C5223) * C4757 +
            (C367 * C4759 + C366 * C4755 +
             (C113 * C300 + C47850 * C319) * C4760 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1416 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1417 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47647 * C1418 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47647 * C47937) *
              C47881 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1417 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1416 -
           ((C6148 + C6149 + C6150 + C6151) * C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C1418 +
           ((C6151 + C6150 + C6149 + C6148) * C4757 +
            (C5819 * C4759 + C5818 * C4755 +
             (C113 * C1153 + C47850 * C1164) * C4760 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             ((C113 * C1287 + C47850 * C1302) * C4759 +
              (C113 * C1301 + C47850 * C1314) * C4755 + C1600 * C4760 +
              C1599 * C47914) *
                 C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C47895 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C1597 * C47914 + C1598 * C4760 + C1599 * C4755 + C1600 * C4759) *
                 C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                 C4757 +
             (C4928 + C4929 + C4930 + C4931) * C47945) *
                C47896 -
            ((C5558 + C5559 + C5560 + C5561) * C47945 +
             (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                 C4757) *
                C47734) *
               C47895 +
           (((C5561 + C5560 + C5559 + C5558) * C4757 +
             (C1598 * C4759 + C1597 * C4755 +
              (C113 * C1584 + C47850 * C1585) * C4760 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C4932 + C4933 + C4934 + C4935) * C47945 +
             (C4931 + C4930 + C4929 + C4928) * C4757) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47896 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C1416 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47734 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47896) *
              C1417 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47896 -
           ((C6494 + C6495 + C6502 + C6503) * C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47734) *
              C1418 +
          (((C6503 + C6502 + C6495 + C6494) * C4757 +
            ((C113 * C6485 + C47850 * C6487) * C4759 +
             (C113 * C6488 + C47850 * C6491) * C4755 +
             (C113 * C6486 + C47850 * C6489) * C4760 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C5824 + C5825 + C5826 + C5827) * C47945 +
            (C5807 + C5806 + C5823 + C5822) * C4757) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47966 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47954 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47954 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C289 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47966 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47954 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           ((C113 * C293 + C47850 * C306) * C4759 +
            (C113 * C305 + C47850 * C323) * C4755 + C359 * C4760 +
            C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C4760 + C358 * C4755 + C359 * C4759) *
               C47945 +
           (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
               C4757) *
              C47647 * C47629 * C109 +
          ((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
               C4757 +
           (C357 * C4759 + C356 * C4755 + C364 * C4760 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C4760 + C365 * C4755 + C364 * C4759) *
               C47945 +
           (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
               C4757) *
              C47647 * C47629 * C111 +
          ((C172 * C4759 + C173 * C4755 + C175 * C4760 + C174 * C47914) *
               C4757 +
           (C670 * C4759 + C669 * C4755 +
            (C113 * C660 + C47850 * C661) * C4760 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47967 -
           ((C960 * C47914 + C959 * C4760 +
             (C113 * C932 + C47850 * C941) * C4755 +
             (C113 * C926 + C47850 * C931) * C4759) *
                C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            ((C113 * C1284 + C47850 * C1296) * C4759 +
             (C113 * C1295 + C47850 * C1311) * C4755 + C2186 * C4760 +
             C2185 * C47914) *
                C47945) *
               C47930) *
              C47629 * C288 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C959 * C4759 + C960 * C4755 + C961 * C4760 + C962 * C47914) *
                C47945) *
               C47956 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47967 -
           ((C2183 * C47914 + C2184 * C4760 + C2185 * C4755 + C2186 * C4759) *
                C47945 +
            (C552 * C47914 + C551 * C4760 + C550 * C4755 + C549 * C4759) *
                C4757) *
               C47930) *
              C47629 * C289 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47967 -
           ((C963 * C47914 + C964 * C4760 + C962 * C4755 + C961 * C4759) *
                C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47956 +
           ((C551 * C4759 + C552 * C4755 + C556 * C4760 + C555 * C47914) *
                C4757 +
            (C2184 * C4759 + C2183 * C4755 +
             (C113 * C2170 + C47850 * C2171) * C4760 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1074 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1075 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1075 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C1074 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C1075 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           (C4940 + C4941 + C4912 + C4913) * C47945) *
              C47647 * C1142 -
          ((C4914 + C4915 + C4942 + C4943) * C47945 +
           (C4913 + C4912 + C4941 + C4940) * C4757) *
              C47647 * C1143 +
          ((C4943 + C4942 + C4915 + C4914) * C4757 +
           (C5822 + C5823 + C5806 + C5807) * C47945) *
              C47647 * C1144 -
          ((C5824 + C5825 + C5826 + C5827) * C47945 +
           (C5807 + C5806 + C5823 + C5822) * C4757) *
              C47647 * C1145 +
          ((C5827 + C5826 + C5825 + C5824) * C4757 +
           ((C113 * C5793 + C47850 * C5795) * C4759 +
            (C113 * C5796 + C47850 * C5799) * C4755 +
            (C113 * C5794 + C47850 * C5797) * C4760 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47967 -
           ((C5548 + C5549 + C5564 + C5565) * C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C4759 +
             (C113 * C497 + C47850 * C513) * C4755 + C549 * C4760 +
             C550 * C47914) *
                C4757 +
            (C6010 + C6011 + C5986 + C5987) * C47945) *
               C47930) *
              C1074 +
          (((C5565 + C5564 + C5549 + C5548) * C4757 +
            (C6012 + C6013 + C5992 + C5993) * C47945) *
               C47956 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47967 -
           ((C6014 + C6015 + C6016 + C6017) * C47945 +
            (C5987 + C5986 + C6011 + C6010) * C4757) *
               C47930) *
              C1075 +
          (((C4943 + C4942 + C4915 + C4914) * C4757 +
            (C5822 + C5823 + C5806 + C5807) * C47945) *
               C47967 -
           (((C113 * C1704 + C47850 * C1708) * C47914 +
             (C113 * C1699 + C47850 * C1703) * C4760 +
             (C113 * C1702 + C47850 * C1707) * C4755 +
             (C113 * C1698 + C47850 * C1701) * C4759) *
                C47945 +
            (C5993 + C5992 + C6013 + C6012) * C4757) *
               C47956 +
           ((C6017 + C6016 + C6015 + C6014) * C4757 +
            ((C113 * C5973 + C47850 * C5975) * C4759 +
             (C113 * C5976 + C47850 * C5979) * C4755 +
             (C113 * C5974 + C47850 * C5977) * C4760 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47896 -
           ((C960 * C47914 + C959 * C4760 +
             (C113 * C932 + C47850 * C941) * C4755 +
             (C113 * C926 + C47850 * C931) * C4759) *
                C47945 +
            (C547 * C47914 + C548 * C4760 +
             (C113 * C494 + C47850 * C512) * C4755 +
             (C113 * C482 + C47850 * C495) * C4759) *
                C4757) *
               C47734) *
              C47629 * C656 +
          (((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                C4757 +
            (C959 * C4759 + C960 * C4755 + C961 * C4760 + C962 * C47914) *
                C47945) *
               C47734 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47896) *
              C47629 * C657 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47896 -
           ((C963 * C47914 + C964 * C4760 + C962 * C4755 + C961 * C4759) *
                C47945 +
            (C554 * C47914 + C553 * C4760 + C545 * C4755 + C546 * C4759) *
                C4757) *
               C47734) *
              C47629 * C658 +
          (((C553 * C4759 + C554 * C4755 + C780 * C4760 + C779 * C47914) *
                C4757 +
            (C964 * C4759 + C963 * C4755 +
             (C113 * C930 + C47850 * C939) * C4760 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C5223 + C5222 + C5221 + C5220) * C47945 +
            (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
                C4757) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C4759 +
              (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
              C167 * C47914) *
                 C4757 +
             (C4940 + C4941 + C4912 + C4913) * C47945) *
                C47896 -
            ((C5548 + C5549 + C5564 + C5565) * C47945 +
             (C547 * C47914 + C548 * C4760 +
              (C113 * C494 + C47850 * C512) * C4755 +
              (C113 * C482 + C47850 * C495) * C4759) *
                 C4757) *
                C47734) *
               C1074 +
           (((C5565 + C5564 + C5549 + C5548) * C4757 +
             (C6012 + C6013 + C5992 + C5993) * C47945) *
                C47734 -
            ((C4914 + C4915 + C4942 + C4943) * C47945 +
             (C4913 + C4912 + C4941 + C4940) * C4757) *
                C47896) *
               C1075 +
           (((C4943 + C4942 + C4915 + C4914) * C4757 +
             (C5822 + C5823 + C5806 + C5807) * C47945) *
                C47896 -
            ((C6354 * C47914 + C6355 * C4760 +
              (C113 * C1702 + C47850 * C1707) * C4755 +
              (C113 * C1698 + C47850 * C1701) * C4759) *
                 C47945 +
             (C5993 + C5992 + C6013 + C6012) * C4757) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C4759 + C547 * C4755 + C546 * C4760 + C545 * C47914) *
                 C4757 +
             (C5554 + C5555 + C5556 + C5557) * C47945) *
                C47734 -
            ((C4923 + C4922 + C4921 + C4920) * C47945 +
             (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                 C4757) *
                C47896) *
               C1074 +
           (((C4920 + C4921 + C4922 + C4923) * C4757 +
             (C4924 + C4925 + C4926 + C4927) * C47945) *
                C47896 -
            ((C6350 + C6351 + C6352 + C6353) * C47945 +
             (C5557 + C5556 + C5555 + C5554) * C4757) *
                C47734) *
               C1075 +
           (((C6353 + C6352 + C6351 + C6350) * C4757 +
             (C6355 * C4759 + C6354 * C4755 +
              (C113 * C1700 + C47850 * C1705) * C4760 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C6148 + C6149 + C6150 + C6151) * C47945 +
             (C4927 + C4926 + C4925 + C4924) * C4757) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           ((C113 * C293 + C47850 * C306) * C4759 +
            (C113 * C305 + C47850 * C323) * C4755 + C359 * C4760 +
            C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C4760 + C358 * C4755 + C359 * C4759) *
               C47945 +
           (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
               C4757) *
              C47647 * C47629 * C109 +
          ((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
               C4757 +
           (C357 * C4759 + C356 * C4755 + C364 * C4760 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C4760 + C365 * C4755 + C364 * C4759) *
               C47945 +
           (C173 * C47914 + C172 * C4760 + C170 * C4755 + C171 * C4759) *
               C4757) *
              C47647 * C47629 * C111 +
          ((C172 * C4759 + C173 * C4755 + C175 * C4760 + C174 * C47914) *
               C4757 +
           (C670 * C4759 + C669 * C4755 +
            (C113 * C660 + C47850 * C661) * C4760 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C47966 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C47954 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C47954 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C289 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C47966 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C47954 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C4759 +
             (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
             C167 * C47914) *
                C4757 +
            (C4940 + C4941 + C4912 + C4913) * C47945) *
               C47647 * C1074 -
           ((C4914 + C4915 + C4942 + C4943) * C47945 +
            (C4913 + C4912 + C4941 + C4940) * C4757) *
               C47647 * C1075 +
           ((C4943 + C4942 + C4915 + C4914) * C4757 +
            ((C113 * C1150 + C47850 * C1159) * C4759 +
             (C113 * C1158 + C47850 * C1168) * C4755 + C1438 * C4760 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C4920 + C4921 + C4922 + C4923) * C4757 +
            (C4924 + C4925 + C4926 + C4927) * C47945) *
               C47647 * C1075 -
           ((C4923 + C4922 + C4921 + C4920) * C47945 +
            (C169 * C47914 + C168 * C4760 + C167 * C4755 + C166 * C4759) *
                C4757) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C4760 + C1437 * C4755 + C1438 * C4759) *
                C47945 +
            (C4927 + C4926 + C4925 + C4924) * C4757) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C4759 + C169 * C4755 + C171 * C4760 + C170 * C47914) *
                C4757 +
            (C4928 + C4929 + C4930 + C4931) * C47945) *
               C47647 * C1074 -
           ((C4932 + C4933 + C4934 + C4935) * C47945 +
            (C4931 + C4930 + C4929 + C4928) * C4757) *
               C47647 * C1075 +
           ((C4935 + C4934 + C4933 + C4932) * C4757 +
            (C1436 * C4759 + C1435 * C4755 +
             (C113 * C1422 + C47850 * C1423) * C4760 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C4759 +
            (C113 * C125 + C47850 * C138) * C4755 + C166 * C4760 +
            C167 * C47914) *
               C4757 +
           (C4940 + C4941 + C4912 + C4913) * C47945) *
              C47647 * C1142 -
          ((C4914 + C4915 + C4942 + C4943) * C47945 +
           (C4913 + C4912 + C4941 + C4940) * C4757) *
              C47647 * C1143 +
          ((C4943 + C4942 + C4915 + C4914) * C4757 +
           (C5822 + C5823 + C5806 + C5807) * C47945) *
              C47647 * C1144 -
          ((C5824 + C5825 + C5826 + C5827) * C47945 +
           (C5807 + C5806 + C5823 + C5822) * C4757) *
              C47647 * C1145 +
          ((C5827 + C5826 + C5825 + C5824) * C4757 +
           ((C113 * C5793 + C47850 * C5795) * C4759 +
            (C113 * C5796 + C47850 * C5799) * C4755 +
            (C113 * C5794 + C47850 * C5797) * C4760 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47688 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47695 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C2880) *
              C47606 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47695 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47688 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C2880) *
              C47615 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47688 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47695 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47688 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C47695 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C47896 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C2880) *
              C2620 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C47688 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47695 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47973 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47969 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47959 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47647 * C47937) *
              C2620 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47969 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47973 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47959 +
           ((C11871 + C11870) * C4759 + (C11869 + C11868) * C4755 +
            (C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
             C47947 * C1705) *
                C4760 +
            (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C2512 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47692 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C2512) *
              C47965 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C2512 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C10995 + C10994) * C4759 + (C10993 + C10992) * C4755 +
            (C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C4760 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47967 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47956 +
            ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C4759 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C4755 +
             (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
                C47835 * C47930) *
               C2512 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47956 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47967 -
            ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
             (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
              C10413 * C1311) *
                 C4755 +
             (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
              C10413 * C1296) *
                 C4759) *
                C47835 * C47930) *
               C47692) *
              C2620 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47956 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47967 -
            ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
             (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
                C47835 * C47930) *
               C2512 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47967 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47956 +
            ((C12795 + C12794) * C4759 + (C12793 + C12792) * C4755 +
             (C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C4760 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C2512 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C47692) *
              C47606 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C2512 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C47896 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C2512 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C2512 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47692 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C2512) *
              C47965 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C2512 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C10995 + C10994) * C4759 + (C10993 + C10992) * C4755 +
            (C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C4760 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47973 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47969 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47959 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47647 * C47937) *
              C2620 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47969 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47973 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47959 +
           ((C11871 + C11870) * C4759 + (C11869 + C11868) * C4755 +
            (C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
             C47947 * C1705) *
                C4760 +
            (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47688 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47695 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C3274 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C2880) *
              C47881 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C47688 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47695 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47730 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47737 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C3782) *
              C47688 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47737 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47730 -
           ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C3782) *
              C47695 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47730 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47737 +
           ((C10415 * C1288 + C10413 * C1303 + C10416 * C7349 +
             C47947 * C7351) *
                C4759 +
            (C10415 * C1304 + C10413 * C1315 + C10416 * C7352 +
             C47947 * C7355) *
                C4755 +
            (C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
             C47947 * C7353) *
                C4760 +
            (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C3782) *
              C2880) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C3274 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47973 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47734 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C3274) *
              C47969 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C3274 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47734) *
              C47959 +
          (((C10415 * C1698 + C10413 * C1701 + C10416 * C5973 +
             C47947 * C5975) *
                C4759 +
            (C10415 * C1702 + C10413 * C1707 + C10416 * C5976 +
             C47947 * C5979) *
                C4755 +
            (C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
             C47947 * C5977) *
                C4760 +
            (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C2512 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47692) *
              C47963 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C2512 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C3274 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C2512 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47974 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47971 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47962 -
           ((C12934 + C12935) * C47914 + (C12936 + C12937) * C4760 +
            (C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
             C10413 * C2020) *
                C4755 +
            (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
             C10413 * C2011) *
                C4759) *
               C47835 * C47943) *
              C2512 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47971 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47974 -
           ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C47962 +
           ((C10415 * C2402 + C10413 * C2405 + C10416 * C6877 +
             C47947 * C6879) *
                C4759 +
            (C10415 * C2406 + C10413 * C2411 + C10416 * C6880 +
             C47947 * C6883) *
                C4755 +
            (C10415 * C2403 + C10413 * C2407 + C10416 * C6878 +
             C47947 * C6881) *
                C4760 +
            (C10415 * C2408 + C10413 * C2412 + C10416 * C6882 +
             C47947 * C6884) *
                C47914) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47730 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47737 +
            ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C4759 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C4755 +
             (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
                C47835 * C3782) *
               C2512 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47737 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47730 -
            ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
             (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
              C10413 * C1311) *
                 C4755 +
             (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
              C10413 * C1296) *
                 C4759) *
                C47835 * C3782) *
               C47692) *
              C47881 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47737 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47730 -
            ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
             (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
                C47835 * C3782) *
               C2512 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47730 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47737 +
            ((C12795 + C12794) * C4759 + (C12793 + C12792) * C4755 +
             (C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C4760 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C2512 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47692) *
              C47963 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C2512 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C3274 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C2512 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C3274 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47973 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47734 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C3274) *
              C47969 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C3274 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47734) *
              C47959 +
          (((C10415 * C1698 + C10413 * C1701 + C10416 * C5973 +
             C47947 * C5975) *
                C4759 +
            (C10415 * C1702 + C10413 * C1707 + C10416 * C5976 +
             C47947 * C5979) *
                C4755 +
            (C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
             C47947 * C5977) *
                C4760 +
            (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1416 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1417 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C1418 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1417 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1416 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C1418 +
           ((C11871 + C11870) * C4759 + (C11869 + C11868) * C4755 +
            (C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
             C47947 * C1705) *
                C4760 +
            (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47895 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47692) *
              C656 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47692 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47895) *
              C657 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47895 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47692) *
              C658 +
          (((C10995 + C10994) * C4759 + (C10993 + C10992) * C4755 +
            (C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C4760 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C1820 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C1821 +
            ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C4759 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C4755 +
             (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
                C47835 * C47930) *
               C47895 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C1821 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C1820 -
            ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
             (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
              C10413 * C1311) *
                 C4755 +
             (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
              C10413 * C1296) *
                 C4759) *
                C47835 * C47930) *
               C47692) *
              C47881 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C1821 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C1820 -
            ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
             (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
                C47835 * C47930) *
               C47895 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C1820 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C1821 +
            ((C12795 + C12794) * C4759 + (C12793 + C12792) * C4755 +
             (C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C4760 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47896 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C1416 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47734 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47896) *
              C1417 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47896 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47734) *
              C1418 +
          (((C10415 * C1698 + C10413 * C1701 + C10416 * C5973 +
             C47947 * C5975) *
                C4759 +
            (C10415 * C1702 + C10413 * C1707 + C10416 * C5976 +
             C47947 * C5979) *
                C4755 +
            (C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
             C47947 * C5977) *
                C4760 +
            (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47895 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C47692) *
              C288 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C47895 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C289 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C47896 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C47895 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C2284 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C2285 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C2286 -
           ((C12934 + C12935) * C47914 + (C12936 + C12937) * C4760 +
            (C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
             C10413 * C2020) *
                C4755 +
            (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
             C10413 * C2011) *
                C4759) *
               C47835 * C47943) *
              C47895 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C2285 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C2284 -
           ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C2286 +
           ((C10415 * C2402 + C10413 * C2405 + C10416 * C6877 +
             C47947 * C6879) *
                C4759 +
            (C10415 * C2406 + C10413 * C2411 + C10416 * C6880 +
             C47947 * C6883) *
                C4755 +
            (C10415 * C2403 + C10413 * C2407 + C10416 * C6878 +
             C47947 * C6881) *
                C4760 +
            (C10415 * C2408 + C10413 * C2412 + C10416 * C6882 +
             C47947 * C6884) *
                C47914) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                   C4759 +
               (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                   C4755 +
               (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                  C47835 * C47647 * C47629 * C108 -
              ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
               (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                  C47835 * C47647 * C47629 * C109 +
              ((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
               (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                  C47835 * C47647 * C47629 * C110 -
              ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
               (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
                  C47835 * C47647 * C47629 * C111 +
              ((C10465 + C10464) * C4759 + (C10463 + C10462) * C4755 +
               (C10415 * C122 + C10413 * C135 + C10416 * C770 + C47947 * C771) *
                   C4760 +
               (C10415 * C134 + C10413 * C143 + C10416 * C772 + C47947 * C773) *
                   C47914) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10415 * C117 + C10413 * C124 + C10416 * C482 +
                 C47947 * C495) *
                    C4759 +
                (C10415 * C125 + C10413 * C138 + C10416 * C494 +
                 C47947 * C512) *
                    C4755 +
                (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                   C47835 * C47647 * C47966 -
               ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
                (C10416 * C932 + C47947 * C941 + C10415 * C305 +
                 C10413 * C323) *
                    C4755 +
                (C10416 * C926 + C47947 * C931 + C10415 * C293 +
                 C10413 * C306) *
                    C4759) *
                   C47835 * C47647 * C47954 +
               ((C10415 * C294 + C10413 * C307 + C10416 * C1287 +
                 C47947 * C1302) *
                    C4759 +
                (C10415 * C308 + C10413 * C324 + C10416 * C1301 +
                 C47947 * C1314) *
                    C4755 +
                (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                   C47835 * C47647 * C47927) *
                  C288 +
              (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
                (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                   C47835 * C47647 * C47954 -
               ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
                (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                   C47835 * C47647 * C47966 -
               ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
                (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                   C47835 * C47647 * C47927) *
                  C289 +
              (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
                (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                   C47835 * C47647 * C47966 -
               ((C10416 * C937 + C47947 * C944 + C10415 * C314 +
                 C10413 * C327) *
                    C47914 +
                (C10416 * C929 + C47947 * C938 + C10415 * C297 +
                 C10413 * C313) *
                    C4760 +
                (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                   C47835 * C47647 * C47954 +
               ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
                (C10415 * C298 + C10413 * C316 + C10416 * C1584 +
                 C47947 * C1585) *
                    C4760 +
                (C10415 * C315 + C10413 * C328 + C10416 * C1586 +
                 C47947 * C1587) *
                    C47914) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47967 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47629 * C288 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47956 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47967 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C47930) *
              C47629 * C289 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47967 -
           ((C10416 * C504 + C47947 * C517 + C10415 * C503 + C10413 * C516) *
                C47914 +
            (C10416 * C487 + C47947 * C505 + C10415 * C486 + C10413 * C502) *
                C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47956 +
           ((C10853 + C10852) * C4759 + (C10851 + C10850) * C4755 +
            (C10415 * C487 + C10413 * C505 + C10416 * C2288 + C47947 * C2289) *
                C4760 +
            (C10415 * C504 + C10413 * C517 + C10416 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1075 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1075 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1074 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C1075 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C1142 -
          ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
           (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
               C4755 +
           (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
               C4759) *
              C47835 * C47647 * C1143 +
          ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
               C4759 +
           (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
               C4755 +
           (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
              C47835 * C47647 * C1144 -
          ((C10416 * C1704 + C47947 * C1708 + C10415 * C1156 + C10413 * C1167) *
               C47914 +
           (C10416 * C1699 + C47947 * C1703 + C10415 * C1149 + C10413 * C1157) *
               C4760 +
           (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 + C10413 * C1168) *
               C4755 +
           (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 + C10413 * C1159) *
               C4759) *
              C47835 * C47647 * C1145 +
          ((C10415 * C1151 + C10413 * C1160 + C10416 * C6485 + C47947 * C6487) *
               C4759 +
           (C10415 * C1161 + C10413 * C1169 + C10416 * C6488 + C47947 * C6491) *
               C4755 +
           (C10415 * C1152 + C10413 * C1162 + C10416 * C6486 + C47947 * C6489) *
               C4760 +
           (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47967 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C1074 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47956 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47967 -
           ((C10416 * C2408 + C47947 * C2412 + C10415 * C1293 +
             C10413 * C1310) *
                C47914 +
            (C10416 * C2403 + C47947 * C2407 + C10415 * C1283 +
             C10413 * C1294) *
                C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C47930) *
              C1075 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47967 -
           ((C10416 * C1306 + C47947 * C1316 + C10415 * C1299 +
             C10413 * C1313) *
                C47914 +
            (C10416 * C1289 + C47947 * C1305 + C10415 * C1286 +
             C10413 * C1300) *
                C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C1288 + C10413 * C1303 + C10416 * C7349 +
             C47947 * C7351) *
                C4759 +
            (C10415 * C1304 + C10413 * C1315 + C10416 * C7352 +
             C47947 * C7355) *
                C4755 +
            (C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
             C47947 * C7353) *
                C4760 +
            (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C1820 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C1821 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C1820 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C1820 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C1821 +
           ((C10853 + C10852) * C4759 + (C10851 + C10850) * C4755 +
            (C10415 * C487 + C10413 * C505 + C10416 * C2288 + C47947 * C2289) *
                C4760 +
            (C10415 * C504 + C10413 * C517 + C10416 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C1820 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47966 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C1821 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C1820 -
           ((C10416 * C2408 + C47947 * C2412 + C10415 * C1293 +
             C10413 * C1310) *
                C47914 +
            (C10416 * C2403 + C47947 * C2407 + C10415 * C1283 +
             C10413 * C1294) *
                C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C47930) *
              C47954 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C1820 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C1288 + C10413 * C1303 + C10416 * C7349 +
             C47947 * C7351) *
                C4759 +
            (C10415 * C1304 + C10413 * C1315 + C10416 * C7352 +
             C47947 * C7355) *
                C4755 +
            (C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
             C47947 * C7353) *
                C4760 +
            (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C1995 -
          ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
           (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
               C4755 +
           (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
               C4759) *
              C47835 * C1996 +
          ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
               C4759 +
           (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
               C4755 +
           (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
              C47835 * C1997 -
          ((C10416 * C2015 + C47947 * C2022 + C10415 * C2008 + C10413 * C2019) *
               C47914 +
           (C10416 * C2004 + C47947 * C2014 + C10415 * C2001 + C10413 * C2009) *
               C4760 +
           (C10416 * C2013 + C47947 * C2021 + C10415 * C2010 + C10413 * C2020) *
               C4755 +
           (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 + C10413 * C2011) *
               C4759) *
              C47835 * C1998 +
          ((C10415 * C2003 + C10413 * C2012 + C10416 * C12581 +
            C47947 * C12583) *
               C4759 +
           (C10415 * C2013 + C10413 * C2021 + C10416 * C12584 +
            C47947 * C12587) *
               C4755 +
           (C10415 * C2004 + C10413 * C2014 + C10416 * C12582 +
            C47947 * C12585) *
               C4760 +
           (C10415 * C2015 + C10413 * C2022 + C10416 * C12586 +
            C47947 * C12588) *
               C47914) *
              C47835 * C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C1074 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C1075 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C47896 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C1074 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C1075 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47896 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47629 * C656 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47734 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47896) *
              C47629 * C657 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47896 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47734) *
              C47629 * C658 +
          (((C11137 + C11136) * C4759 + (C11135 + C11134) * C4755 +
            (C10415 * C488 + C10413 * C507 + C10416 * C489 + C47947 * C508) *
                C4760 +
            (C10415 * C506 + C10413 * C518 + C10416 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C2284 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C2285 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C2286 -
           ((C12934 + C12935) * C47914 + (C12936 + C12937) * C4760 +
            (C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
             C10413 * C2020) *
                C4755 +
            (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
             C10413 * C2011) *
                C4759) *
               C47835 * C47943) *
              C47629 * C47881 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C2285 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C2284 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C2286 +
           ((C12937 + C12936) * C4759 + (C12935 + C12934) * C4755 +
            (C10415 * C2000 + C10413 * C2007 + C10416 * C2005 +
             C47947 * C2016) *
                C4760 +
            (C10415 * C2006 + C10413 * C2018 + C10416 * C2017 +
             C47947 * C2023) *
                C47914) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47954 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47954 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47966 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10416 * C937 + C47947 * C944 + C10415 * C314 + C10413 * C327) *
                C47914 +
            (C10416 * C929 + C47947 * C938 + C10415 * C297 + C10413 * C313) *
                C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47954 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
           (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
              C47835 * C47647 * C47629 * C109 +
          ((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
           (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
           (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
              C47835 * C47647 * C47629 * C111 +
          ((C10465 + C10464) * C4759 + (C10463 + C10462) * C4755 +
           (C10415 * C122 + C10413 * C135 + C10416 * C770 + C47947 * C771) *
               C4760 +
           (C10415 * C134 + C10413 * C143 + C10416 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1075 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1075 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1074 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C1075 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C1142 -
          ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
           (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
               C4755 +
           (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
               C4759) *
              C47835 * C47647 * C1143 +
          ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
               C4759 +
           (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
               C4755 +
           (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
              C47835 * C47647 * C1144 -
          ((C10416 * C1704 + C47947 * C1708 + C10415 * C1156 + C10413 * C1167) *
               C47914 +
           (C10416 * C1699 + C47947 * C1703 + C10415 * C1149 + C10413 * C1157) *
               C4760 +
           (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 + C10413 * C1168) *
               C4755 +
           (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 + C10413 * C1159) *
               C4759) *
              C47835 * C47647 * C1145 +
          ((C10415 * C1151 + C10413 * C1160 + C10416 * C6485 + C47947 * C6487) *
               C4759 +
           (C10415 * C1161 + C10413 * C1169 + C10416 * C6488 + C47947 * C6491) *
               C4755 +
           (C10415 * C1152 + C10413 * C1162 + C10416 * C6486 + C47947 * C6489) *
               C4760 +
           (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C1820 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C1821 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C1820 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C1820 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C1821 +
           ((C10853 + C10852) * C4759 + (C10851 + C10850) * C4755 +
            (C10415 * C487 + C10413 * C505 + C10416 * C2288 + C47947 * C2289) *
                C4760 +
            (C10415 * C504 + C10413 * C517 + C10416 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C1820 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47966 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C1821 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C1820 -
           ((C10416 * C2408 + C47947 * C2412 + C10415 * C1293 +
             C10413 * C1310) *
                C47914 +
            (C10416 * C2403 + C47947 * C2407 + C10415 * C1283 +
             C10413 * C1294) *
                C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C47930) *
              C47954 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C1820 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C1821 +
           ((C10415 * C1288 + C10413 * C1303 + C10416 * C7349 +
             C47947 * C7351) *
                C4759 +
            (C10415 * C1304 + C10413 * C1315 + C10416 * C7352 +
             C47947 * C7355) *
                C4755 +
            (C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
             C47947 * C7353) *
                C4760 +
            (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47895 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47692) *
              C47606 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C47895 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C3274 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C47895 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47730 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47737 +
            ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C4759 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C4755 +
             (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
                C47835 * C3782) *
               C47895 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47737 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47730 -
            ((C12792 + C12793) * C47914 + (C12794 + C12795) * C4760 +
             (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
              C10413 * C1311) *
                 C4755 +
             (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
              C10413 * C1296) *
                 C4759) *
                C47835 * C3782) *
               C47692) *
              C2620 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47737 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47730 -
            ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
             (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
                C47835 * C3782) *
               C47895 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47730 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47737 +
            ((C12795 + C12794) * C4759 + (C12793 + C12792) * C4755 +
             (C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C4760 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47966 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47954 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C3274 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C47927) *
              C2620 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C47966 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47954 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C3274 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47734 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C3274) *
              C47629 * C47965 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C3274 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C11137 + C11136) * C4759 + (C11135 + C11134) * C4755 +
            (C10415 * C488 + C10413 * C507 + C10416 * C489 + C47947 * C508) *
                C4760 +
            (C10415 * C506 + C10413 * C518 + C10416 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47974 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47971 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47962 -
           ((C12934 + C12935) * C47914 + (C12936 + C12937) * C4760 +
            (C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
             C10413 * C2020) *
                C4755 +
            (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
             C10413 * C2011) *
                C4759) *
               C47835 * C47943) *
              C47629 * C2620 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47971 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47974 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C47962 +
           ((C12937 + C12936) * C4759 + (C12935 + C12934) * C4755 +
            (C10415 * C2000 + C10413 * C2007 + C10416 * C2005 +
             C47947 * C2016) *
                C4760 +
            (C10415 * C2006 + C10413 * C2018 + C10416 * C2017 +
             C47947 * C2023) *
                C47914) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47730 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47737 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C3782) *
              C47629 * C47606 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47737 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47730 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C3782) *
              C47629 * C47615 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47730 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47737 +
           ((C10853 + C10852) * C4759 + (C10851 + C10850) * C4755 +
            (C10415 * C487 + C10413 * C505 + C10416 * C2288 + C47947 * C2289) *
                C4760 +
            (C10415 * C504 + C10413 * C517 + C10416 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C3274 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47734 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C3274) *
              C47629 * C47965 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C3274 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C11137 + C11136) * C4759 + (C11135 + C11134) * C4755 +
            (C10415 * C488 + C10413 * C507 + C10416 * C489 + C47947 * C508) *
                C4760 +
            (C10415 * C506 + C10413 * C518 + C10416 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C3274 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47966 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C3274) *
               C47954 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C3274 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C47927) *
              C2620 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C3274) *
               C47966 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C3274 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47954 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47895 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47692) *
              C656 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47692 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47895) *
              C657 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47895 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47692) *
              C658 +
          (((C10995 + C10994) * C4759 + (C10993 + C10992) * C4755 +
            (C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C4760 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1416 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1417 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C1418 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1417 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1416 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C1418 +
           ((C11871 + C11870) * C4759 + (C11869 + C11868) * C4755 +
            (C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
             C47947 * C1705) *
                C4760 +
            (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C47895 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C47692) *
              C288 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C47895 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C47692) *
              C289 +
          ((((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
             (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
                C47835 * C47896 -
            ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
             (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
                C47835 * C47734) *
               C47895 +
           (((C11355 + C11354) * C4759 + (C11353 + C11352) * C4755 +
             (C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C4760 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
             (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47896 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C1416 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47734 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47896) *
              C1417 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47896 -
           ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47734) *
              C1418 +
          (((C10415 * C1698 + C10413 * C1701 + C10416 * C5973 +
             C47947 * C5975) *
                C4759 +
            (C10415 * C1702 + C10413 * C1707 + C10416 * C5976 +
             C47947 * C5979) *
                C4755 +
            (C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
             C47947 * C5977) *
                C4760 +
            (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C11868 + C11869) * C47914 + (C11870 + C11871) * C4760 +
            (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 +
             C10413 * C1168) *
                C4755 +
            (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 +
             C10413 * C1159) *
                C4759) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47954 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47954 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47966 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10416 * C937 + C47947 * C944 + C10415 * C314 + C10413 * C327) *
                C47914 +
            (C10416 * C929 + C47947 * C938 + C10415 * C297 + C10413 * C313) *
                C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47954 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
           (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
              C47835 * C47647 * C47629 * C109 +
          ((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
           (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
           (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
              C47835 * C47647 * C47629 * C111 +
          ((C10465 + C10464) * C4759 + (C10463 + C10462) * C4755 +
           (C10415 * C122 + C10413 * C135 + C10416 * C770 + C47947 * C771) *
               C4760 +
           (C10415 * C134 + C10413 * C143 + C10416 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47967 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C47629 * C288 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47956 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47967 -
           ((C10850 + C10851) * C47914 + (C10852 + C10853) * C4760 +
            (C10845 + C10844) * C4755 + (C10843 + C10842) * C4759) *
               C47835 * C47930) *
              C47629 * C289 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47967 -
           ((C10416 * C504 + C47947 * C517 + C10415 * C503 + C10413 * C516) *
                C47914 +
            (C10416 * C487 + C47947 * C505 + C10415 * C486 + C10413 * C502) *
                C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47956 +
           ((C10853 + C10852) * C4759 + (C10851 + C10850) * C4755 +
            (C10415 * C487 + C10413 * C505 + C10416 * C2288 + C47947 * C2289) *
                C4760 +
            (C10415 * C504 + C10413 * C517 + C10416 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1075 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1075 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1074 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C1075 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C1142 -
          ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
           (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
               C4755 +
           (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
               C4759) *
              C47835 * C47647 * C1143 +
          ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
               C4759 +
           (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
               C4755 +
           (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
              C47835 * C47647 * C1144 -
          ((C10416 * C1704 + C47947 * C1708 + C10415 * C1156 + C10413 * C1167) *
               C47914 +
           (C10416 * C1699 + C47947 * C1703 + C10415 * C1149 + C10413 * C1157) *
               C4760 +
           (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 + C10413 * C1168) *
               C4755 +
           (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 + C10413 * C1159) *
               C4759) *
              C47835 * C47647 * C1145 +
          ((C10415 * C1151 + C10413 * C1160 + C10416 * C6485 + C47947 * C6487) *
               C4759 +
           (C10415 * C1161 + C10413 * C1169 + C10416 * C6488 + C47947 * C6491) *
               C4755 +
           (C10415 * C1152 + C10413 * C1162 + C10416 * C6486 + C47947 * C6489) *
               C4760 +
           (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47967 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C4759 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C4755 +
            (C10842 + C10843) * C4760 + (C10844 + C10845) * C47914) *
               C47835 * C47930) *
              C1074 +
          (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                C4759 +
            (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                C4755 +
            (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
               C47835 * C47956 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47967 -
           ((C10416 * C2408 + C47947 * C2412 + C10415 * C1293 +
             C10413 * C1310) *
                C47914 +
            (C10416 * C2403 + C47947 * C2407 + C10415 * C1283 +
             C10413 * C1294) *
                C4760 +
            (C10416 * C2406 + C47947 * C2411 + C10415 * C1295 +
             C10413 * C1311) *
                C4755 +
            (C10416 * C2402 + C47947 * C2405 + C10415 * C1284 +
             C10413 * C1296) *
                C4759) *
               C47835 * C47930) *
              C1075 +
          (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47967 -
           ((C10416 * C1306 + C47947 * C1316 + C10415 * C1299 +
             C10413 * C1313) *
                C47914 +
            (C10416 * C1289 + C47947 * C1305 + C10415 * C1286 +
             C10413 * C1300) *
                C4760 +
            (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
             C10413 * C1314) *
                C4755 +
            (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
             C10413 * C1302) *
                C4759) *
               C47835 * C47956 +
           ((C10415 * C1288 + C10413 * C1303 + C10416 * C7349 +
             C47947 * C7351) *
                C4759 +
            (C10415 * C1304 + C10413 * C1315 + C10416 * C7352 +
             C47947 * C7355) *
                C4755 +
            (C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
             C47947 * C7353) *
                C4760 +
            (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47896 -
           ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
            (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C4755 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C4759) *
               C47835 * C47734) *
              C47629 * C656 +
          (((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
            (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
               C47835 * C47734 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47896) *
              C47629 * C657 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47896 -
           ((C11134 + C11135) * C47914 + (C11136 + C11137) * C4760 +
            (C10849 + C10848) * C4755 + (C10847 + C10846) * C4759) *
               C47835 * C47734) *
              C47629 * C658 +
          (((C11137 + C11136) * C4759 + (C11135 + C11134) * C4755 +
            (C10415 * C488 + C10413 * C507 + C10416 * C489 + C47947 * C508) *
                C4760 +
            (C10415 * C506 + C10413 * C518 + C10416 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
            (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C4759 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C4755 +
             (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
                C47835 * C47896 -
            ((C10838 + C10839) * C47914 + (C10840 + C10841) * C4760 +
             (C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C4755 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C4759) *
                C47835 * C47734) *
               C1074 +
           (((C10415 * C926 + C10413 * C931 + C10416 * C1284 + C47947 * C1296) *
                 C4759 +
             (C10415 * C932 + C10413 * C941 + C10416 * C1295 + C47947 * C1311) *
                 C4755 +
             (C11348 + C11349) * C4760 + (C11350 + C11351) * C47914) *
                C47835 * C47734 -
            ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
             (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                 C4755 +
             (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                 C4759) *
                C47835 * C47896) *
               C1075 +
           (((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                 C4759 +
             (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                 C4755 +
             (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
                C47835 * C47896 -
            ((C12074 + C12075) * C47914 + (C12076 + C12077) * C4760 +
             (C10416 * C1304 + C47947 * C1315 + C10415 * C1301 +
              C10413 * C1314) *
                 C4755 +
             (C10416 * C1288 + C47947 * C1303 + C10415 * C1287 +
              C10413 * C1302) *
                 C4759) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C10841 + C10840) * C4759 + (C10839 + C10838) * C4755 +
             (C10846 + C10847) * C4760 + (C10848 + C10849) * C47914) *
                C47835 * C47734 -
            ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
             (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
                C47835 * C47896) *
               C1074 +
           (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
             (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
                C47835 * C47896 -
            ((C11352 + C11353) * C47914 + (C11354 + C11355) * C4760 +
             (C11351 + C11350) * C4755 + (C11349 + C11348) * C4759) *
                C47835 * C47734) *
               C1075 +
           (((C12077 + C12076) * C4759 + (C12075 + C12074) * C4755 +
             (C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
              C47947 * C1307) *
                 C4760 +
             (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
             (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
           (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
              C47835 * C47647 * C47629 * C109 +
          ((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
           (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C10462 + C10463) * C47914 + (C10464 + C10465) * C4760 +
           (C10461 + C10460) * C4755 + (C10459 + C10458) * C4759) *
              C47835 * C47647 * C47629 * C111 +
          ((C10465 + C10464) * C4759 + (C10463 + C10462) * C4755 +
           (C10415 * C122 + C10413 * C135 + C10416 * C770 + C47947 * C771) *
               C4760 +
           (C10415 * C134 + C10413 * C143 + C10416 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C47954 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C47954 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C47966 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C47966 -
           ((C10416 * C937 + C47947 * C944 + C10415 * C314 + C10413 * C327) *
                C47914 +
            (C10416 * C929 + C47947 * C938 + C10415 * C297 + C10413 * C313) *
                C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C47954 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C4759 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C4755 +
            (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
            (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
                C4755 +
            (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
                C4759) *
               C47835 * C47647 * C1075 +
           ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
                C4759 +
            (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
                C4755 +
            (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C10647 + C10646) * C4759 + (C10645 + C10644) * C4755 +
            (C10652 + C10653) * C4760 + (C10654 + C10655) * C47914) *
               C47835 * C47647 * C1075 -
           ((C10454 + C10455) * C47914 + (C10456 + C10457) * C4760 +
            (C10453 + C10452) * C4755 + (C10451 + C10450) * C4759) *
               C47835 * C47647 * C1074 -
           ((C10656 + C10657) * C47914 + (C10658 + C10659) * C4760 +
            (C10651 + C10650) * C4755 + (C10649 + C10648) * C4759) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C10457 + C10456) * C4759 + (C10455 + C10454) * C4755 +
            (C10458 + C10459) * C4760 + (C10460 + C10461) * C47914) *
               C47835 * C47647 * C1074 -
           ((C10992 + C10993) * C47914 + (C10994 + C10995) * C4760 +
            (C10655 + C10654) * C4755 + (C10653 + C10652) * C4759) *
               C47835 * C47647 * C1075 +
           ((C10659 + C10658) * C4759 + (C10657 + C10656) * C4755 +
            (C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                C4760 +
            (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
               C4759 +
           (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
               C4755 +
           (C10450 + C10451) * C4760 + (C10452 + C10453) * C47914) *
              C47835 * C47647 * C1142 -
          ((C10644 + C10645) * C47914 + (C10646 + C10647) * C4760 +
           (C10416 * C932 + C47947 * C941 + C10415 * C305 + C10413 * C323) *
               C4755 +
           (C10416 * C926 + C47947 * C931 + C10415 * C293 + C10413 * C306) *
               C4759) *
              C47835 * C47647 * C1143 +
          ((C10415 * C294 + C10413 * C307 + C10416 * C1287 + C47947 * C1302) *
               C4759 +
           (C10415 * C308 + C10413 * C324 + C10416 * C1301 + C47947 * C1314) *
               C4755 +
           (C10648 + C10649) * C4760 + (C10650 + C10651) * C47914) *
              C47835 * C47647 * C1144 -
          ((C10416 * C1704 + C47947 * C1708 + C10415 * C1156 + C10413 * C1167) *
               C47914 +
           (C10416 * C1699 + C47947 * C1703 + C10415 * C1149 + C10413 * C1157) *
               C4760 +
           (C10416 * C1702 + C47947 * C1707 + C10415 * C1158 + C10413 * C1168) *
               C4755 +
           (C10416 * C1698 + C47947 * C1701 + C10415 * C1150 + C10413 * C1159) *
               C4759) *
              C47835 * C47647 * C1145 +
          ((C10415 * C1151 + C10413 * C1160 + C10416 * C6485 + C47947 * C6487) *
               C4759 +
           (C10415 * C1161 + C10413 * C1169 + C10416 * C6488 + C47947 * C6491) *
               C4755 +
           (C10415 * C1152 + C10413 * C1162 + C10416 * C6486 + C47947 * C6489) *
               C4760 +
           (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47688 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47695 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47647 * C2880) *
              C47606 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47695 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47688 -
           ((C17430 + C17431 + C17432 + C17433) * C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C2880) *
              C47615 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47688 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47695 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47688 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C47695 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C47896 -
            ((C17762 + C17763 + C17764 + C17765) * C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C2880) *
              C2620 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C47688 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47695 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47973 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47969 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47647 * C47959 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47647 * C47937) *
              C2620 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47969 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47973 -
           ((C17430 + C17431 + C17432 + C17433) * C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47959 +
           ((C17433 + C17432 + C17431 + C17430) * C16115 +
            (C5819 * C16117 + C5818 * C16113 +
             (C113 * C1153 + C47850 * C1164) * C16118 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C2512 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47692) *
              C47972 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47692 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C2512 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47692) *
              C47952 +
          (((C16566 + C16567 + C16568 + C16569) * C16115 +
            (C367 * C16117 + C366 * C16113 +
             (C113 * C300 + C47850 * C319) * C16118 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47967 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47956 +
            (((C113 * C483 + C47850 * C496) * C16117 +
              (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
              C550 * C47914) *
                 C16115 +
             (C17288 + C17289 + C17290 + C17291) * C47945) *
                C47930) *
               C2512 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47956 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47967 -
            ((C17296 + C17297 + C17298 + C17299) * C47945 +
             (C17291 + C17290 + C17289 + C17288) * C16115) *
                C47930) *
               C47692) *
              C2620 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47956 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47967 -
            ((C18334 + C18335 + C18336 + C18337) * C47945 +
             (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                 C16115) *
                C47930) *
               C2512 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47967 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47956 +
            ((C18337 + C18336 + C18335 + C18334) * C16115 +
             (C6007 * C16117 + C6006 * C16113 +
              (C113 * C1290 + C47850 * C1307) * C16118 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C47692) *
              C47606 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C2512 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C47615 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C47896 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C2512 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47692) *
              C47972 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47692 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C2512 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47692) *
              C47952 +
          (((C16566 + C16567 + C16568 + C16569) * C16115 +
            (C367 * C16117 + C366 * C16113 +
             (C113 * C300 + C47850 * C319) * C16118 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47973 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47969 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47647 * C47959 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47647 * C47937) *
              C2620 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47969 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47973 -
           ((C17430 + C17431 + C17432 + C17433) * C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47959 +
           ((C17433 + C17432 + C17431 + C17430) * C16115 +
            (C5819 * C16117 + C5818 * C16113 +
             (C113 * C1153 + C47850 * C1164) * C16118 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47688 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47695 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C3274 -
            ((C17762 + C17763 + C17764 + C17765) * C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C2880) *
              C47881 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C47688 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47695 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C47850 * C124) * C16117 +
                     (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
                     C167 * C47914) *
                        C16115 +
                    (C16266 + C16267 + C16268 + C16269) * C47945) *
                       C47730 -
                   ((C16894 + C16895 + C16896 + C16897) * C47945 +
                    (C547 * C47914 + C548 * C16118 +
                     (C113 * C494 + C47850 * C512) * C16113 +
                     (C113 * C482 + C47850 * C495) * C16117) *
                        C16115) *
                       C47737 +
                   (((C113 * C483 + C47850 * C496) * C16117 +
                     (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
                     C550 * C47914) *
                        C16115 +
                    (C17288 + C17289 + C17290 + C17291) * C47945) *
                       C3782) *
                      C47688 +
                  (((C16897 + C16896 + C16895 + C16894) * C16115 +
                    (C17292 + C17293 + C17294 + C17295) * C47945) *
                       C47737 -
                   ((C16270 + C16271 + C16272 + C16273) * C47945 +
                    (C16269 + C16268 + C16267 + C16266) * C16115) *
                       C47730 -
                   ((C17296 + C17297 + C17298 + C17299) * C47945 +
                    (C17291 + C17290 + C17289 + C17288) * C16115) *
                       C3782) *
                      C47695 +
                  (((C16273 + C16272 + C16271 + C16270) * C16115 +
                    (C17134 + C17135 + C17136 + C17137) * C47945) *
                       C47730 -
                   ((C17762 + C17763 + C17764 + C17765) * C47945 +
                    (C17295 + C17294 + C17293 + C17292) * C16115) *
                       C47737 +
                   ((C17299 + C17298 + C17297 + C17296) * C16115 +
                    ((C113 * C5973 + C47850 * C5975) * C16117 +
                     (C113 * C5976 + C47850 * C5979) * C16113 +
                     (C113 * C5974 + C47850 * C5977) * C16118 +
                     (C113 * C5978 + C47850 * C5980) * C47914) *
                        C47945) *
                       C3782) *
                      C2880) *
                 C47601) /
                (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C3274 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47973 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47734 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C3274) *
              C47969 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C3274 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47734) *
              C47959 +
          (((C17765 + C17764 + C17763 + C17762) * C16115 +
            ((C113 * C6485 + C47850 * C6487) * C16117 +
             (C113 * C6488 + C47850 * C6491) * C16113 +
             (C113 * C6486 + C47850 * C6489) * C16118 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C2512 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C3274 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47974 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47962 -
           ((C18598 + C18599 + C18600 + C18601) * C47945 +
            (C2303 * C47914 + C2304 * C16118 +
             (C113 * C2010 + C47850 * C2020) * C16113 +
             (C113 * C2002 + C47850 * C2011) * C16117) *
                C16115) *
               C47943) *
              C2512 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47971 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47974 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C47962 +
           ((C18601 + C18600 + C18599 + C18598) * C16115 +
            ((C113 * C7349 + C47850 * C7351) * C16117 +
             (C113 * C7352 + C47850 * C7355) * C16113 +
             (C113 * C7350 + C47850 * C7353) * C16118 +
             (C113 * C7354 + C47850 * C7356) * C47914) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47730 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47737 +
            (((C113 * C483 + C47850 * C496) * C16117 +
              (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
              C550 * C47914) *
                 C16115 +
             (C17288 + C17289 + C17290 + C17291) * C47945) *
                C3782) *
               C2512 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47737 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47730 -
            ((C17296 + C17297 + C17298 + C17299) * C47945 +
             (C17291 + C17290 + C17289 + C17288) * C16115) *
                C3782) *
               C47692) *
              C47881 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47737 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47730 -
            ((C18334 + C18335 + C18336 + C18337) * C47945 +
             (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                 C16115) *
                C3782) *
               C2512 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47730 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47737 +
            ((C18337 + C18336 + C18335 + C18334) * C16115 +
             (C6007 * C16117 + C6006 * C16113 +
              (C113 * C1290 + C47850 * C1307) * C16118 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C2512 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C3274 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C2512 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C3274 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47973 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47734 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C3274) *
              C47969 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C3274 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47734) *
              C47959 +
          (((C17765 + C17764 + C17763 + C17762) * C16115 +
            ((C113 * C6485 + C47850 * C6487) * C16117 +
             (C113 * C6488 + C47850 * C6491) * C16113 +
             (C113 * C6486 + C47850 * C6489) * C16118 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1416 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1417 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47647 * C1418 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47647 * C47937) *
              C47881 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1417 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1416 -
           ((C17430 + C17431 + C17432 + C17433) * C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C1418 +
           ((C17433 + C17432 + C17431 + C17430) * C16115 +
            (C5819 * C16117 + C5818 * C16113 +
             (C113 * C1153 + C47850 * C1164) * C16118 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47895 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47692) *
              C656 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47692 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47895) *
              C657 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47895 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47692) *
              C658 +
          (((C16566 + C16567 + C16568 + C16569) * C16115 +
            (C367 * C16117 + C366 * C16113 +
             (C113 * C300 + C47850 * C319) * C16118 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C1820 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C1821 +
            (((C113 * C483 + C47850 * C496) * C16117 +
              (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
              C550 * C47914) *
                 C16115 +
             (C17288 + C17289 + C17290 + C17291) * C47945) *
                C47930) *
               C47895 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C1821 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C1820 -
            ((C17296 + C17297 + C17298 + C17299) * C47945 +
             (C17291 + C17290 + C17289 + C17288) * C16115) *
                C47930) *
               C47692) *
              C47881 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C1821 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C1820 -
            ((C18334 + C18335 + C18336 + C18337) * C47945 +
             (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                 C16115) *
                C47930) *
               C47895 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C1820 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C1821 +
            ((C18337 + C18336 + C18335 + C18334) * C16115 +
             (C6007 * C16117 + C6006 * C16113 +
              (C113 * C1290 + C47850 * C1307) * C16118 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47896 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C1416 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47734 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47896) *
              C1417 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47896 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47734) *
              C1418 +
          (((C17765 + C17764 + C17763 + C17762) * C16115 +
            ((C113 * C6485 + C47850 * C6487) * C16117 +
             (C113 * C6488 + C47850 * C6491) * C16113 +
             (C113 * C6486 + C47850 * C6489) * C16118 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C6004 * C16117 + C6005 * C16113 + C1600 * C16118 +
              C1599 * C47914) *
                 C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C47895 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C1597 * C47914 + C1598 * C16118 + C1599 * C16113 +
              C1600 * C16117) *
                 C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C47896 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C2284 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C2286 -
           ((C18598 + C18599 + C18600 + C18601) * C47945 +
            (C2303 * C47914 + C2304 * C16118 +
             (C113 * C2010 + C47850 * C2020) * C16113 +
             (C113 * C2002 + C47850 * C2011) * C16117) *
                C16115) *
               C47943) *
              C47895 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C2285 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C2284 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C2286 +
           ((C18601 + C18600 + C18599 + C18598) * C16115 +
            ((C113 * C7349 + C47850 * C7351) * C16117 +
             (C113 * C7352 + C47850 * C7355) * C16113 +
             (C113 * C7350 + C47850 * C7353) * C16118 +
             (C113 * C7354 + C47850 * C7356) * C47914) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47850 * C124) * C16117 +
                (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
                C167 * C47914) *
                   C16115 +
               (C4936 * C16117 + C4937 * C16113 + C359 * C16118 +
                C358 * C47914) *
                   C47945) *
                  C47647 * C47629 * C108 -
              ((C356 * C47914 + C357 * C16118 + C358 * C16113 + C359 * C16117) *
                   C47945 +
               (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                   C16115) *
                  C47647 * C47629 * C109 +
              ((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                   C16115 +
               (C357 * C16117 + C356 * C16113 + C364 * C16118 + C365 * C47914) *
                   C47945) *
                  C47647 * C47629 * C110 -
              ((C669 * C47914 + C670 * C16118 + C365 * C16113 + C364 * C16117) *
                   C47945 +
               (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                   C16115) *
                  C47647 * C47629 * C111 +
              ((C172 * C16117 + C173 * C16113 + C175 * C16118 + C174 * C47914) *
                   C16115 +
               (C670 * C16117 + C669 * C16113 +
                (C113 * C660 + C47850 * C661) * C16118 +
                (C113 * C662 + C47850 * C663) * C47914) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47850 * C124) * C16117 +
                 (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
                 C167 * C47914) *
                    C16115 +
                (C16266 + C16267 + C16268 + C16269) * C47945) *
                   C47647 * C47966 -
               ((C16270 + C16271 + C16272 + C16273) * C47945 +
                (C16269 + C16268 + C16267 + C16266) * C16115) *
                   C47647 * C47954 +
               ((C16273 + C16272 + C16271 + C16270) * C16115 +
                (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
                 C1437 * C47914) *
                    C47945) *
                   C47647 * C47927) *
                  C288 +
              (((C16274 + C16275 + C16276 + C16277) * C16115 +
                (C16278 + C16279 + C16280 + C16281) * C47945) *
                   C47647 * C47954 -
               ((C16277 + C16276 + C16275 + C16274) * C47945 +
                (C169 * C47914 + C168 * C16118 + C167 * C16113 +
                 C166 * C16117) *
                    C16115) *
                   C47647 * C47966 -
               ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
                 C1438 * C16117) *
                    C47945 +
                (C16281 + C16280 + C16279 + C16278) * C16115) *
                   C47647 * C47927) *
                  C289 +
              (((C168 * C16117 + C169 * C16113 + C171 * C16118 +
                 C170 * C47914) *
                    C16115 +
                (C16282 + C16283 + C16284 + C16285) * C47945) *
                   C47647 * C47966 -
               ((C16286 + C16287 + C16288 + C16289) * C47945 +
                (C16285 + C16284 + C16283 + C16282) * C16115) *
                   C47647 * C47954 +
               ((C16289 + C16288 + C16287 + C16286) * C16115 +
                (C1436 * C16117 + C1435 * C16113 +
                 (C113 * C1422 + C47850 * C1423) * C16118 +
                 (C113 * C1424 + C47850 * C1425) * C47914) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47967 -
           ((C960 * C47914 + C959 * C16118 + C5562 * C16113 + C5563 * C16117) *
                C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C6002 * C16117 + C6003 * C16113 + C2186 * C16118 +
             C2185 * C47914) *
                C47945) *
               C47930) *
              C47629 * C288 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C959 * C16117 + C960 * C16113 + C961 * C16118 + C962 * C47914) *
                C47945) *
               C47956 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47967 -
           ((C2183 * C47914 + C2184 * C16118 + C2185 * C16113 +
             C2186 * C16117) *
                C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C47930) *
              C47629 * C289 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47967 -
           ((C963 * C47914 + C964 * C16118 + C962 * C16113 + C961 * C16117) *
                C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47956 +
           ((C551 * C16117 + C552 * C16113 + C556 * C16118 + C555 * C47914) *
                C16115 +
            (C2184 * C16117 + C2183 * C16113 +
             (C113 * C2170 + C47850 * C2171) * C16118 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1074 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1075 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1075 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C1074 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C1075 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C16266 + C16267 + C16268 + C16269) * C47945) *
              C47647 * C1142 -
          ((C16270 + C16271 + C16272 + C16273) * C47945 +
           (C16269 + C16268 + C16267 + C16266) * C16115) *
              C47647 * C1143 +
          ((C16273 + C16272 + C16271 + C16270) * C16115 +
           (C17134 + C17135 + C17136 + C17137) * C47945) *
              C47647 * C1144 -
          ((C17138 + C17139 + C17140 + C17141) * C47945 +
           (C17137 + C17136 + C17135 + C17134) * C16115) *
              C47647 * C1145 +
          ((C17141 + C17140 + C17139 + C17138) * C16115 +
           ((C113 * C5793 + C47850 * C5795) * C16117 +
            (C113 * C5796 + C47850 * C5799) * C16113 +
            (C113 * C5794 + C47850 * C5797) * C16118 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47967 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C1074 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47956 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47967 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C47930) *
              C1075 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47967 -
           ((C6354 * C47914 + C6355 * C16118 + C6500 * C16113 +
             C6501 * C16117) *
                C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47956 +
           ((C17299 + C17298 + C17297 + C17296) * C16115 +
            ((C113 * C5973 + C47850 * C5975) * C16117 +
             (C113 * C5976 + C47850 * C5979) * C16113 +
             (C113 * C5974 + C47850 * C5977) * C16118 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C1820 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C1821 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C1820 -
           ((C2183 * C47914 + C2184 * C16118 + C2185 * C16113 +
             C2186 * C16117) *
                C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C1820 -
           ((C16902 + C16903 + C16904 + C16905) * C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C1821 +
           ((C551 * C16117 + C552 * C16113 + C556 * C16118 + C555 * C47914) *
                C16115 +
            (C2184 * C16117 + C2183 * C16113 +
             (C113 * C2170 + C47850 * C2171) * C16118 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C1820 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C47966 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C1821 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C1820 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C47930) *
              C47954 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C1820 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C1821 +
           ((C17299 + C17298 + C17297 + C17296) * C16115 +
            ((C113 * C5973 + C47850 * C5975) * C16117 +
             (C113 * C5976 + C47850 * C5979) * C16113 +
             (C113 * C5974 + C47850 * C5977) * C16118 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C16266 + C16267 + C16268 + C16269) * C47945) *
              C1995 -
          ((C16894 + C16895 + C16896 + C16897) * C47945 +
           (C547 * C47914 + C548 * C16118 +
            (C113 * C494 + C47850 * C512) * C16113 +
            (C113 * C482 + C47850 * C495) * C16117) *
               C16115) *
              C1996 +
          (((C113 * C483 + C47850 * C496) * C16117 +
            (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
            C550 * C47914) *
               C16115 +
           (C17288 + C17289 + C17290 + C17291) * C47945) *
              C1997 -
          ((C7218 * C47914 + C7219 * C16118 + C7364 * C16113 + C7365 * C16117) *
               C47945 +
           (C2303 * C47914 + C2304 * C16118 +
            (C113 * C2010 + C47850 * C2020) * C16113 +
            (C113 * C2002 + C47850 * C2011) * C16117) *
               C16115) *
              C1998 +
          (((C113 * C2003 + C47850 * C2012) * C16117 +
            (C113 * C2013 + C47850 * C2021) * C16113 +
            (C113 * C2004 + C47850 * C2014) * C16118 +
            (C113 * C2015 + C47850 * C2022) * C47914) *
               C16115 +
           ((C113 * C6877 + C47850 * C6879) * C16117 +
            (C113 * C6880 + C47850 * C6883) * C16113 +
            (C113 * C6878 + C47850 * C6881) * C16118 +
            (C113 * C6882 + C47850 * C6884) * C47914) *
               C47945) *
              C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C1074 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C1075 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C47896 -
            ((C6354 * C47914 + C6355 * C16118 + C6500 * C16113 +
              C6501 * C16117) *
                 C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C1074 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C1075 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47896 -
           ((C960 * C47914 + C959 * C16118 + C5562 * C16113 + C5563 * C16117) *
                C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47629 * C656 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C959 * C16117 + C960 * C16113 + C961 * C16118 + C962 * C47914) *
                C47945) *
               C47734 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47896) *
              C47629 * C657 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47896 -
           ((C963 * C47914 + C964 * C16118 + C962 * C16113 + C961 * C16117) *
                C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47734) *
              C47629 * C658 +
          (((C553 * C16117 + C554 * C16113 + C780 * C16118 + C779 * C47914) *
                C16115 +
            (C964 * C16117 + C963 * C16113 +
             (C113 * C930 + C47850 * C939) * C16118 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C2284 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C2286 -
           ((C7218 * C47914 + C7219 * C16118 + C7364 * C16113 +
             C7365 * C16117) *
                C47945 +
            (C2303 * C47914 + C2304 * C16118 +
             (C113 * C2010 + C47850 * C2020) * C16113 +
             (C113 * C2002 + C47850 * C2011) * C16117) *
                C16115) *
               C47943) *
              C47629 * C47881 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C2285 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C2284 -
           ((C18334 + C18335 + C18336 + C18337) * C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C2286 +
           ((C2304 * C16117 + C2303 * C16113 + C2302 * C16118 +
             C2301 * C47914) *
                C16115 +
            (C7219 * C16117 + C7218 * C16113 +
             (C113 * C2404 + C47850 * C2409) * C16118 +
             (C113 * C2410 + C47850 * C2413) * C47914) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47966 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47954 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47954 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C289 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47966 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47954 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C4936 * C16117 + C4937 * C16113 + C359 * C16118 + C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C16118 + C358 * C16113 + C359 * C16117) *
               C47945 +
           (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
               C16115) *
              C47647 * C47629 * C109 +
          ((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
               C16115 +
           (C357 * C16117 + C356 * C16113 + C364 * C16118 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C16118 + C365 * C16113 + C364 * C16117) *
               C47945 +
           (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
               C16115) *
              C47647 * C47629 * C111 +
          ((C172 * C16117 + C173 * C16113 + C175 * C16118 + C174 * C47914) *
               C16115 +
           (C670 * C16117 + C669 * C16113 +
            (C113 * C660 + C47850 * C661) * C16118 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1074 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1075 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1075 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C1074 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C1075 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C16266 + C16267 + C16268 + C16269) * C47945) *
              C47647 * C1142 -
          ((C16270 + C16271 + C16272 + C16273) * C47945 +
           (C16269 + C16268 + C16267 + C16266) * C16115) *
              C47647 * C1143 +
          ((C16273 + C16272 + C16271 + C16270) * C16115 +
           (C17134 + C17135 + C17136 + C17137) * C47945) *
              C47647 * C1144 -
          ((C17138 + C17139 + C17140 + C17141) * C47945 +
           (C17137 + C17136 + C17135 + C17134) * C16115) *
              C47647 * C1145 +
          ((C17141 + C17140 + C17139 + C17138) * C16115 +
           ((C113 * C5793 + C47850 * C5795) * C16117 +
            (C113 * C5796 + C47850 * C5799) * C16113 +
            (C113 * C5794 + C47850 * C5797) * C16118 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C1820 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C1821 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C1820 -
           ((C2183 * C47914 + C2184 * C16118 + C2185 * C16113 +
             C2186 * C16117) *
                C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C1820 -
           ((C16902 + C16903 + C16904 + C16905) * C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C1821 +
           ((C551 * C16117 + C552 * C16113 + C556 * C16118 + C555 * C47914) *
                C16115 +
            (C2184 * C16117 + C2183 * C16113 +
             (C113 * C2170 + C47850 * C2171) * C16118 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C1820 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C47966 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C1821 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C1820 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C47930) *
              C47954 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C1820 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C1821 +
           ((C17299 + C17298 + C17297 + C17296) * C16115 +
            ((C113 * C5973 + C47850 * C5975) * C16117 +
             (C113 * C5976 + C47850 * C5979) * C16113 +
             (C113 * C5974 + C47850 * C5977) * C16118 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47692) *
              C47606 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C47895 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C47615 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C3274 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47730 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47737 +
            (((C113 * C483 + C47850 * C496) * C16117 +
              (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
              C550 * C47914) *
                 C16115 +
             (C17288 + C17289 + C17290 + C17291) * C47945) *
                C3782) *
               C47895 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47737 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47730 -
            ((C17296 + C17297 + C17298 + C17299) * C47945 +
             (C17291 + C17290 + C17289 + C17288) * C16115) *
                C3782) *
               C47692) *
              C2620 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47737 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47730 -
            ((C18334 + C18335 + C18336 + C18337) * C47945 +
             (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                 C16115) *
                C3782) *
               C47895 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47730 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47737 +
            ((C18337 + C18336 + C18335 + C18334) * C16115 +
             (C6007 * C16117 + C6006 * C16113 +
              (C113 * C1290 + C47850 * C1307) * C16118 +
              (C113 * C1308 + C47850 * C1317) * C47914) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47966 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47954 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C3274 -
            ((C17762 + C17763 + C17764 + C17765) * C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C47966 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47954 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C3274 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C47734 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C3274 -
           ((C16902 + C16903 + C16904 + C16905) * C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C16117 + C554 * C16113 + C780 * C16118 + C779 * C47914) *
                C16115 +
            (C964 * C16117 + C963 * C16113 +
             (C113 * C930 + C47850 * C939) * C16118 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47974 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47962 -
           ((C18598 + C18599 + C18600 + C18601) * C47945 +
            (C2303 * C47914 + C2304 * C16118 +
             (C113 * C2010 + C47850 * C2020) * C16113 +
             (C113 * C2002 + C47850 * C2011) * C16117) *
                C16115) *
               C47943) *
              C47629 * C2620 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C47971 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47974 -
           ((C18334 + C18335 + C18336 + C18337) * C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C47962 +
           ((C2304 * C16117 + C2303 * C16113 + C2302 * C16118 +
             C2301 * C47914) *
                C16115 +
            (C7219 * C16117 + C7218 * C16113 +
             (C113 * C2404 + C47850 * C2409) * C16118 +
             (C113 * C2410 + C47850 * C2413) * C47914) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47730 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47737 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C3782) *
              C47629 * C47606 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C47737 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47730 -
           ((C18334 + C18335 + C18336 + C18337) * C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C3782) *
              C47629 * C47615 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47730 -
           ((C16902 + C16903 + C16904 + C16905) * C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47737 +
           ((C551 * C16117 + C552 * C16113 + C556 * C16118 + C555 * C47914) *
                C16115 +
            (C2184 * C16117 + C2183 * C16113 +
             (C113 * C2170 + C47850 * C2171) * C16118 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C3274 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C16898 + C16899 + C16900 + C16901) * C47945) *
               C47734 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C3274 -
           ((C16902 + C16903 + C16904 + C16905) * C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C16117 + C554 * C16113 + C780 * C16118 + C779 * C47914) *
                C16115 +
            (C964 * C16117 + C963 * C16113 +
             (C113 * C930 + C47850 * C939) * C16118 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C3274 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47966 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C3274) *
               C47954 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C3274 -
            ((C17762 + C17763 + C17764 + C17765) * C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C3274) *
               C47966 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C3274 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47954 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47895 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47692) *
              C656 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47692 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47895) *
              C657 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47895 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47692) *
              C658 +
          (((C16566 + C16567 + C16568 + C16569) * C16115 +
            (C367 * C16117 + C366 * C16113 +
             (C113 * C300 + C47850 * C319) * C16118 +
             (C113 * C320 + C47850 * C330) * C47914) *
                C47945) *
               C47647 * C47692 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1416 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1417 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47647 * C1418 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47647 * C47937) *
              C47881 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1417 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1416 -
           ((C17430 + C17431 + C17432 + C17433) * C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C1418 +
           ((C17433 + C17432 + C17431 + C17430) * C16115 +
            (C5819 * C16117 + C5818 * C16113 +
             (C113 * C1153 + C47850 * C1164) * C16118 +
             (C113 * C1165 + C47850 * C1171) * C47914) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C6004 * C16117 + C6005 * C16113 + C1600 * C16118 +
              C1599 * C47914) *
                 C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C47895 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C1597 * C47914 + C1598 * C16118 + C1599 * C16113 +
              C1600 * C16117) *
                 C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                 C16115 +
             (C16282 + C16283 + C16284 + C16285) * C47945) *
                C47896 -
            ((C16902 + C16903 + C16904 + C16905) * C47945 +
             (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                 C16115) *
                C47734) *
               C47895 +
           (((C16905 + C16904 + C16903 + C16902) * C16115 +
             (C1598 * C16117 + C1597 * C16113 +
              (C113 * C1584 + C47850 * C1585) * C16118 +
              (C113 * C1586 + C47850 * C1587) * C47914) *
                 C47945) *
                C47734 -
            ((C16286 + C16287 + C16288 + C16289) * C47945 +
             (C16285 + C16284 + C16283 + C16282) * C16115) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47896 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C1416 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47734 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47896) *
              C1417 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47896 -
           ((C17762 + C17763 + C17764 + C17765) * C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47734) *
              C1418 +
          (((C17765 + C17764 + C17763 + C17762) * C16115 +
            ((C113 * C6485 + C47850 * C6487) * C16117 +
             (C113 * C6488 + C47850 * C6491) * C16113 +
             (C113 * C6486 + C47850 * C6489) * C16118 +
             (C113 * C6490 + C47850 * C6492) * C47914) *
                C47945) *
               C47734 -
           ((C17138 + C17139 + C17140 + C17141) * C47945 +
            (C17137 + C17136 + C17135 + C17134) * C16115) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47966 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47954 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47954 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C289 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47966 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47954 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C4936 * C16117 + C4937 * C16113 + C359 * C16118 + C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C16118 + C358 * C16113 + C359 * C16117) *
               C47945 +
           (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
               C16115) *
              C47647 * C47629 * C109 +
          ((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
               C16115 +
           (C357 * C16117 + C356 * C16113 + C364 * C16118 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C16118 + C365 * C16113 + C364 * C16117) *
               C47945 +
           (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
               C16115) *
              C47647 * C47629 * C111 +
          ((C172 * C16117 + C173 * C16113 + C175 * C16118 + C174 * C47914) *
               C16115 +
           (C670 * C16117 + C669 * C16113 +
            (C113 * C660 + C47850 * C661) * C16118 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47967 -
           ((C960 * C47914 + C959 * C16118 + C5562 * C16113 + C5563 * C16117) *
                C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C6002 * C16117 + C6003 * C16113 + C2186 * C16118 +
             C2185 * C47914) *
                C47945) *
               C47930) *
              C47629 * C288 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C959 * C16117 + C960 * C16113 + C961 * C16118 + C962 * C47914) *
                C47945) *
               C47956 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47967 -
           ((C2183 * C47914 + C2184 * C16118 + C2185 * C16113 +
             C2186 * C16117) *
                C47945 +
            (C552 * C47914 + C551 * C16118 + C550 * C16113 + C549 * C16117) *
                C16115) *
               C47930) *
              C47629 * C289 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47967 -
           ((C963 * C47914 + C964 * C16118 + C962 * C16113 + C961 * C16117) *
                C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47956 +
           ((C551 * C16117 + C552 * C16113 + C556 * C16118 + C555 * C47914) *
                C16115 +
            (C2184 * C16117 + C2183 * C16113 +
             (C113 * C2170 + C47850 * C2171) * C16118 +
             (C113 * C2172 + C47850 * C2173) * C47914) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1074 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1075 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1075 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C1074 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C1075 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C16266 + C16267 + C16268 + C16269) * C47945) *
              C47647 * C1142 -
          ((C16270 + C16271 + C16272 + C16273) * C47945 +
           (C16269 + C16268 + C16267 + C16266) * C16115) *
              C47647 * C1143 +
          ((C16273 + C16272 + C16271 + C16270) * C16115 +
           (C17134 + C17135 + C17136 + C17137) * C47945) *
              C47647 * C1144 -
          ((C17138 + C17139 + C17140 + C17141) * C47945 +
           (C17137 + C17136 + C17135 + C17134) * C16115) *
              C47647 * C1145 +
          ((C17141 + C17140 + C17139 + C17138) * C16115 +
           ((C113 * C5793 + C47850 * C5795) * C16117 +
            (C113 * C5796 + C47850 * C5799) * C16113 +
            (C113 * C5794 + C47850 * C5797) * C16118 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47967 -
           ((C16894 + C16895 + C16896 + C16897) * C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C16117 +
             (C113 * C497 + C47850 * C513) * C16113 + C549 * C16118 +
             C550 * C47914) *
                C16115 +
            (C17288 + C17289 + C17290 + C17291) * C47945) *
               C47930) *
              C1074 +
          (((C16897 + C16896 + C16895 + C16894) * C16115 +
            (C17292 + C17293 + C17294 + C17295) * C47945) *
               C47956 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47967 -
           ((C17296 + C17297 + C17298 + C17299) * C47945 +
            (C17291 + C17290 + C17289 + C17288) * C16115) *
               C47930) *
              C1075 +
          (((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C17134 + C17135 + C17136 + C17137) * C47945) *
               C47967 -
           ((C6354 * C47914 + C6355 * C16118 + C6500 * C16113 +
             C6501 * C16117) *
                C47945 +
            (C17295 + C17294 + C17293 + C17292) * C16115) *
               C47956 +
           ((C17299 + C17298 + C17297 + C17296) * C16115 +
            ((C113 * C5973 + C47850 * C5975) * C16117 +
             (C113 * C5976 + C47850 * C5979) * C16113 +
             (C113 * C5974 + C47850 * C5977) * C16118 +
             (C113 * C5978 + C47850 * C5980) * C47914) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47896 -
           ((C960 * C47914 + C959 * C16118 + C5562 * C16113 + C5563 * C16117) *
                C47945 +
            (C547 * C47914 + C548 * C16118 +
             (C113 * C494 + C47850 * C512) * C16113 +
             (C113 * C482 + C47850 * C495) * C16117) *
                C16115) *
               C47734) *
              C47629 * C656 +
          (((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                C16115 +
            (C959 * C16117 + C960 * C16113 + C961 * C16118 + C962 * C47914) *
                C47945) *
               C47734 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47896) *
              C47629 * C657 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47896 -
           ((C963 * C47914 + C964 * C16118 + C962 * C16113 + C961 * C16117) *
                C47945 +
            (C554 * C47914 + C553 * C16118 + C545 * C16113 + C546 * C16117) *
                C16115) *
               C47734) *
              C47629 * C658 +
          (((C553 * C16117 + C554 * C16113 + C780 * C16118 + C779 * C47914) *
                C16115 +
            (C964 * C16117 + C963 * C16113 +
             (C113 * C930 + C47850 * C939) * C16118 +
             (C113 * C940 + C47850 * C945) * C47914) *
                C47945) *
               C47734 -
           ((C16569 + C16568 + C16567 + C16566) * C47945 +
            (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
                C16115) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C16117 +
              (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
              C167 * C47914) *
                 C16115 +
             (C16266 + C16267 + C16268 + C16269) * C47945) *
                C47896 -
            ((C16894 + C16895 + C16896 + C16897) * C47945 +
             (C547 * C47914 + C548 * C16118 +
              (C113 * C494 + C47850 * C512) * C16113 +
              (C113 * C482 + C47850 * C495) * C16117) *
                 C16115) *
                C47734) *
               C1074 +
           (((C16897 + C16896 + C16895 + C16894) * C16115 +
             (C17292 + C17293 + C17294 + C17295) * C47945) *
                C47734 -
            ((C16270 + C16271 + C16272 + C16273) * C47945 +
             (C16269 + C16268 + C16267 + C16266) * C16115) *
                C47896) *
               C1075 +
           (((C16273 + C16272 + C16271 + C16270) * C16115 +
             (C17134 + C17135 + C17136 + C17137) * C47945) *
                C47896 -
            ((C6354 * C47914 + C6355 * C16118 + C6500 * C16113 +
              C6501 * C16117) *
                 C47945 +
             (C17295 + C17294 + C17293 + C17292) * C16115) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C16117 + C547 * C16113 + C546 * C16118 + C545 * C47914) *
                 C16115 +
             (C16898 + C16899 + C16900 + C16901) * C47945) *
                C47734 -
            ((C16277 + C16276 + C16275 + C16274) * C47945 +
             (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                 C16115) *
                C47896) *
               C1074 +
           (((C16274 + C16275 + C16276 + C16277) * C16115 +
             (C16278 + C16279 + C16280 + C16281) * C47945) *
                C47896 -
            ((C17628 + C17629 + C17630 + C17631) * C47945 +
             (C16901 + C16900 + C16899 + C16898) * C16115) *
                C47734) *
               C1075 +
           (((C17631 + C17630 + C17629 + C17628) * C16115 +
             (C6355 * C16117 + C6354 * C16113 +
              (C113 * C1700 + C47850 * C1705) * C16118 +
              (C113 * C1706 + C47850 * C1709) * C47914) *
                 C47945) *
                C47734 -
            ((C17430 + C17431 + C17432 + C17433) * C47945 +
             (C16281 + C16280 + C16279 + C16278) * C16115) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C4936 * C16117 + C4937 * C16113 + C359 * C16118 + C358 * C47914) *
               C47945) *
              C47647 * C47629 * C108 -
          ((C356 * C47914 + C357 * C16118 + C358 * C16113 + C359 * C16117) *
               C47945 +
           (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
               C16115) *
              C47647 * C47629 * C109 +
          ((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
               C16115 +
           (C357 * C16117 + C356 * C16113 + C364 * C16118 + C365 * C47914) *
               C47945) *
              C47647 * C47629 * C110 -
          ((C669 * C47914 + C670 * C16118 + C365 * C16113 + C364 * C16117) *
               C47945 +
           (C173 * C47914 + C172 * C16118 + C170 * C16113 + C171 * C16117) *
               C16115) *
              C47647 * C47629 * C111 +
          ((C172 * C16117 + C173 * C16113 + C175 * C16118 + C174 * C47914) *
               C16115 +
           (C670 * C16117 + C669 * C16113 +
            (C113 * C660 + C47850 * C661) * C16118 +
            (C113 * C662 + C47850 * C663) * C47914) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C47966 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C47954 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C288 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C47954 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C47966 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C289 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C47966 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C47954 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C16117 +
             (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
             C167 * C47914) *
                C16115 +
            (C16266 + C16267 + C16268 + C16269) * C47945) *
               C47647 * C1074 -
           ((C16270 + C16271 + C16272 + C16273) * C47945 +
            (C16269 + C16268 + C16267 + C16266) * C16115) *
               C47647 * C1075 +
           ((C16273 + C16272 + C16271 + C16270) * C16115 +
            (C5816 * C16117 + C5817 * C16113 + C1438 * C16118 +
             C1437 * C47914) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C16274 + C16275 + C16276 + C16277) * C16115 +
            (C16278 + C16279 + C16280 + C16281) * C47945) *
               C47647 * C1075 -
           ((C16277 + C16276 + C16275 + C16274) * C47945 +
            (C169 * C47914 + C168 * C16118 + C167 * C16113 + C166 * C16117) *
                C16115) *
               C47647 * C1074 -
           ((C1435 * C47914 + C1436 * C16118 + C1437 * C16113 +
             C1438 * C16117) *
                C47945 +
            (C16281 + C16280 + C16279 + C16278) * C16115) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C16117 + C169 * C16113 + C171 * C16118 + C170 * C47914) *
                C16115 +
            (C16282 + C16283 + C16284 + C16285) * C47945) *
               C47647 * C1074 -
           ((C16286 + C16287 + C16288 + C16289) * C47945 +
            (C16285 + C16284 + C16283 + C16282) * C16115) *
               C47647 * C1075 +
           ((C16289 + C16288 + C16287 + C16286) * C16115 +
            (C1436 * C16117 + C1435 * C16113 +
             (C113 * C1422 + C47850 * C1423) * C16118 +
             (C113 * C1424 + C47850 * C1425) * C47914) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C16117 +
            (C113 * C125 + C47850 * C138) * C16113 + C166 * C16118 +
            C167 * C47914) *
               C16115 +
           (C16266 + C16267 + C16268 + C16269) * C47945) *
              C47647 * C1142 -
          ((C16270 + C16271 + C16272 + C16273) * C47945 +
           (C16269 + C16268 + C16267 + C16266) * C16115) *
              C47647 * C1143 +
          ((C16273 + C16272 + C16271 + C16270) * C16115 +
           (C17134 + C17135 + C17136 + C17137) * C47945) *
              C47647 * C1144 -
          ((C17138 + C17139 + C17140 + C17141) * C47945 +
           (C17137 + C17136 + C17135 + C17134) * C16115) *
              C47647 * C1145 +
          ((C17141 + C17140 + C17139 + C17138) * C16115 +
           ((C113 * C5793 + C47850 * C5795) * C16117 +
            (C113 * C5796 + C47850 * C5799) * C16113 +
            (C113 * C5794 + C47850 * C5797) * C16118 +
            (C113 * C5798 + C47850 * C5800) * C47914) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47688 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47695 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47647 * C2880) *
              C47606 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C47695 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47688 -
           ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
            C21762 * C21628) *
               C47647 * C2880) *
              C47615 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47688 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47695 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47896 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47688 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47896) *
               C47695 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C47896 -
            ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
             C22534 * C21628) *
                C47734) *
               C2880) *
              C2620 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47896) *
               C47688 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C47896 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47695 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47973 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47969 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47647 * C47959 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47647 * C47937) *
              C2620 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C47969 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47973 -
           ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
            C21762 * C21628) *
               C47647 * C47959 +
           (C22648 * C21628 + (C22650 + C22649) * C21629 +
            ((C113 * C5794 + C47850 * C5797) * C21631 +
             (C113 * C5798 + C47850 * C5800) * C47576) *
                C21630) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C2512 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47692) *
              C47972 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C47692 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C2512 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47692) *
              C47952 +
          (((C21972 + C21973) * C21628 + (C21974 + C21975) * C21629 +
            ((C113 * C1422 + C47850 * C1423) * C21631 +
             (C113 * C1424 + C47850 * C1425) * C47576) *
                C21630) *
               C47647 * C47692 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47967 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47956 +
            (((C113 * C483 + C47850 * C496) * C21631 +
              (C113 * C497 + C47850 * C513) * C47576) *
                 C21628 +
             (C22535 + C22536) * C21629 + C22545 * C21630) *
                C47930) *
               C2512 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47956 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47967 -
            ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
             (C22536 + C22535) * C21628) *
                C47930) *
               C47692) *
              C2620 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47956 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47967 -
            ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
             (C550 * C47576 + C549 * C21631) * C21628) *
                C47930) *
               C2512 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C47967 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47956 +
            ((C23346 + C23345) * C21628 + (C23344 + C23343) * C21629 +
             ((C113 * C5974 + C47850 * C5977) * C21631 +
              (C113 * C5978 + C47850 * C5980) * C47576) *
                 C21630) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47850 * C124) * C21631 +
                       (C113 * C125 + C47850 * C138) * C47576) *
                          C21628 +
                      (C21743 + C21744) * C21629 + C21761 * C21630) *
                         C47896 -
                     (C22534 * C21630 + (C22222 + C22223) * C21629 +
                      ((C113 * C494 + C47850 * C512) * C47576 +
                       (C113 * C482 + C47850 * C495) * C21631) *
                          C21628) *
                         C47734) *
                        C2512 +
                    (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
                      C22902 * C21630) *
                         C47734 -
                     (C22408 * C21630 + (C21746 + C21745) * C21629 +
                      (C21744 + C21743) * C21628) *
                         C47896) *
                        C47692) *
                       C47606 +
                   ((((C548 * C21631 + C547 * C47576) * C21628 +
                      (C22224 + C22225) * C21629 + C22797 * C21630) *
                         C47734 -
                     (C21762 * C21630 + (C21750 + C21749) * C21629 +
                      (C167 * C47576 + C166 * C21631) * C21628) *
                         C47896) *
                        C2512 +
                    (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
                      C22648 * C21630) *
                         C47896 -
                     ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
                      (C22225 + C22224) * C21628) *
                         C47734) *
                        C47692) *
                       C47615 +
                   ((((C168 * C21631 + C169 * C47576) * C21628 +
                      (C21755 + C21756) * C21629 + C21763 * C21630) *
                         C47896 -
                     ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
                      (C545 * C47576 + C546 * C21631) * C21628) *
                         C47734) *
                        C2512 +
                    (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
                      ((C113 * C1700 + C47850 * C1705) * C21631 +
                       (C113 * C1706 + C47850 * C1709) * C47576) *
                          C21630) *
                         C47734 -
                     ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
                      (C21756 + C21755) * C21628) *
                         C47896) *
                        C47692) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C2512 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47692) *
              C47972 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C47692 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C2512) *
              C47965 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C2512 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47692) *
              C47952 +
          (((C21972 + C21973) * C21628 + (C21974 + C21975) * C21629 +
            ((C113 * C1422 + C47850 * C1423) * C21631 +
             (C113 * C1424 + C47850 * C1425) * C47576) *
                C21630) *
               C47647 * C47692 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47973 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47969 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47647 * C47959 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47647 * C47937) *
              C2620 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C47969 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47973 -
           ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
            C21762 * C21628) *
               C47647 * C47959 +
           (C22648 * C21628 + (C22650 + C22649) * C21629 +
            ((C113 * C5794 + C47850 * C5797) * C21631 +
             (C113 * C5798 + C47850 * C5800) * C47576) *
                C21630) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C3274 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47688 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C3274) *
               C47695 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C3274 -
            ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
             C22534 * C21628) *
                C47734) *
               C2880) *
              C47881 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C3274) *
               C47688 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C3274 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47695 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47730 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47737 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C3782) *
              C47688 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47737 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47730 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C3782) *
              C47695 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47730 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C47737 +
           (C22545 * C21628 + (C22549 + C22548) * C21629 +
            ((C113 * C22529 + C47850 * C22530) * C21631 +
             (C113 * C22531 + C47850 * C22532) * C47576) *
                C21630) *
               C3782) *
              C2880) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C3274 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47973 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47734 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C3274) *
              C47969 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C3274 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C47734) *
              C47959 +
          ((C22902 * C21628 + (C22910 + C22909) * C21629 +
            ((C113 * C22897 + C47850 * C22898) * C21631 +
             (C113 * C22899 + C47850 * C22900) * C47576) *
                C21630) *
               C47734 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C3274 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C2512 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C3274) *
               C2512 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C3274 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C21631 + C169 * C47576) * C21628 +
             (C21755 + C21756) * C21629 + C21763 * C21630) *
                C3274 -
            ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
             (C545 * C47576 + C546 * C21631) * C21628) *
                C47734) *
               C2512 +
           (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
             ((C113 * C1700 + C47850 * C1705) * C21631 +
              (C113 * C1706 + C47850 * C1709) * C47576) *
                 C21630) *
                C47734 -
            ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
             (C21756 + C21755) * C21628) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47974 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47962 -
           ((C23555 + C23556) * C21630 + (C23551 + C23552) * C21629 +
            ((C113 * C2010 + C47850 * C2020) * C47576 +
             (C113 * C2002 + C47850 * C2011) * C21631) *
                C21628) *
               C47943) *
              C2512 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47971 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47974 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C47962 +
           ((C23552 + C23551) * C21628 + (C23556 + C23555) * C21629 +
            ((C113 * C23542 + C47850 * C23543) * C21631 +
             (C113 * C23544 + C47850 * C23545) * C47576) *
                C21630) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47850 * C124) * C21631 +
                       (C113 * C125 + C47850 * C138) * C47576) *
                          C21628 +
                      (C21743 + C21744) * C21629 + C21761 * C21630) *
                         C47730 -
                     (C22534 * C21630 + (C22222 + C22223) * C21629 +
                      ((C113 * C494 + C47850 * C512) * C47576 +
                       (C113 * C482 + C47850 * C495) * C21631) *
                          C21628) *
                         C47737 +
                     (((C113 * C483 + C47850 * C496) * C21631 +
                       (C113 * C497 + C47850 * C513) * C47576) *
                          C21628 +
                      (C22535 + C22536) * C21629 + C22545 * C21630) *
                         C3782) *
                        C2512 +
                    (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
                      C22902 * C21630) *
                         C47737 -
                     (C22408 * C21630 + (C21746 + C21745) * C21629 +
                      (C21744 + C21743) * C21628) *
                         C47730 -
                     ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
                      (C22536 + C22535) * C21628) *
                         C3782) *
                        C47692) *
                       C47881 +
                   ((((C548 * C21631 + C547 * C47576) * C21628 +
                      (C22224 + C22225) * C21629 + C22797 * C21630) *
                         C47737 -
                     (C21762 * C21630 + (C21750 + C21749) * C21629 +
                      (C167 * C47576 + C166 * C21631) * C21628) *
                         C47730 -
                     ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
                      (C550 * C47576 + C549 * C21631) * C21628) *
                         C3782) *
                        C2512 +
                    (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
                      C22648 * C21630) *
                         C47730 -
                     ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
                      (C22225 + C22224) * C21628) *
                         C47737 +
                     ((C23346 + C23345) * C21628 + (C23344 + C23343) * C21629 +
                      ((C113 * C5974 + C47850 * C5977) * C21631 +
                       (C113 * C5978 + C47850 * C5980) * C47576) *
                          C21630) *
                         C3782) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C3274 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C2512 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C3274) *
               C47692) *
              C47963 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C3274) *
               C2512 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C3274 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47692) *
              C47950 +
          ((((C168 * C21631 + C169 * C47576) * C21628 +
             (C21755 + C21756) * C21629 + C21763 * C21630) *
                C3274 -
            ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
             (C545 * C47576 + C546 * C21631) * C21628) *
                C47734) *
               C2512 +
           (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
             ((C113 * C1700 + C47850 * C1705) * C21631 +
              (C113 * C1706 + C47850 * C1709) * C47576) *
                 C21630) *
                C47734 -
            ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
             (C21756 + C21755) * C21628) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C3274 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47973 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47734 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C3274) *
              C47969 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C3274 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C47734) *
              C47959 +
          ((C22902 * C21628 + (C22910 + C22909) * C21629 +
            ((C113 * C22897 + C47850 * C22898) * C21631 +
             (C113 * C22899 + C47850 * C22900) * C47576) *
                C21630) *
               C47734 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1416 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1417 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47647 * C1418 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47647 * C47937) *
              C47881 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C1417 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1416 -
           ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
            C21762 * C21628) *
               C47647 * C1418 +
           (C22648 * C21628 + (C22650 + C22649) * C21629 +
            ((C113 * C5794 + C47850 * C5797) * C21631 +
             (C113 * C5798 + C47850 * C5800) * C47576) *
                C21630) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47895 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47692) *
              C656 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C47692 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47895) *
              C657 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47895 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47692) *
              C658 +
          (((C21972 + C21973) * C21628 + (C21974 + C21975) * C21629 +
            ((C113 * C1422 + C47850 * C1423) * C21631 +
             (C113 * C1424 + C47850 * C1425) * C47576) *
                C21630) *
               C47647 * C47692 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C1820 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C1821 +
            (((C113 * C483 + C47850 * C496) * C21631 +
              (C113 * C497 + C47850 * C513) * C47576) *
                 C21628 +
             (C22535 + C22536) * C21629 + C22545 * C21630) *
                C47930) *
               C47895 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C1821 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C1820 -
            ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
             (C22536 + C22535) * C21628) *
                C47930) *
               C47692) *
              C47881 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C1821 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C1820 -
            ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
             (C550 * C47576 + C549 * C21631) * C21628) *
                C47930) *
               C47895 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C1820 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C1821 +
            ((C23346 + C23345) * C21628 + (C23344 + C23343) * C21629 +
             ((C113 * C5974 + C47850 * C5977) * C21631 +
              (C113 * C5978 + C47850 * C5980) * C47576) *
                 C21630) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47896 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C1416 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47734 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47896) *
              C1417 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47896 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C47734) *
              C1418 +
          ((C22902 * C21628 + (C22910 + C22909) * C21629 +
            ((C113 * C22897 + C47850 * C22898) * C21631 +
             (C113 * C22899 + C47850 * C22900) * C47576) *
                C21630) *
               C47734 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47896 -
            ((C22220 + C22221) * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47895 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             (C6501 * C21631 + C6500 * C47576) * C21630) *
                C47734 -
            ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + (C22226 + C22227) * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47896) *
               C47895 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             (C21753 + C21754) * C21630) *
                C47896 -
            ((C6354 * C47576 + C6355 * C21631) * C21630 +
             (C22227 + C22226) * C21629 + (C22225 + C22224) * C21628) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C21631 + C169 * C47576) * C21628 +
             (C21755 + C21756) * C21629 + C21763 * C21630) *
                C47896 -
            ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
             (C545 * C47576 + C546 * C21631) * C21628) *
                C47734) *
               C47895 +
           (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
             ((C113 * C1700 + C47850 * C1705) * C21631 +
              (C113 * C1706 + C47850 * C1709) * C47576) *
                 C21630) *
                C47734 -
            ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
             (C21756 + C21755) * C21628) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C2284 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C2286 -
           ((C23555 + C23556) * C21630 + (C23551 + C23552) * C21629 +
            ((C113 * C2010 + C47850 * C2020) * C47576 +
             (C113 * C2002 + C47850 * C2011) * C21631) *
                C21628) *
               C47943) *
              C47895 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C2285 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C2284 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C2286 +
           ((C23552 + C23551) * C21628 + (C23556 + C23555) * C21629 +
            ((C113 * C23542 + C47850 * C23543) * C21631 +
             (C113 * C23544 + C47850 * C23545) * C47576) *
                C21630) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C47850 * C124) * C21631 +
                (C113 * C125 + C47850 * C138) * C47576) *
                   C21628 +
               (C4936 * C21631 + C4937 * C47576) * C21629 +
               (C4939 * C21631 + C4938 * C47576) * C21630) *
                  C47647 * C47629 * C108 -
              ((C361 * C47576 + C360 * C21631) * C21630 +
               (C358 * C47576 + C359 * C21631) * C21629 +
               (C167 * C47576 + C166 * C21631) * C21628) *
                  C47647 * C47629 * C109 +
              ((C168 * C21631 + C169 * C47576) * C21628 +
               (C357 * C21631 + C356 * C47576) * C21629 +
               (C362 * C21631 + C363 * C47576) * C21630) *
                  C47647 * C47629 * C110 -
              ((C366 * C47576 + C367 * C21631) * C21630 +
               (C365 * C47576 + C364 * C21631) * C21629 +
               (C170 * C47576 + C171 * C21631) * C21628) *
                  C47647 * C47629 * C111 +
              ((C172 * C21631 + C173 * C47576) * C21628 +
               (C670 * C21631 + C669 * C47576) * C21629 +
               ((C113 * C300 + C47850 * C319) * C21631 +
                (C113 * C320 + C47850 * C330) * C47576) *
                   C21630) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C47850 * C124) * C21631 +
                 (C113 * C125 + C47850 * C138) * C47576) *
                    C21628 +
                (C21743 + C21744) * C21629 + C21761 * C21630) *
                   C47647 * C47966 -
               ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
                (C21744 + C21743) * C21628) *
                   C47647 * C47954 +
               (C21761 * C21628 + (C21748 + C21747) * C21629 +
                (C5821 * C21631 + C5820 * C47576) * C21630) *
                   C47647 * C47927) *
                  C288 +
              (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
                (C21753 + C21754) * C21630) *
                   C47647 * C47954 -
               (C21762 * C21630 + (C21750 + C21749) * C21629 +
                (C167 * C47576 + C166 * C21631) * C21628) *
                   C47647 * C47966 -
               ((C5818 * C47576 + C5819 * C21631) * C21630 +
                (C21754 + C21753) * C21629 + C21762 * C21628) *
                   C47647 * C47927) *
                  C289 +
              (((C168 * C21631 + C169 * C47576) * C21628 +
                (C21755 + C21756) * C21629 + C21763 * C21630) *
                   C47647 * C47966 -
               ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
                (C21756 + C21755) * C21628) *
                   C47647 * C47954 +
               (C21763 * C21628 + (C21760 + C21759) * C21629 +
                ((C113 * C1153 + C47850 * C1164) * C21631 +
                 (C113 * C1165 + C47850 * C1171) * C47576) *
                    C21630) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C117 + C47850 * C124) * C21631 +
                                 (C113 * C125 + C47850 * C138) * C47576) *
                                    C21628 +
                                (C21743 + C21744) * C21629 + C21761 * C21630) *
                                   C47967 -
                               ((C6005 * C47576 + C6004 * C21631) * C21630 +
                                (C5562 * C47576 + C5563 * C21631) * C21629 +
                                ((C113 * C494 + C47850 * C512) * C47576 +
                                 (C113 * C482 + C47850 * C495) * C21631) *
                                    C21628) *
                                   C47956 +
                               (((C113 * C483 + C47850 * C496) * C21631 +
                                 (C113 * C497 + C47850 * C513) * C47576) *
                                    C21628 +
                                (C6002 * C21631 + C6003 * C47576) * C21629 +
                                (C6009 * C21631 + C6008 * C47576) * C21630) *
                                   C47930) *
                                  C47629 * C288 +
                              (((C548 * C21631 + C547 * C47576) * C21628 +
                                (C959 * C21631 + C960 * C47576) * C21629 +
                                (C1600 * C21631 + C1599 * C47576) * C21630) *
                                   C47956 -
                               (C21762 * C21630 + (C21750 + C21749) * C21629 +
                                (C167 * C47576 + C166 * C21631) * C21628) *
                                   C47967 -
                               ((C6006 * C47576 + C6007 * C21631) * C21630 +
                                (C2185 * C47576 + C2186 * C21631) * C21629 +
                                (C550 * C47576 + C549 * C21631) * C21628) *
                                   C47930) *
                                  C47629 * C289 +
                              (((C168 * C21631 + C169 * C47576) * C21628 +
                                (C21755 + C21756) * C21629 + C21763 * C21630) *
                                   C47967 -
                               ((C1597 * C47576 + C1598 * C21631) * C21630 +
                                (C962 * C47576 + C961 * C21631) * C21629 +
                                (C545 * C47576 + C546 * C21631) * C21628) *
                                   C47956 +
                               ((C551 * C21631 + C552 * C47576) * C21628 +
                                (C2184 * C21631 + C2183 * C47576) * C21629 +
                                ((C113 * C1290 + C47850 * C1307) * C21631 +
                                 (C113 * C1308 + C47850 * C1317) * C47576) *
                                    C21630) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1074 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1075 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C47963 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C1075 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1074 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C1074 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C1075 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C21743 + C21744) * C21629 + C21761 * C21630) *
              C47647 * C1142 -
          (C22408 * C21630 + (C21746 + C21745) * C21629 +
           (C21744 + C21743) * C21628) *
              C47647 * C1143 +
          (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
              C47647 * C1144 -
          ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
           C22408 * C21628) *
              C47647 * C1145 +
          (C22415 * C21628 + (C22419 + C22418) * C21629 +
           ((C113 * C22403 + C47850 * C22404) * C21631 +
            (C113 * C22405 + C47850 * C22406) * C47576) *
               C21630) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47967 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C1074 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            (C22539 + C22540) * C21630) *
               C47956 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47967 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C47930) *
              C1075 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47967 -
           (((C113 * C6488 + C47850 * C6491) * C47576 +
             (C113 * C6485 + C47850 * C6487) * C21631) *
                C21630 +
            (C22540 + C22539) * C21629 + C22534 * C21628) *
               C47956 +
           (C22545 * C21628 + (C22549 + C22548) * C21629 +
            ((C113 * C22529 + C47850 * C22530) * C21631 +
             (C113 * C22531 + C47850 * C22532) * C47576) *
                C21630) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C1820 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C1821 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C1820 -
           ((C6006 * C47576 + C6007 * C21631) * C21630 +
            (C2185 * C47576 + C2186 * C21631) * C21629 +
            (C550 * C47576 + C549 * C21631) * C21628) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C1820 -
           ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C1821 +
           ((C551 * C21631 + C552 * C47576) * C21628 +
            (C2184 * C21631 + C2183 * C47576) * C21629 +
            ((C113 * C1290 + C47850 * C1307) * C21631 +
             (C113 * C1308 + C47850 * C1317) * C47576) *
                C21630) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C1820 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C47966 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C1821 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C1820 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C47930) *
              C47954 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C1820 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C1821 +
           (C22545 * C21628 + (C22549 + C22548) * C21629 +
            ((C113 * C22529 + C47850 * C22530) * C21631 +
             (C113 * C22531 + C47850 * C22532) * C47576) *
                C21630) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C21743 + C21744) * C21629 + C21761 * C21630) *
              C1995 -
          (C22534 * C21630 + (C22222 + C22223) * C21629 +
           ((C113 * C494 + C47850 * C512) * C47576 +
            (C113 * C482 + C47850 * C495) * C21631) *
               C21628) *
              C1996 +
          (((C113 * C483 + C47850 * C496) * C21631 +
            (C113 * C497 + C47850 * C513) * C47576) *
               C21628 +
           (C22535 + C22536) * C21629 + C22545 * C21630) *
              C1997 -
          (((C113 * C7352 + C47850 * C7355) * C47576 +
            (C113 * C7349 + C47850 * C7351) * C21631) *
               C21630 +
           (C7364 * C47576 + C7365 * C21631) * C21629 +
           ((C113 * C2010 + C47850 * C2020) * C47576 +
            (C113 * C2002 + C47850 * C2011) * C21631) *
               C21628) *
              C1998 +
          (((C113 * C2003 + C47850 * C2012) * C21631 +
            (C113 * C2013 + C47850 * C2021) * C47576) *
               C21628 +
           ((C113 * C6877 + C47850 * C6879) * C21631 +
            (C113 * C6880 + C47850 * C6883) * C47576) *
               C21629 +
           ((C113 * C23192 + C47850 * C23193) * C21631 +
            (C113 * C23194 + C47850 * C23195) * C47576) *
               C21630) *
              C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47896 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C1074 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             (C22539 + C22540) * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47896) *
               C1075 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C47896 -
            (((C113 * C6488 + C47850 * C6491) * C47576 +
              (C113 * C6485 + C47850 * C6487) * C21631) *
                 C21630 +
             (C22540 + C22539) * C21629 + C22534 * C21628) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47896) *
               C1074 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C47896 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C1075 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47896 -
           ((C6005 * C47576 + C6004 * C21631) * C21630 +
            (C5562 * C47576 + C5563 * C21631) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47629 * C656 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C959 * C21631 + C960 * C47576) * C21629 +
            (C1600 * C21631 + C1599 * C47576) * C21630) *
               C47734 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47896) *
              C47629 * C657 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47896 -
           ((C1597 * C47576 + C1598 * C21631) * C21630 +
            (C962 * C47576 + C961 * C21631) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C47734) *
              C47629 * C658 +
          (((C553 * C21631 + C554 * C47576) * C21628 +
            (C964 * C21631 + C963 * C47576) * C21629 +
            ((C113 * C1584 + C47850 * C1585) * C21631 +
             (C113 * C1586 + C47850 * C1587) * C47576) *
                C21630) *
               C47734 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C2284 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C2285 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C2286 -
           (((C113 * C7352 + C47850 * C7355) * C47576 +
             (C113 * C7349 + C47850 * C7351) * C21631) *
                C21630 +
            (C7364 * C47576 + C7365 * C21631) * C21629 +
            ((C113 * C2010 + C47850 * C2020) * C47576 +
             (C113 * C2002 + C47850 * C2011) * C21631) *
                C21628) *
               C47943) *
              C47629 * C47881 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C2285 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C2284 -
           ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
            (C550 * C47576 + C549 * C21631) * C21628) *
               C2286 +
           ((C2304 * C21631 + C2303 * C47576) * C21628 +
            (C7219 * C21631 + C7218 * C47576) * C21629 +
            ((C113 * C7350 + C47850 * C7353) * C21631 +
             (C113 * C7354 + C47850 * C7356) * C47576) *
                C21630) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47966 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47954 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C288 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C47954 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47966 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C289 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47966 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47954 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C4936 * C21631 + C4937 * C47576) * C21629 +
           (C4939 * C21631 + C4938 * C47576) * C21630) *
              C47647 * C47629 * C108 -
          ((C361 * C47576 + C360 * C21631) * C21630 +
           (C358 * C47576 + C359 * C21631) * C21629 +
           (C167 * C47576 + C166 * C21631) * C21628) *
              C47647 * C47629 * C109 +
          ((C168 * C21631 + C169 * C47576) * C21628 +
           (C357 * C21631 + C356 * C47576) * C21629 +
           (C362 * C21631 + C363 * C47576) * C21630) *
              C47647 * C47629 * C110 -
          ((C366 * C47576 + C367 * C21631) * C21630 +
           (C365 * C47576 + C364 * C21631) * C21629 +
           (C170 * C47576 + C171 * C21631) * C21628) *
              C47647 * C47629 * C111 +
          ((C172 * C21631 + C173 * C47576) * C21628 +
           (C670 * C21631 + C669 * C47576) * C21629 +
           ((C113 * C300 + C47850 * C319) * C21631 +
            (C113 * C320 + C47850 * C330) * C47576) *
               C21630) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1074 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1075 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C47963 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C1075 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1074 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C1074 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C1075 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C21743 + C21744) * C21629 + C21761 * C21630) *
              C47647 * C1142 -
          (C22408 * C21630 + (C21746 + C21745) * C21629 +
           (C21744 + C21743) * C21628) *
              C47647 * C1143 +
          (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
              C47647 * C1144 -
          ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
           C22408 * C21628) *
              C47647 * C1145 +
          (C22415 * C21628 + (C22419 + C22418) * C21629 +
           ((C113 * C22403 + C47850 * C22404) * C21631 +
            (C113 * C22405 + C47850 * C22406) * C47576) *
               C21630) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C1820 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C47629 * C47963 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C1821 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C1820 -
           ((C6006 * C47576 + C6007 * C21631) * C21630 +
            (C2185 * C47576 + C2186 * C21631) * C21629 +
            (C550 * C47576 + C549 * C21631) * C21628) *
               C47930) *
              C47629 * C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C1820 -
           ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C1821 +
           ((C551 * C21631 + C552 * C47576) * C21628 +
            (C2184 * C21631 + C2183 * C47576) * C21629 +
            ((C113 * C1290 + C47850 * C1307) * C21631 +
             (C113 * C1308 + C47850 * C1317) * C47576) *
                C21630) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C1820 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C1821 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C47966 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C1821 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C1820 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C47930) *
              C47954 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C1820 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C1821 +
           (C22545 * C21628 + (C22549 + C22548) * C21629 +
            ((C113 * C22529 + C47850 * C22530) * C21631 +
             (C113 * C22531 + C47850 * C22532) * C47576) *
                C21630) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47850 * C124) * C21631 +
                       (C113 * C125 + C47850 * C138) * C47576) *
                          C21628 +
                      (C21743 + C21744) * C21629 + C21761 * C21630) *
                         C3274 -
                     (C22534 * C21630 + (C22222 + C22223) * C21629 +
                      ((C113 * C494 + C47850 * C512) * C47576 +
                       (C113 * C482 + C47850 * C495) * C21631) *
                          C21628) *
                         C47734) *
                        C47895 +
                    (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
                      C22902 * C21630) *
                         C47734 -
                     (C22408 * C21630 + (C21746 + C21745) * C21629 +
                      (C21744 + C21743) * C21628) *
                         C3274) *
                        C47692) *
                       C47606 +
                   ((((C548 * C21631 + C547 * C47576) * C21628 +
                      (C22224 + C22225) * C21629 + C22797 * C21630) *
                         C47734 -
                     (C21762 * C21630 + (C21750 + C21749) * C21629 +
                      (C167 * C47576 + C166 * C21631) * C21628) *
                         C3274) *
                        C47895 +
                    (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
                      C22648 * C21630) *
                         C3274 -
                     ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
                      (C22225 + C22224) * C21628) *
                         C47734) *
                        C47692) *
                       C47615 +
                   ((((C168 * C21631 + C169 * C47576) * C21628 +
                      (C21755 + C21756) * C21629 + C21763 * C21630) *
                         C3274 -
                     ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
                      (C545 * C47576 + C546 * C21631) * C21628) *
                         C47734) *
                        C47895 +
                    (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
                      ((C113 * C1700 + C47850 * C1705) * C21631 +
                       (C113 * C1706 + C47850 * C1709) * C47576) *
                          C21630) *
                         C47734 -
                     ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
                      (C21756 + C21755) * C21628) *
                         C3274) *
                        C47692) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C117 + C47850 * C124) * C21631 +
                       (C113 * C125 + C47850 * C138) * C47576) *
                          C21628 +
                      (C21743 + C21744) * C21629 + C21761 * C21630) *
                         C47730 -
                     (C22534 * C21630 + (C22222 + C22223) * C21629 +
                      ((C113 * C494 + C47850 * C512) * C47576 +
                       (C113 * C482 + C47850 * C495) * C21631) *
                          C21628) *
                         C47737 +
                     (((C113 * C483 + C47850 * C496) * C21631 +
                       (C113 * C497 + C47850 * C513) * C47576) *
                          C21628 +
                      (C22535 + C22536) * C21629 + C22545 * C21630) *
                         C3782) *
                        C47895 +
                    (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
                      C22902 * C21630) *
                         C47737 -
                     (C22408 * C21630 + (C21746 + C21745) * C21629 +
                      (C21744 + C21743) * C21628) *
                         C47730 -
                     ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
                      (C22536 + C22535) * C21628) *
                         C3782) *
                        C47692) *
                       C2620 +
                   ((((C548 * C21631 + C547 * C47576) * C21628 +
                      (C22224 + C22225) * C21629 + C22797 * C21630) *
                         C47737 -
                     (C21762 * C21630 + (C21750 + C21749) * C21629 +
                      (C167 * C47576 + C166 * C21631) * C21628) *
                         C47730 -
                     ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
                      (C550 * C47576 + C549 * C21631) * C21628) *
                         C3782) *
                        C47895 +
                    (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
                      C22648 * C21630) *
                         C47730 -
                     ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
                      (C22225 + C22224) * C21628) *
                         C47737 +
                     ((C23346 + C23345) * C21628 + (C23344 + C23343) * C21629 +
                      ((C113 * C5974 + C47850 * C5977) * C21631 +
                       (C113 * C5978 + C47850 * C5980) * C47576) *
                          C21630) *
                         C3782) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C3274 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47966 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C3274) *
               C47954 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C3274 -
            ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
             C22534 * C21628) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C3274) *
               C47966 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C3274 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47954 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C3274 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C47734 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C3274 -
           ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C21631 + C554 * C47576) * C21628 +
            (C964 * C21631 + C963 * C47576) * C21629 +
            ((C113 * C1584 + C47850 * C1585) * C21631 +
             (C113 * C1586 + C47850 * C1587) * C47576) *
                C21630) *
               C47734 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47974 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47971 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47962 -
           ((C23555 + C23556) * C21630 + (C23551 + C23552) * C21629 +
            ((C113 * C2010 + C47850 * C2020) * C47576 +
             (C113 * C2002 + C47850 * C2011) * C21631) *
                C21628) *
               C47943) *
              C47629 * C2620 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C47971 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47974 -
           ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
            (C550 * C47576 + C549 * C21631) * C21628) *
               C47962 +
           ((C2304 * C21631 + C2303 * C47576) * C21628 +
            (C7219 * C21631 + C7218 * C47576) * C21629 +
            ((C113 * C7350 + C47850 * C7353) * C21631 +
             (C113 * C7354 + C47850 * C7356) * C47576) *
                C21630) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C47850 * C124) * C21631 +
                      (C113 * C125 + C47850 * C138) * C47576) *
                         C21628 +
                     (C21743 + C21744) * C21629 + C21761 * C21630) *
                        C47730 -
                    (C22534 * C21630 + (C22222 + C22223) * C21629 +
                     ((C113 * C494 + C47850 * C512) * C47576 +
                      (C113 * C482 + C47850 * C495) * C21631) *
                         C21628) *
                        C47737 +
                    (((C113 * C483 + C47850 * C496) * C21631 +
                      (C113 * C497 + C47850 * C513) * C47576) *
                         C21628 +
                     (C22535 + C22536) * C21629 + C22545 * C21630) *
                        C3782) *
                       C47629 * C47606 +
                   (((C548 * C21631 + C547 * C47576) * C21628 +
                     (C22224 + C22225) * C21629 + C22797 * C21630) *
                        C47737 -
                    (C21762 * C21630 + (C21750 + C21749) * C21629 +
                     (C167 * C47576 + C166 * C21631) * C21628) *
                        C47730 -
                    ((C23343 + C23344) * C21630 + (C23345 + C23346) * C21629 +
                     (C550 * C47576 + C549 * C21631) * C21628) *
                        C3782) *
                       C47629 * C47615 +
                   (((C168 * C21631 + C169 * C47576) * C21628 +
                     (C21755 + C21756) * C21629 + C21763 * C21630) *
                        C47730 -
                    ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
                     (C545 * C47576 + C546 * C21631) * C21628) *
                        C47737 +
                    ((C551 * C21631 + C552 * C47576) * C21628 +
                     (C2184 * C21631 + C2183 * C47576) * C21629 +
                     ((C113 * C1290 + C47850 * C1307) * C21631 +
                      (C113 * C1308 + C47850 * C1317) * C47576) *
                         C21630) *
                        C3782) *
                       C47629 * C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C3274 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47629 * C47972 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C22224 + C22225) * C21629 + C22797 * C21630) *
               C47734 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C3274) *
              C47629 * C47965 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C3274 -
           ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C47734) *
              C47629 * C47952 +
          (((C553 * C21631 + C554 * C47576) * C21628 +
            (C964 * C21631 + C963 * C47576) * C21629 +
            ((C113 * C1584 + C47850 * C1585) * C21631 +
             (C113 * C1586 + C47850 * C1587) * C47576) *
                C21630) *
               C47734 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C3274 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47966 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             C22902 * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C3274) *
               C47954 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C3274 -
            ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
             C22534 * C21628) *
                C47734) *
               C47927) *
              C2620 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C3274) *
               C47966 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C3274 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C47954 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47895 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47692) *
              C656 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C47692 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47895) *
              C657 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47895 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47692) *
              C658 +
          (((C21972 + C21973) * C21628 + (C21974 + C21975) * C21629 +
            ((C113 * C1422 + C47850 * C1423) * C21631 +
             (C113 * C1424 + C47850 * C1425) * C47576) *
                C21630) *
               C47647 * C47692 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1416 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1417 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47647 * C1418 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47647 * C47937) *
              C47881 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            C22648 * C21630) *
               C47647 * C1417 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1416 -
           ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
            C21762 * C21628) *
               C47647 * C1418 +
           (C22648 * C21628 + (C22650 + C22649) * C21629 +
            ((C113 * C5794 + C47850 * C5797) * C21631 +
             (C113 * C5798 + C47850 * C5800) * C47576) *
                C21630) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47896 -
            ((C22220 + C22221) * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C47895 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             (C6501 * C21631 + C6500 * C47576) * C21630) *
                C47734 -
            ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47896) *
               C47692) *
              C288 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + (C22226 + C22227) * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47896) *
               C47895 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             (C21753 + C21754) * C21630) *
                C47896 -
            ((C6354 * C47576 + C6355 * C21631) * C21630 +
             (C22227 + C22226) * C21629 + (C22225 + C22224) * C21628) *
                C47734) *
               C47692) *
              C289 +
          ((((C168 * C21631 + C169 * C47576) * C21628 +
             (C21755 + C21756) * C21629 + C21763 * C21630) *
                C47896 -
            ((C22228 + C22229) * C21630 + (C22230 + C22231) * C21629 +
             (C545 * C47576 + C546 * C21631) * C21628) *
                C47734) *
               C47895 +
           (((C22231 + C22230) * C21628 + (C22229 + C22228) * C21629 +
             ((C113 * C1700 + C47850 * C1705) * C21631 +
              (C113 * C1706 + C47850 * C1709) * C47576) *
                 C21630) *
                C47734 -
            ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
             (C21756 + C21755) * C21628) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47896 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C1416 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            C22902 * C21630) *
               C47734 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47896) *
              C1417 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47896 -
           ((C22909 + C22910) * C21630 + (C22540 + C22539) * C21629 +
            C22534 * C21628) *
               C47734) *
              C1418 +
          ((C22902 * C21628 + (C22910 + C22909) * C21629 +
            ((C113 * C22897 + C47850 * C22898) * C21631 +
             (C113 * C22899 + C47850 * C22900) * C47576) *
                C21630) *
               C47734 -
           ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
            C22408 * C21628) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47966 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47954 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C288 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C47954 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47966 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C289 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47966 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47954 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C4936 * C21631 + C4937 * C47576) * C21629 +
           (C4939 * C21631 + C4938 * C47576) * C21630) *
              C47647 * C47629 * C108 -
          ((C361 * C47576 + C360 * C21631) * C21630 +
           (C358 * C47576 + C359 * C21631) * C21629 +
           (C167 * C47576 + C166 * C21631) * C21628) *
              C47647 * C47629 * C109 +
          ((C168 * C21631 + C169 * C47576) * C21628 +
           (C357 * C21631 + C356 * C47576) * C21629 +
           (C362 * C21631 + C363 * C47576) * C21630) *
              C47647 * C47629 * C110 -
          ((C366 * C47576 + C367 * C21631) * C21630 +
           (C365 * C47576 + C364 * C21631) * C21629 +
           (C170 * C47576 + C171 * C21631) * C21628) *
              C47647 * C47629 * C111 +
          ((C172 * C21631 + C173 * C47576) * C21628 +
           (C670 * C21631 + C669 * C47576) * C21629 +
           ((C113 * C300 + C47850 * C319) * C21631 +
            (C113 * C320 + C47850 * C330) * C47576) *
               C21630) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47967 -
           ((C6005 * C47576 + C6004 * C21631) * C21630 +
            (C5562 * C47576 + C5563 * C21631) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C6002 * C21631 + C6003 * C47576) * C21629 +
            (C6009 * C21631 + C6008 * C47576) * C21630) *
               C47930) *
              C47629 * C288 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C959 * C21631 + C960 * C47576) * C21629 +
            (C1600 * C21631 + C1599 * C47576) * C21630) *
               C47956 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47967 -
           ((C6006 * C47576 + C6007 * C21631) * C21630 +
            (C2185 * C47576 + C2186 * C21631) * C21629 +
            (C550 * C47576 + C549 * C21631) * C21628) *
               C47930) *
              C47629 * C289 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47967 -
           ((C1597 * C47576 + C1598 * C21631) * C21630 +
            (C962 * C47576 + C961 * C21631) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C47956 +
           ((C551 * C21631 + C552 * C47576) * C21628 +
            (C2184 * C21631 + C2183 * C47576) * C21629 +
            ((C113 * C1290 + C47850 * C1307) * C21631 +
             (C113 * C1308 + C47850 * C1317) * C47576) *
                C21630) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1074 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1075 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C47963 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C1075 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1074 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C1074 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C1075 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C21743 + C21744) * C21629 + C21761 * C21630) *
              C47647 * C1142 -
          (C22408 * C21630 + (C21746 + C21745) * C21629 +
           (C21744 + C21743) * C21628) *
              C47647 * C1143 +
          (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
              C47647 * C1144 -
          ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
           C22408 * C21628) *
              C47647 * C1145 +
          (C22415 * C21628 + (C22419 + C22418) * C21629 +
           ((C113 * C22403 + C47850 * C22404) * C21631 +
            (C113 * C22405 + C47850 * C22406) * C47576) *
               C21630) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47967 -
           (C22534 * C21630 + (C22222 + C22223) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47956 +
           (((C113 * C483 + C47850 * C496) * C21631 +
             (C113 * C497 + C47850 * C513) * C47576) *
                C21628 +
            (C22535 + C22536) * C21629 + C22545 * C21630) *
               C47930) *
              C1074 +
          (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
            (C22539 + C22540) * C21630) *
               C47956 -
           (C22408 * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47967 -
           ((C22548 + C22549) * C21630 + (C22538 + C22537) * C21629 +
            (C22536 + C22535) * C21628) *
               C47930) *
              C1075 +
          ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
               C47967 -
           (((C113 * C6488 + C47850 * C6491) * C47576 +
             (C113 * C6485 + C47850 * C6487) * C21631) *
                C21630 +
            (C22540 + C22539) * C21629 + C22534 * C21628) *
               C47956 +
           (C22545 * C21628 + (C22549 + C22548) * C21629 +
            ((C113 * C22529 + C47850 * C22530) * C21631 +
             (C113 * C22531 + C47850 * C22532) * C47576) *
                C21630) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47896 -
           ((C6005 * C47576 + C6004 * C21631) * C21630 +
            (C5562 * C47576 + C5563 * C21631) * C21629 +
            ((C113 * C494 + C47850 * C512) * C47576 +
             (C113 * C482 + C47850 * C495) * C21631) *
                C21628) *
               C47734) *
              C47629 * C656 +
          (((C548 * C21631 + C547 * C47576) * C21628 +
            (C959 * C21631 + C960 * C47576) * C21629 +
            (C1600 * C21631 + C1599 * C47576) * C21630) *
               C47734 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47896) *
              C47629 * C657 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47896 -
           ((C1597 * C47576 + C1598 * C21631) * C21630 +
            (C962 * C47576 + C961 * C21631) * C21629 +
            (C545 * C47576 + C546 * C21631) * C21628) *
               C47734) *
              C47629 * C658 +
          (((C553 * C21631 + C554 * C47576) * C21628 +
            (C964 * C21631 + C963 * C47576) * C21629 +
            ((C113 * C1584 + C47850 * C1585) * C21631 +
             (C113 * C1586 + C47850 * C1587) * C47576) *
                C21630) *
               C47734 -
           ((C21975 + C21974) * C21630 + (C21973 + C21972) * C21629 +
            (C170 * C47576 + C171 * C21631) * C21628) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C47850 * C124) * C21631 +
              (C113 * C125 + C47850 * C138) * C47576) *
                 C21628 +
             (C21743 + C21744) * C21629 + C21761 * C21630) *
                C47896 -
            (C22534 * C21630 + (C22222 + C22223) * C21629 +
             ((C113 * C494 + C47850 * C512) * C47576 +
              (C113 * C482 + C47850 * C495) * C21631) *
                 C21628) *
                C47734) *
               C1074 +
           (((C22223 + C22222) * C21628 + (C22221 + C22220) * C21629 +
             (C22539 + C22540) * C21630) *
                C47734 -
            (C22408 * C21630 + (C21746 + C21745) * C21629 +
             (C21744 + C21743) * C21628) *
                C47896) *
               C1075 +
           ((C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
                C47896 -
            (((C113 * C6488 + C47850 * C6491) * C47576 +
              (C113 * C6485 + C47850 * C6487) * C21631) *
                 C21630 +
             (C22540 + C22539) * C21629 + C22534 * C21628) *
                C47734) *
               C47927) *
              C47881 +
          ((((C548 * C21631 + C547 * C47576) * C21628 +
             (C22224 + C22225) * C21629 + C22797 * C21630) *
                C47734 -
            (C21762 * C21630 + (C21750 + C21749) * C21629 +
             (C167 * C47576 + C166 * C21631) * C21628) *
                C47896) *
               C1074 +
           (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
             C22648 * C21630) *
                C47896 -
            ((C22798 + C22799) * C21630 + (C22227 + C22226) * C21629 +
             (C22225 + C22224) * C21628) *
                C47734) *
               C1075 +
           ((C22797 * C21628 + (C22799 + C22798) * C21629 +
             ((C113 * C6486 + C47850 * C6489) * C21631 +
              (C113 * C6490 + C47850 * C6492) * C47576) *
                 C21630) *
                C47734 -
            ((C22649 + C22650) * C21630 + (C21754 + C21753) * C21629 +
             C21762 * C21628) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C4936 * C21631 + C4937 * C47576) * C21629 +
           (C4939 * C21631 + C4938 * C47576) * C21630) *
              C47647 * C47629 * C108 -
          ((C361 * C47576 + C360 * C21631) * C21630 +
           (C358 * C47576 + C359 * C21631) * C21629 +
           (C167 * C47576 + C166 * C21631) * C21628) *
              C47647 * C47629 * C109 +
          ((C168 * C21631 + C169 * C47576) * C21628 +
           (C357 * C21631 + C356 * C47576) * C21629 +
           (C362 * C21631 + C363 * C47576) * C21630) *
              C47647 * C47629 * C110 -
          ((C366 * C47576 + C367 * C21631) * C21630 +
           (C365 * C47576 + C364 * C21631) * C21629 +
           (C170 * C47576 + C171 * C21631) * C21628) *
              C47647 * C47629 * C111 +
          ((C172 * C21631 + C173 * C47576) * C21628 +
           (C670 * C21631 + C669 * C47576) * C21629 +
           ((C113 * C300 + C47850 * C319) * C21631 +
            (C113 * C320 + C47850 * C330) * C47576) *
               C21630) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C47966 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C47954 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C288 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C47954 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C47966 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C289 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C47966 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C47954 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C47850 * C124) * C21631 +
             (C113 * C125 + C47850 * C138) * C47576) *
                C21628 +
            (C21743 + C21744) * C21629 + C21761 * C21630) *
               C47647 * C1074 -
           ((C21747 + C21748) * C21630 + (C21746 + C21745) * C21629 +
            (C21744 + C21743) * C21628) *
               C47647 * C1075 +
           (C21761 * C21628 + (C21748 + C21747) * C21629 +
            (C5821 * C21631 + C5820 * C47576) * C21630) *
               C47647 * C47927) *
              C47963 +
          (((C21749 + C21750) * C21628 + (C21751 + C21752) * C21629 +
            (C21753 + C21754) * C21630) *
               C47647 * C1075 -
           (C21762 * C21630 + (C21750 + C21749) * C21629 +
            (C167 * C47576 + C166 * C21631) * C21628) *
               C47647 * C1074 -
           ((C5818 * C47576 + C5819 * C21631) * C21630 +
            (C21754 + C21753) * C21629 + C21762 * C21628) *
               C47647 * C47927) *
              C47950 +
          (((C168 * C21631 + C169 * C47576) * C21628 +
            (C21755 + C21756) * C21629 + C21763 * C21630) *
               C47647 * C1074 -
           ((C21759 + C21760) * C21630 + (C21758 + C21757) * C21629 +
            (C21756 + C21755) * C21628) *
               C47647 * C1075 +
           (C21763 * C21628 + (C21760 + C21759) * C21629 +
            ((C113 * C1153 + C47850 * C1164) * C21631 +
             (C113 * C1165 + C47850 * C1171) * C47576) *
                C21630) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C47850 * C124) * C21631 +
            (C113 * C125 + C47850 * C138) * C47576) *
               C21628 +
           (C21743 + C21744) * C21629 + C21761 * C21630) *
              C47647 * C1142 -
          (C22408 * C21630 + (C21746 + C21745) * C21629 +
           (C21744 + C21743) * C21628) *
              C47647 * C1143 +
          (C21761 * C21628 + (C21748 + C21747) * C21629 + C22415 * C21630) *
              C47647 * C1144 -
          ((C22418 + C22419) * C21630 + (C22410 + C22409) * C21629 +
           C22408 * C21628) *
              C47647 * C1145 +
          (C22415 * C21628 + (C22419 + C22418) * C21629 +
           ((C113 * C22403 + C47850 * C22404) * C21631 +
            (C113 * C22405 + C47850 * C22406) * C47576) *
               C21630) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47688 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47695 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47647 * C2880) *
              C47606 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47695 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47688 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C2880) *
              C47615 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47688 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47695 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47688 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C47695 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C47896 -
            (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C2880) *
              C2620 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C47688 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47695 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47973 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47969 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47647 * C47959 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47647 * C47937) *
              C2620 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47969 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47973 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47959 +
           (((C11871 + C11870) * C21631 + (C11869 + C11868) * C47576) * C16115 +
            ((C10415 * C1152 + C10413 * C1162 + C10416 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47692) *
              C47972 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C2512) *
              C47965 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47692) *
              C47952 +
          ((((C10995 + C10994) * C21631 + (C10993 + C10992) * C47576) * C16115 +
            ((C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                 C21631 +
             (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47967 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47956 +
            (((C10415 * C483 + C10413 * C496 + C10416 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C10415 * C497 + C10413 * C513 + C10416 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C16115 +
             ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                 C47945) *
                C47930) *
               C2512 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47956 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47967 -
            (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) *
                 C47945 +
             ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                 C16115) *
                C47930) *
               C47692) *
              C2620 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47956 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47967 -
            (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) *
                 C47945 +
             ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                 C16115) *
                C47930) *
               C2512 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47967 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47956 +
            (((C12795 + C12794) * C21631 + (C12793 + C12792) * C47576) *
                 C16115 +
             ((C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C47606 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C2512 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C47615 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C47896 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47692) *
              C47972 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C2512) *
              C47965 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47692) *
              C47952 +
          ((((C10995 + C10994) * C21631 + (C10993 + C10992) * C47576) * C16115 +
            ((C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                 C21631 +
             (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47973 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47969 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47647 * C47959 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47647 * C47937) *
              C2620 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47969 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47973 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47959 +
           (((C11871 + C11870) * C21631 + (C11869 + C11868) * C47576) * C16115 +
            ((C10415 * C1152 + C10413 * C1162 + C10416 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47688 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47695 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C3274 -
            (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C2880) *
              C47881 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C47688 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47695 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47730 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47737 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C3782) *
              C47688 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47737 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47730 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C3782) *
              C47695 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47730 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47737 +
           (((C27086 + C27085) * C21631 + (C27084 + C27083) * C47576) * C16115 +
            ((C10415 * C5973 + C10413 * C5975 + C10416 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C10415 * C5976 + C10413 * C5979 + C10416 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C3782) *
              C2880) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C3274 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47973 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47734 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C3274) *
              C47969 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C3274 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47734) *
              C47959 +
          ((((C27552 + C27551) * C21631 + (C27550 + C27549) * C47576) * C16115 +
            ((C10415 * C6485 + C10413 * C6487 + C10416 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C10415 * C6488 + C10413 * C6491 + C10416 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C47963 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C2512 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C47950 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C3274 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47974 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47971 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47962 -
           (((C28393 + C28394) * C47576 + (C28395 + C28396) * C21631) * C47945 +
            ((C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
              C10413 * C2020) *
                 C47576 +
             (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
              C10413 * C2011) *
                 C21631) *
                C16115) *
               C47943) *
              C2512 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47971 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47974 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C47962 +
           (((C28396 + C28395) * C21631 + (C28394 + C28393) * C47576) * C16115 +
            ((C10415 * C7349 + C10413 * C7351 + C10416 * C23192 +
              C47947 * C23193) *
                 C21631 +
             (C10415 * C7352 + C10413 * C7355 + C10416 * C23194 +
              C47947 * C23195) *
                 C47576) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47730 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47737 +
            (((C10415 * C483 + C10413 * C496 + C10416 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C10415 * C497 + C10413 * C513 + C10416 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C16115 +
             ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                 C47945) *
                C3782) *
               C2512 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47737 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47730 -
            (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) *
                 C47945 +
             ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                 C16115) *
                C3782) *
               C47692) *
              C47881 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47737 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47730 -
            (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) *
                 C47945 +
             ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                 C16115) *
                C3782) *
               C2512 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47730 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47737 +
            (((C12795 + C12794) * C21631 + (C12793 + C12792) * C47576) *
                 C16115 +
             ((C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C47963 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C2512 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C47950 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C3274 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C2512 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C3274 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47973 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47734 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C3274) *
              C47969 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C3274 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47734) *
              C47959 +
          ((((C27552 + C27551) * C21631 + (C27550 + C27549) * C47576) * C16115 +
            ((C10415 * C6485 + C10413 * C6487 + C10416 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C10415 * C6488 + C10413 * C6491 + C10416 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1416 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1417 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47647 * C1418 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47647 * C47937) *
              C47881 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1417 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1416 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C1418 +
           (((C11871 + C11870) * C21631 + (C11869 + C11868) * C47576) * C16115 +
            ((C10415 * C1152 + C10413 * C1162 + C10416 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47692) *
              C656 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47895) *
              C657 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47692) *
              C658 +
          ((((C10995 + C10994) * C21631 + (C10993 + C10992) * C47576) * C16115 +
            ((C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                 C21631 +
             (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C1820 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C1821 +
            (((C10415 * C483 + C10413 * C496 + C10416 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C10415 * C497 + C10413 * C513 + C10416 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C16115 +
             ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                 C47945) *
                C47930) *
               C47895 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C1821 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C1820 -
            (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) *
                 C47945 +
             ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                 C16115) *
                C47930) *
               C47692) *
              C47881 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C1821 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C1820 -
            (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) *
                 C47945 +
             ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                 C16115) *
                C47930) *
               C47895 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C1820 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C1821 +
            (((C12795 + C12794) * C21631 + (C12793 + C12792) * C47576) *
                 C16115 +
             ((C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47896 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C1416 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47734 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47896) *
              C1417 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47896 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47734) *
              C1418 +
          ((((C27552 + C27551) * C21631 + (C27550 + C27549) * C47576) * C16115 +
            ((C10415 * C6485 + C10413 * C6487 + C10416 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C10415 * C6488 + C10413 * C6491 + C10416 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C10415 * C1287 + C10413 * C1302 + C10416 * C1288 +
               C47947 * C1303) *
                  C21631 +
              (C10415 * C1301 + C10413 * C1314 + C10416 * C1304 +
               C47947 * C1315) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C288 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C47895 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C289 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C47896 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C2284 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C2285 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C2286 -
           (((C28393 + C28394) * C47576 + (C28395 + C28396) * C21631) * C47945 +
            ((C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
              C10413 * C2020) *
                 C47576 +
             (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
              C10413 * C2011) *
                 C21631) *
                C16115) *
               C47943) *
              C47895 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C2285 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C2284 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C2286 +
           (((C28396 + C28395) * C21631 + (C28394 + C28393) * C47576) * C16115 +
            ((C10415 * C7349 + C10413 * C7351 + C10416 * C23192 +
              C47947 * C23193) *
                 C21631 +
             (C10415 * C7352 + C10413 * C7355 + C10416 * C23194 +
              C47947 * C23195) *
                 C47576) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10415 * C117 + C10413 * C124 + C10416 * C482 +
                 C47947 * C495) *
                    C21631 +
                (C10415 * C125 + C10413 * C138 + C10416 * C494 +
                 C47947 * C512) *
                    C47576) *
                   C16115 +
               ((C10415 * C293 + C10413 * C306 + C10416 * C926 +
                 C47947 * C931) *
                    C21631 +
                (C10415 * C305 + C10413 * C323 + C10416 * C932 +
                 C47947 * C941) *
                    C47576) *
                   C47945) *
                  C47647 * C47629 * C108 -
              (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                   C47945 +
               ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                   C16115) *
                  C47647 * C47629 * C109 +
              (((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                   C16115 +
               ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                   C47945) *
                  C47647 * C47629 * C110 -
              (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) *
                   C47945 +
               ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                   C16115) *
                  C47647 * C47629 * C111 +
              (((C10465 + C10464) * C21631 + (C10463 + C10462) * C47576) *
                   C16115 +
               ((C10415 * C299 + C10413 * C318 + C10416 * C930 +
                 C47947 * C939) *
                    C21631 +
                (C10415 * C317 + C10413 * C329 + C10416 * C940 +
                 C47947 * C945) *
                    C47576) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10415 * C117 + C10413 * C124 + C10416 * C482 +
                  C47947 * C495) *
                     C21631 +
                 (C10415 * C125 + C10413 * C138 + C10416 * C494 +
                  C47947 * C512) *
                     C47576) *
                    C16115 +
                ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                    C47945) *
                   C47647 * C47966 -
               (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                    C47945 +
                ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                    C16115) *
                   C47647 * C47954 +
               (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                    C16115 +
                ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
                  C47947 * C1701) *
                     C21631 +
                 (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
                  C47947 * C1707) *
                     C47576) *
                    C47945) *
                   C47647 * C47927) *
                  C288 +
              ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                    C16115 +
                ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                    C47945) *
                   C47647 * C47954 -
               (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                    C47945 +
                ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                    C16115) *
                   C47647 * C47966 -
               (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                    C47945 +
                ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                    C16115) *
                   C47647 * C47927) *
                  C289 +
              ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                    C16115 +
                ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                    C47945) *
                   C47647 * C47966 -
               (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                    C47945 +
                ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                    C16115) *
                   C47647 * C47954 +
               (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) *
                    C16115 +
                ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
                  C47947 * C1705) *
                     C21631 +
                 (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
                  C47947 * C1709) *
                     C47576) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47967 -
           (((C10416 * C1295 + C47947 * C1311 + C10415 * C932 + C10413 * C941) *
                 C47576 +
             (C10416 * C1284 + C47947 * C1296 + C10415 * C926 + C10413 * C931) *
                 C21631) *
                C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47956 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C10415 * C1284 + C10413 * C1296 + C10416 * C2402 +
              C47947 * C2405) *
                 C21631 +
             (C10415 * C1295 + C10413 * C1311 + C10416 * C2406 +
              C47947 * C2411) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C288 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47956 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47967 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C47930) *
              C47629 * C289 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47967 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47956 +
           (((C10853 + C10852) * C21631 + (C10851 + C10850) * C47576) * C16115 +
            ((C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1074 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) * C47945) *
              C47647 * C1142 -
          (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
           ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) * C16115) *
              C47647 * C1143 +
          (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
           ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) * C47945) *
              C47647 * C1144 -
          (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
           ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) * C16115) *
              C47647 * C1145 +
          (((C26904 + C26903) * C21631 + (C26902 + C26901) * C47576) * C16115 +
           ((C10415 * C5793 + C10413 * C5795 + C10416 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C10415 * C5796 + C10413 * C5799 + C10416 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47967 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47956 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C1074 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47956 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47967 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C47930) *
              C1075 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47967 -
           (((C10416 * C5976 + C47947 * C5979 + C10415 * C1702 +
              C10413 * C1707) *
                 C47576 +
             (C10416 * C5973 + C47947 * C5975 + C10415 * C1698 +
              C10413 * C1701) *
                 C21631) *
                C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47956 +
           (((C27086 + C27085) * C21631 + (C27084 + C27083) * C47576) * C16115 +
            ((C10415 * C5973 + C10413 * C5975 + C10416 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C10415 * C5976 + C10413 * C5979 + C10416 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C1820 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C1821 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C1821 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C1820 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C47930) *
              C47629 * C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C1820 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C1821 +
           (((C10853 + C10852) * C21631 + (C10851 + C10850) * C47576) * C16115 +
            ((C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C1820 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C1821 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C47966 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C1821 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C1820 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C47930) *
              C47954 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C1820 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C1821 +
           (((C27086 + C27085) * C21631 + (C27084 + C27083) * C47576) * C16115 +
            ((C10415 * C5973 + C10413 * C5975 + C10416 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C10415 * C5976 + C10413 * C5979 + C10416 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) * C47945) *
              C1995 -
          (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
           ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                C47576 +
            (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                C21631) *
               C16115) *
              C1996 +
          (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                C21631 +
            (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                C47576) *
               C16115 +
           ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) * C47945) *
              C1997 -
          (((C10416 * C6880 + C47947 * C6883 + C10415 * C2406 +
             C10413 * C2411) *
                C47576 +
            (C10416 * C6877 + C47947 * C6879 + C10415 * C2402 +
             C10413 * C2405) *
                C21631) *
               C47945 +
           ((C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
             C10413 * C2020) *
                C47576 +
            (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
             C10413 * C2011) *
                C21631) *
               C16115) *
              C1998 +
          (((C10415 * C2003 + C10413 * C2012 + C10416 * C12581 +
             C47947 * C12583) *
                C21631 +
            (C10415 * C2013 + C10413 * C2021 + C10416 * C12584 +
             C47947 * C12587) *
                C47576) *
               C16115 +
           ((C10415 * C6877 + C10413 * C6879 + C10416 * C27926 +
             C47947 * C27927) *
                C21631 +
            (C10415 * C6880 + C10413 * C6883 + C10416 * C27928 +
             C47947 * C27929) *
                C47576) *
               C47945) *
              C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C1074 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C1075 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C47896 -
            (((C10416 * C5976 + C47947 * C5979 + C10415 * C1702 +
               C10413 * C1707) *
                  C47576 +
              (C10416 * C5973 + C47947 * C5975 + C10415 * C1698 +
               C10413 * C1701) *
                  C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C47927) *
              C47881 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C1074 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C1075 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47896 -
           (((C10416 * C1295 + C47947 * C1311 + C10415 * C932 + C10413 * C941) *
                 C47576 +
             (C10416 * C1284 + C47947 * C1296 + C10415 * C926 + C10413 * C931) *
                 C21631) *
                C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47629 * C656 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47734 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47896) *
              C47629 * C657 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47896 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47734) *
              C47629 * C658 +
          ((((C11137 + C11136) * C21631 + (C11135 + C11134) * C47576) * C16115 +
            ((C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C21631 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C2284 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C2285 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C2286 -
           (((C10416 * C6880 + C47947 * C6883 + C10415 * C2406 +
              C10413 * C2411) *
                 C47576 +
             (C10416 * C6877 + C47947 * C6879 + C10415 * C2402 +
              C10413 * C2405) *
                 C21631) *
                C47945 +
            ((C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
              C10413 * C2020) *
                 C47576 +
             (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
              C10413 * C2011) *
                 C21631) *
                C16115) *
               C47943) *
              C47629 * C47881 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C2285 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C2284 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C2286 +
           (((C12937 + C12936) * C21631 + (C12935 + C12934) * C47576) * C16115 +
            ((C10415 * C2403 + C10413 * C2407 + C10416 * C6878 +
              C47947 * C6881) *
                 C21631 +
             (C10415 * C2408 + C10413 * C2412 + C10416 * C6882 +
              C47947 * C6884) *
                 C47576) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47966 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C289 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C10415 * C293 + C10413 * C306 + C10416 * C926 + C47947 * C931) *
                C21631 +
            (C10415 * C305 + C10413 * C323 + C10416 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
           ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) * C16115) *
              C47647 * C47629 * C109 +
          (((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
           ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
           ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) * C16115) *
              C47647 * C47629 * C111 +
          (((C10465 + C10464) * C21631 + (C10463 + C10462) * C47576) * C16115 +
           ((C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C21631 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1074 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) * C47945) *
              C47647 * C1142 -
          (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
           ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) * C16115) *
              C47647 * C1143 +
          (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
           ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) * C47945) *
              C47647 * C1144 -
          (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
           ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) * C16115) *
              C47647 * C1145 +
          (((C26904 + C26903) * C21631 + (C26902 + C26901) * C47576) * C16115 +
           ((C10415 * C5793 + C10413 * C5795 + C10416 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C10415 * C5796 + C10413 * C5799 + C10416 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C1820 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C1821 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C1821 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C1820 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C47930) *
              C47629 * C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C1820 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C1821 +
           (((C10853 + C10852) * C21631 + (C10851 + C10850) * C47576) * C16115 +
            ((C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C1820 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C1821 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C47966 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C1821 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C1820 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C47930) *
              C47954 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C1820 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C1821 +
           (((C27086 + C27085) * C21631 + (C27084 + C27083) * C47576) * C16115 +
            ((C10415 * C5973 + C10413 * C5975 + C10416 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C10415 * C5976 + C10413 * C5979 + C10416 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C47606 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C47895 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C47615 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C3274 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47730 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47737 +
            (((C10415 * C483 + C10413 * C496 + C10416 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C10415 * C497 + C10413 * C513 + C10416 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C16115 +
             ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                 C47945) *
                C3782) *
               C47895 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47737 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47730 -
            (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) *
                 C47945 +
             ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                 C16115) *
                C3782) *
               C47692) *
              C2620 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47737 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47730 -
            (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) *
                 C47945 +
             ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                 C16115) *
                C3782) *
               C47895 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47730 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47737 +
            (((C12795 + C12794) * C21631 + (C12793 + C12792) * C47576) *
                 C16115 +
             ((C10415 * C1289 + C10413 * C1305 + C10416 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C10415 * C1306 + C10413 * C1316 + C10416 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47966 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47954 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C3274 -
            (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C47927) *
              C2620 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C47966 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47954 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C3274 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47629 * C47972 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47734 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C3274) *
              C47629 * C47965 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C3274 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47734) *
              C47629 * C47952 +
          ((((C11137 + C11136) * C21631 + (C11135 + C11134) * C47576) * C16115 +
            ((C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C21631 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47974 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47971 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47962 -
           (((C28393 + C28394) * C47576 + (C28395 + C28396) * C21631) * C47945 +
            ((C10416 * C2013 + C47947 * C2021 + C10415 * C2010 +
              C10413 * C2020) *
                 C47576 +
             (C10416 * C2003 + C47947 * C2012 + C10415 * C2002 +
              C10413 * C2011) *
                 C21631) *
                C16115) *
               C47943) *
              C47629 * C2620 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47971 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47974 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C47962 +
           (((C12937 + C12936) * C21631 + (C12935 + C12934) * C47576) * C16115 +
            ((C10415 * C2403 + C10413 * C2407 + C10416 * C6878 +
              C47947 * C6881) *
                 C21631 +
             (C10415 * C2408 + C10413 * C2412 + C10416 * C6882 +
              C47947 * C6884) *
                 C47576) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47730 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47737 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C3782) *
              C47629 * C47606 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47737 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47730 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C3782) *
              C47629 * C47615 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47730 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47737 +
           (((C10853 + C10852) * C21631 + (C10851 + C10850) * C47576) * C16115 +
            ((C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C3274 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47629 * C47972 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47734 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C3274) *
              C47629 * C47965 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C3274 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47734) *
              C47629 * C47952 +
          ((((C11137 + C11136) * C21631 + (C11135 + C11134) * C47576) * C16115 +
            ((C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C21631 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C3274 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47966 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C3274) *
               C47954 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C3274 -
            (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C47927) *
              C2620 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C3274) *
               C47966 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C3274 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47954 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47692) *
              C656 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47895) *
              C657 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47692) *
              C658 +
          ((((C10995 + C10994) * C21631 + (C10993 + C10992) * C47576) * C16115 +
            ((C10415 * C298 + C10413 * C316 + C10416 * C1584 + C47947 * C1585) *
                 C21631 +
             (C10415 * C315 + C10413 * C328 + C10416 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1416 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1417 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47647 * C1418 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47647 * C47937) *
              C47881 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1417 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1416 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C1418 +
           (((C11871 + C11870) * C21631 + (C11869 + C11868) * C47576) * C16115 +
            ((C10415 * C1152 + C10413 * C1162 + C10416 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C10415 * C1163 + C10413 * C1170 + C10416 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C10415 * C1287 + C10413 * C1302 + C10416 * C1288 +
               C47947 * C1303) *
                  C21631 +
              (C10415 * C1301 + C10413 * C1314 + C10416 * C1304 +
               C47947 * C1315) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C288 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C47895 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C47692) *
              C289 +
          (((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) *
                 C16115 +
             ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                 C47945) *
                C47896 -
            (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) *
                 C47945 +
             ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                 C16115) *
                C47734) *
               C47895 +
           ((((C11355 + C11354) * C21631 + (C11353 + C11352) * C47576) *
                 C16115 +
             ((C10415 * C1285 + C10413 * C1298 + C10416 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C10415 * C1297 + C10413 * C1312 + C10416 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) *
                 C47945 +
             ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                 C16115) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47896 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C1416 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47734 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47896) *
              C1417 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47896 -
           (((C27549 + C27550) * C47576 + (C27551 + C27552) * C21631) * C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47734) *
              C1418 +
          ((((C27552 + C27551) * C21631 + (C27550 + C27549) * C47576) * C16115 +
            ((C10415 * C6485 + C10413 * C6487 + C10416 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C10415 * C6488 + C10413 * C6491 + C10416 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
            ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) *
                C16115) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47966 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C289 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C10415 * C293 + C10413 * C306 + C10416 * C926 + C47947 * C931) *
                C21631 +
            (C10415 * C305 + C10413 * C323 + C10416 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
           ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) * C16115) *
              C47647 * C47629 * C109 +
          (((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
           ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
           ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) * C16115) *
              C47647 * C47629 * C111 +
          (((C10465 + C10464) * C21631 + (C10463 + C10462) * C47576) * C16115 +
           ((C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C21631 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47967 -
           (((C10416 * C1295 + C47947 * C1311 + C10415 * C932 + C10413 * C941) *
                 C47576 +
             (C10416 * C1284 + C47947 * C1296 + C10415 * C926 + C10413 * C931) *
                 C21631) *
                C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47956 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C10415 * C1284 + C10413 * C1296 + C10416 * C2402 +
              C47947 * C2405) *
                 C21631 +
             (C10415 * C1295 + C10413 * C1311 + C10416 * C2406 +
              C47947 * C2411) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C288 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47956 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47967 -
           (((C12792 + C12793) * C47576 + (C12794 + C12795) * C21631) * C47945 +
            ((C10845 + C10844) * C47576 + (C10843 + C10842) * C21631) *
                C16115) *
               C47930) *
              C47629 * C289 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47967 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47956 +
           (((C10853 + C10852) * C21631 + (C10851 + C10850) * C47576) * C16115 +
            ((C10415 * C1282 + C10413 * C1292 + C10416 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C10415 * C1291 + C10413 * C1309 + C10416 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1074 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) * C47945) *
              C47647 * C1142 -
          (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
           ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) * C16115) *
              C47647 * C1143 +
          (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
           ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) * C47945) *
              C47647 * C1144 -
          (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
           ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) * C16115) *
              C47647 * C1145 +
          (((C26904 + C26903) * C21631 + (C26902 + C26901) * C47576) * C16115 +
           ((C10415 * C5793 + C10413 * C5795 + C10416 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C10415 * C5796 + C10413 * C5799 + C10416 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47967 -
           (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) * C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47956 +
           (((C10415 * C483 + C10413 * C496 + C10416 * C2002 + C47947 * C2011) *
                 C21631 +
             (C10415 * C497 + C10413 * C513 + C10416 * C2010 + C47947 * C2020) *
                 C47576) *
                C16115 +
            ((C27075 + C27076) * C21631 + (C27077 + C27078) * C47576) *
                C47945) *
               C47930) *
              C1074 +
          ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) * C16115 +
            ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                C47945) *
               C47956 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47967 -
           (((C27083 + C27084) * C47576 + (C27085 + C27086) * C21631) * C47945 +
            ((C27078 + C27077) * C47576 + (C27076 + C27075) * C21631) *
                C16115) *
               C47930) *
              C1075 +
          ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                C47945) *
               C47967 -
           (((C10416 * C5976 + C47947 * C5979 + C10415 * C1702 +
              C10413 * C1707) *
                 C47576 +
             (C10416 * C5973 + C47947 * C5975 + C10415 * C1698 +
              C10413 * C1701) *
                 C21631) *
                C47945 +
            ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                C16115) *
               C47956 +
           (((C27086 + C27085) * C21631 + (C27084 + C27083) * C47576) * C16115 +
            ((C10415 * C5973 + C10413 * C5975 + C10416 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C10415 * C5976 + C10413 * C5979 + C10416 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47896 -
           (((C10416 * C1295 + C47947 * C1311 + C10415 * C932 + C10413 * C941) *
                 C47576 +
             (C10416 * C1284 + C47947 * C1296 + C10415 * C926 + C10413 * C931) *
                 C21631) *
                C47945 +
            ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                 C47576 +
             (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                 C21631) *
                C16115) *
               C47734) *
              C47629 * C656 +
          ((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) * C16115 +
            ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                C47945) *
               C47734 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47896) *
              C47629 * C657 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47896 -
           (((C11352 + C11353) * C47576 + (C11354 + C11355) * C21631) * C47945 +
            ((C10849 + C10848) * C47576 + (C10847 + C10846) * C21631) *
                C16115) *
               C47734) *
              C47629 * C658 +
          ((((C11137 + C11136) * C21631 + (C11135 + C11134) * C47576) * C16115 +
            ((C10415 * C929 + C10413 * C938 + C10416 * C2170 + C47947 * C2171) *
                 C21631 +
             (C10415 * C937 + C10413 * C944 + C10416 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
            ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) *
                C16115) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                  C21631 +
              (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                  C47576) *
                 C16115 +
             ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                 C47945) *
                C47896 -
            (((C26649 + C26650) * C47576 + (C26651 + C26652) * C21631) *
                 C47945 +
             ((C10416 * C497 + C47947 * C513 + C10415 * C494 + C10413 * C512) *
                  C47576 +
              (C10416 * C483 + C47947 * C496 + C10415 * C482 + C10413 * C495) *
                  C21631) *
                 C16115) *
                C47734) *
               C1074 +
           ((((C26652 + C26651) * C21631 + (C26650 + C26649) * C47576) *
                 C16115 +
             ((C27079 + C27080) * C21631 + (C27081 + C27082) * C47576) *
                 C47945) *
                C47734 -
            (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) *
                 C47945 +
             ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                 C16115) *
                C47896) *
               C1075 +
           ((((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) *
                 C16115 +
             ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) *
                 C47945) *
                C47896 -
            (((C10416 * C5976 + C47947 * C5979 + C10415 * C1702 +
               C10413 * C1707) *
                  C47576 +
              (C10416 * C5973 + C47947 * C5975 + C10415 * C1698 +
               C10413 * C1701) *
                  C21631) *
                 C47945 +
             ((C27082 + C27081) * C47576 + (C27080 + C27079) * C21631) *
                 C16115) *
                C47734) *
               C47927) *
              C47881 +
          (((((C10841 + C10840) * C21631 + (C10839 + C10838) * C47576) *
                 C16115 +
             ((C11348 + C11349) * C21631 + (C11350 + C11351) * C47576) *
                 C47945) *
                C47734 -
            (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) *
                 C47945 +
             ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                 C16115) *
                C47896) *
               C1074 +
           ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) *
                 C16115 +
             ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                 C47945) *
                C47896 -
            (((C12074 + C12075) * C47576 + (C12076 + C12077) * C21631) *
                 C47945 +
             ((C11351 + C11350) * C47576 + (C11349 + C11348) * C21631) *
                 C16115) *
                C47734) *
               C1075 +
           ((((C12077 + C12076) * C21631 + (C12075 + C12074) * C47576) *
                 C16115 +
             ((C10415 * C1699 + C10413 * C1703 + C10416 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C10415 * C1704 + C10413 * C1708 + C10416 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) *
                 C47945 +
             ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                 C16115) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C10415 * C293 + C10413 * C306 + C10416 * C926 + C47947 * C931) *
                C21631 +
            (C10415 * C305 + C10413 * C323 + C10416 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
           ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) * C16115) *
              C47647 * C47629 * C109 +
          (((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
           ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C10992 + C10993) * C47576 + (C10994 + C10995) * C21631) * C47945 +
           ((C10461 + C10460) * C47576 + (C10459 + C10458) * C21631) * C16115) *
              C47647 * C47629 * C111 +
          (((C10465 + C10464) * C21631 + (C10463 + C10462) * C47576) * C16115 +
           ((C10415 * C299 + C10413 * C318 + C10416 * C930 + C47947 * C939) *
                C21631 +
            (C10415 * C317 + C10413 * C329 + C10416 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C47966 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C289 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C47954 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                 C21631 +
             (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                 C47576) *
                C16115 +
            ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
            ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
            ((C10415 * C1150 + C10413 * C1159 + C10416 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C10415 * C1158 + C10413 * C1168 + C10416 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C10647 + C10646) * C21631 + (C10645 + C10644) * C47576) * C16115 +
            ((C10648 + C10649) * C21631 + (C10650 + C10651) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C10644 + C10645) * C47576 + (C10646 + C10647) * C21631) * C47945 +
            ((C10453 + C10452) * C47576 + (C10451 + C10450) * C21631) *
                C16115) *
               C47647 * C1074 -
           (((C11868 + C11869) * C47576 + (C11870 + C11871) * C21631) * C47945 +
            ((C10651 + C10650) * C47576 + (C10649 + C10648) * C21631) *
                C16115) *
               C47647 * C47927) *
              C47950 +
          ((((C10457 + C10456) * C21631 + (C10455 + C10454) * C47576) * C16115 +
            ((C10652 + C10653) * C21631 + (C10654 + C10655) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C10656 + C10657) * C47576 + (C10658 + C10659) * C21631) * C47945 +
            ((C10655 + C10654) * C47576 + (C10653 + C10652) * C21631) *
                C16115) *
               C47647 * C1075 +
           (((C10659 + C10658) * C21631 + (C10657 + C10656) * C47576) * C16115 +
            ((C10415 * C1148 + C10413 * C1155 + C10416 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C10415 * C1154 + C10413 * C1166 + C10416 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10415 * C117 + C10413 * C124 + C10416 * C482 + C47947 * C495) *
                C21631 +
            (C10415 * C125 + C10413 * C138 + C10416 * C494 + C47947 * C512) *
                C47576) *
               C16115 +
           ((C26033 + C26034) * C21631 + (C26035 + C26036) * C47576) * C47945) *
              C47647 * C1142 -
          (((C26037 + C26038) * C47576 + (C26039 + C26040) * C21631) * C47945 +
           ((C26036 + C26035) * C47576 + (C26034 + C26033) * C21631) * C16115) *
              C47647 * C1143 +
          (((C26040 + C26039) * C21631 + (C26038 + C26037) * C47576) * C16115 +
           ((C26897 + C26898) * C21631 + (C26899 + C26900) * C47576) * C47945) *
              C47647 * C1144 -
          (((C26901 + C26902) * C47576 + (C26903 + C26904) * C21631) * C47945 +
           ((C26900 + C26899) * C47576 + (C26898 + C26897) * C21631) * C16115) *
              C47647 * C1145 +
          (((C26904 + C26903) * C21631 + (C26902 + C26901) * C47576) * C16115 +
           ((C10415 * C5793 + C10413 * C5795 + C10416 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C10415 * C5796 + C10413 * C5799 + C10416 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47688 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47695 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C2880) *
              C47606 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47695 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47688 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C2880) *
              C47615 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47688 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47695 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47688 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C47695 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C47896 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C2880) *
              C2620 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C47688 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47695 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47973 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47969 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47959 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47647 * C47937) *
              C2620 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47969 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47973 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47959 +
           ((C32900 + C32899) * C16117 + (C32898 + C32897) * C16113 +
            (C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
             C47947 * C1705) *
                C16118 +
            (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C2512 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47692 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C2512) *
              C47965 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C2512 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C32024 + C32023) * C16117 + (C32022 + C32021) * C16113 +
            (C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C16118 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47967 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47956 +
            ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C16117 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C16113 +
             (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
                C47835 * C47930) *
               C2512 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47956 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47967 -
            ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
             (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
              C31442 * C1311) *
                 C16113 +
             (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
              C31442 * C1296) *
                 C16117) *
                C47835 * C47930) *
               C47692) *
              C2620 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47956 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47967 -
            ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
             (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
                C47835 * C47930) *
               C2512 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47967 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47956 +
            ((C33816 + C33815) * C16117 + (C33814 + C33813) * C16113 +
             (C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C16118 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C2512 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C47692) *
              C47606 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C2512 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C47896 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C2512 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C2512 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47692 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C2512) *
              C47965 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C2512 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C32024 + C32023) * C16117 + (C32022 + C32021) * C16113 +
            (C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C16118 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47973 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47969 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47959 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47647 * C47937) *
              C2620 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47969 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47973 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47959 +
           ((C32900 + C32899) * C16117 + (C32898 + C32897) * C16113 +
            (C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
             C47947 * C1705) *
                C16118 +
            (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47688 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47695 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C3274 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C2880) *
              C47881 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C47688 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47695 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47730 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47737 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C3782) *
              C47688 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47737 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47730 -
           ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C3782) *
              C47695 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47730 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47737 +
           ((C31444 * C1288 + C31442 * C1303 + C31445 * C7349 +
             C47947 * C7351) *
                C16117 +
            (C31444 * C1304 + C31442 * C1315 + C31445 * C7352 +
             C47947 * C7355) *
                C16113 +
            (C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
             C47947 * C7353) *
                C16118 +
            (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C3782) *
              C2880) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C3274 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47973 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47734 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C3274) *
              C47969 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C3274 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47734) *
              C47959 +
          (((C31444 * C1698 + C31442 * C1701 + C31445 * C5973 +
             C47947 * C5975) *
                C16117 +
            (C31444 * C1702 + C31442 * C1707 + C31445 * C5976 +
             C47947 * C5979) *
                C16113 +
            (C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
             C47947 * C5977) *
                C16118 +
            (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C2512 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47692) *
              C47963 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C2512 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C3274 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C2512 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47974 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47971 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47962 -
           ((C33955 + C33956) * C47914 + (C33957 + C33958) * C16118 +
            (C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
             C31442 * C2020) *
                C16113 +
            (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
             C31442 * C2011) *
                C16117) *
               C47835 * C47943) *
              C2512 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47971 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47974 -
           ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C47962 +
           ((C31444 * C2402 + C31442 * C2405 + C31445 * C6877 +
             C47947 * C6879) *
                C16117 +
            (C31444 * C2406 + C31442 * C2411 + C31445 * C6880 +
             C47947 * C6883) *
                C16113 +
            (C31444 * C2403 + C31442 * C2407 + C31445 * C6878 +
             C47947 * C6881) *
                C16118 +
            (C31444 * C2408 + C31442 * C2412 + C31445 * C6882 +
             C47947 * C6884) *
                C47914) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47730 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47737 +
            ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C16117 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C16113 +
             (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
                C47835 * C3782) *
               C2512 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47737 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47730 -
            ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
             (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
              C31442 * C1311) *
                 C16113 +
             (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
              C31442 * C1296) *
                 C16117) *
                C47835 * C3782) *
               C47692) *
              C47881 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47737 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47730 -
            ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
             (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
                C47835 * C3782) *
               C2512 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47730 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47737 +
            ((C33816 + C33815) * C16117 + (C33814 + C33813) * C16113 +
             (C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C16118 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C2512 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47692) *
              C47963 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C2512 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C3274 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C2512 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C3274 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47973 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47734 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C3274) *
              C47969 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C3274 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47734) *
              C47959 +
          (((C31444 * C1698 + C31442 * C1701 + C31445 * C5973 +
             C47947 * C5975) *
                C16117 +
            (C31444 * C1702 + C31442 * C1707 + C31445 * C5976 +
             C47947 * C5979) *
                C16113 +
            (C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
             C47947 * C5977) *
                C16118 +
            (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1416 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1417 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C1418 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1417 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1416 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C1418 +
           ((C32900 + C32899) * C16117 + (C32898 + C32897) * C16113 +
            (C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
             C47947 * C1705) *
                C16118 +
            (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47895 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47692) *
              C656 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47692 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47895) *
              C657 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47895 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47692) *
              C658 +
          (((C32024 + C32023) * C16117 + (C32022 + C32021) * C16113 +
            (C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C16118 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C1820 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C1821 +
            ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C16117 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C16113 +
             (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
                C47835 * C47930) *
               C47895 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C1821 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C1820 -
            ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
             (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
              C31442 * C1311) *
                 C16113 +
             (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
              C31442 * C1296) *
                 C16117) *
                C47835 * C47930) *
               C47692) *
              C47881 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C1821 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C1820 -
            ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
             (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
                C47835 * C47930) *
               C47895 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C1820 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C1821 +
            ((C33816 + C33815) * C16117 + (C33814 + C33813) * C16113 +
             (C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C16118 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47896 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C1416 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47734 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47896) *
              C1417 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47896 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47734) *
              C1418 +
          (((C31444 * C1698 + C31442 * C1701 + C31445 * C5973 +
             C47947 * C5975) *
                C16117 +
            (C31444 * C1702 + C31442 * C1707 + C31445 * C5976 +
             C47947 * C5979) *
                C16113 +
            (C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
             C47947 * C5977) *
                C16118 +
            (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47895 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C47692) *
              C288 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C47895 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C289 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C47896 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C47895 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C2284 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C2285 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C2286 -
           ((C33955 + C33956) * C47914 + (C33957 + C33958) * C16118 +
            (C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
             C31442 * C2020) *
                C16113 +
            (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
             C31442 * C2011) *
                C16117) *
               C47835 * C47943) *
              C47895 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C2285 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C2284 -
           ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C2286 +
           ((C31444 * C2402 + C31442 * C2405 + C31445 * C6877 +
             C47947 * C6879) *
                C16117 +
            (C31444 * C2406 + C31442 * C2411 + C31445 * C6880 +
             C47947 * C6883) *
                C16113 +
            (C31444 * C2403 + C31442 * C2407 + C31445 * C6878 +
             C47947 * C6881) *
                C16118 +
            (C31444 * C2408 + C31442 * C2412 + C31445 * C6882 +
             C47947 * C6884) *
                C47914) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                   C16117 +
               (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                   C16113 +
               (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                  C47835 * C47647 * C47629 * C108 -
              ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
               (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                  C47835 * C47647 * C47629 * C109 +
              ((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
               (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                  C47835 * C47647 * C47629 * C110 -
              ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
               (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
                  C47835 * C47647 * C47629 * C111 +
              ((C31494 + C31493) * C16117 + (C31492 + C31491) * C16113 +
               (C31444 * C122 + C31442 * C135 + C31445 * C770 + C47947 * C771) *
                   C16118 +
               (C31444 * C134 + C31442 * C143 + C31445 * C772 + C47947 * C773) *
                   C47914) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31444 * C117 + C31442 * C124 + C31445 * C482 +
                 C47947 * C495) *
                    C16117 +
                (C31444 * C125 + C31442 * C138 + C31445 * C494 +
                 C47947 * C512) *
                    C16113 +
                (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                   C47835 * C47647 * C47966 -
               ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
                (C31445 * C932 + C47947 * C941 + C31444 * C305 +
                 C31442 * C323) *
                    C16113 +
                (C31445 * C926 + C47947 * C931 + C31444 * C293 +
                 C31442 * C306) *
                    C16117) *
                   C47835 * C47647 * C47954 +
               ((C31444 * C294 + C31442 * C307 + C31445 * C1287 +
                 C47947 * C1302) *
                    C16117 +
                (C31444 * C308 + C31442 * C324 + C31445 * C1301 +
                 C47947 * C1314) *
                    C16113 +
                (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                   C47835 * C47647 * C47927) *
                  C288 +
              (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
                (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                   C47835 * C47647 * C47954 -
               ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
                (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                   C47835 * C47647 * C47966 -
               ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
                (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                   C47835 * C47647 * C47927) *
                  C289 +
              (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
                (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                   C47835 * C47647 * C47966 -
               ((C31445 * C937 + C47947 * C944 + C31444 * C314 +
                 C31442 * C327) *
                    C47914 +
                (C31445 * C929 + C47947 * C938 + C31444 * C297 +
                 C31442 * C313) *
                    C16118 +
                (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                   C47835 * C47647 * C47954 +
               ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
                (C31444 * C298 + C31442 * C316 + C31445 * C1584 +
                 C47947 * C1585) *
                    C16118 +
                (C31444 * C315 + C31442 * C328 + C31445 * C1586 +
                 C47947 * C1587) *
                    C47914) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47967 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47629 * C288 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47956 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47967 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C47930) *
              C47629 * C289 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47967 -
           ((C31445 * C504 + C47947 * C517 + C31444 * C503 + C31442 * C516) *
                C47914 +
            (C31445 * C487 + C47947 * C505 + C31444 * C486 + C31442 * C502) *
                C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47956 +
           ((C31882 + C31881) * C16117 + (C31880 + C31879) * C16113 +
            (C31444 * C487 + C31442 * C505 + C31445 * C2288 + C47947 * C2289) *
                C16118 +
            (C31444 * C504 + C31442 * C517 + C31445 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1074 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1075 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1075 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1074 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C1074 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C1075 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C1142 -
          ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
           (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
               C16113 +
           (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
               C16117) *
              C47835 * C47647 * C1143 +
          ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
               C16117 +
           (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
               C16113 +
           (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
              C47835 * C47647 * C1144 -
          ((C31445 * C1704 + C47947 * C1708 + C31444 * C1156 + C31442 * C1167) *
               C47914 +
           (C31445 * C1699 + C47947 * C1703 + C31444 * C1149 + C31442 * C1157) *
               C16118 +
           (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 + C31442 * C1168) *
               C16113 +
           (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 + C31442 * C1159) *
               C16117) *
              C47835 * C47647 * C1145 +
          ((C31444 * C1151 + C31442 * C1160 + C31445 * C6485 + C47947 * C6487) *
               C16117 +
           (C31444 * C1161 + C31442 * C1169 + C31445 * C6488 + C47947 * C6491) *
               C16113 +
           (C31444 * C1152 + C31442 * C1162 + C31445 * C6486 + C47947 * C6489) *
               C16118 +
           (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47967 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C1074 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47956 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47967 -
           ((C31445 * C2408 + C47947 * C2412 + C31444 * C1293 +
             C31442 * C1310) *
                C47914 +
            (C31445 * C2403 + C47947 * C2407 + C31444 * C1283 +
             C31442 * C1294) *
                C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C47930) *
              C1075 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47967 -
           ((C31445 * C1306 + C47947 * C1316 + C31444 * C1299 +
             C31442 * C1313) *
                C47914 +
            (C31445 * C1289 + C47947 * C1305 + C31444 * C1286 +
             C31442 * C1300) *
                C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C1288 + C31442 * C1303 + C31445 * C7349 +
             C47947 * C7351) *
                C16117 +
            (C31444 * C1304 + C31442 * C1315 + C31445 * C7352 +
             C47947 * C7355) *
                C16113 +
            (C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
             C47947 * C7353) *
                C16118 +
            (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C1820 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C1821 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C1820 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C1820 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C1821 +
           ((C31882 + C31881) * C16117 + (C31880 + C31879) * C16113 +
            (C31444 * C487 + C31442 * C505 + C31445 * C2288 + C47947 * C2289) *
                C16118 +
            (C31444 * C504 + C31442 * C517 + C31445 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C1820 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47966 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C1821 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C1820 -
           ((C31445 * C2408 + C47947 * C2412 + C31444 * C1293 +
             C31442 * C1310) *
                C47914 +
            (C31445 * C2403 + C47947 * C2407 + C31444 * C1283 +
             C31442 * C1294) *
                C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C47930) *
              C47954 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C1820 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C1288 + C31442 * C1303 + C31445 * C7349 +
             C47947 * C7351) *
                C16117 +
            (C31444 * C1304 + C31442 * C1315 + C31445 * C7352 +
             C47947 * C7355) *
                C16113 +
            (C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
             C47947 * C7353) *
                C16118 +
            (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C1995 -
          ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
           (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
               C16113 +
           (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
               C16117) *
              C47835 * C1996 +
          ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
               C16117 +
           (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
               C16113 +
           (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
              C47835 * C1997 -
          ((C31445 * C2015 + C47947 * C2022 + C31444 * C2008 + C31442 * C2019) *
               C47914 +
           (C31445 * C2004 + C47947 * C2014 + C31444 * C2001 + C31442 * C2009) *
               C16118 +
           (C31445 * C2013 + C47947 * C2021 + C31444 * C2010 + C31442 * C2020) *
               C16113 +
           (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 + C31442 * C2011) *
               C16117) *
              C47835 * C1998 +
          ((C31444 * C2003 + C31442 * C2012 + C31445 * C12581 +
            C47947 * C12583) *
               C16117 +
           (C31444 * C2013 + C31442 * C2021 + C31445 * C12584 +
            C47947 * C12587) *
               C16113 +
           (C31444 * C2004 + C31442 * C2014 + C31445 * C12582 +
            C47947 * C12585) *
               C16118 +
           (C31444 * C2015 + C31442 * C2022 + C31445 * C12586 +
            C47947 * C12588) *
               C47914) *
              C47835 * C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C1074 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C1075 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C47896 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C1074 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C1075 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47896 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47629 * C656 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47734 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47896) *
              C47629 * C657 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47896 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47734) *
              C47629 * C658 +
          (((C32166 + C32165) * C16117 + (C32164 + C32163) * C16113 +
            (C31444 * C488 + C31442 * C507 + C31445 * C489 + C47947 * C508) *
                C16118 +
            (C31444 * C506 + C31442 * C518 + C31445 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C2284 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C2285 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C2286 -
           ((C33955 + C33956) * C47914 + (C33957 + C33958) * C16118 +
            (C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
             C31442 * C2020) *
                C16113 +
            (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
             C31442 * C2011) *
                C16117) *
               C47835 * C47943) *
              C47629 * C47881 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C2285 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C2284 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C2286 +
           ((C33958 + C33957) * C16117 + (C33956 + C33955) * C16113 +
            (C31444 * C2000 + C31442 * C2007 + C31445 * C2005 +
             C47947 * C2016) *
                C16118 +
            (C31444 * C2006 + C31442 * C2018 + C31445 * C2017 +
             C47947 * C2023) *
                C47914) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47954 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47954 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47966 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31445 * C937 + C47947 * C944 + C31444 * C314 + C31442 * C327) *
                C47914 +
            (C31445 * C929 + C47947 * C938 + C31444 * C297 + C31442 * C313) *
                C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47954 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
           (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
              C47835 * C47647 * C47629 * C109 +
          ((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
           (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
           (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
              C47835 * C47647 * C47629 * C111 +
          ((C31494 + C31493) * C16117 + (C31492 + C31491) * C16113 +
           (C31444 * C122 + C31442 * C135 + C31445 * C770 + C47947 * C771) *
               C16118 +
           (C31444 * C134 + C31442 * C143 + C31445 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1074 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1075 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1075 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1074 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C1074 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C1075 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C1142 -
          ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
           (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
               C16113 +
           (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
               C16117) *
              C47835 * C47647 * C1143 +
          ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
               C16117 +
           (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
               C16113 +
           (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
              C47835 * C47647 * C1144 -
          ((C31445 * C1704 + C47947 * C1708 + C31444 * C1156 + C31442 * C1167) *
               C47914 +
           (C31445 * C1699 + C47947 * C1703 + C31444 * C1149 + C31442 * C1157) *
               C16118 +
           (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 + C31442 * C1168) *
               C16113 +
           (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 + C31442 * C1159) *
               C16117) *
              C47835 * C47647 * C1145 +
          ((C31444 * C1151 + C31442 * C1160 + C31445 * C6485 + C47947 * C6487) *
               C16117 +
           (C31444 * C1161 + C31442 * C1169 + C31445 * C6488 + C47947 * C6491) *
               C16113 +
           (C31444 * C1152 + C31442 * C1162 + C31445 * C6486 + C47947 * C6489) *
               C16118 +
           (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C1820 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C1821 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C1820 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C1820 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C1821 +
           ((C31882 + C31881) * C16117 + (C31880 + C31879) * C16113 +
            (C31444 * C487 + C31442 * C505 + C31445 * C2288 + C47947 * C2289) *
                C16118 +
            (C31444 * C504 + C31442 * C517 + C31445 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C1820 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47966 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C1821 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C1820 -
           ((C31445 * C2408 + C47947 * C2412 + C31444 * C1293 +
             C31442 * C1310) *
                C47914 +
            (C31445 * C2403 + C47947 * C2407 + C31444 * C1283 +
             C31442 * C1294) *
                C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C47930) *
              C47954 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C1820 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C1821 +
           ((C31444 * C1288 + C31442 * C1303 + C31445 * C7349 +
             C47947 * C7351) *
                C16117 +
            (C31444 * C1304 + C31442 * C1315 + C31445 * C7352 +
             C47947 * C7355) *
                C16113 +
            (C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
             C47947 * C7353) *
                C16118 +
            (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47895 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47692) *
              C47606 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C47895 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C3274 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C47895 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47730 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47737 +
            ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C16117 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C16113 +
             (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
                C47835 * C3782) *
               C47895 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47737 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47730 -
            ((C33813 + C33814) * C47914 + (C33815 + C33816) * C16118 +
             (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
              C31442 * C1311) *
                 C16113 +
             (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
              C31442 * C1296) *
                 C16117) *
                C47835 * C3782) *
               C47692) *
              C2620 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47737 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47730 -
            ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
             (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
                C47835 * C3782) *
               C47895 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47730 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47737 +
            ((C33816 + C33815) * C16117 + (C33814 + C33813) * C16113 +
             (C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C16118 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47914) *
                C47835 * C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47966 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47954 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C3274 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C47927) *
              C2620 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C47966 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47954 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C3274 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47734 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C3274) *
              C47629 * C47965 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C3274 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C32166 + C32165) * C16117 + (C32164 + C32163) * C16113 +
            (C31444 * C488 + C31442 * C507 + C31445 * C489 + C47947 * C508) *
                C16118 +
            (C31444 * C506 + C31442 * C518 + C31445 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47974 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47971 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47962 -
           ((C33955 + C33956) * C47914 + (C33957 + C33958) * C16118 +
            (C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
             C31442 * C2020) *
                C16113 +
            (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
             C31442 * C2011) *
                C16117) *
               C47835 * C47943) *
              C47629 * C2620 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47971 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47974 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C47962 +
           ((C33958 + C33957) * C16117 + (C33956 + C33955) * C16113 +
            (C31444 * C2000 + C31442 * C2007 + C31445 * C2005 +
             C47947 * C2016) *
                C16118 +
            (C31444 * C2006 + C31442 * C2018 + C31445 * C2017 +
             C47947 * C2023) *
                C47914) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47730 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47737 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C3782) *
              C47629 * C47606 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47737 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47730 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C3782) *
              C47629 * C47615 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47730 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47737 +
           ((C31882 + C31881) * C16117 + (C31880 + C31879) * C16113 +
            (C31444 * C487 + C31442 * C505 + C31445 * C2288 + C47947 * C2289) *
                C16118 +
            (C31444 * C504 + C31442 * C517 + C31445 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C3274 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47734 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C3274) *
              C47629 * C47965 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C3274 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C32166 + C32165) * C16117 + (C32164 + C32163) * C16113 +
            (C31444 * C488 + C31442 * C507 + C31445 * C489 + C47947 * C508) *
                C16118 +
            (C31444 * C506 + C31442 * C518 + C31445 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C3274 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47966 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C3274) *
               C47954 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C3274 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C47927) *
              C2620 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C3274) *
               C47966 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C3274 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47954 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47895 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47692) *
              C656 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47692 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47895) *
              C657 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47895 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47692) *
              C658 +
          (((C32024 + C32023) * C16117 + (C32022 + C32021) * C16113 +
            (C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C16118 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47914) *
               C47835 * C47647 * C47692 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1416 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1417 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C1418 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1417 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1416 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C1418 +
           ((C32900 + C32899) * C16117 + (C32898 + C32897) * C16113 +
            (C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
             C47947 * C1705) *
                C16118 +
            (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
             C47947 * C1709) *
                C47914) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C47895 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C47692) *
              C288 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C47895 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C47692) *
              C289 +
          ((((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
             (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
                C47835 * C47896 -
            ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
             (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
                C47835 * C47734) *
               C47895 +
           (((C32384 + C32383) * C16117 + (C32382 + C32381) * C16113 +
             (C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C16118 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47914) *
                C47835 * C47734 -
            ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
             (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47896 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C1416 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47734 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47896) *
              C1417 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47896 -
           ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47734) *
              C1418 +
          (((C31444 * C1698 + C31442 * C1701 + C31445 * C5973 +
             C47947 * C5975) *
                C16117 +
            (C31444 * C1702 + C31442 * C1707 + C31445 * C5976 +
             C47947 * C5979) *
                C16113 +
            (C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
             C47947 * C5977) *
                C16118 +
            (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
             C47947 * C5980) *
                C47914) *
               C47835 * C47734 -
           ((C32897 + C32898) * C47914 + (C32899 + C32900) * C16118 +
            (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 +
             C31442 * C1168) *
                C16113 +
            (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 +
             C31442 * C1159) *
                C16117) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47954 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47954 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47966 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31445 * C937 + C47947 * C944 + C31444 * C314 + C31442 * C327) *
                C47914 +
            (C31445 * C929 + C47947 * C938 + C31444 * C297 + C31442 * C313) *
                C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47954 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
           (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
              C47835 * C47647 * C47629 * C109 +
          ((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
           (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
           (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
              C47835 * C47647 * C47629 * C111 +
          ((C31494 + C31493) * C16117 + (C31492 + C31491) * C16113 +
           (C31444 * C122 + C31442 * C135 + C31445 * C770 + C47947 * C771) *
               C16118 +
           (C31444 * C134 + C31442 * C143 + C31445 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47967 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C47629 * C288 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47956 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47967 -
           ((C31879 + C31880) * C47914 + (C31881 + C31882) * C16118 +
            (C31874 + C31873) * C16113 + (C31872 + C31871) * C16117) *
               C47835 * C47930) *
              C47629 * C289 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47967 -
           ((C31445 * C504 + C47947 * C517 + C31444 * C503 + C31442 * C516) *
                C47914 +
            (C31445 * C487 + C47947 * C505 + C31444 * C486 + C31442 * C502) *
                C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47956 +
           ((C31882 + C31881) * C16117 + (C31880 + C31879) * C16113 +
            (C31444 * C487 + C31442 * C505 + C31445 * C2288 + C47947 * C2289) *
                C16118 +
            (C31444 * C504 + C31442 * C517 + C31445 * C2290 + C47947 * C2291) *
                C47914) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1074 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1075 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1075 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1074 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C1074 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C1075 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C1142 -
          ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
           (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
               C16113 +
           (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
               C16117) *
              C47835 * C47647 * C1143 +
          ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
               C16117 +
           (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
               C16113 +
           (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
              C47835 * C47647 * C1144 -
          ((C31445 * C1704 + C47947 * C1708 + C31444 * C1156 + C31442 * C1167) *
               C47914 +
           (C31445 * C1699 + C47947 * C1703 + C31444 * C1149 + C31442 * C1157) *
               C16118 +
           (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 + C31442 * C1168) *
               C16113 +
           (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 + C31442 * C1159) *
               C16117) *
              C47835 * C47647 * C1145 +
          ((C31444 * C1151 + C31442 * C1160 + C31445 * C6485 + C47947 * C6487) *
               C16117 +
           (C31444 * C1161 + C31442 * C1169 + C31445 * C6488 + C47947 * C6491) *
               C16113 +
           (C31444 * C1152 + C31442 * C1162 + C31445 * C6486 + C47947 * C6489) *
               C16118 +
           (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47967 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C16117 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C16113 +
            (C31871 + C31872) * C16118 + (C31873 + C31874) * C47914) *
               C47835 * C47930) *
              C1074 +
          (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                C16117 +
            (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                C16113 +
            (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
               C47835 * C47956 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47967 -
           ((C31445 * C2408 + C47947 * C2412 + C31444 * C1293 +
             C31442 * C1310) *
                C47914 +
            (C31445 * C2403 + C47947 * C2407 + C31444 * C1283 +
             C31442 * C1294) *
                C16118 +
            (C31445 * C2406 + C47947 * C2411 + C31444 * C1295 +
             C31442 * C1311) *
                C16113 +
            (C31445 * C2402 + C47947 * C2405 + C31444 * C1284 +
             C31442 * C1296) *
                C16117) *
               C47835 * C47930) *
              C1075 +
          (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47967 -
           ((C31445 * C1306 + C47947 * C1316 + C31444 * C1299 +
             C31442 * C1313) *
                C47914 +
            (C31445 * C1289 + C47947 * C1305 + C31444 * C1286 +
             C31442 * C1300) *
                C16118 +
            (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
             C31442 * C1314) *
                C16113 +
            (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
             C31442 * C1302) *
                C16117) *
               C47835 * C47956 +
           ((C31444 * C1288 + C31442 * C1303 + C31445 * C7349 +
             C47947 * C7351) *
                C16117 +
            (C31444 * C1304 + C31442 * C1315 + C31445 * C7352 +
             C47947 * C7355) *
                C16113 +
            (C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
             C47947 * C7353) *
                C16118 +
            (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
             C47947 * C7356) *
                C47914) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47896 -
           ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
            (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C16113 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C16117) *
               C47835 * C47734) *
              C47629 * C656 +
          (((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
            (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
               C47835 * C47734 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47896) *
              C47629 * C657 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47896 -
           ((C32163 + C32164) * C47914 + (C32165 + C32166) * C16118 +
            (C31878 + C31877) * C16113 + (C31876 + C31875) * C16117) *
               C47835 * C47734) *
              C47629 * C658 +
          (((C32166 + C32165) * C16117 + (C32164 + C32163) * C16113 +
            (C31444 * C488 + C31442 * C507 + C31445 * C489 + C47947 * C508) *
                C16118 +
            (C31444 * C506 + C31442 * C518 + C31445 * C509 + C47947 * C519) *
                C47914) *
               C47835 * C47734 -
           ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
            (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C16117 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C16113 +
             (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
                C47835 * C47896 -
            ((C31867 + C31868) * C47914 + (C31869 + C31870) * C16118 +
             (C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C16113 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C16117) *
                C47835 * C47734) *
               C1074 +
           (((C31444 * C926 + C31442 * C931 + C31445 * C1284 + C47947 * C1296) *
                 C16117 +
             (C31444 * C932 + C31442 * C941 + C31445 * C1295 + C47947 * C1311) *
                 C16113 +
             (C32377 + C32378) * C16118 + (C32379 + C32380) * C47914) *
                C47835 * C47734 -
            ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
             (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                 C16113 +
             (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                 C16117) *
                C47835 * C47896) *
               C1075 +
           (((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                 C16117 +
             (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                 C16113 +
             (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
                C47835 * C47896 -
            ((C33103 + C33104) * C47914 + (C33105 + C33106) * C16118 +
             (C31445 * C1304 + C47947 * C1315 + C31444 * C1301 +
              C31442 * C1314) *
                 C16113 +
             (C31445 * C1288 + C47947 * C1303 + C31444 * C1287 +
              C31442 * C1302) *
                 C16117) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C31870 + C31869) * C16117 + (C31868 + C31867) * C16113 +
             (C31875 + C31876) * C16118 + (C31877 + C31878) * C47914) *
                C47835 * C47734 -
            ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
             (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
                C47835 * C47896) *
               C1074 +
           (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
             (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
                C47835 * C47896 -
            ((C32381 + C32382) * C47914 + (C32383 + C32384) * C16118 +
             (C32380 + C32379) * C16113 + (C32378 + C32377) * C16117) *
                C47835 * C47734) *
               C1075 +
           (((C33106 + C33105) * C16117 + (C33104 + C33103) * C16113 +
             (C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
              C47947 * C1307) *
                 C16118 +
             (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
              C47947 * C1317) *
                 C47914) *
                C47835 * C47734 -
            ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
             (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C47629 * C108 -
          ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
           (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
              C47835 * C47647 * C47629 * C109 +
          ((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
           (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
              C47835 * C47647 * C47629 * C110 -
          ((C31491 + C31492) * C47914 + (C31493 + C31494) * C16118 +
           (C31490 + C31489) * C16113 + (C31488 + C31487) * C16117) *
              C47835 * C47647 * C47629 * C111 +
          ((C31494 + C31493) * C16117 + (C31492 + C31491) * C16113 +
           (C31444 * C122 + C31442 * C135 + C31445 * C770 + C47947 * C771) *
               C16118 +
           (C31444 * C134 + C31442 * C143 + C31445 * C772 + C47947 * C773) *
               C47914) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C47954 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C288 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C47954 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C47966 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C289 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C47966 -
           ((C31445 * C937 + C47947 * C944 + C31444 * C314 + C31442 * C327) *
                C47914 +
            (C31445 * C929 + C47947 * C938 + C31444 * C297 + C31442 * C313) *
                C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C47954 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C16117 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C16113 +
            (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
               C47835 * C47647 * C1074 -
           ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
            (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
                C16113 +
            (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
                C16117) *
               C47835 * C47647 * C1075 +
           ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
                C16117 +
            (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
                C16113 +
            (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C31676 + C31675) * C16117 + (C31674 + C31673) * C16113 +
            (C31681 + C31682) * C16118 + (C31683 + C31684) * C47914) *
               C47835 * C47647 * C1075 -
           ((C31483 + C31484) * C47914 + (C31485 + C31486) * C16118 +
            (C31482 + C31481) * C16113 + (C31480 + C31479) * C16117) *
               C47835 * C47647 * C1074 -
           ((C31685 + C31686) * C47914 + (C31687 + C31688) * C16118 +
            (C31680 + C31679) * C16113 + (C31678 + C31677) * C16117) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C31486 + C31485) * C16117 + (C31484 + C31483) * C16113 +
            (C31487 + C31488) * C16118 + (C31489 + C31490) * C47914) *
               C47835 * C47647 * C1074 -
           ((C32021 + C32022) * C47914 + (C32023 + C32024) * C16118 +
            (C31684 + C31683) * C16113 + (C31682 + C31681) * C16117) *
               C47835 * C47647 * C1075 +
           ((C31688 + C31687) * C16117 + (C31686 + C31685) * C16113 +
            (C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                C16118 +
            (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                C47914) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
               C16117 +
           (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
               C16113 +
           (C31479 + C31480) * C16118 + (C31481 + C31482) * C47914) *
              C47835 * C47647 * C1142 -
          ((C31673 + C31674) * C47914 + (C31675 + C31676) * C16118 +
           (C31445 * C932 + C47947 * C941 + C31444 * C305 + C31442 * C323) *
               C16113 +
           (C31445 * C926 + C47947 * C931 + C31444 * C293 + C31442 * C306) *
               C16117) *
              C47835 * C47647 * C1143 +
          ((C31444 * C294 + C31442 * C307 + C31445 * C1287 + C47947 * C1302) *
               C16117 +
           (C31444 * C308 + C31442 * C324 + C31445 * C1301 + C47947 * C1314) *
               C16113 +
           (C31677 + C31678) * C16118 + (C31679 + C31680) * C47914) *
              C47835 * C47647 * C1144 -
          ((C31445 * C1704 + C47947 * C1708 + C31444 * C1156 + C31442 * C1167) *
               C47914 +
           (C31445 * C1699 + C47947 * C1703 + C31444 * C1149 + C31442 * C1157) *
               C16118 +
           (C31445 * C1702 + C47947 * C1707 + C31444 * C1158 + C31442 * C1168) *
               C16113 +
           (C31445 * C1698 + C47947 * C1701 + C31444 * C1150 + C31442 * C1159) *
               C16117) *
              C47835 * C47647 * C1145 +
          ((C31444 * C1151 + C31442 * C1160 + C31445 * C6485 + C47947 * C6487) *
               C16117 +
           (C31444 * C1161 + C31442 * C1169 + C31445 * C6488 + C47947 * C6491) *
               C16113 +
           (C31444 * C1152 + C31442 * C1162 + C31445 * C6486 + C47947 * C6489) *
               C16118 +
           (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 + C47947 * C6492) *
               C47914) *
              C47835 * C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47688 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47695 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47647 * C2880) *
              C47606 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47695 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47688 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C2880) *
              C47615 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47688 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47695 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47688 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C47695 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C47896 -
            (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C2880) *
              C2620 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C47688 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47695 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C47896) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47973 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47969 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47647 * C47959 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47647 * C47937) *
              C2620 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47969 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47973 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47959 +
           (((C32900 + C32899) * C21631 + (C32898 + C32897) * C47576) * C4757 +
            ((C31444 * C1152 + C31442 * C1162 + C31445 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47692) *
              C47972 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C2512) *
              C47965 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47692) *
              C47952 +
          ((((C32024 + C32023) * C21631 + (C32022 + C32021) * C47576) * C4757 +
            ((C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                 C21631 +
             (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47967 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47956 +
            (((C31444 * C483 + C31442 * C496 + C31445 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C31444 * C497 + C31442 * C513 + C31445 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C4757 +
             ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                 C47945) *
                C47930) *
               C2512 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47956 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47967 -
            (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) *
                 C47945 +
             ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) *
                 C4757) *
                C47930) *
               C47692) *
              C2620 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47956 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47967 -
            (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) *
                 C47945 +
             ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) *
                 C4757) *
                C47930) *
               C2512 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47967 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47956 +
            (((C33816 + C33815) * C21631 + (C33814 + C33813) * C47576) * C4757 +
             ((C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C47606 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C2512 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C47615 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C47896 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47692) *
              C47972 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C2512) *
              C47965 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C2512 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47692) *
              C47952 +
          ((((C32024 + C32023) * C21631 + (C32022 + C32021) * C47576) * C4757 +
            ((C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                 C21631 +
             (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47647 * C2512) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47973 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47969 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47647 * C47959 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47647 * C47937) *
              C2620 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47969 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47973 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47959 +
           (((C32900 + C32899) * C21631 + (C32898 + C32897) * C47576) * C4757 +
            ((C31444 * C1152 + C31442 * C1162 + C31445 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47688 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47695 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C3274 -
            (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C2880) *
              C47881 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C47688 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47695 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C3274) *
               C2880) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47730 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47737 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C3782) *
              C47688 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47737 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47730 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C3782) *
              C47695 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47730 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47737 +
           (((C38350 + C38349) * C21631 + (C38348 + C38347) * C47576) * C4757 +
            ((C31444 * C5973 + C31442 * C5975 + C31445 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C31444 * C5976 + C31442 * C5979 + C31445 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C3782) *
              C2880) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C3274 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47973 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47734 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C3274) *
              C47969 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C3274 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47734) *
              C47959 +
          ((((C38816 + C38815) * C21631 + (C38814 + C38813) * C47576) * C4757 +
            ((C31444 * C6485 + C31442 * C6487 + C31445 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C31444 * C6488 + C31442 * C6491 + C31445 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C47963 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C2512 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C47950 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C3274 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47974 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47971 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47962 -
           (((C39653 + C39654) * C47576 + (C39655 + C39656) * C21631) * C47945 +
            ((C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
              C31442 * C2020) *
                 C47576 +
             (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
              C31442 * C2011) *
                 C21631) *
                C4757) *
               C47943) *
              C2512 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47971 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47974 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C47962 +
           (((C39656 + C39655) * C21631 + (C39654 + C39653) * C47576) * C4757 +
            ((C31444 * C7349 + C31442 * C7351 + C31445 * C23192 +
              C47947 * C23193) *
                 C21631 +
             (C31444 * C7352 + C31442 * C7355 + C31445 * C23194 +
              C47947 * C23195) *
                 C47576) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47730 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47737 +
            (((C31444 * C483 + C31442 * C496 + C31445 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C31444 * C497 + C31442 * C513 + C31445 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C4757 +
             ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                 C47945) *
                C3782) *
               C2512 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47737 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47730 -
            (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) *
                 C47945 +
             ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) *
                 C4757) *
                C3782) *
               C47692) *
              C47881 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47737 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47730 -
            (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) *
                 C47945 +
             ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) *
                 C4757) *
                C3782) *
               C2512 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47730 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47737 +
            (((C33816 + C33815) * C21631 + (C33814 + C33813) * C47576) * C4757 +
             ((C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C47963 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C2512 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C47950 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C3274 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C2512 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C3274 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47973 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47734 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C3274) *
              C47969 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C3274 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47734) *
              C47959 +
          ((((C38816 + C38815) * C21631 + (C38814 + C38813) * C47576) * C4757 +
            ((C31444 * C6485 + C31442 * C6487 + C31445 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C31444 * C6488 + C31442 * C6491 + C31445 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C3274) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1416 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1417 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47647 * C1418 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47647 * C47937) *
              C47881 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1417 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1416 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C1418 +
           (((C32900 + C32899) * C21631 + (C32898 + C32897) * C47576) * C4757 +
            ((C31444 * C1152 + C31442 * C1162 + C31445 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47692) *
              C656 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47895) *
              C657 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47692) *
              C658 +
          ((((C32024 + C32023) * C21631 + (C32022 + C32021) * C47576) * C4757 +
            ((C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                 C21631 +
             (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C1820 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C1821 +
            (((C31444 * C483 + C31442 * C496 + C31445 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C31444 * C497 + C31442 * C513 + C31445 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C4757 +
             ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                 C47945) *
                C47930) *
               C47895 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C1821 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C1820 -
            (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) *
                 C47945 +
             ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) *
                 C4757) *
                C47930) *
               C47692) *
              C47881 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C1821 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C1820 -
            (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) *
                 C47945 +
             ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) *
                 C4757) *
                C47930) *
               C47895 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C1820 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C1821 +
            (((C33816 + C33815) * C21631 + (C33814 + C33813) * C47576) * C4757 +
             ((C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47896 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C1416 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47734 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47896) *
              C1417 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47896 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47734) *
              C1418 +
          ((((C38816 + C38815) * C21631 + (C38814 + C38813) * C47576) * C4757 +
            ((C31444 * C6485 + C31442 * C6487 + C31445 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C31444 * C6488 + C31442 * C6491 + C31445 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C31444 * C1287 + C31442 * C1302 + C31445 * C1288 +
               C47947 * C1303) *
                  C21631 +
              (C31444 * C1301 + C31442 * C1314 + C31445 * C1304 +
               C47947 * C1315) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C288 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C47895 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C289 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C47896 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C2284 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C2285 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C2286 -
           (((C39653 + C39654) * C47576 + (C39655 + C39656) * C21631) * C47945 +
            ((C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
              C31442 * C2020) *
                 C47576 +
             (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
              C31442 * C2011) *
                 C21631) *
                C4757) *
               C47943) *
              C47895 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C2285 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C2284 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C2286 +
           (((C39656 + C39655) * C21631 + (C39654 + C39653) * C47576) * C4757 +
            ((C31444 * C7349 + C31442 * C7351 + C31445 * C23192 +
              C47947 * C23193) *
                 C21631 +
             (C31444 * C7352 + C31442 * C7355 + C31445 * C23194 +
              C47947 * C23195) *
                 C47576) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31444 * C117 + C31442 * C124 + C31445 * C482 +
                 C47947 * C495) *
                    C21631 +
                (C31444 * C125 + C31442 * C138 + C31445 * C494 +
                 C47947 * C512) *
                    C47576) *
                   C4757 +
               ((C31444 * C293 + C31442 * C306 + C31445 * C926 +
                 C47947 * C931) *
                    C21631 +
                (C31444 * C305 + C31442 * C323 + C31445 * C932 +
                 C47947 * C941) *
                    C47576) *
                   C47945) *
                  C47647 * C47629 * C108 -
              (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                   C47945 +
               ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                   C4757) *
                  C47647 * C47629 * C109 +
              (((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) *
                   C4757 +
               ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                   C47945) *
                  C47647 * C47629 * C110 -
              (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) *
                   C47945 +
               ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) *
                   C4757) *
                  C47647 * C47629 * C111 +
              (((C31494 + C31493) * C21631 + (C31492 + C31491) * C47576) *
                   C4757 +
               ((C31444 * C299 + C31442 * C318 + C31445 * C930 +
                 C47947 * C939) *
                    C21631 +
                (C31444 * C317 + C31442 * C329 + C31445 * C940 +
                 C47947 * C945) *
                    C47576) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31444 * C117 + C31442 * C124 + C31445 * C482 +
                  C47947 * C495) *
                     C21631 +
                 (C31444 * C125 + C31442 * C138 + C31445 * C494 +
                  C47947 * C512) *
                     C47576) *
                    C4757 +
                ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                    C47945) *
                   C47647 * C47966 -
               (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                    C47945 +
                ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                    C4757) *
                   C47647 * C47954 +
               (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) *
                    C4757 +
                ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
                  C47947 * C1701) *
                     C21631 +
                 (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
                  C47947 * C1707) *
                     C47576) *
                    C47945) *
                   C47647 * C47927) *
                  C288 +
              ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) *
                    C4757 +
                ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                    C47945) *
                   C47647 * C47954 -
               (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                    C47945 +
                ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                    C4757) *
                   C47647 * C47966 -
               (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                    C47945 +
                ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                    C4757) *
                   C47647 * C47927) *
                  C289 +
              ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) *
                    C4757 +
                ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                    C47945) *
                   C47647 * C47966 -
               (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                    C47945 +
                ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                    C4757) *
                   C47647 * C47954 +
               (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) *
                    C4757 +
                ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
                  C47947 * C1705) *
                     C21631 +
                 (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
                  C47947 * C1709) *
                     C47576) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47967 -
           (((C31445 * C1295 + C47947 * C1311 + C31444 * C932 + C31442 * C941) *
                 C47576 +
             (C31445 * C1284 + C47947 * C1296 + C31444 * C926 + C31442 * C931) *
                 C21631) *
                C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47956 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C31444 * C1284 + C31442 * C1296 + C31445 * C2402 +
              C47947 * C2405) *
                 C21631 +
             (C31444 * C1295 + C31442 * C1311 + C31445 * C2406 +
              C47947 * C2411) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C288 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47956 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47967 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C47930) *
              C47629 * C289 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47967 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47956 +
           (((C31882 + C31881) * C21631 + (C31880 + C31879) * C47576) * C4757 +
            ((C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1075 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1074 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C1075 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) * C47945) *
              C47647 * C1142 -
          (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
           ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
              C47647 * C1143 +
          (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
           ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) * C47945) *
              C47647 * C1144 -
          (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
           ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
              C47647 * C1145 +
          (((C38168 + C38167) * C21631 + (C38166 + C38165) * C47576) * C4757 +
           ((C31444 * C5793 + C31442 * C5795 + C31445 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C31444 * C5796 + C31442 * C5799 + C31445 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47967 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47956 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C1074 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47956 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47967 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C47930) *
              C1075 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47967 -
           (((C31445 * C5976 + C47947 * C5979 + C31444 * C1702 +
              C31442 * C1707) *
                 C47576 +
             (C31445 * C5973 + C47947 * C5975 + C31444 * C1698 +
              C31442 * C1701) *
                 C21631) *
                C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47956 +
           (((C38350 + C38349) * C21631 + (C38348 + C38347) * C47576) * C4757 +
            ((C31444 * C5973 + C31442 * C5975 + C31445 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C31444 * C5976 + C31442 * C5979 + C31445 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C1820 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C1821 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C1821 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C1820 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C47930) *
              C47629 * C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C1820 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C1821 +
           (((C31882 + C31881) * C21631 + (C31880 + C31879) * C47576) * C4757 +
            ((C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C1820 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C1821 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C47966 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C1821 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C1820 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C47930) *
              C47954 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C1820 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C1821 +
           (((C38350 + C38349) * C21631 + (C38348 + C38347) * C47576) * C4757 +
            ((C31444 * C5973 + C31442 * C5975 + C31445 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C31444 * C5976 + C31442 * C5979 + C31445 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) * C47945) *
              C1995 -
          (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
           ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                C47576 +
            (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                C21631) *
               C4757) *
              C1996 +
          (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                C21631 +
            (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                C47576) *
               C4757 +
           ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) * C47945) *
              C1997 -
          (((C31445 * C6880 + C47947 * C6883 + C31444 * C2406 +
             C31442 * C2411) *
                C47576 +
            (C31445 * C6877 + C47947 * C6879 + C31444 * C2402 +
             C31442 * C2405) *
                C21631) *
               C47945 +
           ((C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
             C31442 * C2020) *
                C47576 +
            (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
             C31442 * C2011) *
                C21631) *
               C4757) *
              C1998 +
          (((C31444 * C2003 + C31442 * C2012 + C31445 * C12581 +
             C47947 * C12583) *
                C21631 +
            (C31444 * C2013 + C31442 * C2021 + C31445 * C12584 +
             C47947 * C12587) *
                C47576) *
               C4757 +
           ((C31444 * C6877 + C31442 * C6879 + C31445 * C27926 +
             C47947 * C27927) *
                C21631 +
            (C31444 * C6880 + C31442 * C6883 + C31445 * C27928 +
             C47947 * C27929) *
                C47576) *
               C47945) *
              C1999) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C1074 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C1075 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C47896 -
            (((C31445 * C5976 + C47947 * C5979 + C31444 * C1702 +
               C31442 * C1707) *
                  C47576 +
              (C31445 * C5973 + C47947 * C5975 + C31444 * C1698 +
               C31442 * C1701) *
                  C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C47927) *
              C47881 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C1074 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C1075 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47896 -
           (((C31445 * C1295 + C47947 * C1311 + C31444 * C932 + C31442 * C941) *
                 C47576 +
             (C31445 * C1284 + C47947 * C1296 + C31444 * C926 + C31442 * C931) *
                 C21631) *
                C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47629 * C656 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47734 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47896) *
              C47629 * C657 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47896 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47734) *
              C47629 * C658 +
          ((((C32166 + C32165) * C21631 + (C32164 + C32163) * C47576) * C4757 +
            ((C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C21631 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C2284 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C2285 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C2286 -
           (((C31445 * C6880 + C47947 * C6883 + C31444 * C2406 +
              C31442 * C2411) *
                 C47576 +
             (C31445 * C6877 + C47947 * C6879 + C31444 * C2402 +
              C31442 * C2405) *
                 C21631) *
                C47945 +
            ((C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
              C31442 * C2020) *
                 C47576 +
             (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
              C31442 * C2011) *
                 C21631) *
                C4757) *
               C47943) *
              C47629 * C47881 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C2285 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C2284 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C2286 +
           (((C33958 + C33957) * C21631 + (C33956 + C33955) * C47576) * C4757 +
            ((C31444 * C2403 + C31442 * C2407 + C31445 * C6878 +
              C47947 * C6881) *
                 C21631 +
             (C31444 * C2408 + C31442 * C2412 + C31445 * C6882 +
              C47947 * C6884) *
                 C47576) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47954 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47966 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C289 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47954 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C31444 * C293 + C31442 * C306 + C31445 * C926 + C47947 * C931) *
                C21631 +
            (C31444 * C305 + C31442 * C323 + C31445 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
           ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
              C47647 * C47629 * C109 +
          (((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
           ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
           ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
              C47647 * C47629 * C111 +
          (((C31494 + C31493) * C21631 + (C31492 + C31491) * C47576) * C4757 +
           ((C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C21631 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1075 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1074 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C1075 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) * C47945) *
              C47647 * C1142 -
          (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
           ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
              C47647 * C1143 +
          (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
           ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) * C47945) *
              C47647 * C1144 -
          (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
           ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
              C47647 * C1145 +
          (((C38168 + C38167) * C21631 + (C38166 + C38165) * C47576) * C4757 +
           ((C31444 * C5793 + C31442 * C5795 + C31445 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C31444 * C5796 + C31442 * C5799 + C31445 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C1820 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C1821 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C1821 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C1820 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C47930) *
              C47629 * C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C1820 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C1821 +
           (((C31882 + C31881) * C21631 + (C31880 + C31879) * C47576) * C4757 +
            ((C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C1820 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C1821 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C47966 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C1821 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C1820 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C47930) *
              C47954 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C1820 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C1821 +
           (((C38350 + C38349) * C21631 + (C38348 + C38347) * C47576) * C4757 +
            ((C31444 * C5973 + C31442 * C5975 + C31445 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C31444 * C5976 + C31442 * C5979 + C31445 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C47606 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C47895 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C47615 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C3274 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C3274) *
               C47692) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47730 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47737 +
            (((C31444 * C483 + C31442 * C496 + C31445 * C2002 +
               C47947 * C2011) *
                  C21631 +
              (C31444 * C497 + C31442 * C513 + C31445 * C2010 +
               C47947 * C2020) *
                  C47576) *
                 C4757 +
             ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                 C47945) *
                C3782) *
               C47895 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47737 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47730 -
            (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) *
                 C47945 +
             ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) *
                 C4757) *
                C3782) *
               C47692) *
              C2620 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47737 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47730 -
            (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) *
                 C47945 +
             ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) *
                 C4757) *
                C3782) *
               C47895 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47730 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47737 +
            (((C33816 + C33815) * C21631 + (C33814 + C33813) * C47576) * C4757 +
             ((C31444 * C1289 + C31442 * C1305 + C31445 * C7350 +
               C47947 * C7353) *
                  C21631 +
              (C31444 * C1306 + C31442 * C1316 + C31445 * C7354 +
               C47947 * C7356) *
                  C47576) *
                 C47945) *
                C3782) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47966 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47954 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C3274 -
            (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C47927) *
              C2620 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C47966 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47954 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C3274 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47629 * C47972 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47734 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C3274) *
              C47629 * C47965 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C3274 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47734) *
              C47629 * C47952 +
          ((((C32166 + C32165) * C21631 + (C32164 + C32163) * C47576) * C4757 +
            ((C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C21631 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47974 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47971 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47962 -
           (((C39653 + C39654) * C47576 + (C39655 + C39656) * C21631) * C47945 +
            ((C31445 * C2013 + C47947 * C2021 + C31444 * C2010 +
              C31442 * C2020) *
                 C47576 +
             (C31445 * C2003 + C47947 * C2012 + C31444 * C2002 +
              C31442 * C2011) *
                 C21631) *
                C4757) *
               C47943) *
              C47629 * C2620 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47971 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47974 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C47962 +
           (((C33958 + C33957) * C21631 + (C33956 + C33955) * C47576) * C4757 +
            ((C31444 * C2403 + C31442 * C2407 + C31445 * C6878 +
              C47947 * C6881) *
                 C21631 +
             (C31444 * C2408 + C31442 * C2412 + C31445 * C6882 +
              C47947 * C6884) *
                 C47576) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47730 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47737 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C3782) *
              C47629 * C47606 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47737 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47730 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C3782) *
              C47629 * C47615 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47730 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47737 +
           (((C31882 + C31881) * C21631 + (C31880 + C31879) * C47576) * C4757 +
            ((C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C3782) *
              C47629 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C3274 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47629 * C47972 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47734 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C3274) *
              C47629 * C47965 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C3274 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47734) *
              C47629 * C47952 +
          ((((C32166 + C32165) * C21631 + (C32164 + C32163) * C47576) * C4757 +
            ((C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C21631 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C3274) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C3274 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47966 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C3274) *
               C47954 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C3274 -
            (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C47927) *
              C2620 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C3274) *
               C47966 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C3274 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47954 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C3274) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47692) *
              C656 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47692 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47895) *
              C657 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47895 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47692) *
              C658 +
          ((((C32024 + C32023) * C21631 + (C32022 + C32021) * C47576) * C4757 +
            ((C31444 * C298 + C31442 * C316 + C31445 * C1584 + C47947 * C1585) *
                 C21631 +
             (C31444 * C315 + C31442 * C328 + C31445 * C1586 + C47947 * C1587) *
                 C47576) *
                C47945) *
               C47647 * C47692 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1416 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1417 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47647 * C1418 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47647 * C47937) *
              C47881 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1417 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1416 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C1418 +
           (((C32900 + C32899) * C21631 + (C32898 + C32897) * C47576) * C4757 +
            ((C31444 * C1152 + C31442 * C1162 + C31445 * C6486 +
              C47947 * C6489) *
                 C21631 +
             (C31444 * C1163 + C31442 * C1170 + C31445 * C6490 +
              C47947 * C6492) *
                 C47576) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C31444 * C1287 + C31442 * C1302 + C31445 * C1288 +
               C47947 * C1303) *
                  C21631 +
              (C31444 * C1301 + C31442 * C1314 + C31445 * C1304 +
               C47947 * C1315) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C288 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C47895 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C47692) *
              C289 +
          (((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
             ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                 C47945) *
                C47896 -
            (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) *
                 C47945 +
             ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) *
                 C4757) *
                C47734) *
               C47895 +
           ((((C32384 + C32383) * C21631 + (C32382 + C32381) * C47576) * C4757 +
             ((C31444 * C1285 + C31442 * C1298 + C31445 * C1290 +
               C47947 * C1307) *
                  C21631 +
              (C31444 * C1297 + C31442 * C1312 + C31445 * C1308 +
               C47947 * C1317) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) *
                 C47945 +
             ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) *
                 C4757) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47896 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C1416 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47734 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47896) *
              C1417 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47896 -
           (((C38813 + C38814) * C47576 + (C38815 + C38816) * C21631) * C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47734) *
              C1418 +
          ((((C38816 + C38815) * C21631 + (C38814 + C38813) * C47576) * C4757 +
            ((C31444 * C6485 + C31442 * C6487 + C31445 * C22529 +
              C47947 * C22530) *
                 C21631 +
             (C31444 * C6488 + C31442 * C6491 + C31445 * C22531 +
              C47947 * C22532) *
                 C47576) *
                C47945) *
               C47734 -
           (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
            ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47954 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47966 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C289 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47954 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C31444 * C293 + C31442 * C306 + C31445 * C926 + C47947 * C931) *
                C21631 +
            (C31444 * C305 + C31442 * C323 + C31445 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
           ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
              C47647 * C47629 * C109 +
          (((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
           ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
           ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
              C47647 * C47629 * C111 +
          (((C31494 + C31493) * C21631 + (C31492 + C31491) * C47576) * C4757 +
           ((C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C21631 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47967 -
           (((C31445 * C1295 + C47947 * C1311 + C31444 * C932 + C31442 * C941) *
                 C47576 +
             (C31445 * C1284 + C47947 * C1296 + C31444 * C926 + C31442 * C931) *
                 C21631) *
                C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47956 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C31444 * C1284 + C31442 * C1296 + C31445 * C2402 +
              C47947 * C2405) *
                 C21631 +
             (C31444 * C1295 + C31442 * C1311 + C31445 * C2406 +
              C47947 * C2411) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C288 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47956 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47967 -
           (((C33813 + C33814) * C47576 + (C33815 + C33816) * C21631) * C47945 +
            ((C31874 + C31873) * C47576 + (C31872 + C31871) * C21631) * C4757) *
               C47930) *
              C47629 * C289 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47967 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47956 +
           (((C31882 + C31881) * C21631 + (C31880 + C31879) * C47576) * C4757 +
            ((C31444 * C1282 + C31442 * C1292 + C31445 * C2404 +
              C47947 * C2409) *
                 C21631 +
             (C31444 * C1291 + C31442 * C1309 + C31445 * C2410 +
              C47947 * C2413) *
                 C47576) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1075 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1074 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C1075 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) * C47945) *
              C47647 * C1142 -
          (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
           ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
              C47647 * C1143 +
          (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
           ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) * C47945) *
              C47647 * C1144 -
          (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
           ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
              C47647 * C1145 +
          (((C38168 + C38167) * C21631 + (C38166 + C38165) * C47576) * C4757 +
           ((C31444 * C5793 + C31442 * C5795 + C31445 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C31444 * C5796 + C31442 * C5799 + C31445 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47967 -
           (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) * C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47956 +
           (((C31444 * C483 + C31442 * C496 + C31445 * C2002 + C47947 * C2011) *
                 C21631 +
             (C31444 * C497 + C31442 * C513 + C31445 * C2010 + C47947 * C2020) *
                 C47576) *
                C4757 +
            ((C38339 + C38340) * C21631 + (C38341 + C38342) * C47576) *
                C47945) *
               C47930) *
              C1074 +
          ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
            ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                C47945) *
               C47956 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47967 -
           (((C38347 + C38348) * C47576 + (C38349 + C38350) * C21631) * C47945 +
            ((C38342 + C38341) * C47576 + (C38340 + C38339) * C21631) * C4757) *
               C47930) *
              C1075 +
          ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                C47945) *
               C47967 -
           (((C31445 * C5976 + C47947 * C5979 + C31444 * C1702 +
              C31442 * C1707) *
                 C47576 +
             (C31445 * C5973 + C47947 * C5975 + C31444 * C1698 +
              C31442 * C1701) *
                 C21631) *
                C47945 +
            ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) * C4757) *
               C47956 +
           (((C38350 + C38349) * C21631 + (C38348 + C38347) * C47576) * C4757 +
            ((C31444 * C5973 + C31442 * C5975 + C31445 * C23542 +
              C47947 * C23543) *
                 C21631 +
             (C31444 * C5976 + C31442 * C5979 + C31445 * C23544 +
              C47947 * C23545) *
                 C47576) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47896 -
           (((C31445 * C1295 + C47947 * C1311 + C31444 * C932 + C31442 * C941) *
                 C47576 +
             (C31445 * C1284 + C47947 * C1296 + C31444 * C926 + C31442 * C931) *
                 C21631) *
                C47945 +
            ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                 C47576 +
             (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                 C21631) *
                C4757) *
               C47734) *
              C47629 * C656 +
          ((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
            ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                C47945) *
               C47734 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47896) *
              C47629 * C657 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47896 -
           (((C32381 + C32382) * C47576 + (C32383 + C32384) * C21631) * C47945 +
            ((C31878 + C31877) * C47576 + (C31876 + C31875) * C21631) * C4757) *
               C47734) *
              C47629 * C658 +
          ((((C32166 + C32165) * C21631 + (C32164 + C32163) * C47576) * C4757 +
            ((C31444 * C929 + C31442 * C938 + C31445 * C2170 + C47947 * C2171) *
                 C21631 +
             (C31444 * C937 + C31442 * C944 + C31445 * C2172 + C47947 * C2173) *
                 C47576) *
                C47945) *
               C47734 -
           (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
            ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                  C21631 +
              (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                  C47576) *
                 C4757 +
             ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                 C47945) *
                C47896 -
            (((C37913 + C37914) * C47576 + (C37915 + C37916) * C21631) *
                 C47945 +
             ((C31445 * C497 + C47947 * C513 + C31444 * C494 + C31442 * C512) *
                  C47576 +
              (C31445 * C483 + C47947 * C496 + C31444 * C482 + C31442 * C495) *
                  C21631) *
                 C4757) *
                C47734) *
               C1074 +
           ((((C37916 + C37915) * C21631 + (C37914 + C37913) * C47576) * C4757 +
             ((C38343 + C38344) * C21631 + (C38345 + C38346) * C47576) *
                 C47945) *
                C47734 -
            (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) *
                 C47945 +
             ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) *
                 C4757) *
                C47896) *
               C1075 +
           ((((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
             ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) *
                 C47945) *
                C47896 -
            (((C31445 * C5976 + C47947 * C5979 + C31444 * C1702 +
               C31442 * C1707) *
                  C47576 +
              (C31445 * C5973 + C47947 * C5975 + C31444 * C1698 +
               C31442 * C1701) *
                  C21631) *
                 C47945 +
             ((C38346 + C38345) * C47576 + (C38344 + C38343) * C21631) *
                 C4757) *
                C47734) *
               C47927) *
              C47881 +
          (((((C31870 + C31869) * C21631 + (C31868 + C31867) * C47576) * C4757 +
             ((C32377 + C32378) * C21631 + (C32379 + C32380) * C47576) *
                 C47945) *
                C47734 -
            (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) *
                 C47945 +
             ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) *
                 C4757) *
                C47896) *
               C1074 +
           ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
             ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                 C47945) *
                C47896 -
            (((C33103 + C33104) * C47576 + (C33105 + C33106) * C21631) *
                 C47945 +
             ((C32380 + C32379) * C47576 + (C32378 + C32377) * C21631) *
                 C4757) *
                C47734) *
               C1075 +
           ((((C33106 + C33105) * C21631 + (C33104 + C33103) * C47576) * C4757 +
             ((C31444 * C1699 + C31442 * C1703 + C31445 * C5974 +
               C47947 * C5977) *
                  C21631 +
              (C31444 * C1704 + C31442 * C1708 + C31445 * C5978 +
               C47947 * C5980) *
                  C47576) *
                 C47945) *
                C47734 -
            (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) *
                 C47945 +
             ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) *
                 C4757) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C31444 * C293 + C31442 * C306 + C31445 * C926 + C47947 * C931) *
                C21631 +
            (C31444 * C305 + C31442 * C323 + C31445 * C932 + C47947 * C941) *
                C47576) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
           ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
              C47647 * C47629 * C109 +
          (((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
           ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) * C47945) *
              C47647 * C47629 * C110 -
          (((C32021 + C32022) * C47576 + (C32023 + C32024) * C21631) * C47945 +
           ((C31490 + C31489) * C47576 + (C31488 + C31487) * C21631) * C4757) *
              C47647 * C47629 * C111 +
          (((C31494 + C31493) * C21631 + (C31492 + C31491) * C47576) * C4757 +
           ((C31444 * C299 + C31442 * C318 + C31445 * C930 + C47947 * C939) *
                C21631 +
            (C31444 * C317 + C31442 * C329 + C31445 * C940 + C47947 * C945) *
                C47576) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C47954 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C288 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C47954 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C47966 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C289 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C47966 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C47954 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                 C21631 +
             (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                 C47576) *
                C4757 +
            ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
            ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
               C47647 * C1075 +
           (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
            ((C31444 * C1150 + C31442 * C1159 + C31445 * C1698 +
              C47947 * C1701) *
                 C21631 +
             (C31444 * C1158 + C31442 * C1168 + C31445 * C1702 +
              C47947 * C1707) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C31676 + C31675) * C21631 + (C31674 + C31673) * C47576) * C4757 +
            ((C31677 + C31678) * C21631 + (C31679 + C31680) * C47576) *
                C47945) *
               C47647 * C1075 -
           (((C31673 + C31674) * C47576 + (C31675 + C31676) * C21631) * C47945 +
            ((C31482 + C31481) * C47576 + (C31480 + C31479) * C21631) * C4757) *
               C47647 * C1074 -
           (((C32897 + C32898) * C47576 + (C32899 + C32900) * C21631) * C47945 +
            ((C31680 + C31679) * C47576 + (C31678 + C31677) * C21631) * C4757) *
               C47647 * C47927) *
              C47950 +
          ((((C31486 + C31485) * C21631 + (C31484 + C31483) * C47576) * C4757 +
            ((C31681 + C31682) * C21631 + (C31683 + C31684) * C47576) *
                C47945) *
               C47647 * C1074 -
           (((C31685 + C31686) * C47576 + (C31687 + C31688) * C21631) * C47945 +
            ((C31684 + C31683) * C47576 + (C31682 + C31681) * C21631) * C4757) *
               C47647 * C1075 +
           (((C31688 + C31687) * C21631 + (C31686 + C31685) * C47576) * C4757 +
            ((C31444 * C1148 + C31442 * C1155 + C31445 * C1700 +
              C47947 * C1705) *
                 C21631 +
             (C31444 * C1154 + C31442 * C1166 + C31445 * C1706 +
              C47947 * C1709) *
                 C47576) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C117 + C31442 * C124 + C31445 * C482 + C47947 * C495) *
                C21631 +
            (C31444 * C125 + C31442 * C138 + C31445 * C494 + C47947 * C512) *
                C47576) *
               C4757 +
           ((C37297 + C37298) * C21631 + (C37299 + C37300) * C47576) * C47945) *
              C47647 * C1142 -
          (((C37301 + C37302) * C47576 + (C37303 + C37304) * C21631) * C47945 +
           ((C37300 + C37299) * C47576 + (C37298 + C37297) * C21631) * C4757) *
              C47647 * C1143 +
          (((C37304 + C37303) * C21631 + (C37302 + C37301) * C47576) * C4757 +
           ((C38161 + C38162) * C21631 + (C38163 + C38164) * C47576) * C47945) *
              C47647 * C1144 -
          (((C38165 + C38166) * C47576 + (C38167 + C38168) * C21631) * C47945 +
           ((C38164 + C38163) * C47576 + (C38162 + C38161) * C21631) * C4757) *
              C47647 * C1145 +
          (((C38168 + C38167) * C21631 + (C38166 + C38165) * C47576) * C4757 +
           ((C31444 * C5793 + C31442 * C5795 + C31445 * C22897 +
             C47947 * C22898) *
                C21631 +
            (C31444 * C5796 + C31442 * C5799 + C31445 * C22899 +
             C47947 * C22900) *
                C47576) *
               C47945) *
              C47647 * C1146) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47688 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47695 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C2880) *
                       C47606 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47695 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47688 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C2880) *
                       C47615 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47688 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47695 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C2880) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47688 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C47695 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C2880) *
                       C2620 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C47688 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47695 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C47896) *
                        C2880) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47973 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47969 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47959 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47647 * C47937) *
                       C2620 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47969 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47973 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47959 +
                    ((C42685 * C1149 + C42682 * C1157 + C42686 * C1699 +
                      C42683 * C1703 + C42687 * C5974 + C42684 * C5977) *
                         C21631 +
                     (C42685 * C1156 + C42682 * C1167 + C42686 * C1704 +
                      C42683 * C1708 + C42687 * C5978 + C42684 * C5980) *
                         C47576) *
                        C47835 * C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C2512 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C47972 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C2512) *
                       C47965 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C2512 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C47952 +
                   (((C42685 * C297 + C42682 * C313 + C42686 * C929 +
                      C42683 * C938 + C42687 * C2170 + C42684 * C2171) *
                         C21631 +
                     (C42685 * C314 + C42682 * C327 + C42686 * C937 +
                      C42683 * C944 + C42687 * C2172 + C42684 * C2173) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47647 * C2512) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47967 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47956 +
                     ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                       C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                          C21631 +
                      (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                       C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                          C47576) *
                         C47835 * C47930) *
                        C2512 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47956 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47967 -
                     ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                       C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                          C47576 +
                      (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                       C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                          C21631) *
                         C47835 * C47930) *
                        C47692) *
                       C2620 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47956 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47967 -
                     ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                       C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                          C47576 +
                      (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                       C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                          C21631) *
                         C47835 * C47930) *
                        C2512 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47967 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47956 +
                     ((C42685 * C1283 + C42682 * C1294 + C42686 * C2403 +
                       C42683 * C2407 + C42687 * C6878 + C42684 * C6881) *
                          C21631 +
                      (C42685 * C1293 + C42682 * C1310 + C42686 * C2408 +
                       C42683 * C2412 + C42687 * C6882 + C42684 * C6884) *
                          C47576) *
                         C47835 * C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C47606 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C2512 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C47615 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C2512 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C47972 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C2512) *
                       C47965 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C2512 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C47952 +
                   (((C42685 * C297 + C42682 * C313 + C42686 * C929 +
                      C42683 * C938 + C42687 * C2170 + C42684 * C2171) *
                         C21631 +
                     (C42685 * C314 + C42682 * C327 + C42686 * C937 +
                      C42683 * C944 + C42687 * C2172 + C42684 * C2173) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47647 * C2512) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47973 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47969 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47959 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47647 * C47937) *
                       C2620 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47969 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47973 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47959 +
                    ((C42685 * C1149 + C42682 * C1157 + C42686 * C1699 +
                      C42683 * C1703 + C42687 * C5974 + C42684 * C5977) *
                         C21631 +
                     (C42685 * C1156 + C42682 * C1167 + C42686 * C1704 +
                      C42683 * C1708 + C42687 * C5978 + C42684 * C5980) *
                         C47576) *
                        C47835 * C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47688 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47695 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C2880) *
                       C47881 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C47688 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47695 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C3274) *
                        C2880) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47730 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47737 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C3782) *
                       C47688 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47737 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47730 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C3782) *
                       C47695 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47730 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47737 +
                    ((C42685 * C1288 + C42682 * C1303 + C42686 * C7349 +
                      C42683 * C7351 + C42687 * C23192 + C42684 * C23193) *
                         C21631 +
                     (C42685 * C1304 + C42682 * C1315 + C42686 * C7352 +
                      C42683 * C7355 + C42687 * C23194 + C42684 * C23195) *
                         C47576) *
                        C47835 * C3782) *
                       C2880) *
                  C47601) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47973 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C3274) *
                       C47969 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47734) *
                       C47959 +
                   (((C42685 * C1698 + C42682 * C1701 + C42686 * C5973 +
                      C42683 * C5975 + C42687 * C23542 + C42684 * C23543) *
                         C21631 +
                     (C42685 * C1702 + C42682 * C1707 + C42686 * C5976 +
                      C42683 * C5979 + C42687 * C23544 + C42684 * C23545) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C3274) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C47963 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C2512 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C47950 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47974 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47971 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47962 -
                    ((C42687 * C12584 + C42684 * C12587 + C42686 * C2013 +
                      C42683 * C2021 + C42685 * C2010 + C42682 * C2020) *
                         C47576 +
                     (C42687 * C12581 + C42684 * C12583 + C42686 * C2003 +
                      C42683 * C2012 + C42685 * C2002 + C42682 * C2011) *
                         C21631) *
                        C47835 * C47943) *
                       C2512 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47971 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47974 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C47962 +
                    ((C42685 * C2402 + C42682 * C2405 + C42686 * C6877 +
                      C42683 * C6879 + C42687 * C27926 + C42684 * C27927) *
                         C21631 +
                     (C42685 * C2406 + C42682 * C2411 + C42686 * C6880 +
                      C42683 * C6883 + C42687 * C27928 + C42684 * C27929) *
                         C47576) *
                        C47835 * C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47730 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47737 +
                     ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                       C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                          C21631 +
                      (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                       C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                          C47576) *
                         C47835 * C3782) *
                        C2512 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47737 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47730 -
                     ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                       C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                          C47576 +
                      (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                       C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                          C21631) *
                         C47835 * C3782) *
                        C47692) *
                       C47881 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47737 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47730 -
                     ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                       C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                          C47576 +
                      (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                       C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                          C21631) *
                         C47835 * C3782) *
                        C2512 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47730 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47737 +
                     ((C42685 * C1283 + C42682 * C1294 + C42686 * C2403 +
                       C42683 * C2407 + C42687 * C6878 + C42684 * C6881) *
                          C21631 +
                      (C42685 * C1293 + C42682 * C1310 + C42686 * C2408 +
                       C42683 * C2412 + C42687 * C6882 + C42684 * C6884) *
                          C47576) *
                         C47835 * C3782) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C47963 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C2512 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C47950 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C2512 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47973 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C3274) *
                       C47969 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47734) *
                       C47959 +
                   (((C42685 * C1698 + C42682 * C1701 + C42686 * C5973 +
                      C42683 * C5975 + C42687 * C23542 + C42684 * C23543) *
                         C21631 +
                     (C42685 * C1702 + C42682 * C1707 + C42686 * C5976 +
                      C42683 * C5979 + C42687 * C23544 + C42684 * C23545) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C3274) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1416 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1417 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C1418 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47647 * C47937) *
                       C47881 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1417 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1416 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C1418 +
                    ((C42685 * C1149 + C42682 * C1157 + C42686 * C1699 +
                      C42683 * C1703 + C42687 * C5974 + C42684 * C5977) *
                         C21631 +
                     (C42685 * C1156 + C42682 * C1167 + C42686 * C1704 +
                      C42683 * C1708 + C42687 * C5978 + C42684 * C5980) *
                         C47576) *
                        C47835 * C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47895 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C656 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47895) *
                       C657 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47895 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C658 +
                   (((C42685 * C297 + C42682 * C313 + C42686 * C929 +
                      C42683 * C938 + C42687 * C2170 + C42684 * C2171) *
                         C21631 +
                     (C42685 * C314 + C42682 * C327 + C42686 * C937 +
                      C42683 * C944 + C42687 * C2172 + C42684 * C2173) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C1820 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C1821 +
                     ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                       C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                          C21631 +
                      (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                       C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                          C47576) *
                         C47835 * C47930) *
                        C47895 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C1821 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C1820 -
                     ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                       C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                          C47576 +
                      (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                       C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                          C21631) *
                         C47835 * C47930) *
                        C47692) *
                       C47881 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C1821 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C1820 -
                     ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                       C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                          C47576 +
                      (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                       C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                          C21631) *
                         C47835 * C47930) *
                        C47895 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C1820 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C1821 +
                     ((C42685 * C1283 + C42682 * C1294 + C42686 * C2403 +
                       C42683 * C2407 + C42687 * C6878 + C42684 * C6881) *
                          C21631 +
                      (C42685 * C1293 + C42682 * C1310 + C42686 * C2408 +
                       C42683 * C2412 + C42687 * C6882 + C42684 * C6884) *
                          C47576) *
                         C47835 * C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C1416 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47896) *
                       C1417 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47734) *
                       C1418 +
                   (((C42685 * C1698 + C42682 * C1701 + C42686 * C5973 +
                      C42683 * C5975 + C42687 * C23542 + C42684 * C23543) *
                         C21631 +
                     (C42685 * C1702 + C42682 * C1707 + C42686 * C5976 +
                      C42683 * C5979 + C42687 * C23544 + C42684 * C23545) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C288 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C47895 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C289 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C2284 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C2285 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C2286 -
                    ((C42687 * C12584 + C42684 * C12587 + C42686 * C2013 +
                      C42683 * C2021 + C42685 * C2010 + C42682 * C2020) *
                         C47576 +
                     (C42687 * C12581 + C42684 * C12583 + C42686 * C2003 +
                      C42683 * C2012 + C42685 * C2002 + C42682 * C2011) *
                         C21631) *
                        C47835 * C47943) *
                       C47895 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C2285 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C2284 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C2286 +
                    ((C42685 * C2402 + C42682 * C2405 + C42686 * C6877 +
                      C42683 * C6879 + C42687 * C27926 + C42684 * C27927) *
                         C21631 +
                     (C42685 * C2406 + C42682 * C2411 + C42686 * C6880 +
                      C42683 * C6883 + C42687 * C27928 + C42684 * C27929) *
                         C47576) *
                        C47835 * C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                         C42683 * C495 + C42687 * C483 + C42684 * C496) *
                            C21631 +
                        (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                         C42683 * C512 + C42687 * C497 + C42684 * C513) *
                            C47576) *
                           C47835 * C47647 * C47629 * C108 -
                       ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                         C42683 * C511 + C42685 * C127 + C42682 * C139) *
                            C47576 +
                        (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                         C42683 * C493 + C42685 * C118 + C42682 * C126) *
                            C21631) *
                           C47835 * C47647 * C47629 * C109 +
                       ((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                         C42683 * C491 + C42687 * C485 + C42684 * C500) *
                            C21631 +
                        (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                         C42683 * C510 + C42687 * C501 + C42684 * C515) *
                            C47576) *
                           C47835 * C47647 * C47629 * C110 -
                       ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                         C42683 * C516 + C42685 * C130 + C42682 * C141) *
                            C47576 +
                        (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                         C42683 * C502 + C42685 * C120 + C42682 * C131) *
                            C21631) *
                           C47835 * C47647 * C47629 * C111 +
                       ((C42685 * C121 + C42682 * C132 + C42686 * C488 +
                         C42683 * C507 + C42687 * C489 + C42684 * C508) *
                            C21631 +
                        (C42685 * C133 + C42682 * C142 + C42686 * C506 +
                         C42683 * C518 + C42687 * C509 + C42684 * C519) *
                            C47576) *
                           C47835 * C47647 * C47629 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                          C42683 * C495 + C42687 * C483 + C42684 * C496) *
                             C21631 +
                         (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                          C42683 * C512 + C42687 * C497 + C42684 * C513) *
                             C47576) *
                            C47835 * C47647 * C47966 -
                        ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                          C42683 * C941 + C42685 * C305 + C42682 * C323) *
                             C47576 +
                         (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                          C42683 * C931 + C42685 * C293 + C42682 * C306) *
                             C21631) *
                            C47835 * C47647 * C47954 +
                        ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                          C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                             C21631 +
                         (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                          C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                             C47576) *
                            C47835 * C47647 * C47927) *
                           C288 +
                       (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                          C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                             C21631 +
                         (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                          C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                             C47576) *
                            C47835 * C47647 * C47954 -
                        ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                          C42683 * C511 + C42685 * C127 + C42682 * C139) *
                             C47576 +
                         (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                          C42683 * C493 + C42685 * C118 + C42682 * C126) *
                             C21631) *
                            C47835 * C47647 * C47966 -
                        ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                          C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                             C47576 +
                         (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                          C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                             C21631) *
                            C47835 * C47647 * C47927) *
                           C289 +
                       (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                          C42683 * C491 + C42687 * C485 + C42684 * C500) *
                             C21631 +
                         (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                          C42683 * C510 + C42687 * C501 + C42684 * C515) *
                             C47576) *
                            C47835 * C47647 * C47966 -
                        ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                          C42683 * C943 + C42685 * C301 + C42682 * C321) *
                             C47576 +
                         (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                          C42683 * C935 + C42685 * C291 + C42682 * C302) *
                             C21631) *
                            C47835 * C47647 * C47954 +
                        ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                          C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                             C21631 +
                         (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                          C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                             C47576) *
                            C47835 * C47647 * C47927) *
                           C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C288 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47956 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47967 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C47930) *
                       C47629 * C289 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C485 + C42682 * C500 + C42686 * C2000 +
                      C42683 * C2007 + C42687 * C2005 + C42684 * C2016) *
                         C21631 +
                     (C42685 * C501 + C42682 * C515 + C42686 * C2006 +
                      C42683 * C2018 + C42687 * C2017 + C42684 * C2023) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47963 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1075 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C1142 -
                   ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                     C42683 * C941 + C42685 * C305 + C42682 * C323) *
                        C47576 +
                    (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                     C42683 * C931 + C42685 * C293 + C42682 * C306) *
                        C21631) *
                       C47835 * C47647 * C1143 +
                   ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                     C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                        C21631 +
                    (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                     C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                        C47576) *
                       C47835 * C47647 * C1144 -
                   ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                     C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                        C47576 +
                    (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                     C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                        C21631) *
                       C47835 * C47647 * C1145 +
                   ((C42685 * C1151 + C42682 * C1160 + C42686 * C6485 +
                     C42683 * C6487 + C42687 * C22529 + C42684 * C22530) *
                        C21631 +
                    (C42685 * C1161 + C42682 * C1169 + C42686 * C6488 +
                     C42683 * C6491 + C42687 * C22531 + C42684 * C22532) *
                        C47576) *
                       C47835 * C47647 * C1146) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C1074 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47956 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47967 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C47930) *
                       C1075 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C1288 + C42682 * C1303 + C42686 * C7349 +
                      C42683 * C7351 + C42687 * C23192 + C42684 * C23193) *
                         C21631 +
                     (C42685 * C1304 + C42682 * C1315 + C42686 * C7352 +
                      C42683 * C7355 + C42687 * C23194 + C42684 * C23195) *
                         C47576) *
                        C47835 * C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47963 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C1821 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C1820 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C47930) *
                       C47629 * C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C485 + C42682 * C500 + C42686 * C2000 +
                      C42683 * C2007 + C42687 * C2005 + C42684 * C2016) *
                         C21631 +
                     (C42685 * C501 + C42682 * C515 + C42686 * C2006 +
                      C42683 * C2018 + C42687 * C2017 + C42684 * C2023) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47966 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C1821 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C1820 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C47930) *
                       C47954 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C1288 + C42682 * C1303 + C42686 * C7349 +
                      C42683 * C7351 + C42687 * C23192 + C42684 * C23193) *
                         C21631 +
                     (C42685 * C1304 + C42682 * C1315 + C42686 * C7352 +
                      C42683 * C7355 + C42687 * C23194 + C42684 * C23195) *
                         C47576) *
                        C47835 * C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C1995 -
                   ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                     C42683 * C513 + C42685 * C494 + C42682 * C512) *
                        C47576 +
                    (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                     C42683 * C496 + C42685 * C482 + C42682 * C495) *
                        C21631) *
                       C47835 * C1996 +
                   ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                     C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                        C21631 +
                    (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                     C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                        C47576) *
                       C47835 * C1997 -
                   ((C42687 * C12584 + C42684 * C12587 + C42686 * C2013 +
                     C42683 * C2021 + C42685 * C2010 + C42682 * C2020) *
                        C47576 +
                    (C42687 * C12581 + C42684 * C12583 + C42686 * C2003 +
                     C42683 * C2012 + C42685 * C2002 + C42682 * C2011) *
                        C21631) *
                       C47835 * C1998 +
                   ((C42685 * C2003 + C42682 * C2012 + C42686 * C12581 +
                     C42683 * C12583 + C42687 * C44156 + C42684 * C44157) *
                        C21631 +
                    (C42685 * C2013 + C42682 * C2021 + C42686 * C12584 +
                     C42683 * C12587 + C42687 * C44158 + C42684 * C44159) *
                        C47576) *
                       C47835 * C1999) *
                  C47629 * C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C1074 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C1075 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C47927) *
                       C47881 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C1074 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C1075 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C656 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47896) *
                       C47629 * C657 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C658 +
                   (((C42685 * C486 + C42682 * C502 + C42686 * C487 +
                      C42683 * C505 + C42687 * C2288 + C42684 * C2289) *
                         C21631 +
                     (C42685 * C503 + C42682 * C516 + C42686 * C504 +
                      C42683 * C517 + C42687 * C2290 + C42684 * C2291) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C2284 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C2285 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C2286 -
                    ((C42687 * C12584 + C42684 * C12587 + C42686 * C2013 +
                      C42683 * C2021 + C42685 * C2010 + C42682 * C2020) *
                         C47576 +
                     (C42687 * C12581 + C42684 * C12583 + C42686 * C2003 +
                      C42683 * C2012 + C42685 * C2002 + C42682 * C2011) *
                         C21631) *
                        C47835 * C47943) *
                       C47629 * C47881 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C2285 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C2284 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C2286 +
                    ((C42685 * C2001 + C42682 * C2009 + C42686 * C2004 +
                      C42683 * C2014 + C42687 * C12582 + C42684 * C12585) *
                         C21631 +
                     (C42685 * C2008 + C42682 * C2019 + C42686 * C2015 +
                      C42683 * C2022 + C42687 * C12586 + C42684 * C12588) *
                         C47576) *
                        C47835 * C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C288 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47954 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C289 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C47629 * C108 -
                   ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                     C42683 * C511 + C42685 * C127 + C42682 * C139) *
                        C47576 +
                    (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                     C42683 * C493 + C42685 * C118 + C42682 * C126) *
                        C21631) *
                       C47835 * C47647 * C47629 * C109 +
                   ((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                     C42683 * C491 + C42687 * C485 + C42684 * C500) *
                        C21631 +
                    (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                     C42683 * C510 + C42687 * C501 + C42684 * C515) *
                        C47576) *
                       C47835 * C47647 * C47629 * C110 -
                   ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                     C42683 * C516 + C42685 * C130 + C42682 * C141) *
                        C47576 +
                    (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                     C42683 * C502 + C42685 * C120 + C42682 * C131) *
                        C21631) *
                       C47835 * C47647 * C47629 * C111 +
                   ((C42685 * C121 + C42682 * C132 + C42686 * C488 +
                     C42683 * C507 + C42687 * C489 + C42684 * C508) *
                        C21631 +
                    (C42685 * C133 + C42682 * C142 + C42686 * C506 +
                     C42683 * C518 + C42687 * C509 + C42684 * C519) *
                        C47576) *
                       C47835 * C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47963 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1075 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C1142 -
                   ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                     C42683 * C941 + C42685 * C305 + C42682 * C323) *
                        C47576 +
                    (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                     C42683 * C931 + C42685 * C293 + C42682 * C306) *
                        C21631) *
                       C47835 * C47647 * C1143 +
                   ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                     C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                        C21631 +
                    (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                     C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                        C47576) *
                       C47835 * C47647 * C1144 -
                   ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                     C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                        C47576 +
                    (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                     C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                        C21631) *
                       C47835 * C47647 * C1145 +
                   ((C42685 * C1151 + C42682 * C1160 + C42686 * C6485 +
                     C42683 * C6487 + C42687 * C22529 + C42684 * C22530) *
                        C21631 +
                    (C42685 * C1161 + C42682 * C1169 + C42686 * C6488 +
                     C42683 * C6491 + C42687 * C22531 + C42684 * C22532) *
                        C47576) *
                       C47835 * C47647 * C1146) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47963 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C1821 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C1820 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C47930) *
                       C47629 * C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C485 + C42682 * C500 + C42686 * C2000 +
                      C42683 * C2007 + C42687 * C2005 + C42684 * C2016) *
                         C21631 +
                     (C42685 * C501 + C42682 * C515 + C42686 * C2006 +
                      C42683 * C2018 + C42687 * C2017 + C42684 * C2023) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47966 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C1821 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C1820 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C47930) *
                       C47954 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C1820 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C1821 +
                    ((C42685 * C1288 + C42682 * C1303 + C42686 * C7349 +
                      C42683 * C7351 + C42687 * C23192 + C42684 * C23193) *
                         C21631 +
                     (C42685 * C1304 + C42682 * C1315 + C42686 * C7352 +
                      C42683 * C7355 + C42687 * C23194 + C42684 * C23195) *
                         C47576) *
                        C47835 * C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C47606 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C47895 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C47615 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C3274) *
                        C47692) *
                       C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47730 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47737 +
                     ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                       C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                          C21631 +
                      (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                       C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                          C47576) *
                         C47835 * C3782) *
                        C47895 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47737 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47730 -
                     ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                       C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                          C47576 +
                      (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                       C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                          C21631) *
                         C47835 * C3782) *
                        C47692) *
                       C2620 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47737 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47730 -
                     ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                       C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                          C47576 +
                      (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                       C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                          C21631) *
                         C47835 * C3782) *
                        C47895 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47730 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47737 +
                     ((C42685 * C1283 + C42682 * C1294 + C42686 * C2403 +
                       C42683 * C2407 + C42687 * C6878 + C42684 * C6881) *
                          C21631 +
                      (C42685 * C1293 + C42682 * C1310 + C42686 * C2408 +
                       C42683 * C2412 + C42687 * C6882 + C42684 * C6884) *
                          C47576) *
                         C47835 * C3782) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47966 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47954 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C47927) *
                       C2620 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C47966 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47954 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C3274) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C47972 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C3274) *
                       C47629 * C47965 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C47952 +
                   (((C42685 * C486 + C42682 * C502 + C42686 * C487 +
                      C42683 * C505 + C42687 * C2288 + C42684 * C2289) *
                         C21631 +
                     (C42685 * C503 + C42682 * C516 + C42686 * C504 +
                      C42683 * C517 + C42687 * C2290 + C42684 * C2291) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C3274) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47974 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47971 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47962 -
                    ((C42687 * C12584 + C42684 * C12587 + C42686 * C2013 +
                      C42683 * C2021 + C42685 * C2010 + C42682 * C2020) *
                         C47576 +
                     (C42687 * C12581 + C42684 * C12583 + C42686 * C2003 +
                      C42683 * C2012 + C42685 * C2002 + C42682 * C2011) *
                         C21631) *
                        C47835 * C47943) *
                       C47629 * C2620 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47971 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47974 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C47962 +
                    ((C42685 * C2001 + C42682 * C2009 + C42686 * C2004 +
                      C42683 * C2014 + C42687 * C12582 + C42684 * C12585) *
                         C21631 +
                     (C42685 * C2008 + C42682 * C2019 + C42686 * C2015 +
                      C42683 * C2022 + C42687 * C12586 + C42684 * C12588) *
                         C47576) *
                        C47835 * C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47730 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47737 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C3782) *
                       C47629 * C47606 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47737 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47730 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C3782) *
                       C47629 * C47615 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47730 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47737 +
                    ((C42685 * C485 + C42682 * C500 + C42686 * C2000 +
                      C42683 * C2007 + C42687 * C2005 + C42684 * C2016) *
                         C21631 +
                     (C42685 * C501 + C42682 * C515 + C42686 * C2006 +
                      C42683 * C2018 + C42687 * C2017 + C42684 * C2023) *
                         C47576) *
                        C47835 * C3782) *
                       C47629 * C2883)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C47972 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C3274) *
                       C47629 * C47965 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C3274 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C47952 +
                   (((C42685 * C486 + C42682 * C502 + C42686 * C487 +
                      C42683 * C505 + C42687 * C2288 + C42684 * C2289) *
                         C21631 +
                     (C42685 * C503 + C42682 * C516 + C42686 * C504 +
                      C42683 * C517 + C42687 * C2290 + C42684 * C2291) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C3274) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47966 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C3274) *
                        C47954 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C47927) *
                       C2620 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C3274) *
                        C47966 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C3274 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47954 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C3274) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47895 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C656 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47895) *
                       C657 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47895 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47692) *
                       C658 +
                   (((C42685 * C297 + C42682 * C313 + C42686 * C929 +
                      C42683 * C938 + C42687 * C2170 + C42684 * C2171) *
                         C21631 +
                     (C42685 * C314 + C42682 * C327 + C42686 * C937 +
                      C42683 * C944 + C42687 * C2172 + C42684 * C2173) *
                         C47576) *
                        C47835 * C47647 * C47692 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1416 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1417 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C1418 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47647 * C47937) *
                       C47881 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1417 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1416 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C1418 +
                    ((C42685 * C1149 + C42682 * C1157 + C42686 * C1699 +
                      C42683 * C1703 + C42687 * C5974 + C42684 * C5977) *
                         C21631 +
                     (C42685 * C1156 + C42682 * C1167 + C42686 * C1704 +
                      C42683 * C1708 + C42687 * C5978 + C42684 * C5980) *
                         C47576) *
                        C47835 * C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C288 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C47895 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C47692) *
                       C289 +
                   ((((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                       C42683 * C491 + C42687 * C485 + C42684 * C500) *
                          C21631 +
                      (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                       C42683 * C510 + C42687 * C501 + C42684 * C515) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                       C42683 * C515 + C42685 * C490 + C42682 * C510) *
                          C47576 +
                      (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                       C42683 * C500 + C42685 * C480 + C42682 * C491) *
                          C21631) *
                         C47835 * C47734) *
                        C47895 +
                    (((C42685 * C928 + C42682 * C935 + C42686 * C1282 +
                       C42683 * C1292 + C42687 * C2404 + C42684 * C2409) *
                          C21631 +
                      (C42685 * C936 + C42682 * C943 + C42686 * C1291 +
                       C42683 * C1309 + C42687 * C2410 + C42684 * C2413) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                       C42683 * C943 + C42685 * C301 + C42682 * C321) *
                          C47576 +
                      (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                       C42683 * C935 + C42685 * C291 + C42682 * C302) *
                          C21631) *
                         C47835 * C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C1416 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47896) *
                       C1417 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47734) *
                       C1418 +
                   (((C42685 * C1698 + C42682 * C1701 + C42686 * C5973 +
                      C42683 * C5975 + C42687 * C23542 + C42684 * C23543) *
                         C21631 +
                     (C42685 * C1702 + C42682 * C1707 + C42686 * C5976 +
                      C42683 * C5979 + C42687 * C23544 + C42684 * C23545) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                      C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                         C47576 +
                     (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                      C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                         C21631) *
                        C47835 * C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C288 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47954 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C289 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C47629 * C108 -
                   ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                     C42683 * C511 + C42685 * C127 + C42682 * C139) *
                        C47576 +
                    (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                     C42683 * C493 + C42685 * C118 + C42682 * C126) *
                        C21631) *
                       C47835 * C47647 * C47629 * C109 +
                   ((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                     C42683 * C491 + C42687 * C485 + C42684 * C500) *
                        C21631 +
                    (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                     C42683 * C510 + C42687 * C501 + C42684 * C515) *
                        C47576) *
                       C47835 * C47647 * C47629 * C110 -
                   ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                     C42683 * C516 + C42685 * C130 + C42682 * C141) *
                        C47576 +
                    (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                     C42683 * C502 + C42685 * C120 + C42682 * C131) *
                        C21631) *
                       C47835 * C47647 * C47629 * C111 +
                   ((C42685 * C121 + C42682 * C132 + C42686 * C488 +
                     C42683 * C507 + C42687 * C489 + C42684 * C508) *
                        C21631 +
                    (C42685 * C133 + C42682 * C142 + C42686 * C506 +
                     C42683 * C518 + C42687 * C509 + C42684 * C519) *
                        C47576) *
                       C47835 * C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C288 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47956 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47967 -
                    ((C42687 * C2015 + C42684 * C2022 + C42686 * C2008 +
                      C42683 * C2019 + C42685 * C499 + C42682 * C514) *
                         C47576 +
                     (C42687 * C2004 + C42684 * C2014 + C42686 * C2001 +
                      C42683 * C2009 + C42685 * C484 + C42682 * C498) *
                         C21631) *
                        C47835 * C47930) *
                       C47629 * C289 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C485 + C42682 * C500 + C42686 * C2000 +
                      C42683 * C2007 + C42687 * C2005 + C42684 * C2016) *
                         C21631 +
                     (C42685 * C501 + C42682 * C515 + C42686 * C2006 +
                      C42683 * C2018 + C42687 * C2017 + C42684 * C2023) *
                         C47576) *
                        C47835 * C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47963 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1075 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C1142 -
                   ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                     C42683 * C941 + C42685 * C305 + C42682 * C323) *
                        C47576 +
                    (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                     C42683 * C931 + C42685 * C293 + C42682 * C306) *
                        C21631) *
                       C47835 * C47647 * C1143 +
                   ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                     C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                        C21631 +
                    (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                     C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                        C47576) *
                       C47835 * C47647 * C1144 -
                   ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                     C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                        C47576 +
                    (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                     C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                        C21631) *
                       C47835 * C47647 * C1145 +
                   ((C42685 * C1151 + C42682 * C1160 + C42686 * C6485 +
                     C42683 * C6487 + C42687 * C22529 + C42684 * C22530) *
                        C21631 +
                    (C42685 * C1161 + C42682 * C1169 + C42686 * C6488 +
                     C42683 * C6491 + C42687 * C22531 + C42684 * C22532) *
                        C47576) *
                       C47835 * C47647 * C1146) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C483 + C42682 * C496 + C42686 * C2002 +
                      C42683 * C2011 + C42687 * C2003 + C42684 * C2012) *
                         C21631 +
                     (C42685 * C497 + C42682 * C513 + C42686 * C2010 +
                      C42683 * C2020 + C42687 * C2013 + C42684 * C2021) *
                         C47576) *
                        C47835 * C47930) *
                       C1074 +
                   (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                      C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                         C21631 +
                     (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                      C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                         C47576) *
                        C47835 * C47956 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47967 -
                    ((C42687 * C6880 + C42684 * C6883 + C42686 * C2406 +
                      C42683 * C2411 + C42685 * C1295 + C42682 * C1311) *
                         C47576 +
                     (C42687 * C6877 + C42684 * C6879 + C42686 * C2402 +
                      C42683 * C2405 + C42685 * C1284 + C42682 * C1296) *
                         C21631) *
                        C47835 * C47930) *
                       C1075 +
                   (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47967 -
                    ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                      C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                         C47576 +
                     (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                      C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                         C21631) *
                        C47835 * C47956 +
                    ((C42685 * C1288 + C42682 * C1303 + C42686 * C7349 +
                      C42683 * C7351 + C42687 * C23192 + C42684 * C23193) *
                         C21631 +
                     (C42685 * C1304 + C42682 * C1315 + C42686 * C7352 +
                      C42683 * C7355 + C42687 * C23194 + C42684 * C23195) *
                         C47576) *
                        C47835 * C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                      C42683 * C513 + C42685 * C494 + C42682 * C512) *
                         C47576 +
                     (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                      C42683 * C496 + C42685 * C482 + C42682 * C495) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C656 +
                   (((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                      C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                         C21631 +
                     (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                      C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47896) *
                       C47629 * C657 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47896 -
                    ((C42687 * C2006 + C42684 * C2018 + C42686 * C501 +
                      C42683 * C515 + C42685 * C490 + C42682 * C510) *
                         C47576 +
                     (C42687 * C2000 + C42684 * C2007 + C42686 * C485 +
                      C42683 * C500 + C42685 * C480 + C42682 * C491) *
                         C21631) *
                        C47835 * C47734) *
                       C47629 * C658 +
                   (((C42685 * C486 + C42682 * C502 + C42686 * C487 +
                      C42683 * C505 + C42687 * C2288 + C42684 * C2289) *
                         C21631 +
                     (C42685 * C503 + C42682 * C516 + C42686 * C504 +
                      C42683 * C517 + C42687 * C2290 + C42684 * C2291) *
                         C47576) *
                        C47835 * C47734 -
                    ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                      C42683 * C516 + C42685 * C130 + C42682 * C141) *
                         C47576 +
                     (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                      C42683 * C502 + C42685 * C120 + C42682 * C131) *
                         C21631) *
                        C47835 * C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                       C42683 * C495 + C42687 * C483 + C42684 * C496) *
                          C21631 +
                      (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                       C42683 * C512 + C42687 * C497 + C42684 * C513) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2010 + C42684 * C2020 + C42686 * C497 +
                       C42683 * C513 + C42685 * C494 + C42682 * C512) *
                          C47576 +
                      (C42687 * C2002 + C42684 * C2011 + C42686 * C483 +
                       C42683 * C496 + C42685 * C482 + C42682 * C495) *
                          C21631) *
                         C47835 * C47734) *
                        C1074 +
                    (((C42685 * C926 + C42682 * C931 + C42686 * C1284 +
                       C42683 * C1296 + C42687 * C2402 + C42684 * C2405) *
                          C21631 +
                      (C42685 * C932 + C42682 * C941 + C42686 * C1295 +
                       C42683 * C1311 + C42687 * C2406 + C42684 * C2411) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                       C42683 * C941 + C42685 * C305 + C42682 * C323) *
                          C47576 +
                      (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                       C42683 * C931 + C42685 * C293 + C42682 * C306) *
                          C21631) *
                         C47835 * C47896) *
                        C1075 +
                    (((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                       C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                          C21631 +
                      (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                       C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C7352 + C42684 * C7355 + C42686 * C1304 +
                       C42683 * C1315 + C42685 * C1301 + C42682 * C1314) *
                          C47576 +
                      (C42687 * C7349 + C42684 * C7351 + C42686 * C1288 +
                       C42683 * C1303 + C42685 * C1287 + C42682 * C1302) *
                          C21631) *
                         C47835 * C47734) *
                        C47927) *
                       C47881 +
                   ((((C42685 * C481 + C42682 * C493 + C42686 * C484 +
                       C42683 * C498 + C42687 * C2001 + C42684 * C2009) *
                          C21631 +
                      (C42685 * C492 + C42682 * C511 + C42686 * C499 +
                       C42683 * C514 + C42687 * C2008 + C42684 * C2019) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                       C42683 * C511 + C42685 * C127 + C42682 * C139) *
                          C47576 +
                      (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                       C42683 * C493 + C42685 * C118 + C42682 * C126) *
                          C21631) *
                         C47835 * C47896) *
                        C1074 +
                    (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                       C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                          C21631 +
                      (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                       C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                          C47576) *
                         C47835 * C47896 -
                     ((C42687 * C2408 + C42684 * C2412 + C42686 * C1293 +
                       C42683 * C1310 + C42685 * C934 + C42682 * C942) *
                          C47576 +
                      (C42687 * C2403 + C42684 * C2407 + C42686 * C1283 +
                       C42683 * C1294 + C42685 * C927 + C42682 * C933) *
                          C21631) *
                         C47835 * C47734) *
                        C1075 +
                    (((C42685 * C1286 + C42682 * C1300 + C42686 * C1289 +
                       C42683 * C1305 + C42687 * C7350 + C42684 * C7353) *
                          C21631 +
                      (C42685 * C1299 + C42682 * C1313 + C42686 * C1306 +
                       C42683 * C1316 + C42687 * C7354 + C42684 * C7356) *
                          C47576) *
                         C47835 * C47734 -
                     ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                       C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                          C47576 +
                      (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                       C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                          C21631) *
                         C47835 * C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C47629 * C108 -
                   ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                     C42683 * C511 + C42685 * C127 + C42682 * C139) *
                        C47576 +
                    (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                     C42683 * C493 + C42685 * C118 + C42682 * C126) *
                        C21631) *
                       C47835 * C47647 * C47629 * C109 +
                   ((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                     C42683 * C491 + C42687 * C485 + C42684 * C500) *
                        C21631 +
                    (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                     C42683 * C510 + C42687 * C501 + C42684 * C515) *
                        C47576) *
                       C47835 * C47647 * C47629 * C110 -
                   ((C42687 * C504 + C42684 * C517 + C42686 * C503 +
                     C42683 * C516 + C42685 * C130 + C42682 * C141) *
                        C47576 +
                    (C42687 * C487 + C42684 * C505 + C42686 * C486 +
                     C42683 * C502 + C42685 * C120 + C42682 * C131) *
                        C21631) *
                       C47835 * C47647 * C47629 * C111 +
                   ((C42685 * C121 + C42682 * C132 + C42686 * C488 +
                     C42683 * C507 + C42687 * C489 + C42684 * C508) *
                        C21631 +
                    (C42685 * C133 + C42682 * C142 + C42686 * C506 +
                     C42683 * C518 + C42687 * C509 + C42684 * C519) *
                        C47576) *
                       C47835 * C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C288 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C47954 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C289 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C47966 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C47954 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                      C42683 * C495 + C42687 * C483 + C42684 * C496) *
                         C21631 +
                     (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                      C42683 * C512 + C42687 * C497 + C42684 * C513) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                      C42683 * C941 + C42685 * C305 + C42682 * C323) *
                         C47576 +
                     (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                      C42683 * C931 + C42685 * C293 + C42682 * C306) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                      C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                         C21631 +
                     (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                      C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47963 +
                   (((C42685 * C292 + C42682 * C304 + C42686 * C927 +
                      C42683 * C933 + C42687 * C1283 + C42684 * C1294) *
                         C21631 +
                     (C42685 * C303 + C42682 * C322 + C42686 * C934 +
                      C42683 * C942 + C42687 * C1293 + C42684 * C1310) *
                         C47576) *
                        C47835 * C47647 * C1075 -
                    ((C42687 * C499 + C42684 * C514 + C42686 * C492 +
                      C42683 * C511 + C42685 * C127 + C42682 * C139) *
                         C47576 +
                     (C42687 * C484 + C42684 * C498 + C42686 * C481 +
                      C42683 * C493 + C42685 * C118 + C42682 * C126) *
                         C21631) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1306 + C42684 * C1316 + C42686 * C1299 +
                      C42683 * C1313 + C42685 * C310 + C42682 * C325) *
                         C47576 +
                     (C42687 * C1289 + C42684 * C1305 + C42686 * C1286 +
                      C42683 * C1300 + C42685 * C295 + C42682 * C309) *
                         C21631) *
                        C47835 * C47647 * C47927) *
                       C47950 +
                   (((C42685 * C119 + C42682 * C128 + C42686 * C480 +
                      C42683 * C491 + C42687 * C485 + C42684 * C500) *
                         C21631 +
                     (C42685 * C129 + C42682 * C140 + C42686 * C490 +
                      C42683 * C510 + C42687 * C501 + C42684 * C515) *
                         C47576) *
                        C47835 * C47647 * C1074 -
                    ((C42687 * C1291 + C42684 * C1309 + C42686 * C936 +
                      C42683 * C943 + C42685 * C301 + C42682 * C321) *
                         C47576 +
                     (C42687 * C1282 + C42684 * C1292 + C42686 * C928 +
                      C42683 * C935 + C42685 * C291 + C42682 * C302) *
                         C21631) *
                        C47835 * C47647 * C1075 +
                    ((C42685 * C296 + C42682 * C311 + C42686 * C1285 +
                      C42683 * C1298 + C42687 * C1290 + C42684 * C1307) *
                         C21631 +
                     (C42685 * C312 + C42682 * C326 + C42686 * C1297 +
                      C42683 * C1312 + C42687 * C1308 + C42684 * C1317) *
                         C47576) *
                        C47835 * C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C117 + C42682 * C124 + C42686 * C482 +
                     C42683 * C495 + C42687 * C483 + C42684 * C496) *
                        C21631 +
                    (C42685 * C125 + C42682 * C138 + C42686 * C494 +
                     C42683 * C512 + C42687 * C497 + C42684 * C513) *
                        C47576) *
                       C47835 * C47647 * C1142 -
                   ((C42687 * C1295 + C42684 * C1311 + C42686 * C932 +
                     C42683 * C941 + C42685 * C305 + C42682 * C323) *
                        C47576 +
                    (C42687 * C1284 + C42684 * C1296 + C42686 * C926 +
                     C42683 * C931 + C42685 * C293 + C42682 * C306) *
                        C21631) *
                       C47835 * C47647 * C1143 +
                   ((C42685 * C294 + C42682 * C307 + C42686 * C1287 +
                     C42683 * C1302 + C42687 * C1288 + C42684 * C1303) *
                        C21631 +
                    (C42685 * C308 + C42682 * C324 + C42686 * C1301 +
                     C42683 * C1314 + C42687 * C1304 + C42684 * C1315) *
                        C47576) *
                       C47835 * C47647 * C1144 -
                   ((C42687 * C5976 + C42684 * C5979 + C42686 * C1702 +
                     C42683 * C1707 + C42685 * C1158 + C42682 * C1168) *
                        C47576 +
                    (C42687 * C5973 + C42684 * C5975 + C42686 * C1698 +
                     C42683 * C1701 + C42685 * C1150 + C42682 * C1159) *
                        C21631) *
                       C47835 * C47647 * C1145 +
                   ((C42685 * C1151 + C42682 * C1160 + C42686 * C6485 +
                     C42683 * C6487 + C42687 * C22529 + C42684 * C22530) *
                        C21631 +
                    (C42685 * C1161 + C42682 * C1169 + C42686 * C6488 +
                     C42683 * C6491 + C42687 * C22531 + C42684 * C22532) *
                        C47576) *
                       C47835 * C47647 * C1146) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
}
