/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46744 = ae * be;
    const double C46743 = ae + be;
    const double C46742 = 0 * be;
    const double C46741 = xA - xB;
    const double C46763 = yA - yB;
    const double C46781 = 0 * be;
    const double C46794 = xP - xQ;
    const double C46793 = yP - yQ;
    const double C46792 = p + q;
    const double C46791 = p * q;
    const double C46801 = std::pow(ae, 2);
    const double C46799 = bs[3];
    const double C46809 = bs[4];
    const double C46818 = bs[5];
    const double C46832 = bs[6];
    const double C46854 = bs[7];
    const double C46963 = zP - zQ;
    const double C47126 = bs[2];
    const double C117 = bs[0];
    const double C47502 = ce + de;
    const double C47501 = ce * de;
    const double C47500 = xC - xD;
    const double C47534 = yC - yD;
    const double C47552 = zC - zD;
    const double C47726 = zA - zB;
    const double C46745 = std::pow(C46743, 2);
    const double C47489 = 2 * C46743;
    const double C46746 = C46744 * C46741;
    const double C47480 = std::pow(C46741, 2);
    const double C47787 = C46741 * be;
    const double C47786 = C46741 * ae;
    const double C46782 = C46744 * C46763;
    const double C47741 = std::pow(C46763, 2);
    const double C47821 = C46763 * be;
    const double C47819 = C46763 * ae;
    const double C46819 = std::pow(C46794, 2);
    const double C46877 = C46794 * ae;
    const double C46802 = C46793 * ae;
    const double C46800 = C46793 * C46794;
    const double C46975 = std::pow(C46793, 2);
    const double C46795 = 2 * C46791;
    const double C46994 = std::pow(C46963, 2);
    const double C47506 = 2 * C47502;
    const double C47505 = std::pow(C47502, 2);
    const double C47507 = C47500 * de;
    const double C47504 = C47500 * ce;
    const double C47503 = std::pow(C47500, 2);
    const double C47535 = std::pow(C47534, 2);
    const double C47594 = C47534 * de;
    const double C47592 = C47534 * ce;
    const double C47553 = std::pow(C47552, 2);
    const double C47636 = C47552 * de;
    const double C47634 = C47552 * ce;
    const double C47756 = std::pow(C47726, 2);
    const double C47822 = C47726 * be;
    const double C47820 = C47726 * ae;
    const double C46747 = 2 * C46745;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C46745;
    const double C47788 = std::pow(C47489, -1);
    const double C47481 = C47480 * C46744;
    const double C47742 = C47741 * C46744;
    const double C46882 = C46799 * C46877;
    const double C46885 = C46809 * C46877;
    const double C46891 = C46818 * C46877;
    const double C46905 = C46832 * C46877;
    const double C46926 = C46854 * C46877;
    const double C46805 = C46799 * C46802;
    const double C46811 = C46809 * C46802;
    const double C46821 = C46818 * C46802;
    const double C46836 = C46832 * C46802;
    const double C46860 = C46854 * C46802;
    const double C46804 = C46800 * C46801;
    const double C46796 = C46795 / C46792;
    const double C124 = (-(bs[1] * C46877 * C46795) / C46792) / C46743;
    const double C127 = (-(bs[1] * C46802 * C46795) / C46792) / C46743;
    const double C118 = -(C46794 * bs[1] * C46795) / C46792;
    const double C263 = -(C46793 * bs[1] * C46795) / C46792;
    const double C416 = -(C46963 * bs[1] * C46795) / C46792;
    const double C47519 = std::pow(C47506, -1);
    const double C47796 = std::pow(C47506, -2);
    const double C47520 = 2 * C47505;
    const double C47800 = C47505 * C47506;
    const double C47799 = 4 * C47505;
    const double C47789 = std::pow(C47504, 2);
    const double C47508 = C47503 * C47501;
    const double C47536 = C47535 * C47501;
    const double C47801 = std::pow(C47592, 2);
    const double C47554 = C47553 * C47501;
    const double C47803 = std::pow(C47634, 2);
    const double C47757 = C47756 * C46744;
    const double C47482 = C47481 / C46743;
    const double C47743 = C47742 / C46743;
    const double C46810 = C46809 * C46804;
    const double C46820 = C46818 * C46804;
    const double C46834 = C46832 * C46804;
    const double C46858 = C46854 * C46804;
    const double C46798 = -C46796;
    const double C46808 = std::pow(C46796, 4);
    const double C46831 = std::pow(C46796, 6);
    const double C139 = (ae * std::pow(C46796, 2) * bs[2] * C46793 * ae +
                         C46794 * std::pow(-C46796, 3) * bs[3] * C46793 *
                             C46794 * std::pow(ae, 2)) /
                        C46745;
    const double C47125 = std::pow(C46796, 2);
    const double C125 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46877) / C46743 -
        (ae * bs[1] * C46795) / (C46792 * C46743);
    const double C47834 = 4 * C47800;
    const double C47833 = C47502 * C47799;
    const double C47509 = C47508 / C47502;
    const double C47537 = C47536 / C47502;
    const double C47555 = C47554 / C47502;
    const double C47758 = C47757 / C46743;
    const double C47483 = -C47482;
    const double C47744 = -C47743;
    const double C46803 = std::pow(C46798, 3);
    const double C46817 = std::pow(C46798, 5);
    const double C46853 = std::pow(C46798, 7);
    const double C46813 = C46808 * C46811;
    const double C46812 = C46808 * C46810;
    const double C46887 = C46808 * C46885;
    const double C46892 = C46809 * C46808;
    const double C46839 = C46831 * C46836;
    const double C46838 = C46831 * C46834;
    const double C46907 = C46831 * C46905;
    const double C46927 = C46832 * C46831;
    const double C47127 = C47126 * C47125;
    const double C128 = (C46794 * C47125 * C47126 * C46802) / C46743;
    const double C273 = (C46793 * C47125 * C47126 * C46802) / C46743 -
                        (ae * bs[1] * C46795) / (C46792 * C46743);
    const double C276 = (C46793 * C47125 * C47126 * C46877) / C46743;
    const double C426 = (C46963 * C47125 * C47126 * C46802) / C46743;
    const double C429 = (C46963 * C47125 * C47126 * C46877) / C46743;
    const double C47510 = -C47509;
    const double C47538 = -C47537;
    const double C47556 = -C47555;
    const double C47759 = -C47758;
    const double C47484 = std::exp(C47483);
    const double C47745 = std::exp(C47744);
    const double C46806 = C46803 * C46805;
    const double C46878 = C46799 * C46803;
    const double C46883 = C46803 * C46882;
    const double C293 = (ae * std::pow(C46796, 2) * bs[2] * C46877 +
                         C46793 * C46803 * C46799 * C46804) /
                        C46745;
    const double C446 = ((zP - zQ) * C46803 * C46799 * C46804) / C46745;
    const double C46823 = C46817 * C46821;
    const double C46822 = C46817 * C46820;
    const double C46893 = C46817 * C46891;
    const double C46906 = C46818 * C46817;
    const double C46863 = C46853 * C46860;
    const double C46862 = C46853 * C46858;
    const double C46929 = C46853 * C46926;
    const double C46816 = ae * C46813;
    const double C46815 = C46794 * C46813;
    const double C47212 = C46793 * C46813;
    const double C447 =
        (C46803 * C46799 * C46804 + C46812 * std::pow(zP - zQ, 2)) / C46745;
    const double C46888 = C46794 * C46887;
    const double C46973 = ae * C46887;
    const double C46972 = C46793 * C46887;
    const double C46895 = C46794 * C46892;
    const double C46894 = C46892 * ae;
    const double C47135 = C46892 * C46819;
    const double C47214 = C46892 * C46975;
    const double C47283 = C46793 * C46892;
    const double C47458 = C46892 * C46994;
    const double C47472 = C46963 * C46892;
    const double C46841 = C46839 * C46819;
    const double C46852 = ae * C46839;
    const double C46851 = C46794 * C46839;
    const double C47338 = C46793 * C46839;
    const double C47377 = C46839 * C46994;
    const double C46840 = C46794 * C46838;
    const double C47025 = C46793 * C46838;
    const double C47051 = C46838 * C46994;
    const double C47058 = C46963 * C46838;
    const double C46911 = C46794 * C46907;
    const double C47026 = C46907 * C46975;
    const double C47078 = ae * C46907;
    const double C47077 = C46793 * C46907;
    const double C47097 = C46907 * C46994;
    const double C47106 = C46963 * C46907;
    const double C46932 = C46927 * C46819;
    const double C46931 = C46794 * C46927;
    const double C46930 = C46927 * ae;
    const double C47341 = C46927 * C46975;
    const double C119 = C47127 * C46819 - (bs[1] * C46795) / C46792;
    const double C262 = C46793 * C46794 * C47127;
    const double C264 = C47127 * C46975 - (bs[1] * C46795) / C46792;
    const double C415 = C46963 * C46794 * C47127;
    const double C417 = C47127 * C46994 - (bs[1] * C46795) / C46792;
    const double C812 = C46963 * C46793 * C47127;
    const double C47511 = std::exp(C47510);
    const double C47539 = std::exp(C47538);
    const double C47557 = std::exp(C47556);
    const double C47760 = std::exp(C47759);
    const double C21685 = C47484 * C276;
    const double C26191 = C47484 * C429;
    const double C46748 = C46746 * C47484;
    const double C47824 = C47788 * C47484;
    const double C47823 = C47484 * C47786;
    const double C4575 = -(C47484 * C47787) / C46743;
    const double C46783 = C46782 * C47745;
    const double C116 = -(2 * C46744 * (yA - yB) * C47745) / C46743;
    const double C4581 =
        ((C47745 - (C46763 * 2 * C46744 * C46763 * C47745) / C46743) * ae) /
            C46743 -
        (0 * be) / C46747;
    const double C4582 =
        (0 * ae) / C46743 - (C46744 * C46763 * C47745) / C46745;
    const double C15895 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47745 - (C46763 * 2 * C46744 * C46763 * C47745) / C46743) * be) /
            C46743;
    const double C15896 =
        (-(2 * C46744 * C46763 * C47745) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47855 = C47788 * C47745;
    const double C47854 = C47745 * C47819;
    const double C15891 = -(C47745 * C47821) / C46743;
    const double C140 = (C46803 * C46799 * C46804 + ae * C46794 * C46806 +
                         C46794 * (ae * C46806 + C46794 * std::pow(C46796, 4) *
                                                     bs[4] * C46804)) /
                        C46745;
    const double C141 =
        (2 * (ae * C46806 + C46794 * C46812) +
         ae * (C46806 + C46813 * std::pow(C46794, 2)) +
         C46794 * (C46812 + ae * C46794 * C46813 +
                   C46794 * (ae * C46813 +
                             C46794 * std::pow(C46798, 5) * bs[5] * C46804))) /
        C46745;
    const double C292 = (ae * (C46794 * C46803 * C46799 * C46877 +
                               bs[2] * std::pow(C46796, 2) * ae) +
                         C46793 * (ae * C46806 + C46794 * C46812)) /
                        C46745;
    const double C445 = ((zP - zQ) * (ae * C46806 + C46794 * C46812)) / C46745;
    const double C129 = (C47125 * C47126 * C46802 + C46806 * C46819) / C46743;
    const double C130 =
        (2 * C46794 * C46806 + C46794 * (C46806 + C46813 * C46819)) / C46743;
    const double C272 =
        (C46793 * C46794 * C46806 + C46794 * C47127 * ae) / C46743;
    const double C280 =
        (C47125 * C47126 * C46802 + C46793 * (C46793 * C46806 + C47127 * ae) +
         C46793 * C47127 * ae) /
        C46743;
    const double C424 = (C46963 * (C46806 + C46813 * C46819)) / C46743;
    const double C425 = (C46963 * C46794 * C46806) / C46743;
    const double C433 = (C47125 * C47126 * C46802 + C46806 * C46994) / C46743;
    const double C820 = (C46963 * (C46793 * C46806 + C47127 * ae)) / C46743;
    const double C1852 =
        (2 * C46963 * C46806 + C46963 * (C46806 + C46813 * C46994)) / C46743;
    const double C46886 = C46878 * ae;
    const double C47134 = C46794 * C46878;
    const double C47213 = C46793 * C46878;
    const double C271 = (C46793 * (C46806 + C46813 * C46819) +
                         (C47127 + C46878 * C46819) * ae) /
                        C46743;
    const double C120 =
        2 * C46794 * C47127 + C46794 * (C47127 + C46878 * C46819);
    const double C261 = C46793 * (C47127 + C46878 * C46819);
    const double C414 = C46963 * (C47127 + C46878 * C46819);
    const double C1018 =
        2 * C46793 * C47127 + C46793 * (C47127 + C46878 * C46975);
    const double C1155 = C46963 * (C47127 + C46878 * C46975);
    const double C1846 =
        2 * C46963 * C47127 + C46963 * (C47127 + C46878 * C46994);
    const double C1847 =
        3 * (C47127 + C46878 * C46994) +
        C46963 * (2 * C46963 * C46878 + C46963 * (C46878 + C46892 * C46994));
    const double C294 = (C46803 * C46799 * C46804 + ae * C46793 * C46883 +
                         C46793 * (ae * C46883 + C46793 * C46812)) /
                        C46745;
    const double C827 =
        (ae * C46963 * C46883 + C46793 * C46963 * C46812) / C46745;
    const double C126 =
        (C47125 * C47126 * C46877 + C46794 * (C46794 * C46883 + C47127 * ae) +
         C46794 * C47127 * ae) /
        C46743;
    const double C275 = (C46793 * (C46794 * C46883 + C47127 * ae)) / C46743;
    const double C277 = (C47125 * C47126 * C46877 + C46883 * C46975) / C46743;
    const double C428 = (C46963 * (C46794 * C46883 + C47127 * ae)) / C46743;
    const double C430 = (C47125 * C47126 * C46877 + C46883 * C46994) / C46743;
    const double C817 = (C46963 * C46793 * C46883) / C46743;
    const double C1027 =
        (2 * C46793 * C46883 + C46793 * (C46883 + C46887 * C46975)) / C46743;
    const double C1170 = (C46963 * (C46883 + C46887 * C46975)) / C46743;
    const double C1855 =
        (2 * C46963 * C46883 + C46963 * (C46883 + C46887 * C46994)) / C46743;
    const double C21687 = C47484 * C293;
    const double C26193 = C47484 * C446;
    const double C46825 = C46823 * C46819;
    const double C46830 = ae * C46823;
    const double C46829 = C46794 * C46823;
    const double C47282 = C46793 * C46823;
    const double C47330 = C46823 * C46994;
    const double C47376 = C46963 * C46823;
    const double C1859 =
        (3 * (C46806 + C46813 * C46994) +
         C46963 * (2 * C46963 * C46813 + C46963 * (C46813 + C46823 * C46994))) /
        C46743;
    const double C46824 = C46794 * C46822;
    const double C46974 = C46793 * C46822;
    const double C47006 = C46963 * C46822;
    const double C1036 = (2 * (ae * C46883 + C46793 * C46812) +
                          ae * (C46883 + C46887 * std::pow(C46793, 2)) +
                          C46793 * (C46812 + ae * C46793 * C46887 +
                                    C46793 * (ae * C46887 + C46793 * C46822))) /
                         C46745;
    const double C1179 = (ae * (C46883 + C46887 * C46994) +
                          C46793 * (C46812 + C46822 * C46994)) /
                         C46745;
    const double C1864 =
        (2 * C46963 * C46812 + C46963 * (C46812 + C46822 * C46994)) / C46745;
    const double C46896 = C46794 * C46893;
    const double C46977 = C46893 * C46975;
    const double C47024 = ae * C46893;
    const double C47023 = C46793 * C46893;
    const double C47057 = C46963 * C46893;
    const double C47324 = C46893 * C46994;
    const double C1856 =
        (3 * (C46883 + C46887 * C46994) +
         C46963 * (2 * C46963 * C46887 + C46963 * (C46887 + C46893 * C46994))) /
        C46743;
    const double C46910 = C46906 * C46819;
    const double C46909 = C46794 * C46906;
    const double C46908 = C46906 * ae;
    const double C47284 = C46906 * C46975;
    const double C47339 = C46793 * C46906;
    const double C47473 = C46906 * C46994;
    const double C46865 = C46863 * C46819;
    const double C46864 = C46794 * C46862;
    const double C47079 = C46793 * C46862;
    const double C47098 = C46862 * C46994;
    const double C47107 = C46963 * C46862;
    const double C46933 = C46794 * C46929;
    const double C47081 = C46929 * C46975;
    const double C434 = (C46794 * C46806 + C46815 * C46994) / C46743;
    const double C26199 = C47484 * C447;
    const double C1182 =
        (C46963 * C46812 + ae * C46963 * C46972 +
         C46793 * (ae * C46963 * C46887 + C46793 * C46963 * C46822)) /
        C46745;
    const double C1183 =
        (C46812 + C46822 * C46994 + ae * (C46972 + C46793 * C46893 * C46994) +
         C46793 * (ae * (C46887 + C46893 * C46994) +
                   C46793 * (C46822 + C46838 * C46994))) /
        C46745;
    const double C1164 = (C46793 * C46883 + C46972 * C46994) / C46743;
    const double C46897 = C46895 * ae;
    const double C47140 = 2 * C46895;
    const double C47219 = C46793 * C46895;
    const double C47136 = C46878 + C47135;
    const double C47216 = C46878 + C47214;
    const double C47288 = 2 * C47283;
    const double C47286 = C47283 * ae;
    const double C47459 = C46878 + C47458;
    const double C47474 = 2 * C47472;
    const double C46843 = C46823 + C46841;
    const double C46859 = 2 * C46851;
    const double C46857 = ae * C46851;
    const double C47295 = C46793 * C46851;
    const double C47333 = C46851 * C46994;
    const double C47379 = C46823 + C47377;
    const double C47052 = C46822 + C47051;
    const double C47060 = C46793 * C47058;
    const double C47117 = 2 * C47058;
    const double C47030 = C46893 + C47026;
    const double C47085 = 2 * C47077;
    const double C47083 = ae * C47077;
    const double C47105 = C46963 * C47077;
    const double C47366 = C47077 * C46994;
    const double C47099 = C46893 + C47097;
    const double C47109 = ae * C47106;
    const double C46935 = C46906 + C46932;
    const double C46934 = C46931 * ae;
    const double C47297 = C46931 * C46975;
    const double C47345 = C46906 + C47341;
    const double C47513 = C47511 * C47504;
    const double C47512 = C47511 / C47506;
    const double C47522 = C47519 * C47511;
    const double C47792 = C47511 * C47507;
    const double C47831 = C47796 * C47511;
    const double C47825 = C47511 * C47789;
    const double C47593 = C47539 / C47506;
    const double C47595 = C47539 * C47592;
    const double C47602 = C47519 * C47539;
    const double C47807 = C47539 * C47594;
    const double C47837 = C47796 * C47539;
    const double C47835 = C47539 * C47801;
    const double C47635 = C47557 / C47506;
    const double C47637 = C47557 * C47634;
    const double C47644 = C47519 * C47557;
    const double C47813 = C47557 * C47636;
    const double C47840 = C47796 * C47557;
    const double C47838 = C47557 * C47803;
    const double C47857 = C47788 * C47760;
    const double C47856 = C47760 * C47820;
    const double C31513 = -(C47760 * C47822) / C46743;
    const double C115 = ((0 * ae) / C46743 - C46748 / C46745) / (2 * C46743) -
                        (0 * be) / C46743;
    const double C4579 =
        (-C46742 / C46743) / (2 * C46743) -
        ((C47484 - (C46741 * 2 * C46748) / C46743) * be) / C46743;
    const double C4580 =
        (-(2 * C46748) / C46743) / (2 * C46743) - (0 * be) / C46743;
    const double C15893 =
        ((C47484 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
        C46742 / C46747;
    const double C15894 = (0 * ae) / C46743 - C46748 / C46745;
    const double C21569 = -(2 * C46748) / C46743;
    const double C114 =
        (((C47484 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
         C46742 / C46747) /
            (2 * C46743) -
        ((C46741 * ((0 * ae) / C46743 - C46748 / C46745) + C47824) * be) /
            C46743;
    const double C103 = C47824 / C47489;
    const double C101 = C47484 / C47489 - (C47823 * C47787) / C46745;
    const double C102 = C47823 / C46747 - (C47824 * C47787) / C46743;
    const double C15889 = C47823 / C46743;
    const double C4735 = C4575 * C293;
    const double C4731 = C4575 * C276;
    const double C10617 = C4575 * C447;
    const double C10611 = C4575 * C446;
    const double C10607 = C4575 * C429;
    const double C21572 = ((0 * ae) / C46743 - C46783 / C46745) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C21571 =
        (((C47745 - (C46763 * 2 * C46783) / C46743) * ae) / C46743 -
         C46781 / C46747) /
            (2 * C46743) -
        ((C46763 * ((0 * ae) / C46743 - C46783 / C46745) + C47855) * be) /
            C46743;
    const double C21568 = C47855 / C47489;
    const double C4577 = C47854 / C46743;
    const double C21566 = C47745 / C47489 - (C47854 * C47821) / C46745;
    const double C21567 = C47854 / C46747 - (C47855 * C47821) / C46743;
    const double C4751 = C4575 * C292;
    const double C4737 = C47824 * C292;
    const double C16051 = C47824 * C292;
    const double C21699 = C47484 * C292;
    const double C10627 = C4575 * C445;
    const double C10613 = C47824 * C445;
    const double C26205 = C47484 * C445;
    const double C31815 = C47824 * C445;
    const double C46889 = C46888 + C46886;
    const double C47215 = C47212 + C46886;
    const double C1024 =
        (2 * (C46793 * C46806 + C47127 * ae) +
         C46793 * (C46806 + C46793 * (C46793 * C46813 + C46886) +
                   C46793 * C46878 * ae) +
         (C47127 + C46878 * C46975) * ae) /
        C46743;
    const double C281 =
        (C46794 * C46806 + C46793 * (C46793 * C46815 + C47134 * ae) +
         C46793 * C47134 * ae) /
        C46743;
    const double C821 = (C46963 * (C46793 * C46815 + C47134 * ae)) / C46743;
    const double C265 = C46794 * C47127 + C47134 * C46975;
    const double C418 = C46794 * C47127 + C47134 * C46994;
    const double C813 = C46963 * C46793 * C47134;
    const double C1017 =
        2 * C46793 * C47134 + C46793 * (C47134 + C46895 * C46975);
    const double C1154 = C46963 * (C47134 + C46895 * C46975);
    const double C1845 =
        2 * C46963 * C47134 + C46963 * (C47134 + C46895 * C46994);
    const double C1152 = C46793 * C47127 + C47213 * C46994;
    const double C2222 =
        2 * C46963 * C47213 + C46963 * (C47213 + C47283 * C46994);
    const double C4741 = C4575 * C294;
    const double C21691 = C47484 * C294;
    const double C5417 = C4575 * C827;
    const double C22207 = C47484 * C827;
    const double C4747 = C4575 * C275;
    const double C4733 = C47824 * C275;
    const double C16047 = C47824 * C275;
    const double C21697 = C47484 * C275;
    const double C4745 = C4575 * C277;
    const double C21689 = C47484 * C277;
    const double C10623 = C4575 * C428;
    const double C10609 = C47824 * C428;
    const double C26203 = C47484 * C428;
    const double C31811 = C47824 * C428;
    const double C10621 = C4575 * C430;
    const double C26201 = C47484 * C430;
    const double C5421 = C4575 * C817;
    const double C22209 = C47484 * C817;
    const double C5687 = C4575 * C1027;
    const double C21695 = C47484 * C1027;
    const double C5873 = C4575 * C1170;
    const double C22205 = C47484 * C1170;
    const double C12355 = C4575 * C1855;
    const double C27965 = C47484 * C1855;
    const double C46827 = C46813 + C46825;
    const double C46842 = C46830 + C46840;
    const double C46835 = 2 * C46829;
    const double C46833 = ae * C46829;
    const double C47218 = C46793 * C46829;
    const double C1851 =
        (2 * C46963 * C46815 + C46963 * (C46815 + C46829 * C46994)) / C46743;
    const double C1860 =
        (3 * (C46815 + C46829 * C46994) +
         C46963 * (2 * C46963 * C46829 + C46963 * (C46829 + C46851 * C46994))) /
        C46743;
    const double C47285 = C47282 + C46894;
    const double C47331 = C46813 + C47330;
    const double C47378 = 2 * C47376;
    const double C46826 = C46816 + C46824;
    const double C46976 = C46973 + C46974;
    const double C1865 =
        (3 * (C46812 + C46822 * C46994) +
         C46963 * (2 * C47006 + C46963 * (C46822 + C46838 * C46994))) /
        C46745;
    const double C2231 =
        (ae * (2 * C46963 * C46887 + C46963 * (C46887 + C46893 * C46994)) +
         C46793 * (2 * C47006 + C46963 * (C46822 + C46838 * C46994))) /
        C46745;
    const double C5691 = C4575 * C1036;
    const double C21693 = C47484 * C1036;
    const double C5869 = C4575 * C1179;
    const double C22543 = C47484 * C1179;
    const double C12359 = C4575 * C1864;
    const double C27967 = C47484 * C1864;
    const double C46898 = C46896 + C46894;
    const double C46978 = C46887 + C46977;
    const double C47028 = C47024 + C47025;
    const double C47029 = 2 * C47023;
    const double C47027 = ae * C47023;
    const double C2225 =
        (2 * C46963 * C46972 + C46963 * (C46972 + C47023 * C46994)) / C46743;
    const double C6773 =
        (3 * (C46972 + C47023 * C46994) +
         C46963 * (2 * C46963 * C47023 + C46963 * (C47023 + C47077 * C46994))) /
        C46743;
    const double C47059 = ae * C47057;
    const double C47372 = 2 * C47057;
    const double C47325 = C46887 + C47324;
    const double C12369 = C4575 * C1856;
    const double C27977 = C47484 * C1856;
    const double C46913 = C46892 + C46910;
    const double C46912 = C46909 * ae;
    const double C46928 = 2 * C46909;
    const double C47220 = C46909 * C46975;
    const double C47296 = C46793 * C46909;
    const double C47461 = C46909 * C46994;
    const double C1848 =
        3 * (C47134 + C46895 * C46994) +
        C46963 * (2 * C46963 * C46895 + C46963 * (C46895 + C46909 * C46994));
    const double C46914 = C46911 + C46908;
    const double C47343 = C47338 + C46908;
    const double C47287 = C46892 + C47284;
    const double C47346 = 2 * C47339;
    const double C47344 = C47339 * ae;
    const double C47469 = C47339 * C46994;
    const double C6771 =
        3 * (C47213 + C47283 * C46994) +
        C46963 * (2 * C46963 * C47283 + C46963 * (C47283 + C47339 * C46994));
    const double C47475 = C46892 + C47473;
    const double C46867 = C46839 + C46865;
    const double C46866 = C46852 + C46864;
    const double C47084 = C47078 + C47079;
    const double C47100 = C46838 + C47098;
    const double C47110 = C46793 * C47107;
    const double C46936 = C46933 + C46930;
    const double C47086 = C46907 + C47081;
    const double C5877 = C4575 * C1182;
    const double C22203 = C47484 * C1182;
    const double C5883 = C4575 * C1183;
    const double C22547 = C47484 * C1183;
    const double C5865 = C4575 * C1164;
    const double C22541 = C47484 * C1164;
    const double C1023 =
        (2 * (C46793 * C46815 + C47134 * ae) +
         C46793 * (C46815 + C46793 * (C46793 * C46829 + C46897) +
                   C46793 * C46895 * ae) +
         (C47134 + C46895 * C46975) * ae) /
        C46743;
    const double C1151 = C46793 * C47134 + C47219 * C46994;
    const double C121 = 3 * (C47127 + C46878 * C46819) +
                        C46794 * (2 * C47134 + C46794 * C47136);
    const double C266 = C47127 + C46878 * C46819 + C47136 * C46975;
    const double C267 = C46793 * (2 * C47134 + C46794 * C47136);
    const double C419 = C47127 + C46878 * C46819 + C47136 * C46994;
    const double C420 = C46963 * (2 * C47134 + C46794 * C47136);
    const double C814 = C46963 * C46793 * C47136;
    const double C1019 = 3 * (C47127 + C46878 * C46975) +
                         C46793 * (2 * C47213 + C46793 * C47216);
    const double C1156 = C47127 + C46878 * C46975 + C47216 * C46994;
    const double C1542 = C46963 * (2 * C47213 + C46793 * C47216);
    const double C12345 =
        4 * (2 * C46963 * C46878 + C46963 * C47459) +
        C46963 * (3 * C47459 + C46963 * (2 * C46963 * C46892 +
                                         C46963 * (C46892 + C46906 * C46994)));
    const double C46845 = C46794 * C46843;
    const double C46855 = 3 * C46843;
    const double C46850 = ae * C46843;
    const double C47224 = C46793 * C46843;
    const double C46861 = C46838 + C46857;
    const double C47334 = C46829 + C47333;
    const double C47380 = C46963 * C47379;
    const double C6777 =
        (ae * (3 * (C46887 + C46893 * C46994) +
               C46963 * (2 * C47057 + C46963 * (C46893 + C46907 * C46994))) +
         C46793 *
             (3 * C47052 +
              C46963 * (2 * C47058 + C46963 * (C46838 + C46862 * C46994)))) /
        C46745;
    const double C7251 =
        (2 * C47006 + C46963 * C47052 +
         ae * (2 * C46963 * C47023 +
               C46963 * (C47023 + C46793 * C46907 * C46994)) +
         C46793 *
             (ae * (2 * C47057 + C46963 * (C46893 + C46907 * C46994)) +
              C46793 * (2 * C47058 + C46963 * (C46838 + C46862 * C46994)))) /
        C46745;
    const double C12351 =
        (4 * (2 * C47006 + C46963 * C47052) +
         C46963 *
             (3 * C47052 +
              C46963 * (2 * C47058 + C46963 * (C46838 + C46862 * C46994)))) /
        C46745;
    const double C47033 = C46793 * C47030;
    const double C47080 = 3 * C47030;
    const double C47076 = ae * C47030;
    const double C47087 = C46838 + C47083;
    const double C47108 = ae * C47105;
    const double C47367 = C47023 + C47366;
    const double C47101 = ae * C47099;
    const double C47373 = C46963 * C47099;
    const double C46938 = C46794 * C46935;
    const double C46937 = C46935 * ae;
    const double C47226 = C46935 * C46975;
    const double C47300 = C46909 + C47297;
    const double C47348 = C46793 * C47345;
    const double C47514 = C47513 * C47507;
    const double C47521 = C47513 / C47520;
    const double C47793 = C47519 * C47513;
    const double C47791 = C47513 / C47502;
    const double C258 = (C47511 * std::pow(C47507, 2)) / C47505 + C47512;
    const double C47523 = C47522 * C47507;
    const double C47797 = C47504 * C47522;
    const double C47795 = 2 * C47522;
    const double C47841 = C47522 / C47799;
    const double C112 = C47522 / C47834;
    const double C2703 = C47522 / C47506;
    const double C47827 = C47792 / C47502;
    const double C259 = (-2 * C47519 * C47792) / C47502;
    const double C47858 = C47825 / C47505;
    const double C942 = (C47539 * std::pow(C47594, 2)) / C47505 + C47593;
    const double C47596 = C47595 * C47594;
    const double C47601 = C47595 / C47520;
    const double C47805 = C47595 / C47502;
    const double C47802 = C47519 * C47595;
    const double C47603 = C47602 * C47594;
    const double C47811 = C47592 * C47602;
    const double C47810 = 2 * C47602;
    const double C47847 = C47602 / C47799;
    const double C1014 = C47602 / C47834;
    const double C2700 = C47602 / C47506;
    const double C47843 = C47807 / C47502;
    const double C943 = (-2 * C47519 * C47807) / C47502;
    const double C47863 = C47835 / C47505;
    const double C1664 = (C47557 * std::pow(C47636, 2)) / C47505 + C47635;
    const double C47638 = C47637 * C47636;
    const double C47643 = C47637 / C47520;
    const double C47806 = C47637 / C47502;
    const double C47804 = C47519 * C47637;
    const double C47645 = C47644 * C47636;
    const double C47817 = C47634 * C47644;
    const double C47816 = 2 * C47644;
    const double C47853 = C47644 / C47799;
    const double C1843 = C47644 / C47834;
    const double C3602 = C47644 / C47506;
    const double C47849 = C47813 / C47502;
    const double C1665 = (-2 * C47519 * C47813) / C47502;
    const double C47865 = C47838 / C47505;
    const double C42593 = C47857 / C47489;
    const double C10311 = C47856 / C46743;
    const double C42591 = C47760 / C47489 - (C47856 * C47822) / C46745;
    const double C42592 = C47856 / C46747 - (C47857 * C47822) / C46743;
    const double C4766 = C4579 * C271;
    const double C4762 = C4579 * C261;
    const double C4750 = C4579 * C272;
    const double C4746 = C4579 * C262;
    const double C4744 = C4579 * C264;
    const double C4740 = C4579 * C280;
    const double C4734 = C4579 * C273;
    const double C4730 = C4579 * C263;
    const double C5420 = C4579 * C812;
    const double C5416 = C4579 * C820;
    const double C5686 = C4579 * C1018;
    const double C5872 = C4579 * C1155;
    const double C10642 = C4579 * C424;
    const double C10638 = C4579 * C414;
    const double C10634 = C4579 * C434;
    const double C10626 = C4579 * C425;
    const double C10622 = C4579 * C415;
    const double C10620 = C4579 * C417;
    const double C10616 = C4579 * C433;
    const double C10610 = C4579 * C426;
    const double C10606 = C4579 * C416;
    const double C12368 = C4579 * C1847;
    const double C12364 = C4579 * C1859;
    const double C12358 = C4579 * C1852;
    const double C12354 = C4579 * C1846;
    const double C4752 = C4580 * C271;
    const double C4748 = C4580 * C261;
    const double C4736 = C4580 * C272;
    const double C4732 = C4580 * C262;
    const double C10628 = C4580 * C424;
    const double C10624 = C4580 * C414;
    const double C10614 = C4580 * C434;
    const double C10612 = C4580 * C425;
    const double C10608 = C4580 * C415;
    const double C16080 = C15893 * C271;
    const double C16076 = C15893 * C261;
    const double C16064 = C15893 * C272;
    const double C16060 = C15893 * C262;
    const double C16058 = C15893 * C264;
    const double C16054 = C15893 * C280;
    const double C16048 = C15893 * C273;
    const double C16044 = C15893 * C263;
    const double C16734 = C15893 * C812;
    const double C16730 = C15893 * C820;
    const double C16992 = C15893 * C1018;
    const double C17170 = C15893 * C1155;
    const double C31844 = C15893 * C424;
    const double C31840 = C15893 * C414;
    const double C31836 = C15893 * C434;
    const double C31828 = C15893 * C425;
    const double C31824 = C15893 * C415;
    const double C31822 = C15893 * C417;
    const double C31818 = C15893 * C433;
    const double C31812 = C15893 * C426;
    const double C31808 = C15893 * C416;
    const double C33562 = C15893 * C1847;
    const double C33558 = C15893 * C1859;
    const double C33552 = C15893 * C1852;
    const double C33548 = C15893 * C1846;
    const double C16066 = C15894 * C271;
    const double C16062 = C15894 * C261;
    const double C16050 = C15894 * C272;
    const double C16046 = C15894 * C262;
    const double C31830 = C15894 * C424;
    const double C31826 = C15894 * C414;
    const double C31816 = C15894 * C434;
    const double C31814 = C15894 * C425;
    const double C31810 = C15894 * C415;
    const double C21710 = C21569 * C271;
    const double C21708 = C21569 * C261;
    const double C21698 = C21569 * C272;
    const double C21696 = C21569 * C262;
    const double C21694 = C21569 * C1018;
    const double C21690 = C21569 * C280;
    const double C21688 = C21569 * C264;
    const double C21686 = C21569 * C273;
    const double C21684 = C21569 * C263;
    const double C22208 = C21569 * C812;
    const double C22206 = C21569 * C820;
    const double C22204 = C21569 * C1155;
    const double C26216 = C21569 * C424;
    const double C26214 = C21569 * C414;
    const double C26210 = C21569 * C434;
    const double C26204 = C21569 * C425;
    const double C26202 = C21569 * C415;
    const double C26200 = C21569 * C417;
    const double C26198 = C21569 * C433;
    const double C26192 = C21569 * C426;
    const double C26190 = C21569 * C416;
    const double C27976 = C21569 * C1847;
    const double C27974 = C21569 * C1859;
    const double C27966 = C21569 * C1852;
    const double C27964 = C21569 * C1846;
    const double C16065 = C15889 * C292;
    const double C16061 = C15889 * C275;
    const double C16059 = C15889 * C277;
    const double C16055 = C15889 * C294;
    const double C16049 = C15889 * C293;
    const double C16045 = C15889 * C276;
    const double C16735 = C15889 * C817;
    const double C16731 = C15889 * C827;
    const double C16997 = C15889 * C1036;
    const double C16993 = C15889 * C1027;
    const double C17181 = C15889 * C1183;
    const double C17175 = C15889 * C1182;
    const double C17171 = C15889 * C1170;
    const double C17167 = C15889 * C1179;
    const double C17163 = C15889 * C1164;
    const double C31829 = C15889 * C445;
    const double C31825 = C15889 * C428;
    const double C31823 = C15889 * C430;
    const double C31819 = C15889 * C447;
    const double C31813 = C15889 * C446;
    const double C31809 = C15889 * C429;
    const double C33563 = C15889 * C1856;
    const double C33553 = C15889 * C1864;
    const double C33549 = C15889 * C1855;
    const double C113 =
        (((0 - (C46741 * C46742) / C46743) * ae) / C46743 - (0 * be) / C46747) /
            (2 * C46743) -
        ((C46741 * (((C47484 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
                    C46742 / C46747) +
          C15889) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46748 / C46745;
    const double C21570 =
        (((0 - (C46763 * C46781) / C46743) * ae) / C46743 - (0 * be) / C46747) /
            (2 * C46743) -
        ((C46763 * (((C47745 - (C46763 * 2 * C46783) / C46743) * ae) / C46743 -
                    C46781 / C46747) +
          C4577) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46783 / C46745;
    const double C131 =
        (2 * (C46794 * C46883 + C47127 * ae) +
         C46794 * (C46883 + C46794 * C46889 + C46794 * C46878 * ae) +
         (C47127 + C46878 * C46819) * ae) /
        C46743;
    const double C274 =
        (C46793 * (C46883 + C46794 * C46889 + C47134 * ae)) / C46743;
    const double C278 =
        (C46794 * C46883 + C47127 * ae + C46889 * C46975) / C46743;
    const double C427 =
        (C46963 * (C46883 + C46794 * C46889 + C47134 * ae)) / C46743;
    const double C431 =
        (C46794 * C46883 + C47127 * ae + C46889 * C46994) / C46743;
    const double C818 = (C46963 * C46793 * C46889) / C46743;
    const double C1031 =
        (3 * (C46806 + C46793 * C47215 + C47213 * ae) +
         C46793 * (2 * C47215 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46894) +
                             C46793 * C46892 * ae) +
                   C47216 * ae) +
         (2 * C47213 + C46793 * C47216) * ae) /
        C46743;
    const double C1161 =
        (C46793 * C46806 + C47127 * ae + C47215 * C46994) / C46743;
    const double C1167 =
        (C46963 * (C46806 + C46793 * C47215 + C47213 * ae)) / C46743;
    const double C1174 =
        (C46806 + C46793 * C47215 + C47213 * ae +
         (C46813 + C46793 * (C46793 * C46823 + C46894) + C46793 * C46892 * ae) *
             C46994) /
        C46743;
    const double C1548 =
        (C46963 * (2 * C47215 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46894) +
                             C46793 * C46892 * ae) +
                   C47216 * ae)) /
        C46743;
    const double C2228 =
        (2 * C46963 * C47215 +
         C46963 * (C47215 + (C46793 * C46823 + C46894) * C46994)) /
        C46743;
    const double C5690 = C4579 * C1024;
    const double C16996 = C15893 * C1024;
    const double C21692 = C21569 * C1024;
    const double C4758 = C4579 * C281;
    const double C4738 = C4580 * C281;
    const double C16072 = C15893 * C281;
    const double C16052 = C15894 * C281;
    const double C21702 = C21569 * C281;
    const double C5426 = C4579 * C821;
    const double C5414 = C4580 * C821;
    const double C16740 = C15893 * C821;
    const double C16728 = C15894 * C821;
    const double C22212 = C21569 * C821;
    const double C4754 = C4579 * C265;
    const double C4742 = C4580 * C265;
    const double C16068 = C15893 * C265;
    const double C16056 = C15894 * C265;
    const double C21700 = C21569 * C265;
    const double C10630 = C4579 * C418;
    const double C10618 = C4580 * C418;
    const double C26208 = C21569 * C418;
    const double C31832 = C15893 * C418;
    const double C31820 = C15894 * C418;
    const double C5422 = C4579 * C813;
    const double C5418 = C4580 * C813;
    const double C16736 = C15893 * C813;
    const double C16732 = C15894 * C813;
    const double C22210 = C21569 * C813;
    const double C5688 = C4580 * C1017;
    const double C6036 = C4579 * C1017;
    const double C16994 = C15894 * C1017;
    const double C17334 = C15893 * C1017;
    const double C21704 = C21569 * C1017;
    const double C5874 = C4580 * C1154;
    const double C6242 = C4579 * C1154;
    const double C17172 = C15894 * C1154;
    const double C17540 = C15893 * C1154;
    const double C22214 = C21569 * C1154;
    const double C12356 = C4580 * C1845;
    const double C12708 = C4579 * C1845;
    const double C28328 = C21569 * C1845;
    const double C33550 = C15894 * C1845;
    const double C33902 = C15893 * C1845;
    const double C5864 = C4579 * C1152;
    const double C17162 = C15893 * C1152;
    const double C22540 = C21569 * C1152;
    const double C7260 = C4579 * C2222;
    const double C18534 = C15893 * C2222;
    const double C23578 = C21569 * C2222;
    const double C133 = (3 * (C46806 + C46813 * C46819) +
                         C46794 * (2 * C46815 + C46794 * C46827)) /
                        C46743;
    const double C282 =
        (C46806 + C46813 * C46819 + C46793 * (C46793 * C46827 + C47136 * ae) +
         C46793 * C47136 * ae) /
        C46743;
    const double C284 = (C46793 * (2 * C46815 + C46794 * C46827) +
                         (2 * C47134 + C46794 * C47136) * ae) /
                        C46743;
    const double C435 = (C46806 + C46813 * C46819 + C46827 * C46994) / C46743;
    const double C437 = (C46963 * (2 * C46815 + C46794 * C46827)) / C46743;
    const double C822 = (C46963 * (C46793 * C46827 + C47136 * ae)) / C46743;
    const double C1850 =
        (2 * C46963 * C46827 + C46963 * (C46827 + C46843 * C46994)) / C46743;
    const double C46844 = C46794 * C46842;
    const double C46849 = 2 * C46842;
    const double C46982 = C46793 * C46842;
    const double C47008 = C46963 * C46842;
    const double C46837 = C46822 + C46833;
    const double C47221 = C47218 + C46897;
    const double C12360 = C4580 * C1851;
    const double C12704 = C4579 * C1851;
    const double C28326 = C21569 * C1851;
    const double C33554 = C15894 * C1851;
    const double C33898 = C15893 * C1851;
    const double C12362 = C4580 * C1860;
    const double C33556 = C15894 * C1860;
    const double C44394 = C21569 * C1860;
    const double C47289 = C46793 * C47285;
    const double C47337 = 2 * C47285;
    const double C6775 =
        (3 * (C47215 + C47285 * C46994) +
         C46963 * (2 * C46963 * C47285 +
                   C46963 * (C47285 + (C46793 * C46839 + C46908) * C46994))) /
        C46743;
    const double C12349 =
        (4 * (2 * C46963 * C46813 + C46963 * C47331) +
         C46963 *
             (3 * C47331 + C46963 * (2 * C46963 * C46823 +
                                     C46963 * (C46823 + C46839 * C46994)))) /
        C46743;
    const double C142 =
        (3 * (C46812 + ae * C46815 + C46794 * C46826) +
         ae * (2 * C46815 + C46794 * C46827) +
         C46794 *
             (2 * C46826 + ae * C46827 +
              C46794 * (C46822 + ae * C46794 * C46823 +
                        C46794 * (ae * C46823 + C46794 * std::pow(C46796, 6) *
                                                    bs[6] * C46804)))) /
        C46745;
    const double C291 =
        (ae * (C46803 * C46799 * C46877 +
               C46794 * (C46794 * C46808 * C46809 * C46877 + C46878 * ae) +
               C46794 * C46878 * ae) +
         C46793 * (C46812 + ae * C46815 + C46794 * C46826)) /
        C46745;
    const double C295 = (ae * C46806 + C46794 * C46812 + ae * C46793 * C46889 +
                         C46793 * (ae * C46889 + C46793 * C46826)) /
                        C46745;
    const double C444 =
        ((zP - zQ) * (C46812 + ae * C46815 + C46794 * C46826)) / C46745;
    const double C448 =
        (ae * C46806 + C46794 * C46812 + C46826 * std::pow(zP - zQ, 2)) /
        C46745;
    const double C828 =
        (ae * C46963 * C46889 + C46793 * C46963 * C46826) / C46745;
    const double C1863 =
        (2 * C46963 * C46826 + C46963 * (C46826 + C46842 * C46994)) / C46745;
    const double C12365 = C4575 * C1865;
    const double C27975 = C47484 * C1865;
    const double C33559 = C15889 * C1865;
    const double C7257 = C4575 * C2231;
    const double C18531 = C15889 * C2231;
    const double C23577 = C47484 * C2231;
    const double C46899 = C46794 * C46898;
    const double C46904 = 2 * C46898;
    const double C46981 = ae * C46898;
    const double C46980 = C46793 * C46898;
    const double C1035 = (2 * (ae * C46889 + C46793 * C46826) +
                          ae * (C46889 + C46898 * std::pow(C46793, 2)) +
                          C46793 * (C46826 + ae * C46793 * C46898 +
                                    C46793 * (ae * C46898 + C46793 * C46842))) /
                         C46745;
    const double C1178 = (ae * (C46889 + C46898 * C46994) +
                          C46793 * (C46826 + C46842 * C46994)) /
                         C46745;
    const double C1026 =
        (2 * C46793 * C46889 + C46793 * (C46889 + C46898 * C46975)) / C46743;
    const double C1169 = (C46963 * (C46889 + C46898 * C46975)) / C46743;
    const double C1854 =
        (2 * C46963 * C46889 + C46963 * (C46889 + C46898 * C46994)) / C46743;
    const double C1037 =
        (3 * (C46812 + ae * C46972 + C46793 * C46976) +
         ae * (2 * C46972 + C46793 * C46978) +
         C46793 * (2 * C46976 + ae * C46978 +
                   C46793 * (C46822 + ae * C46793 * C46893 +
                             C46793 * (ae * C46893 + C46793 * C46838)))) /
        C46745;
    const double C1551 =
        (2 * (ae * C46963 * C46887 + C46793 * C47006) + ae * C46963 * C46978 +
         C46793 *
             (C47006 + ae * C46963 * C46793 * C46893 +
              C46793 * (ae * C46963 * C46893 + C46793 * C46963 * C46838))) /
        C46745;
    const double C5861 =
        (2 * (ae * (C46887 + C46893 * C46994) + C46793 * C47052) +
         ae * (C46978 + C47030 * C46994) +
         C46793 * (C47052 + ae * (C47023 + C46793 * C46907 * C46994) +
                   C46793 * (ae * (C46893 + C46907 * C46994) +
                             C46793 * (C46838 + C46862 * C46994)))) /
        C46745;
    const double C1028 = (3 * (C46883 + C46887 * C46975) +
                          C46793 * (2 * C46972 + C46793 * C46978)) /
                         C46743;
    const double C1171 = (C46883 + C46887 * C46975 + C46978 * C46994) / C46743;
    const double C1545 = (C46963 * (2 * C46972 + C46793 * C46978)) / C46743;
    const double C7247 =
        (2 * C46963 * C46978 + C46963 * (C46978 + C47030 * C46994)) / C46743;
    const double C47032 = C46793 * C47028;
    const double C47075 = 2 * C47028;
    const double C47031 = C46822 + C47027;
    const double C7261 = C4575 * C2225;
    const double C18535 = C15889 * C2225;
    const double C23579 = C47484 * C2225;
    const double C27973 = C47484 * C6773;
    const double C47061 = C47059 + C47060;
    const double C12347 =
        (4 * (2 * C46963 * C46887 + C46963 * C47325) +
         C46963 * (3 * C47325 + C46963 * (2 * C47057 + C46963 * C47099))) /
        C46743;
    const double C46915 = C46913 * ae;
    const double C47141 = C46794 * C46913;
    const double C47144 = 3 * C46913;
    const double C47225 = C46793 * C46913;
    const double C1016 =
        2 * C46793 * C47136 + C46793 * (C47136 + C46913 * C46975);
    const double C1153 = C46963 * (C47136 + C46913 * C46975);
    const double C1844 =
        2 * C46963 * C47136 + C46963 * (C47136 + C46913 * C46994);
    const double C1849 =
        3 * (C47136 + C46913 * C46994) +
        C46963 * (2 * C46963 * C46913 + C46963 * (C46913 + C46935 * C46994));
    const double C47298 = C47295 + C46912;
    const double C47222 = C46895 + C47220;
    const double C47301 = 2 * C47296;
    const double C47299 = C47296 * ae;
    const double C2223 =
        2 * C46963 * C47219 + C46963 * (C47219 + C47296 * C46994);
    const double C6772 =
        3 * (C47219 + C47296 * C46994) +
        C46963 * (2 * C46963 * C47296 +
                  C46963 * (C47296 + C46793 * C46931 * C46994));
    const double C47462 = C46895 + C47461;
    const double C12366 = C4580 * C1848;
    const double C33560 = C15894 * C1848;
    const double C44396 = C21569 * C1848;
    const double C46916 = C46794 * C46914;
    const double C46925 = 2 * C46914;
    const double C46983 = C46914 * C46975;
    const double C47038 = ae * C46914;
    const double C47037 = C46793 * C46914;
    const double C47063 = C46963 * C46914;
    const double C47327 = C46914 * C46994;
    const double C1857 =
        (3 * (C46889 + C46898 * C46994) +
         C46963 * (2 * C46963 * C46898 + C46963 * (C46898 + C46914 * C46994))) /
        C46743;
    const double C47347 = C46793 * C47343;
    const double C47369 = C47343 * C46994;
    const double C47290 = C46793 * C47287;
    const double C47342 = 3 * C47287;
    const double C47340 = C47287 * ae;
    const double C7245 =
        2 * C46963 * C47216 + C46963 * (C47216 + C47287 * C46994);
    const double C23209 =
        3 * (C47216 + C47287 * C46994) +
        C46963 * (2 * C46963 * C47287 + C46963 * (C47287 + C47345 * C46994));
    const double C47470 = C47283 + C47469;
    const double C27972 = C21569 * C6771;
    const double C47476 = C46963 * C47475;
    const double C46869 = C46794 * C46867;
    const double C1861 =
        (3 * (C46827 + C46843 * C46994) +
         C46963 * (2 * C46963 * C46843 + C46963 * (C46843 + C46867 * C46994))) /
        C46743;
    const double C46868 = C46794 * C46866;
    const double C47039 = C46793 * C46866;
    const double C47054 = C46866 * C46994;
    const double C47064 = C46963 * C46866;
    const double C47088 = C46793 * C47084;
    const double C47102 = C46793 * C47100;
    const double C47118 = C46963 * C47100;
    const double C23212 =
        (3 * C47052 + C46963 * (2 * C47058 + C46963 * C47100) +
         ae * (3 * (C47023 + C47077 * C46994) +
               C46963 * (2 * C47105 +
                         C46963 * (C47077 + C46793 * C46929 * C46994))) +
         C46793 * (ae * (3 * C47099 +
                         C46963 * (2 * C47106 +
                                   C46963 * (C46907 + C46929 * C46994))) +
                   C46793 * (3 * C47100 +
                             C46963 * (2 * C47107 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46994))))) /
        C46745;
    const double C47112 = C47109 + C47110;
    const double C46939 = C46794 * C46936;
    const double C47040 = C46936 * C46975;
    const double C47089 = C46793 * C47086;
    const double C23210 =
        (3 * (C46978 + C47030 * C46994) +
         C46963 * (2 * C46963 * C47030 + C46963 * (C47030 + C47086 * C46994))) /
        C46743;
    const double C5692 = C4580 * C1023;
    const double C6032 = C4579 * C1023;
    const double C16998 = C15894 * C1023;
    const double C17330 = C15893 * C1023;
    const double C21706 = C21569 * C1023;
    const double C5866 = C4580 * C1151;
    const double C6980 = C4579 * C1151;
    const double C17164 = C15894 * C1151;
    const double C18262 = C15893 * C1151;
    const double C23366 = C21569 * C1151;
    const double C4776 = C4579 * C266;
    const double C4756 = C4580 * C266;
    const double C16090 = C15893 * C266;
    const double C16070 = C15894 * C266;
    const double C21712 = C21569 * C266;
    const double C4764 = C4580 * C267;
    const double C5078 = C4579 * C267;
    const double C16078 = C15894 * C267;
    const double C16392 = C15893 * C267;
    const double C21946 = C21569 * C267;
    const double C10652 = C4579 * C419;
    const double C10632 = C4580 * C419;
    const double C26226 = C21569 * C419;
    const double C31854 = C15893 * C419;
    const double C31834 = C15894 * C419;
    const double C10640 = C4580 * C420;
    const double C10938 = C4579 * C420;
    const double C26522 = C21569 * C420;
    const double C31842 = C15894 * C420;
    const double C32140 = C15893 * C420;
    const double C5436 = C4579 * C814;
    const double C5424 = C4580 * C814;
    const double C16750 = C15893 * C814;
    const double C16738 = C15894 * C814;
    const double C22224 = C21569 * C814;
    const double C5700 = C4579 * C1019;
    const double C17006 = C15893 * C1019;
    const double C22414 = C21569 * C1019;
    const double C5886 = C4579 * C1156;
    const double C17184 = C15893 * C1156;
    const double C22544 = C21569 * C1156;
    const double C6392 = C4579 * C1542;
    const double C17682 = C15893 * C1542;
    const double C22548 = C21569 * C1542;
    const double C44139 = C21569 * C12345;
    const double C46847 = C46835 + C46845;
    const double C12350 =
        (4 * (2 * C46963 * C46829 + C46963 * C47334) +
         C46963 * (3 * C47334 +
                   C46963 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46994)))) /
        C46743;
    const double C47381 = C47378 + C47380;
    const double C27971 = C47484 * C6777;
    const double C23573 = C47484 * C7251;
    const double C44138 = C47484 * C12351;
    const double C47035 = C47029 + C47033;
    const double C47111 = C47058 + C47108;
    const double C27960 =
        (4 * (2 * C46963 * C47023 + C46963 * C47367) +
         C46963 * (3 * C47367 +
                   C46963 * (2 * C47105 +
                             C46963 * (C47077 + C46793 * C46929 * C46994)))) /
        C46743;
    const double C47374 = C47372 + C47373;
    const double C46940 = C46928 + C46938;
    const double C47228 = C46913 + C47226;
    const double C47303 = C46793 * C47300;
    const double C47350 = C47346 + C47348;
    const double C47515 = C47514 / C47505;
    const double C47828 = 2 * C47793;
    const double C47524 = C47523 / C47502;
    const double C47832 = C47797 / C47520;
    const double C47859 = C47791 - C47827;
    const double C2440 = -C47827;
    const double C47873 = C47858 + C47512;
    const double C47597 = C47596 / C47505;
    const double C47836 = 2 * C47802;
    const double C47604 = C47603 / C47502;
    const double C47846 = C47811 / C47520;
    const double C47867 = C47805 - C47843;
    const double C2332 = -C47843;
    const double C47876 = C47863 + C47593;
    const double C47639 = C47638 / C47505;
    const double C47839 = 2 * C47804;
    const double C47646 = C47645 / C47502;
    const double C47852 = C47817 / C47520;
    const double C47870 = C47806 - C47849;
    const double C3094 = -C47849;
    const double C47877 = C47865 + C47635;
    const double C4788 = C4750 + C4751;
    const double C4786 = C4746 + C4747;
    const double C4785 = C4744 + C4745;
    const double C4783 = C4740 + C4741;
    const double C4780 = C4734 + C4735;
    const double C4778 = C4730 + C4731;
    const double C5441 = C5420 + C5421;
    const double C5439 = C5416 + C5417;
    const double C5702 = C5686 + C5687;
    const double C5892 = C5872 + C5873;
    const double C10664 = C10626 + C10627;
    const double C10662 = C10622 + C10623;
    const double C10661 = C10620 + C10621;
    const double C10659 = C10616 + C10617;
    const double C10656 = C10610 + C10611;
    const double C10654 = C10606 + C10607;
    const double C12377 = C12368 + C12369;
    const double C12372 = C12358 + C12359;
    const double C12370 = C12354 + C12355;
    const double C4781 = C4736 + C4737;
    const double C4779 = C4732 + C4733;
    const double C10657 = C10612 + C10613;
    const double C10655 = C10608 + C10609;
    const double C16095 = C16050 + C16051;
    const double C16093 = C16046 + C16047;
    const double C31859 = C31814 + C31815;
    const double C31857 = C31810 + C31811;
    const double C21727 = C21698 + C21699;
    const double C21726 = C21696 + C21697;
    const double C21725 = C21694 + C21695;
    const double C21723 = C21690 + C21691;
    const double C21722 = C21688 + C21689;
    const double C21721 = C21686 + C21687;
    const double C21720 = C21684 + C21685;
    const double C22229 = C22208 + C22209;
    const double C22228 = C22206 + C22207;
    const double C22227 = C22204 + C22205;
    const double C26233 = C26204 + C26205;
    const double C26232 = C26202 + C26203;
    const double C26231 = C26200 + C26201;
    const double C26230 = C26198 + C26199;
    const double C26229 = C26192 + C26193;
    const double C26228 = C26190 + C26191;
    const double C27983 = C27976 + C27977;
    const double C27979 = C27966 + C27967;
    const double C27978 = C27964 + C27965;
    const double C16102 = C16064 + C16065;
    const double C16100 = C16060 + C16061;
    const double C16099 = C16058 + C16059;
    const double C16097 = C16054 + C16055;
    const double C16094 = C16048 + C16049;
    const double C16092 = C16044 + C16045;
    const double C16755 = C16734 + C16735;
    const double C16753 = C16730 + C16731;
    const double C17008 = C16992 + C16993;
    const double C17190 = C17170 + C17171;
    const double C31866 = C31828 + C31829;
    const double C31864 = C31824 + C31825;
    const double C31863 = C31822 + C31823;
    const double C31861 = C31818 + C31819;
    const double C31858 = C31812 + C31813;
    const double C31856 = C31808 + C31809;
    const double C33571 = C33562 + C33563;
    const double C33566 = C33552 + C33553;
    const double C33564 = C33548 + C33549;
    const double C4763 = C4575 * C274;
    const double C4749 = C47824 * C274;
    const double C16077 = C15889 * C274;
    const double C16063 = C47824 * C274;
    const double C21709 = C47484 * C274;
    const double C4755 = C4575 * C278;
    const double C4743 = C47824 * C278;
    const double C16069 = C15889 * C278;
    const double C16057 = C47824 * C278;
    const double C21701 = C47484 * C278;
    const double C10639 = C4575 * C427;
    const double C10625 = C47824 * C427;
    const double C26215 = C47484 * C427;
    const double C31841 = C15889 * C427;
    const double C31827 = C47824 * C427;
    const double C10631 = C4575 * C431;
    const double C10619 = C47824 * C431;
    const double C26209 = C47484 * C431;
    const double C31833 = C15889 * C431;
    const double C31821 = C47824 * C431;
    const double C5423 = C4575 * C818;
    const double C5419 = C47824 * C818;
    const double C16737 = C15889 * C818;
    const double C16733 = C47824 * C818;
    const double C22211 = C47484 * C818;
    const double C5696 = C4579 * C1031;
    const double C17002 = C15893 * C1031;
    const double C22416 = C21569 * C1031;
    const double C5868 = C4579 * C1161;
    const double C17166 = C15893 * C1161;
    const double C22542 = C21569 * C1161;
    const double C5876 = C4579 * C1167;
    const double C17174 = C15893 * C1167;
    const double C22202 = C21569 * C1167;
    const double C5882 = C4579 * C1174;
    const double C17180 = C15893 * C1174;
    const double C22546 = C21569 * C1174;
    const double C6388 = C4579 * C1548;
    const double C17678 = C15893 * C1548;
    const double C22550 = C21569 * C1548;
    const double C7256 = C4579 * C2228;
    const double C18530 = C15893 * C2228;
    const double C23576 = C21569 * C2228;
    const double C5704 = C5690 + C5691;
    const double C17010 = C16996 + C16997;
    const double C21724 = C21692 + C21693;
    const double C5888 = C5864 + C5865;
    const double C17186 = C17162 + C17163;
    const double C22556 = C22540 + C22541;
    const double C4772 = C4579 * C282;
    const double C4760 = C4580 * C282;
    const double C16086 = C15893 * C282;
    const double C16074 = C15894 * C282;
    const double C21714 = C21569 * C282;
    const double C4768 = C4580 * C284;
    const double C5082 = C4579 * C284;
    const double C16082 = C15894 * C284;
    const double C16396 = C15893 * C284;
    const double C21948 = C21569 * C284;
    const double C10648 = C4579 * C435;
    const double C10636 = C4580 * C435;
    const double C26224 = C21569 * C435;
    const double C31850 = C15893 * C435;
    const double C31838 = C15894 * C435;
    const double C10644 = C4580 * C437;
    const double C10942 = C4579 * C437;
    const double C26524 = C21569 * C437;
    const double C31846 = C15894 * C437;
    const double C32144 = C15893 * C437;
    const double C5432 = C4579 * C822;
    const double C5428 = C4580 * C822;
    const double C16746 = C15893 * C822;
    const double C16742 = C15894 * C822;
    const double C22222 = C21569 * C822;
    const double C12702 = C4580 * C1850;
    const double C33896 = C15894 * C1850;
    const double C42831 = C21569 * C1850;
    const double C46856 = C46849 + C46850;
    const double C1866 =
        (3 * (C46826 + C46842 * C46994) +
         C46963 * (2 * C47008 + C46963 * (C46842 + C46866 * C46994))) /
        C46745;
    const double C2232 =
        (ae * (2 * C46963 * C46898 + C46963 * (C46898 + C46914 * C46994)) +
         C46793 * (2 * C47008 + C46963 * (C46842 + C46866 * C46994))) /
        C46745;
    const double C46846 = C46837 + C46844;
    const double C1160 =
        (C46793 * C46815 + C47134 * ae + C47221 * C46994) / C46743;
    const double C1166 =
        (C46963 * (C46815 + C46793 * C47221 + C47219 * ae)) / C46743;
    const double C1175 =
        (C46815 + C46793 * C47221 + C47219 * ae +
         (C46829 + C46793 * (C46793 * C46851 + C46912) + C46793 * C46909 * ae) *
             C46994) /
        C46743;
    const double C2229 =
        (2 * C46963 * C47221 +
         C46963 * (C47221 + (C46793 * C46851 + C46912) * C46994)) /
        C46743;
    const double C47291 = C46813 + C47289;
    const double C27970 = C21569 * C6775;
    const double C44137 = C21569 * C12349;
    const double C4767 = C4575 * C291;
    const double C4753 = C47824 * C291;
    const double C16081 = C15889 * C291;
    const double C16067 = C47824 * C291;
    const double C21711 = C47484 * C291;
    const double C4759 = C4575 * C295;
    const double C4739 = C47824 * C295;
    const double C16073 = C15889 * C295;
    const double C16053 = C47824 * C295;
    const double C21703 = C47484 * C295;
    const double C10643 = C4575 * C444;
    const double C10629 = C47824 * C444;
    const double C26217 = C47484 * C444;
    const double C31845 = C15889 * C444;
    const double C31831 = C47824 * C444;
    const double C10635 = C4575 * C448;
    const double C10615 = C47824 * C448;
    const double C26211 = C47484 * C448;
    const double C31837 = C15889 * C448;
    const double C31817 = C47824 * C448;
    const double C5427 = C4575 * C828;
    const double C5415 = C47824 * C828;
    const double C16741 = C15889 * C828;
    const double C16729 = C47824 * C828;
    const double C22213 = C47484 * C828;
    const double C12361 = C47824 * C1863;
    const double C12705 = C4575 * C1863;
    const double C28327 = C47484 * C1863;
    const double C33555 = C47824 * C1863;
    const double C33899 = C15889 * C1863;
    const double C12375 = C12364 + C12365;
    const double C27982 = C27974 + C27975;
    const double C33569 = C33558 + C33559;
    const double C46900 = C46887 + C46899;
    const double C46984 = C46981 + C46982;
    const double C1181 =
        (C46963 * C46826 + ae * C46963 * C46980 +
         C46793 * (ae * C46963 * C46898 + C46793 * C46963 * C46842)) /
        C46745;
    const double C1184 =
        (C46826 + C46842 * C46994 + ae * (C46980 + C46793 * C46914 * C46994) +
         C46793 * (ae * (C46898 + C46914 * C46994) +
                   C46793 * (C46842 + C46866 * C46994))) /
        C46745;
    const double C1163 = (C46793 * C46889 + C46980 * C46994) / C46743;
    const double C5693 = C47824 * C1035;
    const double C6033 = C4575 * C1035;
    const double C16999 = C47824 * C1035;
    const double C17331 = C15889 * C1035;
    const double C21707 = C47484 * C1035;
    const double C5871 = C47824 * C1178;
    const double C6977 = C4575 * C1178;
    const double C17169 = C47824 * C1178;
    const double C18259 = C15889 * C1178;
    const double C23365 = C47484 * C1178;
    const double C5689 = C47824 * C1026;
    const double C6037 = C4575 * C1026;
    const double C16995 = C47824 * C1026;
    const double C17335 = C15889 * C1026;
    const double C21705 = C47484 * C1026;
    const double C5875 = C47824 * C1169;
    const double C6243 = C4575 * C1169;
    const double C17173 = C47824 * C1169;
    const double C17541 = C15889 * C1169;
    const double C22215 = C47484 * C1169;
    const double C12357 = C47824 * C1854;
    const double C12709 = C4575 * C1854;
    const double C28329 = C47484 * C1854;
    const double C33551 = C47824 * C1854;
    const double C33903 = C15889 * C1854;
    const double C5697 = C4575 * C1037;
    const double C17003 = C15889 * C1037;
    const double C22417 = C47484 * C1037;
    const double C6389 = C4575 * C1551;
    const double C17679 = C15889 * C1551;
    const double C22551 = C47484 * C1551;
    const double C22553 = C47484 * C5861;
    const double C5701 = C4575 * C1028;
    const double C17007 = C15889 * C1028;
    const double C22415 = C47484 * C1028;
    const double C5887 = C4575 * C1171;
    const double C17185 = C15889 * C1171;
    const double C22545 = C47484 * C1171;
    const double C6393 = C4575 * C1545;
    const double C17683 = C15889 * C1545;
    const double C22549 = C47484 * C1545;
    const double C23575 = C47484 * C7247;
    const double C47082 = C47075 + C47076;
    const double C47034 = C47031 + C47032;
    const double C7265 = C7260 + C7261;
    const double C18539 = C18534 + C18535;
    const double C23583 = C23578 + C23579;
    const double C44140 = C47484 * C12347;
    const double C47227 = C47224 + C46915;
    const double C1022 =
        (2 * (C46793 * C46827 + C47136 * ae) +
         C46793 * (C46827 + C46793 * (C46793 * C46843 + C46915) +
                   C46793 * C46913 * ae) +
         (C47136 + C46913 * C46975) * ae) /
        C46743;
    const double C47142 = C47140 + C47141;
    const double C1150 = C46793 * C47136 + C47225 * C46994;
    const double C2224 =
        2 * C46963 * C47225 + C46963 * (C47225 + C46793 * C46935 * C46994);
    const double C6034 = C4580 * C1016;
    const double C17332 = C15894 * C1016;
    const double C21718 = C21569 * C1016;
    const double C6240 = C4580 * C1153;
    const double C17538 = C15894 * C1153;
    const double C22220 = C21569 * C1153;
    const double C12706 = C4580 * C1844;
    const double C33900 = C15894 * C1844;
    const double C42833 = C21569 * C1844;
    const double C47302 = C46793 * C47298;
    const double C6776 =
        (3 * (C47221 + C47298 * C46994) +
         C46963 * (2 * C46963 * C47298 +
                   C46963 * (C47298 +
                             (C46793 * C46794 * C46863 + C46934) * C46994))) /
        C46743;
    const double C1032 =
        (3 * (C46815 + C46793 * C47221 + C47219 * ae) +
         C46793 * (2 * C47221 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46912) +
                             C46793 * C46909 * ae) +
                   C47222 * ae) +
         (2 * C47219 + C46793 * C47222) * ae) /
        C46743;
    const double C1549 =
        (C46963 * (2 * C47221 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46912) +
                             C46793 * C46909 * ae) +
                   C47222 * ae)) /
        C46743;
    const double C1020 = 3 * (C47134 + C46895 * C46975) +
                         C46793 * (2 * C47219 + C46793 * C47222);
    const double C1157 = C47134 + C46895 * C46975 + C47222 * C46994;
    const double C1543 = C46963 * (2 * C47219 + C46793 * C47222);
    const double C7246 =
        2 * C46963 * C47222 + C46963 * (C47222 + C47300 * C46994);
    const double C7258 = C4580 * C2223;
    const double C18532 = C15894 * C2223;
    const double C28186 = C21569 * C2223;
    const double C12346 =
        4 * (2 * C46963 * C46895 + C46963 * C47462) +
        C46963 * (3 * C47462 + C46963 * (2 * C46963 * C46909 +
                                         C46963 * (C46909 + C46931 * C46994)));
    const double C46917 = C46893 + C46916;
    const double C46985 = C46898 + C46983;
    const double C47043 = 2 * C47037;
    const double C47041 = ae * C47037;
    const double C2226 =
        (2 * C46963 * C46980 + C46963 * (C46980 + C47037 * C46994)) / C46743;
    const double C6774 =
        (3 * (C46980 + C47037 * C46994) +
         C46963 * (2 * C46963 * C47037 +
                   C46963 * (C47037 + C46793 * C46936 * C46994))) /
        C46743;
    const double C47065 = ae * C47063;
    const double C47328 = C46898 + C47327;
    const double C12367 = C47824 * C1857;
    const double C33561 = C47824 * C1857;
    const double C44397 = C47484 * C1857;
    const double C47349 = C46823 + C47347;
    const double C47370 = C47285 + C47369;
    const double C47292 = C47288 + C47290;
    const double C23574 = C21569 * C7245;
    const double C27959 =
        4 * (2 * C46963 * C47283 + C46963 * C47470) +
        C46963 * (3 * C47470 +
                  C46963 * (2 * C46963 * C47339 +
                            C46963 * (C47339 + C46793 * C46927 * C46994)));
    const double C27981 = C27972 + C27973;
    const double C47477 = C47474 + C47476;
    const double C46871 = C46859 + C46869;
    const double C46870 = C46861 + C46868;
    const double C47042 = C47038 + C47039;
    const double C47055 = C46842 + C47054;
    const double C47066 = C46793 * C47064;
    const double C47090 = C47087 + C47088;
    const double C47103 = C47101 + C47102;
    const double C47119 = C47117 + C47118;
    const double C47113 = C46793 * C47112;
    const double C46941 = C46907 + C46939;
    const double C47044 = C46914 + C47040;
    const double C47091 = C47085 + C47089;
    const double C134 = (4 * (2 * C46815 + C46794 * C46827) +
                         C46794 * (3 * C46827 + C46794 * C46847)) /
                        C46743;
    const double C438 =
        (2 * C46815 + C46794 * C46827 + C46847 * C46994) / C46743;
    const double C440 = (C46963 * (3 * C46827 + C46794 * C46847)) / C46743;
    const double C44131 =
        (5 * (3 * C47331 + C46963 * C47381) +
         C46963 * (4 * C47381 +
                   C46963 * (3 * C47379 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46994))))) /
        C46743;
    const double C6383 =
        (3 * (C47006 + ae * C46963 * C47023 + C46793 * C47061) +
         ae * C46963 * C47035 +
         C46793 * (2 * C47061 + ae * C46963 * C47030 +
                   C46793 * (C47058 + ae * C46963 * C46793 * C46907 +
                             C46793 * (ae * C46963 * C46907 +
                                       C46793 * C46963 * C46862)))) /
        C46745;
    const double C5679 = (4 * (2 * C46972 + C46793 * C46978) +
                          C46793 * (3 * C46978 + C46793 * C47035)) /
                         C46743;
    const double C5857 =
        (2 * C46972 + C46793 * C46978 + C47035 * C46994) / C46743;
    const double C6379 = (C46963 * (3 * C46978 + C46793 * C47035)) / C46743;
    const double C44130 =
        (5 * (3 * C47325 + C46963 * C47374) +
         C46963 * (4 * C47374 +
                   C46963 * (3 * C47099 +
                             C46963 * (2 * C47106 +
                                       C46963 * (C46907 + C46929 * C46994))))) /
        C46743;
    const double C46942 = C46940 * ae;
    const double C47145 = C46794 * C46940;
    const double C1021 = 3 * (C47136 + C46913 * C46975) +
                         C46793 * (2 * C47225 + C46793 * C47228);
    const double C1158 = C47136 + C46913 * C46975 + C47228 * C46994;
    const double C1544 = C46963 * (2 * C47225 + C46793 * C47228);
    const double C47305 = C47301 + C47303;
    const double C47352 = C46793 * C47350;
    const double C47516 = C47512 - C47515;
    const double C47860 = C47828 / C47502;
    const double C47525 = C47521 - C47524;
    const double C47874 = C47859 / C47506;
    const double C47598 = C47593 - C47597;
    const double C47864 = C47836 / C47502;
    const double C47605 = C47601 - C47604;
    const double C47878 = C47867 / C47506;
    const double C47640 = C47635 - C47639;
    const double C47866 = C47839 / C47502;
    const double C47647 = C47643 - C47646;
    const double C47880 = C47870 / C47506;
    const double C26194 = C22229 * C15896;
    const double C26726 = C22229 * C15895;
    const double C37378 = C22229 * C4582;
    const double C37858 = C22229 * C4581;
    const double C43194 = C22229 * C116;
    const double C26195 = C22228 * C47855;
    const double C26727 = C22228 * C15891;
    const double C37379 = C22228 * C47855;
    const double C37859 = C22228 * C4577;
    const double C43195 = C22228 * C47745;
    const double C26728 = C22227 * C15896;
    const double C27116 = C22227 * C15895;
    const double C37860 = C22227 * C4582;
    const double C38248 = C22227 * C4581;
    const double C43491 = C22227 * C116;
    const double C26247 = C26233 * C15891;
    const double C37385 = C26233 * C4577;
    const double C42822 = C26233 * C47745;
    const double C26246 = C26232 * C15895;
    const double C37384 = C26232 * C4581;
    const double C42821 = C26232 * C116;
    const double C26245 = C26231 * C15895;
    const double C37383 = C26231 * C4581;
    const double C42817 = C26231 * C116;
    const double C26244 = C26230 * C15891;
    const double C37382 = C26230 * C4577;
    const double C42818 = C26230 * C47745;
    const double C26243 = C26229 * C15891;
    const double C37377 = C26229 * C4577;
    const double C42816 = C26229 * C47745;
    const double C26242 = C26228 * C15895;
    const double C37376 = C26228 * C4581;
    const double C42815 = C26228 * C116;
    const double C27989 = C27983 * C15895;
    const double C39099 = C27983 * C4581;
    const double C44135 = C27983 * C116;
    const double C27985 = C27979 * C15891;
    const double C39093 = C27979 * C4577;
    const double C42819 = C27979 * C47745;
    const double C27984 = C27978 * C15895;
    const double C39092 = C27978 * C4581;
    const double C42820 = C27978 * C116;
    const double C4794 = C4762 + C4763;
    const double C4787 = C4748 + C4749;
    const double C16108 = C16076 + C16077;
    const double C16101 = C16062 + C16063;
    const double C21732 = C21708 + C21709;
    const double C4790 = C4754 + C4755;
    const double C4784 = C4742 + C4743;
    const double C16104 = C16068 + C16069;
    const double C16098 = C16056 + C16057;
    const double C21728 = C21700 + C21701;
    const double C10670 = C10638 + C10639;
    const double C10663 = C10624 + C10625;
    const double C26236 = C26214 + C26215;
    const double C31872 = C31840 + C31841;
    const double C31865 = C31826 + C31827;
    const double C10666 = C10630 + C10631;
    const double C10660 = C10618 + C10619;
    const double C26234 = C26208 + C26209;
    const double C31868 = C31832 + C31833;
    const double C31862 = C31820 + C31821;
    const double C5442 = C5422 + C5423;
    const double C5440 = C5418 + C5419;
    const double C16756 = C16736 + C16737;
    const double C16754 = C16732 + C16733;
    const double C22230 = C22210 + C22211;
    const double C5890 = C5868 + C5869;
    const double C17188 = C17166 + C17167;
    const double C22557 = C22542 + C22543;
    const double C5894 = C5876 + C5877;
    const double C17192 = C17174 + C17175;
    const double C22226 = C22202 + C22203;
    const double C5897 = C5882 + C5883;
    const double C17195 = C17180 + C17181;
    const double C22559 = C22546 + C22547;
    const double C7263 = C7256 + C7257;
    const double C18537 = C18530 + C18531;
    const double C23582 = C23576 + C23577;
    const double C26197 = C22556 * C15896;
    const double C27112 = C22556 * C15895;
    const double C37381 = C22556 * C4582;
    const double C38244 = C22556 * C4581;
    const double C43196 = C22556 * C116;
    const double C12363 = C47824 * C1866;
    const double C33557 = C47824 * C1866;
    const double C44395 = C47484 * C1866;
    const double C7255 = C47824 * C2232;
    const double C18529 = C47824 * C2232;
    const double C28185 = C47484 * C2232;
    const double C143 =
        (4 * (2 * C46826 + ae * C46827 + C46794 * C46846) +
         ae * (3 * C46827 + C46794 * C46847) +
         C46794 * (3 * C46846 + ae * C46847 +
                   C46794 * (2 * C46842 + ae * C46843 +
                             C46794 * (C46838 + ae * C46794 * C46839 +
                                       C46794 * (ae * C46839 +
                                                 C46794 * std::pow(C46798, 7) *
                                                     bs[7] * C46804))))) /
        C46745;
    const double C449 = (C46812 + ae * C46815 + C46794 * C46826 +
                         C46846 * std::pow(zP - zQ, 2)) /
                        C46745;
    const double C450 =
        ((zP - zQ) * (2 * C46826 + ae * C46827 + C46794 * C46846)) / C46745;
    const double C5870 = C4580 * C1160;
    const double C6976 = C4579 * C1160;
    const double C17168 = C15894 * C1160;
    const double C18258 = C15893 * C1160;
    const double C23364 = C21569 * C1160;
    const double C5878 = C4580 * C1166;
    const double C6238 = C4579 * C1166;
    const double C17176 = C15894 * C1166;
    const double C17536 = C15893 * C1166;
    const double C22216 = C21569 * C1166;
    const double C5880 = C4580 * C1175;
    const double C17178 = C15894 * C1175;
    const double C23360 = C21569 * C1175;
    const double C7254 = C4580 * C2229;
    const double C18528 = C15894 * C2229;
    const double C28184 = C21569 * C2229;
    const double C47293 = C47291 + C47286;
    const double C27980 = C27970 + C27971;
    const double C44142 = C44137 + C44138;
    const double C4796 = C4766 + C4767;
    const double C4789 = C4752 + C4753;
    const double C16110 = C16080 + C16081;
    const double C16103 = C16066 + C16067;
    const double C21733 = C21710 + C21711;
    const double C4792 = C4758 + C4759;
    const double C4782 = C4738 + C4739;
    const double C16106 = C16072 + C16073;
    const double C16096 = C16052 + C16053;
    const double C21729 = C21702 + C21703;
    const double C10672 = C10642 + C10643;
    const double C10665 = C10628 + C10629;
    const double C26237 = C26216 + C26217;
    const double C31874 = C31844 + C31845;
    const double C31867 = C31830 + C31831;
    const double C10668 = C10634 + C10635;
    const double C10658 = C10614 + C10615;
    const double C26235 = C26210 + C26211;
    const double C31870 = C31836 + C31837;
    const double C31860 = C31816 + C31817;
    const double C5444 = C5426 + C5427;
    const double C5438 = C5414 + C5415;
    const double C16758 = C16740 + C16741;
    const double C16752 = C16728 + C16729;
    const double C22231 = C22212 + C22213;
    const double C12373 = C12360 + C12361;
    const double C12711 = C12704 + C12705;
    const double C28330 = C28326 + C28327;
    const double C33567 = C33554 + C33555;
    const double C33905 = C33898 + C33899;
    const double C27988 = C27982 * C15891;
    const double C39098 = C27982 * C4577;
    const double C44136 = C27982 * C47745;
    const double C46901 = C46900 + C46897;
    const double C5879 = C47824 * C1181;
    const double C6239 = C4575 * C1181;
    const double C17177 = C47824 * C1181;
    const double C17537 = C15889 * C1181;
    const double C22217 = C47484 * C1181;
    const double C5881 = C47824 * C1184;
    const double C17179 = C47824 * C1184;
    const double C23361 = C47484 * C1184;
    const double C5867 = C47824 * C1163;
    const double C6981 = C4575 * C1163;
    const double C17165 = C47824 * C1163;
    const double C18263 = C15889 * C1163;
    const double C23367 = C47484 * C1163;
    const double C5705 = C5692 + C5693;
    const double C6039 = C6032 + C6033;
    const double C17011 = C16998 + C16999;
    const double C17337 = C17330 + C17331;
    const double C21731 = C21706 + C21707;
    const double C5703 = C5688 + C5689;
    const double C6041 = C6036 + C6037;
    const double C17009 = C16994 + C16995;
    const double C17339 = C17334 + C17335;
    const double C21730 = C21704 + C21705;
    const double C5893 = C5874 + C5875;
    const double C6247 = C6242 + C6243;
    const double C17191 = C17172 + C17173;
    const double C17545 = C17540 + C17541;
    const double C22232 = C22214 + C22215;
    const double C12371 = C12356 + C12357;
    const double C12713 = C12708 + C12709;
    const double C28331 = C28328 + C28329;
    const double C33565 = C33550 + C33551;
    const double C33907 = C33902 + C33903;
    const double C5707 = C5696 + C5697;
    const double C17013 = C17002 + C17003;
    const double C22423 = C22416 + C22417;
    const double C6395 = C6388 + C6389;
    const double C17685 = C17678 + C17679;
    const double C22561 = C22550 + C22551;
    const double C5709 = C5700 + C5701;
    const double C17015 = C17006 + C17007;
    const double C22422 = C22414 + C22415;
    const double C5899 = C5886 + C5887;
    const double C17197 = C17184 + C17185;
    const double C22558 = C22544 + C22545;
    const double C6397 = C6392 + C6393;
    const double C17687 = C17682 + C17683;
    const double C22560 = C22548 + C22549;
    const double C5683 =
        (4 * (2 * C46976 + ae * C46978 + C46793 * C47034) +
         ae * (3 * C46978 + C46793 * C47035) +
         C46793 *
             (3 * C47034 + ae * C47035 +
              C46793 * (2 * C47028 + ae * C47030 +
                        C46793 * (C46838 + ae * C46793 * C46907 +
                                  C46793 * (ae * C46907 + C46793 * C46862))))) /
        C46745;
    const double C27968 = C23583 * C15896;
    const double C28467 = C23583 * C15895;
    const double C39094 = C23583 * C4582;
    const double C39565 = C23583 * C4581;
    const double C43488 = C23583 * C116;
    const double C44143 = C44139 + C44140;
    const double C1033 =
        (3 * (C46827 + C46793 * C47227 + C47225 * ae) +
         C46793 * (2 * C47227 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46937) +
                             C46793 * C46935 * ae) +
                   C47228 * ae) +
         (2 * C47225 + C46793 * C47228) * ae) /
        C46743;
    const double C1159 =
        (C46793 * C46827 + C47136 * ae + C47227 * C46994) / C46743;
    const double C1165 =
        (C46963 * (C46827 + C46793 * C47227 + C47225 * ae)) / C46743;
    const double C1176 =
        (C46827 + C46793 * C47227 + C47225 * ae +
         (C46843 + C46793 * (C46793 * C46867 + C46937) + C46793 * C46935 * ae) *
             C46994) /
        C46743;
    const double C1550 =
        (C46963 * (2 * C47227 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46937) +
                             C46793 * C46935 * ae) +
                   C47228 * ae)) /
        C46743;
    const double C2230 =
        (2 * C46963 * C47227 +
         C46963 * (C47227 + (C46793 * C46867 + C46937) * C46994)) /
        C46743;
    const double C6030 = C4580 * C1022;
    const double C17328 = C15894 * C1022;
    const double C21716 = C21569 * C1022;
    const double C285 =
        (2 * C46815 + C46794 * C46827 +
         C46793 * (C46793 * C46847 + C47142 * ae) + C46793 * C47142 * ae) /
        C46743;
    const double C287 = (C46793 * (3 * C46827 + C46794 * C46847) +
                         (3 * C47136 + C46794 * C47142) * ae) /
                        C46743;
    const double C823 = (C46963 * (C46793 * C46847 + C47142 * ae)) / C46743;
    const double C122 = 4 * (2 * C47134 + C46794 * C47136) +
                        C46794 * (3 * C47136 + C46794 * C47142);
    const double C268 = 2 * C47134 + C46794 * C47136 + C47142 * C46975;
    const double C269 = C46793 * (3 * C47136 + C46794 * C47142);
    const double C421 = 2 * C47134 + C46794 * C47136 + C47142 * C46994;
    const double C422 = C46963 * (3 * C47136 + C46794 * C47142);
    const double C815 = C46963 * C46793 * C47142;
    const double C1290 =
        2 * C46793 * C47142 + C46793 * (C47142 + C46940 * C46975);
    const double C1440 = C46963 * (C47142 + C46940 * C46975);
    const double C2014 = C46793 * C47142 + C46793 * C46940 * C46994;
    const double C2120 =
        2 * C46963 * C47142 + C46963 * (C47142 + C46940 * C46994);
    const double C6978 = C4580 * C1150;
    const double C18260 = C15894 * C1150;
    const double C26222 = C21569 * C1150;
    const double C47304 = C46829 + C47302;
    const double C5694 = C4580 * C1032;
    const double C17000 = C15894 * C1032;
    const double C22662 = C21569 * C1032;
    const double C6386 = C4580 * C1549;
    const double C17676 = C15894 * C1549;
    const double C22814 = C21569 * C1549;
    const double C5698 = C4580 * C1020;
    const double C17004 = C15894 * C1020;
    const double C22664 = C21569 * C1020;
    const double C5884 = C4580 * C1157;
    const double C17182 = C15894 * C1157;
    const double C23362 = C21569 * C1157;
    const double C6390 = C4580 * C1543;
    const double C17680 = C15894 * C1543;
    const double C22816 = C21569 * C1543;
    const double C46918 = C46917 + C46912;
    const double C1038 =
        (3 * (C46826 + ae * C46980 + C46793 * C46984) +
         ae * (2 * C46980 + C46793 * C46985) +
         C46793 * (2 * C46984 + ae * C46985 +
                   C46793 * (C46842 + ae * C46793 * C46914 +
                             C46793 * (ae * C46914 + C46793 * C46866)))) /
        C46745;
    const double C1552 =
        (2 * (ae * C46963 * C46898 + C46793 * C47008) + ae * C46963 * C46985 +
         C46793 *
             (C47008 + ae * C46963 * C46793 * C46914 +
              C46793 * (ae * C46963 * C46914 + C46793 * C46963 * C46866))) /
        C46745;
    const double C1029 = (3 * (C46889 + C46898 * C46975) +
                          C46793 * (2 * C46980 + C46793 * C46985)) /
                         C46743;
    const double C1172 = (C46889 + C46898 * C46975 + C46985 * C46994) / C46743;
    const double C1546 = (C46963 * (2 * C46980 + C46793 * C46985)) / C46743;
    const double C47045 = C46842 + C47041;
    const double C7259 = C47824 * C2226;
    const double C18533 = C47824 * C2226;
    const double C28187 = C47484 * C2226;
    const double C12348 =
        (4 * (2 * C46963 * C46898 + C46963 * C47328) +
         C46963 *
             (3 * C47328 +
              C46963 * (2 * C47063 + C46963 * (C46914 + C46936 * C46994)))) /
        C46743;
    const double C12376 = C12366 + C12367;
    const double C33570 = C33560 + C33561;
    const double C44399 = C44396 + C44397;
    const double C47351 = C47349 + C47344;
    const double C27961 =
        (4 * (2 * C46963 * C47285 + C46963 * C47370) +
         C46963 * (3 * C47370 +
                   C46963 * (2 * C46963 * C47343 +
                             C46963 * (C47343 +
                                       (C46793 * C46863 + C46930) * C46994)))) /
        C46743;
    const double C5677 = 4 * (2 * C47213 + C46793 * C47216) +
                         C46793 * (3 * C47216 + C46793 * C47292);
    const double C5855 = 2 * C47213 + C46793 * C47216 + C47292 * C46994;
    const double C6377 = C46963 * (3 * C47216 + C46793 * C47292);
    const double C23567 =
        2 * C46963 * C47292 + C46963 * (C47292 + C47350 * C46994);
    const double C23581 = C23574 + C23575;
    const double C27987 = C27981 * C15896;
    const double C39097 = C27981 * C4582;
    const double C44502 = C27981 * C116;
    const double C44129 =
        5 * (3 * C47459 + C46963 * C47477) +
        C46963 * (4 * C47477 +
                  C46963 * (3 * C47475 +
                            C46963 * (2 * C46963 * C46906 +
                                      C46963 * (C46906 + C46927 * C46994))));
    const double C46873 = C46794 * C46871;
    const double C2122 =
        (2 * C46963 * C46847 + C46963 * (C46847 + C46871 * C46994)) / C46743;
    const double C46872 = C46794 * C46870;
    const double C46989 = C46793 * C46870;
    const double C47010 = C46963 * C46870;
    const double C1862 =
        (2 * C46963 * C46846 + C46963 * (C46846 + C46870 * C46994)) / C46745;
    const double C47046 = C46793 * C47042;
    const double C6778 =
        (ae * (3 * (C46898 + C46914 * C46994) +
               C46963 * (2 * C47063 + C46963 * (C46914 + C46936 * C46994))) +
         C46793 * (3 * C47055 +
                   C46963 * (2 * C47064 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46994)))) /
        C46745;
    const double C7252 =
        (2 * C47008 + C46963 * C47055 +
         ae * (2 * C46963 * C47037 +
               C46963 * (C47037 + C46793 * C46936 * C46994)) +
         C46793 * (ae * (2 * C47063 + C46963 * (C46914 + C46936 * C46994)) +
                   C46793 * (2 * C47064 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46994)))) /
        C46745;
    const double C12352 =
        (4 * (2 * C47008 + C46963 * C47055) +
         C46963 * (3 * C47055 +
                   C46963 * (2 * C47064 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46994)))) /
        C46745;
    const double C47067 = C47065 + C47066;
    const double C47092 = C46793 * C47090;
    const double C23570 =
        (2 * (ae * (2 * C47057 + C46963 * C47099) + C46793 * C47119) +
         ae * (2 * C46963 * C47030 + C46963 * (C47030 + C47086 * C46994)) +
         C46793 *
             (C47119 +
              ae * (2 * C47105 + C46963 * (C47077 + C46793 * C46929 * C46994)) +
              C46793 *
                  (ae * (2 * C47106 + C46963 * (C46907 + C46929 * C46994)) +
                   C46793 * (2 * C47107 +
                             C46963 * (C46862 + std::pow(C46796, 8) * bs[8] *
                                                    C46804 * C46994))))) /
        C46745;
    const double C27962 =
        (ae * (4 * (2 * C47057 + C46963 * C47099) +
               C46963 * (3 * C47099 +
                         C46963 * (2 * C47106 +
                                   C46963 * (C46907 + C46929 * C46994)))) +
         C46793 * (4 * C47119 +
                   C46963 * (3 * C47100 +
                             C46963 * (2 * C47107 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46994))))) /
        C46745;
    const double C44132 =
        (5 * (3 * C47052 + C46963 * C47119) +
         C46963 * (4 * C47119 +
                   C46963 * (3 * C47100 +
                             C46963 * (2 * C47107 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46994))))) /
        C46745;
    const double C47114 = C47111 + C47113;
    const double C46943 = C46941 + C46934;
    const double C47047 = C46793 * C47044;
    const double C5862 =
        (2 * (ae * (C46898 + C46914 * C46994) + C46793 * C47055) +
         ae * (C46985 + C47044 * C46994) +
         C46793 * (C47055 + ae * (C47037 + C46793 * C46936 * C46994) +
                   C46793 * (ae * (C46914 + C46936 * C46994) +
                             C46793 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46994)))) /
        C46745;
    const double C7248 =
        (2 * C46963 * C46985 + C46963 * (C46985 + C47044 * C46994)) / C46743;
    const double C47093 = C46793 * C47091;
    const double C22538 =
        (3 * (C47052 + ae * (C47023 + C47077 * C46994) + C46793 * C47103) +
         ae * (C47035 + C47091 * C46994) +
         C46793 * (2 * C47103 + ae * (C47030 + C47086 * C46994) +
                   C46793 * (C47100 + ae * (C47077 + C46793 * C46929 * C46994) +
                             C46793 * (ae * (C46907 + C46929 * C46994) +
                                       C46793 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46994))))) /
        C46745;
    const double C23568 =
        (2 * C46963 * C47035 + C46963 * (C47035 + C47091 * C46994)) / C46743;
    const double C10646 = C4580 * C438;
    const double C31848 = C15894 * C438;
    const double C43042 = C21569 * C438;
    const double C10944 = C4580 * C440;
    const double C32146 = C15894 * C440;
    const double C22923 = C47484 * C6383;
    const double C22421 = C47484 * C5679;
    const double C22555 = C47484 * C5857;
    const double C22925 = C47484 * C6379;
    const double C1292 =
        (2 * (C46793 * C46847 + C47142 * ae) +
         C46793 * (C46847 + C46793 * (C46793 * C46871 + C46942) +
                   C46793 * C46940 * ae) +
         (C47142 + C46940 * C46975) * ae) /
        C46743;
    const double C1442 =
        (C46963 * (C46847 + C46793 * (C46793 * C46871 + C46942) +
                   C46793 * C46940 * ae)) /
        C46743;
    const double C2016 =
        (C46793 * C46847 + C47142 * ae + (C46793 * C46871 + C46942) * C46994) /
        C46743;
    const double C47146 = C47144 + C47145;
    const double C5678 = 4 * (2 * C47219 + C46793 * C47222) +
                         C46793 * (3 * C47222 + C46793 * C47305);
    const double C5856 = 2 * C47219 + C46793 * C47222 + C47305 * C46994;
    const double C6378 = C46963 * (3 * C47222 + C46793 * C47305);
    const double C47354 = C47342 + C47352;
    const double C47790 = C47516 * C47504;
    const double C47830 = C47795 + C47516;
    const double C47798 = C47525 / C47506;
    const double C47794 = C47525 * C47504;
    const double C554 = C47874 - (C47516 * C47507) / C47502;
    const double C47808 = C47598 * C47592;
    const double C47845 = C47810 + C47598;
    const double C47812 = C47605 / C47506;
    const double C47809 = C47605 * C47592;
    const double C1284 = C47878 - (C47598 * C47594) / C47502;
    const double C47814 = C47640 * C47634;
    const double C47851 = C47816 + C47640;
    const double C47818 = C47647 / C47506;
    const double C47815 = C47647 * C47634;
    const double C2116 = C47880 - (C47640 * C47636) / C47502;
    const double C42835 = C42817 + C42818;
    const double C44134 = C42819 + C42820;
    const double C26250 = C26236 * C15895;
    const double C37392 = C26236 * C4581;
    const double C42827 = C26236 * C116;
    const double C26248 = C26234 * C15895;
    const double C37388 = C26234 * C4581;
    const double C42823 = C26234 * C116;
    const double C26206 = C22230 * C15896;
    const double C26730 = C22230 * C15895;
    const double C37386 = C22230 * C4582;
    const double C37862 = C22230 * C4581;
    const double C43198 = C22230 * C116;
    const double C26196 = C22557 * C47855;
    const double C27113 = C22557 * C15891;
    const double C37380 = C22557 * C47855;
    const double C38245 = C22557 * C4577;
    const double C43197 = C22557 * C47745;
    const double C26729 = C22226 * C47855;
    const double C27117 = C22226 * C15891;
    const double C37861 = C22226 * C47855;
    const double C38249 = C22226 * C4577;
    const double C43492 = C22226 * C47745;
    const double C27122 = C22559 * C15891;
    const double C27115 = C22559 * C47855;
    const double C38254 = C22559 * C4577;
    const double C38247 = C22559 * C47855;
    const double C43494 = C22559 * C47745;
    const double C27969 = C23582 * C47855;
    const double C28466 = C23582 * C15891;
    const double C39095 = C23582 * C47855;
    const double C39564 = C23582 * C4577;
    const double C43489 = C23582 * C47745;
    const double C12374 = C12362 + C12363;
    const double C33568 = C33556 + C33557;
    const double C44398 = C44394 + C44395;
    const double C10649 = C4575 * C449;
    const double C10637 = C47824 * C449;
    const double C26225 = C47484 * C449;
    const double C31851 = C15889 * C449;
    const double C31839 = C47824 * C449;
    const double C10645 = C47824 * C450;
    const double C10943 = C4575 * C450;
    const double C26525 = C47484 * C450;
    const double C31847 = C47824 * C450;
    const double C32145 = C15889 * C450;
    const double C5891 = C5870 + C5871;
    const double C6983 = C6976 + C6977;
    const double C17189 = C17168 + C17169;
    const double C18265 = C18258 + C18259;
    const double C23370 = C23364 + C23365;
    const double C7262 = C7254 + C7255;
    const double C18536 = C18528 + C18529;
    const double C28192 = C28184 + C28185;
    const double C5681 =
        (4 * (2 * C47215 + C46793 * C47293 + C47216 * ae) +
         C46793 *
             (3 * C47293 +
              C46793 * (2 * C47285 +
                        C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                                  C46793 * C46906 * ae) +
                        C47287 * ae) +
              C47292 * ae) +
         (3 * C47216 + C46793 * C47292) * ae) /
        C46743;
    const double C5859 =
        (2 * C47215 + C46793 * C47293 + C47216 * ae +
         (2 * C47285 +
          C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                    C46793 * C46906 * ae) +
          C47287 * ae) *
             C46994) /
        C46743;
    const double C6381 =
        (C46963 *
         (3 * C47293 +
          C46793 * (2 * C47285 +
                    C46793 * (C46823 + C46793 * (C46793 * C46839 + C46908) +
                              C46793 * C46906 * ae) +
                    C47287 * ae) +
          C47292 * ae)) /
        C46743;
    const double C7249 =
        (2 * C46963 * C47293 +
         C46963 * (C47293 + (C46823 + C46793 * (C46793 * C46839 + C46908) +
                             C46793 * C46906 * ae) *
                                C46994)) /
        C46743;
    const double C27986 = C27980 * C47855;
    const double C39096 = C27980 * C47855;
    const double C44501 = C27980 * C47745;
    const double C44144 = C44142 * C47745;
    const double C26251 = C26237 * C15891;
    const double C37393 = C26237 * C4577;
    const double C42828 = C26237 * C47745;
    const double C26249 = C26235 * C15891;
    const double C37389 = C26235 * C4577;
    const double C42824 = C26235 * C47745;
    const double C26207 = C22231 * C47855;
    const double C26731 = C22231 * C15891;
    const double C37387 = C22231 * C47855;
    const double C37863 = C22231 * C4577;
    const double C43199 = C22231 * C47745;
    const double C28332 = C28330 * C15891;
    const double C39430 = C28330 * C4577;
    const double C42826 = C28330 * C47745;
    const double C44141 = C44135 + C44136;
    const double C296 =
        (C46812 + ae * C46815 + C46794 * C46826 + ae * C46793 * C46901 +
         C46793 * (ae * C46901 + C46793 * C46846)) /
        C46745;
    const double C297 =
        (ae * (2 * C46889 + C46794 * C46901 + (C46878 + C46892 * C46819) * ae) +
         C46793 * (2 * C46826 + ae * C46827 + C46794 * C46846)) /
        C46745;
    const double C829 =
        (ae * C46963 * C46901 + C46793 * C46963 * C46846) / C46745;
    const double C132 = (3 * (C46883 + C46794 * C46889 + C47134 * ae) +
                         C46794 * (2 * C46889 + C46794 * C46901 + C47136 * ae) +
                         (2 * C47134 + C46794 * C47136) * ae) /
                        C46743;
    const double C279 =
        (C46883 + C46794 * C46889 + C47134 * ae + C46901 * C46975) / C46743;
    const double C283 =
        (C46793 * (2 * C46889 + C46794 * C46901 + C47136 * ae)) / C46743;
    const double C432 =
        (C46883 + C46794 * C46889 + C47134 * ae + C46901 * C46994) / C46743;
    const double C436 =
        (C46963 * (2 * C46889 + C46794 * C46901 + C47136 * ae)) / C46743;
    const double C819 = (C46963 * C46793 * C46901) / C46743;
    const double C5895 = C5878 + C5879;
    const double C6245 = C6238 + C6239;
    const double C17193 = C17176 + C17177;
    const double C17543 = C17536 + C17537;
    const double C22233 = C22216 + C22217;
    const double C5896 = C5880 + C5881;
    const double C17194 = C17178 + C17179;
    const double C23368 = C23360 + C23361;
    const double C5889 = C5866 + C5867;
    const double C6985 = C6980 + C6981;
    const double C17187 = C17164 + C17165;
    const double C18267 = C18262 + C18263;
    const double C23371 = C23366 + C23367;
    const double C26732 = C22232 * C15896;
    const double C27448 = C22232 * C15895;
    const double C37864 = C22232 * C4582;
    const double C38580 = C22232 * C4581;
    const double C43742 = C22232 * C116;
    const double C28333 = C28331 * C15895;
    const double C39431 = C28331 * C4581;
    const double C42825 = C28331 * C116;
    const double C27119 = C22561 * C47855;
    const double C27583 = C22561 * C15891;
    const double C38251 = C22561 * C47855;
    const double C38715 = C22561 * C4577;
    const double C43845 = C22561 * C47745;
    const double C27123 = C22558 * C15895;
    const double C27114 = C22558 * C15896;
    const double C38255 = C22558 * C4581;
    const double C38246 = C22558 * C4582;
    const double C43493 = C22558 * C116;
    const double C27118 = C22560 * C15896;
    const double C27582 = C22560 * C15895;
    const double C38250 = C22560 * C4582;
    const double C38714 = C22560 * C4581;
    const double C43844 = C22560 * C116;
    const double C22419 = C47484 * C5683;
    const double C44145 = C44143 * C116;
    const double C6974 = C4580 * C1159;
    const double C18256 = C15894 * C1159;
    const double C26220 = C21569 * C1159;
    const double C6236 = C4580 * C1165;
    const double C17534 = C15894 * C1165;
    const double C22218 = C21569 * C1165;
    const double C4770 = C4580 * C285;
    const double C16084 = C15894 * C285;
    const double C21952 = C21569 * C285;
    const double C5084 = C4580 * C287;
    const double C16398 = C15894 * C287;
    const double C5430 = C4580 * C823;
    const double C16744 = C15894 * C823;
    const double C26388 = C21569 * C823;
    const double C4774 = C4580 * C268;
    const double C16088 = C15894 * C268;
    const double C21950 = C21569 * C268;
    const double C5080 = C4580 * C269;
    const double C16394 = C15894 * C269;
    const double C10650 = C4580 * C421;
    const double C31852 = C15894 * C421;
    const double C43040 = C21569 * C421;
    const double C10940 = C4580 * C422;
    const double C32142 = C15894 * C422;
    const double C5434 = C4580 * C815;
    const double C16748 = C15894 * C815;
    const double C26386 = C21569 * C815;
    const double C47306 = C47304 + C47299;
    const double C46919 = C46794 * C46918;
    const double C46924 = 3 * C46918;
    const double C46988 = ae * C46918;
    const double C46987 = C46793 * C46918;
    const double C1034 = (2 * (ae * C46901 + C46793 * C46846) +
                          ae * (C46901 + C46918 * std::pow(C46793, 2)) +
                          C46793 * (C46846 + ae * C46793 * C46918 +
                                    C46793 * (ae * C46918 + C46793 * C46870))) /
                         C46745;
    const double C1177 = (ae * (C46901 + C46918 * C46994) +
                          C46793 * (C46846 + C46870 * C46994)) /
                         C46745;
    const double C1025 =
        (2 * C46793 * C46901 + C46793 * (C46901 + C46918 * C46975)) / C46743;
    const double C1168 = (C46963 * (C46901 + C46918 * C46975)) / C46743;
    const double C1853 =
        (2 * C46963 * C46901 + C46963 * (C46901 + C46918 * C46994)) / C46743;
    const double C5695 = C47824 * C1038;
    const double C17001 = C47824 * C1038;
    const double C22663 = C47484 * C1038;
    const double C6387 = C47824 * C1552;
    const double C17677 = C47824 * C1552;
    const double C22815 = C47484 * C1552;
    const double C5699 = C47824 * C1029;
    const double C17005 = C47824 * C1029;
    const double C22665 = C47484 * C1029;
    const double C5885 = C47824 * C1172;
    const double C17183 = C47824 * C1172;
    const double C23363 = C47484 * C1172;
    const double C6391 = C47824 * C1546;
    const double C17681 = C47824 * C1546;
    const double C22817 = C47484 * C1546;
    const double C7264 = C7258 + C7259;
    const double C18538 = C18532 + C18533;
    const double C28193 = C28186 + C28187;
    const double C44401 = C44399 * C116;
    const double C47353 = C46793 * C47351;
    const double C23211 =
        (3 * (C47293 + C47351 * C46994) +
         C46963 *
             (2 * C46963 * C47351 +
              C46963 * (C47351 + (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) *
                                     C46994))) /
        C46743;
    const double C22420 = C21569 * C5677;
    const double C22554 = C21569 * C5855;
    const double C22924 = C21569 * C6377;
    const double C28465 = C23581 * C15896;
    const double C39563 = C23581 * C4582;
    const double C43496 = C23581 * C116;
    const double C46875 = C46855 + C46873;
    const double C46874 = C46856 + C46872;
    const double C1867 =
        (3 * (C46846 + C46870 * C46994) +
         C46963 * (2 * C47010 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46994))) /
        C46745;
    const double C12703 = C47824 * C1862;
    const double C33897 = C47824 * C1862;
    const double C42832 = C47484 * C1862;
    const double C47048 = C47045 + C47046;
    const double C47094 = C47082 + C47092;
    const double C46944 = C46794 * C46943;
    const double C46990 = C46943 * C46975;
    const double C2233 =
        (ae * (2 * C46963 * C46918 + C46963 * (C46918 + C46943 * C46994)) +
         C46793 * (2 * C47010 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46994))) /
        C46745;
    const double C1858 =
        (3 * (C46901 + C46918 * C46994) +
         C46963 * (2 * C46963 * C46918 + C46963 * (C46918 + C46943 * C46994))) /
        C46743;
    const double C47049 = C47043 + C47047;
    const double C47095 = C47080 + C47093;
    const double C123 = 5 * (3 * C47136 + C46794 * C47142) +
                        C46794 * (4 * C47142 + C46794 * C47146);
    const double C270 = 3 * C47136 + C46794 * C47142 + C47146 * C46975;
    const double C423 = 3 * C47136 + C46794 * C47142 + C47146 * C46994;
    const double C558 = C46793 * (4 * C47142 + C46794 * C47146);
    const double C662 = C46963 * (4 * C47142 + C46794 * C47146);
    const double C816 = C46963 * C46793 * C47146;
    const double C22409 = 5 * (3 * C47216 + C46793 * C47292) +
                          C46793 * (4 * C47292 + C46793 * C47354);
    const double C22535 = 3 * C47216 + C46793 * C47292 + C47354 * C46994;
    const double C22917 = C46963 * (4 * C47292 + C46793 * C47354);
    const double C47826 = C47790 / C47502;
    const double C47861 = C47830 / C47506;
    const double C47862 = C47832 + C47798;
    const double C556 = C47798 - C47523 / C47520;
    const double C47829 = C47794 / C47502;
    const double C47842 = C47808 / C47502;
    const double C47868 = C47845 / C47506;
    const double C47869 = C47846 + C47812;
    const double C1286 = C47812 - C47603 / C47520;
    const double C47844 = C47809 / C47502;
    const double C47848 = C47814 / C47502;
    const double C47871 = C47851 / C47506;
    const double C47872 = C47852 + C47818;
    const double C2118 = C47818 - C47645 / C47520;
    const double C47850 = C47815 / C47502;
    const double C43490 = C43197 + C43196;
    const double C44500 = C43488 + C43489;
    const double C44400 = C44398 * C47745;
    const double C10675 = C10648 + C10649;
    const double C10669 = C10636 + C10637;
    const double C26240 = C26224 + C26225;
    const double C31877 = C31850 + C31851;
    const double C31871 = C31838 + C31839;
    const double C10673 = C10644 + C10645;
    const double C10948 = C10942 + C10943;
    const double C26529 = C26524 + C26525;
    const double C31875 = C31846 + C31847;
    const double C32150 = C32144 + C32145;
    const double C26213 = C23370 * C47855;
    const double C28190 = C23370 * C15891;
    const double C37391 = C23370 * C47855;
    const double C39296 = C23370 * C4577;
    const double C43201 = C23370 * C47745;
    const double C28324 = C28192 * C47855;
    const double C39428 = C28192 * C47855;
    const double C44293 = C28192 * C47745;
    const double C22418 = C21569 * C5681;
    const double C22552 = C21569 * C5859;
    const double C22922 = C21569 * C6381;
    const double C23572 = C21569 * C7249;
    const double C42836 = C42824 + C42823;
    const double C4773 = C4575 * C296;
    const double C4761 = C47824 * C296;
    const double C16087 = C15889 * C296;
    const double C16075 = C47824 * C296;
    const double C21715 = C47484 * C296;
    const double C4769 = C47824 * C297;
    const double C5083 = C4575 * C297;
    const double C16083 = C47824 * C297;
    const double C16397 = C15889 * C297;
    const double C21949 = C47484 * C297;
    const double C5433 = C4575 * C829;
    const double C5429 = C47824 * C829;
    const double C16747 = C15889 * C829;
    const double C16743 = C47824 * C829;
    const double C22223 = C47484 * C829;
    const double C4777 = C4575 * C279;
    const double C4757 = C47824 * C279;
    const double C16091 = C15889 * C279;
    const double C16071 = C47824 * C279;
    const double C21713 = C47484 * C279;
    const double C4765 = C47824 * C283;
    const double C5079 = C4575 * C283;
    const double C16079 = C47824 * C283;
    const double C16393 = C15889 * C283;
    const double C21947 = C47484 * C283;
    const double C10653 = C4575 * C432;
    const double C10633 = C47824 * C432;
    const double C26227 = C47484 * C432;
    const double C31855 = C15889 * C432;
    const double C31835 = C47824 * C432;
    const double C10641 = C47824 * C436;
    const double C10939 = C4575 * C436;
    const double C26523 = C47484 * C436;
    const double C31843 = C47824 * C436;
    const double C32141 = C15889 * C436;
    const double C5437 = C4575 * C819;
    const double C5425 = C47824 * C819;
    const double C16751 = C15889 * C819;
    const double C16739 = C47824 * C819;
    const double C22225 = C47484 * C819;
    const double C26733 = C22233 * C47855;
    const double C27449 = C22233 * C15891;
    const double C37865 = C22233 * C47855;
    const double C38581 = C22233 * C4577;
    const double C43743 = C22233 * C47745;
    const double C28188 = C23368 * C47855;
    const double C39294 = C23368 * C47855;
    const double C43745 = C23368 * C47745;
    const double C26212 = C23371 * C15896;
    const double C28191 = C23371 * C15895;
    const double C37390 = C23371 * C4582;
    const double C39297 = C23371 * C4581;
    const double C43200 = C23371 * C116;
    const double C44393 = C42825 + C42826;
    const double C43497 = C43493 + C43494;
    const double C5682 =
        (4 * (2 * C47221 + C46793 * C47306 + C47222 * ae) +
         C46793 *
             (3 * C47306 +
              C46793 * (2 * C47298 +
                        C46793 * (C46851 +
                                  C46793 * (C46793 * C46794 * C46863 + C46934) +
                                  C46793 * C46931 * ae) +
                        C47300 * ae) +
              C47305 * ae) +
         (3 * C47222 + C46793 * C47305) * ae) /
        C46743;
    const double C5860 =
        (2 * C47221 + C46793 * C47306 + C47222 * ae +
         (2 * C47298 +
          C46793 * (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                    C46793 * C46931 * ae) +
          C47300 * ae) *
             C46994) /
        C46743;
    const double C6382 =
        (C46963 *
         (3 * C47306 +
          C46793 *
              (2 * C47298 +
               C46793 * (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                         C46793 * C46931 * ae) +
               C47300 * ae) +
          C47305 * ae)) /
        C46743;
    const double C7250 =
        (2 * C46963 * C47306 +
         C46963 *
             (C47306 + (C46851 + C46793 * (C46793 * C46794 * C46863 + C46934) +
                        C46793 * C46931 * ae) *
                           C46994)) /
        C46743;
    const double C46920 = C46904 + C46919;
    const double C46991 = C46988 + C46989;
    const double C1180 =
        (C46963 * C46846 + ae * C46963 * C46987 +
         C46793 * (ae * C46963 * C46918 + C46793 * C46963 * C46870)) /
        C46745;
    const double C1185 =
        (C46846 + C46870 * C46994 + ae * (C46987 + C46793 * C46943 * C46994) +
         C46793 * (ae * (C46918 + C46943 * C46994) +
                   C46793 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46994))) /
        C46745;
    const double C1162 = (C46793 * C46901 + C46987 * C46994) / C46743;
    const double C2227 =
        (2 * C46963 * C46987 + C46963 * (C46987 + C46793 * C46943 * C46994)) /
        C46743;
    const double C6031 = C47824 * C1034;
    const double C17329 = C47824 * C1034;
    const double C21717 = C47484 * C1034;
    const double C6975 = C47824 * C1177;
    const double C18257 = C47824 * C1177;
    const double C26221 = C47484 * C1177;
    const double C6035 = C47824 * C1025;
    const double C17333 = C47824 * C1025;
    const double C21719 = C47484 * C1025;
    const double C6241 = C47824 * C1168;
    const double C17539 = C47824 * C1168;
    const double C22221 = C47484 * C1168;
    const double C12707 = C47824 * C1853;
    const double C33901 = C47824 * C1853;
    const double C42834 = C47484 * C1853;
    const double C5706 = C5694 + C5695;
    const double C17012 = C17000 + C17001;
    const double C22666 = C22662 + C22663;
    const double C6394 = C6386 + C6387;
    const double C17684 = C17676 + C17677;
    const double C22818 = C22814 + C22815;
    const double C5708 = C5698 + C5699;
    const double C17014 = C17004 + C17005;
    const double C22667 = C22664 + C22665;
    const double C5898 = C5884 + C5885;
    const double C17196 = C17182 + C17183;
    const double C23369 = C23362 + C23363;
    const double C6396 = C6390 + C6391;
    const double C17686 = C17680 + C17681;
    const double C22819 = C22816 + C22817;
    const double C28325 = C28193 * C15896;
    const double C39429 = C28193 * C4582;
    const double C44294 = C28193 * C116;
    const double C47355 = C47337 + C47353;
    const double C22425 = C22420 + C22421;
    const double C22563 = C22554 + C22555;
    const double C22927 = C22924 + C22925;
    const double C137 = (5 * (3 * C46827 + C46794 * C46847) +
                         C46794 * (4 * C46847 + C46794 * C46875)) /
                        C46743;
    const double C290 =
        (3 * C46827 + C46794 * C46847 +
         C46793 * (C46793 * C46875 + C47146 * ae) + C46793 * C47146 * ae) /
        C46743;
    const double C443 =
        (3 * C46827 + C46794 * C46847 + C46875 * C46994) / C46743;
    const double C560 = (C46793 * (4 * C46847 + C46794 * C46875) +
                         (4 * C47142 + C46794 * C47146) * ae) /
                        C46743;
    const double C664 = (C46963 * (4 * C46847 + C46794 * C46875)) / C46743;
    const double C826 = (C46963 * (C46793 * C46875 + C47146 * ae)) / C46743;
    const double C144 =
        (5 * (3 * C46846 + ae * C46847 + C46794 * C46874) +
         ae * (4 * C46847 + C46794 * C46875) +
         C46794 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C451 = (2 * C46826 + ae * C46827 + C46794 * C46846 +
                         C46874 * std::pow(zP - zQ, 2)) /
                        C46745;
    const double C452 =
        ((zP - zQ) * (3 * C46846 + ae * C46847 + C46794 * C46874)) / C46745;
    const double C453 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 +
         (3 * C46870 + ae * C46871 +
          C46794 *
              (2 * C46866 + ae * C46867 +
               C46794 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             std::pow(zP - zQ, 2)) /
        C46745;
    const double C665 =
        ((zP - zQ) *
         (4 * C46874 + ae * C46875 +
          C46794 * (3 * C46870 + ae * C46871 +
                    C46794 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46745;
    const double C2123 =
        (2 * C46963 * C46874 +
         C46963 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46994)) /
        C46745;
    const double C12710 = C12702 + C12703;
    const double C33904 = C33896 + C33897;
    const double C42838 = C42831 + C42832;
    const double C46945 = C46925 + C46944;
    const double C46992 = C46918 + C46990;
    const double C5684 =
        (4 * (2 * C46984 + ae * C46985 + C46793 * C47048) +
         ae * (3 * C46985 + C46793 * C47049) +
         C46793 *
             (3 * C47048 + ae * C47049 +
              C46793 *
                  (2 * C47042 + ae * C47044 +
                   C46793 * (C46866 + ae * C46793 * C46936 +
                             C46793 * (ae * C46936 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C6384 =
        (3 * (C47008 + ae * C46963 * C47037 + C46793 * C47067) +
         ae * C46963 * C47049 +
         C46793 * (2 * C47067 + ae * C46963 * C47044 +
                   C46793 * (C47064 + ae * C46963 * C46793 * C46936 +
                             C46793 * (ae * C46963 * C46936 +
                                       C46793 * C46963 *
                                           (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C5680 = (4 * (2 * C46980 + C46793 * C46985) +
                          C46793 * (3 * C46985 + C46793 * C47049)) /
                         C46743;
    const double C5858 =
        (2 * C46980 + C46793 * C46985 + C47049 * C46994) / C46743;
    const double C6380 = (C46963 * (3 * C46985 + C46793 * C47049)) / C46743;
    const double C22412 =
        (5 * (3 * C47034 + ae * C47035 + C46793 * C47094) +
         ae * (4 * C47035 + C46793 * C47095) +
         C46793 *
             (4 * C47094 + ae * C47095 +
              C46793 *
                  (3 * C47090 + ae * C47091 +
                   C46793 * (2 * C47084 + ae * C47086 +
                             C46793 * (C46862 + ae * C46793 * C46929 +
                                       C46793 * (ae * C46929 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C22920 =
        (4 * (2 * C47061 + ae * C46963 * C47030 + C46793 * C47114) +
         ae * C46963 * C47095 +
         C46793 * (3 * C47114 + ae * C46963 * C47091 +
                   C46793 * (2 * C47112 + ae * C46963 * C47086 +
                             C46793 * (C47107 + ae * C46963 * C46793 * C46929 +
                                       C46793 * (ae * C46963 * C46929 +
                                                 C46793 * C46963 *
                                                     std::pow(C46796, 8) *
                                                     bs[8] * C46804))))) /
        C46745;
    const double C22410 = (5 * (3 * C46978 + C46793 * C47035) +
                           C46793 * (4 * C47035 + C46793 * C47095)) /
                          C46743;
    const double C22536 =
        (3 * C46978 + C46793 * C47035 + C47095 * C46994) / C46743;
    const double C22918 = (C46963 * (4 * C47035 + C46793 * C47095)) / C46743;
    const double C47882 = C47826 + C47874;
    const double C555 = C47861 - (C47525 * C47507) / C47502;
    const double C111 = C47862 / C47506 - C47523 / C47833;
    const double C47875 = C47829 + C47861;
    const double C47883 = C47842 + C47878;
    const double C1285 = C47868 - (C47605 * C47594) / C47502;
    const double C1013 = C47869 / C47506 - C47603 / C47833;
    const double C47879 = C47844 + C47868;
    const double C47884 = C47848 + C47880;
    const double C2117 = C47871 - (C47647 * C47636) / C47502;
    const double C1842 = C47872 / C47506 - C47645 / C47833;
    const double C47881 = C47850 + C47871;
    const double C26254 = C26240 * C15891;
    const double C37398 = C26240 * C4577;
    const double C42830 = C26240 * C47745;
    const double C26531 = C26529 * C15891;
    const double C37661 = C26529 * C4577;
    const double C43039 = C26529 * C47745;
    const double C22424 = C22418 + C22419;
    const double C22562 = C22552 + C22553;
    const double C22926 = C22922 + C22923;
    const double C23580 = C23572 + C23573;
    const double C4799 = C4772 + C4773;
    const double C4793 = C4760 + C4761;
    const double C16113 = C16086 + C16087;
    const double C16107 = C16074 + C16075;
    const double C21735 = C21714 + C21715;
    const double C4797 = C4768 + C4769;
    const double C5088 = C5082 + C5083;
    const double C16111 = C16082 + C16083;
    const double C16402 = C16396 + C16397;
    const double C21955 = C21948 + C21949;
    const double C5447 = C5432 + C5433;
    const double C5445 = C5428 + C5429;
    const double C16761 = C16746 + C16747;
    const double C16759 = C16742 + C16743;
    const double C22236 = C22222 + C22223;
    const double C4801 = C4776 + C4777;
    const double C4791 = C4756 + C4757;
    const double C16115 = C16090 + C16091;
    const double C16105 = C16070 + C16071;
    const double C21734 = C21712 + C21713;
    const double C4795 = C4764 + C4765;
    const double C5086 = C5078 + C5079;
    const double C16109 = C16078 + C16079;
    const double C16400 = C16392 + C16393;
    const double C21954 = C21946 + C21947;
    const double C10677 = C10652 + C10653;
    const double C10667 = C10632 + C10633;
    const double C26241 = C26226 + C26227;
    const double C31879 = C31854 + C31855;
    const double C31869 = C31834 + C31835;
    const double C10671 = C10640 + C10641;
    const double C10946 = C10938 + C10939;
    const double C26528 = C26522 + C26523;
    const double C31873 = C31842 + C31843;
    const double C32148 = C32140 + C32141;
    const double C5449 = C5436 + C5437;
    const double C5443 = C5424 + C5425;
    const double C16763 = C16750 + C16751;
    const double C16757 = C16738 + C16739;
    const double C22237 = C22224 + C22225;
    const double C44292 = C43200 + C43201;
    const double C46921 = C46920 + C46915;
    const double C6237 = C47824 * C1180;
    const double C17535 = C47824 * C1180;
    const double C22219 = C47484 * C1180;
    const double C6979 = C47824 * C1162;
    const double C18261 = C47824 * C1162;
    const double C26223 = C47484 * C1162;
    const double C6038 = C6030 + C6031;
    const double C17336 = C17328 + C17329;
    const double C21736 = C21716 + C21717;
    const double C6982 = C6974 + C6975;
    const double C18264 = C18256 + C18257;
    const double C26238 = C26220 + C26221;
    const double C6040 = C6034 + C6035;
    const double C17338 = C17332 + C17333;
    const double C21737 = C21718 + C21719;
    const double C6246 = C6240 + C6241;
    const double C17544 = C17538 + C17539;
    const double C22235 = C22220 + C22221;
    const double C12712 = C12706 + C12707;
    const double C33906 = C33900 + C33901;
    const double C42839 = C42833 + C42834;
    const double C27451 = C22818 * C47855;
    const double C38583 = C22818 * C47855;
    const double C28189 = C23369 * C15896;
    const double C39295 = C23369 * C4582;
    const double C43744 = C23369 * C116;
    const double C27450 = C22819 * C15896;
    const double C38582 = C22819 * C4582;
    const double C47356 = C47355 + C47340;
    const double C27121 = C22563 * C15896;
    const double C38253 = C22563 * C4582;
    const double C43846 = C22563 * C116;
    const double C27584 = C22927 * C15896;
    const double C38716 = C22927 * C4582;
    const double C10647 = C47824 * C451;
    const double C31849 = C47824 * C451;
    const double C43043 = C47484 * C451;
    const double C10945 = C47824 * C452;
    const double C32147 = C47824 * C452;
    const double C42840 = C42838 * C47745;
    const double C46946 = C46945 + C46937;
    const double C1039 =
        (3 * (C46846 + ae * C46987 + C46793 * C46991) +
         ae * (2 * C46987 + C46793 * C46992) +
         C46793 *
             (2 * C46991 + ae * C46992 +
              C46793 *
                  (C46870 + ae * C46793 * C46943 +
                   C46793 * (ae * C46943 +
                             C46793 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C1553 =
        (2 * (ae * C46963 * C46918 + C46793 * C47010) + ae * C46963 * C46992 +
         C46793 * (C47010 + ae * C46963 * C46793 * C46943 +
                   C46793 * (ae * C46963 * C46943 +
                             C46793 * C46963 *
                                 (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C1030 = (3 * (C46901 + C46918 * C46975) +
                          C46793 * (2 * C46987 + C46793 * C46992)) /
                         C46743;
    const double C1173 = (C46901 + C46918 * C46975 + C46992 * C46994) / C46743;
    const double C1547 = (C46963 * (2 * C46987 + C46793 * C46992)) / C46743;
    const double C108 =
        (C47873 + 2 * C47516) / C47506 - (C47882 * C47507) / C47502;
    const double C109 =
        (C47860 + 2 * C47525 + C47882) / C47506 - (C47875 * C47507) / C47502;
    const double C110 = (C47831 + C47522 / C47502 + C47875) / C47506 -
                        (C47862 * C47507) / C47502;
    const double C1010 =
        (C47876 + 2 * C47598) / C47506 - (C47883 * C47594) / C47502;
    const double C1011 =
        (C47864 + 2 * C47605 + C47883) / C47506 - (C47879 * C47594) / C47502;
    const double C1012 = (C47837 + C47602 / C47502 + C47879) / C47506 -
                         (C47869 * C47594) / C47502;
    const double C1839 =
        (C47877 + 2 * C47640) / C47506 - (C47884 * C47636) / C47502;
    const double C1840 =
        (C47866 + 2 * C47647 + C47884) / C47506 - (C47881 * C47636) / C47502;
    const double C1841 = (C47840 + C47644 / C47502 + C47881) / C47506 -
                         (C47872 * C47636) / C47502;
    const double C27120 = C22562 * C47855;
    const double C38252 = C22562 * C47855;
    const double C43847 = C22562 * C47745;
    const double C27585 = C22926 * C47855;
    const double C38717 = C22926 * C47855;
    const double C28464 = C23580 * C47855;
    const double C39562 = C23580 * C47855;
    const double C43495 = C23580 * C47745;
    const double C26219 = C22236 * C47855;
    const double C26735 = C22236 * C15891;
    const double C37395 = C22236 * C47855;
    const double C37867 = C22236 * C4577;
    const double C43203 = C22236 * C47745;
    const double C26255 = C26241 * C15895;
    const double C37399 = C26241 * C4581;
    const double C42829 = C26241 * C116;
    const double C26530 = C26528 * C15895;
    const double C37660 = C26528 * C4581;
    const double C43038 = C26528 * C116;
    const double C26218 = C22237 * C15896;
    const double C26734 = C22237 * C15895;
    const double C37394 = C22237 * C4582;
    const double C37866 = C22237 * C4581;
    const double C43202 = C22237 * C116;
    const double C298 =
        (2 * C46826 + ae * C46827 + C46794 * C46846 + ae * C46793 * C46921 +
         C46793 * (ae * C46921 + C46793 * C46874)) /
        C46745;
    const double C299 =
        (ae * (3 * C46901 + C46794 * C46921 +
               (2 * C46895 + C46794 * C46913) * ae) +
         C46793 * (3 * C46846 + ae * C46847 + C46794 * C46874)) /
        C46745;
    const double C830 =
        (ae * C46963 * C46921 + C46793 * C46963 * C46874) / C46745;
    const double C135 = (4 * (2 * C46889 + C46794 * C46901 + C47136 * ae) +
                         C46794 * (3 * C46901 + C46794 * C46921 + C47142 * ae) +
                         (3 * C47136 + C46794 * C47142) * ae) /
                        C46743;
    const double C286 =
        (2 * C46889 + C46794 * C46901 + C47136 * ae + C46921 * C46975) / C46743;
    const double C288 =
        (C46793 * (3 * C46901 + C46794 * C46921 + C47142 * ae)) / C46743;
    const double C439 =
        (2 * C46889 + C46794 * C46901 + C47136 * ae + C46921 * C46994) / C46743;
    const double C441 =
        (C46963 * (3 * C46901 + C46794 * C46921 + C47142 * ae)) / C46743;
    const double C824 = (C46963 * C46793 * C46921) / C46743;
    const double C6244 = C6236 + C6237;
    const double C17542 = C17534 + C17535;
    const double C22234 = C22218 + C22219;
    const double C6984 = C6978 + C6979;
    const double C18266 = C18260 + C18261;
    const double C26239 = C26222 + C26223;
    const double C26252 = C26238 * C47855;
    const double C37396 = C26238 * C47855;
    const double C43205 = C26238 * C47745;
    const double C26736 = C22235 * C15896;
    const double C37868 = C22235 * C4582;
    const double C42841 = C42839 * C116;
    const double C22411 =
        (5 * (3 * C47293 + C46793 * C47356 + C47292 * ae) +
         C46793 *
             (4 * C47356 +
              C46793 *
                  (3 * C47351 +
                   C46793 *
                       (2 * C47343 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) +
                        C47345 * ae) +
                   C47350 * ae) +
              C47354 * ae) +
         (4 * C47292 + C46793 * C47354) * ae) /
        C46743;
    const double C22537 =
        (3 * C47293 + C46793 * C47356 + C47292 * ae +
         (3 * C47351 +
          C46793 * (2 * C47343 +
                    C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                              C46793 * C46927 * ae) +
                    C47345 * ae) +
          C47350 * ae) *
             C46994) /
        C46743;
    const double C22919 =
        (C46963 *
         (4 * C47356 +
          C46793 * (3 * C47351 +
                    C46793 * (2 * C47343 +
                              C46793 * (C46839 +
                                        C46793 * (C46793 * C46863 + C46930) +
                                        C46793 * C46927 * ae) +
                              C47345 * ae) +
                    C47350 * ae) +
          C47354 * ae)) /
        C46743;
    const double C23569 =
        (2 * C46963 * C47356 +
         C46963 *
             (C47356 + (2 * C47343 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46930) +
                                  C46793 * C46927 * ae) +
                        C47345 * ae) *
                           C46994)) /
        C46743;
    const double C10674 = C10646 + C10647;
    const double C31876 = C31848 + C31849;
    const double C43045 = C43042 + C43043;
    const double C10949 = C10944 + C10945;
    const double C32151 = C32146 + C32147;
    const double C46947 = C46794 * C46946;
    const double C1293 =
        (2 * (ae * C46921 + C46793 * C46874) + ae * (C46921 + C46946 * C46975) +
         C46793 *
             (C46874 + ae * C46793 * C46946 +
              C46793 *
                  (ae * C46946 +
                   C46793 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C1443 =
        (C46963 * C46874 + ae * C46963 * C46793 * C46946 +
         C46793 * (ae * C46963 * C46946 +
                   C46793 * C46963 *
                       (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C2017 =
        (ae * (C46921 + C46946 * C46994) +
         C46793 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46994)) /
        C46745;
    const double C1291 =
        (2 * C46793 * C46921 + C46793 * (C46921 + C46946 * C46975)) / C46743;
    const double C1441 = (C46963 * (C46921 + C46946 * C46975)) / C46743;
    const double C2015 = (C46793 * C46921 + C46793 * C46946 * C46994) / C46743;
    const double C2121 =
        (2 * C46963 * C46921 + C46963 * (C46921 + C46946 * C46994)) / C46743;
    const double C42837 = C42829 + C42830;
    const double C4771 = C47824 * C298;
    const double C16085 = C47824 * C298;
    const double C21953 = C47484 * C298;
    const double C5085 = C47824 * C299;
    const double C16399 = C47824 * C299;
    const double C5431 = C47824 * C830;
    const double C16745 = C47824 * C830;
    const double C26389 = C47484 * C830;
    const double C4775 = C47824 * C286;
    const double C16089 = C47824 * C286;
    const double C21951 = C47484 * C286;
    const double C5081 = C47824 * C288;
    const double C16395 = C47824 * C288;
    const double C10651 = C47824 * C439;
    const double C31853 = C47824 * C439;
    const double C43041 = C47484 * C439;
    const double C10941 = C47824 * C441;
    const double C32143 = C47824 * C441;
    const double C5435 = C47824 * C824;
    const double C16749 = C47824 * C824;
    const double C26387 = C47484 * C824;
    const double C26737 = C22234 * C47855;
    const double C37869 = C22234 * C47855;
    const double C26253 = C26239 * C15896;
    const double C37397 = C26239 * C4582;
    const double C43204 = C26239 * C116;
    const double C43047 = C43045 * C47745;
    const double C46948 = C46924 + C46947;
    const double C4798 = C4770 + C4771;
    const double C16112 = C16084 + C16085;
    const double C21957 = C21952 + C21953;
    const double C5089 = C5084 + C5085;
    const double C16403 = C16398 + C16399;
    const double C5446 = C5430 + C5431;
    const double C16760 = C16744 + C16745;
    const double C26391 = C26388 + C26389;
    const double C4800 = C4774 + C4775;
    const double C16114 = C16088 + C16089;
    const double C21956 = C21950 + C21951;
    const double C5087 = C5080 + C5081;
    const double C16401 = C16394 + C16395;
    const double C10676 = C10650 + C10651;
    const double C31878 = C31852 + C31853;
    const double C43044 = C43040 + C43041;
    const double C10947 = C10940 + C10941;
    const double C32149 = C32142 + C32143;
    const double C5448 = C5434 + C5435;
    const double C16762 = C16748 + C16749;
    const double C26390 = C26386 + C26387;
    const double C46949 = C46948 + C46942;
    const double C26527 = C26391 * C47855;
    const double C37663 = C26391 * C47855;
    const double C43046 = C43044 * C116;
    const double C26526 = C26390 * C15896;
    const double C37662 = C26390 * C4582;
    const double C300 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 + ae * C46793 * C46949 +
         C46793 *
             (ae * C46949 +
              C46793 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C561 =
        (ae * (4 * C46921 + C46794 * C46949 +
               (3 * C46913 + C46794 * C46940) * ae) +
         C46793 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C831 =
        (ae * C46963 * C46949 +
         C46793 * C46963 *
             (3 * C46870 + ae * C46871 +
              C46794 * (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C136 = (5 * (3 * C46901 + C46794 * C46921 + C47142 * ae) +
                         C46794 * (4 * C46921 + C46794 * C46949 + C47146 * ae) +
                         (4 * C47142 + C46794 * C47146) * ae) /
                        C46743;
    const double C289 =
        (3 * C46901 + C46794 * C46921 + C47142 * ae + C46949 * C46975) / C46743;
    const double C442 =
        (3 * C46901 + C46794 * C46921 + C47142 * ae + C46949 * C46994) / C46743;
    const double C559 =
        (C46793 * (4 * C46921 + C46794 * C46949 + C47146 * ae)) / C46743;
    const double C663 =
        (C46963 * (4 * C46921 + C46794 * C46949 + C47146 * ae)) / C46743;
    const double C825 = (C46963 * C46793 * C46949) / C46743;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47598 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C47605 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C2700) *
                     C47516 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47745) *
                      C47760 * C47557 * C47605 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47598 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47745 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47760 * C47557 * C2700) *
                     C47525 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C47598 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47745 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47760 * C47557 * C47605 +
                  ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                    C115 * C270 + C103 * C289) *
                       C116 +
                   (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                    C115 * C290 + C103 * C300) *
                       C47745) *
                      C47760 * C47557 * C2700) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47598 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47806) *
                      C47605 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C47644) *
                      C2700) *
                     C2440 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47806) *
                      C47598 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47644) *
                      C47605 +
                  (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                     C115 * C1440 + C103 * C1441) *
                        C116 +
                    (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                     C115 * C1442 + C103 * C1443) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47806) *
                      C2700) *
                     C47522)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47883 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C47879 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C47869 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C47557 * C47847) *
                     C2440 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47745) *
                      C47760 * C47557 * C47879 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47883 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47745 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47760 * C47557 * C47869 +
                  ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                    C115 * C1290 + C103 * C1291) *
                       C116 +
                   (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                    C115 * C1292 + C103 * C1293) *
                       C47745) *
                      C47760 * C47557 * C47847) *
                     C47522)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C2332 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C47602) *
                     C47882 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47745) *
                      C47760 * C47557 * C47602 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C2332) *
                     C47875 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C2332 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47745 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47760 * C47557 * C47602) *
                     C47862 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C558 + C103 * C559) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C560 + C103 * C561) *
                       C47745) *
                      C47760 * C47557 * C47602 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47745 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47760 * C47557 * C2332) *
                     C47841)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47840) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47866 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47877 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47745 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47760 * C47840) *
                      C47602) *
                     C2440 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47866 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47877 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C47840) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C1151 + C101 * C1163 + C114 * C1150 + C102 * C1162 +
                     C115 * C2014 + C103 * C2015) *
                        C116 +
                    (C113 * C1160 + C101 * C1178 + C114 * C1159 + C102 * C1177 +
                     C115 * C2016 + C103 * C2017) *
                        C47745) *
                       C47760 * C47840) *
                      C47602) *
                     C47522)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47806) *
                      C47602) *
                     C47516 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47806) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47644) *
                      C47602) *
                     C47525 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47806) *
                      C47602) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C2332 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C47602) *
                     C47882 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47745) *
                      C47760 * C47557 * C47602 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C2332) *
                     C47875 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C2332 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47745 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47760 * C47557 * C47602) *
                     C47862 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C558 + C103 * C559) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C560 + C103 * C561) *
                       C47745) *
                      C47760 * C47557 * C47602 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47745 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47760 * C47557 * C2332) *
                     C47841)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47883 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C47879 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C47869 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C47557 * C47847) *
                     C2440 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47745) *
                      C47760 * C47557 * C47879 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47883 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47745 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47760 * C47557 * C47869 +
                  ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                    C115 * C1290 + C103 * C1291) *
                       C116 +
                   (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                    C115 * C1292 + C103 * C1293) *
                       C47745) *
                      C47760 * C47557 * C47847) *
                     C47522)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47598 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C3094) *
                      C47605 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C47644) *
                      C2700) *
                     C47791 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C3094) *
                      C47598 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47644) *
                      C47605 +
                  (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                     C115 * C1440 + C103 * C1441) *
                        C116 +
                    (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                     C115 * C1442 + C103 * C1443) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C3094) *
                      C2700) *
                     C47522)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47640 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47745 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47760 * C47647 +
                  ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                    C115 * C419 + C103 * C432) *
                       C116 +
                   (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                    C115 * C435 + C103 * C449) *
                       C47745) *
                      C47760 * C3602) *
                     C47598 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47745) *
                      C47760 * C47647 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47640 -
                  ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                    C113 * C1161 + C101 * C1179) *
                       C47745 +
                   (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                    C113 * C1152 + C101 * C1164) *
                       C116) *
                      C47760 * C3602) *
                     C47605 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47640 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47745 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47760 * C47647 +
                  ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                    C115 * C1158 + C103 * C1173) *
                       C116 +
                   (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                    C115 * C1176 + C103 * C1185) *
                       C47745) *
                      C47760 * C3602) *
                     C2700) *
                C47511) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C3094 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47745 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47760 * C47644) *
                     C47883 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47745) *
                      C47760 * C47644 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C3094) *
                     C47879 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C3094 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47745 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47760 * C47644) *
                     C47869 +
                 (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                    C115 * C1544 + C103 * C1547) *
                       C116 +
                   (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                    C115 * C1550 + C103 * C1553) *
                       C47745) *
                      C47760 * C47644 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C3094) *
                     C47847) *
                C47511) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C3094) *
                      C47602) *
                     C47873 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C3094) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47644) *
                      C47602) *
                     C47860 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C3094) *
                      C47602) *
                     C47831)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47884 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47745 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47760 * C47881 +
                  ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                    C115 * C419 + C103 * C432) *
                       C116 +
                   (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                    C115 * C435 + C103 * C449) *
                       C47745) *
                      C47760 * C47872 -
                  ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                    C113 * C1852 + C101 * C1864) *
                       C47745 +
                   (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                    C113 * C1846 + C101 * C1855) *
                       C116) *
                      C47760 * C47853) *
                     C2332 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47745) *
                      C47760 * C47881 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47884 -
                  ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                    C113 * C1161 + C101 * C1179) *
                       C47745 +
                   (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                    C113 * C1152 + C101 * C1164) *
                       C116) *
                      C47760 * C47872 +
                  ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
                    C115 * C2224 + C103 * C2227) *
                       C116 +
                   (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
                    C115 * C2230 + C103 * C2233) *
                       C47745) *
                      C47760 * C47853) *
                     C47602) *
                C47511) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47640 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47647 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C3602) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47647 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47640 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47745 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47760 * C3602) *
                      C47602) *
                     C47791 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47647 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47640 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C3602) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47640 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47647 +
                   ((C113 * C1151 + C101 * C1163 + C114 * C1150 + C102 * C1162 +
                     C115 * C2014 + C103 * C2015) *
                        C116 +
                    (C113 * C1160 + C101 * C1178 + C114 * C1159 + C102 * C1177 +
                     C115 * C2016 + C103 * C2017) *
                        C47745) *
                       C47760 * C3602) *
                      C47602) *
                     C47522)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C3094) *
                      C47602) *
                     C47873 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C3094) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47745 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47760 * C47644) *
                      C47602) *
                     C47860 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C3094) *
                      C47602) *
                     C47831)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C3094 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47745 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47760 * C47644) *
                     C47883 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47745) *
                      C47760 * C47644 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C3094) *
                     C47879 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C3094 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47745 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47760 * C47644) *
                     C47869 +
                 (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                    C115 * C1544 + C103 * C1547) *
                       C116 +
                   (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                    C115 * C1550 + C103 * C1553) *
                       C47745) *
                      C47760 * C47644 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C3094) *
                     C47847) *
                C47511) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C1284 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C1285 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C1286 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47745 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47760 * C47557 * C47847) *
                      C47791 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C1285 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C1284 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C1286 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C47745) *
                       C47760 * C47557 * C47847) *
                      C47522)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C47805 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C47602) *
                      C554 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C47602 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C47805) *
                      C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C47805 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C47602) *
                      C556 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C47745) *
                       C47760 * C47557 * C47602 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C47557 * C47805) *
                      C47841)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C47745) *
                        C47760 * C47840) *
                       C47805 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C1665 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C1664 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C47745 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C47760 * C47840) *
                       C47602) *
                      C47791 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C1665 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C1664 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C47745 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C47760 * C47840) *
                       C47805 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C1664 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C1665 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C47745) *
                        C47760 * C47840) *
                       C47602) *
                      C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C1284 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47806) *
                      C1285 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C47644) *
                      C1286 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47745 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47760 * C47806) *
                      C47847) *
                 C47511) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C47806) *
                       C47602) *
                      C258 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C47806) *
                       C47805 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C47602) *
                      C259 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47745 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47745 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47760 * C47806) *
                       C47602) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C2116 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C2117 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C2118 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47745 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47760 * C47853) *
                      C47805 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C2117 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C2116 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47745 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47760 * C2118 +
                   ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
                     C115 * C2224 + C103 * C2227) *
                        C116 +
                    (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
                     C115 * C2230 + C103 * C2233) *
                        C47745) *
                       C47760 * C47853) *
                      C47602) *
                 C47511) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C47745) *
                  C47760 * C47557 * C47539 * C108 -
              ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                C113 * C128 + C101 * C139) *
                   C47745 +
               (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                C113 * C118 + C101 * C125) *
                   C116) *
                  C47760 * C47557 * C47539 * C109 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C116 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C47745) *
                  C47760 * C47557 * C47539 * C110 -
              ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C130 + C101 * C141) *
                   C47745 +
               (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                C113 * C120 + C101 * C131) *
                   C116) *
                  C47760 * C47557 * C47539 * C111 +
              ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                C115 * C123 + C103 * C136) *
                   C116 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C137 + C103 * C144) *
                   C47745) *
                  C47760 * C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C47745) *
                   C47760 * C47557 * C47876 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C47745 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C47760 * C47557 * C47864 +
               ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C47745) *
                   C47760 * C47557 * C47837) *
                  C258 +
              (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                 C115 * C267 + C103 * C283) *
                    C116 +
                (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                 C115 * C284 + C103 * C297) *
                    C47745) *
                   C47760 * C47557 * C47864 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C47745 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C47760 * C47557 * C47876 -
               ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                 C113 * C281 + C101 * C295) *
                    C47745 +
                (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                 C113 * C265 + C101 * C278) *
                    C116) *
                   C47760 * C47557 * C47837) *
                  C259 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C47745) *
                   C47760 * C47557 * C47876 -
               ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                 C113 * C271 + C101 * C291) *
                    C47745 +
                (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                 C113 * C261 + C101 * C274) *
                    C116) *
                   C47760 * C47557 * C47864 +
               ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                 C115 * C270 + C103 * C289) *
                    C116 +
                (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                 C115 * C290 + C103 * C300) *
                    C47745) *
                   C47760 * C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47745) *
                                   C47760 * C47877 -
                               ((C115 * C424 + C103 * C444 + C114 * C425 +
                                 C102 * C445 + C113 * C426 + C101 * C446) *
                                    C47745 +
                                (C115 * C414 + C103 * C427 + C114 * C415 +
                                 C102 * C428 + C113 * C416 + C101 * C429) *
                                    C116) *
                                   C47760 * C47866 +
                               ((C113 * C417 + C101 * C430 + C114 * C418 +
                                 C102 * C431 + C115 * C419 + C103 * C432) *
                                    C116 +
                                (C113 * C433 + C101 * C447 + C114 * C434 +
                                 C102 * C448 + C115 * C435 + C103 * C449) *
                                    C47745) *
                                   C47760 * C47840) *
                                  C47539 * C258 +
                              (((C113 * C415 + C101 * C428 + C114 * C414 +
                                 C102 * C427 + C115 * C420 + C103 * C436) *
                                    C116 +
                                (C113 * C425 + C101 * C445 + C114 * C424 +
                                 C102 * C444 + C115 * C437 + C103 * C450) *
                                    C47745) *
                                   C47760 * C47866 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47745 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C47760 * C47877 -
                               ((C115 * C438 + C103 * C451 + C114 * C435 +
                                 C102 * C449 + C113 * C434 + C101 * C448) *
                                    C47745 +
                                (C115 * C421 + C103 * C439 + C114 * C419 +
                                 C102 * C432 + C113 * C418 + C101 * C431) *
                                    C116) *
                                   C47760 * C47840) *
                                  C47539 * C259 +
                              (((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47745) *
                                   C47760 * C47877 -
                               ((C115 * C440 + C103 * C452 + C114 * C437 +
                                 C102 * C450 + C113 * C424 + C101 * C444) *
                                    C47745 +
                                (C115 * C422 + C103 * C441 + C114 * C420 +
                                 C102 * C436 + C113 * C414 + C101 * C427) *
                                    C116) *
                                   C47760 * C47866 +
                               ((C113 * C419 + C101 * C432 + C114 * C421 +
                                 C102 * C439 + C115 * C423 + C103 * C442) *
                                    C116 +
                                (C113 * C435 + C101 * C449 + C114 * C438 +
                                 C102 * C451 + C115 * C443 + C103 * C453) *
                                    C47745) *
                                   C47760 * C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47745) *
               C47760 * C47557 * C942 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47745 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47760 * C47557 * C943 +
           ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47745) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
             C115 * C267 + C103 * C283) *
                C116 +
            (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
             C115 * C284 + C103 * C297) *
                C47745) *
               C47760 * C47557 * C943 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C47745 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C47760 * C47557 * C942 -
           ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
             C113 * C281 + C101 * C295) *
                C47745 +
            (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
             C113 * C265 + C101 * C278) *
                C116) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
             C115 * C121 + C103 * C132) *
                C116 +
            (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
             C115 * C133 + C103 * C142) *
                C47745) *
               C47760 * C47557 * C942 -
           ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
             C113 * C271 + C101 * C291) *
                C47745 +
            (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
             C113 * C261 + C101 * C274) *
                C116) *
               C47760 * C47557 * C943 +
           ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
             C115 * C270 + C103 * C289) *
                C116 +
            (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
             C115 * C290 + C103 * C300) *
                C47745) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C47745) *
              C47760 * C47557 * C1010 -
          ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
            C113 * C273 + C101 * C293) *
               C47745 +
           (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
            C113 * C263 + C101 * C276) *
               C116) *
              C47760 * C47557 * C1011 +
          ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
            C115 * C266 + C103 * C279) *
               C116 +
           (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
            C115 * C282 + C103 * C296) *
               C47745) *
              C47760 * C47557 * C1012 -
          ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
            C113 * C1024 + C101 * C1036) *
               C47745 +
           (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
            C113 * C1018 + C101 * C1027) *
               C116) *
              C47760 * C47557 * C1013 +
          ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
            C115 * C1021 + C103 * C1030) *
               C116 +
           (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
            C115 * C1033 + C103 * C1039) *
               C47745) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47745) *
               C47760 * C47877 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C47745 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C47760 * C47866 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C47745) *
               C47760 * C47840) *
              C942 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C47745) *
               C47760 * C47866 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47745 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47760 * C47877 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C47745 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C47760 * C47840) *
              C943 +
          (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47745) *
               C47760 * C47877 -
           ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
             C113 * C1167 + C101 * C1182) *
                C47745 +
            (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
             C113 * C1155 + C101 * C1170) *
                C116) *
               C47760 * C47866 +
           ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
             C115 * C1158 + C103 * C1173) *
                C116 +
            (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
             C115 * C1176 + C103 * C1185) *
                C47745) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47745) *
                                   C47760 * C1664 -
                               ((C115 * C424 + C103 * C444 + C114 * C425 +
                                 C102 * C445 + C113 * C426 + C101 * C446) *
                                    C47745 +
                                (C115 * C414 + C103 * C427 + C114 * C415 +
                                 C102 * C428 + C113 * C416 + C101 * C429) *
                                    C116) *
                                   C47760 * C1665 +
                               ((C113 * C417 + C101 * C430 + C114 * C418 +
                                 C102 * C431 + C115 * C419 + C103 * C432) *
                                    C116 +
                                (C113 * C433 + C101 * C447 + C114 * C434 +
                                 C102 * C448 + C115 * C435 + C103 * C449) *
                                    C47745) *
                                   C47760 * C47840) *
                                  C47539 * C47873 +
                              (((C113 * C415 + C101 * C428 + C114 * C414 +
                                 C102 * C427 + C115 * C420 + C103 * C436) *
                                    C116 +
                                (C113 * C425 + C101 * C445 + C114 * C424 +
                                 C102 * C444 + C115 * C437 + C103 * C450) *
                                    C47745) *
                                   C47760 * C1665 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47745 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C47760 * C1664 -
                               ((C115 * C438 + C103 * C451 + C114 * C435 +
                                 C102 * C449 + C113 * C434 + C101 * C448) *
                                    C47745 +
                                (C115 * C421 + C103 * C439 + C114 * C419 +
                                 C102 * C432 + C113 * C418 + C101 * C431) *
                                    C116) *
                                   C47760 * C47840) *
                                  C47539 * C47860 +
                              (((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47745) *
                                   C47760 * C1664 -
                               ((C115 * C440 + C103 * C452 + C114 * C437 +
                                 C102 * C450 + C113 * C424 + C101 * C444) *
                                    C47745 +
                                (C115 * C422 + C103 * C441 + C114 * C420 +
                                 C102 * C436 + C113 * C414 + C101 * C427) *
                                    C116) *
                                   C47760 * C1665 +
                               ((C113 * C419 + C101 * C432 + C114 * C421 +
                                 C102 * C439 + C115 * C423 + C103 * C442) *
                                    C116 +
                                (C113 * C435 + C101 * C449 + C114 * C438 +
                                 C102 * C451 + C115 * C443 + C103 * C453) *
                                    C47745) *
                                   C47760 * C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47745) *
               C47760 * C1664 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C47745 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C47760 * C1665 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C47745) *
               C47760 * C47840) *
              C47876 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C47745) *
               C47760 * C1665 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47745 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47760 * C1664 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C47745 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C47760 * C47840) *
              C47864 +
          (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47745) *
               C47760 * C1664 -
           ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
             C113 * C1167 + C101 * C1182) *
                C47745 +
            (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
             C113 * C1155 + C101 * C1170) *
                C116) *
               C47760 * C1665 +
           ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
             C115 * C1158 + C103 * C1173) *
                C116 +
            (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
             C115 * C1176 + C103 * C1185) *
                C47745) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C47745) *
              C47760 * C1839 -
          ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
            C113 * C426 + C101 * C446) *
               C47745 +
           (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
            C113 * C416 + C101 * C429) *
               C116) *
              C47760 * C1840 +
          ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
            C115 * C419 + C103 * C432) *
               C116 +
           (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
            C115 * C435 + C103 * C449) *
               C47745) *
              C47760 * C1841 -
          ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
            C113 * C1852 + C101 * C1864) *
               C47745 +
           (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
            C113 * C1846 + C101 * C1855) *
               C116) *
              C47760 * C1842 +
          ((C113 * C1847 + C101 * C1856 + C114 * C1848 + C102 * C1857 +
            C115 * C1849 + C103 * C1858) *
               C116 +
           (C113 * C1859 + C101 * C1865 + C114 * C1860 + C102 * C1866 +
            C115 * C1861 + C103 * C1867) *
               C47745) *
              C47760 * C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C47806) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47745 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47760 * C47644) *
                       C47837) *
                      C47791 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C47806) *
                       C942 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C943 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47745 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47760 * C47806) *
                       C47837) *
                      C47522)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C554 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47806) *
                      C47539 * C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C556 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C47806) *
                      C47539 * C47841)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C2116 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C2117 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C2118 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47745 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47760 * C47853) *
                      C47539 * C47791 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C2117 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C2116 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C2118 +
                   ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
                     C115 * C2120 + C103 * C2121) *
                        C116 +
                    (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
                     C115 * C2122 + C103 * C2123) *
                        C47745) *
                       C47760 * C47853) *
                      C47539 * C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C47864 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47539 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47539 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C47539 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47745 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47760 * C47557 * C47539 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47745) *
                      C47760 * C47557 * C47539 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47873 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C47860 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C47557 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47745) *
                      C47760 * C47557 * C1014) *
                 C47511) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47840) *
                      C47539 * C47873 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C1665 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C1664 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C47840) *
                      C47539 * C47860 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C1664 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C1665 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47745) *
                       C47760 * C47840) *
                      C47539 * C47831)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47840) *
                      C47876 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C1665 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C1664 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47745 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47760 * C47840) *
                      C47864 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C1664 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C1665 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C47745) *
                       C47760 * C47840) *
                      C47837) *
                 C47511) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C3094) *
                       C47602) *
                      C47516 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C3094) *
                       C47805 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C47602) *
                      C47525 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47745 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47745 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47760 * C3094) *
                       C47602) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C47640 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47647 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C47745) *
                        C47760 * C3602) *
                       C47805 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47647 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C47640 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C47745 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C47760 * C3602) *
                       C47602) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47647 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C47640 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C47745 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C47760 * C3602) *
                       C47805 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C47640 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47647 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C47745) *
                        C47760 * C3602) *
                       C47602) *
                      C47522)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C47876 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C3094) *
                       C47864 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47745 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47760 * C47644) *
                       C47837) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C3094) *
                       C47876 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C47864 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47745 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47760 * C3094) *
                       C47837) *
                      C47522)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C47882 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C3094) *
                      C47539 * C47875 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C47862 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C3094) *
                      C47539 * C47841)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47884 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47881 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47872 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47745 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47760 * C47853) *
                      C47539 * C2440 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47881 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47884 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C47872 +
                   ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
                     C115 * C2120 + C103 * C2121) *
                        C116 +
                    (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
                     C115 * C2122 + C103 * C2123) *
                        C47745) *
                       C47760 * C47853) *
                      C47539 * C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47640 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47647 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C3602) *
                      C47539 * C47516 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47647 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47640 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C3602) *
                      C47539 * C47525 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47640 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47647 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47745) *
                       C47760 * C3602) *
                      C47539 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C47882 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C3094) *
                      C47539 * C47875 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C47862 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C3094) *
                      C47539 * C47841)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C47876 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C3094) *
                       C47864 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47745 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47760 * C47644) *
                       C47837) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C3094) *
                       C47876 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C47864 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47745 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47760 * C3094) *
                       C47837) *
                      C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C47805 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C47602) *
                      C554 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C47602 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C47805) *
                      C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C47805 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C47602) *
                      C556 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C47745) *
                       C47760 * C47557 * C47602 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C47557 * C47805) *
                      C47841)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C1284 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C1285 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C1286 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47745 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47760 * C47557 * C47847) *
                      C47791 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C1285 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C1284 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C1286 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C47745) *
                       C47760 * C47557 * C47847) *
                      C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C47806) *
                       C47602) *
                      C258 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C47806) *
                       C47805 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C47602) *
                      C259 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47745 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47760 * C47644) *
                       C47805 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47745 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47760 * C47806) *
                       C47602) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C1284 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47806) *
                      C1285 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C47644) *
                      C1286 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47745 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47760 * C47806) *
                      C47847) *
                 C47511) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C47864 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47539 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47539 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C47539 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47745 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47760 * C47557 * C47539 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47745) *
                      C47760 * C47557 * C47539 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47840) *
                      C47539 * C258 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47866 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47877 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47745 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47760 * C47840) *
                      C47539 * C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47745) *
                       C47760 * C47840) *
                      C47539 * C47831)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47873 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C47860 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C47557 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47745) *
                      C47760 * C47557 * C1014) *
                 C47511) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47745) *
                       C47760 * C47840) *
                      C942 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47745) *
                       C47760 * C47866 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47877 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47745 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47760 * C47840) *
                      C943 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47877 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47745 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47760 * C47866 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C47745) *
                       C47760 * C47840) *
                      C47837) *
                 C47511) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47745 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C554 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47806) *
                      C47539 * C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47806 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47745 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47760 * C47644) *
                      C47539 * C556 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47745) *
                       C47760 * C47644 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47745 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47760 * C47806) *
                      C47539 * C47841)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47745 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47760 * C47644) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47745 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47760 * C47806) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47745 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47760 * C47644) *
                       C47837) *
                      C47791 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47745 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47760 * C47806) *
                       C942 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47745) *
                        C47760 * C47806 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47745 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47760 * C47644) *
                       C943 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47745) *
                        C47760 * C47644 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47745 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47760 * C47806) *
                       C47837) *
                      C47522)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C47539 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47745 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47760 * C47557 * C47539 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47745) *
                      C47760 * C47557 * C47539 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47745 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47760 * C47557 * C47539 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47745) *
                      C47760 * C47557 * C47539 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C47864 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C47876 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C47864 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47745 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47873 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47745) *
                       C47760 * C47557 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47745 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47760 * C47557 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47745 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47760 * C47557 * C47837) *
                      C47860 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47745) *
                       C47760 * C47557 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47745 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47760 * C47557 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47745) *
                       C47760 * C47557 * C47837) *
                      C47831)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47745) *
                      C47760 * C47557 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47745 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47760 * C47557 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47745) *
                      C47760 * C47557 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47745 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47760 * C47557 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47745) *
                      C47760 * C47557 * C1014) *
                 C47511) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47598 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47605 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47557 * C2700) *
              C47516 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47605 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47598 -
           ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C2700) *
              C47525 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47598 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47605 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47598 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C47605 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C47806 -
            ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C2700) *
              C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C47598 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47605 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C47806) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47883 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47879 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47557 * C47869 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47557 * C47847) *
              C2440 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47879 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47883 -
           ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47869 +
           ((C6041 + C6040) * C4581 + (C6039 + C6038) * C4577 +
            (C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47824 * C1030) *
                C4582 +
            (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C2332 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47602) *
              C47882 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47602 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C2332 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47602) *
              C47862 +
          (((C5086 + C5087) * C4581 + (C5088 + C5089) * C4577 +
            (C4579 * C268 + C4575 * C286 + C4580 * C270 + C47824 * C289) *
                C4582 +
            (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47877 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47866 +
            ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                 C4581 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                 C4577 +
             (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
                C47760 * C47840) *
               C2332 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47866 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47877 -
            ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
             (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
                C47760 * C47840) *
               C47602) *
              C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47866 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47877 -
            ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
             (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                 C4577 +
             (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                 C4581) *
                C47760 * C47840) *
               C2332 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47877 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47866 +
            ((C6985 + C6984) * C4581 + (C6983 + C6982) * C4577 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                 C4582 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                 C47855) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C47602) *
              C47516 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C2332 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C47806 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C47806) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C2332 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47602) *
              C47882 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47602 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C2332 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47602) *
              C47862 +
          (((C5086 + C5087) * C4581 + (C5088 + C5089) * C4577 +
            (C4579 * C268 + C4575 * C286 + C4580 * C270 + C47824 * C289) *
                C4582 +
            (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47883 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47879 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47557 * C47869 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47557 * C47847) *
              C2440 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47879 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47883 -
           ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47869 +
           ((C6041 + C6040) * C4581 + (C6039 + C6038) * C4577 +
            (C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47824 * C1030) *
                C4582 +
            (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47598 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47605 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C3094 -
            ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C2700) *
              C47791 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C47598 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47605 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C3094) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47640 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47647 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C3602) *
              C47598 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47647 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47640 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C3602) *
              C47605 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47640 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47647 +
           ((C5899 + C5898) * C4581 + (C5897 + C5896) * C4577 +
            (C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                C4582 +
            (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                C47855) *
               C47760 * C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C3094 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47883 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47644 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C3094) *
              C47879 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C3094 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47644) *
              C47869 +
          (((C6397 + C6396) * C4581 + (C6395 + C6394) * C4577 +
            (C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C4582 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C2332 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C3094 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47884 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47881 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47872 -
           ((C7262 + C7263) * C47855 + (C7264 + C7265) * C4582 +
            (C4580 * C1851 + C47824 * C1863 + C4579 * C1852 + C4575 * C1864) *
                C4577 +
            (C4580 * C1845 + C47824 * C1854 + C4579 * C1846 + C4575 * C1855) *
                C4581) *
               C47760 * C47853) *
              C2332 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47881 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47884 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C47872 +
           ((C7265 + C7264) * C4581 + (C7263 + C7262) * C4577 +
            (C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                C4582 +
            (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                C47855) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47640 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47647 +
            ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                 C4581 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                 C4577 +
             (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
                C47760 * C3602) *
               C2332 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47647 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47640 -
            ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
             (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
                C47760 * C3602) *
               C47602) *
              C47791 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47647 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47640 -
            ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
             (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                 C4577 +
             (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                 C4581) *
                C47760 * C3602) *
               C2332 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47640 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47647 +
            ((C6985 + C6984) * C4581 + (C6983 + C6982) * C4577 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                 C4582 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                 C47855) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C2332 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C3094 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C2332 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C3094 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47883 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47644 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C3094) *
              C47879 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C3094 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47644) *
              C47869 +
          (((C6397 + C6396) * C4581 + (C6395 + C6394) * C4577 +
            (C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C4582 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C1284 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C1285 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47557 * C1286 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47557 * C47847) *
              C47791 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C1285 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C1284 -
           ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C1286 +
           ((C6041 + C6040) * C4581 + (C6039 + C6038) * C4577 +
            (C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47824 * C1030) *
                C4582 +
            (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47805 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47602) *
              C554 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47602 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47805 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47602) *
              C556 +
          (((C5086 + C5087) * C4581 + (C5088 + C5089) * C4577 +
            (C4579 * C268 + C4575 * C286 + C4580 * C270 + C47824 * C289) *
                C4582 +
            (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C1664 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C1665 +
            ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                 C4581 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                 C4577 +
             (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
                C47760 * C47840) *
               C47805 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C1665 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C1664 -
            ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
             (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
                C47760 * C47840) *
               C47602) *
              C47791 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C1665 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C1664 -
            ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
             (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                 C4577 +
             (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                 C4581) *
                C47760 * C47840) *
               C47805 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C1664 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C1665 +
            ((C6985 + C6984) * C4581 + (C6983 + C6982) * C4577 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                 C4582 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                 C47855) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47806 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C1284 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47644 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47806) *
              C1285 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47806 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47644) *
              C1286 +
          (((C6397 + C6396) * C4581 + (C6395 + C6394) * C4577 +
            (C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C4582 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C4579 * C1155 + C4575 * C1170 + C4580 * C1154 + C47824 * C1169) *
                 C4582 +
             (C4579 * C1167 + C4575 * C1182 + C4580 * C1166 + C47824 * C1181) *
                 C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C47805 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C4580 * C1165 + C47824 * C1180 + C4579 * C1166 + C4575 * C1181) *
                 C47855 +
             (C4580 * C1153 + C47824 * C1168 + C4579 * C1154 + C4575 * C1169) *
                 C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C47806 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C2116 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C2117 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C2118 -
           ((C7262 + C7263) * C47855 + (C7264 + C7265) * C4582 +
            (C4580 * C1851 + C47824 * C1863 + C4579 * C1852 + C4575 * C1864) *
                C4577 +
            (C4580 * C1845 + C47824 * C1854 + C4579 * C1846 + C4575 * C1855) *
                C4581) *
               C47760 * C47853) *
              C47805 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C2117 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C2116 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C2118 +
           ((C7265 + C7264) * C4581 + (C7263 + C7262) * C4577 +
            (C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                C4582 +
            (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                C47855) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                   C4581 +
               (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                   C4577 +
               (C4579 * C263 + C4575 * C276 + C4580 * C262 + C47824 * C275) *
                   C4582 +
               (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47824 * C292) *
                   C47855) *
                  C47760 * C47557 * C47539 * C108 -
              ((C4580 * C271 + C47824 * C291 + C4579 * C272 + C4575 * C292) *
                   C47855 +
               (C4580 * C261 + C47824 * C274 + C4579 * C262 + C4575 * C275) *
                   C4582 +
               (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                   C4577 +
               (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                   C4581) *
                  C47760 * C47557 * C47539 * C109 +
              ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                   C4581 +
               (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                   C4577 +
               (C4579 * C261 + C4575 * C274 + C4580 * C267 + C47824 * C283) *
                   C4582 +
               (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47824 * C297) *
                   C47855) *
                  C47760 * C47557 * C47539 * C110 -
              ((C4580 * C287 + C47824 * C299 + C4579 * C284 + C4575 * C297) *
                   C47855 +
               (C4580 * C269 + C47824 * C288 + C4579 * C267 + C4575 * C283) *
                   C4582 +
               (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                   C4577 +
               (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                   C4581) *
                  C47760 * C47557 * C47539 * C111 +
              ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
                   C4581 +
               (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
                   C4577 +
               (C4579 * C269 + C4575 * C288 + C4580 * C558 + C47824 * C559) *
                   C4582 +
               (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47824 * C561) *
                   C47855) *
                  C47760 * C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                    C4581 +
                (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                    C4577 +
                (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                   C47760 * C47557 * C47876 -
               ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
                (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                   C47760 * C47557 * C47864 +
               ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
                (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 +
                 C47824 * C1026) *
                    C4582 +
                (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 +
                 C47824 * C1035) *
                    C47855) *
                   C47760 * C47557 * C47837) *
                  C258 +
              (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
                (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                   C47760 * C47557 * C47864 -
               ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
                (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                    C4577 +
                (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                    C4581) *
                   C47760 * C47557 * C47876 -
               ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 +
                 C4575 * C1035) *
                    C47855 +
                (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 +
                 C4575 * C1026) *
                    C4582 +
                (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                   C47760 * C47557 * C47837) *
                  C259 +
              (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                    C4581 +
                (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                    C4577 +
                (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                   C47760 * C47557 * C47876 -
               ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
                (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                   C47760 * C47557 * C47864 +
               ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
                (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 +
                 C47824 * C1291) *
                    C4582 +
                (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 +
                 C47824 * C1293) *
                    C47855) *
                   C47760 * C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47877 -
           ((C4580 * C821 + C47824 * C828 + C4579 * C820 + C4575 * C827) *
                C47855 +
            (C4580 * C813 + C47824 * C818 + C4579 * C812 + C4575 * C817) *
                C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C4579 * C1152 + C4575 * C1164 + C4580 * C1151 + C47824 * C1163) *
                C4582 +
            (C4579 * C1161 + C4575 * C1179 + C4580 * C1160 + C47824 * C1178) *
                C47855) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C4579 * C813 + C4575 * C818 + C4580 * C814 + C47824 * C819) *
                C4582 +
            (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47866 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47877 -
           ((C4580 * C1159 + C47824 * C1177 + C4579 * C1160 + C4575 * C1178) *
                C47855 +
            (C4580 * C1150 + C47824 * C1162 + C4579 * C1151 + C4575 * C1163) *
                C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47877 -
           ((C4580 * C823 + C47824 * C830 + C4579 * C822 + C4575 * C829) *
                C47855 +
            (C4580 * C815 + C47824 * C824 + C4579 * C814 + C4575 * C819) *
                C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47824 * C439) *
                C4581 +
            (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47824 * C451) *
                C4577 +
            (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                C4582 +
            (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C942 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C943 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C943 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C942 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C942 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C943 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
              C47760 * C47557 * C1010 -
          ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
           (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
              C47760 * C47557 * C1011 +
          ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
           (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
              C47760 * C47557 * C1012 -
          ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
           (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
              C47760 * C47557 * C1013 +
          ((C5709 + C5708) * C4581 + (C5707 + C5706) * C4577 +
           (C4579 * C5677 + C4575 * C5679 + C4580 * C5678 + C47824 * C5680) *
               C4582 +
           (C4579 * C5681 + C4575 * C5683 + C4580 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47877 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C942 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47866 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47877 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C47840) *
              C943 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47877 -
           ((C4580 * C1549 + C47824 * C1552 + C4579 * C1548 + C4575 * C1551) *
                C47855 +
            (C4580 * C1543 + C47824 * C1546 + C4579 * C1542 + C4575 * C1545) *
                C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47866 +
           ((C5899 + C5898) * C4581 + (C5897 + C5896) * C4577 +
            (C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                C4582 +
            (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C1664 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C1665 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C1664 -
           ((C4580 * C1159 + C47824 * C1177 + C4579 * C1160 + C4575 * C1178) *
                C47855 +
            (C4580 * C1150 + C47824 * C1162 + C4579 * C1151 + C4575 * C1163) *
                C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C1664 -
           ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47824 * C439) *
                C4581 +
            (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47824 * C451) *
                C4577 +
            (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                C4582 +
            (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C1664 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C47876 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C1665 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C1664 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C47840) *
              C47864 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C1664 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C1665 +
           ((C5899 + C5898) * C4581 + (C5897 + C5896) * C4577 +
            (C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                C4582 +
            (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
              C47760 * C1839 -
          ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
           (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
               C4577 +
           (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
               C4581) *
              C47760 * C1840 +
          ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
               C4581 +
           (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
               C4577 +
           (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
              C47760 * C1841 -
          ((C4580 * C2229 + C47824 * C2232 + C4579 * C2228 + C4575 * C2231) *
               C47855 +
           (C4580 * C2223 + C47824 * C2226 + C4579 * C2222 + C4575 * C2225) *
               C4582 +
           (C4580 * C1851 + C47824 * C1863 + C4579 * C1852 + C4575 * C1864) *
               C4577 +
           (C4580 * C1845 + C47824 * C1854 + C4579 * C1846 + C4575 * C1855) *
               C4581) *
              C47760 * C1842 +
          ((C4579 * C1847 + C4575 * C1856 + C4580 * C1848 + C47824 * C1857) *
               C4581 +
           (C4579 * C1859 + C4575 * C1865 + C4580 * C1860 + C47824 * C1866) *
               C4577 +
           (C4579 * C6771 + C4575 * C6773 + C4580 * C6772 + C47824 * C6774) *
               C4582 +
           (C4579 * C6775 + C4575 * C6777 + C4580 * C6776 + C47824 * C6778) *
               C47855) *
              C47760 * C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C942 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C943 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C47806 -
            ((C4580 * C1549 + C47824 * C1552 + C4579 * C1548 + C4575 * C1551) *
                 C47855 +
             (C4580 * C1543 + C47824 * C1546 + C4579 * C1542 + C4575 * C1545) *
                 C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C942 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C943 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47806 -
           ((C4580 * C821 + C47824 * C828 + C4579 * C820 + C4575 * C827) *
                C47855 +
            (C4580 * C813 + C47824 * C818 + C4579 * C812 + C4575 * C817) *
                C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C4579 * C813 + C4575 * C818 + C4580 * C814 + C47824 * C819) *
                C4582 +
            (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47644 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47806 -
           ((C4580 * C823 + C47824 * C830 + C4579 * C822 + C4575 * C829) *
                C47855 +
            (C4580 * C815 + C47824 * C824 + C4579 * C814 + C4575 * C819) *
                C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47824 * C441) *
                C4581 +
            (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47824 * C452) *
                C4577 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                C4582 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C2116 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C2117 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C2118 -
           ((C4580 * C2229 + C47824 * C2232 + C4579 * C2228 + C4575 * C2231) *
                C47855 +
            (C4580 * C2223 + C47824 * C2226 + C4579 * C2222 + C4575 * C2225) *
                C4582 +
            (C4580 * C1851 + C47824 * C1863 + C4579 * C1852 + C4575 * C1864) *
                C4577 +
            (C4580 * C1845 + C47824 * C1854 + C4579 * C1846 + C4575 * C1855) *
                C4581) *
               C47760 * C47853) *
              C47539 * C47791 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C2117 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C2116 -
           ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C2118 +
           ((C4579 * C1845 + C4575 * C1854 + C4580 * C1844 + C47824 * C1853) *
                C4581 +
            (C4579 * C1851 + C4575 * C1863 + C4580 * C1850 + C47824 * C1862) *
                C4577 +
            (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                C4582 +
            (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                C47855) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47864 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47876 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4579 * C263 + C4575 * C276 + C4580 * C262 + C47824 * C275) *
               C4582 +
           (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C4580 * C271 + C47824 * C291 + C4579 * C272 + C4575 * C292) *
               C47855 +
           (C4580 * C261 + C47824 * C274 + C4579 * C262 + C4575 * C275) *
               C4582 +
           (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
               C4577 +
           (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
               C4581) *
              C47760 * C47557 * C47539 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
               C4581 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
               C4577 +
           (C4579 * C261 + C4575 * C274 + C4580 * C267 + C47824 * C283) *
               C4582 +
           (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C4580 * C287 + C47824 * C299 + C4579 * C284 + C4575 * C297) *
               C47855 +
           (C4580 * C269 + C47824 * C288 + C4579 * C267 + C4575 * C283) *
               C4582 +
           (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
               C4577 +
           (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
               C4581) *
              C47760 * C47557 * C47539 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
               C4581 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
               C4577 +
           (C4579 * C269 + C4575 * C288 + C4580 * C558 + C47824 * C559) *
               C4582 +
           (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C942 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C943 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C943 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C942 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C942 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C943 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
              C47760 * C47557 * C1010 -
          ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
           (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
              C47760 * C47557 * C1011 +
          ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
           (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
              C47760 * C47557 * C1012 -
          ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
           (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
              C47760 * C47557 * C1013 +
          ((C5709 + C5708) * C4581 + (C5707 + C5706) * C4577 +
           (C4579 * C5677 + C4575 * C5679 + C4580 * C5678 + C47824 * C5680) *
               C4582 +
           (C4579 * C5681 + C4575 * C5683 + C4580 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C1664 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C1665 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C1664 -
           ((C4580 * C1159 + C47824 * C1177 + C4579 * C1160 + C4575 * C1178) *
                C47855 +
            (C4580 * C1150 + C47824 * C1162 + C4579 * C1151 + C4575 * C1163) *
                C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C1664 -
           ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47824 * C439) *
                C4581 +
            (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47824 * C451) *
                C4577 +
            (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                C4582 +
            (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C1664 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C1665 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C47876 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C1665 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C1664 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C47840) *
              C47864 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C1664 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C1665 +
           ((C5899 + C5898) * C4581 + (C5897 + C5896) * C4577 +
            (C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                C4582 +
            (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47602) *
              C47516 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C47805 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C3094 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C3094) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47640 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47647 +
            ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                 C4581 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                 C4577 +
             (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
                C47760 * C3602) *
               C47805 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47647 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47640 -
            ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
             (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
                C47760 * C3602) *
               C47602) *
              C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47647 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47640 -
            ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
             (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                 C4577 +
             (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                 C4581) *
                C47760 * C3602) *
               C47805 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47640 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47647 +
            ((C6985 + C6984) * C4581 + (C6983 + C6982) * C4577 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                 C4582 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                 C47855) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47876 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47864 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C3094 -
            ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C47876 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47864 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C3094 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C47644 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C3094 -
           ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47824 * C441) *
                C4581 +
            (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47824 * C452) *
                C4577 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                C4582 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47884 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47881 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47872 -
           ((C7262 + C7263) * C47855 + (C7264 + C7265) * C4582 +
            (C4580 * C1851 + C47824 * C1863 + C4579 * C1852 + C4575 * C1864) *
                C4577 +
            (C4580 * C1845 + C47824 * C1854 + C4579 * C1846 + C4575 * C1855) *
                C4581) *
               C47760 * C47853) *
              C47539 * C2440 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C47881 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47884 -
           ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C47872 +
           ((C4579 * C1845 + C4575 * C1854 + C4580 * C1844 + C47824 * C1853) *
                C4581 +
            (C4579 * C1851 + C4575 * C1863 + C4580 * C1850 + C47824 * C1862) *
                C4577 +
            (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                C4582 +
            (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                C47855) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47640 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47647 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C3602) *
              C47539 * C47516 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C47647 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47640 -
           ((C6982 + C6983) * C47855 + (C6984 + C6985) * C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C3602) *
              C47539 * C47525 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47640 -
           ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47647 +
           ((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47824 * C439) *
                C4581 +
            (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47824 * C451) *
                C4577 +
            (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                C4582 +
            (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                C47855) *
               C47760 * C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C3094 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
               C47760 * C47644 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C3094 -
           ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47824 * C441) *
                C4581 +
            (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47824 * C452) *
                C4577 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                C4582 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C3094 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47876 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C3094) *
               C47864 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C3094 -
            ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C3094) *
               C47876 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C3094 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47864 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47805 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47602) *
              C554 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47602 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47805 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47602) *
              C556 +
          (((C5086 + C5087) * C4581 + (C5088 + C5089) * C4577 +
            (C4579 * C268 + C4575 * C286 + C4580 * C270 + C47824 * C289) *
                C4582 +
            (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C1284 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C1285 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47557 * C1286 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47557 * C47847) *
              C47791 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C1285 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C1284 -
           ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C1286 +
           ((C6041 + C6040) * C4581 + (C6039 + C6038) * C4577 +
            (C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47824 * C1030) *
                C4582 +
            (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C4579 * C1155 + C4575 * C1170 + C4580 * C1154 + C47824 * C1169) *
                 C4582 +
             (C4579 * C1167 + C4575 * C1182 + C4580 * C1166 + C47824 * C1181) *
                 C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C47805 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C4580 * C1165 + C47824 * C1180 + C4579 * C1166 + C4575 * C1181) *
                 C47855 +
             (C4580 * C1153 + C47824 * C1168 + C4579 * C1154 + C4575 * C1169) *
                 C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C4581 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C4577 +
             (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
                C47760 * C47806 -
            ((C5446 + C5447) * C47855 + (C5448 + C5449) * C4582 +
             (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                 C4577 +
             (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                 C4581) *
                C47760 * C47644) *
               C47805 +
           (((C5449 + C5448) * C4581 + (C5447 + C5446) * C4577 +
             (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C4582 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
             (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47806 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C1284 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47644 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47806) *
              C1285 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47806 -
           ((C6394 + C6395) * C47855 + (C6396 + C6397) * C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47644) *
              C1286 +
          (((C6397 + C6396) * C4581 + (C6395 + C6394) * C4577 +
            (C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C4582 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
            (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47864 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47876 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4579 * C263 + C4575 * C276 + C4580 * C262 + C47824 * C275) *
               C4582 +
           (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C4580 * C271 + C47824 * C291 + C4579 * C272 + C4575 * C292) *
               C47855 +
           (C4580 * C261 + C47824 * C274 + C4579 * C262 + C4575 * C275) *
               C4582 +
           (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
               C4577 +
           (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
               C4581) *
              C47760 * C47557 * C47539 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
               C4581 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
               C4577 +
           (C4579 * C261 + C4575 * C274 + C4580 * C267 + C47824 * C283) *
               C4582 +
           (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C4580 * C287 + C47824 * C299 + C4579 * C284 + C4575 * C297) *
               C47855 +
           (C4580 * C269 + C47824 * C288 + C4579 * C267 + C4575 * C283) *
               C4582 +
           (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
               C4577 +
           (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
               C4581) *
              C47760 * C47557 * C47539 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
               C4581 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
               C4577 +
           (C4579 * C269 + C4575 * C288 + C4580 * C558 + C47824 * C559) *
               C4582 +
           (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47877 -
           ((C4580 * C821 + C47824 * C828 + C4579 * C820 + C4575 * C827) *
                C47855 +
            (C4580 * C813 + C47824 * C818 + C4579 * C812 + C4575 * C817) *
                C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C4579 * C1152 + C4575 * C1164 + C4580 * C1151 + C47824 * C1163) *
                C4582 +
            (C4579 * C1161 + C4575 * C1179 + C4580 * C1160 + C47824 * C1178) *
                C47855) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C4579 * C813 + C4575 * C818 + C4580 * C814 + C47824 * C819) *
                C4582 +
            (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47866 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47877 -
           ((C4580 * C1159 + C47824 * C1177 + C4579 * C1160 + C4575 * C1178) *
                C47855 +
            (C4580 * C1150 + C47824 * C1162 + C4579 * C1151 + C4575 * C1163) *
                C4582 +
            (C4580 * C435 + C47824 * C449 + C4579 * C434 + C4575 * C448) *
                C4577 +
            (C4580 * C419 + C47824 * C432 + C4579 * C418 + C4575 * C431) *
                C4581) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47877 -
           ((C4580 * C823 + C47824 * C830 + C4579 * C822 + C4575 * C829) *
                C47855 +
            (C4580 * C815 + C47824 * C824 + C4579 * C814 + C4575 * C819) *
                C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47824 * C439) *
                C4581 +
            (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47824 * C451) *
                C4577 +
            (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                C4582 +
            (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C942 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C943 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C943 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C942 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C942 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C943 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
              C47760 * C47557 * C1010 -
          ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
           (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
              C47760 * C47557 * C1011 +
          ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
           (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
              C47760 * C47557 * C1012 -
          ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
           (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
              C47760 * C47557 * C1013 +
          ((C5709 + C5708) * C4581 + (C5707 + C5706) * C4577 +
           (C4579 * C5677 + C4575 * C5679 + C4580 * C5678 + C47824 * C5680) *
               C4582 +
           (C4579 * C5681 + C4575 * C5683 + C4580 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47877 -
           ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47866 +
           ((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47824 * C431) *
                C4581 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47824 * C448) *
                C4577 +
            (C5888 + C5889) * C4582 + (C5890 + C5891) * C47855) *
               C47760 * C47840) *
              C942 +
          (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
            (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
               C47760 * C47866 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47877 -
           ((C5896 + C5897) * C47855 + (C5898 + C5899) * C4582 +
            (C5891 + C5890) * C4577 + (C5889 + C5888) * C4581) *
               C47760 * C47840) *
              C943 +
          (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
               C47760 * C47877 -
           ((C4580 * C1549 + C47824 * C1552 + C4579 * C1548 + C4575 * C1551) *
                C47855 +
            (C4580 * C1543 + C47824 * C1546 + C4579 * C1542 + C4575 * C1545) *
                C4582 +
            (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
               C47760 * C47866 +
           ((C5899 + C5898) * C4581 + (C5897 + C5896) * C4577 +
            (C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                C4582 +
            (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47806 -
           ((C4580 * C821 + C47824 * C828 + C4579 * C820 + C4575 * C827) *
                C47855 +
            (C4580 * C813 + C47824 * C818 + C4579 * C812 + C4575 * C817) *
                C4582 +
            (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                C4577 +
            (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                C4581) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                C4581 +
            (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                C4577 +
            (C4579 * C813 + C4575 * C818 + C4580 * C814 + C47824 * C819) *
                C4582 +
            (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47644 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47806 -
           ((C4580 * C823 + C47824 * C830 + C4579 * C822 + C4575 * C829) *
                C47855 +
            (C4580 * C815 + C47824 * C824 + C4579 * C814 + C4575 * C819) *
                C4582 +
            (C4580 * C437 + C47824 * C450 + C4579 * C424 + C4575 * C444) *
                C4577 +
            (C4580 * C420 + C47824 * C436 + C4579 * C414 + C4575 * C427) *
                C4581) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47824 * C441) *
                C4581 +
            (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47824 * C452) *
                C4577 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                C4582 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C5089 + C5088) * C47855 + (C5087 + C5086) * C4582 +
            (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C4577 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C4581) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C4581 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C4577 +
             (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
                C47760 * C47806 -
            ((C5438 + C5439) * C47855 + (C5440 + C5441) * C4582 +
             (C4580 * C425 + C47824 * C445 + C4579 * C426 + C4575 * C446) *
                 C4577 +
             (C4580 * C415 + C47824 * C428 + C4579 * C416 + C4575 * C429) *
                 C4581) *
                C47760 * C47644) *
               C942 +
           (((C5441 + C5440) * C4581 + (C5439 + C5438) * C4577 +
             (C5892 + C5893) * C4582 + (C5894 + C5895) * C47855) *
                C47760 * C47644 -
            ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
             (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
                C47760 * C47806) *
               C943 +
           (((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
             (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
                C47760 * C47806 -
            ((C4580 * C1549 + C47824 * C1552 + C4579 * C1548 + C4575 * C1551) *
                 C47855 +
             (C4580 * C1543 + C47824 * C1546 + C4579 * C1542 + C4575 * C1545) *
                 C4582 +
             (C5895 + C5894) * C4577 + (C5893 + C5892) * C4581) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47824 * C427) *
                 C4581 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47824 * C444) *
                 C4577 +
             (C5442 + C5443) * C4582 + (C5444 + C5445) * C47855) *
                C47760 * C47644 -
            ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
             (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C4577 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C4581) *
                C47760 * C47806) *
               C942 +
           (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
             (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
                C47760 * C47806 -
            ((C6244 + C6245) * C47855 + (C6246 + C6247) * C4582 +
             (C5445 + C5444) * C4577 + (C5443 + C5442) * C4581) *
                C47760 * C47644) *
               C943 +
           (((C6247 + C6246) * C4581 + (C6245 + C6244) * C4577 +
             (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C4582 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C6038 + C6039) * C47855 + (C6040 + C6041) * C4582 +
             (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4579 * C263 + C4575 * C276 + C4580 * C262 + C47824 * C275) *
               C4582 +
           (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C4580 * C271 + C47824 * C291 + C4579 * C272 + C4575 * C292) *
               C47855 +
           (C4580 * C261 + C47824 * C274 + C4579 * C262 + C4575 * C275) *
               C4582 +
           (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
               C4577 +
           (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
               C4581) *
              C47760 * C47557 * C47539 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
               C4581 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
               C4577 +
           (C4579 * C261 + C4575 * C274 + C4580 * C267 + C47824 * C283) *
               C4582 +
           (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C4580 * C287 + C47824 * C299 + C4579 * C284 + C4575 * C297) *
               C47855 +
           (C4580 * C269 + C47824 * C288 + C4579 * C267 + C4575 * C283) *
               C4582 +
           (C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
               C4577 +
           (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
               C4581) *
              C47760 * C47557 * C47539 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
               C4581 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
               C4577 +
           (C4579 * C269 + C4575 * C288 + C4580 * C558 + C47824 * C559) *
               C4582 +
           (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C47864 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C47876 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C47876 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C47864 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C4581 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C4577 +
            (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
               C47760 * C47557 * C942 -
           ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
            (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
               C47760 * C47557 * C943 +
           ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
            (C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47824 * C1026) *
                C4582 +
            (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C4786 + C4787) * C4581 + (C4788 + C4789) * C4577 +
            (C4790 + C4791) * C4582 + (C4792 + C4793) * C47855) *
               C47760 * C47557 * C943 -
           ((C4789 + C4788) * C47855 + (C4787 + C4786) * C4582 +
            (C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C4577 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C4581) *
               C47760 * C47557 * C942 -
           ((C4580 * C1022 + C47824 * C1034 + C4579 * C1023 + C4575 * C1035) *
                C47855 +
            (C4580 * C1016 + C47824 * C1025 + C4579 * C1017 + C4575 * C1026) *
                C4582 +
            (C4793 + C4792) * C4577 + (C4791 + C4790) * C4581) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C4581 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C4577 +
            (C4794 + C4795) * C4582 + (C4796 + C4797) * C47855) *
               C47760 * C47557 * C942 -
           ((C4798 + C4799) * C47855 + (C4800 + C4801) * C4582 +
            (C4797 + C4796) * C4577 + (C4795 + C4794) * C4581) *
               C47760 * C47557 * C943 +
           ((C4801 + C4800) * C4581 + (C4799 + C4798) * C4577 +
            (C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47824 * C1291) *
                C4582 +
            (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
               C4581 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
               C4577 +
           (C4778 + C4779) * C4582 + (C4780 + C4781) * C47855) *
              C47760 * C47557 * C1010 -
          ((C4782 + C4783) * C47855 + (C4784 + C4785) * C4582 +
           (C4781 + C4780) * C4577 + (C4779 + C4778) * C4581) *
              C47760 * C47557 * C1011 +
          ((C4785 + C4784) * C4581 + (C4783 + C4782) * C4577 +
           (C5702 + C5703) * C4582 + (C5704 + C5705) * C47855) *
              C47760 * C47557 * C1012 -
          ((C5706 + C5707) * C47855 + (C5708 + C5709) * C4582 +
           (C5705 + C5704) * C4577 + (C5703 + C5702) * C4581) *
              C47760 * C47557 * C1013 +
          ((C5709 + C5708) * C4581 + (C5707 + C5706) * C4577 +
           (C4579 * C5677 + C4575 * C5679 + C4580 * C5678 + C47824 * C5680) *
               C4582 +
           (C4579 * C5681 + C4575 * C5683 + C4580 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C47598 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47605 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C2700) *
              C47516 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47605 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47598 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C2700) *
              C47525 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C47598 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47605 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47598 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C47605 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C47806 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C2700) *
              C2440 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C47598 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47605 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C47806) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C47883 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47879 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47869 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47557 * C47847) *
              C2440 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47879 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47883 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47869 +
           (((C6041 + C6040) * C116 + (C6039 + C6038) * C47745) * C10311 +
            ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C116 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C2332 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47602) *
              C47882 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47602 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C2332) *
              C47875 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C2332 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47602) *
              C47862 +
          ((((C5086 + C5087) * C116 + (C5088 + C5089) * C47745) * C10311 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47877 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47866 +
            (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
             ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
                C47840) *
               C2332 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47866 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47877 -
            (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
             ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
                C47840) *
               C47602) *
              C2440 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47866 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47877 -
            (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
             ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
                C47840) *
               C2332 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47877 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47866 +
            (((C6985 + C6984) * C116 + (C6983 + C6982) * C47745) * C10311 +
             ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                  C116 +
              (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                  C47745) *
                 C47857) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C47602) *
              C47516 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C2332 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C47525 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C47806 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C47806) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C2332 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47602) *
              C47882 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47602 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C2332) *
              C47875 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C2332 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47602) *
              C47862 +
          ((((C5086 + C5087) * C116 + (C5088 + C5089) * C47745) * C10311 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C47883 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47879 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47869 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47557 * C47847) *
              C2440 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47879 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47883 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47869 +
           (((C6041 + C6040) * C116 + (C6039 + C6038) * C47745) * C10311 +
            ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C116 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47598 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47605 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C3094 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C2700) *
              C47791 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C47598 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47605 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C3094) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47640 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47647 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C3602) *
              C47598 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47647 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47640 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C3602) *
              C47605 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47640 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47647 +
           (((C5899 + C5898) * C116 + (C5897 + C5896) * C47745) * C10311 +
            ((C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                 C116 +
             (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                 C47745) *
                C47857) *
               C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C3094 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47883 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47644 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C3094) *
              C47879 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C3094 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47644) *
              C47869 +
          ((((C6397 + C6396) * C116 + (C6395 + C6394) * C47745) * C10311 +
            ((C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                 C116 +
             (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47602) *
              C47873 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C2332 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C47860 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C3094 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47884 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47881 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C47872 -
           (((C12374 + C12375) * C47745 + (C12376 + C12377) * C116) * C47857 +
            ((C12373 + C12372) * C47745 + (C12371 + C12370) * C116) * C10311) *
               C47853) *
              C2332 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47881 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47884 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C47872 +
           (((C7265 + C7264) * C116 + (C7263 + C7262) * C47745) * C10311 +
            ((C4579 * C6771 + C4575 * C6773 + C4580 * C6772 + C47824 * C6774) *
                 C116 +
             (C4579 * C6775 + C4575 * C6777 + C4580 * C6776 + C47824 * C6778) *
                 C47745) *
                C47857) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47640 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47647 +
            (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
             ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
                C3602) *
               C2332 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47647 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47640 -
            (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
             ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
                C3602) *
               C47602) *
              C47791 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47647 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47640 -
            (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
             ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
                C3602) *
               C2332 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47640 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47647 +
            (((C6985 + C6984) * C116 + (C6983 + C6982) * C47745) * C10311 +
             ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                  C116 +
              (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                  C47745) *
                 C47857) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47602) *
              C47873 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C2332 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C47860 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C3094 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C2332 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C3094 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47883 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47644 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C3094) *
              C47879 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C3094 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47644) *
              C47869 +
          ((((C6397 + C6396) * C116 + (C6395 + C6394) * C47745) * C10311 +
            ((C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                 C116 +
             (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C1284 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C1285 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C1286 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47557 * C47847) *
              C47791 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C1285 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C1284 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C1286 +
           (((C6041 + C6040) * C116 + (C6039 + C6038) * C47745) * C10311 +
            ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C116 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C47805 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47602) *
              C554 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47602 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47805) *
              C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C47805 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47602) *
              C556 +
          ((((C5086 + C5087) * C116 + (C5088 + C5089) * C47745) * C10311 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                 C47745 +
             (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                 C116) *
                C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C1664 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C1665 +
            (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
             ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
                C47840) *
               C47805 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C1665 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C1664 -
            (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
             ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
                C47840) *
               C47602) *
              C47791 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C1665 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C1664 -
            (((C4580 * C1850 + C47824 * C1862 + C4579 * C1851 + C4575 * C1863) *
                  C47745 +
              (C4580 * C1844 + C47824 * C1853 + C4579 * C1845 + C4575 * C1854) *
                  C116) *
                 C47857 +
             ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
                C47840) *
               C47805 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C1664 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C1665 +
            (((C6985 + C6984) * C116 + (C6983 + C6982) * C47745) * C10311 +
             ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                  C116 +
              (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                  C47745) *
                 C47857) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47806 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C1284 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47644 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47806) *
              C1285 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47806 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47644) *
              C1286 +
          ((((C6397 + C6396) * C116 + (C6395 + C6394) * C47745) * C10311 +
            ((C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                 C116 +
             (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C47602) *
              C258 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C47805 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C259 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C47806 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C2116 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C2117 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C2118 -
           (((C12374 + C12375) * C47745 + (C12376 + C12377) * C116) * C47857 +
            ((C12373 + C12372) * C47745 + (C12371 + C12370) * C116) * C10311) *
               C47853) *
              C47805 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C2117 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C2116 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C2118 +
           (((C7265 + C7264) * C116 + (C7263 + C7262) * C47745) * C10311 +
            ((C4579 * C6771 + C4575 * C6773 + C4580 * C6772 + C47824 * C6774) *
                 C116 +
             (C4579 * C6775 + C4575 * C6777 + C4580 * C6776 + C47824 * C6778) *
                 C47745) *
                C47857) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                    C116 +
                (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                    C47745) *
                   C10311 +
               ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                    C116 +
                (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C108 -
              (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                    C47745 +
                (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                    C116) *
                   C47857 +
               ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                    C47745 +
                (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                    C116) *
                   C10311) *
                  C47557 * C47539 * C109 +
              (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                    C116 +
                (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                    C47745) *
                   C10311 +
               ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                    C116 +
                (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C110 -
              (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                    C47745 +
                (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                    C116) *
                   C47857 +
               ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                    C47745 +
                (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                    C116) *
                   C10311) *
                  C47557 * C47539 * C111 +
              (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
                    C116 +
                (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
                    C47745) *
                   C10311 +
               ((C4579 * C422 + C4575 * C441 + C4580 * C662 + C47824 * C663) *
                    C116 +
                (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47824 * C665) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                     C116 +
                 (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                     C47745) *
                    C10311 +
                ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                     C116 +
                 (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                     C47745) *
                    C47857) *
                   C47557 * C47876 -
               (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
                ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                   C47557 * C47864 +
               (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
                ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                   C47557 * C47837) *
                  C258 +
              ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
                ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                   C47557 * C47864 -
               (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                     C47745 +
                 (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                     C116) *
                    C47857 +
                ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                     C47745 +
                 (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                     C116) *
                    C10311) *
                   C47557 * C47876 -
               (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
                ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                   C47557 * C47837) *
                  C259 +
              ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                     C116 +
                 (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                     C47745) *
                    C10311 +
                ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                     C116 +
                 (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                     C47745) *
                    C47857) *
                   C47557 * C47876 -
               (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
                ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                   C47557 * C47864 +
               (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
                ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 +
                  C47824 * C1441) *
                     C116 +
                 (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 +
                  C47824 * C1443) *
                     C47745) *
                    C47857) *
                   C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47877 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47866 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C258 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47866 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47877 -
           (((C4580 * C1850 + C47824 * C1862 + C4579 * C1851 + C4575 * C1863) *
                 C47745 +
             (C4580 * C1844 + C47824 * C1853 + C4579 * C1845 + C4575 * C1854) *
                 C116) *
                C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C47840) *
              C47539 * C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47877 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47866 +
           (((C10677 + C10676) * C116 + (C10675 + C10674) * C47745) * C10311 +
            ((C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47824 * C2121) *
                 C116 +
             (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C942 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C943 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C943 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C942 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C942 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C943 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
              C47557 * C1010 -
          (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
           ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
              C47557 * C1011 +
          (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
           ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
              C47557 * C1012 -
          (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
           ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
              C47557 * C1013 +
          (((C5709 + C5708) * C116 + (C5707 + C5706) * C47745) * C10311 +
           ((C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C116 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47877 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47866 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C942 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47866 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47877 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C47840) *
              C943 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47877 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47866 +
           (((C5899 + C5898) * C116 + (C5897 + C5896) * C47745) * C10311 +
            ((C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                 C116 +
             (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C1664 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C1665 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47873 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C1665 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C1664 -
           (((C4580 * C1850 + C47824 * C1862 + C4579 * C1851 + C4575 * C1863) *
                 C47745 +
             (C4580 * C1844 + C47824 * C1853 + C4579 * C1845 + C4575 * C1854) *
                 C116) *
                C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C47840) *
              C47539 * C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C1664 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C1665 +
           (((C10677 + C10676) * C116 + (C10675 + C10674) * C47745) * C10311 +
            ((C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47824 * C2121) *
                 C116 +
             (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C1664 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C1665 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47876 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C1665 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C1664 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C47840) *
              C47864 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C1664 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C1665 +
           (((C5899 + C5898) * C116 + (C5897 + C5896) * C47745) * C10311 +
            ((C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                 C116 +
             (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
              C1839 -
          (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
           ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
              C1840 +
          (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
           ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
              C1841 -
          (((C12374 + C12375) * C47745 + (C12376 + C12377) * C116) * C47857 +
           ((C12373 + C12372) * C47745 + (C12371 + C12370) * C116) * C10311) *
              C1842 +
          (((C12377 + C12376) * C116 + (C12375 + C12374) * C47745) * C10311 +
           ((C4579 * C12345 + C4575 * C12347 + C4580 * C12346 +
             C47824 * C12348) *
                C116 +
            (C4579 * C12349 + C4575 * C12351 + C4580 * C12350 +
             C47824 * C12352) *
                C47745) *
               C47857) *
              C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C942 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C943 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C47806 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C47837) *
              C47791 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C942 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C943 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47806 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47539 * C554 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47644 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47806) *
              C47539 * C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47806 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47644) *
              C47539 * C556 +
          ((((C10946 + C10947) * C116 + (C10948 + C10949) * C47745) * C10311 +
            ((C4579 * C421 + C4575 * C439 + C4580 * C423 + C47824 * C442) *
                 C116 +
             (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C2116 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C2117 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C2118 -
           (((C12374 + C12375) * C47745 + (C12376 + C12377) * C116) * C47857 +
            ((C12373 + C12372) * C47745 + (C12371 + C12370) * C116) * C10311) *
               C47853) *
              C47539 * C47791 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C2117 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C2116 -
           (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C2118 +
           (((C12713 + C12712) * C116 + (C12711 + C12710) * C47745) * C10311 +
            ((C4579 * C1848 + C4575 * C1857 + C4580 * C1849 + C47824 * C1858) *
                 C116 +
             (C4579 * C1860 + C4575 * C1866 + C4580 * C1861 + C47824 * C1867) *
                 C47745) *
                C47857) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                 C116 +
             (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47864 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47864 -
           (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                 C47745 +
             (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                 C116) *
                C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47876 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                 C116 +
             (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47864 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                C116 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                C47745 +
            (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                C116) *
               C47857 +
           ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C47745 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C10311) *
              C47557 * C47539 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C47745) *
               C10311 +
           ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                C116 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                C47745 +
            (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                C116) *
               C47857 +
           ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C47745 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C10311) *
              C47557 * C47539 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
                C47745) *
               C10311 +
           ((C4579 * C422 + C4575 * C441 + C4580 * C662 + C47824 * C663) *
                C116 +
            (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C942 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C943 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C943 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C942 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C942 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C943 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
              C47557 * C1010 -
          (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
           ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
              C47557 * C1011 +
          (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
           ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
              C47557 * C1012 -
          (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
           ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
              C47557 * C1013 +
          (((C5709 + C5708) * C116 + (C5707 + C5706) * C47745) * C10311 +
           ((C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C116 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C1664 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C1665 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47873 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C1665 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C1664 -
           (((C4580 * C1850 + C47824 * C1862 + C4579 * C1851 + C4575 * C1863) *
                 C47745 +
             (C4580 * C1844 + C47824 * C1853 + C4579 * C1845 + C4575 * C1854) *
                 C116) *
                C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C47840) *
              C47539 * C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C1664 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C1665 +
           (((C10677 + C10676) * C116 + (C10675 + C10674) * C47745) * C10311 +
            ((C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47824 * C2121) *
                 C116 +
             (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C1664 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C1665 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47876 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C1665 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C1664 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C47840) *
              C47864 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C1664 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C1665 +
           (((C5899 + C5898) * C116 + (C5897 + C5896) * C47745) * C10311 +
            ((C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                 C116 +
             (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47602) *
              C47516 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C47805 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C47525 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C3094 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C3094) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47640 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47647 +
            (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
             ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
                C3602) *
               C47805 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47647 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47640 -
            (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
             ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
                C3602) *
               C47602) *
              C2440 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47647 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47640 -
            (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
             ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
                C3602) *
               C47805 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47640 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47647 +
            (((C6985 + C6984) * C116 + (C6983 + C6982) * C47745) * C10311 +
             ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47824 * C2227) *
                  C116 +
              (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47824 * C2233) *
                  C47745) *
                 C47857) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47876 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47864 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C3094 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C47837) *
              C2440 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C47876 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47864 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C3094 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47539 * C47882 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47644 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C3094) *
              C47539 * C47875 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C3094 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47644) *
              C47539 * C47862 +
          ((((C10946 + C10947) * C116 + (C10948 + C10949) * C47745) * C10311 +
            ((C4579 * C421 + C4575 * C439 + C4580 * C423 + C47824 * C442) *
                 C116 +
             (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47884 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47881 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C47872 -
           (((C12374 + C12375) * C47745 + (C12376 + C12377) * C116) * C47857 +
            ((C12373 + C12372) * C47745 + (C12371 + C12370) * C116) * C10311) *
               C47853) *
              C47539 * C2440 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47881 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47884 -
           (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C47872 +
           (((C12713 + C12712) * C116 + (C12711 + C12710) * C47745) * C10311 +
            ((C4579 * C1848 + C4575 * C1857 + C4580 * C1849 + C47824 * C1858) *
                 C116 +
             (C4579 * C1860 + C4575 * C1866 + C4580 * C1861 + C47824 * C1867) *
                 C47745) *
                C47857) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47640 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47647 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C12370 + C12371) * C116 + (C12372 + C12373) * C47745) * C47857) *
               C3602) *
              C47539 * C47516 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47647 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47640 -
           (((C12710 + C12711) * C47745 + (C12712 + C12713) * C116) * C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C3602) *
              C47539 * C47525 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47640 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47647 +
           (((C10677 + C10676) * C116 + (C10675 + C10674) * C47745) * C10311 +
            ((C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47824 * C2121) *
                 C116 +
             (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47824 * C2123) *
                 C47745) *
                C47857) *
               C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C3094 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47539 * C47882 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47644 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C3094) *
              C47539 * C47875 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C3094 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47644) *
              C47539 * C47862 +
          ((((C10946 + C10947) * C116 + (C10948 + C10949) * C47745) * C10311 +
            ((C4579 * C421 + C4575 * C439 + C4580 * C423 + C47824 * C442) *
                 C116 +
             (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C3094 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47876 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C3094) *
               C47864 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C3094 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C47837) *
              C2440 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C3094) *
               C47876 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C3094 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47864 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C47805 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47602) *
              C554 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47602 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47805) *
              C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C47805 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47602) *
              C556 +
          ((((C5086 + C5087) * C116 + (C5088 + C5089) * C47745) * C10311 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47824 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                 C47745 +
             (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                 C116) *
                C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C1284 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C1285 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C1286 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47557 * C47847) *
              C47791 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C1285 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C1284 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C1286 +
           (((C6041 + C6040) * C116 + (C6039 + C6038) * C47745) * C10311 +
            ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47824 * C1547) *
                 C116 +
             (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C47602) *
              C258 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C47805 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C47602) *
              C259 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                  C47745) *
                 C10311 +
             ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
                C47806 -
            (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
             ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
                C47644) *
               C47805 +
           ((((C5449 + C5448) * C116 + (C5447 + C5446) * C47745) * C10311 +
             ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47824 * C2015) *
                  C116 +
              (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
             ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
                C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47806 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C1284 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47644 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47806) *
              C1285 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47806 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47644) *
              C1286 +
          ((((C6397 + C6396) * C116 + (C6395 + C6394) * C47745) * C10311 +
            ((C4579 * C5855 + C4575 * C5857 + C4580 * C5856 + C47824 * C5858) *
                 C116 +
             (C4579 * C5859 + C4575 * C5861 + C4580 * C5860 + C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
            ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
               C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                 C116 +
             (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47864 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47864 -
           (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                 C47745 +
             (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                 C116) *
                C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47876 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                 C116 +
             (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47864 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                C116 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                C47745 +
            (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                C116) *
               C47857 +
           ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C47745 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C10311) *
              C47557 * C47539 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C47745) *
               C10311 +
           ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                C116 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                C47745 +
            (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                C116) *
               C47857 +
           ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C47745 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C10311) *
              C47557 * C47539 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
                C47745) *
               C10311 +
           ((C4579 * C422 + C4575 * C441 + C4580 * C662 + C47824 * C663) *
                C116 +
            (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47877 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47866 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C258 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47866 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47877 -
           (((C4580 * C1850 + C47824 * C1862 + C4579 * C1851 + C4575 * C1863) *
                 C47745 +
             (C4580 * C1844 + C47824 * C1853 + C4579 * C1845 + C4575 * C1854) *
                 C116) *
                C47857 +
            ((C10669 + C10668) * C47745 + (C10667 + C10666) * C116) * C10311) *
               C47840) *
              C47539 * C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47877 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47866 +
           (((C10677 + C10676) * C116 + (C10675 + C10674) * C47745) * C10311 +
            ((C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47824 * C2121) *
                 C116 +
             (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C942 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C943 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C943 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C942 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C942 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C943 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
              C47557 * C1010 -
          (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
           ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
              C47557 * C1011 +
          (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
           ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
              C47557 * C1012 -
          (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
           ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
              C47557 * C1013 +
          (((C5709 + C5708) * C116 + (C5707 + C5706) * C47745) * C10311 +
           ((C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C116 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47877 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47866 +
           (((C10661 + C10660) * C116 + (C10659 + C10658) * C47745) * C10311 +
            ((C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47824 * C1854) *
                 C116 +
             (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C942 +
          ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
            ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
               C47866 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47877 -
           (((C7262 + C7263) * C47745 + (C7264 + C7265) * C116) * C47857 +
            ((C5891 + C5890) * C47745 + (C5889 + C5888) * C116) * C10311) *
               C47840) *
              C943 +
          ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47877 -
           (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
            ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
               C47866 +
           (((C5899 + C5898) * C116 + (C5897 + C5896) * C47745) * C10311 +
            ((C4579 * C7245 + C4575 * C7247 + C4580 * C7246 + C47824 * C7248) *
                 C116 +
             (C4579 * C7249 + C4575 * C7251 + C4580 * C7250 + C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47806 -
           (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
            ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
               C47644) *
              C47539 * C554 +
          ((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
            ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
               C47644 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47806) *
              C47539 * C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47806 -
           (((C10674 + C10675) * C47745 + (C10676 + C10677) * C116) * C47857 +
            ((C10673 + C10672) * C47745 + (C10671 + C10670) * C116) * C10311) *
               C47644) *
              C47539 * C556 +
          ((((C10946 + C10947) * C116 + (C10948 + C10949) * C47745) * C10311 +
            ((C4579 * C421 + C4575 * C439 + C4580 * C423 + C47824 * C442) *
                 C116 +
             (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C10949 + C10948) * C47745 + (C10947 + C10946) * C116) * C47857 +
            ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                 C47745 +
             (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C10311) *
               C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                  C47745) *
                 C10311 +
             ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
                C47806 -
            (((C10658 + C10659) * C47745 + (C10660 + C10661) * C116) * C47857 +
             ((C10657 + C10656) * C47745 + (C10655 + C10654) * C116) * C10311) *
                C47644) *
               C942 +
           ((((C5441 + C5440) * C116 + (C5439 + C5438) * C47745) * C10311 +
             ((C5888 + C5889) * C116 + (C5890 + C5891) * C47745) * C47857) *
                C47644 -
            (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
             ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
                C47806) *
               C943 +
           ((((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
             ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
                C47806 -
            (((C5896 + C5897) * C47745 + (C5898 + C5899) * C116) * C47857 +
             ((C5895 + C5894) * C47745 + (C5893 + C5892) * C116) * C10311) *
                C47644) *
               C47837) *
              C47791 +
          (((((C10662 + C10663) * C116 + (C10664 + C10665) * C47745) * C10311 +
             ((C10666 + C10667) * C116 + (C10668 + C10669) * C47745) * C47857) *
                C47644 -
            (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
             ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                  C47745 +
              (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C10311) *
                C47806) *
               C942 +
           ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
             ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
                C47806 -
            (((C6982 + C6983) * C47745 + (C6984 + C6985) * C116) * C47857 +
             ((C5445 + C5444) * C47745 + (C5443 + C5442) * C116) * C10311) *
                C47644) *
               C943 +
           ((((C6247 + C6246) * C116 + (C6245 + C6244) * C47745) * C10311 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47824 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
             ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
                C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                C116 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                C47745 +
            (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                C116) *
               C47857 +
           ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                C47745 +
            (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C10311) *
              C47557 * C47539 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                C47745) *
               C10311 +
           ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                C116 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C4580 * C440 + C47824 * C452 + C4579 * C437 + C4575 * C450) *
                C47745 +
            (C4580 * C422 + C47824 * C441 + C4579 * C420 + C4575 * C436) *
                C116) *
               C47857 +
           ((C4580 * C133 + C47824 * C142 + C4579 * C130 + C4575 * C141) *
                C47745 +
            (C4580 * C121 + C47824 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C10311) *
              C47557 * C47539 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47824 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47824 * C143) *
                C47745) *
               C10311 +
           ((C4579 * C422 + C4575 * C441 + C4580 * C662 + C47824 * C663) *
                C116 +
            (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C4579 * C416 + C4575 * C429 + C4580 * C415 + C47824 * C428) *
                 C116 +
             (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C47864 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C47864 -
           (((C4580 * C424 + C47824 * C444 + C4579 * C425 + C4575 * C445) *
                 C47745 +
             (C4580 * C414 + C47824 * C427 + C4579 * C415 + C4575 * C428) *
                 C116) *
                C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C47876 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C4579 * C414 + C4575 * C427 + C4580 * C420 + C47824 * C436) *
                 C116 +
             (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C47864 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                 C47745) *
                C10311 +
            ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
               C47557 * C942 -
           (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
            ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
               C47557 * C943 +
           (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
            ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C4786 + C4787) * C116 + (C4788 + C4789) * C47745) * C10311 +
            ((C5442 + C5443) * C116 + (C5444 + C5445) * C47745) * C47857) *
               C47557 * C943 -
           (((C10665 + C10664) * C47745 + (C10663 + C10662) * C116) * C47857 +
            ((C4580 * C129 + C47824 * C140 + C4579 * C128 + C4575 * C139) *
                 C47745 +
             (C4580 * C119 + C47824 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C10311) *
               C47557 * C942 -
           (((C6244 + C6245) * C47745 + (C6246 + C6247) * C116) * C47857 +
            ((C4793 + C4792) * C47745 + (C4791 + C4790) * C116) * C10311) *
               C47557 * C47837) *
              C47860 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47824 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47824 * C141) *
                 C47745) *
                C10311 +
            ((C10670 + C10671) * C116 + (C10672 + C10673) * C47745) * C47857) *
               C47557 * C942 -
           (((C5446 + C5447) * C47745 + (C5448 + C5449) * C116) * C47857 +
            ((C4797 + C4796) * C47745 + (C4795 + C4794) * C116) * C10311) *
               C47557 * C943 +
           (((C4801 + C4800) * C116 + (C4799 + C4798) * C47745) * C10311 +
            ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47824 * C1441) *
                 C116 +
             (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47824 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47824 * C139) *
                C47745) *
               C10311 +
           ((C10654 + C10655) * C116 + (C10656 + C10657) * C47745) * C47857) *
              C47557 * C1010 -
          (((C5438 + C5439) * C47745 + (C5440 + C5441) * C116) * C47857 +
           ((C4781 + C4780) * C47745 + (C4779 + C4778) * C116) * C10311) *
              C47557 * C1011 +
          (((C4785 + C4784) * C116 + (C4783 + C4782) * C47745) * C10311 +
           ((C5892 + C5893) * C116 + (C5894 + C5895) * C47745) * C47857) *
              C47557 * C1012 -
          (((C6394 + C6395) * C47745 + (C6396 + C6397) * C116) * C47857 +
           ((C5705 + C5704) * C47745 + (C5703 + C5702) * C116) * C10311) *
              C47557 * C1013 +
          (((C5709 + C5708) * C116 + (C5707 + C5706) * C47745) * C10311 +
           ((C4579 * C6377 + C4575 * C6379 + C4580 * C6378 + C47824 * C6380) *
                C116 +
            (C4579 * C6381 + C4575 * C6383 + C4580 * C6382 + C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47598 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47605 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47557 * C2700) *
              C47516 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47605 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47598 -
           ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C2700) *
              C47525 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47598 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47605 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47598 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C47605 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C47806 -
            ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C2700) *
              C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C47598 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47605 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C47806) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47883 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47879 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47557 * C47869 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47557 * C47847) *
              C2440 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47879 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47883 -
           ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47869 +
           ((C17339 + C17338) * C15895 + (C17337 + C17336) * C15891 +
            (C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
             C47824 * C1030) *
                C15896 +
            (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
             C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C2332 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47602) *
              C47882 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47602 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C2332 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47602) *
              C47862 +
          (((C16400 + C16401) * C15895 + (C16402 + C16403) * C15891 +
            (C15893 * C268 + C15889 * C286 + C15894 * C270 + C47824 * C289) *
                C15896 +
            (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47877 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47866 +
            ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                 C15895 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                 C15891 +
             (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
                C47760 * C47840) *
               C2332 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47866 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47877 -
            ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
             (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
                C47760 * C47840) *
               C47602) *
              C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47866 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47877 -
            ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
             (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                 C15891 +
             (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                 C15895) *
                C47760 * C47840) *
               C2332 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47877 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47866 +
            ((C18267 + C18266) * C15895 + (C18265 + C18264) * C15891 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47824 * C1173) *
                 C15896 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47824 * C1185) *
                 C47855) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C47602) *
              C47516 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C2332 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C47806 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C47806) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C2332 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47602) *
              C47882 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47602 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C2332 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47602) *
              C47862 +
          (((C16400 + C16401) * C15895 + (C16402 + C16403) * C15891 +
            (C15893 * C268 + C15889 * C286 + C15894 * C270 + C47824 * C289) *
                C15896 +
            (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47883 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47879 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47557 * C47869 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47557 * C47847) *
              C2440 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47879 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47883 -
           ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47869 +
           ((C17339 + C17338) * C15895 + (C17337 + C17336) * C15891 +
            (C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
             C47824 * C1030) *
                C15896 +
            (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
             C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47598 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47605 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C3094 -
            ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C2700) *
              C47791 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C47598 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47605 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C3094) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47640 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47647 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C3602) *
              C47598 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47647 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47640 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C3602) *
              C47605 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47640 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47647 +
           ((C17197 + C17196) * C15895 + (C17195 + C17194) * C15891 +
            (C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
             C47824 * C5858) *
                C15896 +
            (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
             C47824 * C5862) *
                C47855) *
               C47760 * C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C3094 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47883 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47644 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C3094) *
              C47879 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C3094 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47644) *
              C47869 +
          (((C17687 + C17686) * C15895 + (C17685 + C17684) * C15891 +
            (C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C15896 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C2332 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C3094 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47884 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47881 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47872 -
           ((C18536 + C18537) * C47855 + (C18538 + C18539) * C15896 +
            (C15894 * C1851 + C47824 * C1863 + C15893 * C1852 +
             C15889 * C1864) *
                C15891 +
            (C15894 * C1845 + C47824 * C1854 + C15893 * C1846 +
             C15889 * C1855) *
                C15895) *
               C47760 * C47853) *
              C2332 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47881 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47884 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C47872 +
           ((C18539 + C18538) * C15895 + (C18537 + C18536) * C15891 +
            (C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
             C47824 * C7248) *
                C15896 +
            (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
             C47824 * C7252) *
                C47855) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47640 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47647 +
            ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                 C15895 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                 C15891 +
             (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
                C47760 * C3602) *
               C2332 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47647 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47640 -
            ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
             (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
                C47760 * C3602) *
               C47602) *
              C47791 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47647 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47640 -
            ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
             (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                 C15891 +
             (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                 C15895) *
                C47760 * C3602) *
               C2332 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47640 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47647 +
            ((C18267 + C18266) * C15895 + (C18265 + C18264) * C15891 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47824 * C1173) *
                 C15896 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47824 * C1185) *
                 C47855) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C2332 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C3094 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C2332 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C3094 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47883 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47644 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C3094) *
              C47879 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C3094 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47644) *
              C47869 +
          (((C17687 + C17686) * C15895 + (C17685 + C17684) * C15891 +
            (C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C15896 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C1284 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C1285 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47557 * C1286 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47557 * C47847) *
              C47791 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C1285 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C1284 -
           ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C1286 +
           ((C17339 + C17338) * C15895 + (C17337 + C17336) * C15891 +
            (C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
             C47824 * C1030) *
                C15896 +
            (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
             C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47805 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47602) *
              C554 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47602 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47805 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47602) *
              C556 +
          (((C16400 + C16401) * C15895 + (C16402 + C16403) * C15891 +
            (C15893 * C268 + C15889 * C286 + C15894 * C270 + C47824 * C289) *
                C15896 +
            (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C1664 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C1665 +
            ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                 C15895 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                 C15891 +
             (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
                C47760 * C47840) *
               C47805 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C1665 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C1664 -
            ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
             (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
                C47760 * C47840) *
               C47602) *
              C47791 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C1665 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C1664 -
            ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
             (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                 C15891 +
             (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                 C15895) *
                C47760 * C47840) *
               C47805 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C1664 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C1665 +
            ((C18267 + C18266) * C15895 + (C18265 + C18264) * C15891 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47824 * C1173) *
                 C15896 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47824 * C1185) *
                 C47855) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47806 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C1284 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47644 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47806) *
              C1285 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47806 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47644) *
              C1286 +
          (((C17687 + C17686) * C15895 + (C17685 + C17684) * C15891 +
            (C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C15896 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C15893 * C1155 + C15889 * C1170 + C15894 * C1154 +
              C47824 * C1169) *
                 C15896 +
             (C15893 * C1167 + C15889 * C1182 + C15894 * C1166 +
              C47824 * C1181) *
                 C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C47805 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C15894 * C1165 + C47824 * C1180 + C15893 * C1166 +
              C15889 * C1181) *
                 C47855 +
             (C15894 * C1153 + C47824 * C1168 + C15893 * C1154 +
              C15889 * C1169) *
                 C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C47806 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C2116 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C2117 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C2118 -
           ((C18536 + C18537) * C47855 + (C18538 + C18539) * C15896 +
            (C15894 * C1851 + C47824 * C1863 + C15893 * C1852 +
             C15889 * C1864) *
                C15891 +
            (C15894 * C1845 + C47824 * C1854 + C15893 * C1846 +
             C15889 * C1855) *
                C15895) *
               C47760 * C47853) *
              C47805 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C2117 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C2116 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C2118 +
           ((C18539 + C18538) * C15895 + (C18537 + C18536) * C15891 +
            (C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
             C47824 * C7248) *
                C15896 +
            (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
             C47824 * C7252) *
                C47855) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                   C15895 +
               (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                   C15891 +
               (C15893 * C263 + C15889 * C276 + C15894 * C262 + C47824 * C275) *
                   C15896 +
               (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47824 * C292) *
                   C47855) *
                  C47760 * C47557 * C47539 * C108 -
              ((C15894 * C271 + C47824 * C291 + C15893 * C272 + C15889 * C292) *
                   C47855 +
               (C15894 * C261 + C47824 * C274 + C15893 * C262 + C15889 * C275) *
                   C15896 +
               (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                   C15891 +
               (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                   C15895) *
                  C47760 * C47557 * C47539 * C109 +
              ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                   C15895 +
               (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                   C15891 +
               (C15893 * C261 + C15889 * C274 + C15894 * C267 + C47824 * C283) *
                   C15896 +
               (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47824 * C297) *
                   C47855) *
                  C47760 * C47557 * C47539 * C110 -
              ((C15894 * C287 + C47824 * C299 + C15893 * C284 + C15889 * C297) *
                   C47855 +
               (C15894 * C269 + C47824 * C288 + C15893 * C267 + C15889 * C283) *
                   C15896 +
               (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                   C15891 +
               (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                   C15895) *
                  C47760 * C47557 * C47539 * C111 +
              ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
                   C15895 +
               (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
                   C15891 +
               (C15893 * C269 + C15889 * C288 + C15894 * C558 + C47824 * C559) *
                   C15896 +
               (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47824 * C561) *
                   C47855) *
                  C47760 * C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                 C47824 * C125) *
                    C15895 +
                (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                 C47824 * C139) *
                    C15891 +
                (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                   C47760 * C47557 * C47876 -
               ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
                (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                   C47760 * C47557 * C47864 +
               ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
                (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
                 C47824 * C1026) *
                    C15896 +
                (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
                 C47824 * C1035) *
                    C47855) *
                   C47760 * C47557 * C47837) *
                  C258 +
              (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
                (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                   C47760 * C47557 * C47864 -
               ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
                (C15894 * C129 + C47824 * C140 + C15893 * C128 +
                 C15889 * C139) *
                    C15891 +
                (C15894 * C119 + C47824 * C126 + C15893 * C118 +
                 C15889 * C125) *
                    C15895) *
                   C47760 * C47557 * C47876 -
               ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
                 C15889 * C1035) *
                    C47855 +
                (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
                 C15889 * C1026) *
                    C15896 +
                (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                   C47760 * C47557 * C47837) *
                  C259 +
              (((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                 C47824 * C131) *
                    C15895 +
                (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                 C47824 * C141) *
                    C15891 +
                (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                   C47760 * C47557 * C47876 -
               ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
                (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                   C47760 * C47557 * C47864 +
               ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
                (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
                 C47824 * C1291) *
                    C15896 +
                (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
                 C47824 * C1293) *
                    C47855) *
                   C47760 * C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47877 -
           ((C15894 * C821 + C47824 * C828 + C15893 * C820 + C15889 * C827) *
                C47855 +
            (C15894 * C813 + C47824 * C818 + C15893 * C812 + C15889 * C817) *
                C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C15893 * C1152 + C15889 * C1164 + C15894 * C1151 +
             C47824 * C1163) *
                C15896 +
            (C15893 * C1161 + C15889 * C1179 + C15894 * C1160 +
             C47824 * C1178) *
                C47855) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C15893 * C813 + C15889 * C818 + C15894 * C814 + C47824 * C819) *
                C15896 +
            (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47866 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47877 -
           ((C15894 * C1159 + C47824 * C1177 + C15893 * C1160 +
             C15889 * C1178) *
                C47855 +
            (C15894 * C1150 + C47824 * C1162 + C15893 * C1151 +
             C15889 * C1163) *
                C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47877 -
           ((C15894 * C823 + C47824 * C830 + C15893 * C822 + C15889 * C829) *
                C47855 +
            (C15894 * C815 + C47824 * C824 + C15893 * C814 + C15889 * C819) *
                C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47824 * C439) *
                C15895 +
            (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47824 * C451) *
                C15891 +
            (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
             C47824 * C2015) *
                C15896 +
            (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
             C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C942 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C943 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C943 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C942 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C942 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C943 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
              C47760 * C47557 * C1010 -
          ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
           (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
              C47760 * C47557 * C1011 +
          ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
           (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
              C47760 * C47557 * C1012 -
          ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
           (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
              C47760 * C47557 * C1013 +
          ((C17015 + C17014) * C15895 + (C17013 + C17012) * C15891 +
           (C15893 * C5677 + C15889 * C5679 + C15894 * C5678 + C47824 * C5680) *
               C15896 +
           (C15893 * C5681 + C15889 * C5683 + C15894 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47877 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C942 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47866 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47877 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C47840) *
              C943 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47877 -
           ((C15894 * C1549 + C47824 * C1552 + C15893 * C1548 +
             C15889 * C1551) *
                C47855 +
            (C15894 * C1543 + C47824 * C1546 + C15893 * C1542 +
             C15889 * C1545) *
                C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47866 +
           ((C17197 + C17196) * C15895 + (C17195 + C17194) * C15891 +
            (C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
             C47824 * C5858) *
                C15896 +
            (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
             C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C1664 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C1665 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C1664 -
           ((C15894 * C1159 + C47824 * C1177 + C15893 * C1160 +
             C15889 * C1178) *
                C47855 +
            (C15894 * C1150 + C47824 * C1162 + C15893 * C1151 +
             C15889 * C1163) *
                C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C1664 -
           ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47824 * C439) *
                C15895 +
            (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47824 * C451) *
                C15891 +
            (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
             C47824 * C2015) *
                C15896 +
            (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
             C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C1664 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C47876 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C1665 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C1664 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C47840) *
              C47864 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C1664 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C1665 +
           ((C17197 + C17196) * C15895 + (C17195 + C17194) * C15891 +
            (C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
             C47824 * C5858) *
                C15896 +
            (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
             C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
              C47760 * C1839 -
          ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
           (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
               C15891 +
           (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
               C15895) *
              C47760 * C1840 +
          ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
               C15895 +
           (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
               C15891 +
           (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
              C47760 * C1841 -
          ((C15894 * C2229 + C47824 * C2232 + C15893 * C2228 + C15889 * C2231) *
               C47855 +
           (C15894 * C2223 + C47824 * C2226 + C15893 * C2222 + C15889 * C2225) *
               C15896 +
           (C15894 * C1851 + C47824 * C1863 + C15893 * C1852 + C15889 * C1864) *
               C15891 +
           (C15894 * C1845 + C47824 * C1854 + C15893 * C1846 + C15889 * C1855) *
               C15895) *
              C47760 * C1842 +
          ((C15893 * C1847 + C15889 * C1856 + C15894 * C1848 + C47824 * C1857) *
               C15895 +
           (C15893 * C1859 + C15889 * C1865 + C15894 * C1860 + C47824 * C1866) *
               C15891 +
           (C15893 * C6771 + C15889 * C6773 + C15894 * C6772 + C47824 * C6774) *
               C15896 +
           (C15893 * C6775 + C15889 * C6777 + C15894 * C6776 + C47824 * C6778) *
               C47855) *
              C47760 * C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C942 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C943 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C47806 -
            ((C15894 * C1549 + C47824 * C1552 + C15893 * C1548 +
              C15889 * C1551) *
                 C47855 +
             (C15894 * C1543 + C47824 * C1546 + C15893 * C1542 +
              C15889 * C1545) *
                 C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C942 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C943 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47806 -
           ((C15894 * C821 + C47824 * C828 + C15893 * C820 + C15889 * C827) *
                C47855 +
            (C15894 * C813 + C47824 * C818 + C15893 * C812 + C15889 * C817) *
                C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C15893 * C813 + C15889 * C818 + C15894 * C814 + C47824 * C819) *
                C15896 +
            (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47644 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47806 -
           ((C15894 * C823 + C47824 * C830 + C15893 * C822 + C15889 * C829) *
                C47855 +
            (C15894 * C815 + C47824 * C824 + C15893 * C814 + C15889 * C819) *
                C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47824 * C441) *
                C15895 +
            (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47824 * C452) *
                C15891 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                C15896 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C2116 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C2117 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C2118 -
           ((C15894 * C2229 + C47824 * C2232 + C15893 * C2228 +
             C15889 * C2231) *
                C47855 +
            (C15894 * C2223 + C47824 * C2226 + C15893 * C2222 +
             C15889 * C2225) *
                C15896 +
            (C15894 * C1851 + C47824 * C1863 + C15893 * C1852 +
             C15889 * C1864) *
                C15891 +
            (C15894 * C1845 + C47824 * C1854 + C15893 * C1846 +
             C15889 * C1855) *
                C15895) *
               C47760 * C47853) *
              C47539 * C47791 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C2117 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C2116 -
           ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C2118 +
           ((C15893 * C1845 + C15889 * C1854 + C15894 * C1844 +
             C47824 * C1853) *
                C15895 +
            (C15893 * C1851 + C15889 * C1863 + C15894 * C1850 +
             C47824 * C1862) *
                C15891 +
            (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
             C47824 * C2227) *
                C15896 +
            (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
             C47824 * C2233) *
                C47855) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47864 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47876 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C15893 * C263 + C15889 * C276 + C15894 * C262 + C47824 * C275) *
               C15896 +
           (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C15894 * C271 + C47824 * C291 + C15893 * C272 + C15889 * C292) *
               C47855 +
           (C15894 * C261 + C47824 * C274 + C15893 * C262 + C15889 * C275) *
               C15896 +
           (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
               C15891 +
           (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
               C15895) *
              C47760 * C47557 * C47539 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
               C15895 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
               C15891 +
           (C15893 * C261 + C15889 * C274 + C15894 * C267 + C47824 * C283) *
               C15896 +
           (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C15894 * C287 + C47824 * C299 + C15893 * C284 + C15889 * C297) *
               C47855 +
           (C15894 * C269 + C47824 * C288 + C15893 * C267 + C15889 * C283) *
               C15896 +
           (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
               C15891 +
           (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
               C15895) *
              C47760 * C47557 * C47539 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
               C15895 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
               C15891 +
           (C15893 * C269 + C15889 * C288 + C15894 * C558 + C47824 * C559) *
               C15896 +
           (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C942 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C943 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C943 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C942 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C942 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C943 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
              C47760 * C47557 * C1010 -
          ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
           (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
              C47760 * C47557 * C1011 +
          ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
           (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
              C47760 * C47557 * C1012 -
          ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
           (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
              C47760 * C47557 * C1013 +
          ((C17015 + C17014) * C15895 + (C17013 + C17012) * C15891 +
           (C15893 * C5677 + C15889 * C5679 + C15894 * C5678 + C47824 * C5680) *
               C15896 +
           (C15893 * C5681 + C15889 * C5683 + C15894 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C1664 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C1665 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C1664 -
           ((C15894 * C1159 + C47824 * C1177 + C15893 * C1160 +
             C15889 * C1178) *
                C47855 +
            (C15894 * C1150 + C47824 * C1162 + C15893 * C1151 +
             C15889 * C1163) *
                C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C1664 -
           ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47824 * C439) *
                C15895 +
            (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47824 * C451) *
                C15891 +
            (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
             C47824 * C2015) *
                C15896 +
            (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
             C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C1664 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C1665 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C47876 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C1665 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C1664 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C47840) *
              C47864 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C1664 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C1665 +
           ((C17197 + C17196) * C15895 + (C17195 + C17194) * C15891 +
            (C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
             C47824 * C5858) *
                C15896 +
            (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
             C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47602) *
              C47516 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C47805 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C3094 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C3094) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47640 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47647 +
            ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                 C15895 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                 C15891 +
             (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
                C47760 * C3602) *
               C47805 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47647 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47640 -
            ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
             (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
                C47760 * C3602) *
               C47602) *
              C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47647 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47640 -
            ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
             (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                 C15891 +
             (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                 C15895) *
                C47760 * C3602) *
               C47805 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47640 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47647 +
            ((C18267 + C18266) * C15895 + (C18265 + C18264) * C15891 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47824 * C1173) *
                 C15896 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47824 * C1185) *
                 C47855) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47876 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47864 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C3094 -
            ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C47876 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47864 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C3094 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C47644 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C3094 -
           ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47824 * C441) *
                C15895 +
            (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47824 * C452) *
                C15891 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                C15896 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47884 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47881 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47872 -
           ((C18536 + C18537) * C47855 + (C18538 + C18539) * C15896 +
            (C15894 * C1851 + C47824 * C1863 + C15893 * C1852 +
             C15889 * C1864) *
                C15891 +
            (C15894 * C1845 + C47824 * C1854 + C15893 * C1846 +
             C15889 * C1855) *
                C15895) *
               C47760 * C47853) *
              C47539 * C2440 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C47881 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47884 -
           ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C47872 +
           ((C15893 * C1845 + C15889 * C1854 + C15894 * C1844 +
             C47824 * C1853) *
                C15895 +
            (C15893 * C1851 + C15889 * C1863 + C15894 * C1850 +
             C47824 * C1862) *
                C15891 +
            (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
             C47824 * C2227) *
                C15896 +
            (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
             C47824 * C2233) *
                C47855) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47640 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47647 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C3602) *
              C47539 * C47516 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C47647 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47640 -
           ((C18264 + C18265) * C47855 + (C18266 + C18267) * C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C3602) *
              C47539 * C47525 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47640 -
           ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47647 +
           ((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47824 * C439) *
                C15895 +
            (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47824 * C451) *
                C15891 +
            (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
             C47824 * C2015) *
                C15896 +
            (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
             C47824 * C2017) *
                C47855) *
               C47760 * C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C3094 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
               C47760 * C47644 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C3094 -
           ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47824 * C441) *
                C15895 +
            (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47824 * C452) *
                C15891 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                C15896 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C3094 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47876 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C3094) *
               C47864 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C3094 -
            ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C3094) *
               C47876 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C3094 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47864 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47805 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47602) *
              C554 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47602 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47805 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47602) *
              C556 +
          (((C16400 + C16401) * C15895 + (C16402 + C16403) * C15891 +
            (C15893 * C268 + C15889 * C286 + C15894 * C270 + C47824 * C289) *
                C15896 +
            (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47824 * C300) *
                C47855) *
               C47760 * C47557 * C47602 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C1284 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C1285 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47557 * C1286 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47557 * C47847) *
              C47791 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C1285 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C1284 -
           ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C1286 +
           ((C17339 + C17338) * C15895 + (C17337 + C17336) * C15891 +
            (C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
             C47824 * C1030) *
                C15896 +
            (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
             C47824 * C1039) *
                C47855) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C15893 * C1155 + C15889 * C1170 + C15894 * C1154 +
              C47824 * C1169) *
                 C15896 +
             (C15893 * C1167 + C15889 * C1182 + C15894 * C1166 +
              C47824 * C1181) *
                 C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C47805 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C15894 * C1165 + C47824 * C1180 + C15893 * C1166 +
              C15889 * C1181) *
                 C47855 +
             (C15894 * C1153 + C47824 * C1168 + C15893 * C1154 +
              C15889 * C1169) *
                 C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C15895 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C15891 +
             (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
                C47760 * C47806 -
            ((C16760 + C16761) * C47855 + (C16762 + C16763) * C15896 +
             (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                 C15891 +
             (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                 C15895) *
                C47760 * C47644) *
               C47805 +
           (((C16763 + C16762) * C15895 + (C16761 + C16760) * C15891 +
             (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C15896 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47855) *
                C47760 * C47644 -
            ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
             (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47806 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C1284 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47644 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47806) *
              C1285 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47806 -
           ((C17684 + C17685) * C47855 + (C17686 + C17687) * C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47644) *
              C1286 +
          (((C17687 + C17686) * C15895 + (C17685 + C17684) * C15891 +
            (C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C15896 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47855) *
               C47760 * C47644 -
           ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
            (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47864 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47876 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C15893 * C263 + C15889 * C276 + C15894 * C262 + C47824 * C275) *
               C15896 +
           (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C15894 * C271 + C47824 * C291 + C15893 * C272 + C15889 * C292) *
               C47855 +
           (C15894 * C261 + C47824 * C274 + C15893 * C262 + C15889 * C275) *
               C15896 +
           (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
               C15891 +
           (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
               C15895) *
              C47760 * C47557 * C47539 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
               C15895 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
               C15891 +
           (C15893 * C261 + C15889 * C274 + C15894 * C267 + C47824 * C283) *
               C15896 +
           (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C15894 * C287 + C47824 * C299 + C15893 * C284 + C15889 * C297) *
               C47855 +
           (C15894 * C269 + C47824 * C288 + C15893 * C267 + C15889 * C283) *
               C15896 +
           (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
               C15891 +
           (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
               C15895) *
              C47760 * C47557 * C47539 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
               C15895 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
               C15891 +
           (C15893 * C269 + C15889 * C288 + C15894 * C558 + C47824 * C559) *
               C15896 +
           (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47877 -
           ((C15894 * C821 + C47824 * C828 + C15893 * C820 + C15889 * C827) *
                C47855 +
            (C15894 * C813 + C47824 * C818 + C15893 * C812 + C15889 * C817) *
                C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C15893 * C1152 + C15889 * C1164 + C15894 * C1151 +
             C47824 * C1163) *
                C15896 +
            (C15893 * C1161 + C15889 * C1179 + C15894 * C1160 +
             C47824 * C1178) *
                C47855) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C15893 * C813 + C15889 * C818 + C15894 * C814 + C47824 * C819) *
                C15896 +
            (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47866 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47877 -
           ((C15894 * C1159 + C47824 * C1177 + C15893 * C1160 +
             C15889 * C1178) *
                C47855 +
            (C15894 * C1150 + C47824 * C1162 + C15893 * C1151 +
             C15889 * C1163) *
                C15896 +
            (C15894 * C435 + C47824 * C449 + C15893 * C434 + C15889 * C448) *
                C15891 +
            (C15894 * C419 + C47824 * C432 + C15893 * C418 + C15889 * C431) *
                C15895) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47877 -
           ((C15894 * C823 + C47824 * C830 + C15893 * C822 + C15889 * C829) *
                C47855 +
            (C15894 * C815 + C47824 * C824 + C15893 * C814 + C15889 * C819) *
                C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47824 * C439) *
                C15895 +
            (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47824 * C451) *
                C15891 +
            (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
             C47824 * C2015) *
                C15896 +
            (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
             C47824 * C2017) *
                C47855) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C942 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C943 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C943 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C942 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C942 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C943 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
              C47760 * C47557 * C1010 -
          ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
           (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
              C47760 * C47557 * C1011 +
          ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
           (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
              C47760 * C47557 * C1012 -
          ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
           (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
              C47760 * C47557 * C1013 +
          ((C17015 + C17014) * C15895 + (C17013 + C17012) * C15891 +
           (C15893 * C5677 + C15889 * C5679 + C15894 * C5678 + C47824 * C5680) *
               C15896 +
           (C15893 * C5681 + C15889 * C5683 + C15894 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47877 -
           ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47866 +
           ((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47824 * C431) *
                C15895 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47824 * C448) *
                C15891 +
            (C17186 + C17187) * C15896 + (C17188 + C17189) * C47855) *
               C47760 * C47840) *
              C942 +
          (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
            (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
               C47760 * C47866 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47877 -
           ((C17194 + C17195) * C47855 + (C17196 + C17197) * C15896 +
            (C17189 + C17188) * C15891 + (C17187 + C17186) * C15895) *
               C47760 * C47840) *
              C943 +
          (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
               C47760 * C47877 -
           ((C15894 * C1549 + C47824 * C1552 + C15893 * C1548 +
             C15889 * C1551) *
                C47855 +
            (C15894 * C1543 + C47824 * C1546 + C15893 * C1542 +
             C15889 * C1545) *
                C15896 +
            (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
               C47760 * C47866 +
           ((C17197 + C17196) * C15895 + (C17195 + C17194) * C15891 +
            (C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
             C47824 * C5858) *
                C15896 +
            (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
             C47824 * C5862) *
                C47855) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47806 -
           ((C15894 * C821 + C47824 * C828 + C15893 * C820 + C15889 * C827) *
                C47855 +
            (C15894 * C813 + C47824 * C818 + C15893 * C812 + C15889 * C817) *
                C15896 +
            (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                C15891 +
            (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                C15895) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                C15895 +
            (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                C15891 +
            (C15893 * C813 + C15889 * C818 + C15894 * C814 + C47824 * C819) *
                C15896 +
            (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47824 * C829) *
                C47855) *
               C47760 * C47644 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47806 -
           ((C15894 * C823 + C47824 * C830 + C15893 * C822 + C15889 * C829) *
                C47855 +
            (C15894 * C815 + C47824 * C824 + C15893 * C814 + C15889 * C819) *
                C15896 +
            (C15894 * C437 + C47824 * C450 + C15893 * C424 + C15889 * C444) *
                C15891 +
            (C15894 * C420 + C47824 * C436 + C15893 * C414 + C15889 * C427) *
                C15895) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47824 * C441) *
                C15895 +
            (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47824 * C452) *
                C15891 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                C15896 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                C47855) *
               C47760 * C47644 -
           ((C16403 + C16402) * C47855 + (C16401 + C16400) * C15896 +
            (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C15891 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C15895) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C15895 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C15891 +
             (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
                C47760 * C47806 -
            ((C16752 + C16753) * C47855 + (C16754 + C16755) * C15896 +
             (C15894 * C425 + C47824 * C445 + C15893 * C426 + C15889 * C446) *
                 C15891 +
             (C15894 * C415 + C47824 * C428 + C15893 * C416 + C15889 * C429) *
                 C15895) *
                C47760 * C47644) *
               C942 +
           (((C16755 + C16754) * C15895 + (C16753 + C16752) * C15891 +
             (C17190 + C17191) * C15896 + (C17192 + C17193) * C47855) *
                C47760 * C47644 -
            ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
             (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
                C47760 * C47806) *
               C943 +
           (((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
             (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
                C47760 * C47806 -
            ((C15894 * C1549 + C47824 * C1552 + C15893 * C1548 +
              C15889 * C1551) *
                 C47855 +
             (C15894 * C1543 + C47824 * C1546 + C15893 * C1542 +
              C15889 * C1545) *
                 C15896 +
             (C17193 + C17192) * C15891 + (C17191 + C17190) * C15895) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47824 * C427) *
                 C15895 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47824 * C444) *
                 C15891 +
             (C16756 + C16757) * C15896 + (C16758 + C16759) * C47855) *
                C47760 * C47644 -
            ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
             (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C15891 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C15895) *
                C47760 * C47806) *
               C942 +
           (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
             (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
                C47760 * C47806 -
            ((C17542 + C17543) * C47855 + (C17544 + C17545) * C15896 +
             (C16759 + C16758) * C15891 + (C16757 + C16756) * C15895) *
                C47760 * C47644) *
               C943 +
           (((C17545 + C17544) * C15895 + (C17543 + C17542) * C15891 +
             (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C15896 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47855) *
                C47760 * C47644 -
            ((C17336 + C17337) * C47855 + (C17338 + C17339) * C15896 +
             (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C15893 * C263 + C15889 * C276 + C15894 * C262 + C47824 * C275) *
               C15896 +
           (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47824 * C292) *
               C47855) *
              C47760 * C47557 * C47539 * C108 -
          ((C15894 * C271 + C47824 * C291 + C15893 * C272 + C15889 * C292) *
               C47855 +
           (C15894 * C261 + C47824 * C274 + C15893 * C262 + C15889 * C275) *
               C15896 +
           (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
               C15891 +
           (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
               C15895) *
              C47760 * C47557 * C47539 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
               C15895 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
               C15891 +
           (C15893 * C261 + C15889 * C274 + C15894 * C267 + C47824 * C283) *
               C15896 +
           (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47824 * C297) *
               C47855) *
              C47760 * C47557 * C47539 * C110 -
          ((C15894 * C287 + C47824 * C299 + C15893 * C284 + C15889 * C297) *
               C47855 +
           (C15894 * C269 + C47824 * C288 + C15893 * C267 + C15889 * C283) *
               C15896 +
           (C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
               C15891 +
           (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
               C15895) *
              C47760 * C47557 * C47539 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
               C15895 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
               C15891 +
           (C15893 * C269 + C15889 * C288 + C15894 * C558 + C47824 * C559) *
               C15896 +
           (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47824 * C561) *
               C47855) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C258 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C47864 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C47876 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C47876 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C47864 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C15895 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C15891 +
            (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
               C47760 * C47557 * C942 -
           ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
            (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
               C47760 * C47557 * C943 +
           ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
            (C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
             C47824 * C1026) *
                C15896 +
            (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
             C47824 * C1035) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47873 +
          (((C16100 + C16101) * C15895 + (C16102 + C16103) * C15891 +
            (C16104 + C16105) * C15896 + (C16106 + C16107) * C47855) *
               C47760 * C47557 * C943 -
           ((C16103 + C16102) * C47855 + (C16101 + C16100) * C15896 +
            (C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C15891 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C15895) *
               C47760 * C47557 * C942 -
           ((C15894 * C1022 + C47824 * C1034 + C15893 * C1023 +
             C15889 * C1035) *
                C47855 +
            (C15894 * C1016 + C47824 * C1025 + C15893 * C1017 +
             C15889 * C1026) *
                C15896 +
            (C16107 + C16106) * C15891 + (C16105 + C16104) * C15895) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C15895 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C15891 +
            (C16108 + C16109) * C15896 + (C16110 + C16111) * C47855) *
               C47760 * C47557 * C942 -
           ((C16112 + C16113) * C47855 + (C16114 + C16115) * C15896 +
            (C16111 + C16110) * C15891 + (C16109 + C16108) * C15895) *
               C47760 * C47557 * C943 +
           ((C16115 + C16114) * C15895 + (C16113 + C16112) * C15891 +
            (C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
             C47824 * C1291) *
                C15896 +
            (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
             C47824 * C1293) *
                C47855) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
               C15895 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
               C15891 +
           (C16092 + C16093) * C15896 + (C16094 + C16095) * C47855) *
              C47760 * C47557 * C1010 -
          ((C16096 + C16097) * C47855 + (C16098 + C16099) * C15896 +
           (C16095 + C16094) * C15891 + (C16093 + C16092) * C15895) *
              C47760 * C47557 * C1011 +
          ((C16099 + C16098) * C15895 + (C16097 + C16096) * C15891 +
           (C17008 + C17009) * C15896 + (C17010 + C17011) * C47855) *
              C47760 * C47557 * C1012 -
          ((C17012 + C17013) * C47855 + (C17014 + C17015) * C15896 +
           (C17011 + C17010) * C15891 + (C17009 + C17008) * C15895) *
              C47760 * C47557 * C1013 +
          ((C17015 + C17014) * C15895 + (C17013 + C17012) * C15891 +
           (C15893 * C5677 + C15889 * C5679 + C15894 * C5678 + C47824 * C5680) *
               C15896 +
           (C15893 * C5681 + C15889 * C5683 + C15894 * C5682 + C47824 * C5684) *
               C47855) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47598 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47605 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47557 * C2700) *
              C47516 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47605 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47598 -
           (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C2700) *
              C47525 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47598 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47605 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47598 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C47605 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C47806 -
            (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C2700) *
              C2440 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C47598 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47605 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C47806) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47883 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47879 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47557 * C47869 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47557 * C47847) *
              C2440 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47879 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47883 -
           (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47869 +
           (C21730 * C21570 + C21731 * C21566 + C22667 * C21571 +
            C22666 * C21567 + (C21569 * C5678 + C47484 * C5680) * C21572 +
            (C21569 * C5682 + C47484 * C5684) * C21568) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C2332 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47602) *
              C47882 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47602 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C2332 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47602) *
              C47862 +
          ((C21954 * C21570 + C21955 * C21566 + C21956 * C21571 +
            C21957 * C21567 + (C21569 * C1290 + C47484 * C1291) * C21572 +
            (C21569 * C1292 + C47484 * C1293) * C21568) *
               C47760 * C47557 * C47602 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47877 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47866 +
            ((C21569 * C417 + C47484 * C430) * C21570 +
             (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
             C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
                C47760 * C47840) *
               C2332 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47866 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47877 -
            (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
             C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
                C47760 * C47840) *
               C47602) *
              C2440 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47866 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47877 -
            (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
             C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
             (C21569 * C418 + C47484 * C431) * C21570) *
                C47760 * C47840) *
               C2332 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47877 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47866 +
            (C23371 * C21570 + C23370 * C21566 + C23369 * C21571 +
             C23368 * C21567 + (C21569 * C5856 + C47484 * C5858) * C21572 +
             (C21569 * C5860 + C47484 * C5862) * C21568) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C47602) *
              C47516 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C2332 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C47806 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C47806) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C2332 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47602) *
              C47882 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47602 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C2332) *
              C47875 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C2332 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47602) *
              C47862 +
          ((C21954 * C21570 + C21955 * C21566 + C21956 * C21571 +
            C21957 * C21567 + (C21569 * C1290 + C47484 * C1291) * C21572 +
            (C21569 * C1292 + C47484 * C1293) * C21568) *
               C47760 * C47557 * C47602 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47883 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47879 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47557 * C47869 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47557 * C47847) *
              C2440 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47879 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47883 -
           (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47869 +
           (C21730 * C21570 + C21731 * C21566 + C22667 * C21571 +
            C22666 * C21567 + (C21569 * C5678 + C47484 * C5680) * C21572 +
            (C21569 * C5682 + C47484 * C5684) * C21568) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47598 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47605 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C3094 -
            (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C2700) *
              C47791 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C47598 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47605 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C3094) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47640 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47647 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C3602) *
              C47598 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47647 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47640 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C3602) *
              C47605 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47640 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47647 +
           (C22558 * C21570 + C22559 * C21566 + C22563 * C21571 +
            C22562 * C21567 + (C21569 * C22535 + C47484 * C22536) * C21572 +
            (C21569 * C22537 + C47484 * C22538) * C21568) *
               C47760 * C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C3094 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47883 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47644 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C3094) *
              C47879 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C3094 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47644) *
              C47869 +
          ((C22560 * C21570 + C22561 * C21566 + C22927 * C21571 +
            C22926 * C21567 + (C21569 * C22917 + C47484 * C22918) * C21572 +
            (C21569 * C22919 + C47484 * C22920) * C21568) *
               C47760 * C47644 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C2332 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C3094 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47884 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47881 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47872 -
           (C23580 * C21568 + C23581 * C21572 + C23582 * C21567 +
            C23583 * C21571 + (C21569 * C1852 + C47484 * C1864) * C21566 +
            (C21569 * C1846 + C47484 * C1855) * C21570) *
               C47760 * C47853) *
              C2332 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47881 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47884 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C47872 +
           (C23583 * C21570 + C23582 * C21566 + C23581 * C21571 +
            C23580 * C21567 + (C21569 * C23567 + C47484 * C23568) * C21572 +
            (C21569 * C23569 + C47484 * C23570) * C21568) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47640 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47647 +
            ((C21569 * C417 + C47484 * C430) * C21570 +
             (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
             C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
                C47760 * C3602) *
               C2332 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47647 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47640 -
            (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
             C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
                C47760 * C3602) *
               C47602) *
              C47791 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47647 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47640 -
            (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
             C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
             (C21569 * C418 + C47484 * C431) * C21570) *
                C47760 * C3602) *
               C2332 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47640 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47647 +
            (C23371 * C21570 + C23370 * C21566 + C23369 * C21571 +
             C23368 * C21567 + (C21569 * C5856 + C47484 * C5858) * C21572 +
             (C21569 * C5860 + C47484 * C5862) * C21568) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47602) *
              C47873 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C2332 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C47860 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C3094 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C2332 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C3094 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47883 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47644 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C3094) *
              C47879 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C3094 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47644) *
              C47869 +
          ((C22560 * C21570 + C22561 * C21566 + C22927 * C21571 +
            C22926 * C21567 + (C21569 * C22917 + C47484 * C22918) * C21572 +
            (C21569 * C22919 + C47484 * C22920) * C21568) *
               C47760 * C47644 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C1284 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C1285 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47557 * C1286 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47557 * C47847) *
              C47791 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C1285 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C1284 -
           (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C1286 +
           (C21730 * C21570 + C21731 * C21566 + C22667 * C21571 +
            C22666 * C21567 + (C21569 * C5678 + C47484 * C5680) * C21572 +
            (C21569 * C5682 + C47484 * C5684) * C21568) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47805 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47602) *
              C554 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47602 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47805 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47602) *
              C556 +
          ((C21954 * C21570 + C21955 * C21566 + C21956 * C21571 +
            C21957 * C21567 + (C21569 * C1290 + C47484 * C1291) * C21572 +
            (C21569 * C1292 + C47484 * C1293) * C21568) *
               C47760 * C47557 * C47602 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C1664 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C1665 +
            ((C21569 * C417 + C47484 * C430) * C21570 +
             (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
             C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
                C47760 * C47840) *
               C47805 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C1665 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C1664 -
            (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
             C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
                C47760 * C47840) *
               C47602) *
              C47791 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C1665 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C1664 -
            (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
             C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
             (C21569 * C418 + C47484 * C431) * C21570) *
                C47760 * C47840) *
               C47805 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C1664 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C1665 +
            (C23371 * C21570 + C23370 * C21566 + C23369 * C21571 +
             C23368 * C21567 + (C21569 * C5856 + C47484 * C5858) * C21572 +
             (C21569 * C5860 + C47484 * C5862) * C21568) *
                C47760 * C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47806 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C1284 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47644 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47806) *
              C1285 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47806 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47644) *
              C1286 +
          ((C22560 * C21570 + C22561 * C21566 + C22927 * C21571 +
            C22926 * C21567 + (C21569 * C22917 + C47484 * C22918) * C21572 +
            (C21569 * C22919 + C47484 * C22920) * C21568) *
               C47760 * C47644 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + (C21569 * C1542 + C47484 * C1545) * C21572 +
             (C21569 * C1548 + C47484 * C1551) * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C47805 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            ((C21569 * C1549 + C47484 * C1552) * C21568 +
             (C21569 * C1543 + C47484 * C1546) * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C47806 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C2116 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C2117 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C2118 -
           (C23580 * C21568 + C23581 * C21572 + C23582 * C21567 +
            C23583 * C21571 + (C21569 * C1852 + C47484 * C1864) * C21566 +
            (C21569 * C1846 + C47484 * C1855) * C21570) *
               C47760 * C47853) *
              C47805 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C2117 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C2116 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C2118 +
           (C23583 * C21570 + C23582 * C21566 + C23581 * C21571 +
            C23580 * C21567 + (C21569 * C23567 + C47484 * C23568) * C21572 +
            (C21569 * C23569 + C47484 * C23570) * C21568) *
               C47760 * C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21569 * C117 + C47484 * C124) * C21570 +
               (C21569 * C127 + C47484 * C138) * C21566 +
               (C21569 * C263 + C47484 * C276) * C21571 +
               (C21569 * C273 + C47484 * C293) * C21567 +
               (C21569 * C264 + C47484 * C277) * C21572 +
               (C21569 * C280 + C47484 * C294) * C21568) *
                  C47760 * C47557 * C47539 * C108 -
              ((C21569 * C281 + C47484 * C295) * C21568 +
               (C21569 * C265 + C47484 * C278) * C21572 +
               (C21569 * C272 + C47484 * C292) * C21567 +
               (C21569 * C262 + C47484 * C275) * C21571 +
               (C21569 * C128 + C47484 * C139) * C21566 +
               (C21569 * C118 + C47484 * C125) * C21570) *
                  C47760 * C47557 * C47539 * C109 +
              ((C21569 * C119 + C47484 * C126) * C21570 +
               (C21569 * C129 + C47484 * C140) * C21566 +
               (C21569 * C261 + C47484 * C274) * C21571 +
               (C21569 * C271 + C47484 * C291) * C21567 +
               (C21569 * C266 + C47484 * C279) * C21572 +
               (C21569 * C282 + C47484 * C296) * C21568) *
                  C47760 * C47557 * C47539 * C110 -
              ((C21569 * C285 + C47484 * C298) * C21568 +
               (C21569 * C268 + C47484 * C286) * C21572 +
               (C21569 * C284 + C47484 * C297) * C21567 +
               (C21569 * C267 + C47484 * C283) * C21571 +
               (C21569 * C130 + C47484 * C141) * C21566 +
               (C21569 * C120 + C47484 * C131) * C21570) *
                  C47760 * C47557 * C47539 * C111 +
              ((C21569 * C121 + C47484 * C132) * C21570 +
               (C21569 * C133 + C47484 * C142) * C21566 +
               (C21569 * C269 + C47484 * C288) * C21571 +
               (C21569 * C287 + C47484 * C299) * C21567 +
               (C21569 * C270 + C47484 * C289) * C21572 +
               (C21569 * C290 + C47484 * C300) * C21568) *
                  C47760 * C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21569 * C117 + C47484 * C124) * C21570 +
                (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
                C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                   C47760 * C47557 * C47876 -
               (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
                C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                   C47760 * C47557 * C47864 +
               (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
                C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
                (C21569 * C1031 + C47484 * C1037) * C21568) *
                   C47760 * C47557 * C47837) *
                  C258 +
              ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
                C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                   C47760 * C47557 * C47864 -
               (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
                C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
                (C21569 * C118 + C47484 * C125) * C21570) *
                   C47760 * C47557 * C47876 -
               ((C21569 * C1032 + C47484 * C1038) * C21568 +
                (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
                C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                   C47760 * C47557 * C47837) *
                  C259 +
              (((C21569 * C119 + C47484 * C126) * C21570 +
                (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
                C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                   C47760 * C47557 * C47876 -
               (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
                C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                   C47760 * C47557 * C47864 +
               (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
                C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
                (C21569 * C1033 + C47484 * C1039) * C21568) *
                   C47760 * C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47877 -
           ((C21569 * C1167 + C47484 * C1182) * C21568 +
            (C21569 * C1155 + C47484 * C1170) * C21572 +
            (C21569 * C820 + C47484 * C827) * C21567 +
            (C21569 * C812 + C47484 * C817) * C21571 +
            (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47866 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 +
            (C21569 * C1152 + C47484 * C1164) * C21571 +
            (C21569 * C1161 + C47484 * C1179) * C21567 +
            (C21569 * C1156 + C47484 * C1171) * C21572 +
            (C21569 * C1174 + C47484 * C1183) * C21568) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 +
            (C21569 * C813 + C47484 * C818) * C21571 +
            (C21569 * C821 + C47484 * C828) * C21567 +
            (C21569 * C1154 + C47484 * C1169) * C21572 +
            (C21569 * C1166 + C47484 * C1181) * C21568) *
               C47760 * C47866 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47877 -
           ((C21569 * C1175 + C47484 * C1184) * C21568 +
            (C21569 * C1157 + C47484 * C1172) * C21572 +
            (C21569 * C1160 + C47484 * C1178) * C21567 +
            (C21569 * C1151 + C47484 * C1163) * C21571 +
            (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47877 -
           ((C21569 * C1165 + C47484 * C1180) * C21568 +
            (C21569 * C1153 + C47484 * C1168) * C21572 +
            (C21569 * C822 + C47484 * C829) * C21567 +
            (C21569 * C814 + C47484 * C819) * C21571 +
            (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47866 +
           ((C21569 * C419 + C47484 * C432) * C21570 +
            (C21569 * C435 + C47484 * C449) * C21566 +
            (C21569 * C1150 + C47484 * C1162) * C21571 +
            (C21569 * C1159 + C47484 * C1177) * C21567 +
            (C21569 * C1158 + C47484 * C1173) * C21572 +
            (C21569 * C1176 + C47484 * C1185) * C21568) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C942 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C943 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C47873 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C943 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C942 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C942 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C943 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
           C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
              C47760 * C47557 * C1010 -
          (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
           C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
              C47760 * C47557 * C1011 +
          (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
           C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
              C47760 * C47557 * C1012 -
          (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
           C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
              C47760 * C47557 * C1013 +
          (C22422 * C21570 + C22423 * C21566 + C22425 * C21571 +
           C22424 * C21567 + (C21569 * C22409 + C47484 * C22410) * C21572 +
           (C21569 * C22411 + C47484 * C22412) * C21568) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47877 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47866 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C942 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47866 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47877 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C47840) *
              C943 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47877 -
           ((C21569 * C6381 + C47484 * C6383) * C21568 +
            (C21569 * C6377 + C47484 * C6379) * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47866 +
           (C22558 * C21570 + C22559 * C21566 + C22563 * C21571 +
            C22562 * C21567 + (C21569 * C22535 + C47484 * C22536) * C21572 +
            (C21569 * C22537 + C47484 * C22538) * C21568) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C1664 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C1665 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C1665 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C1664 -
           ((C21569 * C1175 + C47484 * C1184) * C21568 +
            (C21569 * C1157 + C47484 * C1172) * C21572 +
            (C21569 * C1160 + C47484 * C1178) * C21567 +
            (C21569 * C1151 + C47484 * C1163) * C21571 +
            (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C1664 -
           (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
            C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C1665 +
           ((C21569 * C419 + C47484 * C432) * C21570 +
            (C21569 * C435 + C47484 * C449) * C21566 +
            (C21569 * C1150 + C47484 * C1162) * C21571 +
            (C21569 * C1159 + C47484 * C1177) * C21567 +
            (C21569 * C1158 + C47484 * C1173) * C21572 +
            (C21569 * C1176 + C47484 * C1185) * C21568) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C1664 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C1665 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C47876 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C1665 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C1664 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C47840) *
              C47864 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C1664 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C1665 +
           (C22558 * C21570 + C22559 * C21566 + C22563 * C21571 +
            C22562 * C21567 + (C21569 * C22535 + C47484 * C22536) * C21572 +
            (C21569 * C22537 + C47484 * C22538) * C21568) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
           C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
              C47760 * C1839 -
          (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
           C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
           (C21569 * C416 + C47484 * C429) * C21570) *
              C47760 * C1840 +
          ((C21569 * C417 + C47484 * C430) * C21570 +
           (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
           C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
              C47760 * C1841 -
          ((C21569 * C7249 + C47484 * C7251) * C21568 +
           (C21569 * C7245 + C47484 * C7247) * C21572 +
           (C21569 * C2228 + C47484 * C2231) * C21567 +
           (C21569 * C2222 + C47484 * C2225) * C21571 +
           (C21569 * C1852 + C47484 * C1864) * C21566 +
           (C21569 * C1846 + C47484 * C1855) * C21570) *
              C47760 * C1842 +
          ((C21569 * C1847 + C47484 * C1856) * C21570 +
           (C21569 * C1859 + C47484 * C1865) * C21566 +
           (C21569 * C6771 + C47484 * C6773) * C21571 +
           (C21569 * C6775 + C47484 * C6777) * C21567 +
           (C21569 * C23209 + C47484 * C23210) * C21572 +
           (C21569 * C23211 + C47484 * C23212) * C21568) *
              C47760 * C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C942 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C943 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C47806 -
            ((C21569 * C6381 + C47484 * C6383) * C21568 +
             (C21569 * C6377 + C47484 * C6379) * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C942 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C943 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47806 -
           ((C21569 * C1167 + C47484 * C1182) * C21568 +
            (C21569 * C1155 + C47484 * C1170) * C21572 +
            (C21569 * C820 + C47484 * C827) * C21567 +
            (C21569 * C812 + C47484 * C817) * C21571 +
            (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 +
            (C21569 * C813 + C47484 * C818) * C21571 +
            (C21569 * C821 + C47484 * C828) * C21567 +
            (C21569 * C1154 + C47484 * C1169) * C21572 +
            (C21569 * C1166 + C47484 * C1181) * C21568) *
               C47760 * C47644 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47806 -
           ((C21569 * C1165 + C47484 * C1180) * C21568 +
            (C21569 * C1153 + C47484 * C1168) * C21572 +
            (C21569 * C822 + C47484 * C829) * C21567 +
            (C21569 * C814 + C47484 * C819) * C21571 +
            (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C21569 * C420 + C47484 * C436) * C21570 +
            (C21569 * C437 + C47484 * C450) * C21566 +
            (C21569 * C815 + C47484 * C824) * C21571 +
            (C21569 * C823 + C47484 * C830) * C21567 +
            (C21569 * C1440 + C47484 * C1441) * C21572 +
            (C21569 * C1442 + C47484 * C1443) * C21568) *
               C47760 * C47644 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C2116 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C2117 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C2118 -
           ((C21569 * C7249 + C47484 * C7251) * C21568 +
            (C21569 * C7245 + C47484 * C7247) * C21572 +
            (C21569 * C2228 + C47484 * C2231) * C21567 +
            (C21569 * C2222 + C47484 * C2225) * C21571 +
            (C21569 * C1852 + C47484 * C1864) * C21566 +
            (C21569 * C1846 + C47484 * C1855) * C21570) *
               C47760 * C47853) *
              C47539 * C47791 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C2117 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C2116 -
           (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
            C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C2118 +
           ((C21569 * C1845 + C47484 * C1854) * C21570 +
            (C21569 * C1851 + C47484 * C1863) * C21566 +
            (C21569 * C2223 + C47484 * C2226) * C21571 +
            (C21569 * C2229 + C47484 * C2232) * C21567 +
            (C21569 * C7246 + C47484 * C7248) * C21572 +
            (C21569 * C7250 + C47484 * C7252) * C21568) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47876 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47864 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C258 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47864 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47876 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47876 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47864 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 +
           (C21569 * C263 + C47484 * C276) * C21571 +
           (C21569 * C273 + C47484 * C293) * C21567 +
           (C21569 * C264 + C47484 * C277) * C21572 +
           (C21569 * C280 + C47484 * C294) * C21568) *
              C47760 * C47557 * C47539 * C108 -
          ((C21569 * C281 + C47484 * C295) * C21568 +
           (C21569 * C265 + C47484 * C278) * C21572 +
           (C21569 * C272 + C47484 * C292) * C21567 +
           (C21569 * C262 + C47484 * C275) * C21571 +
           (C21569 * C128 + C47484 * C139) * C21566 +
           (C21569 * C118 + C47484 * C125) * C21570) *
              C47760 * C47557 * C47539 * C109 +
          ((C21569 * C119 + C47484 * C126) * C21570 +
           (C21569 * C129 + C47484 * C140) * C21566 +
           (C21569 * C261 + C47484 * C274) * C21571 +
           (C21569 * C271 + C47484 * C291) * C21567 +
           (C21569 * C266 + C47484 * C279) * C21572 +
           (C21569 * C282 + C47484 * C296) * C21568) *
              C47760 * C47557 * C47539 * C110 -
          ((C21569 * C285 + C47484 * C298) * C21568 +
           (C21569 * C268 + C47484 * C286) * C21572 +
           (C21569 * C284 + C47484 * C297) * C21567 +
           (C21569 * C267 + C47484 * C283) * C21571 +
           (C21569 * C130 + C47484 * C141) * C21566 +
           (C21569 * C120 + C47484 * C131) * C21570) *
              C47760 * C47557 * C47539 * C111 +
          ((C21569 * C121 + C47484 * C132) * C21570 +
           (C21569 * C133 + C47484 * C142) * C21566 +
           (C21569 * C269 + C47484 * C288) * C21571 +
           (C21569 * C287 + C47484 * C299) * C21567 +
           (C21569 * C270 + C47484 * C289) * C21572 +
           (C21569 * C290 + C47484 * C300) * C21568) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C942 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C943 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C47873 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C943 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C942 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C942 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C943 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
           C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
              C47760 * C47557 * C1010 -
          (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
           C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
              C47760 * C47557 * C1011 +
          (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
           C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
              C47760 * C47557 * C1012 -
          (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
           C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
              C47760 * C47557 * C1013 +
          (C22422 * C21570 + C22423 * C21566 + C22425 * C21571 +
           C22424 * C21567 + (C21569 * C22409 + C47484 * C22410) * C21572 +
           (C21569 * C22411 + C47484 * C22412) * C21568) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C1664 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C1665 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C47539 * C47873 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C1665 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C1664 -
           ((C21569 * C1175 + C47484 * C1184) * C21568 +
            (C21569 * C1157 + C47484 * C1172) * C21572 +
            (C21569 * C1160 + C47484 * C1178) * C21567 +
            (C21569 * C1151 + C47484 * C1163) * C21571 +
            (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C47840) *
              C47539 * C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C1664 -
           (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
            C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C1665 +
           ((C21569 * C419 + C47484 * C432) * C21570 +
            (C21569 * C435 + C47484 * C449) * C21566 +
            (C21569 * C1150 + C47484 * C1162) * C21571 +
            (C21569 * C1159 + C47484 * C1177) * C21567 +
            (C21569 * C1158 + C47484 * C1173) * C21572 +
            (C21569 * C1176 + C47484 * C1185) * C21568) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C1664 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C1665 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C47876 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C1665 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C1664 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C47840) *
              C47864 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C1664 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C1665 +
           (C22558 * C21570 + C22559 * C21566 + C22563 * C21571 +
            C22562 * C21567 + (C21569 * C22535 + C47484 * C22536) * C21572 +
            (C21569 * C22537 + C47484 * C22538) * C21568) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47602) *
              C47516 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C47805 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C47525 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C3094 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C3094) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47640 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47647 +
            ((C21569 * C417 + C47484 * C430) * C21570 +
             (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
             C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
                C47760 * C3602) *
               C47805 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47647 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47640 -
            (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
             C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
                C47760 * C3602) *
               C47602) *
              C2440 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47647 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47640 -
            (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
             C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
             (C21569 * C418 + C47484 * C431) * C21570) *
                C47760 * C3602) *
               C47805 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47640 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47647 +
            (C23371 * C21570 + C23370 * C21566 + C23369 * C21571 +
             C23368 * C21567 + (C21569 * C5856 + C47484 * C5858) * C21572 +
             (C21569 * C5860 + C47484 * C5862) * C21568) *
                C47760 * C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47876 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47864 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C3094 -
            (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C47876 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47864 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C3094 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C47644 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C3094 -
           (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
            C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C21569 * C420 + C47484 * C436) * C21570 +
            (C21569 * C437 + C47484 * C450) * C21566 +
            (C21569 * C815 + C47484 * C824) * C21571 +
            (C21569 * C823 + C47484 * C830) * C21567 +
            (C21569 * C1440 + C47484 * C1441) * C21572 +
            (C21569 * C1442 + C47484 * C1443) * C21568) *
               C47760 * C47644 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47884 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47881 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47872 -
           (C23580 * C21568 + C23581 * C21572 + C23582 * C21567 +
            C23583 * C21571 + (C21569 * C1852 + C47484 * C1864) * C21566 +
            (C21569 * C1846 + C47484 * C1855) * C21570) *
               C47760 * C47853) *
              C47539 * C2440 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C47881 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47884 -
           (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
            C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C47872 +
           ((C21569 * C1845 + C47484 * C1854) * C21570 +
            (C21569 * C1851 + C47484 * C1863) * C21566 +
            (C21569 * C2223 + C47484 * C2226) * C21571 +
            (C21569 * C2229 + C47484 * C2232) * C21567 +
            (C21569 * C7246 + C47484 * C7248) * C21572 +
            (C21569 * C7250 + C47484 * C7252) * C21568) *
               C47760 * C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47640 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47647 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C3602) *
              C47539 * C47516 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C47647 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47640 -
           (C23368 * C21568 + C23369 * C21572 + C23370 * C21567 +
            C23371 * C21571 + (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C3602) *
              C47539 * C47525 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47640 -
           (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
            C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47647 +
           ((C21569 * C419 + C47484 * C432) * C21570 +
            (C21569 * C435 + C47484 * C449) * C21566 +
            (C21569 * C1150 + C47484 * C1162) * C21571 +
            (C21569 * C1159 + C47484 * C1177) * C21567 +
            (C21569 * C1158 + C47484 * C1173) * C21572 +
            (C21569 * C1176 + C47484 * C1185) * C21568) *
               C47760 * C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C3094 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47539 * C47882 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
            C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
               C47760 * C47644 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C3094) *
              C47539 * C47875 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C3094 -
           (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
            C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47644) *
              C47539 * C47862 +
          (((C21569 * C420 + C47484 * C436) * C21570 +
            (C21569 * C437 + C47484 * C450) * C21566 +
            (C21569 * C815 + C47484 * C824) * C21571 +
            (C21569 * C823 + C47484 * C830) * C21567 +
            (C21569 * C1440 + C47484 * C1441) * C21572 +
            (C21569 * C1442 + C47484 * C1443) * C21568) *
               C47760 * C47644 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C3094 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47876 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C3094) *
               C47864 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C3094 -
            (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C47837) *
              C2440 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C3094) *
               C47876 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C3094 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47864 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47805 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47602) *
              C554 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47602 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47805) *
              C555 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47805 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47602) *
              C556 +
          ((C21954 * C21570 + C21955 * C21566 + C21956 * C21571 +
            C21957 * C21567 + (C21569 * C1290 + C47484 * C1291) * C21572 +
            (C21569 * C1292 + C47484 * C1293) * C21568) *
               C47760 * C47557 * C47602 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C1284 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C1285 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47557 * C1286 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47557 * C47847) *
              C47791 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C1285 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C1284 -
           (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C1286 +
           (C21730 * C21570 + C21731 * C21566 + C22667 * C21571 +
            C22666 * C21567 + (C21569 * C5678 + C47484 * C5680) * C21572 +
            (C21569 * C5682 + C47484 * C5684) * C21568) *
               C47760 * C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + (C21569 * C1542 + C47484 * C1545) * C21572 +
             (C21569 * C1548 + C47484 * C1551) * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C47602) *
              C258 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C47805 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            ((C21569 * C1549 + C47484 * C1552) * C21568 +
             (C21569 * C1543 + C47484 * C1546) * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C47602) *
              C259 +
          ((((C21569 * C119 + C47484 * C126) * C21570 +
             (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
             C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
                C47760 * C47806 -
            (C22234 * C21568 + C22235 * C21572 + C22236 * C21567 +
             C22237 * C21571 + (C21569 * C424 + C47484 * C444) * C21566 +
             (C21569 * C414 + C47484 * C427) * C21570) *
                C47760 * C47644) *
               C47805 +
           ((C22237 * C21570 + C22236 * C21566 + C22235 * C21571 +
             C22234 * C21567 + (C21569 * C1544 + C47484 * C1547) * C21572 +
             (C21569 * C1550 + C47484 * C1553) * C21568) *
                C47760 * C47644 -
            (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
             C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
                C47760 * C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47806 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C1284 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47644 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47806) *
              C1285 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47806 -
           (C22926 * C21568 + C22927 * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47644) *
              C1286 +
          ((C22560 * C21570 + C22561 * C21566 + C22927 * C21571 +
            C22926 * C21567 + (C21569 * C22917 + C47484 * C22918) * C21572 +
            (C21569 * C22919 + C47484 * C22920) * C21568) *
               C47760 * C47644 -
           (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
            C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
               C47760 * C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47876 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47864 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C258 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47864 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47876 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47876 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47864 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 +
           (C21569 * C263 + C47484 * C276) * C21571 +
           (C21569 * C273 + C47484 * C293) * C21567 +
           (C21569 * C264 + C47484 * C277) * C21572 +
           (C21569 * C280 + C47484 * C294) * C21568) *
              C47760 * C47557 * C47539 * C108 -
          ((C21569 * C281 + C47484 * C295) * C21568 +
           (C21569 * C265 + C47484 * C278) * C21572 +
           (C21569 * C272 + C47484 * C292) * C21567 +
           (C21569 * C262 + C47484 * C275) * C21571 +
           (C21569 * C128 + C47484 * C139) * C21566 +
           (C21569 * C118 + C47484 * C125) * C21570) *
              C47760 * C47557 * C47539 * C109 +
          ((C21569 * C119 + C47484 * C126) * C21570 +
           (C21569 * C129 + C47484 * C140) * C21566 +
           (C21569 * C261 + C47484 * C274) * C21571 +
           (C21569 * C271 + C47484 * C291) * C21567 +
           (C21569 * C266 + C47484 * C279) * C21572 +
           (C21569 * C282 + C47484 * C296) * C21568) *
              C47760 * C47557 * C47539 * C110 -
          ((C21569 * C285 + C47484 * C298) * C21568 +
           (C21569 * C268 + C47484 * C286) * C21572 +
           (C21569 * C284 + C47484 * C297) * C21567 +
           (C21569 * C267 + C47484 * C283) * C21571 +
           (C21569 * C130 + C47484 * C141) * C21566 +
           (C21569 * C120 + C47484 * C131) * C21570) *
              C47760 * C47557 * C47539 * C111 +
          ((C21569 * C121 + C47484 * C132) * C21570 +
           (C21569 * C133 + C47484 * C142) * C21566 +
           (C21569 * C269 + C47484 * C288) * C21571 +
           (C21569 * C287 + C47484 * C299) * C21567 +
           (C21569 * C270 + C47484 * C289) * C21572 +
           (C21569 * C290 + C47484 * C300) * C21568) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47877 -
           ((C21569 * C1167 + C47484 * C1182) * C21568 +
            (C21569 * C1155 + C47484 * C1170) * C21572 +
            (C21569 * C820 + C47484 * C827) * C21567 +
            (C21569 * C812 + C47484 * C817) * C21571 +
            (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47866 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 +
            (C21569 * C1152 + C47484 * C1164) * C21571 +
            (C21569 * C1161 + C47484 * C1179) * C21567 +
            (C21569 * C1156 + C47484 * C1171) * C21572 +
            (C21569 * C1174 + C47484 * C1183) * C21568) *
               C47760 * C47840) *
              C47539 * C258 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 +
            (C21569 * C813 + C47484 * C818) * C21571 +
            (C21569 * C821 + C47484 * C828) * C21567 +
            (C21569 * C1154 + C47484 * C1169) * C21572 +
            (C21569 * C1166 + C47484 * C1181) * C21568) *
               C47760 * C47866 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47877 -
           ((C21569 * C1175 + C47484 * C1184) * C21568 +
            (C21569 * C1157 + C47484 * C1172) * C21572 +
            (C21569 * C1160 + C47484 * C1178) * C21567 +
            (C21569 * C1151 + C47484 * C1163) * C21571 +
            (C21569 * C434 + C47484 * C448) * C21566 +
            (C21569 * C418 + C47484 * C431) * C21570) *
               C47760 * C47840) *
              C47539 * C259 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47877 -
           ((C21569 * C1165 + C47484 * C1180) * C21568 +
            (C21569 * C1153 + C47484 * C1168) * C21572 +
            (C21569 * C822 + C47484 * C829) * C21567 +
            (C21569 * C814 + C47484 * C819) * C21571 +
            (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47866 +
           ((C21569 * C419 + C47484 * C432) * C21570 +
            (C21569 * C435 + C47484 * C449) * C21566 +
            (C21569 * C1150 + C47484 * C1162) * C21571 +
            (C21569 * C1159 + C47484 * C1177) * C21567 +
            (C21569 * C1158 + C47484 * C1173) * C21572 +
            (C21569 * C1176 + C47484 * C1185) * C21568) *
               C47760 * C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C942 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C943 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C47873 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C943 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C942 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C942 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C943 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
           C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
              C47760 * C47557 * C1010 -
          (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
           C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
              C47760 * C47557 * C1011 +
          (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
           C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
              C47760 * C47557 * C1012 -
          (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
           C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
              C47760 * C47557 * C1013 +
          (C22422 * C21570 + C22423 * C21566 + C22425 * C21571 +
           C22424 * C21567 + (C21569 * C22409 + C47484 * C22410) * C21572 +
           (C21569 * C22411 + C47484 * C22412) * C21568) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47877 -
           (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
            C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47866 +
           ((C21569 * C417 + C47484 * C430) * C21570 +
            (C21569 * C433 + C47484 * C447) * C21566 + C22556 * C21571 +
            C22557 * C21567 + C22558 * C21572 + C22559 * C21568) *
               C47760 * C47840) *
              C942 +
          ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
            C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
               C47760 * C47866 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47877 -
           (C22562 * C21568 + C22563 * C21572 + C22559 * C21567 +
            C22558 * C21571 + C22557 * C21566 + C22556 * C21570) *
               C47760 * C47840) *
              C943 +
          ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
               C47760 * C47877 -
           ((C21569 * C6381 + C47484 * C6383) * C21568 +
            (C21569 * C6377 + C47484 * C6379) * C21572 + C22561 * C21567 +
            C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
               C47760 * C47866 +
           (C22558 * C21570 + C22559 * C21566 + C22563 * C21571 +
            C22562 * C21567 + (C21569 * C22535 + C47484 * C22536) * C21572 +
            (C21569 * C22537 + C47484 * C22538) * C21568) *
               C47760 * C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47806 -
           ((C21569 * C1167 + C47484 * C1182) * C21568 +
            (C21569 * C1155 + C47484 * C1170) * C21572 +
            (C21569 * C820 + C47484 * C827) * C21567 +
            (C21569 * C812 + C47484 * C817) * C21571 +
            (C21569 * C426 + C47484 * C446) * C21566 +
            (C21569 * C416 + C47484 * C429) * C21570) *
               C47760 * C47644) *
              C47539 * C554 +
          (((C21569 * C415 + C47484 * C428) * C21570 +
            (C21569 * C425 + C47484 * C445) * C21566 +
            (C21569 * C813 + C47484 * C818) * C21571 +
            (C21569 * C821 + C47484 * C828) * C21567 +
            (C21569 * C1154 + C47484 * C1169) * C21572 +
            (C21569 * C1166 + C47484 * C1181) * C21568) *
               C47760 * C47644 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47806) *
              C47539 * C555 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47806 -
           ((C21569 * C1165 + C47484 * C1180) * C21568 +
            (C21569 * C1153 + C47484 * C1168) * C21572 +
            (C21569 * C822 + C47484 * C829) * C21567 +
            (C21569 * C814 + C47484 * C819) * C21571 +
            (C21569 * C424 + C47484 * C444) * C21566 +
            (C21569 * C414 + C47484 * C427) * C21570) *
               C47760 * C47644) *
              C47539 * C556 +
          (((C21569 * C420 + C47484 * C436) * C21570 +
            (C21569 * C437 + C47484 * C450) * C21566 +
            (C21569 * C815 + C47484 * C824) * C21571 +
            (C21569 * C823 + C47484 * C830) * C21567 +
            (C21569 * C1440 + C47484 * C1441) * C21572 +
            (C21569 * C1442 + C47484 * C1443) * C21568) *
               C47760 * C47644 -
           (C21957 * C21568 + C21956 * C21572 + C21955 * C21567 +
            C21954 * C21571 + (C21569 * C130 + C47484 * C141) * C21566 +
            (C21569 * C120 + C47484 * C131) * C21570) *
               C47760 * C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C21570 +
             (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
             C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
                C47760 * C47806 -
            (C22226 * C21568 + C22227 * C21572 + C22228 * C21567 +
             C22229 * C21571 + (C21569 * C426 + C47484 * C446) * C21566 +
             (C21569 * C416 + C47484 * C429) * C21570) *
                C47760 * C47644) *
               C942 +
           ((C22229 * C21570 + C22228 * C21566 + C22227 * C21571 +
             C22226 * C21567 + C22560 * C21572 + C22561 * C21568) *
                C47760 * C47644 -
            (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
             C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
                C47760 * C47806) *
               C943 +
           ((C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
             C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
                C47760 * C47806 -
            ((C21569 * C6381 + C47484 * C6383) * C21568 +
             (C21569 * C6377 + C47484 * C6379) * C21572 + C22561 * C21567 +
             C22560 * C21571 + C22226 * C21566 + C22227 * C21570) *
                C47760 * C47644) *
               C47837) *
              C47791 +
          ((((C21569 * C415 + C47484 * C428) * C21570 +
             (C21569 * C425 + C47484 * C445) * C21566 + C22230 * C21571 +
             C22231 * C21567 + C22232 * C21572 + C22233 * C21568) *
                C47760 * C47644 -
            (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
             C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
             (C21569 * C118 + C47484 * C125) * C21570) *
                C47760 * C47806) *
               C942 +
           ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
             C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
                C47760 * C47806 -
            (C22818 * C21568 + C22819 * C21572 + C22233 * C21567 +
             C22232 * C21571 + C22231 * C21566 + C22230 * C21570) *
                C47760 * C47644) *
               C943 +
           ((C22232 * C21570 + C22233 * C21566 + C22819 * C21571 +
             C22818 * C21567 + (C21569 * C6378 + C47484 * C6380) * C21572 +
             (C21569 * C6382 + C47484 * C6384) * C21568) *
                C47760 * C47644 -
            (C22666 * C21568 + C22667 * C21572 + C21731 * C21567 +
             C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
                C47760 * C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 +
           (C21569 * C263 + C47484 * C276) * C21571 +
           (C21569 * C273 + C47484 * C293) * C21567 +
           (C21569 * C264 + C47484 * C277) * C21572 +
           (C21569 * C280 + C47484 * C294) * C21568) *
              C47760 * C47557 * C47539 * C108 -
          ((C21569 * C281 + C47484 * C295) * C21568 +
           (C21569 * C265 + C47484 * C278) * C21572 +
           (C21569 * C272 + C47484 * C292) * C21567 +
           (C21569 * C262 + C47484 * C275) * C21571 +
           (C21569 * C128 + C47484 * C139) * C21566 +
           (C21569 * C118 + C47484 * C125) * C21570) *
              C47760 * C47557 * C47539 * C109 +
          ((C21569 * C119 + C47484 * C126) * C21570 +
           (C21569 * C129 + C47484 * C140) * C21566 +
           (C21569 * C261 + C47484 * C274) * C21571 +
           (C21569 * C271 + C47484 * C291) * C21567 +
           (C21569 * C266 + C47484 * C279) * C21572 +
           (C21569 * C282 + C47484 * C296) * C21568) *
              C47760 * C47557 * C47539 * C110 -
          ((C21569 * C285 + C47484 * C298) * C21568 +
           (C21569 * C268 + C47484 * C286) * C21572 +
           (C21569 * C284 + C47484 * C297) * C21567 +
           (C21569 * C267 + C47484 * C283) * C21571 +
           (C21569 * C130 + C47484 * C141) * C21566 +
           (C21569 * C120 + C47484 * C131) * C21570) *
              C47760 * C47557 * C47539 * C111 +
          ((C21569 * C121 + C47484 * C132) * C21570 +
           (C21569 * C133 + C47484 * C142) * C21566 +
           (C21569 * C269 + C47484 * C288) * C21571 +
           (C21569 * C287 + C47484 * C299) * C21567 +
           (C21569 * C270 + C47484 * C289) * C21572 +
           (C21569 * C290 + C47484 * C300) * C21568) *
              C47760 * C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C47876 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C47864 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C258 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C47864 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C47876 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C259 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C47876 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C47864 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C21570 +
            (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
            C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
               C47760 * C47557 * C942 -
           (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
            C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
               C47760 * C47557 * C943 +
           (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
            C21724 * C21567 + (C21569 * C1019 + C47484 * C1028) * C21572 +
            (C21569 * C1031 + C47484 * C1037) * C21568) *
               C47760 * C47557 * C47837) *
              C47873 +
          ((C21726 * C21570 + C21727 * C21566 + C21728 * C21571 +
            C21729 * C21567 + C21730 * C21572 + C21731 * C21568) *
               C47760 * C47557 * C943 -
           (C21729 * C21568 + C21728 * C21572 + C21727 * C21567 +
            C21726 * C21571 + (C21569 * C128 + C47484 * C139) * C21566 +
            (C21569 * C118 + C47484 * C125) * C21570) *
               C47760 * C47557 * C942 -
           ((C21569 * C1032 + C47484 * C1038) * C21568 +
            (C21569 * C1020 + C47484 * C1029) * C21572 + C21731 * C21567 +
            C21730 * C21571 + C21729 * C21566 + C21728 * C21570) *
               C47760 * C47557 * C47837) *
              C47860 +
          (((C21569 * C119 + C47484 * C126) * C21570 +
            (C21569 * C129 + C47484 * C140) * C21566 + C21732 * C21571 +
            C21733 * C21567 + C21734 * C21572 + C21735 * C21568) *
               C47760 * C47557 * C942 -
           (C21736 * C21568 + C21737 * C21572 + C21735 * C21567 +
            C21734 * C21571 + C21733 * C21566 + C21732 * C21570) *
               C47760 * C47557 * C943 +
           (C21734 * C21570 + C21735 * C21566 + C21737 * C21571 +
            C21736 * C21567 + (C21569 * C1021 + C47484 * C1030) * C21572 +
            (C21569 * C1033 + C47484 * C1039) * C21568) *
               C47760 * C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21569 * C117 + C47484 * C124) * C21570 +
           (C21569 * C127 + C47484 * C138) * C21566 + C21720 * C21571 +
           C21721 * C21567 + C21722 * C21572 + C21723 * C21568) *
              C47760 * C47557 * C1010 -
          (C21724 * C21568 + C21725 * C21572 + C21723 * C21567 +
           C21722 * C21571 + C21721 * C21566 + C21720 * C21570) *
              C47760 * C47557 * C1011 +
          (C21722 * C21570 + C21723 * C21566 + C21725 * C21571 +
           C21724 * C21567 + C22422 * C21572 + C22423 * C21568) *
              C47760 * C47557 * C1012 -
          (C22424 * C21568 + C22425 * C21572 + C22423 * C21567 +
           C22422 * C21571 + C21724 * C21566 + C21725 * C21570) *
              C47760 * C47557 * C1013 +
          (C22422 * C21570 + C22423 * C21566 + C22425 * C21571 +
           C22424 * C21567 + (C21569 * C22409 + C47484 * C22410) * C21572 +
           (C21569 * C22411 + C47484 * C22412) * C21568) *
              C47760 * C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C47598 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47605 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47557 * C2700) *
                       C47516 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C47605 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47598 -
                    ((C27451 + C27450 + C27449 + C27448) * C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C2700) *
                       C47525 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C47598 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47605 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47598 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C47605 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C47806 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C2700) *
                       C2440 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C47598 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47605 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C47806) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[127] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C47883 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47879 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47557 * C47869 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47557 * C47847) *
                       C2440 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C47879 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47883 -
                    ((C27451 + C27450 + C27449 + C27448) * C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47869 +
                    ((C21730 * C15895 + C21731 * C15891 + C22667 * C15896 +
                      C22666 * C47855) *
                         C10311 +
                     (C22819 * C15895 + C22818 * C15891 +
                      (C21569 * C6378 + C47484 * C6380) * C15896 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C2332 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C47882 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C47602 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C2332) *
                       C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C2332 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C47862 +
                   (((C21954 * C15895 + C21955 * C15891 + C21956 * C15896 +
                      C21957 * C47855) *
                         C10311 +
                     (C26390 * C15895 + C26391 * C15891 +
                      (C21569 * C1440 + C47484 * C1441) * C15896 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47557 * C2332) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47877 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47866 +
                     ((C26245 + C26244 + C26197 + C26196) * C10311 +
                      (C27984 + C27985 + C27968 + C27969) * C47857) *
                         C47840) *
                        C2332 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47866 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47877 -
                     ((C28464 + C28465 + C28466 + C28467) * C47857 +
                      (C27115 + C27114 + C27113 + C27112) * C10311) *
                         C47840) *
                        C47602) *
                       C2440 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47866 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47877 -
                     ((C28324 + C28325 + C28332 + C28333) * C47857 +
                      (C26213 + C26212 + C26249 + C26248) * C10311) *
                         C47840) *
                        C2332 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47877 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47866 +
                     ((C28191 + C28190 + C28189 + C28188) * C10311 +
                      (C28193 * C15895 + C28192 * C15891 +
                       (C21569 * C7246 + C47484 * C7248) * C15896 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C47840) *
                        C47602) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C47516 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C2332 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C47806 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C2332 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C47882 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C47602 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C2332) *
                       C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C2332 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C47862 +
                   (((C21954 * C15895 + C21955 * C15891 + C21956 * C15896 +
                      C21957 * C47855) *
                         C10311 +
                     (C26390 * C15895 + C26391 * C15891 +
                      (C21569 * C1440 + C47484 * C1441) * C15896 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47557 * C2332) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C47883 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47879 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47557 * C47869 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47557 * C47847) *
                       C2440 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C47879 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47883 -
                    ((C27451 + C27450 + C27449 + C27448) * C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47869 +
                    ((C21730 * C15895 + C21731 * C15891 + C22667 * C15896 +
                      C22666 * C47855) *
                         C10311 +
                     (C22819 * C15895 + C22818 * C15891 +
                      (C21569 * C6378 + C47484 * C6380) * C15896 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47598 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47605 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C3094 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C2700) *
                       C47791 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C47598 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47605 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C3094) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47640 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47647 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C3602) *
                       C47598 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47647 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47640 -
                    ((C28464 + C28465 + C28466 + C28467) * C47857 +
                     (C27115 + C27114 + C27113 + C27112) * C10311) *
                        C3602) *
                       C47605 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47640 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47647 +
                    ((C27123 + C27122 + C27121 + C27120) * C10311 +
                     (C23581 * C15895 + C23580 * C15891 +
                      (C21569 * C23567 + C47484 * C23568) * C15896 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C3602) *
                       C2700) *
                  C47511) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C3094 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47883 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47644 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C3094) *
                       C47879 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C3094 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47644) *
                       C47869 +
                   (((C27582 + C27583 + C27584 + C27585) * C10311 +
                     (C22563 * C15895 + C22562 * C15891 +
                      (C21569 * C22535 + C47484 * C22536) * C15896 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C3094) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C47873 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C2332 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C47860 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C3094 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47884 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47881 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C47872 -
                    ((C27986 + C27987 + C27988 + C27989) * C47857 +
                     (C27969 + C27968 + C27985 + C27984) * C10311) *
                        C47853) *
                       C2332 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47881 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47884 -
                    ((C28464 + C28465 + C28466 + C28467) * C47857 +
                     (C27115 + C27114 + C27113 + C27112) * C10311) *
                        C47872 +
                    ((C28467 + C28466 + C28465 + C28464) * C10311 +
                     (C27981 * C15895 + C27980 * C15891 +
                      (C21569 * C23209 + C47484 * C23210) * C15896 +
                      (C21569 * C23211 + C47484 * C23212) * C47855) *
                         C47857) *
                        C47853) *
                       C47602) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47640 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47647 +
                     ((C26245 + C26244 + C26197 + C26196) * C10311 +
                      (C27984 + C27985 + C27968 + C27969) * C47857) *
                         C3602) *
                        C2332 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47647 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47640 -
                     ((C28464 + C28465 + C28466 + C28467) * C47857 +
                      (C27115 + C27114 + C27113 + C27112) * C10311) *
                         C3602) *
                        C47602) *
                       C47791 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47647 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47640 -
                     ((C28324 + C28325 + C28332 + C28333) * C47857 +
                      (C26213 + C26212 + C26249 + C26248) * C10311) *
                         C3602) *
                        C2332 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47640 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47647 +
                     ((C28191 + C28190 + C28189 + C28188) * C10311 +
                      (C28193 * C15895 + C28192 * C15891 +
                       (C21569 * C7246 + C47484 * C7248) * C15896 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C3602) *
                        C47602) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C47873 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C2332 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C47860 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C3094 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C2332 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C3094 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47883 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47644 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C3094) *
                       C47879 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C3094 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47644) *
                       C47869 +
                   (((C27582 + C27583 + C27584 + C27585) * C10311 +
                     (C22563 * C15895 + C22562 * C15891 +
                      (C21569 * C22535 + C47484 * C22536) * C15896 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C3094) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C1284 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C1285 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47557 * C1286 -
                    ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
                      C22560 * C15895) *
                         C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47557 * C47847) *
                       C47791 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C1285 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C1284 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C1286 +
                    ((C21730 * C15895 + C21731 * C15891 + C22667 * C15896 +
                      C22666 * C47855) *
                         C10311 +
                     (C22819 * C15895 + C22818 * C15891 +
                      (C21569 * C6378 + C47484 * C6380) * C15896 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C47805 -
                    ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                      C22229 * C15895) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C554 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47805) *
                       C555 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C47805 -
                    ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                      C22237 * C15895) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C556 +
                   (((C21954 * C15895 + C21955 * C15891 + C21956 * C15896 +
                      C21957 * C47855) *
                         C10311 +
                     (C26390 * C15895 + C26391 * C15891 +
                      (C21569 * C1440 + C47484 * C1441) * C15896 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26391 * C47855 + C26390 * C15896 +
                      (C21569 * C437 + C47484 * C450) * C15891 +
                      (C21569 * C420 + C47484 * C436) * C15895) *
                         C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47557 * C47805) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C1664 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C1665 +
                     ((C26245 + C26244 + C26197 + C26196) * C10311 +
                      (C27984 + C27985 + C27968 + C27969) * C47857) *
                         C47840) *
                        C47805 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C1665 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C1664 -
                     ((C23580 * C47855 + C23581 * C15896 + C23582 * C15891 +
                       C23583 * C15895) *
                          C47857 +
                      (C27115 + C27114 + C27113 + C27112) * C10311) *
                         C47840) *
                        C47602) *
                       C47791 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C1665 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C1664 -
                     ((C28192 * C47855 + C28193 * C15896 +
                       (C21569 * C1851 + C47484 * C1863) * C15891 +
                       (C21569 * C1845 + C47484 * C1854) * C15895) *
                          C47857 +
                      (C26213 + C26212 + C26249 + C26248) * C10311) *
                         C47840) *
                        C47805 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C1664 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C1665 +
                     ((C28191 + C28190 + C28189 + C28188) * C10311 +
                      (C28193 * C15895 + C28192 * C15891 +
                       (C21569 * C7246 + C47484 * C7248) * C15896 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C47840) *
                        C47602) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[136] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47806 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C1284 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47644 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47806) *
                       C1285 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47806 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47644) *
                       C1286 +
                   (((C27582 + C27583 + C27584 + C27585) * C10311 +
                     (C22563 * C15895 + C22562 * C15891 +
                      (C21569 * C22535 + C47484 * C22536) * C15896 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47806) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C22556 * C15895 + C22557 * C15891 + C22558 * C15896 +
                       C22559 * C47855) *
                          C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C258 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C47805 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C15896 + C23370 * C15891 +
                       C23371 * C15895) *
                          C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C259 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C47806 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C2116 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C2117 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C2118 -
                    ((C27986 + C27987 + C27988 + C27989) * C47857 +
                     (C27969 + C27968 + C27985 + C27984) * C10311) *
                        C47853) *
                       C47805 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C2117 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C2116 -
                    ((C28464 + C28465 + C28466 + C28467) * C47857 +
                     (C27115 + C27114 + C27113 + C27112) * C10311) *
                        C2118 +
                    ((C28467 + C28466 + C28465 + C28464) * C10311 +
                     (C27981 * C15895 + C27980 * C15891 +
                      (C21569 * C23209 + C47484 * C23210) * C15896 +
                      (C21569 * C23211 + C47484 * C23212) * C47855) *
                         C47857) *
                        C47853) *
                       C47602) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21569 * C117 + C47484 * C124) * C15895 +
                (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
                C21721 * C47855) *
                   C10311 +
               ((C21569 * C416 + C47484 * C429) * C15895 +
                (C21569 * C426 + C47484 * C446) * C15891 + C22229 * C15896 +
                C22228 * C47855) *
                   C47857) *
                  C47557 * C47539 * C108 -
              ((C22231 * C47855 + C22230 * C15896 +
                (C21569 * C425 + C47484 * C445) * C15891 +
                (C21569 * C415 + C47484 * C428) * C15895) *
                   C47857 +
               (C21727 * C47855 + C21726 * C15896 +
                (C21569 * C128 + C47484 * C139) * C15891 +
                (C21569 * C118 + C47484 * C125) * C15895) *
                   C10311) *
                  C47557 * C47539 * C109 +
              (((C21569 * C119 + C47484 * C126) * C15895 +
                (C21569 * C129 + C47484 * C140) * C15891 + C21732 * C15896 +
                C21733 * C47855) *
                   C10311 +
               ((C21569 * C414 + C47484 * C427) * C15895 +
                (C21569 * C424 + C47484 * C444) * C15891 + C22237 * C15896 +
                C22236 * C47855) *
                   C47857) *
                  C47557 * C47539 * C110 -
              (((C21569 * C823 + C47484 * C830) * C47855 +
                (C21569 * C815 + C47484 * C824) * C15896 +
                (C21569 * C437 + C47484 * C450) * C15891 +
                (C21569 * C420 + C47484 * C436) * C15895) *
                   C47857 +
               (C21955 * C47855 + C21954 * C15896 +
                (C21569 * C130 + C47484 * C141) * C15891 +
                (C21569 * C120 + C47484 * C131) * C15895) *
                   C10311) *
                  C47557 * C47539 * C111 +
              (((C21569 * C121 + C47484 * C132) * C15895 +
                (C21569 * C133 + C47484 * C142) * C15891 +
                (C21569 * C269 + C47484 * C288) * C15896 +
                (C21569 * C287 + C47484 * C299) * C47855) *
                   C10311 +
               ((C21569 * C422 + C47484 * C441) * C15895 +
                (C21569 * C440 + C47484 * C452) * C15891 +
                (C21569 * C816 + C47484 * C825) * C15896 +
                (C21569 * C826 + C47484 * C831) * C47855) *
                   C47857) *
                  C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21569 * C117 + C47484 * C124) * C15895 +
                 (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
                 C21721 * C47855) *
                    C10311 +
                ((C21569 * C416 + C47484 * C429) * C15895 +
                 (C21569 * C426 + C47484 * C446) * C15891 + C22229 * C15896 +
                 C22228 * C47855) *
                    C47857) *
                   C47557 * C47876 -
               ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                 C22229 * C15895) *
                    C47857 +
                (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                 C21720 * C15895) *
                    C10311) *
                   C47557 * C47864 +
               ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                 C21724 * C47855) *
                    C10311 +
                (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                 C22561 * C47855) *
                    C47857) *
                   C47557 * C47837) *
                  C258 +
              (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                 C21729 * C47855) *
                    C10311 +
                (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                 C22233 * C47855) *
                    C47857) *
                   C47557 * C47864 -
               ((C22231 * C47855 + C22230 * C15896 +
                 (C21569 * C425 + C47484 * C445) * C15891 +
                 (C21569 * C415 + C47484 * C428) * C15895) *
                    C47857 +
                (C21727 * C47855 + C21726 * C15896 +
                 (C21569 * C128 + C47484 * C139) * C15891 +
                 (C21569 * C118 + C47484 * C125) * C15895) *
                    C10311) *
                   C47557 * C47876 -
               ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                 C22232 * C15895) *
                    C47857 +
                (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                 C21728 * C15895) *
                    C10311) *
                   C47557 * C47837) *
                  C259 +
              ((((C21569 * C119 + C47484 * C126) * C15895 +
                 (C21569 * C129 + C47484 * C140) * C15891 + C21732 * C15896 +
                 C21733 * C47855) *
                    C10311 +
                ((C21569 * C414 + C47484 * C427) * C15895 +
                 (C21569 * C424 + C47484 * C444) * C15891 + C22237 * C15896 +
                 C22236 * C47855) *
                    C47857) *
                   C47557 * C47876 -
               ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                 C22237 * C15895) *
                    C47857 +
                (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                 C21732 * C15895) *
                    C10311) *
                   C47557 * C47864 +
               ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                 C21736 * C47855) *
                    C10311 +
                (C22235 * C15895 + C22234 * C15891 +
                 (C21569 * C1544 + C47484 * C1547) * C15896 +
                 (C21569 * C1550 + C47484 * C1553) * C47855) *
                    C47857) *
                   C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21569 * C117 + C47484 * C124) * C15895 +
                                 (C21569 * C127 + C47484 * C138) * C15891 +
                                 C21720 * C15896 + C21721 * C47855) *
                                    C10311 +
                                (C26242 + C26243 + C26194 + C26195) * C47857) *
                                   C47877 -
                               ((C26196 + C26197 + C26244 + C26245) * C47857 +
                                (C26195 + C26194 + C26243 + C26242) * C10311) *
                                   C47866 +
                               ((C26245 + C26244 + C26197 + C26196) * C10311 +
                                ((C21569 * C1846 + C47484 * C1855) * C15895 +
                                 (C21569 * C1852 + C47484 * C1864) * C15891 +
                                 C23583 * C15896 + C23582 * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C258 +
                              (((C26246 + C26247 + C26206 + C26207) * C10311 +
                                (C26248 + C26249 + C26212 + C26213) * C47857) *
                                   C47866 -
                               ((C26207 + C26206 + C26247 + C26246) * C47857 +
                                (C21727 * C47855 + C21726 * C15896 +
                                 (C21569 * C128 + C47484 * C139) * C15891 +
                                 (C21569 * C118 + C47484 * C125) * C15895) *
                                    C10311) *
                                   C47877 -
                               (((C21569 * C2229 + C47484 * C2232) * C47855 +
                                 (C21569 * C2223 + C47484 * C2226) * C15896 +
                                 (C21569 * C1851 + C47484 * C1863) * C15891 +
                                 (C21569 * C1845 + C47484 * C1854) * C15895) *
                                    C47857 +
                                (C26213 + C26212 + C26249 + C26248) * C10311) *
                                   C47840) *
                                  C47539 * C259 +
                              ((((C21569 * C119 + C47484 * C126) * C15895 +
                                 (C21569 * C129 + C47484 * C140) * C15891 +
                                 C21732 * C15896 + C21733 * C47855) *
                                    C10311 +
                                (C26250 + C26251 + C26218 + C26219) * C47857) *
                                   C47877 -
                               ((C26252 + C26253 + C26254 + C26255) * C47857 +
                                (C26219 + C26218 + C26251 + C26250) * C10311) *
                                   C47866 +
                               ((C26255 + C26254 + C26253 + C26252) * C10311 +
                                ((C21569 * C1844 + C47484 * C1853) * C15895 +
                                 (C21569 * C1850 + C47484 * C1862) * C15891 +
                                 (C21569 * C2224 + C47484 * C2227) * C15896 +
                                 (C21569 * C2230 + C47484 * C2233) * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C15895 +
             (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
             C21721 * C47855) *
                C10311 +
            (C26242 + C26243 + C26194 + C26195) * C47857) *
               C47557 * C942 -
           ((C26729 + C26728 + C26727 + C26726) * C47857 +
            (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
             C21720 * C15895) *
                C10311) *
               C47557 * C943 +
           ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
             C21724 * C47855) *
                C10311 +
            (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
             C22561 * C47855) *
                C47857) *
               C47557 * C47837) *
              C47873 +
          (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
             C21729 * C47855) *
                C10311 +
            (C26730 + C26731 + C26732 + C26733) * C47857) *
               C47557 * C943 -
           ((C26207 + C26206 + C26247 + C26246) * C47857 +
            (C21727 * C47855 + C21726 * C15896 +
             (C21569 * C128 + C47484 * C139) * C15891 +
             (C21569 * C118 + C47484 * C125) * C15895) *
                C10311) *
               C47557 * C942 -
           ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
             C22232 * C15895) *
                C47857 +
            (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
             C21728 * C15895) *
                C10311) *
               C47557 * C47837) *
              C47860 +
          ((((C21569 * C119 + C47484 * C126) * C15895 +
             (C21569 * C129 + C47484 * C140) * C15891 + C21732 * C15896 +
             C21733 * C47855) *
                C10311 +
            (C26250 + C26251 + C26218 + C26219) * C47857) *
               C47557 * C942 -
           ((C26737 + C26736 + C26735 + C26734) * C47857 +
            (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
             C21732 * C15895) *
                C10311) *
               C47557 * C943 +
           ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
             C21736 * C47855) *
                C10311 +
            (C22235 * C15895 + C22234 * C15891 +
             (C21569 * C1544 + C47484 * C1547) * C15896 +
             (C21569 * C1550 + C47484 * C1553) * C47855) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C15895 +
            (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
            C21721 * C47855) *
               C10311 +
           (C26242 + C26243 + C26194 + C26195) * C47857) *
              C47557 * C1010 -
          ((C26729 + C26728 + C26727 + C26726) * C47857 +
           (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
            C21720 * C15895) *
               C10311) *
              C47557 * C1011 +
          ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
            C21724 * C47855) *
               C10311 +
           (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
            C22561 * C47855) *
               C47857) *
              C47557 * C1012 -
          ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
            C22560 * C15895) *
               C47857 +
           (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
            C21725 * C15895) *
               C10311) *
              C47557 * C1013 +
          ((C22422 * C15895 + C22423 * C15891 + C22425 * C15896 +
            C22424 * C47855) *
               C10311 +
           (C22927 * C15895 + C22926 * C15891 +
            (C21569 * C22917 + C47484 * C22918) * C15896 +
            (C21569 * C22919 + C47484 * C22920) * C47855) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C15895 +
             (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
             C21721 * C47855) *
                C10311 +
            (C26242 + C26243 + C26194 + C26195) * C47857) *
               C47877 -
           ((C26196 + C26197 + C26244 + C26245) * C47857 +
            (C26195 + C26194 + C26243 + C26242) * C10311) *
               C47866 +
           ((C26245 + C26244 + C26197 + C26196) * C10311 +
            ((C21569 * C1846 + C47484 * C1855) * C15895 +
             (C21569 * C1852 + C47484 * C1864) * C15891 + C23583 * C15896 +
             C23582 * C47855) *
                C47857) *
               C47840) *
              C942 +
          (((C26726 + C26727 + C26728 + C26729) * C10311 +
            (C27112 + C27113 + C27114 + C27115) * C47857) *
               C47866 -
           ((C26729 + C26728 + C26727 + C26726) * C47857 +
            (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
             C21720 * C15895) *
                C10311) *
               C47877 -
           ((C23580 * C47855 + C23581 * C15896 + C23582 * C15891 +
             C23583 * C15895) *
                C47857 +
            (C27115 + C27114 + C27113 + C27112) * C10311) *
               C47840) *
              C943 +
          (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
             C21724 * C47855) *
                C10311 +
            (C27116 + C27117 + C27118 + C27119) * C47857) *
               C47877 -
           ((C27120 + C27121 + C27122 + C27123) * C47857 +
            (C27119 + C27118 + C27117 + C27116) * C10311) *
               C47866 +
           ((C27123 + C27122 + C27121 + C27120) * C10311 +
            (C23581 * C15895 + C23580 * C15891 +
             (C21569 * C23567 + C47484 * C23568) * C15896 +
             (C21569 * C23569 + C47484 * C23570) * C47855) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21569 * C117 + C47484 * C124) * C15895 +
                                 (C21569 * C127 + C47484 * C138) * C15891 +
                                 C21720 * C15896 + C21721 * C47855) *
                                    C10311 +
                                (C26242 + C26243 + C26194 + C26195) * C47857) *
                                   C1664 -
                               ((C26196 + C26197 + C26244 + C26245) * C47857 +
                                (C26195 + C26194 + C26243 + C26242) * C10311) *
                                   C1665 +
                               ((C26245 + C26244 + C26197 + C26196) * C10311 +
                                ((C21569 * C1846 + C47484 * C1855) * C15895 +
                                 (C21569 * C1852 + C47484 * C1864) * C15891 +
                                 C23583 * C15896 + C23582 * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47873 +
                              (((C26246 + C26247 + C26206 + C26207) * C10311 +
                                (C26248 + C26249 + C26212 + C26213) * C47857) *
                                   C1665 -
                               ((C26207 + C26206 + C26247 + C26246) * C47857 +
                                (C21727 * C47855 + C21726 * C15896 +
                                 (C21569 * C128 + C47484 * C139) * C15891 +
                                 (C21569 * C118 + C47484 * C125) * C15895) *
                                    C10311) *
                                   C1664 -
                               (((C21569 * C2229 + C47484 * C2232) * C47855 +
                                 (C21569 * C2223 + C47484 * C2226) * C15896 +
                                 (C21569 * C1851 + C47484 * C1863) * C15891 +
                                 (C21569 * C1845 + C47484 * C1854) * C15895) *
                                    C47857 +
                                (C26213 + C26212 + C26249 + C26248) * C10311) *
                                   C47840) *
                                  C47539 * C47860 +
                              ((((C21569 * C119 + C47484 * C126) * C15895 +
                                 (C21569 * C129 + C47484 * C140) * C15891 +
                                 C21732 * C15896 + C21733 * C47855) *
                                    C10311 +
                                (C26250 + C26251 + C26218 + C26219) * C47857) *
                                   C1664 -
                               ((C26252 + C26253 + C26254 + C26255) * C47857 +
                                (C26219 + C26218 + C26251 + C26250) * C10311) *
                                   C1665 +
                               ((C26255 + C26254 + C26253 + C26252) * C10311 +
                                ((C21569 * C1844 + C47484 * C1853) * C15895 +
                                 (C21569 * C1850 + C47484 * C1862) * C15891 +
                                 (C21569 * C2224 + C47484 * C2227) * C15896 +
                                 (C21569 * C2230 + C47484 * C2233) * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C15895 +
             (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
             C21721 * C47855) *
                C10311 +
            (C26242 + C26243 + C26194 + C26195) * C47857) *
               C1664 -
           ((C26196 + C26197 + C26244 + C26245) * C47857 +
            (C26195 + C26194 + C26243 + C26242) * C10311) *
               C1665 +
           ((C26245 + C26244 + C26197 + C26196) * C10311 +
            ((C21569 * C1846 + C47484 * C1855) * C15895 +
             (C21569 * C1852 + C47484 * C1864) * C15891 + C23583 * C15896 +
             C23582 * C47855) *
                C47857) *
               C47840) *
              C47876 +
          (((C26726 + C26727 + C26728 + C26729) * C10311 +
            (C27112 + C27113 + C27114 + C27115) * C47857) *
               C1665 -
           ((C26729 + C26728 + C26727 + C26726) * C47857 +
            (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
             C21720 * C15895) *
                C10311) *
               C1664 -
           ((C23580 * C47855 + C23581 * C15896 + C23582 * C15891 +
             C23583 * C15895) *
                C47857 +
            (C27115 + C27114 + C27113 + C27112) * C10311) *
               C47840) *
              C47864 +
          (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
             C21724 * C47855) *
                C10311 +
            (C27116 + C27117 + C27118 + C27119) * C47857) *
               C1664 -
           ((C27120 + C27121 + C27122 + C27123) * C47857 +
            (C27119 + C27118 + C27117 + C27116) * C10311) *
               C1665 +
           ((C27123 + C27122 + C27121 + C27120) * C10311 +
            (C23581 * C15895 + C23580 * C15891 +
             (C21569 * C23567 + C47484 * C23568) * C15896 +
             (C21569 * C23569 + C47484 * C23570) * C47855) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C15895 +
            (C21569 * C127 + C47484 * C138) * C15891 + C21720 * C15896 +
            C21721 * C47855) *
               C10311 +
           (C26242 + C26243 + C26194 + C26195) * C47857) *
              C1839 -
          ((C26196 + C26197 + C26244 + C26245) * C47857 +
           (C26195 + C26194 + C26243 + C26242) * C10311) *
              C1840 +
          ((C26245 + C26244 + C26197 + C26196) * C10311 +
           (C27984 + C27985 + C27968 + C27969) * C47857) *
              C1841 -
          ((C27986 + C27987 + C27988 + C27989) * C47857 +
           (C27969 + C27968 + C27985 + C27984) * C10311) *
              C1842 +
          ((C27989 + C27988 + C27987 + C27986) * C10311 +
           ((C21569 * C12345 + C47484 * C12347) * C15895 +
            (C21569 * C12349 + C47484 * C12351) * C15891 +
            (C21569 * C27959 + C47484 * C27960) * C15896 +
            (C21569 * C27961 + C47484 * C27962) * C47855) *
               C47857) *
              C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[138] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C942 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C943 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C47806 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C47837) *
                       C47791 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C942 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C15896 + C23370 * C15891 +
                       C23371 * C15895) *
                          C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C943 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C47806) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47806 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47539 * C554 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47644 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47806) *
                       C47539 * C555 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47806 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47644) *
                       C47539 * C556 +
                   (((C26530 + C26531 + C26526 + C26527) * C10311 +
                     ((C21569 * C421 + C47484 * C439) * C15895 +
                      (C21569 * C438 + C47484 * C451) * C15891 +
                      (C21569 * C2014 + C47484 * C2015) * C15896 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47806) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C2116 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C2117 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C2118 -
                    ((C27986 + C27987 + C27988 + C27989) * C47857 +
                     (C27969 + C27968 + C27985 + C27984) * C10311) *
                        C47853) *
                       C47539 * C47791 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C2117 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C2116 -
                    ((C28324 + C28325 + C28332 + C28333) * C47857 +
                     (C26213 + C26212 + C26249 + C26248) * C10311) *
                        C2118 +
                    ((C28333 + C28332 + C28325 + C28324) * C10311 +
                     ((C21569 * C1848 + C47484 * C1857) * C15895 +
                      (C21569 * C1860 + C47484 * C1866) * C15891 +
                      (C21569 * C6772 + C47484 * C6774) * C15896 +
                      (C21569 * C6776 + C47484 * C6778) * C47855) *
                         C47857) *
                        C47853) *
                       C47539 * C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     ((C21569 * C416 + C47484 * C429) * C15895 +
                      (C21569 * C426 + C47484 * C446) * C15891 +
                      C22229 * C15896 + C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                      C22229 * C15895) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C15896 +
                      (C21569 * C425 + C47484 * C445) * C15891 +
                      (C21569 * C415 + C47484 * C428) * C15895) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     ((C21569 * C414 + C47484 * C427) * C15895 +
                      (C21569 * C424 + C47484 * C444) * C15891 +
                      C22237 * C15896 + C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                      C22237 * C15895) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    ((C21569 * C416 + C47484 * C429) * C15895 +
                     (C21569 * C426 + C47484 * C446) * C15891 +
                     C22229 * C15896 + C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C15896 +
                     (C21569 * C425 + C47484 * C445) * C15891 +
                     (C21569 * C415 + C47484 * C428) * C15895) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C15896 +
                     (C21569 * C128 + C47484 * C139) * C15891 +
                     (C21569 * C118 + C47484 * C125) * C15895) *
                        C10311) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C15895 +
                     (C21569 * C129 + C47484 * C140) * C15891 +
                     C21732 * C15896 + C21733 * C47855) *
                        C10311 +
                    ((C21569 * C414 + C47484 * C427) * C15895 +
                     (C21569 * C424 + C47484 * C444) * C15891 +
                     C22237 * C15896 + C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C823 + C47484 * C830) * C47855 +
                     (C21569 * C815 + C47484 * C824) * C15896 +
                     (C21569 * C437 + C47484 * C450) * C15891 +
                     (C21569 * C420 + C47484 * C436) * C15895) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C15896 +
                     (C21569 * C130 + C47484 * C141) * C15891 +
                     (C21569 * C120 + C47484 * C131) * C15895) *
                        C10311) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C15895 +
                     (C21569 * C133 + C47484 * C142) * C15891 +
                     (C21569 * C269 + C47484 * C288) * C15896 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C10311 +
                    ((C21569 * C422 + C47484 * C441) * C15895 +
                     (C21569 * C440 + C47484 * C452) * C15891 +
                     (C21569 * C816 + C47484 * C825) * C15896 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C942 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C943 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C942 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    (C26242 + C26243 + C26194 + C26195) * C47857) *
                       C47557 * C1010 -
                   ((C26729 + C26728 + C26727 + C26726) * C47857 +
                    (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                     C21720 * C15895) *
                        C10311) *
                       C47557 * C1011 +
                   ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                     C21724 * C47855) *
                        C10311 +
                    (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
                     C22560 * C15895) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                     C21725 * C15895) *
                        C10311) *
                       C47557 * C1013 +
                   ((C22422 * C15895 + C22423 * C15891 + C22425 * C15896 +
                     C22424 * C47855) *
                        C10311 +
                    (C22927 * C15895 + C22926 * C15891 +
                     (C21569 * C22917 + C47484 * C22918) * C15896 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C1664 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C1665 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     ((C21569 * C1846 + C47484 * C1855) * C15895 +
                      (C21569 * C1852 + C47484 * C1864) * C15891 +
                      C23583 * C15896 + C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47873 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C1665 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C1664 -
                    (((C21569 * C2229 + C47484 * C2232) * C47855 +
                      (C21569 * C2223 + C47484 * C2226) * C15896 +
                      (C21569 * C1851 + C47484 * C1863) * C15891 +
                      (C21569 * C1845 + C47484 * C1854) * C15895) *
                         C47857 +
                     (C26213 + C26212 + C26249 + C26248) * C10311) *
                        C47840) *
                       C47539 * C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C1664 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C1665 +
                    ((C26255 + C26254 + C26253 + C26252) * C10311 +
                     ((C21569 * C1844 + C47484 * C1853) * C15895 +
                      (C21569 * C1850 + C47484 * C1862) * C15891 +
                      (C21569 * C2224 + C47484 * C2227) * C15896 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C1664 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C1665 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     ((C21569 * C1846 + C47484 * C1855) * C15895 +
                      (C21569 * C1852 + C47484 * C1864) * C15891 +
                      C23583 * C15896 + C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47876 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C1665 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C1664 -
                    ((C23580 * C47855 + C23581 * C15896 + C23582 * C15891 +
                      C23583 * C15895) *
                         C47857 +
                     (C27115 + C27114 + C27113 + C27112) * C10311) *
                        C47840) *
                       C47864 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C1664 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C1665 +
                    ((C27123 + C27122 + C27121 + C27120) * C10311 +
                     (C23581 * C15895 + C23580 * C15891 +
                      (C21569 * C23567 + C47484 * C23568) * C15896 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C47516 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C47805 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C3094 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C3094) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47640 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47647 +
                     ((C26245 + C26244 + C26197 + C26196) * C10311 +
                      (C27984 + C27985 + C27968 + C27969) * C47857) *
                         C3602) *
                        C47805 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47647 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47640 -
                     ((C28464 + C28465 + C28466 + C28467) * C47857 +
                      (C27115 + C27114 + C27113 + C27112) * C10311) *
                         C3602) *
                        C47602) *
                       C2440 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47647 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47640 -
                     ((C28324 + C28325 + C28332 + C28333) * C47857 +
                      (C26213 + C26212 + C26249 + C26248) * C10311) *
                         C3602) *
                        C47805 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47640 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47647 +
                     ((C28191 + C28190 + C28189 + C28188) * C10311 +
                      (C28193 * C15895 + C28192 * C15891 +
                       (C21569 * C7246 + C47484 * C7248) * C15896 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C3602) *
                        C47602) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47876 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47864 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C3094 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C47837) *
                       C2440 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C47876 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47864 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C3094) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C3094 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47539 * C47882 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47644 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C3094) *
                       C47539 * C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C3094 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47644) *
                       C47539 * C47862 +
                   (((C26530 + C26531 + C26526 + C26527) * C10311 +
                     ((C21569 * C421 + C47484 * C439) * C15895 +
                      (C21569 * C438 + C47484 * C451) * C15891 +
                      (C21569 * C2014 + C47484 * C2015) * C15896 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C3094) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47884 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47881 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C47872 -
                    ((C27986 + C27987 + C27988 + C27989) * C47857 +
                     (C27969 + C27968 + C27985 + C27984) * C10311) *
                        C47853) *
                       C47539 * C2440 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47881 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47884 -
                    ((C28324 + C28325 + C28332 + C28333) * C47857 +
                     (C26213 + C26212 + C26249 + C26248) * C10311) *
                        C47872 +
                    ((C28333 + C28332 + C28325 + C28324) * C10311 +
                     ((C21569 * C1848 + C47484 * C1857) * C15895 +
                      (C21569 * C1860 + C47484 * C1866) * C15891 +
                      (C21569 * C6772 + C47484 * C6774) * C15896 +
                      (C21569 * C6776 + C47484 * C6778) * C47855) *
                         C47857) *
                        C47853) *
                       C47539 * C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47640 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47647 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     (C27984 + C27985 + C27968 + C27969) * C47857) *
                        C3602) *
                       C47539 * C47516 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47647 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47640 -
                    ((C28324 + C28325 + C28332 + C28333) * C47857 +
                     (C26213 + C26212 + C26249 + C26248) * C10311) *
                        C3602) *
                       C47539 * C47525 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47640 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47647 +
                    ((C26255 + C26254 + C26253 + C26252) * C10311 +
                     ((C21569 * C1844 + C47484 * C1853) * C15895 +
                      (C21569 * C1850 + C47484 * C1862) * C15891 +
                      (C21569 * C2224 + C47484 * C2227) * C15896 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C3602) *
                       C47539 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C3094 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47539 * C47882 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47644 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C3094) *
                       C47539 * C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C3094 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47644) *
                       C47539 * C47862 +
                   (((C26530 + C26531 + C26526 + C26527) * C10311 +
                     ((C21569 * C421 + C47484 * C439) * C15895 +
                      (C21569 * C438 + C47484 * C451) * C15891 +
                      (C21569 * C2014 + C47484 * C2015) * C15896 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C3094) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C3094 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47876 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C3094) *
                        C47864 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C3094 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C47837) *
                       C2440 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C3094) *
                        C47876 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C3094 -
                     ((C28188 + C28189 + C28190 + C28191) * C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47864 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C3094) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C47805 -
                    ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                      C22229 * C15895) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C554 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47805) *
                       C555 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C47805 -
                    ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                      C22237 * C15895) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47602) *
                       C556 +
                   (((C21954 * C15895 + C21955 * C15891 + C21956 * C15896 +
                      C21957 * C47855) *
                         C10311 +
                     (C26390 * C15895 + C26391 * C15891 +
                      (C21569 * C1440 + C47484 * C1441) * C15896 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26391 * C47855 + C26390 * C15896 +
                      (C21569 * C437 + C47484 * C450) * C15891 +
                      (C21569 * C420 + C47484 * C436) * C15895) *
                         C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47557 * C47805) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C1284 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C1285 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47557 * C1286 -
                    ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
                      C22560 * C15895) *
                         C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47557 * C47847) *
                       C47791 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C1285 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C1284 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C1286 +
                    ((C21730 * C15895 + C21731 * C15891 + C22667 * C15896 +
                      C22666 * C47855) *
                         C10311 +
                     (C22819 * C15895 + C22818 * C15891 +
                      (C21569 * C6378 + C47484 * C6380) * C15896 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C22556 * C15895 + C22557 * C15891 + C22558 * C15896 +
                       C22559 * C47855) *
                          C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C258 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C47805 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C15896 + C23370 * C15891 +
                       C23371 * C15895) *
                          C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C47602) *
                       C259 +
                   (((((C21569 * C119 + C47484 * C126) * C15895 +
                       (C21569 * C129 + C47484 * C140) * C15891 +
                       C21732 * C15896 + C21733 * C47855) *
                          C10311 +
                      (C26250 + C26251 + C26218 + C26219) * C47857) *
                         C47806 -
                     ((C26252 + C26253 + C26254 + C26255) * C47857 +
                      (C26219 + C26218 + C26251 + C26250) * C10311) *
                         C47644) *
                        C47805 +
                    (((C26734 + C26735 + C26736 + C26737) * C10311 +
                      (C26239 * C15895 + C26238 * C15891 +
                       (C21569 * C1158 + C47484 * C1173) * C15896 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C26737 + C26736 + C26735 + C26734) * C47857 +
                      (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                       C21732 * C15895) *
                          C10311) *
                         C47806) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47806 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C1284 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47644 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47806) *
                       C1285 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47806 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47644) *
                       C1286 +
                   (((C27582 + C27583 + C27584 + C27585) * C10311 +
                     (C22563 * C15895 + C22562 * C15891 +
                      (C21569 * C22535 + C47484 * C22536) * C15896 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C27585 + C27584 + C27583 + C27582) * C47857 +
                     (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                      C21725 * C15895) *
                         C10311) *
                        C47806) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     ((C21569 * C416 + C47484 * C429) * C15895 +
                      (C21569 * C426 + C47484 * C446) * C15891 +
                      C22229 * C15896 + C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                      C22229 * C15895) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C15896 +
                      (C21569 * C425 + C47484 * C445) * C15891 +
                      (C21569 * C415 + C47484 * C428) * C15895) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     ((C21569 * C414 + C47484 * C427) * C15895 +
                      (C21569 * C424 + C47484 * C444) * C15891 +
                      C22237 * C15896 + C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                      C22237 * C15895) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    ((C21569 * C416 + C47484 * C429) * C15895 +
                     (C21569 * C426 + C47484 * C446) * C15891 +
                     C22229 * C15896 + C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C15896 +
                     (C21569 * C425 + C47484 * C445) * C15891 +
                     (C21569 * C415 + C47484 * C428) * C15895) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C15896 +
                     (C21569 * C128 + C47484 * C139) * C15891 +
                     (C21569 * C118 + C47484 * C125) * C15895) *
                        C10311) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C15895 +
                     (C21569 * C129 + C47484 * C140) * C15891 +
                     C21732 * C15896 + C21733 * C47855) *
                        C10311 +
                    ((C21569 * C414 + C47484 * C427) * C15895 +
                     (C21569 * C424 + C47484 * C444) * C15891 +
                     C22237 * C15896 + C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C823 + C47484 * C830) * C47855 +
                     (C21569 * C815 + C47484 * C824) * C15896 +
                     (C21569 * C437 + C47484 * C450) * C15891 +
                     (C21569 * C420 + C47484 * C436) * C15895) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C15896 +
                     (C21569 * C130 + C47484 * C141) * C15891 +
                     (C21569 * C120 + C47484 * C131) * C15895) *
                        C10311) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C15895 +
                     (C21569 * C133 + C47484 * C142) * C15891 +
                     (C21569 * C269 + C47484 * C288) * C15896 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C10311 +
                    ((C21569 * C422 + C47484 * C441) * C15895 +
                     (C21569 * C440 + C47484 * C452) * C15891 +
                     (C21569 * C816 + C47484 * C825) * C15896 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47877 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47866 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     ((C21569 * C1846 + C47484 * C1855) * C15895 +
                      (C21569 * C1852 + C47484 * C1864) * C15891 +
                      C23583 * C15896 + C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C258 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47866 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47877 -
                    (((C21569 * C2229 + C47484 * C2232) * C47855 +
                      (C21569 * C2223 + C47484 * C2226) * C15896 +
                      (C21569 * C1851 + C47484 * C1863) * C15891 +
                      (C21569 * C1845 + C47484 * C1854) * C15895) *
                         C47857 +
                     (C26213 + C26212 + C26249 + C26248) * C10311) *
                        C47840) *
                       C47539 * C259 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47877 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47866 +
                    ((C26255 + C26254 + C26253 + C26252) * C10311 +
                     ((C21569 * C1844 + C47484 * C1853) * C15895 +
                      (C21569 * C1850 + C47484 * C1862) * C15891 +
                      (C21569 * C2224 + C47484 * C2227) * C15896 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C942 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C943 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C942 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    (C26242 + C26243 + C26194 + C26195) * C47857) *
                       C47557 * C1010 -
                   ((C26729 + C26728 + C26727 + C26726) * C47857 +
                    (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                     C21720 * C15895) *
                        C10311) *
                       C47557 * C1011 +
                   ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                     C21724 * C47855) *
                        C10311 +
                    (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
                     C22560 * C15895) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                     C21725 * C15895) *
                        C10311) *
                       C47557 * C1013 +
                   ((C22422 * C15895 + C22423 * C15891 + C22425 * C15896 +
                     C22424 * C47855) *
                        C10311 +
                    (C22927 * C15895 + C22926 * C15891 +
                     (C21569 * C22917 + C47484 * C22918) * C15896 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47877 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47866 +
                    ((C26245 + C26244 + C26197 + C26196) * C10311 +
                     ((C21569 * C1846 + C47484 * C1855) * C15895 +
                      (C21569 * C1852 + C47484 * C1864) * C15891 +
                      C23583 * C15896 + C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C942 +
                   (((C26726 + C26727 + C26728 + C26729) * C10311 +
                     (C27112 + C27113 + C27114 + C27115) * C47857) *
                        C47866 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47877 -
                    ((C23580 * C47855 + C23581 * C15896 + C23582 * C15891 +
                      C23583 * C15895) *
                         C47857 +
                     (C27115 + C27114 + C27113 + C27112) * C10311) *
                        C47840) *
                       C943 +
                   (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C27116 + C27117 + C27118 + C27119) * C47857) *
                        C47877 -
                    ((C27120 + C27121 + C27122 + C27123) * C47857 +
                     (C27119 + C27118 + C27117 + C27116) * C10311) *
                        C47866 +
                    ((C27123 + C27122 + C27121 + C27120) * C10311 +
                     (C23581 * C15895 + C23580 * C15891 +
                      (C21569 * C23567 + C47484 * C23568) * C15896 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47806 -
                    ((C26196 + C26197 + C26244 + C26245) * C47857 +
                     (C26195 + C26194 + C26243 + C26242) * C10311) *
                        C47644) *
                       C47539 * C554 +
                   (((C26246 + C26247 + C26206 + C26207) * C10311 +
                     (C26248 + C26249 + C26212 + C26213) * C47857) *
                        C47644 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47806) *
                       C47539 * C555 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47806 -
                    ((C26252 + C26253 + C26254 + C26255) * C47857 +
                     (C26219 + C26218 + C26251 + C26250) * C10311) *
                        C47644) *
                       C47539 * C556 +
                   (((C26530 + C26531 + C26526 + C26527) * C10311 +
                     ((C21569 * C421 + C47484 * C439) * C15895 +
                      (C21569 * C438 + C47484 * C451) * C15891 +
                      (C21569 * C2014 + C47484 * C2015) * C15896 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C26527 + C26526 + C26531 + C26530) * C47857 +
                     (C21955 * C47855 + C21954 * C15896 +
                      (C21569 * C130 + C47484 * C141) * C15891 +
                      (C21569 * C120 + C47484 * C131) * C15895) *
                         C10311) *
                        C47806) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C15895 +
                       (C21569 * C127 + C47484 * C138) * C15891 +
                       C21720 * C15896 + C21721 * C47855) *
                          C10311 +
                      (C26242 + C26243 + C26194 + C26195) * C47857) *
                         C47806 -
                     ((C26196 + C26197 + C26244 + C26245) * C47857 +
                      (C26195 + C26194 + C26243 + C26242) * C10311) *
                         C47644) *
                        C942 +
                    (((C26726 + C26727 + C26728 + C26729) * C10311 +
                      (C27112 + C27113 + C27114 + C27115) * C47857) *
                         C47644 -
                     ((C26729 + C26728 + C26727 + C26726) * C47857 +
                      (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                       C21720 * C15895) *
                          C10311) *
                         C47806) *
                        C943 +
                    (((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                       C21724 * C47855) *
                          C10311 +
                      (C27116 + C27117 + C27118 + C27119) * C47857) *
                         C47806 -
                     ((C27120 + C27121 + C27122 + C27123) * C47857 +
                      (C27119 + C27118 + C27117 + C27116) * C10311) *
                         C47644) *
                        C47837) *
                       C47791 +
                   ((((C26246 + C26247 + C26206 + C26207) * C10311 +
                      (C26248 + C26249 + C26212 + C26213) * C47857) *
                         C47644 -
                     ((C26207 + C26206 + C26247 + C26246) * C47857 +
                      (C21727 * C47855 + C21726 * C15896 +
                       (C21569 * C128 + C47484 * C139) * C15891 +
                       (C21569 * C118 + C47484 * C125) * C15895) *
                          C10311) *
                         C47806) *
                        C942 +
                    (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                       C21729 * C47855) *
                          C10311 +
                      (C26730 + C26731 + C26732 + C26733) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C15896 + C23370 * C15891 +
                       C23371 * C15895) *
                          C47857 +
                      (C26733 + C26732 + C26731 + C26730) * C10311) *
                         C47644) *
                        C943 +
                    (((C27448 + C27449 + C27450 + C27451) * C10311 +
                      (C23369 * C15895 + C23368 * C15891 +
                       (C21569 * C5856 + C47484 * C5858) * C15896 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C27451 + C27450 + C27449 + C27448) * C47857 +
                      (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                       C21728 * C15895) *
                          C10311) *
                         C47806) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    ((C21569 * C416 + C47484 * C429) * C15895 +
                     (C21569 * C426 + C47484 * C446) * C15891 +
                     C22229 * C15896 + C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C15896 +
                     (C21569 * C425 + C47484 * C445) * C15891 +
                     (C21569 * C415 + C47484 * C428) * C15895) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C15896 +
                     (C21569 * C128 + C47484 * C139) * C15891 +
                     (C21569 * C118 + C47484 * C125) * C15895) *
                        C10311) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C15895 +
                     (C21569 * C129 + C47484 * C140) * C15891 +
                     C21732 * C15896 + C21733 * C47855) *
                        C10311 +
                    ((C21569 * C414 + C47484 * C427) * C15895 +
                     (C21569 * C424 + C47484 * C444) * C15891 +
                     C22237 * C15896 + C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C823 + C47484 * C830) * C47855 +
                     (C21569 * C815 + C47484 * C824) * C15896 +
                     (C21569 * C437 + C47484 * C450) * C15891 +
                     (C21569 * C420 + C47484 * C436) * C15895) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C15896 +
                     (C21569 * C130 + C47484 * C141) * C15891 +
                     (C21569 * C120 + C47484 * C131) * C15895) *
                        C10311) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C15895 +
                     (C21569 * C133 + C47484 * C142) * C15891 +
                     (C21569 * C269 + C47484 * C288) * C15896 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C10311 +
                    ((C21569 * C422 + C47484 * C441) * C15895 +
                     (C21569 * C440 + C47484 * C452) * C15891 +
                     (C21569 * C816 + C47484 * C825) * C15896 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     ((C21569 * C416 + C47484 * C429) * C15895 +
                      (C21569 * C426 + C47484 * C446) * C15891 +
                      C22229 * C15896 + C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C15896 + C22228 * C15891 +
                      C22229 * C15895) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C22230 * C15895 + C22231 * C15891 + C22232 * C15896 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C15896 +
                      (C21569 * C425 + C47484 * C445) * C15891 +
                      (C21569 * C415 + C47484 * C428) * C15895) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     ((C21569 * C414 + C47484 * C427) * C15895 +
                      (C21569 * C424 + C47484 * C444) * C15891 +
                      C22237 * C15896 + C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C15896 + C22236 * C15891 +
                      C22237 * C15895) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C47864 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C15895 +
                      (C21569 * C127 + C47484 * C138) * C15891 +
                      C21720 * C15896 + C21721 * C47855) *
                         C10311 +
                     (C26242 + C26243 + C26194 + C26195) * C47857) *
                        C47557 * C942 -
                    ((C26729 + C26728 + C26727 + C26726) * C47857 +
                     (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                      C21720 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                      C21724 * C47855) *
                         C10311 +
                     (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C15895 + C21727 * C15891 + C21728 * C15896 +
                      C21729 * C47855) *
                         C10311 +
                     (C26730 + C26731 + C26732 + C26733) * C47857) *
                        C47557 * C943 -
                    ((C26207 + C26206 + C26247 + C26246) * C47857 +
                     (C21727 * C47855 + C21726 * C15896 +
                      (C21569 * C128 + C47484 * C139) * C15891 +
                      (C21569 * C118 + C47484 * C125) * C15895) *
                         C10311) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C15896 + C22233 * C15891 +
                      C22232 * C15895) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C15896 + C21729 * C15891 +
                      C21728 * C15895) *
                         C10311) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C15895 +
                      (C21569 * C129 + C47484 * C140) * C15891 +
                      C21732 * C15896 + C21733 * C47855) *
                         C10311 +
                     (C26250 + C26251 + C26218 + C26219) * C47857) *
                        C47557 * C942 -
                    ((C26737 + C26736 + C26735 + C26734) * C47857 +
                     (C21735 * C47855 + C21734 * C15896 + C21733 * C15891 +
                      C21732 * C15895) *
                         C10311) *
                        C47557 * C943 +
                    ((C21734 * C15895 + C21735 * C15891 + C21737 * C15896 +
                      C21736 * C47855) *
                         C10311 +
                     (C22235 * C15895 + C22234 * C15891 +
                      (C21569 * C1544 + C47484 * C1547) * C15896 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C15895 +
                     (C21569 * C127 + C47484 * C138) * C15891 +
                     C21720 * C15896 + C21721 * C47855) *
                        C10311 +
                    (C26242 + C26243 + C26194 + C26195) * C47857) *
                       C47557 * C1010 -
                   ((C26729 + C26728 + C26727 + C26726) * C47857 +
                    (C21723 * C47855 + C21722 * C15896 + C21721 * C15891 +
                     C21720 * C15895) *
                        C10311) *
                       C47557 * C1011 +
                   ((C21722 * C15895 + C21723 * C15891 + C21725 * C15896 +
                     C21724 * C47855) *
                        C10311 +
                    (C22227 * C15895 + C22226 * C15891 + C22560 * C15896 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C15896 + C22561 * C15891 +
                     C22560 * C15895) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C15896 + C21724 * C15891 +
                     C21725 * C15895) *
                        C10311) *
                       C47557 * C1013 +
                   ((C22422 * C15895 + C22423 * C15891 + C22425 * C15896 +
                     C22424 * C47855) *
                        C10311 +
                    (C22927 * C15895 + C22926 * C15891 +
                     (C21569 * C22917 + C47484 * C22918) * C15896 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C47598 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47605 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C2700) *
              C47516 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47605 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47598 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C2700) *
              C47525 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C47598 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47605 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47598 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C47605 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C47806 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C2700) *
              C2440 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C47598 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47605 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C47806) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C47883 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47879 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47869 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47557 * C47847) *
              C2440 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47879 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47883 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47869 +
           (((C17339 + C17338) * C116 + (C17337 + C17336) * C47745) * C31513 +
            ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C116 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C2332 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47602) *
              C47882 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47602 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C2332) *
              C47875 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C2332 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47602) *
              C47862 +
          ((((C16400 + C16401) * C116 + (C16402 + C16403) * C47745) * C31513 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47877 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47866 +
            (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
             ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
                C47840) *
               C2332 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47866 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47877 -
            (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
             ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
                C47840) *
               C47602) *
              C2440 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47866 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47877 -
            (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
             ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
                C47840) *
               C2332 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47877 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47866 +
            (((C18267 + C18266) * C116 + (C18265 + C18264) * C47745) * C31513 +
             ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
               C47824 * C2227) *
                  C116 +
              (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
               C47824 * C2233) *
                  C47745) *
                 C47857) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C47602) *
              C47516 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C2332 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C47525 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C47806 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C47806) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C2332 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47602) *
              C47882 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47602 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C2332) *
              C47875 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C2332 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47602) *
              C47862 +
          ((((C16400 + C16401) * C116 + (C16402 + C16403) * C47745) * C31513 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C47883 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47879 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47869 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47557 * C47847) *
              C2440 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47879 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47883 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47869 +
           (((C17339 + C17338) * C116 + (C17337 + C17336) * C47745) * C31513 +
            ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C116 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47598 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47605 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C3094 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C2700) *
              C47791 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C47598 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47605 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C3094) *
               C2700) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47640 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47647 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C3602) *
              C47598 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47647 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47640 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C3602) *
              C47605 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47640 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47647 +
           (((C17197 + C17196) * C116 + (C17195 + C17194) * C47745) * C31513 +
            ((C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
              C47824 * C7248) *
                 C116 +
             (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
              C47824 * C7252) *
                 C47745) *
                C47857) *
               C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C3094 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47883 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47644 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C3094) *
              C47879 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C3094 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47644) *
              C47869 +
          ((((C17687 + C17686) * C116 + (C17685 + C17684) * C47745) * C31513 +
            ((C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
              C47824 * C5858) *
                 C116 +
             (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
              C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47602) *
              C47873 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C2332 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C47860 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C3094 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47884 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47881 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C47872 -
           (((C33568 + C33569) * C47745 + (C33570 + C33571) * C116) * C47857 +
            ((C33567 + C33566) * C47745 + (C33565 + C33564) * C116) * C31513) *
               C47853) *
              C2332 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47881 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47884 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C47872 +
           (((C18539 + C18538) * C116 + (C18537 + C18536) * C47745) * C31513 +
            ((C15893 * C6771 + C15889 * C6773 + C15894 * C6772 +
              C47824 * C6774) *
                 C116 +
             (C15893 * C6775 + C15889 * C6777 + C15894 * C6776 +
              C47824 * C6778) *
                 C47745) *
                C47857) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47640 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47647 +
            (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
             ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
                C3602) *
               C2332 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47647 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47640 -
            (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
             ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
                C3602) *
               C47602) *
              C47791 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47647 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47640 -
            (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
             ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
                C3602) *
               C2332 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47640 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47647 +
            (((C18267 + C18266) * C116 + (C18265 + C18264) * C47745) * C31513 +
             ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
               C47824 * C2227) *
                  C116 +
              (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
               C47824 * C2233) *
                  C47745) *
                 C47857) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47602) *
              C47873 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C2332 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C47860 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C3094 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C2332 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C3094 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47883 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47644 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C3094) *
              C47879 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C3094 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47644) *
              C47869 +
          ((((C17687 + C17686) * C116 + (C17685 + C17684) * C47745) * C31513 +
            ((C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
              C47824 * C5858) *
                 C116 +
             (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
              C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C1284 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C1285 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C1286 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47557 * C47847) *
              C47791 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C1285 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C1284 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C1286 +
           (((C17339 + C17338) * C116 + (C17337 + C17336) * C47745) * C31513 +
            ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C116 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C47805 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47602) *
              C554 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47602 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47805) *
              C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C47805 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47602) *
              C556 +
          ((((C16400 + C16401) * C116 + (C16402 + C16403) * C47745) * C31513 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C15894 * C440 + C47824 * C452 + C15893 * C437 + C15889 * C450) *
                 C47745 +
             (C15894 * C422 + C47824 * C441 + C15893 * C420 + C15889 * C436) *
                 C116) *
                C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C1664 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C1665 +
            (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
             ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
                C47840) *
               C47805 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C1665 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C1664 -
            (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
             ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
                C47840) *
               C47602) *
              C47791 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C1665 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C1664 -
            (((C15894 * C1850 + C47824 * C1862 + C15893 * C1851 +
               C15889 * C1863) *
                  C47745 +
              (C15894 * C1844 + C47824 * C1853 + C15893 * C1845 +
               C15889 * C1854) *
                  C116) *
                 C47857 +
             ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
                C47840) *
               C47805 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C1664 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C1665 +
            (((C18267 + C18266) * C116 + (C18265 + C18264) * C47745) * C31513 +
             ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
               C47824 * C2227) *
                  C116 +
              (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
               C47824 * C2233) *
                  C47745) *
                 C47857) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47806 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C1284 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47644 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47806) *
              C1285 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47806 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47644) *
              C1286 +
          ((((C17687 + C17686) * C116 + (C17685 + C17684) * C47745) * C31513 +
            ((C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
              C47824 * C5858) *
                 C116 +
             (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
              C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C47602) *
              C258 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C47805 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C259 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C47806 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C2116 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C2117 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C2118 -
           (((C33568 + C33569) * C47745 + (C33570 + C33571) * C116) * C47857 +
            ((C33567 + C33566) * C47745 + (C33565 + C33564) * C116) * C31513) *
               C47853) *
              C47805 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C2117 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C2116 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C2118 +
           (((C18539 + C18538) * C116 + (C18537 + C18536) * C47745) * C31513 +
            ((C15893 * C6771 + C15889 * C6773 + C15894 * C6772 +
              C47824 * C6774) *
                 C116 +
             (C15893 * C6775 + C15889 * C6777 + C15894 * C6776 +
              C47824 * C6778) *
                 C47745) *
                C47857) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                 C47824 * C125) *
                    C116 +
                (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                 C47824 * C139) *
                    C47745) *
                   C31513 +
               ((C15893 * C416 + C15889 * C429 + C15894 * C415 +
                 C47824 * C428) *
                    C116 +
                (C15893 * C426 + C15889 * C446 + C15894 * C425 +
                 C47824 * C445) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C108 -
              (((C15894 * C424 + C47824 * C444 + C15893 * C425 +
                 C15889 * C445) *
                    C47745 +
                (C15894 * C414 + C47824 * C427 + C15893 * C415 +
                 C15889 * C428) *
                    C116) *
                   C47857 +
               ((C15894 * C129 + C47824 * C140 + C15893 * C128 +
                 C15889 * C139) *
                    C47745 +
                (C15894 * C119 + C47824 * C126 + C15893 * C118 +
                 C15889 * C125) *
                    C116) *
                   C31513) *
                  C47557 * C47539 * C109 +
              (((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                 C47824 * C131) *
                    C116 +
                (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                 C47824 * C141) *
                    C47745) *
                   C31513 +
               ((C15893 * C414 + C15889 * C427 + C15894 * C420 +
                 C47824 * C436) *
                    C116 +
                (C15893 * C424 + C15889 * C444 + C15894 * C437 +
                 C47824 * C450) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C110 -
              (((C15894 * C440 + C47824 * C452 + C15893 * C437 +
                 C15889 * C450) *
                    C47745 +
                (C15894 * C422 + C47824 * C441 + C15893 * C420 +
                 C15889 * C436) *
                    C116) *
                   C47857 +
               ((C15894 * C133 + C47824 * C142 + C15893 * C130 +
                 C15889 * C141) *
                    C47745 +
                (C15894 * C121 + C47824 * C132 + C15893 * C120 +
                 C15889 * C131) *
                    C116) *
                   C31513) *
                  C47557 * C47539 * C111 +
              (((C15893 * C121 + C15889 * C132 + C15894 * C122 +
                 C47824 * C135) *
                    C116 +
                (C15893 * C133 + C15889 * C142 + C15894 * C134 +
                 C47824 * C143) *
                    C47745) *
                   C31513 +
               ((C15893 * C422 + C15889 * C441 + C15894 * C662 +
                 C47824 * C663) *
                    C116 +
                (C15893 * C440 + C15889 * C452 + C15894 * C664 +
                 C47824 * C665) *
                    C47745) *
                   C47857) *
                  C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                  C47824 * C125) *
                     C116 +
                 (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                  C47824 * C139) *
                     C47745) *
                    C31513 +
                ((C15893 * C416 + C15889 * C429 + C15894 * C415 +
                  C47824 * C428) *
                     C116 +
                 (C15893 * C426 + C15889 * C446 + C15894 * C425 +
                  C47824 * C445) *
                     C47745) *
                    C47857) *
                   C47557 * C47876 -
               (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) *
                    C47857 +
                ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) *
                    C31513) *
                   C47557 * C47864 +
               (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) *
                    C31513 +
                ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) *
                    C47857) *
                   C47557 * C47837) *
                  C258 +
              ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) *
                    C31513 +
                ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) *
                    C47857) *
                   C47557 * C47864 -
               (((C15894 * C424 + C47824 * C444 + C15893 * C425 +
                  C15889 * C445) *
                     C47745 +
                 (C15894 * C414 + C47824 * C427 + C15893 * C415 +
                  C15889 * C428) *
                     C116) *
                    C47857 +
                ((C15894 * C129 + C47824 * C140 + C15893 * C128 +
                  C15889 * C139) *
                     C47745 +
                 (C15894 * C119 + C47824 * C126 + C15893 * C118 +
                  C15889 * C125) *
                     C116) *
                    C31513) *
                   C47557 * C47876 -
               (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) *
                    C47857 +
                ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) *
                    C31513) *
                   C47557 * C47837) *
                  C259 +
              ((((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                  C47824 * C131) *
                     C116 +
                 (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                  C47824 * C141) *
                     C47745) *
                    C31513 +
                ((C15893 * C414 + C15889 * C427 + C15894 * C420 +
                  C47824 * C436) *
                     C116 +
                 (C15893 * C424 + C15889 * C444 + C15894 * C437 +
                  C47824 * C450) *
                     C47745) *
                    C47857) *
                   C47557 * C47876 -
               (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) *
                    C47857 +
                ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) *
                    C31513) *
                   C47557 * C47864 +
               (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) *
                    C31513 +
                ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
                  C47824 * C1441) *
                     C116 +
                 (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
                  C47824 * C1443) *
                     C47745) *
                    C47857) *
                   C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47877 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47866 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C258 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47866 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47877 -
           (((C15894 * C1850 + C47824 * C1862 + C15893 * C1851 +
              C15889 * C1863) *
                 C47745 +
             (C15894 * C1844 + C47824 * C1853 + C15893 * C1845 +
              C15889 * C1854) *
                 C116) *
                C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C47840) *
              C47539 * C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47877 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47866 +
           (((C31879 + C31878) * C116 + (C31877 + C31876) * C47745) * C31513 +
            ((C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
              C47824 * C2121) *
                 C116 +
             (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
              C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C942 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C943 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C943 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C942 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C942 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C943 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
              C47557 * C1010 -
          (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
           ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
              C47557 * C1011 +
          (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
           ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
              C47557 * C1012 -
          (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
           ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
              C47557 * C1013 +
          (((C17015 + C17014) * C116 + (C17013 + C17012) * C47745) * C31513 +
           ((C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C116 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47877 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47866 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C942 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47866 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47877 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C47840) *
              C943 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47877 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47866 +
           (((C17197 + C17196) * C116 + (C17195 + C17194) * C47745) * C31513 +
            ((C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
              C47824 * C7248) *
                 C116 +
             (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
              C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C1664 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C1665 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47873 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C1665 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C1664 -
           (((C15894 * C1850 + C47824 * C1862 + C15893 * C1851 +
              C15889 * C1863) *
                 C47745 +
             (C15894 * C1844 + C47824 * C1853 + C15893 * C1845 +
              C15889 * C1854) *
                 C116) *
                C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C47840) *
              C47539 * C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C1664 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C1665 +
           (((C31879 + C31878) * C116 + (C31877 + C31876) * C47745) * C31513 +
            ((C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
              C47824 * C2121) *
                 C116 +
             (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
              C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C1664 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C1665 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47876 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C1665 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C1664 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C47840) *
              C47864 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C1664 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C1665 +
           (((C17197 + C17196) * C116 + (C17195 + C17194) * C47745) * C31513 +
            ((C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
              C47824 * C7248) *
                 C116 +
             (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
              C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
              C1839 -
          (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
           ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
              C1840 +
          (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
           ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
              C1841 -
          (((C33568 + C33569) * C47745 + (C33570 + C33571) * C116) * C47857 +
           ((C33567 + C33566) * C47745 + (C33565 + C33564) * C116) * C31513) *
              C1842 +
          (((C33571 + C33570) * C116 + (C33569 + C33568) * C47745) * C31513 +
           ((C15893 * C12345 + C15889 * C12347 + C15894 * C12346 +
             C47824 * C12348) *
                C116 +
            (C15893 * C12349 + C15889 * C12351 + C15894 * C12350 +
             C47824 * C12352) *
                C47745) *
               C47857) *
              C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C942 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C943 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C47806 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C47837) *
              C47791 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C942 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C943 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47806 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47539 * C554 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47644 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47806) *
              C47539 * C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47806 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47644) *
              C47539 * C556 +
          ((((C32148 + C32149) * C116 + (C32150 + C32151) * C47745) * C31513 +
            ((C15893 * C421 + C15889 * C439 + C15894 * C423 + C47824 * C442) *
                 C116 +
             (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C2116 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C2117 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C2118 -
           (((C33568 + C33569) * C47745 + (C33570 + C33571) * C116) * C47857 +
            ((C33567 + C33566) * C47745 + (C33565 + C33564) * C116) * C31513) *
               C47853) *
              C47539 * C47791 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C2117 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C2116 -
           (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C2118 +
           (((C33907 + C33906) * C116 + (C33905 + C33904) * C47745) * C31513 +
            ((C15893 * C1848 + C15889 * C1857 + C15894 * C1849 +
              C47824 * C1858) *
                 C116 +
             (C15893 * C1860 + C15889 * C1866 + C15894 * C1861 +
              C47824 * C1867) *
                 C47745) *
                C47857) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                 C116 +
             (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47864 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47864 -
           (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                 C47745 +
             (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                 C116) *
                C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47876 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                 C116 +
             (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47864 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                C116 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                C47745 +
            (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                C116) *
               C47857 +
           ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C47745 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C31513) *
              C47557 * C47539 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C47745) *
               C31513 +
           ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                C116 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C15894 * C440 + C47824 * C452 + C15893 * C437 + C15889 * C450) *
                C47745 +
            (C15894 * C422 + C47824 * C441 + C15893 * C420 + C15889 * C436) *
                C116) *
               C47857 +
           ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C47745 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C31513) *
              C47557 * C47539 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
                C47745) *
               C31513 +
           ((C15893 * C422 + C15889 * C441 + C15894 * C662 + C47824 * C663) *
                C116 +
            (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C942 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C943 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C943 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C942 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C942 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C943 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
              C47557 * C1010 -
          (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
           ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
              C47557 * C1011 +
          (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
           ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
              C47557 * C1012 -
          (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
           ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
              C47557 * C1013 +
          (((C17015 + C17014) * C116 + (C17013 + C17012) * C47745) * C31513 +
           ((C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C116 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C1664 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C1665 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47873 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C1665 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C1664 -
           (((C15894 * C1850 + C47824 * C1862 + C15893 * C1851 +
              C15889 * C1863) *
                 C47745 +
             (C15894 * C1844 + C47824 * C1853 + C15893 * C1845 +
              C15889 * C1854) *
                 C116) *
                C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C47840) *
              C47539 * C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C1664 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C1665 +
           (((C31879 + C31878) * C116 + (C31877 + C31876) * C47745) * C31513 +
            ((C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
              C47824 * C2121) *
                 C116 +
             (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
              C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C1664 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C1665 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47876 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C1665 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C1664 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C47840) *
              C47864 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C1664 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C1665 +
           (((C17197 + C17196) * C116 + (C17195 + C17194) * C47745) * C31513 +
            ((C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
              C47824 * C7248) *
                 C116 +
             (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
              C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47602) *
              C47516 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C47805 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C47525 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C3094 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C3094) *
               C47602) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47640 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47647 +
            (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
             ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
                C3602) *
               C47805 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47647 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47640 -
            (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
             ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
                C3602) *
               C47602) *
              C2440 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47647 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47640 -
            (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
             ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
                C3602) *
               C47805 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47640 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47647 +
            (((C18267 + C18266) * C116 + (C18265 + C18264) * C47745) * C31513 +
             ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
               C47824 * C2227) *
                  C116 +
              (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
               C47824 * C2233) *
                  C47745) *
                 C47857) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47876 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47864 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C3094 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C47837) *
              C2440 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C47876 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47864 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C3094 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47539 * C47882 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47644 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C3094) *
              C47539 * C47875 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C3094 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47644) *
              C47539 * C47862 +
          ((((C32148 + C32149) * C116 + (C32150 + C32151) * C47745) * C31513 +
            ((C15893 * C421 + C15889 * C439 + C15894 * C423 + C47824 * C442) *
                 C116 +
             (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47884 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47881 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C47872 -
           (((C33568 + C33569) * C47745 + (C33570 + C33571) * C116) * C47857 +
            ((C33567 + C33566) * C47745 + (C33565 + C33564) * C116) * C31513) *
               C47853) *
              C47539 * C2440 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47881 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47884 -
           (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C47872 +
           (((C33907 + C33906) * C116 + (C33905 + C33904) * C47745) * C31513 +
            ((C15893 * C1848 + C15889 * C1857 + C15894 * C1849 +
              C47824 * C1858) *
                 C116 +
             (C15893 * C1860 + C15889 * C1866 + C15894 * C1861 +
              C47824 * C1867) *
                 C47745) *
                C47857) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47640 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47647 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C33564 + C33565) * C116 + (C33566 + C33567) * C47745) * C47857) *
               C3602) *
              C47539 * C47516 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47647 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47640 -
           (((C33904 + C33905) * C47745 + (C33906 + C33907) * C116) * C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C3602) *
              C47539 * C47525 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47640 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47647 +
           (((C31879 + C31878) * C116 + (C31877 + C31876) * C47745) * C31513 +
            ((C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
              C47824 * C2121) *
                 C116 +
             (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
              C47824 * C2123) *
                 C47745) *
                C47857) *
               C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C3094 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47539 * C47882 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47644 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C3094) *
              C47539 * C47875 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C3094 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47644) *
              C47539 * C47862 +
          ((((C32148 + C32149) * C116 + (C32150 + C32151) * C47745) * C31513 +
            ((C15893 * C421 + C15889 * C439 + C15894 * C423 + C47824 * C442) *
                 C116 +
             (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C3094 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47876 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C3094) *
               C47864 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C3094 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C47837) *
              C2440 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C3094) *
               C47876 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C3094 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47864 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C47805 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47602) *
              C554 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47602 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47805) *
              C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C47805 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47602) *
              C556 +
          ((((C16400 + C16401) * C116 + (C16402 + C16403) * C47745) * C31513 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47824 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47824 * C831) *
                 C47745) *
                C47857) *
               C47557 * C47602 -
           (((C15894 * C440 + C47824 * C452 + C15893 * C437 + C15889 * C450) *
                 C47745 +
             (C15894 * C422 + C47824 * C441 + C15893 * C420 + C15889 * C436) *
                 C116) *
                C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C1284 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C1285 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C1286 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47557 * C47847) *
              C47791 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C1285 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C1284 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C1286 +
           (((C17339 + C17338) * C116 + (C17337 + C17336) * C47745) * C31513 +
            ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
              C47824 * C1547) *
                 C116 +
             (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
              C47824 * C1553) *
                 C47745) *
                C47857) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C47602) *
              C258 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C47805 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C47602) *
              C259 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                  C47745) *
                 C31513 +
             ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
                C47806 -
            (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
             ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
                C47644) *
               C47805 +
           ((((C16763 + C16762) * C116 + (C16761 + C16760) * C47745) * C31513 +
             ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
               C47824 * C2015) *
                  C116 +
              (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
               C47824 * C2017) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
             ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
                C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47806 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C1284 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47644 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47806) *
              C1285 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47806 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47644) *
              C1286 +
          ((((C17687 + C17686) * C116 + (C17685 + C17684) * C47745) * C31513 +
            ((C15893 * C5855 + C15889 * C5857 + C15894 * C5856 +
              C47824 * C5858) *
                 C116 +
             (C15893 * C5859 + C15889 * C5861 + C15894 * C5860 +
              C47824 * C5862) *
                 C47745) *
                C47857) *
               C47644 -
           (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
            ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
               C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                 C116 +
             (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47864 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47864 -
           (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                 C47745 +
             (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                 C116) *
                C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47876 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                 C116 +
             (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47864 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                C116 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                C47745 +
            (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                C116) *
               C47857 +
           ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C47745 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C31513) *
              C47557 * C47539 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C47745) *
               C31513 +
           ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                C116 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C15894 * C440 + C47824 * C452 + C15893 * C437 + C15889 * C450) *
                C47745 +
            (C15894 * C422 + C47824 * C441 + C15893 * C420 + C15889 * C436) *
                C116) *
               C47857 +
           ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C47745 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C31513) *
              C47557 * C47539 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
                C47745) *
               C31513 +
           ((C15893 * C422 + C15889 * C441 + C15894 * C662 + C47824 * C663) *
                C116 +
            (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47877 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47866 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C258 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47866 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47877 -
           (((C15894 * C1850 + C47824 * C1862 + C15893 * C1851 +
              C15889 * C1863) *
                 C47745 +
             (C15894 * C1844 + C47824 * C1853 + C15893 * C1845 +
              C15889 * C1854) *
                 C116) *
                C47857 +
            ((C31871 + C31870) * C47745 + (C31869 + C31868) * C116) * C31513) *
               C47840) *
              C47539 * C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47877 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47866 +
           (((C31879 + C31878) * C116 + (C31877 + C31876) * C47745) * C31513 +
            ((C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
              C47824 * C2121) *
                 C116 +
             (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
              C47824 * C2123) *
                 C47745) *
                C47857) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C942 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C943 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C943 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C942 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C942 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C943 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
              C47557 * C1010 -
          (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
           ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
              C47557 * C1011 +
          (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
           ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
              C47557 * C1012 -
          (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
           ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
              C47557 * C1013 +
          (((C17015 + C17014) * C116 + (C17013 + C17012) * C47745) * C31513 +
           ((C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C116 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47877 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47866 +
           (((C31863 + C31862) * C116 + (C31861 + C31860) * C47745) * C31513 +
            ((C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
              C47824 * C1854) *
                 C116 +
             (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
              C47824 * C1863) *
                 C47745) *
                C47857) *
               C47840) *
              C942 +
          ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
            ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
               C47866 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47877 -
           (((C18536 + C18537) * C47745 + (C18538 + C18539) * C116) * C47857 +
            ((C17189 + C17188) * C47745 + (C17187 + C17186) * C116) * C31513) *
               C47840) *
              C943 +
          ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47877 -
           (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
            ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
               C47866 +
           (((C17197 + C17196) * C116 + (C17195 + C17194) * C47745) * C31513 +
            ((C15893 * C7245 + C15889 * C7247 + C15894 * C7246 +
              C47824 * C7248) *
                 C116 +
             (C15893 * C7249 + C15889 * C7251 + C15894 * C7250 +
              C47824 * C7252) *
                 C47745) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47806 -
           (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
            ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
               C47644) *
              C47539 * C554 +
          ((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
            ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
               C47644 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47806) *
              C47539 * C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47806 -
           (((C31876 + C31877) * C47745 + (C31878 + C31879) * C116) * C47857 +
            ((C31875 + C31874) * C47745 + (C31873 + C31872) * C116) * C31513) *
               C47644) *
              C47539 * C556 +
          ((((C32148 + C32149) * C116 + (C32150 + C32151) * C47745) * C31513 +
            ((C15893 * C421 + C15889 * C439 + C15894 * C423 + C47824 * C442) *
                 C116 +
             (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47824 * C453) *
                 C47745) *
                C47857) *
               C47644 -
           (((C32151 + C32150) * C47745 + (C32149 + C32148) * C116) * C47857 +
            ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                 C47745 +
             (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C31513) *
               C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                  C47745) *
                 C31513 +
             ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
                C47806 -
            (((C31860 + C31861) * C47745 + (C31862 + C31863) * C116) * C47857 +
             ((C31859 + C31858) * C47745 + (C31857 + C31856) * C116) * C31513) *
                C47644) *
               C942 +
           ((((C16755 + C16754) * C116 + (C16753 + C16752) * C47745) * C31513 +
             ((C17186 + C17187) * C116 + (C17188 + C17189) * C47745) * C47857) *
                C47644 -
            (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
             ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
                C47806) *
               C943 +
           ((((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
             ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
                C47806 -
            (((C17194 + C17195) * C47745 + (C17196 + C17197) * C116) * C47857 +
             ((C17193 + C17192) * C47745 + (C17191 + C17190) * C116) * C31513) *
                C47644) *
               C47837) *
              C47791 +
          (((((C31864 + C31865) * C116 + (C31866 + C31867) * C47745) * C31513 +
             ((C31868 + C31869) * C116 + (C31870 + C31871) * C47745) * C47857) *
                C47644 -
            (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
             ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                  C47745 +
              (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C31513) *
                C47806) *
               C942 +
           ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
             ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
                C47806 -
            (((C18264 + C18265) * C47745 + (C18266 + C18267) * C116) * C47857 +
             ((C16759 + C16758) * C47745 + (C16757 + C16756) * C116) * C31513) *
                C47644) *
               C943 +
           ((((C17545 + C17544) * C116 + (C17543 + C17542) * C47745) * C31513 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47824 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47824 * C1185) *
                  C47745) *
                 C47857) *
                C47644 -
            (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
             ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
                C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                C116 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                C47745) *
               C47857) *
              C47557 * C47539 * C108 -
          (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                C47745 +
            (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                C116) *
               C47857 +
           ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                C47745 +
            (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C31513) *
              C47557 * C47539 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                C47745) *
               C31513 +
           ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                C116 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                C47745) *
               C47857) *
              C47557 * C47539 * C110 -
          (((C15894 * C440 + C47824 * C452 + C15893 * C437 + C15889 * C450) *
                C47745 +
            (C15894 * C422 + C47824 * C441 + C15893 * C420 + C15889 * C436) *
                C116) *
               C47857 +
           ((C15894 * C133 + C47824 * C142 + C15893 * C130 + C15889 * C141) *
                C47745 +
            (C15894 * C121 + C47824 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C31513) *
              C47557 * C47539 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47824 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47824 * C143) *
                C47745) *
               C31513 +
           ((C15893 * C422 + C15889 * C441 + C15894 * C662 + C47824 * C663) *
                C116 +
            (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47824 * C665) *
                C47745) *
               C47857) *
              C47557 * C47539 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C15893 * C416 + C15889 * C429 + C15894 * C415 + C47824 * C428) *
                 C116 +
             (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47824 * C445) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C47864 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C258 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C47864 -
           (((C15894 * C424 + C47824 * C444 + C15893 * C425 + C15889 * C445) *
                 C47745 +
             (C15894 * C414 + C47824 * C427 + C15893 * C415 + C15889 * C428) *
                 C116) *
                C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C47876 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C15893 * C414 + C15889 * C427 + C15894 * C420 + C47824 * C436) *
                 C116 +
             (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47824 * C450) *
                 C47745) *
                C47857) *
               C47557 * C47876 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C47864 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                 C47745) *
                C31513 +
            ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
               C47557 * C942 -
           (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
            ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
               C47557 * C943 +
           (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
            ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
               C47557 * C47837) *
              C47873 +
          ((((C16100 + C16101) * C116 + (C16102 + C16103) * C47745) * C31513 +
            ((C16756 + C16757) * C116 + (C16758 + C16759) * C47745) * C47857) *
               C47557 * C943 -
           (((C31867 + C31866) * C47745 + (C31865 + C31864) * C116) * C47857 +
            ((C15894 * C129 + C47824 * C140 + C15893 * C128 + C15889 * C139) *
                 C47745 +
             (C15894 * C119 + C47824 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C31513) *
               C47557 * C942 -
           (((C17542 + C17543) * C47745 + (C17544 + C17545) * C116) * C47857 +
            ((C16107 + C16106) * C47745 + (C16105 + C16104) * C116) * C31513) *
               C47557 * C47837) *
              C47860 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47824 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47824 * C141) *
                 C47745) *
                C31513 +
            ((C31872 + C31873) * C116 + (C31874 + C31875) * C47745) * C47857) *
               C47557 * C942 -
           (((C16760 + C16761) * C47745 + (C16762 + C16763) * C116) * C47857 +
            ((C16111 + C16110) * C47745 + (C16109 + C16108) * C116) * C31513) *
               C47557 * C943 +
           (((C16115 + C16114) * C116 + (C16113 + C16112) * C47745) * C31513 +
            ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
              C47824 * C1441) *
                 C116 +
             (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
              C47824 * C1443) *
                 C47745) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47824 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47824 * C139) *
                C47745) *
               C31513 +
           ((C31856 + C31857) * C116 + (C31858 + C31859) * C47745) * C47857) *
              C47557 * C1010 -
          (((C16752 + C16753) * C47745 + (C16754 + C16755) * C116) * C47857 +
           ((C16095 + C16094) * C47745 + (C16093 + C16092) * C116) * C31513) *
              C47557 * C1011 +
          (((C16099 + C16098) * C116 + (C16097 + C16096) * C47745) * C31513 +
           ((C17190 + C17191) * C116 + (C17192 + C17193) * C47745) * C47857) *
              C47557 * C1012 -
          (((C17684 + C17685) * C47745 + (C17686 + C17687) * C116) * C47857 +
           ((C17011 + C17010) * C47745 + (C17009 + C17008) * C116) * C31513) *
              C47557 * C1013 +
          (((C17015 + C17014) * C116 + (C17013 + C17012) * C47745) * C31513 +
           ((C15893 * C6377 + C15889 * C6379 + C15894 * C6378 +
             C47824 * C6380) *
                C116 +
            (C15893 * C6381 + C15889 * C6383 + C15894 * C6382 +
             C47824 * C6384) *
                C47745) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C47598 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47605 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47557 * C2700) *
                       C47516 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C47605 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47598 -
                    ((C38583 + C38582 + C38581 + C38580) * C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C2700) *
                       C47525 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C47598 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47605 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47598 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C47605 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C47806 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C2700) *
                       C2440 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C47598 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47605 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C47806) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C47883 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47879 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47557 * C47869 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47557 * C47847) *
                       C2440 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C47879 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47883 -
                    ((C38583 + C38582 + C38581 + C38580) * C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47869 +
                    ((C21730 * C4581 + C21731 * C4577 + C22667 * C4582 +
                      C22666 * C47855) *
                         C31513 +
                     (C22819 * C4581 + C22818 * C4577 +
                      (C21569 * C6378 + C47484 * C6380) * C4582 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C2332 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C47882 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C47602 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C2332) *
                       C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C2332 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C47862 +
                   (((C21954 * C4581 + C21955 * C4577 + C21956 * C4582 +
                      C21957 * C47855) *
                         C31513 +
                     (C26390 * C4581 + C26391 * C4577 +
                      (C21569 * C1440 + C47484 * C1441) * C4582 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47557 * C2332) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47877 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47866 +
                     ((C37383 + C37382 + C37381 + C37380) * C31513 +
                      (C39092 + C39093 + C39094 + C39095) * C47857) *
                         C47840) *
                        C2332 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47866 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47877 -
                     ((C39562 + C39563 + C39564 + C39565) * C47857 +
                      (C38247 + C38246 + C38245 + C38244) * C31513) *
                         C47840) *
                        C47602) *
                       C2440 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47866 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47877 -
                     ((C39428 + C39429 + C39430 + C39431) * C47857 +
                      (C37391 + C37390 + C37389 + C37388) * C31513) *
                         C47840) *
                        C2332 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47877 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47866 +
                     ((C39297 + C39296 + C39295 + C39294) * C31513 +
                      (C28193 * C4581 + C28192 * C4577 +
                       (C21569 * C7246 + C47484 * C7248) * C4582 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C47840) *
                        C47602) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C47516 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C2332 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C47806 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C2332 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C47882 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C47602 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C2332) *
                       C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C2332 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C47862 +
                   (((C21954 * C4581 + C21955 * C4577 + C21956 * C4582 +
                      C21957 * C47855) *
                         C31513 +
                     (C26390 * C4581 + C26391 * C4577 +
                      (C21569 * C1440 + C47484 * C1441) * C4582 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47557 * C2332) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C47883 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47879 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47557 * C47869 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47557 * C47847) *
                       C2440 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C47879 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47883 -
                    ((C38583 + C38582 + C38581 + C38580) * C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47869 +
                    ((C21730 * C4581 + C21731 * C4577 + C22667 * C4582 +
                      C22666 * C47855) *
                         C31513 +
                     (C22819 * C4581 + C22818 * C4577 +
                      (C21569 * C6378 + C47484 * C6380) * C4582 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47598 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47605 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C3094 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C2700) *
                       C47791 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C47598 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47605 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C3094) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47640 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47647 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C3602) *
                       C47598 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47647 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47640 -
                    ((C39562 + C39563 + C39564 + C39565) * C47857 +
                     (C38247 + C38246 + C38245 + C38244) * C31513) *
                        C3602) *
                       C47605 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47640 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47647 +
                    ((C38255 + C38254 + C38253 + C38252) * C31513 +
                     (C23581 * C4581 + C23580 * C4577 +
                      (C21569 * C23567 + C47484 * C23568) * C4582 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C3602) *
                       C2700) *
                  C47511) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C3094 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47883 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47644 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C3094) *
                       C47879 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C3094 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47644) *
                       C47869 +
                   (((C38714 + C38715 + C38716 + C38717) * C31513 +
                     (C22563 * C4581 + C22562 * C4577 +
                      (C21569 * C22535 + C47484 * C22536) * C4582 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C3094) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C47873 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C2332 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C47860 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C3094 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47884 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47881 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C47872 -
                    ((C39096 + C39097 + C39098 + C39099) * C47857 +
                     (C39095 + C39094 + C39093 + C39092) * C31513) *
                        C47853) *
                       C2332 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47881 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47884 -
                    ((C39562 + C39563 + C39564 + C39565) * C47857 +
                     (C38247 + C38246 + C38245 + C38244) * C31513) *
                        C47872 +
                    ((C39565 + C39564 + C39563 + C39562) * C31513 +
                     (C27981 * C4581 + C27980 * C4577 +
                      (C21569 * C23209 + C47484 * C23210) * C4582 +
                      (C21569 * C23211 + C47484 * C23212) * C47855) *
                         C47857) *
                        C47853) *
                       C47602) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47640 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47647 +
                     ((C37383 + C37382 + C37381 + C37380) * C31513 +
                      (C39092 + C39093 + C39094 + C39095) * C47857) *
                         C3602) *
                        C2332 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47647 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47640 -
                     ((C39562 + C39563 + C39564 + C39565) * C47857 +
                      (C38247 + C38246 + C38245 + C38244) * C31513) *
                         C3602) *
                        C47602) *
                       C47791 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47647 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47640 -
                     ((C39428 + C39429 + C39430 + C39431) * C47857 +
                      (C37391 + C37390 + C37389 + C37388) * C31513) *
                         C3602) *
                        C2332 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47640 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47647 +
                     ((C39297 + C39296 + C39295 + C39294) * C31513 +
                      (C28193 * C4581 + C28192 * C4577 +
                       (C21569 * C7246 + C47484 * C7248) * C4582 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C3602) *
                        C47602) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C47873 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C2332 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C47860 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C3094 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C2332 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C3094 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47883 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47644 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C3094) *
                       C47879 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C3094 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47644) *
                       C47869 +
                   (((C38714 + C38715 + C38716 + C38717) * C31513 +
                     (C22563 * C4581 + C22562 * C4577 +
                      (C21569 * C22535 + C47484 * C22536) * C4582 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C3094) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C1284 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C1285 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47557 * C1286 -
                    ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
                      C22560 * C4581) *
                         C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47557 * C47847) *
                       C47791 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C1285 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C1284 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C1286 +
                    ((C21730 * C4581 + C21731 * C4577 + C22667 * C4582 +
                      C22666 * C47855) *
                         C31513 +
                     (C22819 * C4581 + C22818 * C4577 +
                      (C21569 * C6378 + C47484 * C6380) * C4582 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C47805 -
                    ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                      C22229 * C4581) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C554 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47805) *
                       C555 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C47805 -
                    ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                      C22237 * C4581) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C556 +
                   (((C21954 * C4581 + C21955 * C4577 + C21956 * C4582 +
                      C21957 * C47855) *
                         C31513 +
                     (C26390 * C4581 + C26391 * C4577 +
                      (C21569 * C1440 + C47484 * C1441) * C4582 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                      C26528 * C4581) *
                         C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47557 * C47805) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C1664 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C1665 +
                     ((C37383 + C37382 + C37381 + C37380) * C31513 +
                      (C39092 + C39093 + C39094 + C39095) * C47857) *
                         C47840) *
                        C47805 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C1665 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C1664 -
                     ((C23580 * C47855 + C23581 * C4582 + C23582 * C4577 +
                       C23583 * C4581) *
                          C47857 +
                      (C38247 + C38246 + C38245 + C38244) * C31513) *
                         C47840) *
                        C47602) *
                       C47791 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C1665 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C1664 -
                     ((C28192 * C47855 + C28193 * C4582 + C28330 * C4577 +
                       C28331 * C4581) *
                          C47857 +
                      (C37391 + C37390 + C37389 + C37388) * C31513) *
                         C47840) *
                        C47805 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C1664 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C1665 +
                     ((C39297 + C39296 + C39295 + C39294) * C31513 +
                      (C28193 * C4581 + C28192 * C4577 +
                       (C21569 * C7246 + C47484 * C7248) * C4582 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C47840) *
                        C47602) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47806 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C1284 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47644 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47806) *
                       C1285 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47806 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47644) *
                       C1286 +
                   (((C38714 + C38715 + C38716 + C38717) * C31513 +
                     (C22563 * C4581 + C22562 * C4577 +
                      (C21569 * C22535 + C47484 * C22536) * C4582 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47806) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C22556 * C4581 + C22557 * C4577 + C22558 * C4582 +
                       C22559 * C47855) *
                          C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C258 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C47805 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C4582 + C23370 * C4577 +
                       C23371 * C4581) *
                          C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C259 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C47806 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C2116 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C2117 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C2118 -
                    ((C39096 + C39097 + C39098 + C39099) * C47857 +
                     (C39095 + C39094 + C39093 + C39092) * C31513) *
                        C47853) *
                       C47805 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C2117 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C2116 -
                    ((C39562 + C39563 + C39564 + C39565) * C47857 +
                     (C38247 + C38246 + C38245 + C38244) * C31513) *
                        C2118 +
                    ((C39565 + C39564 + C39563 + C39562) * C31513 +
                     (C27981 * C4581 + C27980 * C4577 +
                      (C21569 * C23209 + C47484 * C23210) * C4582 +
                      (C21569 * C23211 + C47484 * C23212) * C47855) *
                         C47857) *
                        C47853) *
                       C47602) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21569 * C117 + C47484 * C124) * C4581 +
                (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                C21721 * C47855) *
                   C31513 +
               (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                C22228 * C47855) *
                   C47857) *
                  C47557 * C47539 * C108 -
              ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                C26232 * C4581) *
                   C47857 +
               (C21727 * C47855 + C21726 * C4582 +
                (C21569 * C128 + C47484 * C139) * C4577 +
                (C21569 * C118 + C47484 * C125) * C4581) *
                   C31513) *
                  C47557 * C47539 * C109 +
              (((C21569 * C119 + C47484 * C126) * C4581 +
                (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                C21733 * C47855) *
                   C31513 +
               (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                C22236 * C47855) *
                   C47857) *
                  C47557 * C47539 * C110 -
              ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                C26528 * C4581) *
                   C47857 +
               (C21955 * C47855 + C21954 * C4582 +
                (C21569 * C130 + C47484 * C141) * C4577 +
                (C21569 * C120 + C47484 * C131) * C4581) *
                   C31513) *
                  C47557 * C47539 * C111 +
              (((C21569 * C121 + C47484 * C132) * C4581 +
                (C21569 * C133 + C47484 * C142) * C4577 +
                (C21569 * C269 + C47484 * C288) * C4582 +
                (C21569 * C287 + C47484 * C299) * C47855) *
                   C31513 +
               ((C21569 * C422 + C47484 * C441) * C4581 +
                (C21569 * C440 + C47484 * C452) * C4577 +
                (C21569 * C816 + C47484 * C825) * C4582 +
                (C21569 * C826 + C47484 * C831) * C47855) *
                   C47857) *
                  C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21569 * C117 + C47484 * C124) * C4581 +
                 (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                 C21721 * C47855) *
                    C31513 +
                (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                 C22228 * C47855) *
                    C47857) *
                   C47557 * C47876 -
               ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                 C22229 * C4581) *
                    C47857 +
                (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                 C21720 * C4581) *
                    C31513) *
                   C47557 * C47864 +
               ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                 C21724 * C47855) *
                    C31513 +
                (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                 C22561 * C47855) *
                    C47857) *
                   C47557 * C47837) *
                  C258 +
              (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                 C21729 * C47855) *
                    C31513 +
                (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                 C22233 * C47855) *
                    C47857) *
                   C47557 * C47864 -
               ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                 C26232 * C4581) *
                    C47857 +
                (C21727 * C47855 + C21726 * C4582 +
                 (C21569 * C128 + C47484 * C139) * C4577 +
                 (C21569 * C118 + C47484 * C125) * C4581) *
                    C31513) *
                   C47557 * C47876 -
               ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                 C22232 * C4581) *
                    C47857 +
                (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                 C21728 * C4581) *
                    C31513) *
                   C47557 * C47837) *
                  C259 +
              ((((C21569 * C119 + C47484 * C126) * C4581 +
                 (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                 C21733 * C47855) *
                    C31513 +
                (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                 C22236 * C47855) *
                    C47857) *
                   C47557 * C47876 -
               ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                 C22237 * C4581) *
                    C47857 +
                (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                 C21732 * C4581) *
                    C31513) *
                   C47557 * C47864 +
               ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                 C21736 * C47855) *
                    C31513 +
                (C22235 * C4581 + C22234 * C4577 +
                 (C21569 * C1544 + C47484 * C1547) * C4582 +
                 (C21569 * C1550 + C47484 * C1553) * C47855) *
                    C47857) *
                   C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21569 * C117 + C47484 * C124) * C4581 +
                                 (C21569 * C127 + C47484 * C138) * C4577 +
                                 C21720 * C4582 + C21721 * C47855) *
                                    C31513 +
                                (C37376 + C37377 + C37378 + C37379) * C47857) *
                                   C47877 -
                               ((C37380 + C37381 + C37382 + C37383) * C47857 +
                                (C37379 + C37378 + C37377 + C37376) * C31513) *
                                   C47866 +
                               ((C37383 + C37382 + C37381 + C37380) * C31513 +
                                (C27978 * C4581 + C27979 * C4577 +
                                 C23583 * C4582 + C23582 * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C258 +
                              (((C37384 + C37385 + C37386 + C37387) * C31513 +
                                (C37388 + C37389 + C37390 + C37391) * C47857) *
                                   C47866 -
                               ((C37387 + C37386 + C37385 + C37384) * C47857 +
                                (C21727 * C47855 + C21726 * C4582 +
                                 (C21569 * C128 + C47484 * C139) * C4577 +
                                 (C21569 * C118 + C47484 * C125) * C4581) *
                                    C31513) *
                                   C47877 -
                               ((C28192 * C47855 + C28193 * C4582 +
                                 C28330 * C4577 + C28331 * C4581) *
                                    C47857 +
                                (C37391 + C37390 + C37389 + C37388) * C31513) *
                                   C47840) *
                                  C47539 * C259 +
                              ((((C21569 * C119 + C47484 * C126) * C4581 +
                                 (C21569 * C129 + C47484 * C140) * C4577 +
                                 C21732 * C4582 + C21733 * C47855) *
                                    C31513 +
                                (C37392 + C37393 + C37394 + C37395) * C47857) *
                                   C47877 -
                               ((C37396 + C37397 + C37398 + C37399) * C47857 +
                                (C37395 + C37394 + C37393 + C37392) * C31513) *
                                   C47866 +
                               ((C37399 + C37398 + C37397 + C37396) * C31513 +
                                ((C21569 * C1844 + C47484 * C1853) * C4581 +
                                 (C21569 * C1850 + C47484 * C1862) * C4577 +
                                 (C21569 * C2224 + C47484 * C2227) * C4582 +
                                 (C21569 * C2230 + C47484 * C2233) * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C4581 +
             (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
             C21721 * C47855) *
                C31513 +
            (C37376 + C37377 + C37378 + C37379) * C47857) *
               C47557 * C942 -
           ((C37861 + C37860 + C37859 + C37858) * C47857 +
            (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
             C21720 * C4581) *
                C31513) *
               C47557 * C943 +
           ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
             C21724 * C47855) *
                C31513 +
            (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
             C22561 * C47855) *
                C47857) *
               C47557 * C47837) *
              C47873 +
          (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
             C21729 * C47855) *
                C31513 +
            (C37862 + C37863 + C37864 + C37865) * C47857) *
               C47557 * C943 -
           ((C37387 + C37386 + C37385 + C37384) * C47857 +
            (C21727 * C47855 + C21726 * C4582 +
             (C21569 * C128 + C47484 * C139) * C4577 +
             (C21569 * C118 + C47484 * C125) * C4581) *
                C31513) *
               C47557 * C942 -
           ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
             C22232 * C4581) *
                C47857 +
            (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
             C21728 * C4581) *
                C31513) *
               C47557 * C47837) *
              C47860 +
          ((((C21569 * C119 + C47484 * C126) * C4581 +
             (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
             C21733 * C47855) *
                C31513 +
            (C37392 + C37393 + C37394 + C37395) * C47857) *
               C47557 * C942 -
           ((C37869 + C37868 + C37867 + C37866) * C47857 +
            (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
             C21732 * C4581) *
                C31513) *
               C47557 * C943 +
           ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
             C21736 * C47855) *
                C31513 +
            (C22235 * C4581 + C22234 * C4577 +
             (C21569 * C1544 + C47484 * C1547) * C4582 +
             (C21569 * C1550 + C47484 * C1553) * C47855) *
                C47857) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C4581 +
            (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
            C21721 * C47855) *
               C31513 +
           (C37376 + C37377 + C37378 + C37379) * C47857) *
              C47557 * C1010 -
          ((C37861 + C37860 + C37859 + C37858) * C47857 +
           (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
            C21720 * C4581) *
               C31513) *
              C47557 * C1011 +
          ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
            C21724 * C47855) *
               C31513 +
           (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
            C22561 * C47855) *
               C47857) *
              C47557 * C1012 -
          ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
            C22560 * C4581) *
               C47857 +
           (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
            C21725 * C4581) *
               C31513) *
              C47557 * C1013 +
          ((C22422 * C4581 + C22423 * C4577 + C22425 * C4582 +
            C22424 * C47855) *
               C31513 +
           (C22927 * C4581 + C22926 * C4577 +
            (C21569 * C22917 + C47484 * C22918) * C4582 +
            (C21569 * C22919 + C47484 * C22920) * C47855) *
               C47857) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C4581 +
             (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
             C21721 * C47855) *
                C31513 +
            (C37376 + C37377 + C37378 + C37379) * C47857) *
               C47877 -
           ((C37380 + C37381 + C37382 + C37383) * C47857 +
            (C37379 + C37378 + C37377 + C37376) * C31513) *
               C47866 +
           ((C37383 + C37382 + C37381 + C37380) * C31513 +
            (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
             C23582 * C47855) *
                C47857) *
               C47840) *
              C942 +
          (((C37858 + C37859 + C37860 + C37861) * C31513 +
            (C38244 + C38245 + C38246 + C38247) * C47857) *
               C47866 -
           ((C37861 + C37860 + C37859 + C37858) * C47857 +
            (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
             C21720 * C4581) *
                C31513) *
               C47877 -
           ((C23580 * C47855 + C23581 * C4582 + C23582 * C4577 +
             C23583 * C4581) *
                C47857 +
            (C38247 + C38246 + C38245 + C38244) * C31513) *
               C47840) *
              C943 +
          (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
             C21724 * C47855) *
                C31513 +
            (C38248 + C38249 + C38250 + C38251) * C47857) *
               C47877 -
           ((C38252 + C38253 + C38254 + C38255) * C47857 +
            (C38251 + C38250 + C38249 + C38248) * C31513) *
               C47866 +
           ((C38255 + C38254 + C38253 + C38252) * C31513 +
            (C23581 * C4581 + C23580 * C4577 +
             (C21569 * C23567 + C47484 * C23568) * C4582 +
             (C21569 * C23569 + C47484 * C23570) * C47855) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21569 * C117 + C47484 * C124) * C4581 +
                                 (C21569 * C127 + C47484 * C138) * C4577 +
                                 C21720 * C4582 + C21721 * C47855) *
                                    C31513 +
                                (C37376 + C37377 + C37378 + C37379) * C47857) *
                                   C1664 -
                               ((C37380 + C37381 + C37382 + C37383) * C47857 +
                                (C37379 + C37378 + C37377 + C37376) * C31513) *
                                   C1665 +
                               ((C37383 + C37382 + C37381 + C37380) * C31513 +
                                (C27978 * C4581 + C27979 * C4577 +
                                 C23583 * C4582 + C23582 * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47873 +
                              (((C37384 + C37385 + C37386 + C37387) * C31513 +
                                (C37388 + C37389 + C37390 + C37391) * C47857) *
                                   C1665 -
                               ((C37387 + C37386 + C37385 + C37384) * C47857 +
                                (C21727 * C47855 + C21726 * C4582 +
                                 (C21569 * C128 + C47484 * C139) * C4577 +
                                 (C21569 * C118 + C47484 * C125) * C4581) *
                                    C31513) *
                                   C1664 -
                               ((C28192 * C47855 + C28193 * C4582 +
                                 C28330 * C4577 + C28331 * C4581) *
                                    C47857 +
                                (C37391 + C37390 + C37389 + C37388) * C31513) *
                                   C47840) *
                                  C47539 * C47860 +
                              ((((C21569 * C119 + C47484 * C126) * C4581 +
                                 (C21569 * C129 + C47484 * C140) * C4577 +
                                 C21732 * C4582 + C21733 * C47855) *
                                    C31513 +
                                (C37392 + C37393 + C37394 + C37395) * C47857) *
                                   C1664 -
                               ((C37396 + C37397 + C37398 + C37399) * C47857 +
                                (C37395 + C37394 + C37393 + C37392) * C31513) *
                                   C1665 +
                               ((C37399 + C37398 + C37397 + C37396) * C31513 +
                                ((C21569 * C1844 + C47484 * C1853) * C4581 +
                                 (C21569 * C1850 + C47484 * C1862) * C4577 +
                                 (C21569 * C2224 + C47484 * C2227) * C4582 +
                                 (C21569 * C2230 + C47484 * C2233) * C47855) *
                                    C47857) *
                                   C47840) *
                                  C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C4581 +
             (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
             C21721 * C47855) *
                C31513 +
            (C37376 + C37377 + C37378 + C37379) * C47857) *
               C1664 -
           ((C37380 + C37381 + C37382 + C37383) * C47857 +
            (C37379 + C37378 + C37377 + C37376) * C31513) *
               C1665 +
           ((C37383 + C37382 + C37381 + C37380) * C31513 +
            (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
             C23582 * C47855) *
                C47857) *
               C47840) *
              C47876 +
          (((C37858 + C37859 + C37860 + C37861) * C31513 +
            (C38244 + C38245 + C38246 + C38247) * C47857) *
               C1665 -
           ((C37861 + C37860 + C37859 + C37858) * C47857 +
            (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
             C21720 * C4581) *
                C31513) *
               C1664 -
           ((C23580 * C47855 + C23581 * C4582 + C23582 * C4577 +
             C23583 * C4581) *
                C47857 +
            (C38247 + C38246 + C38245 + C38244) * C31513) *
               C47840) *
              C47864 +
          (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
             C21724 * C47855) *
                C31513 +
            (C38248 + C38249 + C38250 + C38251) * C47857) *
               C1664 -
           ((C38252 + C38253 + C38254 + C38255) * C47857 +
            (C38251 + C38250 + C38249 + C38248) * C31513) *
               C1665 +
           ((C38255 + C38254 + C38253 + C38252) * C31513 +
            (C23581 * C4581 + C23580 * C4577 +
             (C21569 * C23567 + C47484 * C23568) * C4582 +
             (C21569 * C23569 + C47484 * C23570) * C47855) *
                C47857) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C4581 +
            (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
            C21721 * C47855) *
               C31513 +
           (C37376 + C37377 + C37378 + C37379) * C47857) *
              C1839 -
          ((C37380 + C37381 + C37382 + C37383) * C47857 +
           (C37379 + C37378 + C37377 + C37376) * C31513) *
              C1840 +
          ((C37383 + C37382 + C37381 + C37380) * C31513 +
           (C39092 + C39093 + C39094 + C39095) * C47857) *
              C1841 -
          ((C39096 + C39097 + C39098 + C39099) * C47857 +
           (C39095 + C39094 + C39093 + C39092) * C31513) *
              C1842 +
          ((C39099 + C39098 + C39097 + C39096) * C31513 +
           ((C21569 * C12345 + C47484 * C12347) * C4581 +
            (C21569 * C12349 + C47484 * C12351) * C4577 +
            (C21569 * C27959 + C47484 * C27960) * C4582 +
            (C21569 * C27961 + C47484 * C27962) * C47855) *
               C47857) *
              C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[188] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C942 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C943 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C47806 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C47837) *
                       C47791 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C942 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C4582 + C23370 * C4577 +
                       C23371 * C4581) *
                          C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C943 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C47806) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47806 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47539 * C554 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47644 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47806) *
                       C47539 * C555 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47806 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47644) *
                       C47539 * C556 +
                   (((C37660 + C37661 + C37662 + C37663) * C31513 +
                     ((C21569 * C421 + C47484 * C439) * C4581 +
                      (C21569 * C438 + C47484 * C451) * C4577 +
                      (C21569 * C2014 + C47484 * C2015) * C4582 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47806) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C2116 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C2117 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C2118 -
                    ((C39096 + C39097 + C39098 + C39099) * C47857 +
                     (C39095 + C39094 + C39093 + C39092) * C31513) *
                        C47853) *
                       C47539 * C47791 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C2117 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C2116 -
                    ((C39428 + C39429 + C39430 + C39431) * C47857 +
                     (C37391 + C37390 + C37389 + C37388) * C31513) *
                        C2118 +
                    ((C39431 + C39430 + C39429 + C39428) * C31513 +
                     ((C21569 * C1848 + C47484 * C1857) * C4581 +
                      (C21569 * C1860 + C47484 * C1866) * C4577 +
                      (C21569 * C6772 + C47484 * C6774) * C4582 +
                      (C21569 * C6776 + C47484 * C6778) * C47855) *
                         C47857) *
                        C47853) *
                       C47539 * C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                      C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                      C22229 * C4581) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                      C26232 * C4581) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                      C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                      C22237 * C4581) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                     C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                     C26232 * C4581) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C4582 +
                     (C21569 * C128 + C47484 * C139) * C4577 +
                     (C21569 * C118 + C47484 * C125) * C4581) *
                        C31513) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C4581 +
                     (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                     C21733 * C47855) *
                        C31513 +
                    (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                     C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                     C26528 * C4581) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C4582 +
                     (C21569 * C130 + C47484 * C141) * C4577 +
                     (C21569 * C120 + C47484 * C131) * C4581) *
                        C31513) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C4581 +
                     (C21569 * C133 + C47484 * C142) * C4577 +
                     (C21569 * C269 + C47484 * C288) * C4582 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C31513 +
                    ((C21569 * C422 + C47484 * C441) * C4581 +
                     (C21569 * C440 + C47484 * C452) * C4577 +
                     (C21569 * C816 + C47484 * C825) * C4582 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C942 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C943 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C942 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C37376 + C37377 + C37378 + C37379) * C47857) *
                       C47557 * C1010 -
                   ((C37861 + C37860 + C37859 + C37858) * C47857 +
                    (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                     C21720 * C4581) *
                        C31513) *
                       C47557 * C1011 +
                   ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                     C21724 * C47855) *
                        C31513 +
                    (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
                     C22560 * C4581) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                     C21725 * C4581) *
                        C31513) *
                       C47557 * C1013 +
                   ((C22422 * C4581 + C22423 * C4577 + C22425 * C4582 +
                     C22424 * C47855) *
                        C31513 +
                    (C22927 * C4581 + C22926 * C4577 +
                     (C21569 * C22917 + C47484 * C22918) * C4582 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C1664 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C1665 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
                      C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47873 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C1665 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C1664 -
                    ((C28192 * C47855 + C28193 * C4582 + C28330 * C4577 +
                      C28331 * C4581) *
                         C47857 +
                     (C37391 + C37390 + C37389 + C37388) * C31513) *
                        C47840) *
                       C47539 * C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C1664 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C1665 +
                    ((C37399 + C37398 + C37397 + C37396) * C31513 +
                     ((C21569 * C1844 + C47484 * C1853) * C4581 +
                      (C21569 * C1850 + C47484 * C1862) * C4577 +
                      (C21569 * C2224 + C47484 * C2227) * C4582 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C1664 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C1665 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
                      C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47876 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C1665 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C1664 -
                    ((C23580 * C47855 + C23581 * C4582 + C23582 * C4577 +
                      C23583 * C4581) *
                         C47857 +
                     (C38247 + C38246 + C38245 + C38244) * C31513) *
                        C47840) *
                       C47864 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C1664 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C1665 +
                    ((C38255 + C38254 + C38253 + C38252) * C31513 +
                     (C23581 * C4581 + C23580 * C4577 +
                      (C21569 * C23567 + C47484 * C23568) * C4582 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C47516 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C47805 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C3094 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C3094) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47640 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47647 +
                     ((C37383 + C37382 + C37381 + C37380) * C31513 +
                      (C39092 + C39093 + C39094 + C39095) * C47857) *
                         C3602) *
                        C47805 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47647 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47640 -
                     ((C39562 + C39563 + C39564 + C39565) * C47857 +
                      (C38247 + C38246 + C38245 + C38244) * C31513) *
                         C3602) *
                        C47602) *
                       C2440 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47647 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47640 -
                     ((C39428 + C39429 + C39430 + C39431) * C47857 +
                      (C37391 + C37390 + C37389 + C37388) * C31513) *
                         C3602) *
                        C47805 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47640 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47647 +
                     ((C39297 + C39296 + C39295 + C39294) * C31513 +
                      (C28193 * C4581 + C28192 * C4577 +
                       (C21569 * C7246 + C47484 * C7248) * C4582 +
                       (C21569 * C7250 + C47484 * C7252) * C47855) *
                          C47857) *
                         C3602) *
                        C47602) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47876 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47864 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C3094 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C47837) *
                       C2440 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C47876 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47864 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C3094) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C3094 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47539 * C47882 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47644 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C3094) *
                       C47539 * C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C3094 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47644) *
                       C47539 * C47862 +
                   (((C37660 + C37661 + C37662 + C37663) * C31513 +
                     ((C21569 * C421 + C47484 * C439) * C4581 +
                      (C21569 * C438 + C47484 * C451) * C4577 +
                      (C21569 * C2014 + C47484 * C2015) * C4582 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C3094) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47884 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47881 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C47872 -
                    ((C39096 + C39097 + C39098 + C39099) * C47857 +
                     (C39095 + C39094 + C39093 + C39092) * C31513) *
                        C47853) *
                       C47539 * C2440 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47881 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47884 -
                    ((C39428 + C39429 + C39430 + C39431) * C47857 +
                     (C37391 + C37390 + C37389 + C37388) * C31513) *
                        C47872 +
                    ((C39431 + C39430 + C39429 + C39428) * C31513 +
                     ((C21569 * C1848 + C47484 * C1857) * C4581 +
                      (C21569 * C1860 + C47484 * C1866) * C4577 +
                      (C21569 * C6772 + C47484 * C6774) * C4582 +
                      (C21569 * C6776 + C47484 * C6778) * C47855) *
                         C47857) *
                        C47853) *
                       C47539 * C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47640 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47647 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C39092 + C39093 + C39094 + C39095) * C47857) *
                        C3602) *
                       C47539 * C47516 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47647 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47640 -
                    ((C39428 + C39429 + C39430 + C39431) * C47857 +
                     (C37391 + C37390 + C37389 + C37388) * C31513) *
                        C3602) *
                       C47539 * C47525 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47640 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47647 +
                    ((C37399 + C37398 + C37397 + C37396) * C31513 +
                     ((C21569 * C1844 + C47484 * C1853) * C4581 +
                      (C21569 * C1850 + C47484 * C1862) * C4577 +
                      (C21569 * C2224 + C47484 * C2227) * C4582 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C3602) *
                       C47539 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C3094 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47539 * C47882 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47644 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C3094) *
                       C47539 * C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C3094 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47644) *
                       C47539 * C47862 +
                   (((C37660 + C37661 + C37662 + C37663) * C31513 +
                     ((C21569 * C421 + C47484 * C439) * C4581 +
                      (C21569 * C438 + C47484 * C451) * C4577 +
                      (C21569 * C2014 + C47484 * C2015) * C4582 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C3094) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C3094 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47876 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C3094) *
                        C47864 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C3094 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C47837) *
                       C2440 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C3094) *
                        C47876 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C3094 -
                     ((C39294 + C39295 + C39296 + C39297) * C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47864 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C3094) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C47805 -
                    ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                      C22229 * C4581) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C554 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47805) *
                       C555 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C47805 -
                    ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                      C22237 * C4581) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47602) *
                       C556 +
                   (((C21954 * C4581 + C21955 * C4577 + C21956 * C4582 +
                      C21957 * C47855) *
                         C31513 +
                     (C26390 * C4581 + C26391 * C4577 +
                      (C21569 * C1440 + C47484 * C1441) * C4582 +
                      (C21569 * C1442 + C47484 * C1443) * C47855) *
                         C47857) *
                        C47557 * C47602 -
                    ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                      C26528 * C4581) *
                         C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47557 * C47805) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C1284 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C1285 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47557 * C1286 -
                    ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
                      C22560 * C4581) *
                         C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47557 * C47847) *
                       C47791 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C1285 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C1284 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C1286 +
                    ((C21730 * C4581 + C21731 * C4577 + C22667 * C4582 +
                      C22666 * C47855) *
                         C31513 +
                     (C22819 * C4581 + C22818 * C4577 +
                      (C21569 * C6378 + C47484 * C6380) * C4582 +
                      (C21569 * C6382 + C47484 * C6384) * C47855) *
                         C47857) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C22556 * C4581 + C22557 * C4577 + C22558 * C4582 +
                       C22559 * C47855) *
                          C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C258 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C47805 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C4582 + C23370 * C4577 +
                       C23371 * C4581) *
                          C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C47602) *
                       C259 +
                   (((((C21569 * C119 + C47484 * C126) * C4581 +
                       (C21569 * C129 + C47484 * C140) * C4577 +
                       C21732 * C4582 + C21733 * C47855) *
                          C31513 +
                      (C37392 + C37393 + C37394 + C37395) * C47857) *
                         C47806 -
                     ((C37396 + C37397 + C37398 + C37399) * C47857 +
                      (C37395 + C37394 + C37393 + C37392) * C31513) *
                         C47644) *
                        C47805 +
                    (((C37866 + C37867 + C37868 + C37869) * C31513 +
                      (C26239 * C4581 + C26238 * C4577 +
                       (C21569 * C1158 + C47484 * C1173) * C4582 +
                       (C21569 * C1176 + C47484 * C1185) * C47855) *
                          C47857) *
                         C47644 -
                     ((C37869 + C37868 + C37867 + C37866) * C47857 +
                      (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                       C21732 * C4581) *
                          C31513) *
                         C47806) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47806 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C1284 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47644 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47806) *
                       C1285 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47806 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47644) *
                       C1286 +
                   (((C38714 + C38715 + C38716 + C38717) * C31513 +
                     (C22563 * C4581 + C22562 * C4577 +
                      (C21569 * C22535 + C47484 * C22536) * C4582 +
                      (C21569 * C22537 + C47484 * C22538) * C47855) *
                         C47857) *
                        C47644 -
                    ((C38717 + C38716 + C38715 + C38714) * C47857 +
                     (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                      C21725 * C4581) *
                         C31513) *
                        C47806) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                      C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                      C22229 * C4581) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                      C26232 * C4581) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                      C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                      C22237 * C4581) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                     C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                     C26232 * C4581) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C4582 +
                     (C21569 * C128 + C47484 * C139) * C4577 +
                     (C21569 * C118 + C47484 * C125) * C4581) *
                        C31513) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C4581 +
                     (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                     C21733 * C47855) *
                        C31513 +
                    (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                     C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                     C26528 * C4581) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C4582 +
                     (C21569 * C130 + C47484 * C141) * C4577 +
                     (C21569 * C120 + C47484 * C131) * C4581) *
                        C31513) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C4581 +
                     (C21569 * C133 + C47484 * C142) * C4577 +
                     (C21569 * C269 + C47484 * C288) * C4582 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C31513 +
                    ((C21569 * C422 + C47484 * C441) * C4581 +
                     (C21569 * C440 + C47484 * C452) * C4577 +
                     (C21569 * C816 + C47484 * C825) * C4582 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47877 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47866 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
                      C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C258 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47866 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47877 -
                    ((C28192 * C47855 + C28193 * C4582 + C28330 * C4577 +
                      C28331 * C4581) *
                         C47857 +
                     (C37391 + C37390 + C37389 + C37388) * C31513) *
                        C47840) *
                       C47539 * C259 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47877 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47866 +
                    ((C37399 + C37398 + C37397 + C37396) * C31513 +
                     ((C21569 * C1844 + C47484 * C1853) * C4581 +
                      (C21569 * C1850 + C47484 * C1862) * C4577 +
                      (C21569 * C2224 + C47484 * C2227) * C4582 +
                      (C21569 * C2230 + C47484 * C2233) * C47855) *
                         C47857) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C942 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C943 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C942 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C37376 + C37377 + C37378 + C37379) * C47857) *
                       C47557 * C1010 -
                   ((C37861 + C37860 + C37859 + C37858) * C47857 +
                    (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                     C21720 * C4581) *
                        C31513) *
                       C47557 * C1011 +
                   ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                     C21724 * C47855) *
                        C31513 +
                    (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
                     C22560 * C4581) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                     C21725 * C4581) *
                        C31513) *
                       C47557 * C1013 +
                   ((C22422 * C4581 + C22423 * C4577 + C22425 * C4582 +
                     C22424 * C47855) *
                        C31513 +
                    (C22927 * C4581 + C22926 * C4577 +
                     (C21569 * C22917 + C47484 * C22918) * C4582 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47877 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47866 +
                    ((C37383 + C37382 + C37381 + C37380) * C31513 +
                     (C27978 * C4581 + C27979 * C4577 + C23583 * C4582 +
                      C23582 * C47855) *
                         C47857) *
                        C47840) *
                       C942 +
                   (((C37858 + C37859 + C37860 + C37861) * C31513 +
                     (C38244 + C38245 + C38246 + C38247) * C47857) *
                        C47866 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47877 -
                    ((C23580 * C47855 + C23581 * C4582 + C23582 * C4577 +
                      C23583 * C4581) *
                         C47857 +
                     (C38247 + C38246 + C38245 + C38244) * C31513) *
                        C47840) *
                       C943 +
                   (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C38248 + C38249 + C38250 + C38251) * C47857) *
                        C47877 -
                    ((C38252 + C38253 + C38254 + C38255) * C47857 +
                     (C38251 + C38250 + C38249 + C38248) * C31513) *
                        C47866 +
                    ((C38255 + C38254 + C38253 + C38252) * C31513 +
                     (C23581 * C4581 + C23580 * C4577 +
                      (C21569 * C23567 + C47484 * C23568) * C4582 +
                      (C21569 * C23569 + C47484 * C23570) * C47855) *
                         C47857) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47806 -
                    ((C37380 + C37381 + C37382 + C37383) * C47857 +
                     (C37379 + C37378 + C37377 + C37376) * C31513) *
                        C47644) *
                       C47539 * C554 +
                   (((C37384 + C37385 + C37386 + C37387) * C31513 +
                     (C37388 + C37389 + C37390 + C37391) * C47857) *
                        C47644 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47806) *
                       C47539 * C555 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47806 -
                    ((C37396 + C37397 + C37398 + C37399) * C47857 +
                     (C37395 + C37394 + C37393 + C37392) * C31513) *
                        C47644) *
                       C47539 * C556 +
                   (((C37660 + C37661 + C37662 + C37663) * C31513 +
                     ((C21569 * C421 + C47484 * C439) * C4581 +
                      (C21569 * C438 + C47484 * C451) * C4577 +
                      (C21569 * C2014 + C47484 * C2015) * C4582 +
                      (C21569 * C2016 + C47484 * C2017) * C47855) *
                         C47857) *
                        C47644 -
                    ((C37663 + C37662 + C37661 + C37660) * C47857 +
                     (C21955 * C47855 + C21954 * C4582 +
                      (C21569 * C130 + C47484 * C141) * C4577 +
                      (C21569 * C120 + C47484 * C131) * C4581) *
                         C31513) *
                        C47806) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C4581 +
                       (C21569 * C127 + C47484 * C138) * C4577 +
                       C21720 * C4582 + C21721 * C47855) *
                          C31513 +
                      (C37376 + C37377 + C37378 + C37379) * C47857) *
                         C47806 -
                     ((C37380 + C37381 + C37382 + C37383) * C47857 +
                      (C37379 + C37378 + C37377 + C37376) * C31513) *
                         C47644) *
                        C942 +
                    (((C37858 + C37859 + C37860 + C37861) * C31513 +
                      (C38244 + C38245 + C38246 + C38247) * C47857) *
                         C47644 -
                     ((C37861 + C37860 + C37859 + C37858) * C47857 +
                      (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                       C21720 * C4581) *
                          C31513) *
                         C47806) *
                        C943 +
                    (((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                       C21724 * C47855) *
                          C31513 +
                      (C38248 + C38249 + C38250 + C38251) * C47857) *
                         C47806 -
                     ((C38252 + C38253 + C38254 + C38255) * C47857 +
                      (C38251 + C38250 + C38249 + C38248) * C31513) *
                         C47644) *
                        C47837) *
                       C47791 +
                   ((((C37384 + C37385 + C37386 + C37387) * C31513 +
                      (C37388 + C37389 + C37390 + C37391) * C47857) *
                         C47644 -
                     ((C37387 + C37386 + C37385 + C37384) * C47857 +
                      (C21727 * C47855 + C21726 * C4582 +
                       (C21569 * C128 + C47484 * C139) * C4577 +
                       (C21569 * C118 + C47484 * C125) * C4581) *
                          C31513) *
                         C47806) *
                        C942 +
                    (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                       C21729 * C47855) *
                          C31513 +
                      (C37862 + C37863 + C37864 + C37865) * C47857) *
                         C47806 -
                     ((C23368 * C47855 + C23369 * C4582 + C23370 * C4577 +
                       C23371 * C4581) *
                          C47857 +
                      (C37865 + C37864 + C37863 + C37862) * C31513) *
                         C47644) *
                        C943 +
                    (((C38580 + C38581 + C38582 + C38583) * C31513 +
                      (C23369 * C4581 + C23368 * C4577 +
                       (C21569 * C5856 + C47484 * C5858) * C4582 +
                       (C21569 * C5860 + C47484 * C5862) * C47855) *
                          C47857) *
                         C47644 -
                     ((C38583 + C38582 + C38581 + C38580) * C47857 +
                      (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                       C21728 * C4581) *
                          C31513) *
                         C47806) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                     C22228 * C47855) *
                        C47857) *
                       C47557 * C47539 * C108 -
                   ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                     C26232 * C4581) *
                        C47857 +
                    (C21727 * C47855 + C21726 * C4582 +
                     (C21569 * C128 + C47484 * C139) * C4577 +
                     (C21569 * C118 + C47484 * C125) * C4581) *
                        C31513) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C4581 +
                     (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                     C21733 * C47855) *
                        C31513 +
                    (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                     C22236 * C47855) *
                        C47857) *
                       C47557 * C47539 * C110 -
                   ((C26391 * C47855 + C26390 * C4582 + C26529 * C4577 +
                     C26528 * C4581) *
                        C47857 +
                    (C21955 * C47855 + C21954 * C4582 +
                     (C21569 * C130 + C47484 * C141) * C4577 +
                     (C21569 * C120 + C47484 * C131) * C4581) *
                        C31513) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C4581 +
                     (C21569 * C133 + C47484 * C142) * C4577 +
                     (C21569 * C269 + C47484 * C288) * C4582 +
                     (C21569 * C287 + C47484 * C299) * C47855) *
                        C31513 +
                    ((C21569 * C422 + C47484 * C441) * C4581 +
                     (C21569 * C440 + C47484 * C452) * C4577 +
                     (C21569 * C816 + C47484 * C825) * C4582 +
                     (C21569 * C826 + C47484 * C831) * C47855) *
                        C47857) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C26228 * C4581 + C26229 * C4577 + C22229 * C4582 +
                      C22228 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22226 * C47855 + C22227 * C4582 + C22228 * C4577 +
                      C22229 * C4581) *
                         C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C22230 * C4581 + C22231 * C4577 + C22232 * C4582 +
                      C22233 * C47855) *
                         C47857) *
                        C47557 * C47864 -
                    ((C22231 * C47855 + C22230 * C4582 + C26233 * C4577 +
                      C26232 * C4581) *
                         C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C47876 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C26236 * C4581 + C26237 * C4577 + C22237 * C4582 +
                      C22236 * C47855) *
                         C47857) *
                        C47557 * C47876 -
                    ((C22234 * C47855 + C22235 * C4582 + C22236 * C4577 +
                      C22237 * C4581) *
                         C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C47864 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C4581 +
                      (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                      C21721 * C47855) *
                         C31513 +
                     (C37376 + C37377 + C37378 + C37379) * C47857) *
                        C47557 * C942 -
                    ((C37861 + C37860 + C37859 + C37858) * C47857 +
                     (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                      C21720 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                      C21724 * C47855) *
                         C31513 +
                     (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                      C22561 * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C4581 + C21727 * C4577 + C21728 * C4582 +
                      C21729 * C47855) *
                         C31513 +
                     (C37862 + C37863 + C37864 + C37865) * C47857) *
                        C47557 * C943 -
                    ((C37387 + C37386 + C37385 + C37384) * C47857 +
                     (C21727 * C47855 + C21726 * C4582 +
                      (C21569 * C128 + C47484 * C139) * C4577 +
                      (C21569 * C118 + C47484 * C125) * C4581) *
                         C31513) *
                        C47557 * C942 -
                    ((C22818 * C47855 + C22819 * C4582 + C22233 * C4577 +
                      C22232 * C4581) *
                         C47857 +
                     (C21731 * C47855 + C21730 * C4582 + C21729 * C4577 +
                      C21728 * C4581) *
                         C31513) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C4581 +
                      (C21569 * C129 + C47484 * C140) * C4577 + C21732 * C4582 +
                      C21733 * C47855) *
                         C31513 +
                     (C37392 + C37393 + C37394 + C37395) * C47857) *
                        C47557 * C942 -
                    ((C37869 + C37868 + C37867 + C37866) * C47857 +
                     (C21735 * C47855 + C21734 * C4582 + C21733 * C4577 +
                      C21732 * C4581) *
                         C31513) *
                        C47557 * C943 +
                    ((C21734 * C4581 + C21735 * C4577 + C21737 * C4582 +
                      C21736 * C47855) *
                         C31513 +
                     (C22235 * C4581 + C22234 * C4577 +
                      (C21569 * C1544 + C47484 * C1547) * C4582 +
                      (C21569 * C1550 + C47484 * C1553) * C47855) *
                         C47857) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C4581 +
                     (C21569 * C127 + C47484 * C138) * C4577 + C21720 * C4582 +
                     C21721 * C47855) *
                        C31513 +
                    (C37376 + C37377 + C37378 + C37379) * C47857) *
                       C47557 * C1010 -
                   ((C37861 + C37860 + C37859 + C37858) * C47857 +
                    (C21723 * C47855 + C21722 * C4582 + C21721 * C4577 +
                     C21720 * C4581) *
                        C31513) *
                       C47557 * C1011 +
                   ((C21722 * C4581 + C21723 * C4577 + C21725 * C4582 +
                     C21724 * C47855) *
                        C31513 +
                    (C22227 * C4581 + C22226 * C4577 + C22560 * C4582 +
                     C22561 * C47855) *
                        C47857) *
                       C47557 * C1012 -
                   ((C22926 * C47855 + C22927 * C4582 + C22561 * C4577 +
                     C22560 * C4581) *
                        C47857 +
                    (C22423 * C47855 + C22422 * C4582 + C21724 * C4577 +
                     C21725 * C4581) *
                        C31513) *
                       C47557 * C1013 +
                   ((C22422 * C4581 + C22423 * C4577 + C22425 * C4582 +
                     C22424 * C47855) *
                        C31513 +
                    (C22927 * C4581 + C22926 * C4577 +
                     (C21569 * C22917 + C47484 * C22918) * C4582 +
                     (C21569 * C22919 + C47484 * C22920) * C47855) *
                        C47857) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C47598 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47605 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C47557 * C2700) *
                       C47516 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + C44292 * C42593) *
                        C47557 * C47605 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47598 -
                    ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C2700) *
                       C47525 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C47598 -
                    ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47605 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C47806 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C47598 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C47806) *
                        C47605 +
                    (((C21722 * C116 + C21723 * C47745) * C42591 +
                      (C43491 + C43492) * C42592 + C43497 * C42593) *
                         C47806 -
                     ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                      (C43492 + C43491) * C42591) *
                         C47644) *
                        C2700) *
                       C2440 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C47806) *
                        C47598 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C47806 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47605 +
                    (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
                      ((C21569 * C7246 + C47484 * C7248) * C116 +
                       (C21569 * C7250 + C47484 * C7252) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                      (C21729 * C47745 + C21728 * C116) * C42591) *
                         C47806) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47557 * C47883 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47557 * C47879 +
           ((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C47557 * C47869 -
           ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
            (C21724 * C47745 + C21725 * C116) * C42591) *
               C47557 * C47847) *
              C2440 +
          (((C21726 * C116 + C21727 * C47745) * C42591 +
            (C43198 + C43199) * C42592 + C44292 * C42593) *
               C47557 * C47879 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47557 * C47883 -
           ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
            (C21729 * C47745 + C21728 * C116) * C42591) *
               C47557 * C47869 +
           ((C21730 * C116 + C21731 * C47745) * C42591 +
            (C22819 * C116 + C22818 * C47745) * C42592 +
            ((C21569 * C5856 + C47484 * C5858) * C116 +
             (C21569 * C5860 + C47484 * C5862) * C47745) *
                C42593) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47557 * C2332 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47557 * C47602) *
              C47882 +
          (((C21726 * C116 + C21727 * C47745) * C42591 +
            (C43198 + C43199) * C42592 + C44292 * C42593) *
               C47557 * C47602 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47557 * C2332) *
              C47875 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47557 * C2332 -
           ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
            (C21733 * C47745 + C21732 * C116) * C42591) *
               C47557 * C47602) *
              C47862 +
          (((C21954 * C116 + C21955 * C47745) * C42591 +
            (C26390 * C116 + C26391 * C47745) * C42592 +
            ((C21569 * C2014 + C47484 * C2015) * C116 +
             (C21569 * C2016 + C47484 * C2017) * C47745) *
                C42593) *
               C47557 * C47602 -
           ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
            ((C21569 * C130 + C47484 * C141) * C47745 +
             (C21569 * C120 + C47484 * C131) * C116) *
                C42591) *
               C47557 * C2332) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C47877 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47866 +
            (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C47840) *
               C2332 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             C44500 * C42593) *
                C47866 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C47877 -
            ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
             C43490 * C42591) *
                C47840) *
               C47602) *
              C2440 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47866 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C47877 -
            ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
             C42836 * C42591) *
                C47840) *
               C2332 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C47877 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C47866 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C21569 * C6772 + C47484 * C6774) * C116 +
              (C21569 * C6776 + C47484 * C6778) * C47745) *
                 C42593) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C47806 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C2332 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C47806) *
                        C47602) *
                       C47516 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C47806) *
                        C2332 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C47806 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C116 +
                       (C21569 * C129 + C47484 * C140) * C47745) *
                          C42591 +
                      (C42827 + C42828) * C42592 + C42837 * C42593) *
                         C47806 -
                     ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47644) *
                        C2332 +
                    (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
                      ((C21569 * C2224 + C47484 * C2227) * C116 +
                       (C21569 * C2230 + C47484 * C2233) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                      (C21733 * C47745 + C21732 * C116) * C42591) *
                         C47806) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C2332 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47602) *
                       C47882 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + C44292 * C42593) *
                        C47557 * C47602 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C2332) *
                       C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C2332 -
                    ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47602) *
                       C47862 +
                   (((C21954 * C116 + C21955 * C47745) * C42591 +
                     (C26390 * C116 + C26391 * C47745) * C42592 +
                     ((C21569 * C2014 + C47484 * C2015) * C116 +
                      (C21569 * C2016 + C47484 * C2017) * C47745) *
                         C42593) *
                        C47557 * C47602 -
                    ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
                     ((C21569 * C130 + C47484 * C141) * C47745 +
                      (C21569 * C120 + C47484 * C131) * C116) *
                         C42591) *
                        C47557 * C2332) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C47883 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47879 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C47557 * C47869 -
                    ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
                     (C21724 * C47745 + C21725 * C116) * C42591) *
                        C47557 * C47847) *
                       C2440 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + C44292 * C42593) *
                        C47557 * C47879 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47883 -
                    ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47869 +
                    ((C21730 * C116 + C21731 * C47745) * C42591 +
                     (C22819 * C116 + C22818 * C47745) * C42592 +
                     ((C21569 * C5856 + C47484 * C5858) * C116 +
                      (C21569 * C5860 + C47484 * C5862) * C47745) *
                         C42593) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C3094 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C47598 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C3094) *
                        C47605 +
                    (((C21722 * C116 + C21723 * C47745) * C42591 +
                      (C43491 + C43492) * C42592 + C43497 * C42593) *
                         C3094 -
                     ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                      (C43492 + C43491) * C42591) *
                         C47644) *
                        C2700) *
                       C47791 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C3094) *
                        C47598 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C3094 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47605 +
                    (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
                      ((C21569 * C7246 + C47484 * C7248) * C116 +
                       (C21569 * C7250 + C47484 * C7252) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                      (C21729 * C47745 + C21728 * C116) * C42591) *
                         C3094) *
                        C2700) *
                       C47522)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47640 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47647 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C3602) *
              C47598 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            C44500 * C42593) *
               C47647 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47640 -
           ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
            C43490 * C42591) *
               C3602) *
              C47605 +
          (((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C47640 -
           ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
            (C43492 + C43491) * C42591) *
               C47647 +
           (C43497 * C42591 + (C43496 + C43495) * C42592 +
            ((C21569 * C23209 + C47484 * C23210) * C116 +
             (C21569 * C23211 + C47484 * C23212) * C47745) *
                C42593) *
               C3602) *
              C2700) *
         C47511) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C3094 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47644) *
              C47883 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            C44500 * C42593) *
               C47644 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C3094) *
              C47879 +
          (((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C3094 -
           ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
            (C43492 + C43491) * C42591) *
               C47644) *
              C47869 +
          (((C43844 + C43845) * C42591 + (C43846 + C43847) * C42592 +
            ((C21569 * C23567 + C47484 * C23568) * C116 +
             (C21569 * C23569 + C47484 * C23570) * C47745) *
                C42593) *
               C47644 -
           ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
            (C21724 * C47745 + C21725 * C116) * C42591) *
               C3094) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C3094 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47644) *
               C2332 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             C44500 * C42593) *
                C47644 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C3094) *
               C47602) *
              C47873 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47644 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C3094) *
               C2332 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C3094 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C47644) *
               C47602) *
              C47860 +
          (((((C21569 * C119 + C47484 * C126) * C116 +
              (C21569 * C129 + C47484 * C140) * C47745) *
                 C42591 +
             (C42827 + C42828) * C42592 + C42837 * C42593) *
                C3094 -
            ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
             (C42828 + C42827) * C42591) *
                C47644) *
               C2332 +
           (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
             ((C21569 * C2224 + C47484 * C2227) * C116 +
              (C21569 * C2230 + C47484 * C2233) * C47745) *
                 C42593) *
                C47644 -
            ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
             (C21733 * C47745 + C21732 * C116) * C42591) *
                C3094) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47884 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47881 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C47872 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47853) *
              C2332 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            C44500 * C42593) *
               C47881 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47884 -
           ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
            C43490 * C42591) *
               C47872 +
           (C44500 * C42591 + (C44502 + C44501) * C42592 +
            ((C21569 * C27959 + C47484 * C27960) * C116 +
             (C21569 * C27961 + C47484 * C27962) * C47745) *
                C42593) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C47640 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47647 +
            (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C3602) *
               C2332 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             C44500 * C42593) *
                C47647 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C47640 -
            ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
             C43490 * C42591) *
                C3602) *
               C47602) *
              C47791 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47647 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C47640 -
            ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
             C42836 * C42591) *
                C3602) *
               C2332 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C47640 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C47647 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C21569 * C6772 + C47484 * C6774) * C116 +
              (C21569 * C6776 + C47484 * C6778) * C47745) *
                 C42593) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C3094 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C2332 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C3094) *
                        C47602) *
                       C47873 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C3094) *
                        C2332 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C3094 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47602) *
                       C47860 +
                   (((((C21569 * C119 + C47484 * C126) * C116 +
                       (C21569 * C129 + C47484 * C140) * C47745) *
                          C42591 +
                      (C42827 + C42828) * C42592 + C42837 * C42593) *
                         C3094 -
                     ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47644) *
                        C2332 +
                    (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
                      ((C21569 * C2224 + C47484 * C2227) * C116 +
                       (C21569 * C2230 + C47484 * C2233) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                      (C21733 * C47745 + C21732 * C116) * C42591) *
                         C3094) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C3094 -
                    (C44134 * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47644) *
                       C47883 +
                   (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                     C44500 * C42593) *
                        C47644 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C3094) *
                       C47879 +
                   (((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C3094 -
                    ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                     (C43492 + C43491) * C42591) *
                        C47644) *
                       C47869 +
                   (((C43844 + C43845) * C42591 + (C43846 + C43847) * C42592 +
                     ((C21569 * C23567 + C47484 * C23568) * C116 +
                      (C21569 * C23569 + C47484 * C23570) * C47745) *
                         C42593) *
                        C47644 -
                    ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
                     (C21724 * C47745 + C21725 * C116) * C42591) *
                        C3094) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47557 * C1284 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47557 * C1285 +
           ((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C47557 * C1286 -
           ((C22562 * C47745 + C22563 * C116) * C42593 +
            (C22561 * C47745 + C22560 * C116) * C42592 +
            (C21724 * C47745 + C21725 * C116) * C42591) *
               C47557 * C47847) *
              C47791 +
          (((C21726 * C116 + C21727 * C47745) * C42591 +
            (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
               C47557 * C1285 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47557 * C1284 -
           ((C23368 * C47745 + C23369 * C116) * C42593 +
            (C22233 * C47745 + C22232 * C116) * C42592 +
            (C21729 * C47745 + C21728 * C116) * C42591) *
               C47557 * C1286 +
           ((C21730 * C116 + C21731 * C47745) * C42591 +
            (C22819 * C116 + C22818 * C47745) * C42592 +
            ((C21569 * C5856 + C47484 * C5858) * C116 +
             (C21569 * C5860 + C47484 * C5862) * C47745) *
                C42593) *
               C47557 * C47847) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47557 * C47805 -
           ((C22557 * C47745 + C22556 * C116) * C42593 +
            (C22228 * C47745 + C22229 * C116) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47557 * C47602) *
              C554 +
          (((C21726 * C116 + C21727 * C47745) * C42591 +
            (C22230 * C116 + C22231 * C47745) * C42592 +
            (C23371 * C116 + C23370 * C47745) * C42593) *
               C47557 * C47602 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47557 * C47805) *
              C555 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47557 * C47805 -
           ((C26238 * C47745 + C26239 * C116) * C42593 +
            (C22236 * C47745 + C22237 * C116) * C42592 +
            (C21733 * C47745 + C21732 * C116) * C42591) *
               C47557 * C47602) *
              C556 +
          (((C21954 * C116 + C21955 * C47745) * C42591 +
            (C26390 * C116 + C26391 * C47745) * C42592 +
            ((C21569 * C2014 + C47484 * C2015) * C116 +
             (C21569 * C2016 + C47484 * C2017) * C47745) *
                C42593) *
               C47557 * C47602 -
           (((C21569 * C438 + C47484 * C451) * C47745 +
             (C21569 * C421 + C47484 * C439) * C116) *
                C42593 +
            (C26529 * C47745 + C26528 * C116) * C42592 +
            ((C21569 * C130 + C47484 * C141) * C47745 +
             (C21569 * C120 + C47484 * C131) * C116) *
                C42591) *
               C47557 * C47805) *
              C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C1664 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C1665 +
            (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C47840) *
               C47805 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             (C43488 + C43489) * C42593) *
                C1665 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C1664 -
            ((C27980 * C47745 + C27981 * C116) * C42593 +
             (C43489 + C43488) * C42592 + C43490 * C42591) *
                C47840) *
               C47602) *
              C47791 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C1665 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C1664 -
            (((C21569 * C1860 + C47484 * C1866) * C47745 +
              (C21569 * C1848 + C47484 * C1857) * C116) *
                 C42593 +
             (C42826 + C42825) * C42592 + C42836 * C42591) *
                C47840) *
               C47805 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C1664 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C1665 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C21569 * C6772 + C47484 * C6774) * C116 +
              (C21569 * C6776 + C47484 * C6778) * C47745) *
                 C42593) *
                C47840) *
               C47602) *
              C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47806 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47644) *
              C1284 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            (C43488 + C43489) * C42593) *
               C47644 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47806) *
              C1285 +
          (((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C47806 -
           ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
            (C43492 + C43491) * C42591) *
               C47644) *
              C1286 +
          (((C43844 + C43845) * C42591 + (C43846 + C43847) * C42592 +
            ((C21569 * C23567 + C47484 * C23568) * C116 +
             (C21569 * C23569 + C47484 * C23570) * C47745) *
                C42593) *
               C47644 -
           ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
            (C21724 * C47745 + C21725 * C116) * C42591) *
               C47806) *
              C47847) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C47806 -
            ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47644) *
               C47805 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             (C23583 * C116 + C23582 * C47745) * C42593) *
                C47644 -
            ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C47806) *
               C47602) *
              C258 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C47644 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C47806) *
               C47805 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                C47806 -
            ((C28192 * C47745 + C28193 * C116) * C42593 +
             (C43201 + C43200) * C42592 + (C43199 + C43198) * C42591) *
                C47644) *
               C47602) *
              C259 +
          (((((C21569 * C119 + C47484 * C126) * C116 +
              (C21569 * C129 + C47484 * C140) * C47745) *
                 C42591 +
             (C42827 + C42828) * C42592 + C42837 * C42593) *
                C47806 -
            ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
             (C42828 + C42827) * C42591) *
                C47644) *
               C47805 +
           (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
             ((C21569 * C2224 + C47484 * C2227) * C116 +
              (C21569 * C2230 + C47484 * C2233) * C47745) *
                 C42593) *
                C47644 -
            ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
             (C21733 * C47745 + C21732 * C116) * C42591) *
                C47806) *
               C47602) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C2116 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C2117 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C2118 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47853) *
              C47805 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            C44500 * C42593) *
               C2117 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C2116 -
           ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
            C43490 * C42591) *
               C2118 +
           (C44500 * C42591 + (C44502 + C44501) * C42592 +
            ((C21569 * C27959 + C47484 * C27960) * C116 +
             (C21569 * C27961 + C47484 * C27962) * C47745) *
                C42593) *
               C47853) *
              C47602) *
         C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21569 * C117 + C47484 * C124) * C116 +
                (C21569 * C127 + C47484 * C138) * C47745) *
                   C42591 +
               (C26228 * C116 + C26229 * C47745) * C42592 +
               (C26231 * C116 + C26230 * C47745) * C42593) *
                  C47557 * C47539 * C108 -
              ((C26235 * C47745 + C26234 * C116) * C42593 +
               (C26233 * C47745 + C26232 * C116) * C42592 +
               ((C21569 * C128 + C47484 * C139) * C47745 +
                (C21569 * C118 + C47484 * C125) * C116) *
                   C42591) *
                  C47557 * C47539 * C109 +
              (((C21569 * C119 + C47484 * C126) * C116 +
                (C21569 * C129 + C47484 * C140) * C47745) *
                   C42591 +
               (C26236 * C116 + C26237 * C47745) * C42592 +
               (C26241 * C116 + C26240 * C47745) * C42593) *
                  C47557 * C47539 * C110 -
              (((C21569 * C438 + C47484 * C451) * C47745 +
                (C21569 * C421 + C47484 * C439) * C116) *
                   C42593 +
               (C26529 * C47745 + C26528 * C116) * C42592 +
               ((C21569 * C130 + C47484 * C141) * C47745 +
                (C21569 * C120 + C47484 * C131) * C116) *
                   C42591) *
                  C47557 * C47539 * C111 +
              (((C21569 * C121 + C47484 * C132) * C116 +
                (C21569 * C133 + C47484 * C142) * C47745) *
                   C42591 +
               ((C21569 * C422 + C47484 * C441) * C116 +
                (C21569 * C440 + C47484 * C452) * C47745) *
                   C42592 +
               ((C21569 * C423 + C47484 * C442) * C116 +
                (C21569 * C443 + C47484 * C453) * C47745) *
                   C42593) *
                  C47557 * C47539 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21569 * C117 + C47484 * C124) * C116 +
                 (C21569 * C127 + C47484 * C138) * C47745) *
                    C42591 +
                (C26228 * C116 + C26229 * C47745) * C42592 +
                (C26231 * C116 + C26230 * C47745) * C42593) *
                   C47557 * C47876 -
               ((C22557 * C47745 + C22556 * C116) * C42593 +
                (C22228 * C47745 + C22229 * C116) * C42592 +
                (C21721 * C47745 + C21720 * C116) * C42591) *
                   C47557 * C47864 +
               ((C21722 * C116 + C21723 * C47745) * C42591 +
                (C22227 * C116 + C22226 * C47745) * C42592 +
                (C22558 * C116 + C22559 * C47745) * C42593) *
                   C47557 * C47837) *
                  C258 +
              (((C21726 * C116 + C21727 * C47745) * C42591 +
                (C22230 * C116 + C22231 * C47745) * C42592 +
                (C23371 * C116 + C23370 * C47745) * C42593) *
                   C47557 * C47864 -
               ((C26235 * C47745 + C26234 * C116) * C42593 +
                (C26233 * C47745 + C26232 * C116) * C42592 +
                ((C21569 * C128 + C47484 * C139) * C47745 +
                 (C21569 * C118 + C47484 * C125) * C116) *
                    C42591) *
                   C47557 * C47876 -
               ((C23368 * C47745 + C23369 * C116) * C42593 +
                (C22233 * C47745 + C22232 * C116) * C42592 +
                (C21729 * C47745 + C21728 * C116) * C42591) *
                   C47557 * C47837) *
                  C259 +
              ((((C21569 * C119 + C47484 * C126) * C116 +
                 (C21569 * C129 + C47484 * C140) * C47745) *
                    C42591 +
                (C26236 * C116 + C26237 * C47745) * C42592 +
                (C26241 * C116 + C26240 * C47745) * C42593) *
                   C47557 * C47876 -
               ((C26238 * C47745 + C26239 * C116) * C42593 +
                (C22236 * C47745 + C22237 * C116) * C42592 +
                (C21733 * C47745 + C21732 * C116) * C42591) *
                   C47557 * C47864 +
               ((C21734 * C116 + C21735 * C47745) * C42591 +
                (C22235 * C116 + C22234 * C47745) * C42592 +
                ((C21569 * C1158 + C47484 * C1173) * C116 +
                 (C21569 * C1176 + C47484 * C1185) * C47745) *
                    C42593) *
                   C47557 * C47837) *
                  C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47877 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47866 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 +
            (C27983 * C116 + C27982 * C47745) * C42593) *
               C47840) *
              C47539 * C258 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C47866 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47877 -
           (((C21569 * C1860 + C47484 * C1866) * C47745 +
             (C21569 * C1848 + C47484 * C1857) * C116) *
                C42593 +
            (C42826 + C42825) * C42592 + C42836 * C42591) *
               C47840) *
              C47539 * C259 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47877 -
           ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47866 +
           (C42837 * C42591 + (C42841 + C42840) * C42592 +
            ((C21569 * C1849 + C47484 * C1858) * C116 +
             (C21569 * C1861 + C47484 * C1867) * C47745) *
                C42593) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47557 * C942 -
           ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47557 * C943 +
           ((C21722 * C116 + C21723 * C47745) * C42591 +
            (C22227 * C116 + C22226 * C47745) * C42592 +
            (C22558 * C116 + C22559 * C47745) * C42593) *
               C47557 * C47837) *
              C47873 +
          (((C21726 * C116 + C21727 * C47745) * C42591 +
            (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
               C47557 * C943 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47557 * C942 -
           ((C23368 * C47745 + C23369 * C116) * C42593 +
            (C22233 * C47745 + C22232 * C116) * C42592 +
            (C21729 * C47745 + C21728 * C116) * C42591) *
               C47557 * C47837) *
              C47860 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47557 * C942 -
           ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
            (C21733 * C47745 + C21732 * C116) * C42591) *
               C47557 * C943 +
           ((C21734 * C116 + C21735 * C47745) * C42591 +
            (C22235 * C116 + C22234 * C47745) * C42592 +
            ((C21569 * C1158 + C47484 * C1173) * C116 +
             (C21569 * C1176 + C47484 * C1185) * C47745) *
                C42593) *
               C47557 * C47837) *
              C47831)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C116 +
            (C21569 * C127 + C47484 * C138) * C47745) *
               C42591 +
           (C42815 + C42816) * C42592 + C42835 * C42593) *
              C47557 * C1010 -
          ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
           (C21721 * C47745 + C21720 * C116) * C42591) *
              C47557 * C1011 +
          ((C21722 * C116 + C21723 * C47745) * C42591 +
           (C22227 * C116 + C22226 * C47745) * C42592 +
           (C22558 * C116 + C22559 * C47745) * C42593) *
              C47557 * C1012 -
          ((C22562 * C47745 + C22563 * C116) * C42593 +
           (C22561 * C47745 + C22560 * C116) * C42592 +
           (C21724 * C47745 + C21725 * C116) * C42591) *
              C47557 * C1013 +
          ((C22422 * C116 + C22423 * C47745) * C42591 +
           (C22927 * C116 + C22926 * C47745) * C42592 +
           ((C21569 * C22535 + C47484 * C22536) * C116 +
            (C21569 * C22537 + C47484 * C22538) * C47745) *
               C42593) *
              C47557 * C1014) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47877 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47866 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 +
            (C27983 * C116 + C27982 * C47745) * C42593) *
               C47840) *
              C942 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            (C43488 + C43489) * C42593) *
               C47866 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C47877 -
           ((C27980 * C47745 + C27981 * C116) * C42593 +
            (C43489 + C43488) * C42592 + C43490 * C42591) *
               C47840) *
              C943 +
          (((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C47877 -
           ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
            (C43492 + C43491) * C42591) *
               C47866 +
           (C43497 * C42591 + (C43496 + C43495) * C42592 +
            ((C21569 * C23209 + C47484 * C23210) * C116 +
             (C21569 * C23211 + C47484 * C23212) * C47745) *
                C42593) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C1664 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C1665 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 +
            (C27983 * C116 + C27982 * C47745) * C42593) *
               C47840) *
              C47539 * C47873 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C1665 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C1664 -
           (((C21569 * C1860 + C47484 * C1866) * C47745 +
             (C21569 * C1848 + C47484 * C1857) * C116) *
                C42593 +
            (C42826 + C42825) * C42592 + C42836 * C42591) *
               C47840) *
              C47539 * C47860 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C1664 -
           ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C1665 +
           (C42837 * C42591 + (C42841 + C42840) * C42592 +
            ((C21569 * C1849 + C47484 * C1858) * C116 +
             (C21569 * C1861 + C47484 * C1867) * C47745) *
                C42593) *
               C47840) *
              C47539 * C47831)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C1664 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C1665 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 +
            (C27983 * C116 + C27982 * C47745) * C42593) *
               C47840) *
              C47876 +
          (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
            (C43488 + C43489) * C42593) *
               C1665 -
           (C43490 * C42593 + (C43195 + C43194) * C42592 +
            (C21721 * C47745 + C21720 * C116) * C42591) *
               C1664 -
           ((C27980 * C47745 + C27981 * C116) * C42593 +
            (C43489 + C43488) * C42592 + C43490 * C42591) *
               C47840) *
              C47864 +
          (((C21722 * C116 + C21723 * C47745) * C42591 +
            (C43491 + C43492) * C42592 + C43497 * C42593) *
               C1664 -
           ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
            (C43492 + C43491) * C42591) *
               C1665 +
           (C43497 * C42591 + (C43496 + C43495) * C42592 +
            ((C21569 * C23209 + C47484 * C23210) * C116 +
             (C21569 * C23211 + C47484 * C23212) * C47745) *
                C42593) *
               C47840) *
              C47837) *
         C47511) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21569 * C117 + C47484 * C124) * C116 +
            (C21569 * C127 + C47484 * C138) * C47745) *
               C42591 +
           (C42815 + C42816) * C42592 + C42835 * C42593) *
              C1839 -
          (C44134 * C42593 + (C42818 + C42817) * C42592 +
           (C42816 + C42815) * C42591) *
              C1840 +
          (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
              C1841 -
          ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
           C44134 * C42591) *
              C1842 +
          (C44141 * C42591 + (C44145 + C44144) * C42592 +
           ((C21569 * C44129 + C47484 * C44130) * C116 +
            (C21569 * C44131 + C47484 * C44132) * C47745) *
               C42593) *
              C1843) *
         C47539 * C47511) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C47806 -
            ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47644) *
               C942 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             (C43488 + C43489) * C42593) *
                C47644 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C47806) *
               C943 +
           (((C21722 * C116 + C21723 * C47745) * C42591 +
             (C43491 + C43492) * C42592 + C43497 * C42593) *
                C47806 -
            ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
             (C43492 + C43491) * C42591) *
                C47644) *
               C47837) *
              C47791 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             (C42825 + C42826) * C42593) *
                C47644 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C47806) *
               C942 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                C47806 -
            ((C28192 * C47745 + C28193 * C116) * C42593 +
             (C43201 + C43200) * C42592 + (C43199 + C43198) * C42591) *
                C47644) *
               C943 +
           (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
             ((C21569 * C7246 + C47484 * C7248) * C116 +
              (C21569 * C7250 + C47484 * C7252) * C47745) *
                 C42593) *
                C47644 -
            ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
             (C21729 * C47745 + C21728 * C116) * C42591) *
                C47806) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47806 -
           ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47644) *
              C47539 * C554 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            (C42825 + C42826) * C42593) *
               C47644 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47806) *
              C47539 * C555 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47806 -
           ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47644) *
              C47539 * C556 +
          (((C43038 + C43039) * C42591 + (C43046 + C43047) * C42592 +
            ((C21569 * C2120 + C47484 * C2121) * C116 +
             (C21569 * C2122 + C47484 * C2123) * C47745) *
                C42593) *
               C47644 -
           ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
            ((C21569 * C130 + C47484 * C141) * C47745 +
             (C21569 * C120 + C47484 * C131) * C116) *
                C42591) *
               C47806) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C2116 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C2117 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C2118 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47853) *
              C47539 * C47791 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C2117 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C2116 -
           ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
            C42836 * C42591) *
               C2118 +
           (C44393 * C42591 + (C44401 + C44400) * C42592 +
            ((C21569 * C12346 + C47484 * C12348) * C116 +
             (C21569 * C12350 + C47484 * C12352) * C47745) *
                C42593) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C26228 * C116 + C26229 * C47745) * C42592 +
                     (C26231 * C116 + C26230 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C22557 * C47745 + C22556 * C116) * C42593 +
                     (C22228 * C47745 + C22229 * C116) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C22230 * C116 + C22231 * C47745) * C42592 +
                     (C23371 * C116 + C23370 * C47745) * C42593) *
                        C47557 * C47864 -
                    ((C26235 * C47745 + C26234 * C116) * C42593 +
                     (C26233 * C47745 + C26232 * C116) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47876 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C26236 * C116 + C26237 * C47745) * C42592 +
                     (C26241 * C116 + C26240 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C26238 * C47745 + C26239 * C116) * C42593 +
                     (C22236 * C47745 + C22237 * C116) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C26228 * C116 + C26229 * C47745) * C42592 +
                    (C26231 * C116 + C26230 * C47745) * C42593) *
                       C47557 * C47539 * C108 -
                   ((C26235 * C47745 + C26234 * C116) * C42593 +
                    (C26233 * C47745 + C26232 * C116) * C42592 +
                    ((C21569 * C128 + C47484 * C139) * C47745 +
                     (C21569 * C118 + C47484 * C125) * C116) *
                        C42591) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C116 +
                     (C21569 * C129 + C47484 * C140) * C47745) *
                        C42591 +
                    (C26236 * C116 + C26237 * C47745) * C42592 +
                    (C26241 * C116 + C26240 * C47745) * C42593) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C438 + C47484 * C451) * C47745 +
                     (C21569 * C421 + C47484 * C439) * C116) *
                        C42593 +
                    (C26529 * C47745 + C26528 * C116) * C42592 +
                    ((C21569 * C130 + C47484 * C141) * C47745 +
                     (C21569 * C120 + C47484 * C131) * C116) *
                        C42591) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C116 +
                     (C21569 * C133 + C47484 * C142) * C47745) *
                        C42591 +
                    ((C21569 * C422 + C47484 * C441) * C116 +
                     (C21569 * C440 + C47484 * C452) * C47745) *
                        C42592 +
                    ((C21569 * C423 + C47484 * C442) * C116 +
                     (C21569 * C443 + C47484 * C453) * C47745) *
                        C42593) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C942 -
                    ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                        C47557 * C943 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C942 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C942 -
                    ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42835 * C42593) *
                       C47557 * C1010 -
                   ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                    (C21721 * C47745 + C21720 * C116) * C42591) *
                       C47557 * C1011 +
                   ((C21722 * C116 + C21723 * C47745) * C42591 +
                    (C22227 * C116 + C22226 * C47745) * C42592 +
                    (C22558 * C116 + C22559 * C47745) * C42593) *
                       C47557 * C1012 -
                   ((C22562 * C47745 + C22563 * C116) * C42593 +
                    (C22561 * C47745 + C22560 * C116) * C42592 +
                    (C21724 * C47745 + C21725 * C116) * C42591) *
                       C47557 * C1013 +
                   ((C22422 * C116 + C22423 * C47745) * C42591 +
                    (C22927 * C116 + C22926 * C47745) * C42592 +
                    ((C21569 * C22535 + C47484 * C22536) * C116 +
                     (C21569 * C22537 + C47484 * C22538) * C47745) *
                        C42593) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C1664 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C1665 +
                    (C42835 * C42591 + (C42820 + C42819) * C42592 +
                     (C27983 * C116 + C27982 * C47745) * C42593) *
                        C47840) *
                       C47539 * C47873 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C1665 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C1664 -
                    (((C21569 * C1860 + C47484 * C1866) * C47745 +
                      (C21569 * C1848 + C47484 * C1857) * C116) *
                         C42593 +
                     (C42826 + C42825) * C42592 + C42836 * C42591) *
                        C47840) *
                       C47539 * C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C1664 -
                    ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C1665 +
                    (C42837 * C42591 + (C42841 + C42840) * C42592 +
                     ((C21569 * C1849 + C47484 * C1858) * C116 +
                      (C21569 * C1861 + C47484 * C1867) * C47745) *
                         C42593) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C1664 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C1665 +
                    (C42835 * C42591 + (C42820 + C42819) * C42592 +
                     (C27983 * C116 + C27982 * C47745) * C42593) *
                        C47840) *
                       C47876 +
                   (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                     (C43488 + C43489) * C42593) *
                        C1665 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C1664 -
                    ((C27980 * C47745 + C27981 * C116) * C42593 +
                     (C43489 + C43488) * C42592 + C43490 * C42591) *
                        C47840) *
                       C47864 +
                   (((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C1664 -
                    ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                     (C43492 + C43491) * C42591) *
                        C1665 +
                    (C43497 * C42591 + (C43496 + C43495) * C42592 +
                     ((C21569 * C23209 + C47484 * C23210) * C116 +
                      (C21569 * C23211 + C47484 * C23212) * C47745) *
                         C42593) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C3094 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C47805 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C3094) *
                        C47602) *
                       C47516 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C3094) *
                        C47805 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C3094 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47602) *
                       C47525 +
                   (((((C21569 * C119 + C47484 * C126) * C116 +
                       (C21569 * C129 + C47484 * C140) * C47745) *
                          C42591 +
                      (C42827 + C42828) * C42592 + C42837 * C42593) *
                         C3094 -
                     ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47644) *
                        C47805 +
                    (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
                      ((C21569 * C2224 + C47484 * C2227) * C116 +
                       (C21569 * C2230 + C47484 * C2233) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                      (C21733 * C47745 + C21732 * C116) * C42591) *
                         C3094) *
                        C47602) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C47640 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47647 +
            (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
                C3602) *
               C47805 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             C44500 * C42593) *
                C47647 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C47640 -
            ((C44501 + C44502) * C42593 + (C43489 + C43488) * C42592 +
             C43490 * C42591) *
                C3602) *
               C47602) *
              C2440 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47647 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C47640 -
            ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
             C42836 * C42591) *
                C3602) *
               C47805 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C47640 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C47647 +
            (C44292 * C42591 + (C44294 + C44293) * C42592 +
             ((C21569 * C6772 + C47484 * C6774) * C116 +
              (C21569 * C6776 + C47484 * C6778) * C47745) *
                 C42593) *
                C3602) *
               C47602) *
              C47522)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21569 * C117 + C47484 * C124) * C116 +
              (C21569 * C127 + C47484 * C138) * C47745) *
                 C42591 +
             (C42815 + C42816) * C42592 + C42835 * C42593) *
                C3094 -
            (C44134 * C42593 + (C42818 + C42817) * C42592 +
             (C42816 + C42815) * C42591) *
                C47644) *
               C47876 +
           (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
             C44500 * C42593) *
                C47644 -
            (C43490 * C42593 + (C43195 + C43194) * C42592 +
             (C21721 * C47745 + C21720 * C116) * C42591) *
                C3094) *
               C47864 +
           (((C21722 * C116 + C21723 * C47745) * C42591 +
             (C43491 + C43492) * C42592 + C43497 * C42593) *
                C3094 -
            ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
             (C43492 + C43491) * C42591) *
                C47644) *
               C47837) *
              C2440 +
          ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
             C44393 * C42593) *
                C47644 -
            (C42836 * C42593 + (C42822 + C42821) * C42592 +
             ((C21569 * C128 + C47484 * C139) * C47745 +
              (C21569 * C118 + C47484 * C125) * C116) *
                 C42591) *
                C3094) *
               C47876 +
           (((C21726 * C116 + C21727 * C47745) * C42591 +
             (C43198 + C43199) * C42592 + C44292 * C42593) *
                C3094 -
            ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
             (C43199 + C43198) * C42591) *
                C47644) *
               C47864 +
           (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
             ((C21569 * C7246 + C47484 * C7248) * C116 +
              (C21569 * C7250 + C47484 * C7252) * C47745) *
                 C42593) *
                C47644 -
            ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
             (C21729 * C47745 + C21728 * C116) * C42591) *
                C3094) *
               C47837) *
              C47522)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C3094 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47644) *
              C47539 * C47882 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47644 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C3094) *
              C47539 * C47875 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C3094 -
           ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47644) *
              C47539 * C47862 +
          (((C43038 + C43039) * C42591 + (C43046 + C43047) * C42592 +
            ((C21569 * C2120 + C47484 * C2121) * C116 +
             (C21569 * C2122 + C47484 * C2123) * C47745) *
                C42593) *
               C47644 -
           ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
            ((C21569 * C130 + C47484 * C141) * C47745 +
             (C21569 * C120 + C47484 * C131) * C116) *
                C42591) *
               C3094) *
              C47539 * C47841)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47884 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47881 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C47872 -
           ((C44144 + C44145) * C42593 + (C44136 + C44135) * C42592 +
            C44134 * C42591) *
               C47853) *
              C47539 * C2440 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47881 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47884 -
           ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
            C42836 * C42591) *
               C47872 +
           (C44393 * C42591 + (C44401 + C44400) * C42592 +
            ((C21569 * C12346 + C47484 * C12348) * C116 +
             (C21569 * C12350 + C47484 * C12352) * C47745) *
                C42593) *
               C47853) *
              C47539 * C47522)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21569 * C117 + C47484 * C124) * C116 +
             (C21569 * C127 + C47484 * C138) * C47745) *
                C42591 +
            (C42815 + C42816) * C42592 + C42835 * C42593) *
               C47640 -
           (C44134 * C42593 + (C42818 + C42817) * C42592 +
            (C42816 + C42815) * C42591) *
               C47647 +
           (C42835 * C42591 + (C42820 + C42819) * C42592 + C44141 * C42593) *
               C3602) *
              C47539 * C47516 +
          (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
            C44393 * C42593) *
               C47647 -
           (C42836 * C42593 + (C42822 + C42821) * C42592 +
            ((C21569 * C128 + C47484 * C139) * C47745 +
             (C21569 * C118 + C47484 * C125) * C116) *
                C42591) *
               C47640 -
           ((C44400 + C44401) * C42593 + (C42826 + C42825) * C42592 +
            C42836 * C42591) *
               C3602) *
              C47539 * C47525 +
          ((((C21569 * C119 + C47484 * C126) * C116 +
             (C21569 * C129 + C47484 * C140) * C47745) *
                C42591 +
            (C42827 + C42828) * C42592 + C42837 * C42593) *
               C47640 -
           ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
            (C42828 + C42827) * C42591) *
               C47647 +
           (C42837 * C42591 + (C42841 + C42840) * C42592 +
            ((C21569 * C1849 + C47484 * C1858) * C116 +
             (C21569 * C1861 + C47484 * C1867) * C47745) *
                C42593) *
               C3602) *
              C47539 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C3094 -
                    (C44134 * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47644) *
                       C47539 * C47882 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     C44393 * C42593) *
                        C47644 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C3094) *
                       C47539 * C47875 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C3094 -
                    ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47644) *
                       C47539 * C47862 +
                   (((C43038 + C43039) * C42591 + (C43046 + C43047) * C42592 +
                     ((C21569 * C2120 + C47484 * C2121) * C116 +
                      (C21569 * C2122 + C47484 * C2123) * C47745) *
                         C42593) *
                        C47644 -
                    ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
                     ((C21569 * C130 + C47484 * C141) * C47745 +
                      (C21569 * C120 + C47484 * C131) * C116) *
                         C42591) *
                        C3094) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C3094 -
                     (C44134 * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C47876 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      C44500 * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C3094) *
                        C47864 +
                    (((C21722 * C116 + C21723 * C47745) * C42591 +
                      (C43491 + C43492) * C42592 + C43497 * C42593) *
                         C3094 -
                     ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                      (C43492 + C43491) * C42591) *
                         C47644) *
                        C47837) *
                       C2440 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      C44393 * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C3094) *
                        C47876 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + C44292 * C42593) *
                         C3094 -
                     ((C44293 + C44294) * C42593 + (C43201 + C43200) * C42592 +
                      (C43199 + C43198) * C42591) *
                         C47644) *
                        C47864 +
                    (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
                      ((C21569 * C7246 + C47484 * C7248) * C116 +
                       (C21569 * C7250 + C47484 * C7252) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                      (C21729 * C47745 + C21728 * C116) * C42591) *
                         C3094) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C47805 -
                    ((C22557 * C47745 + C22556 * C116) * C42593 +
                     (C22228 * C47745 + C22229 * C116) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47602) *
                       C554 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C22230 * C116 + C22231 * C47745) * C42592 +
                     (C23371 * C116 + C23370 * C47745) * C42593) *
                        C47557 * C47602 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47805) *
                       C555 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C47805 -
                    ((C26238 * C47745 + C26239 * C116) * C42593 +
                     (C22236 * C47745 + C22237 * C116) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47602) *
                       C556 +
                   (((C21954 * C116 + C21955 * C47745) * C42591 +
                     (C26390 * C116 + C26391 * C47745) * C42592 +
                     ((C21569 * C2014 + C47484 * C2015) * C116 +
                      (C21569 * C2016 + C47484 * C2017) * C47745) *
                         C42593) *
                        C47557 * C47602 -
                    (((C21569 * C438 + C47484 * C451) * C47745 +
                      (C21569 * C421 + C47484 * C439) * C116) *
                         C42593 +
                     (C26529 * C47745 + C26528 * C116) * C42592 +
                     ((C21569 * C130 + C47484 * C141) * C47745 +
                      (C21569 * C120 + C47484 * C131) * C116) *
                         C42591) *
                        C47557 * C47805) *
                       C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C1284 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C1285 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C47557 * C1286 -
                    ((C22562 * C47745 + C22563 * C116) * C42593 +
                     (C22561 * C47745 + C22560 * C116) * C42592 +
                     (C21724 * C47745 + C21725 * C116) * C42591) *
                        C47557 * C47847) *
                       C47791 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                        C47557 * C1285 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C1284 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C1286 +
                    ((C21730 * C116 + C21731 * C47745) * C42591 +
                     (C22819 * C116 + C22818 * C47745) * C42592 +
                     ((C21569 * C5856 + C47484 * C5858) * C116 +
                      (C21569 * C5860 + C47484 * C5862) * C47745) *
                         C42593) *
                        C47557 * C47847) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C47806 -
                     ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C47805 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      (C23583 * C116 + C23582 * C47745) * C42593) *
                         C47644 -
                     ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C47806) *
                        C47602) *
                       C258 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      (C42825 + C42826) * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C47806) *
                        C47805 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                         C47806 -
                     ((C28192 * C47745 + C28193 * C116) * C42593 +
                      (C43201 + C43200) * C42592 + (C43199 + C43198) * C42591) *
                         C47644) *
                        C47602) *
                       C259 +
                   (((((C21569 * C119 + C47484 * C126) * C116 +
                       (C21569 * C129 + C47484 * C140) * C47745) *
                          C42591 +
                      (C42827 + C42828) * C42592 + C42837 * C42593) *
                         C47806 -
                     ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                      (C42828 + C42827) * C42591) *
                         C47644) *
                        C47805 +
                    (((C43202 + C43203) * C42591 + (C43204 + C43205) * C42592 +
                      ((C21569 * C2224 + C47484 * C2227) * C116 +
                       (C21569 * C2230 + C47484 * C2233) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                      (C21733 * C47745 + C21732 * C116) * C42591) *
                         C47806) *
                        C47602) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47806 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47644) *
                       C1284 +
                   (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                     (C43488 + C43489) * C42593) *
                        C47644 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47806) *
                       C1285 +
                   (((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C47806 -
                    ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                     (C43492 + C43491) * C42591) *
                        C47644) *
                       C1286 +
                   (((C43844 + C43845) * C42591 + (C43846 + C43847) * C42592 +
                     ((C21569 * C23567 + C47484 * C23568) * C116 +
                      (C21569 * C23569 + C47484 * C23570) * C47745) *
                         C42593) *
                        C47644 -
                    ((C43847 + C43846) * C42593 + (C43845 + C43844) * C42592 +
                     (C21724 * C47745 + C21725 * C116) * C42591) *
                        C47806) *
                       C47847) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C26228 * C116 + C26229 * C47745) * C42592 +
                     (C26231 * C116 + C26230 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C22557 * C47745 + C22556 * C116) * C42593 +
                     (C22228 * C47745 + C22229 * C116) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C22230 * C116 + C22231 * C47745) * C42592 +
                     (C23371 * C116 + C23370 * C47745) * C42593) *
                        C47557 * C47864 -
                    ((C26235 * C47745 + C26234 * C116) * C42593 +
                     (C26233 * C47745 + C26232 * C116) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47876 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C26236 * C116 + C26237 * C47745) * C42592 +
                     (C26241 * C116 + C26240 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C26238 * C47745 + C26239 * C116) * C42593 +
                     (C22236 * C47745 + C22237 * C116) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C26228 * C116 + C26229 * C47745) * C42592 +
                    (C26231 * C116 + C26230 * C47745) * C42593) *
                       C47557 * C47539 * C108 -
                   ((C26235 * C47745 + C26234 * C116) * C42593 +
                    (C26233 * C47745 + C26232 * C116) * C42592 +
                    ((C21569 * C128 + C47484 * C139) * C47745 +
                     (C21569 * C118 + C47484 * C125) * C116) *
                        C42591) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C116 +
                     (C21569 * C129 + C47484 * C140) * C47745) *
                        C42591 +
                    (C26236 * C116 + C26237 * C47745) * C42592 +
                    (C26241 * C116 + C26240 * C47745) * C42593) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C438 + C47484 * C451) * C47745 +
                     (C21569 * C421 + C47484 * C439) * C116) *
                        C42593 +
                    (C26529 * C47745 + C26528 * C116) * C42592 +
                    ((C21569 * C130 + C47484 * C141) * C47745 +
                     (C21569 * C120 + C47484 * C131) * C116) *
                        C42591) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C116 +
                     (C21569 * C133 + C47484 * C142) * C47745) *
                        C42591 +
                    ((C21569 * C422 + C47484 * C441) * C116 +
                     (C21569 * C440 + C47484 * C452) * C47745) *
                        C42592 +
                    ((C21569 * C423 + C47484 * C442) * C116 +
                     (C21569 * C443 + C47484 * C453) * C47745) *
                        C42593) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47877 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47866 +
                    (C42835 * C42591 + (C42820 + C42819) * C42592 +
                     (C27983 * C116 + C27982 * C47745) * C42593) *
                        C47840) *
                       C47539 * C258 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C47866 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47877 -
                    (((C21569 * C1860 + C47484 * C1866) * C47745 +
                      (C21569 * C1848 + C47484 * C1857) * C116) *
                         C42593 +
                     (C42826 + C42825) * C42592 + C42836 * C42591) *
                        C47840) *
                       C47539 * C259 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47877 -
                    ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47866 +
                    (C42837 * C42591 + (C42841 + C42840) * C42592 +
                     ((C21569 * C1849 + C47484 * C1858) * C116 +
                      (C21569 * C1861 + C47484 * C1867) * C47745) *
                         C42593) *
                        C47840) *
                       C47539 * C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C942 -
                    ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                        C47557 * C943 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C942 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C942 -
                    ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42835 * C42593) *
                       C47557 * C1010 -
                   ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                    (C21721 * C47745 + C21720 * C116) * C42591) *
                       C47557 * C1011 +
                   ((C21722 * C116 + C21723 * C47745) * C42591 +
                    (C22227 * C116 + C22226 * C47745) * C42592 +
                    (C22558 * C116 + C22559 * C47745) * C42593) *
                       C47557 * C1012 -
                   ((C22562 * C47745 + C22563 * C116) * C42593 +
                    (C22561 * C47745 + C22560 * C116) * C42592 +
                    (C21724 * C47745 + C21725 * C116) * C42591) *
                       C47557 * C1013 +
                   ((C22422 * C116 + C22423 * C47745) * C42591 +
                    (C22927 * C116 + C22926 * C47745) * C42592 +
                    ((C21569 * C22535 + C47484 * C22536) * C116 +
                     (C21569 * C22537 + C47484 * C22538) * C47745) *
                        C42593) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47877 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47866 +
                    (C42835 * C42591 + (C42820 + C42819) * C42592 +
                     (C27983 * C116 + C27982 * C47745) * C42593) *
                        C47840) *
                       C942 +
                   (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                     (C43488 + C43489) * C42593) *
                        C47866 -
                    (C43490 * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47877 -
                    ((C27980 * C47745 + C27981 * C116) * C42593 +
                     (C43489 + C43488) * C42592 + C43490 * C42591) *
                        C47840) *
                       C943 +
                   (((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C43491 + C43492) * C42592 + C43497 * C42593) *
                        C47877 -
                    ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                     (C43492 + C43491) * C42591) *
                        C47866 +
                    (C43497 * C42591 + (C43496 + C43495) * C42592 +
                     ((C21569 * C23209 + C47484 * C23210) * C116 +
                      (C21569 * C23211 + C47484 * C23212) * C47745) *
                         C42593) *
                        C47840) *
                       C47837) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47806 -
                    ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                     (C42816 + C42815) * C42591) *
                        C47644) *
                       C47539 * C554 +
                   (((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                     (C42825 + C42826) * C42593) *
                        C47644 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47806) *
                       C47539 * C555 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47806 -
                    ((C42840 + C42841) * C42593 + (C42830 + C42829) * C42592 +
                     (C42828 + C42827) * C42591) *
                        C47644) *
                       C47539 * C556 +
                   (((C43038 + C43039) * C42591 + (C43046 + C43047) * C42592 +
                     ((C21569 * C2120 + C47484 * C2121) * C116 +
                      (C21569 * C2122 + C47484 * C2123) * C47745) *
                         C42593) *
                        C47644 -
                    ((C43047 + C43046) * C42593 + (C43039 + C43038) * C42592 +
                     ((C21569 * C130 + C47484 * C141) * C47745 +
                      (C21569 * C120 + C47484 * C131) * C116) *
                         C42591) *
                        C47806) *
                       C47539 * C47841)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21569 * C117 + C47484 * C124) * C116 +
                       (C21569 * C127 + C47484 * C138) * C47745) *
                          C42591 +
                      (C42815 + C42816) * C42592 + C42835 * C42593) *
                         C47806 -
                     ((C42819 + C42820) * C42593 + (C42818 + C42817) * C42592 +
                      (C42816 + C42815) * C42591) *
                         C47644) *
                        C942 +
                    (((C43194 + C43195) * C42591 + (C43196 + C43197) * C42592 +
                      (C43488 + C43489) * C42593) *
                         C47644 -
                     (C43490 * C42593 + (C43195 + C43194) * C42592 +
                      (C21721 * C47745 + C21720 * C116) * C42591) *
                         C47806) *
                        C943 +
                    (((C21722 * C116 + C21723 * C47745) * C42591 +
                      (C43491 + C43492) * C42592 + C43497 * C42593) *
                         C47806 -
                     ((C43495 + C43496) * C42593 + (C43494 + C43493) * C42592 +
                      (C43492 + C43491) * C42591) *
                         C47644) *
                        C47837) *
                       C47791 +
                   ((((C42821 + C42822) * C42591 + (C42823 + C42824) * C42592 +
                      (C42825 + C42826) * C42593) *
                         C47644 -
                     (C42836 * C42593 + (C42822 + C42821) * C42592 +
                      ((C21569 * C128 + C47484 * C139) * C47745 +
                       (C21569 * C118 + C47484 * C125) * C116) *
                          C42591) *
                         C47806) *
                        C942 +
                    (((C21726 * C116 + C21727 * C47745) * C42591 +
                      (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                         C47806 -
                     ((C28192 * C47745 + C28193 * C116) * C42593 +
                      (C43201 + C43200) * C42592 + (C43199 + C43198) * C42591) *
                         C47644) *
                        C943 +
                    (((C43742 + C43743) * C42591 + (C43744 + C43745) * C42592 +
                      ((C21569 * C7246 + C47484 * C7248) * C116 +
                       (C21569 * C7250 + C47484 * C7252) * C47745) *
                          C42593) *
                         C47644 -
                     ((C43745 + C43744) * C42593 + (C43743 + C43742) * C42592 +
                      (C21729 * C47745 + C21728 * C116) * C42591) *
                         C47806) *
                        C47837) *
                       C47522)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C26228 * C116 + C26229 * C47745) * C42592 +
                    (C26231 * C116 + C26230 * C47745) * C42593) *
                       C47557 * C47539 * C108 -
                   ((C26235 * C47745 + C26234 * C116) * C42593 +
                    (C26233 * C47745 + C26232 * C116) * C42592 +
                    ((C21569 * C128 + C47484 * C139) * C47745 +
                     (C21569 * C118 + C47484 * C125) * C116) *
                        C42591) *
                       C47557 * C47539 * C109 +
                   (((C21569 * C119 + C47484 * C126) * C116 +
                     (C21569 * C129 + C47484 * C140) * C47745) *
                        C42591 +
                    (C26236 * C116 + C26237 * C47745) * C42592 +
                    (C26241 * C116 + C26240 * C47745) * C42593) *
                       C47557 * C47539 * C110 -
                   (((C21569 * C438 + C47484 * C451) * C47745 +
                     (C21569 * C421 + C47484 * C439) * C116) *
                        C42593 +
                    (C26529 * C47745 + C26528 * C116) * C42592 +
                    ((C21569 * C130 + C47484 * C141) * C47745 +
                     (C21569 * C120 + C47484 * C131) * C116) *
                        C42591) *
                       C47557 * C47539 * C111 +
                   (((C21569 * C121 + C47484 * C132) * C116 +
                     (C21569 * C133 + C47484 * C142) * C47745) *
                        C42591 +
                    ((C21569 * C422 + C47484 * C441) * C116 +
                     (C21569 * C440 + C47484 * C452) * C47745) *
                        C42592 +
                    ((C21569 * C423 + C47484 * C442) * C116 +
                     (C21569 * C443 + C47484 * C453) * C47745) *
                        C42593) *
                       C47557 * C47539 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C26228 * C116 + C26229 * C47745) * C42592 +
                     (C26231 * C116 + C26230 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C22557 * C47745 + C22556 * C116) * C42593 +
                     (C22228 * C47745 + C22229 * C116) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C258 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C22230 * C116 + C22231 * C47745) * C42592 +
                     (C23371 * C116 + C23370 * C47745) * C42593) *
                        C47557 * C47864 -
                    ((C26235 * C47745 + C26234 * C116) * C42593 +
                     (C26233 * C47745 + C26232 * C116) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C47876 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C259 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C26236 * C116 + C26237 * C47745) * C42592 +
                     (C26241 * C116 + C26240 * C47745) * C42593) *
                        C47557 * C47876 -
                    ((C26238 * C47745 + C26239 * C116) * C42593 +
                     (C22236 * C47745 + C22237 * C116) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C47864 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21569 * C117 + C47484 * C124) * C116 +
                      (C21569 * C127 + C47484 * C138) * C47745) *
                         C42591 +
                     (C42815 + C42816) * C42592 + C42835 * C42593) *
                        C47557 * C942 -
                    ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                     (C21721 * C47745 + C21720 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21722 * C116 + C21723 * C47745) * C42591 +
                     (C22227 * C116 + C22226 * C47745) * C42592 +
                     (C22558 * C116 + C22559 * C47745) * C42593) *
                        C47557 * C47837) *
                       C47873 +
                   (((C21726 * C116 + C21727 * C47745) * C42591 +
                     (C43198 + C43199) * C42592 + (C43200 + C43201) * C42593) *
                        C47557 * C943 -
                    (C42836 * C42593 + (C42822 + C42821) * C42592 +
                     ((C21569 * C128 + C47484 * C139) * C47745 +
                      (C21569 * C118 + C47484 * C125) * C116) *
                         C42591) *
                        C47557 * C942 -
                    ((C23368 * C47745 + C23369 * C116) * C42593 +
                     (C22233 * C47745 + C22232 * C116) * C42592 +
                     (C21729 * C47745 + C21728 * C116) * C42591) *
                        C47557 * C47837) *
                       C47860 +
                   ((((C21569 * C119 + C47484 * C126) * C116 +
                      (C21569 * C129 + C47484 * C140) * C47745) *
                         C42591 +
                     (C42827 + C42828) * C42592 + C42837 * C42593) *
                        C47557 * C942 -
                    ((C43205 + C43204) * C42593 + (C43203 + C43202) * C42592 +
                     (C21733 * C47745 + C21732 * C116) * C42591) *
                        C47557 * C943 +
                    ((C21734 * C116 + C21735 * C47745) * C42591 +
                     (C22235 * C116 + C22234 * C47745) * C42592 +
                     ((C21569 * C1158 + C47484 * C1173) * C116 +
                      (C21569 * C1176 + C47484 * C1185) * C47745) *
                         C42593) *
                        C47557 * C47837) *
                       C47831)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21569 * C117 + C47484 * C124) * C116 +
                     (C21569 * C127 + C47484 * C138) * C47745) *
                        C42591 +
                    (C42815 + C42816) * C42592 + C42835 * C42593) *
                       C47557 * C1010 -
                   ((C43197 + C43196) * C42593 + (C43195 + C43194) * C42592 +
                    (C21721 * C47745 + C21720 * C116) * C42591) *
                       C47557 * C1011 +
                   ((C21722 * C116 + C21723 * C47745) * C42591 +
                    (C22227 * C116 + C22226 * C47745) * C42592 +
                    (C22558 * C116 + C22559 * C47745) * C42593) *
                       C47557 * C1012 -
                   ((C22562 * C47745 + C22563 * C116) * C42593 +
                    (C22561 * C47745 + C22560 * C116) * C42592 +
                    (C21724 * C47745 + C21725 * C116) * C42591) *
                       C47557 * C1013 +
                   ((C22422 * C116 + C22423 * C47745) * C42591 +
                    (C22927 * C116 + C22926 * C47745) * C42592 +
                    ((C21569 * C22535 + C47484 * C22536) * C116 +
                     (C21569 * C22537 + C47484 * C22538) * C47745) *
                        C42593) *
                       C47557 * C1014) *
                  C47511) /
                     (p * q * std::sqrt(p + q));
}
