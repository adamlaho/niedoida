/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46772 = ae + be;
    const double C46771 = ae * be;
    const double C46770 = yA - yB;
    const double C46797 = 0 * be;
    const double C46822 = p + q;
    const double C46821 = p * q;
    const double C46830 = std::pow(ae, 2);
    const double C46828 = bs[3];
    const double C46827 = yP - yQ;
    const double C46836 = bs[4];
    const double C46834 = xP - xQ;
    const double C46844 = bs[5];
    const double C46853 = bs[6];
    const double C46864 = bs[7];
    const double C46880 = bs[2];
    const double C46968 = zP - zQ;
    const double C115 = bs[0];
    const double C47574 = xA - xB;
    const double C47595 = ce + de;
    const double C47594 = ce * de;
    const double C47593 = xC - xD;
    const double C47627 = yC - yD;
    const double C47645 = zC - zD;
    const double C47819 = zA - zB;
    const double C46798 = std::pow(C46772, 2);
    const double C47584 = 2 * C46772;
    const double C46800 = 2 * C46771;
    const double C46777 = C46771 * C46770;
    const double C47832 = std::pow(C46770, 2);
    const double C47904 = C46770 * be;
    const double C47902 = C46770 * ae;
    const double C46823 = 2 * C46821;
    const double C46831 = std::pow(C46827, 2);
    const double C46876 = C46827 * ae;
    const double C46846 = std::pow(C46834, 2);
    const double C47077 = std::pow(C46968, 2);
    const double C47575 = std::pow(C47574, 2);
    const double C47870 = C47574 * be;
    const double C47869 = C47574 * ae;
    const double C47599 = 2 * C47595;
    const double C47598 = std::pow(C47595, 2);
    const double C47600 = C47593 * de;
    const double C47597 = C47593 * ce;
    const double C47596 = std::pow(C47593, 2);
    const double C47628 = std::pow(C47627, 2);
    const double C47687 = C47627 * de;
    const double C47685 = C47627 * ce;
    const double C47646 = std::pow(C47645, 2);
    const double C47729 = C47645 * de;
    const double C47727 = C47645 * ce;
    const double C47849 = std::pow(C47819, 2);
    const double C47905 = C47819 * be;
    const double C47903 = C47819 * ae;
    const double C46802 = 2 * C46798;
    const double C47871 = std::pow(C47584, -1);
    const double C47833 = C47832 * C46771;
    const double C46825 = C46823 / C46822;
    const double C129 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C46823 / C46822, 2) -
          (bs[1] * C46823) / C46822) *
         std::pow(ae, 2)) /
        C46798;
    const double C116 = -(C46834 * bs[1] * C46823) / C46822;
    const double C286 = -(C46827 * bs[1] * C46823) / C46822;
    const double C469 = -(C46968 * bs[1] * C46823) / C46822;
    const double C46838 = C46831 * C46836;
    const double C46847 = C46831 * C46844;
    const double C46855 = C46831 * C46853;
    const double C46867 = C46831 * C46864;
    const double C46883 = C46828 * C46876;
    const double C46890 = C46836 * C46876;
    const double C46899 = C46844 * C46876;
    const double C46912 = C46853 * C46876;
    const double C46933 = C46864 * C46876;
    const double C122 = (-(bs[1] * C46876 * C46823) / C46822) / C46772;
    const double C47576 = C47575 * C46771;
    const double C47612 = std::pow(C47599, -1);
    const double C47879 = std::pow(C47599, -2);
    const double C47613 = 2 * C47598;
    const double C47883 = C47598 * C47599;
    const double C47882 = 4 * C47598;
    const double C47872 = std::pow(C47597, 2);
    const double C47601 = C47596 * C47594;
    const double C47629 = C47628 * C47594;
    const double C47884 = std::pow(C47685, 2);
    const double C47647 = C47646 * C47594;
    const double C47886 = std::pow(C47727, 2);
    const double C47850 = C47849 * C46771;
    const double C47834 = C47833 / C46772;
    const double C46829 = -C46825;
    const double C46837 = std::pow(C46825, 4);
    const double C46854 = std::pow(C46825, 6);
    const double C46879 = std::pow(C46825, 2);
    const double C130 = ((xP - xQ) *
                         (bs[2] * std::pow(C46825, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C46825, 3)) *
                         std::pow(ae, 2)) /
                        C46798;
    const double C47577 = C47576 / C46772;
    const double C47917 = 4 * C47883;
    const double C47916 = C47595 * C47882;
    const double C47602 = C47601 / C47595;
    const double C47630 = C47629 / C47595;
    const double C47648 = C47647 / C47595;
    const double C47851 = C47850 / C46772;
    const double C47835 = -C47834;
    const double C46832 = std::pow(C46829, 3);
    const double C46845 = std::pow(C46829, 5);
    const double C46865 = std::pow(C46829, 7);
    const double C46839 = C46838 * C46837;
    const double C46843 = C46836 * C46837;
    const double C46892 = C46837 * C46890;
    const double C46856 = C46855 * C46854;
    const double C46863 = C46853 * C46854;
    const double C46916 = C46854 * C46912;
    const double C46882 = C46880 * C46879;
    const double C123 = (C46834 * C46879 * C46880 * C46876) / C46772;
    const double C296 = (C46827 * C46879 * C46880 * C46876) / C46772 -
                        (ae * bs[1] * C46823) / (C46822 * C46772);
    const double C479 = (C46968 * C46879 * C46880 * C46876) / C46772;
    const double C47578 = -C47577;
    const double C47603 = -C47602;
    const double C47631 = -C47630;
    const double C47649 = -C47648;
    const double C47852 = -C47851;
    const double C47836 = std::exp(C47835);
    const double C46835 = C46828 * C46832;
    const double C46884 = C46832 * C46883;
    const double C131 =
        ((bs[2] * std::pow(C46825, 2) + C46831 * C46828 * C46832) * C46830 +
         (C46828 * C46832 + C46831 * bs[4] * std::pow(C46825, 4)) * C46830 *
             std::pow(xP - xQ, 2)) /
        C46798;
    const double C306 =
        (2 * ae * C46879 * C46880 * C46876 +
         C46827 * (C46880 * C46879 + C46831 * C46828 * C46832) * C46830) /
        C46798;
    const double C46848 = C46847 * C46845;
    const double C46852 = C46844 * C46845;
    const double C46901 = C46845 * C46899;
    const double C46868 = C46867 * C46865;
    const double C46938 = C46865 * C46933;
    const double C46900 = C46843 * C46846;
    const double C46913 = C46834 * C46843;
    const double C47014 = C46843 * C46831;
    const double C47013 = C46827 * C46843;
    const double C47012 = C46843 * ae;
    const double C47550 = C46843 * C47077;
    const double C47564 = C46968 * C46843;
    const double C46894 = C46834 * C46892;
    const double C46997 = C46827 * C46892;
    const double C47008 = ae * C46892;
    const double C46936 = C46863 * C46846;
    const double C47187 = C46834 * C46863;
    const double C47288 = C46863 * C46831;
    const double C47287 = C46827 * C46863;
    const double C47286 = C46863 * ae;
    const double C46919 = C46916 * C46846;
    const double C46932 = C46834 * C46916;
    const double C47150 = C46827 * C46916;
    const double C47280 = ae * C46916;
    const double C47328 = C46916 * C47077;
    const double C47347 = C46968 * C46916;
    const double C46885 = C46882 * ae;
    const double C489 =
        ((zP - zQ) * (C46882 + C46831 * C46828 * C46832) * C46830) / C46798;
    const double C117 = C46882 * C46846 - (bs[1] * C46823) / C46822;
    const double C285 = C46827 * C46834 * C46882;
    const double C287 = C46882 * C46831 - (bs[1] * C46823) / C46822;
    const double C468 = C46968 * C46834 * C46882;
    const double C470 = C46882 * C47077 - (bs[1] * C46823) / C46822;
    const double C905 = C46968 * C46827 * C46882;
    const double C47579 = std::exp(C47578);
    const double C47604 = std::exp(C47603);
    const double C47632 = std::exp(C47631);
    const double C47650 = std::exp(C47649);
    const double C47853 = std::exp(C47852);
    const double C140 = C47836 * C130;
    const double C46778 = C46777 * C47836;
    const double C113 =
        -((C47836 - (C46770 * 2 * C46771 * C46770 * C47836) / C46772) * 2 *
          C46771) /
        C46772;
    const double C114 = -(2 * C46771 * C46770 * C47836) / C46772;
    const double C47938 = C47871 * C47836;
    const double C47937 = C47836 * C47902;
    const double C16085 = -(C47836 * C47904) / C46772;
    const double C46840 = C46835 + C46839;
    const double C46891 = C46834 * C46835;
    const double C46999 = C46827 * C46835;
    const double C46998 = C46835 * ae;
    const double C118 =
        2 * C46834 * C46882 + C46834 * (C46882 + C46835 * C46846);
    const double C284 = C46827 * (C46882 + C46835 * C46846);
    const double C467 = C46968 * (C46882 + C46835 * C46846);
    const double C1126 =
        2 * C46827 * C46882 + C46827 * (C46882 + C46835 * C46831);
    const double C1263 = C46968 * (C46882 + C46835 * C46831);
    const double C1974 =
        2 * C46968 * C46882 + C46968 * (C46882 + C46835 * C47077);
    const double C1975 =
        3 * (C46882 + C46835 * C47077) +
        C46968 * (2 * C46968 * C46835 + C46968 * (C46835 + C46843 * C47077));
    const double C46886 = C46827 * C46884;
    const double C124 = (C46879 * C46880 * C46876 + C46884 * C46846) / C46772;
    const double C125 =
        (2 * C46834 * C46884 + C46834 * (C46884 + C46892 * C46846)) / C46772;
    const double C294 = (C46827 * (C46884 + C46892 * C46846) +
                         (C46882 + C46835 * C46846) * ae) /
                        C46772;
    const double C295 =
        (C46827 * C46834 * C46884 + C46834 * C46882 * ae) / C46772;
    const double C477 = (C46968 * (C46884 + C46892 * C46846)) / C46772;
    const double C478 = (C46968 * C46834 * C46884) / C46772;
    const double C480 = (C46879 * C46880 * C46876 + C46884 * C47077) / C46772;
    const double C1980 =
        (2 * C46968 * C46884 + C46968 * (C46884 + C46892 * C47077)) / C46772;
    const double C143 = C47836 * C131;
    const double C46849 = C46843 + C46848;
    const double C46857 = C46852 + C46856;
    const double C46914 = C46852 * C46846;
    const double C46935 = C46834 * C46852;
    const double C47153 = C46852 * C46831;
    const double C47152 = C46827 * C46852;
    const double C47151 = C46852 * ae;
    const double C47565 = C46852 * C47077;
    const double C46903 = C46901 * C46846;
    const double C46911 = C46834 * C46901;
    const double C47011 = C46827 * C46901;
    const double C47146 = ae * C46901;
    const double C47238 = C46968 * C46901;
    const double C47459 = C46901 * C47077;
    const double C1981 =
        (3 * (C46884 + C46892 * C47077) +
         C46968 * (2 * C46968 * C46892 + C46968 * (C46892 + C46901 * C47077))) /
        C46772;
    const double C46869 = C46863 + C46868;
    const double C46941 = C46938 * C46846;
    const double C47186 = C46834 * C46938;
    const double C47285 = C46827 * C46938;
    const double C46902 = C46835 + C46900;
    const double C46917 = 2 * C46913;
    const double C46988 = C46827 * C46913;
    const double C46987 = C46913 * ae;
    const double C47018 = C46835 + C47014;
    const double C47017 = C47013 * ae;
    const double C47154 = 2 * C47013;
    const double C47551 = C46835 + C47550;
    const double C47566 = 2 * C47564;
    const double C46895 = C46827 * C46894;
    const double C481 = (C46834 * C46884 + C46894 * C47077) / C46772;
    const double C47015 = 2 * C47008;
    const double C46940 = C46852 + C46936;
    const double C47195 = C47187 * C46831;
    const double C47194 = C46827 * C47187;
    const double C47193 = C47187 * ae;
    const double C47296 = C46852 + C47288;
    const double C47295 = C47287 * ae;
    const double C46921 = C46901 + C46919;
    const double C46937 = 2 * C46932;
    const double C47034 = C46827 * C46932;
    const double C47182 = ae * C46932;
    const double C47251 = C46968 * C46932;
    const double C47462 = C46932 * C47077;
    const double C47293 = 2 * C47280;
    const double C47333 = C46901 + C47328;
    const double C47354 = ae * C47347;
    const double C10805 = C47836 * C489;
    const double C47907 = C47871 * C47579;
    const double C47906 = C47579 * C47869;
    const double C4725 = -(C47579 * C47870) / C46772;
    const double C47606 = C47604 * C47597;
    const double C47605 = C47604 / C47599;
    const double C47615 = C47612 * C47604;
    const double C47875 = C47604 * C47600;
    const double C47914 = C47879 * C47604;
    const double C47908 = C47604 * C47872;
    const double C47686 = C47632 / C47599;
    const double C47688 = C47632 * C47685;
    const double C47695 = C47612 * C47632;
    const double C47890 = C47632 * C47687;
    const double C47920 = C47879 * C47632;
    const double C47918 = C47632 * C47884;
    const double C47728 = C47650 / C47599;
    const double C47730 = C47650 * C47727;
    const double C47737 = C47612 * C47650;
    const double C47896 = C47650 * C47729;
    const double C47923 = C47879 * C47650;
    const double C47921 = C47650 * C47886;
    const double C47940 = C47871 * C47853;
    const double C47939 = C47853 * C47903;
    const double C31636 = -(C47853 * C47905) / C46772;
    const double C46799 = 2 * C46778;
    const double C4727 =
        (((-4 * C46778) / C46772 -
          (C46770 * (C47836 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) /
              C46772) *
         ae) /
        C46772;
    const double C4728 =
        ((C47836 - (C46770 * 2 * C46778) / C46772) * ae) / C46772 -
        (0 * be) / (2 * std::pow(C46772, 2));
    const double C4729 =
        (-((C47836 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) / C46772) /
        (2 * C46772);
    const double C4730 = (0 * ae) / C46772 - C46778 / std::pow(C46772, 2);
    const double C16089 =
        -(((-4 * C46778) / C46772 -
           (C46770 * (C47836 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) /
               C46772) *
          be) /
        C46772;
    const double C16090 =
        (-(0 * be) / C46772) / (2 * C46772) -
        ((C47836 - (C46770 * 2 * C46778) / C46772) * be) / C46772;
    const double C16091 =
        (-((C47836 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) / C46772) /
        (2 * C46772);
    const double C16092 =
        (-(2 * C46778) / C46772) / (2 * C46772) - (0 * be) / C46772;
    const double C21830 = ((0 * ae) / C46772 - C46778 / C46798) / (2 * C46772) -
                          (0 * be) / C46772;
    const double C141 = C113 * C117;
    const double C138 = C113 * C116;
    const double C318 = C113 * C285;
    const double C501 = C113 * C468;
    const double C10808 = C113 * C470;
    const double C10804 = C113 * C469;
    const double C11282 = C113 * C905;
    const double C139 = C114 * C123;
    const double C137 = C114 * C122;
    const double C321 = C114 * C296;
    const double C504 = C114 * C479;
    const double C21823 = C47938 / C47584;
    const double C4723 = C47937 / C46772;
    const double C21821 = C47836 / C47584 - (C47937 * C47904) / C46798;
    const double C21822 = C47937 / C46802 - (C47938 * C47904) / C46772;
    const double C16107 = C16085 * C131;
    const double C16098 = C16085 * C130;
    const double C26369 = C16085 * C489;
    const double C46841 = C46840 * C46830;
    const double C46893 = C46891 * ae;
    const double C288 = C46834 * C46882 + C46891 * C46831;
    const double C471 = C46834 * C46882 + C46891 * C47077;
    const double C906 = C46968 * C46827 * C46891;
    const double C1125 =
        2 * C46827 * C46891 + C46827 * (C46891 + C46913 * C46831);
    const double C1262 = C46968 * (C46891 + C46913 * C46831);
    const double C1973 =
        2 * C46968 * C46891 + C46968 * (C46891 + C46913 * C47077);
    const double C47001 = C46999 * ae;
    const double C1260 = C46827 * C46882 + C46999 * C47077;
    const double C2370 =
        2 * C46968 * C46999 + C46968 * (C46999 + C47013 * C47077);
    const double C47000 = C46997 + C46998;
    const double C144 = C113 * C118;
    const double C315 = C113 * C284;
    const double C498 = C113 * C467;
    const double C11672 = C113 * C1263;
    const double C12547 = C113 * C1974;
    const double C12552 = C113 * C1975;
    const double C46887 = C46886 + C46885;
    const double C142 = C114 * C124;
    const double C145 = C114 * C125;
    const double C316 = C114 * C294;
    const double C319 = C114 * C295;
    const double C499 = C114 * C477;
    const double C502 = C114 * C478;
    const double C505 = C114 * C480;
    const double C1993 = C114 * C1980;
    const double C46850 = C46849 * C46830;
    const double C46858 = C46857 * C46830;
    const double C46918 = C46843 + C46914;
    const double C46939 = 2 * C46935;
    const double C47037 = C46935 * C46831;
    const double C47036 = C46827 * C46935;
    const double C47035 = C46935 * ae;
    const double C47553 = C46935 * C47077;
    const double C1976 =
        3 * (C46891 + C46913 * C47077) +
        C46968 * (2 * C46968 * C46913 + C46968 * (C46913 + C46935 * C47077));
    const double C47159 = C46843 + C47153;
    const double C47158 = C47152 * ae;
    const double C47289 = 2 * C47152;
    const double C47561 = C47152 * C47077;
    const double C6961 =
        3 * (C46999 + C47013 * C47077) +
        C46968 * (2 * C46968 * C47013 + C46968 * (C47013 + C47152 * C47077));
    const double C47157 = C47150 + C47151;
    const double C47567 = C46843 + C47565;
    const double C46905 = C46892 + C46903;
    const double C46915 = 2 * C46911;
    const double C46986 = C46827 * C46911;
    const double C47031 = ae * C46911;
    const double C1979 =
        (2 * C46968 * C46894 + C46968 * (C46894 + C46911 * C47077)) / C46772;
    const double C1982 =
        (3 * (C46894 + C46911 * C47077) +
         C46968 * (2 * C46968 * C46911 + C46968 * (C46911 + C46932 * C47077))) /
        C46772;
    const double C47016 = C47011 + C47012;
    const double C47156 = 2 * C47146;
    const double C47243 = ae * C47238;
    const double C47471 = 2 * C47238;
    const double C47460 = C46892 + C47459;
    const double C1994 = C114 * C1981;
    const double C46870 = C46869 * C46830;
    const double C46943 = C46916 + C46941;
    const double C47192 = C46827 * C47186;
    const double C47294 = C47285 + C47286;
    const double C46904 = C46902 * ae;
    const double C119 = 3 * (C46882 + C46835 * C46846) +
                        C46834 * (2 * C46891 + C46834 * C46902);
    const double C289 = C46882 + C46835 * C46846 + C46902 * C46831;
    const double C290 = C46827 * (2 * C46891 + C46834 * C46902);
    const double C472 = C46882 + C46835 * C46846 + C46902 * C47077;
    const double C473 = C46968 * (2 * C46891 + C46834 * C46902);
    const double C907 = C46968 * C46827 * C46902;
    const double C46990 = C46988 * ae;
    const double C1259 = C46827 * C46891 + C46988 * C47077;
    const double C47021 = C47018 * ae;
    const double C1127 = 3 * (C46882 + C46835 * C46831) +
                         C46827 * (2 * C46999 + C46827 * C47018);
    const double C1264 = C46882 + C46835 * C46831 + C47018 * C47077;
    const double C1670 = C46968 * (2 * C46999 + C46827 * C47018);
    const double C12540 =
        4 * (2 * C46968 * C46835 + C46968 * C47551) +
        C46968 * (3 * C47551 + C46968 * (2 * C46968 * C46843 +
                                         C46968 * (C46843 + C46852 * C47077)));
    const double C507 = C114 * C481;
    const double C46942 = C46834 * C46940;
    const double C47060 = C46940 * C46831;
    const double C47059 = C46827 * C46940;
    const double C47058 = C46940 * ae;
    const double C47199 = C46935 + C47195;
    const double C47198 = C47194 * ae;
    const double C47301 = C46827 * C47296;
    const double C47300 = C47296 * ae;
    const double C46923 = C46834 * C46921;
    const double C46931 = 3 * C46921;
    const double C46974 = C46827 * C46921;
    const double C47054 = ae * C46921;
    const double C47190 = 2 * C47182;
    const double C47256 = ae * C47251;
    const double C47463 = C46911 + C47462;
    const double C47338 = ae * C47333;
    const double C47472 = C46968 * C47333;
    const double C47360 = 2 * C47354;
    const double C104 = C47907 / C47584;
    const double C102 = C47579 / C47584 - (C47906 * C47870) / C46798;
    const double C103 = C47906 / C46802 - (C47907 * C47870) / C46772;
    const double C16087 = C47906 / C46772;
    const double C47607 = C47606 * C47600;
    const double C47614 = C47606 / C47613;
    const double C47876 = C47612 * C47606;
    const double C47874 = C47606 / C47595;
    const double C281 = (C47604 * std::pow(C47600, 2)) / C47598 + C47605;
    const double C47616 = C47615 * C47600;
    const double C47880 = C47597 * C47615;
    const double C47878 = 2 * C47615;
    const double C47924 = C47615 / C47882;
    const double C112 = C47615 / C47917;
    const double C2851 = C47615 / C47599;
    const double C47910 = C47875 / C47595;
    const double C282 = (-2 * C47612 * C47875) / C47595;
    const double C47941 = C47908 / C47598;
    const double C1050 = (C47632 * std::pow(C47687, 2)) / C47598 + C47686;
    const double C47689 = C47688 * C47687;
    const double C47694 = C47688 / C47613;
    const double C47888 = C47688 / C47595;
    const double C47885 = C47612 * C47688;
    const double C47696 = C47695 * C47687;
    const double C47894 = C47685 * C47695;
    const double C47893 = 2 * C47695;
    const double C47930 = C47695 / C47882;
    const double C1122 = C47695 / C47917;
    const double C2848 = C47695 / C47599;
    const double C47926 = C47890 / C47595;
    const double C1051 = (-2 * C47612 * C47890) / C47595;
    const double C47946 = C47918 / C47598;
    const double C1792 = (C47650 * std::pow(C47729, 2)) / C47598 + C47728;
    const double C47731 = C47730 * C47729;
    const double C47736 = C47730 / C47613;
    const double C47889 = C47730 / C47595;
    const double C47887 = C47612 * C47730;
    const double C47738 = C47737 * C47729;
    const double C47900 = C47727 * C47737;
    const double C47899 = 2 * C47737;
    const double C47936 = C47737 / C47882;
    const double C1971 = C47737 / C47917;
    const double C3750 = C47737 / C47599;
    const double C47932 = C47896 / C47595;
    const double C1793 = (-2 * C47612 * C47896) / C47595;
    const double C47948 = C47921 / C47598;
    const double C42666 = C47940 / C47584;
    const double C10509 = C47939 / C46772;
    const double C42664 = C47853 / C47584 - (C47939 * C47905) / C46798;
    const double C42665 = C47939 / C46802 - (C47940 * C47905) / C46772;
    const double C46801 = C46770 * C46799;
    const double C4746 = C4727 * C118;
    const double C4743 = C4727 * C117;
    const double C4734 = C4727 * C116;
    const double C4946 = C4727 * C284;
    const double C4933 = C4727 * C285;
    const double C5148 = C4727 * C467;
    const double C5135 = C4727 * C468;
    const double C37425 = C4727 * C470;
    const double C37419 = C4727 * C469;
    const double C37893 = C4727 * C905;
    const double C38283 = C4727 * C1263;
    const double C39157 = C4727 * C1975;
    const double C39151 = C4727 * C1974;
    const double C4747 = C4728 * C125;
    const double C4744 = C4728 * C124;
    const double C4735 = C4728 * C123;
    const double C4732 = C4728 * C122;
    const double C4947 = C4728 * C294;
    const double C4937 = C4728 * C296;
    const double C4934 = C4728 * C295;
    const double C5149 = C4728 * C477;
    const double C5143 = C4728 * C481;
    const double C5140 = C4728 * C480;
    const double C5139 = C4728 * C479;
    const double C5136 = C4728 * C478;
    const double C6972 = C4728 * C1981;
    const double C6971 = C4728 * C1980;
    const double C4740 = C4729 * C284;
    const double C4737 = C4729 * C285;
    const double C37421 = C4729 * C905;
    const double C37895 = C4729 * C1263;
    const double C4741 = C4730 * C294;
    const double C4738 = C4730 * C295;
    const double C4733 = C4730 * C296;
    const double C16108 = C16089 * C118;
    const double C16105 = C16089 * C117;
    const double C16096 = C16089 * C116;
    const double C16308 = C16089 * C284;
    const double C16295 = C16089 * C285;
    const double C16510 = C16089 * C467;
    const double C16497 = C16089 * C468;
    const double C26374 = C16089 * C470;
    const double C26368 = C16089 * C469;
    const double C26842 = C16089 * C905;
    const double C27232 = C16089 * C1263;
    const double C28109 = C16089 * C1975;
    const double C28103 = C16089 * C1974;
    const double C16109 = C16090 * C125;
    const double C16106 = C16090 * C124;
    const double C16097 = C16090 * C123;
    const double C16094 = C16090 * C122;
    const double C16309 = C16090 * C294;
    const double C16299 = C16090 * C296;
    const double C16296 = C16090 * C295;
    const double C16511 = C16090 * C477;
    const double C16505 = C16090 * C481;
    const double C16502 = C16090 * C480;
    const double C16501 = C16090 * C479;
    const double C16498 = C16090 * C478;
    const double C18310 = C16090 * C1981;
    const double C18309 = C16090 * C1980;
    const double C16102 = C16091 * C284;
    const double C16099 = C16091 * C285;
    const double C26370 = C16091 * C905;
    const double C26844 = C16091 * C1263;
    const double C16103 = C16092 * C294;
    const double C16100 = C16092 * C295;
    const double C16095 = C16092 * C296;
    const double C154 = C138 + C139;
    const double C10818 = C10804 + C504;
    const double C4745 = C4723 * C131;
    const double C4736 = C4723 * C130;
    const double C37420 = C4723 * C489;
    const double C132 =
        (2 * C46834 * C46841 +
         C46834 * (C46841 +
                   (C46836 * C46837 + C46831 * bs[5] * std::pow(C46829, 5)) *
                       C46830 * std::pow(C46834, 2))) /
        C46798;
    const double C305 = (2 * ae * C46834 * C46832 * C46828 * C46876 +
                         C46827 * C46834 * C46841) /
                        C46798;
    const double C488 = ((zP - zQ) * C46834 * C46841) / C46798;
    const double C490 = ((C46882 + C46831 * C46828 * C46832) * C46830 +
                         C46841 * std::pow(zP - zQ, 2)) /
                        C46798;
    const double C915 =
        (2 * ae * C46968 * C46884 + C46827 * C46968 * C46841) / C46798;
    const double C46896 = C46895 + C46893;
    const double C323 = C113 * C288;
    const double C4940 = C4727 * C288;
    const double C4930 = C4729 * C288;
    const double C16302 = C16089 * C288;
    const double C16292 = C16091 * C288;
    const double C506 = C113 * C471;
    const double C5142 = C4727 * C471;
    const double C16504 = C16089 * C471;
    const double C922 = C113 * C906;
    const double C5132 = C4729 * C906;
    const double C5668 = C4727 * C906;
    const double C16494 = C16091 * C906;
    const double C17030 = C16089 * C906;
    const double C1404 = C113 * C1125;
    const double C4943 = C4729 * C1125;
    const double C6232 = C4727 * C1125;
    const double C16305 = C16091 * C1125;
    const double C17582 = C16089 * C1125;
    const double C1564 = C113 * C1262;
    const double C5671 = C4729 * C1262;
    const double C6438 = C4727 * C1262;
    const double C17033 = C16091 * C1262;
    const double C17788 = C16089 * C1262;
    const double C2264 = C113 * C1973;
    const double C7314 = C4727 * C1973;
    const double C18652 = C16089 * C1973;
    const double C11669 = C113 * C1260;
    const double C26372 = C16091 * C1260;
    const double C27228 = C16089 * C1260;
    const double C37423 = C4729 * C1260;
    const double C38279 = C4727 * C1260;
    const double C13032 = C113 * C2370;
    const double C28105 = C16091 * C2370;
    const double C28581 = C16089 * C2370;
    const double C39153 = C4729 * C2370;
    const double C39629 = C4727 * C2370;
    const double C47003 = ae * C47000;
    const double C47002 = C46827 * C47000;
    const double C47010 = 2 * C47000;
    const double C47087 = C46968 * C47000;
    const double C46888 = ae * C46887;
    const double C297 =
        (C46879 * C46880 * C46876 + C46827 * C46887 + C46827 * C46882 * ae) /
        C46772;
    const double C910 = (C46968 * C46887) / C46772;
    const double C1269 = (C46887 + C47000 * C47077) / C46772;
    const double C155 = C141 + C142;
    const double C156 = C144 + C145;
    const double C337 = C315 + C316;
    const double C338 = C318 + C319;
    const double C520 = C498 + C499;
    const double C521 = C501 + C502;
    const double C10819 = C10808 + C505;
    const double C12556 = C12547 + C1993;
    const double C46985 = C46834 * C46850;
    const double C47009 = C46827 * C46850;
    const double C47116 = C46968 * C46850;
    const double C133 =
        (3 * (C46841 + C46850 * C46846) +
         C46834 * (2 * C46834 * C46850 +
                   C46834 * (C46850 + (C46844 * C46845 +
                                       C46831 * bs[6] * std::pow(C46825, 6)) *
                                          C46830 * C46846))) /
        C46798;
    const double C304 =
        (2 * ae *
             (C46832 * C46828 * C46876 + C46837 * C46836 * C46876 * C46846) +
         C46827 * (C46841 + C46850 * C46846)) /
        C46798;
    const double C487 = ((zP - zQ) * (C46841 + C46850 * C46846)) / C46798;
    const double C491 =
        (C46834 * C46841 + C46834 * C46850 * std::pow(zP - zQ, 2)) / C46798;
    const double C916 =
        (2 * ae * C46968 * C46894 + C46827 * C46968 * C46834 * C46850) / C46798;
    const double C1278 = (2 * ae * (C46884 + C46892 * C47077) +
                          C46827 * (C46841 + C46850 * C47077)) /
                         C46798;
    const double C1986 =
        (2 * C46968 * C46841 + C46968 * (C46841 + C46850 * C47077)) / C46798;
    const double C46859 = C46858 * C46846;
    const double C46862 = C46834 * C46858;
    const double C47147 = C46827 * C46858;
    const double C47220 = C46858 * C47077;
    const double C47239 = C46968 * C46858;
    const double C46920 = C46834 * C46918;
    const double C46934 = 3 * C46918;
    const double C46976 = C46827 * C46918;
    const double C46975 = C46918 * ae;
    const double C1124 =
        2 * C46827 * C46902 + C46827 * (C46902 + C46918 * C46831);
    const double C1261 = C46968 * (C46902 + C46918 * C46831);
    const double C1972 =
        2 * C46968 * C46902 + C46968 * (C46902 + C46918 * C47077);
    const double C1977 =
        3 * (C46902 + C46918 * C47077) +
        C46968 * (2 * C46968 * C46918 + C46968 * (C46918 + C46940 * C47077));
    const double C47041 = C46913 + C47037;
    const double C47040 = C47036 * ae;
    const double C47188 = 2 * C47036;
    const double C2371 =
        2 * C46968 * C46988 + C46968 * (C46988 + C47036 * C47077);
    const double C6962 =
        3 * (C46988 + C47036 * C47077) +
        C46968 * (2 * C46968 * C47036 + C46968 * (C47036 + C47194 * C47077));
    const double C47039 = C47034 + C47035;
    const double C47554 = C46913 + C47553;
    const double C12550 = C113 * C1976;
    const double C47163 = C46827 * C47159;
    const double C47162 = C47159 * ae;
    const double C47290 = 3 * C47159;
    const double C7453 =
        2 * C46968 * C47018 + C46968 * (C47018 + C47159 * C47077);
    const double C23398 =
        3 * (C47018 + C47159 * C47077) +
        C46968 * (2 * C46968 * C47159 + C46968 * (C47159 + C47296 * C47077));
    const double C47562 = C47013 + C47561;
    const double C28107 = C16091 * C6961;
    const double C39155 = C4729 * C6961;
    const double C44529 = C113 * C6961;
    const double C47164 = ae * C47157;
    const double C47161 = C46827 * C47157;
    const double C47222 = C47157 * C47077;
    const double C47242 = C46968 * C47157;
    const double C47284 = 2 * C47157;
    const double C47568 = C46968 * C47567;
    const double C46906 = C46827 * C46905;
    const double C126 = (3 * (C46884 + C46892 * C46846) +
                         C46834 * (2 * C46894 + C46834 * C46905)) /
                        C46772;
    const double C300 = (C46827 * (2 * C46894 + C46834 * C46905) +
                         (2 * C46891 + C46834 * C46902) * ae) /
                        C46772;
    const double C482 = (C46884 + C46892 * C46846 + C46905 * C47077) / C46772;
    const double C483 = (C46968 * (2 * C46894 + C46834 * C46905)) / C46772;
    const double C1978 =
        (2 * C46968 * C46905 + C46968 * (C46905 + C46921 * C47077)) / C46772;
    const double C46989 = C46986 + C46987;
    const double C47038 = 2 * C47031;
    const double C1992 = C114 * C1979;
    const double C6969 = C4728 * C1979;
    const double C18307 = C16090 * C1979;
    const double C1995 = C114 * C1982;
    const double C6974 = C4728 * C1982;
    const double C18312 = C16090 * C1982;
    const double C47022 = ae * C47016;
    const double C47020 = C46827 * C47016;
    const double C47090 = C47016 * C47077;
    const double C47118 = C46968 * C47016;
    const double C47149 = 2 * C47016;
    const double C47248 = 2 * C47243;
    const double C12542 =
        (4 * (2 * C46968 * C46892 + C46968 * C47460) +
         C46968 * (3 * C47460 + C46968 * (2 * C47238 + C46968 * C47333))) /
        C46772;
    const double C12558 = C12552 + C1994;
    const double C46871 = C46870 * C46846;
    const double C47183 = C46834 * C46870;
    const double C47281 = C46827 * C46870;
    const double C47329 = C46870 * C47077;
    const double C47348 = C46968 * C46870;
    const double C46945 = C46834 * C46943;
    const double C47057 = C46827 * C46943;
    const double C1983 =
        (3 * (C46905 + C46921 * C47077) +
         C46968 * (2 * C46968 * C46921 + C46968 * (C46921 + C46943 * C47077))) /
        C46772;
    const double C47197 = C47192 + C47193;
    const double C47302 = ae * C47294;
    const double C47299 = C46827 * C47294;
    const double C47332 = C47294 * C47077;
    const double C47352 = C46968 * C47294;
    const double C147 = C113 * C119;
    const double C4755 = C4727 * C119;
    const double C16117 = C16089 * C119;
    const double C326 = C113 * C289;
    const double C4955 = C4727 * C289;
    const double C4949 = C4729 * C289;
    const double C16317 = C16089 * C289;
    const double C16311 = C16091 * C289;
    const double C329 = C113 * C290;
    const double C4749 = C4729 * C290;
    const double C5320 = C4727 * C290;
    const double C16111 = C16091 * C290;
    const double C16682 = C16089 * C290;
    const double C509 = C113 * C472;
    const double C5157 = C4727 * C472;
    const double C16519 = C16089 * C472;
    const double C512 = C113 * C473;
    const double C5462 = C4727 * C473;
    const double C16824 = C16089 * C473;
    const double C925 = C113 * C907;
    const double C5151 = C4729 * C907;
    const double C5677 = C4727 * C907;
    const double C16513 = C16091 * C907;
    const double C17039 = C16089 * C907;
    const double C2148 = C113 * C1259;
    const double C5145 = C4729 * C1259;
    const double C7172 = C4727 * C1259;
    const double C16507 = C16091 * C1259;
    const double C18510 = C16089 * C1259;
    const double C11677 = C113 * C1264;
    const double C27238 = C16089 * C1264;
    const double C27230 = C16091 * C1264;
    const double C38289 = C4727 * C1264;
    const double C38281 = C4729 * C1264;
    const double C12158 = C113 * C1670;
    const double C27234 = C16091 * C1670;
    const double C27714 = C16089 * C1670;
    const double C38285 = C4729 * C1670;
    const double C38765 = C4727 * C1670;
    const double C44178 = C113 * C12540;
    const double C46944 = C46939 + C46942;
    const double C47064 = C46918 + C47060;
    const double C47063 = C47059 * ae;
    const double C47203 = C46827 * C47199;
    const double C47202 = C47199 * ae;
    const double C47305 = C47289 + C47301;
    const double C46925 = C46915 + C46923;
    const double C47061 = 2 * C47054;
    const double C47261 = 2 * C47256;
    const double C12543 =
        (4 * (2 * C46968 * C46911 + C46968 * C47463) +
         C46968 *
             (3 * C47463 +
              C46968 * (2 * C47251 + C46968 * (C46932 + C47186 * C47077)))) /
        C46772;
    const double C47343 = 2 * C47338;
    const double C47473 = C47471 + C47472;
    const double C47608 = C47607 / C47598;
    const double C47911 = 2 * C47876;
    const double C47617 = C47616 / C47595;
    const double C47915 = C47880 / C47613;
    const double C47942 = C47874 - C47910;
    const double C2588 = -C47910;
    const double C47956 = C47941 + C47605;
    const double C47690 = C47689 / C47598;
    const double C47919 = 2 * C47885;
    const double C47697 = C47696 / C47595;
    const double C47929 = C47894 / C47613;
    const double C47950 = C47888 - C47926;
    const double C2480 = -C47926;
    const double C47959 = C47946 + C47686;
    const double C47732 = C47731 / C47598;
    const double C47922 = 2 * C47887;
    const double C47739 = C47738 / C47595;
    const double C47935 = C47900 / C47613;
    const double C47953 = C47889 - C47932;
    const double C3242 = -C47932;
    const double C47960 = C47948 + C47728;
    const double C46803 = C46801 / C46772;
    const double C4764 = C4746 + C4747;
    const double C4763 = C4743 + C4744;
    const double C4760 = C4734 + C4735;
    const double C4966 = C4946 + C4947;
    const double C4963 = C4933 + C4934;
    const double C5168 = C5148 + C5149;
    const double C37430 = C37425 + C5140;
    const double C37427 = C37419 + C5139;
    const double C5165 = C5135 + C5136;
    const double C39164 = C39157 + C6972;
    const double C39161 = C39151 + C6971;
    const double C4762 = C4740 + C4741;
    const double C4761 = C4737 + C4738;
    const double C16126 = C16108 + C16109;
    const double C16125 = C16105 + C16106;
    const double C16122 = C16096 + C16097;
    const double C16328 = C16308 + C16309;
    const double C16325 = C16295 + C16296;
    const double C16530 = C16510 + C16511;
    const double C26379 = C26374 + C16502;
    const double C26376 = C26368 + C16501;
    const double C16527 = C16497 + C16498;
    const double C28116 = C28109 + C18310;
    const double C28113 = C28103 + C18309;
    const double C16124 = C16102 + C16103;
    const double C16123 = C16099 + C16100;
    const double C159 = C154 + C139;
    const double C10820 = C10818 + C504;
    const double C146 = C47836 * C132;
    const double C4748 = C4723 * C132;
    const double C16110 = C16085 * C132;
    const double C320 = C47836 * C305;
    const double C4739 = C47938 * C305;
    const double C4935 = C4723 * C305;
    const double C16101 = C47938 * C305;
    const double C16297 = C16085 * C305;
    const double C503 = C47836 * C488;
    const double C5137 = C4723 * C488;
    const double C16499 = C16085 * C488;
    const double C10809 = C47836 * C490;
    const double C26375 = C16085 * C490;
    const double C37426 = C4723 * C490;
    const double C11283 = C47836 * C915;
    const double C26371 = C47938 * C915;
    const double C26843 = C16085 * C915;
    const double C37422 = C47938 * C915;
    const double C37894 = C4723 * C915;
    const double C46897 = ae * C46896;
    const double C298 =
        (C46834 * C46884 + C46827 * C46896 + C46827 * C46891 * ae) / C46772;
    const double C911 = (C46968 * C46896) / C46772;
    const double C522 = C506 + C507;
    const double C5166 = C5142 + C5143;
    const double C16528 = C16504 + C16505;
    const double C47004 = C46884 + C47002;
    const double C47088 = ae * C47087;
    const double C307 =
        ((C46882 + C46831 * C46828 * C46832) * C46830 + C46888 + C46888 +
         C46827 * (2 * ae * C46884 + C46827 * C46841)) /
        C46798;
    const double C322 = C114 * C297;
    const double C4938 = C4728 * C297;
    const double C4936 = C4730 * C297;
    const double C16300 = C16090 * C297;
    const double C16298 = C16092 * C297;
    const double C21834 = C21830 * C297;
    const double C921 = C114 * C910;
    const double C5138 = C4730 * C910;
    const double C5666 = C4728 * C910;
    const double C16500 = C16092 * C910;
    const double C17028 = C16090 * C910;
    const double C1288 = C114 * C1269;
    const double C5141 = C4730 * C1269;
    const double C6091 = C4728 * C1269;
    const double C16503 = C16092 * C1269;
    const double C17441 = C16090 * C1269;
    const double C160 = C155 + C142;
    const double C161 = C156 + C145;
    const double C343 = C337 + C316;
    const double C344 = C338 + C319;
    const double C526 = C520 + C499;
    const double C527 = C521 + C502;
    const double C10821 = C10819 + C505;
    const double C12559 = C12556 + C1993;
    const double C47019 = C47015 + C47009;
    const double C1987 =
        (3 * (C46841 + C46850 * C47077) +
         C46968 * (2 * C47116 + C46968 * (C46850 + C46858 * C47077))) /
        C46798;
    const double C2376 =
        (2 * ae * (2 * C46968 * C46892 + C46968 * (C46892 + C46901 * C47077)) +
         C46827 * (2 * C47116 + C46968 * (C46850 + C46858 * C47077))) /
        C46798;
    const double C149 = C47836 * C133;
    const double C4757 = C4723 * C133;
    const double C16119 = C16085 * C133;
    const double C317 = C47836 * C304;
    const double C4742 = C47938 * C304;
    const double C4948 = C4723 * C304;
    const double C16104 = C47938 * C304;
    const double C16310 = C16085 * C304;
    const double C500 = C47836 * C487;
    const double C5150 = C4723 * C487;
    const double C16512 = C16085 * C487;
    const double C508 = C47836 * C491;
    const double C5144 = C4723 * C491;
    const double C16506 = C16085 * C491;
    const double C924 = C47836 * C916;
    const double C5134 = C47938 * C916;
    const double C5670 = C4723 * C916;
    const double C16496 = C47938 * C916;
    const double C17032 = C16085 * C916;
    const double C11670 = C47836 * C1278;
    const double C26373 = C47938 * C1278;
    const double C27229 = C16085 * C1278;
    const double C37424 = C47938 * C1278;
    const double C38280 = C4723 * C1278;
    const double C12548 = C47836 * C1986;
    const double C28104 = C16085 * C1986;
    const double C39152 = C4723 * C1986;
    const double C46860 = C46850 + C46859;
    const double C46866 = 2 * C46862;
    const double C47032 = C46827 * C46862;
    const double C47122 = C46968 * C46862;
    const double C1277 = (2 * ae * (C46894 + C46911 * C47077) +
                          C46827 * (C46985 + C46862 * C47077)) /
                         C46798;
    const double C1985 =
        (2 * C46968 * C46985 + C46968 * (C46985 + C46862 * C47077)) / C46798;
    const double C47160 = C47156 + C47147;
    const double C47223 = C46850 + C47220;
    const double C47244 = C46827 * C47239;
    const double C47373 = 2 * C47239;
    const double C46922 = C46917 + C46920;
    const double C46978 = C46976 * ae;
    const double C1258 = C46827 * C46902 + C46976 * C47077;
    const double C2372 =
        2 * C46968 * C46976 + C46968 * (C46976 + C47059 * C47077);
    const double C46977 = C46974 + C46975;
    const double C1402 = C113 * C1124;
    const double C4952 = C4729 * C1124;
    const double C16314 = C16091 * C1124;
    const double C1562 = C113 * C1261;
    const double C5674 = C4729 * C1261;
    const double C17036 = C16091 * C1261;
    const double C2262 = C113 * C1972;
    const double C47044 = C47041 * ae;
    const double C1128 = 3 * (C46891 + C46913 * C46831) +
                         C46827 * (2 * C46988 + C46827 * C47041);
    const double C1265 = C46891 + C46913 * C46831 + C47041 * C47077;
    const double C1671 = C46968 * (2 * C46988 + C46827 * C47041);
    const double C7454 =
        2 * C46968 * C47041 + C46968 * (C47041 + C47199 * C47077);
    const double C7312 = C4729 * C2371;
    const double C12762 = C113 * C2371;
    const double C18650 = C16091 * C2371;
    const double C47045 = ae * C47039;
    const double C47043 = C46827 * C47039;
    const double C47094 = C47039 * C47077;
    const double C47124 = C46968 * C47039;
    const double C47185 = 2 * C47039;
    const double C12541 =
        4 * (2 * C46968 * C46913 + C46968 * C47554) +
        C46968 * (3 * C47554 + C46968 * (2 * C46968 * C46935 +
                                         C46968 * (C46935 + C47187 * C47077)));
    const double C47167 = C47154 + C47163;
    const double C28579 = C16091 * C7453;
    const double C39627 = C4729 * C7453;
    const double C43533 = C113 * C7453;
    const double C28099 =
        4 * (2 * C46968 * C47013 + C46968 * C47562) +
        C46968 * (3 * C47562 + C46968 * (2 * C46968 * C47152 +
                                         C46968 * (C47152 + C47287 * C47077)));
    const double C47279 = C46858 + C47164;
    const double C47166 = C46901 + C47161;
    const double C47225 = C47016 + C47222;
    const double C47247 = ae * C47242;
    const double C47366 = 2 * C47242;
    const double C47569 = C47566 + C47568;
    const double C46907 = C46906 + C46904;
    const double C148 = C114 * C126;
    const double C4756 = C4728 * C126;
    const double C16118 = C16090 * C126;
    const double C330 = C114 * C300;
    const double C4750 = C4730 * C300;
    const double C4959 = C4728 * C300;
    const double C16112 = C16092 * C300;
    const double C16321 = C16090 * C300;
    const double C510 = C114 * C482;
    const double C5158 = C4728 * C482;
    const double C16520 = C16090 * C482;
    const double C513 = C114 * C483;
    const double C5161 = C4728 * C483;
    const double C16523 = C16090 * C483;
    const double C1991 = C114 * C1978;
    const double C7316 = C4728 * C1978;
    const double C18654 = C16090 * C1978;
    const double C46992 = ae * C46989;
    const double C46991 = C46827 * C46989;
    const double C47033 = 2 * C46989;
    const double C47084 = C46968 * C46989;
    const double C1268 = (C46896 + C46989 * C47077) / C46772;
    const double C2268 = C2264 + C1992;
    const double C7319 = C7314 + C6969;
    const double C18657 = C18652 + C18307;
    const double C12557 = C12550 + C1995;
    const double C47145 = C46850 + C47022;
    const double C47023 = C46892 + C47020;
    const double C47091 = C47000 + C47090;
    const double C47120 = ae * C47118;
    const double C47266 = 2 * C47118;
    const double C12554 = C114 * C12542;
    const double C28111 = C16090 * C12542;
    const double C39159 = C4728 * C12542;
    const double C12561 = C12558 + C1994;
    const double C46872 = C46858 + C46871;
    const double C47191 = C46827 * C47183;
    const double C47229 = C47183 * C47077;
    const double C47252 = C46968 * C47183;
    const double C47298 = C47293 + C47281;
    const double C47334 = C46858 + C47329;
    const double C47355 = C46827 * C47348;
    const double C46947 = C46937 + C46945;
    const double C47062 = C47057 + C47058;
    const double C1996 = C114 * C1983;
    const double C47204 = ae * C47197;
    const double C47201 = C46827 * C47197;
    const double C47231 = C47197 * C47077;
    const double C47255 = C46968 * C47197;
    const double C47304 = C46916 + C47299;
    const double C47337 = C47157 + C47332;
    const double C47359 = ae * C47352;
    const double C46946 = C46834 * C46944;
    const double C47104 = C46827 * C46944;
    const double C47103 = C46944 * ae;
    const double C47067 = C47064 * ae;
    const double C1129 = 3 * (C46902 + C46918 * C46831) +
                         C46827 * (2 * C46976 + C46827 * C47064);
    const double C1266 = C46902 + C46918 * C46831 + C47064 * C47077;
    const double C1672 = C46968 * (2 * C46976 + C46827 * C47064);
    const double C47207 = C47188 + C47203;
    const double C47309 = C46827 * C47305;
    const double C47308 = C47305 * ae;
    const double C46926 = C46827 * C46925;
    const double C127 = (4 * (2 * C46894 + C46834 * C46905) +
                         C46834 * (3 * C46905 + C46834 * C46925)) /
                        C46772;
    const double C484 =
        (2 * C46894 + C46834 * C46905 + C46925 * C47077) / C46772;
    const double C485 = (C46968 * (3 * C46905 + C46834 * C46925)) / C46772;
    const double C12555 = C114 * C12543;
    const double C44174 =
        (5 * (3 * C47460 + C46968 * C47473) +
         C46968 * (4 * C47473 +
                   C46968 * (3 * C47333 +
                             C46968 * (2 * C47347 +
                                       C46968 * (C46916 + C46938 * C47077))))) /
        C46772;
    const double C47609 = C47605 - C47608;
    const double C47943 = C47911 / C47595;
    const double C47618 = C47614 - C47617;
    const double C47957 = C47942 / C47599;
    const double C47691 = C47686 - C47690;
    const double C47947 = C47919 / C47595;
    const double C47698 = C47694 - C47697;
    const double C47961 = C47950 / C47599;
    const double C47733 = C47728 - C47732;
    const double C47949 = C47922 / C47595;
    const double C47740 = C47736 - C47739;
    const double C47963 = C47953 / C47599;
    const double C46804 = C47836 - C46803;
    const double C4772 = C4764 + C4747;
    const double C4771 = C4763 + C4744;
    const double C4768 = C4760 + C4735;
    const double C4974 = C4966 + C4947;
    const double C4971 = C4963 + C4934;
    const double C5176 = C5168 + C5149;
    const double C37434 = C37430 + C5140;
    const double C37431 = C37427 + C5139;
    const double C5173 = C5165 + C5136;
    const double C39168 = C39164 + C6972;
    const double C39165 = C39161 + C6971;
    const double C4770 = C4762 + C4741;
    const double C4769 = C4761 + C4738;
    const double C16134 = C16126 + C16109;
    const double C16133 = C16125 + C16106;
    const double C16130 = C16122 + C16097;
    const double C16336 = C16328 + C16309;
    const double C16333 = C16325 + C16296;
    const double C16538 = C16530 + C16511;
    const double C26383 = C26379 + C16502;
    const double C26380 = C26376 + C16501;
    const double C16535 = C16527 + C16498;
    const double C28120 = C28116 + C18310;
    const double C28117 = C28113 + C18309;
    const double C16132 = C16124 + C16103;
    const double C16131 = C16123 + C16100;
    const double C164 = C159 + C140;
    const double C10822 = C10820 + C10805;
    const double C308 =
        (C46834 * C46841 + C46897 + C46897 +
         C46827 * (2 * ae * C46894 + C46827 * C46834 * C46850)) /
        C46798;
    const double C324 = C114 * C298;
    const double C4941 = C4728 * C298;
    const double C4931 = C4730 * C298;
    const double C16303 = C16090 * C298;
    const double C16293 = C16092 * C298;
    const double C21835 = C21830 * C298;
    const double C923 = C114 * C911;
    const double C5133 = C4730 * C911;
    const double C5669 = C4728 * C911;
    const double C16495 = C16092 * C911;
    const double C17031 = C16090 * C911;
    const double C528 = C522 + C507;
    const double C5174 = C5166 + C5143;
    const double C16536 = C16528 + C16505;
    const double C47005 = C47004 + C47001;
    const double C1281 =
        (C46968 * C46841 + C47088 + C47088 +
         C46827 * (2 * ae * C46968 * C46892 + C46827 * C46968 * C46850)) /
        C46798;
    const double C11289 = C11282 + C921;
    const double C37428 = C37421 + C5138;
    const double C37897 = C37893 + C5666;
    const double C26377 = C26370 + C16500;
    const double C26846 = C26842 + C17028;
    const double C11681 = C11669 + C1288;
    const double C37429 = C37423 + C5141;
    const double C38293 = C38279 + C6091;
    const double C26378 = C26372 + C16503;
    const double C27242 = C27228 + C17441;
    const double C165 = C160 + C143;
    const double C166 = C161 + C146;
    const double C350 = C344 + C320;
    const double C533 = C527 + C503;
    const double C10823 = C10821 + C10809;
    const double C12553 = C47836 * C1987;
    const double C28110 = C16085 * C1987;
    const double C39158 = C4723 * C1987;
    const double C13033 = C47836 * C2376;
    const double C28106 = C47938 * C2376;
    const double C28582 = C16085 * C2376;
    const double C39154 = C47938 * C2376;
    const double C39630 = C4723 * C2376;
    const double C349 = C343 + C317;
    const double C532 = C526 + C500;
    const double C12562 = C12559 + C12548;
    const double C134 =
        (4 * (2 * C46834 * C46850 + C46834 * C46860) +
         C46834 * (3 * C46860 +
                   C46834 * (2 * C46834 * C46858 +
                             C46834 * (C46858 +
                                       (C46853 * C46854 +
                                        C46831 * bs[7] * std::pow(C46829, 7)) *
                                           C46830 * C46846)))) /
        C46798;
    const double C310 = (2 * ae * (2 * C46894 + C46834 * C46905) +
                         C46827 * (2 * C46834 * C46850 + C46834 * C46860)) /
                        C46798;
    const double C492 =
        (C46841 + C46850 * C46846 + C46860 * std::pow(zP - zQ, 2)) / C46798;
    const double C493 =
        ((zP - zQ) * (2 * C46834 * C46850 + C46834 * C46860)) / C46798;
    const double C917 =
        (2 * ae * C46968 * C46905 + C46827 * C46968 * C46860) / C46798;
    const double C47042 = C47038 + C47032;
    const double C1988 =
        (3 * (C46985 + C46862 * C47077) +
         C46968 * (2 * C47122 + C46968 * (C46862 + C46834 * C46870 * C47077))) /
        C46798;
    const double C2377 =
        (2 * ae * (2 * C46968 * C46911 + C46968 * (C46911 + C46932 * C47077)) +
         C46827 * (2 * C47122 + C46968 * (C46862 + C46834 * C46870 * C47077))) /
        C46798;
    const double C2149 = C47836 * C1277;
    const double C5147 = C47938 * C1277;
    const double C7173 = C4723 * C1277;
    const double C16509 = C47938 * C1277;
    const double C18511 = C16085 * C1277;
    const double C2265 = C47836 * C1985;
    const double C7315 = C4723 * C1985;
    const double C18653 = C16085 * C1985;
    const double C47165 = C46827 * C47160;
    const double C47278 = 2 * C47160;
    const double C6965 =
        (2 * ae *
             (3 * (C46892 + C46901 * C47077) +
              C46968 * (2 * C47238 + C46968 * (C46901 + C46916 * C47077))) +
         C46827 *
             (3 * C47223 +
              C46968 * (2 * C47239 + C46968 * (C46858 + C46870 * C47077)))) /
        C46798;
    const double C12544 =
        (4 * (2 * C47116 + C46968 * C47223) +
         C46968 *
             (3 * C47223 +
              C46968 * (2 * C47239 + C46968 * (C46858 + C46870 * C47077)))) /
        C46798;
    const double C47249 = C47248 + C47244;
    const double C46924 = C46922 * ae;
    const double C302 = (C46827 * (3 * C46905 + C46834 * C46925) +
                         (3 * C46902 + C46834 * C46922) * ae) /
                        C46772;
    const double C120 = 4 * (2 * C46891 + C46834 * C46902) +
                        C46834 * (3 * C46902 + C46834 * C46922);
    const double C291 = 2 * C46891 + C46834 * C46902 + C46922 * C46831;
    const double C292 = C46827 * (3 * C46902 + C46834 * C46922);
    const double C474 = 2 * C46891 + C46834 * C46902 + C46922 * C47077;
    const double C475 = C46968 * (3 * C46902 + C46834 * C46922);
    const double C908 = C46968 * C46827 * C46922;
    const double C1398 =
        2 * C46827 * C46922 + C46827 * (C46922 + C46944 * C46831);
    const double C1558 = C46968 * (C46922 + C46944 * C46831);
    const double C2258 =
        2 * C46968 * C46922 + C46968 * (C46922 + C46944 * C47077);
    const double C2146 = C113 * C1258;
    const double C5154 = C4729 * C1258;
    const double C16516 = C16091 * C1258;
    const double C46980 = ae * C46977;
    const double C46979 = C46827 * C46977;
    const double C47056 = 2 * C46977;
    const double C47081 = C46968 * C46977;
    const double C6230 = C4729 * C1128;
    const double C17580 = C16091 * C1128;
    const double C7170 = C4729 * C1265;
    const double C11675 = C113 * C1265;
    const double C18508 = C16091 * C1265;
    const double C6436 = C4729 * C1671;
    const double C11827 = C113 * C1671;
    const double C17786 = C16091 * C1671;
    const double C47181 = C46862 + C47045;
    const double C47046 = C46911 + C47043;
    const double C47095 = C46989 + C47094;
    const double C47126 = ae * C47124;
    const double C47271 = 2 * C47124;
    const double C47170 = C47167 * ae;
    const double C5921 = 4 * (2 * C46999 + C46827 * C47018) +
                         C46827 * (3 * C47018 + C46827 * C47167);
    const double C6081 = 2 * C46999 + C46827 * C47018 + C47167 * C47077;
    const double C6577 = C46968 * (3 * C47018 + C46827 * C47167);
    const double C23755 =
        2 * C46968 * C47167 + C46968 * (C47167 + C47305 * C47077);
    const double C47292 = C47279 + C47164;
    const double C47169 = C47166 + C47158;
    const double C47227 = ae * C47225;
    const double C47267 = C46968 * C47225;
    const double C47365 = 3 * C47225;
    const double C47346 = C47239 + C47247;
    const double C44173 =
        5 * (3 * C47551 + C46968 * C47569) +
        C46968 * (4 * C47569 +
                  C46968 * (3 * C47567 +
                            C46968 * (2 * C46968 * C46852 +
                                      C46968 * (C46852 + C46863 * C47077))));
    const double C46908 = ae * C46907;
    const double C299 =
        (C46884 + C46892 * C46846 + C46827 * C46907 + C46827 * C46902 * ae) /
        C46772;
    const double C912 = (C46968 * C46907) / C46772;
    const double C1267 = (C46907 + C46977 * C47077) / C46772;
    const double C157 = C147 + C148;
    const double C4767 = C4755 + C4756;
    const double C16129 = C16117 + C16118;
    const double C341 = C329 + C330;
    const double C4765 = C4749 + C4750;
    const double C5325 = C5320 + C4959;
    const double C16127 = C16111 + C16112;
    const double C16687 = C16682 + C16321;
    const double C523 = C509 + C510;
    const double C5171 = C5157 + C5158;
    const double C16533 = C16519 + C16520;
    const double C524 = C512 + C513;
    const double C5467 = C5462 + C5161;
    const double C16829 = C16824 + C16523;
    const double C2267 = C2262 + C1991;
    const double C46993 = C46894 + C46991;
    const double C47085 = ae * C47084;
    const double C1287 = C114 * C1268;
    const double C5146 = C4730 * C1268;
    const double C6089 = C4728 * C1268;
    const double C16508 = C16092 * C1268;
    const double C17439 = C16090 * C1268;
    const double C2270 = C2268 + C1992;
    const double C7321 = C7319 + C6969;
    const double C18659 = C18657 + C18307;
    const double C12560 = C12557 + C1995;
    const double C47155 = C47145 + C47022;
    const double C47024 = C47023 + C47017;
    const double C47092 = ae * C47091;
    const double C2373 = (2 * C47087 + C46968 * C47091) / C46772;
    const double C44181 = C44178 + C12554;
    const double C46873 = C46834 * C46872;
    const double C47055 = C46827 * C46872;
    const double C47128 = C46968 * C46872;
    const double C1276 = (2 * ae * (C46905 + C46921 * C47077) +
                          C46827 * (C46860 + C46872 * C47077)) /
                         C46798;
    const double C1984 =
        (2 * C46968 * C46860 + C46968 * (C46860 + C46872 * C47077)) / C46798;
    const double C47196 = C47190 + C47191;
    const double C47232 = C46862 + C47229;
    const double C47257 = C46827 * C47252;
    const double C47303 = C46827 * C47298;
    const double C47339 = C46827 * C47334;
    const double C47374 = C46968 * C47334;
    const double C47361 = C47360 + C47355;
    const double C46949 = C46834 * C46947;
    const double C47102 = C46827 * C46947;
    const double C2259 =
        (2 * C46968 * C46925 + C46968 * (C46925 + C46947 * C47077)) / C46772;
    const double C47068 = ae * C47062;
    const double C47066 = C46827 * C47062;
    const double C47098 = C47062 * C47077;
    const double C47130 = C46968 * C47062;
    const double C47206 = C46932 + C47201;
    const double C47234 = C47039 + C47231;
    const double C47260 = ae * C47255;
    const double C47307 = C47304 + C47295;
    const double C47342 = ae * C47337;
    const double C47367 = C46968 * C47337;
    const double C46948 = C46934 + C46946;
    const double C47106 = C47104 * ae;
    const double C2142 = C46827 * C46922 + C47104 * C47077;
    const double C47209 = C47207 * ae;
    const double C5922 = 4 * (2 * C46988 + C46827 * C47041) +
                         C46827 * (3 * C47041 + C46827 * C47207);
    const double C6082 = 2 * C46988 + C46827 * C47041 + C47207 * C47077;
    const double C6578 = C46968 * (3 * C47041 + C46827 * C47207);
    const double C47312 = C47290 + C47309;
    const double C151 = C114 * C127;
    const double C4758 = C4728 * C127;
    const double C16120 = C16090 * C127;
    const double C516 = C114 * C484;
    const double C5162 = C4728 * C484;
    const double C16524 = C16090 * C484;
    const double C518 = C114 * C485;
    const double C5464 = C4728 * C485;
    const double C16826 = C16090 * C485;
    const double C44180 = C114 * C44174;
    const double C47873 = C47609 * C47597;
    const double C47913 = C47878 + C47609;
    const double C47881 = C47618 / C47599;
    const double C47877 = C47618 * C47597;
    const double C637 = C47957 - (C47609 * C47600) / C47595;
    const double C47891 = C47691 * C47685;
    const double C47928 = C47893 + C47691;
    const double C47895 = C47698 / C47599;
    const double C47892 = C47698 * C47685;
    const double C1392 = C47961 - (C47691 * C47687) / C47595;
    const double C47897 = C47733 * C47727;
    const double C47934 = C47899 + C47733;
    const double C47901 = C47740 / C47599;
    const double C47898 = C47740 * C47727;
    const double C2254 = C47963 - (C47733 * C47729) / C47595;
    const double C46805 = C46804 * C46800;
    const double C21826 =
        (((0 - (C46770 * C46797) / C46772) * ae) / C46772 - (0 * be) / C46802) /
            (2 * C46772) -
        ((C46770 * ((C46804 * ae) / C46772 - C46797 / C46802) + C4723) * be) /
            C46772 +
        (0 * ae) / C46772 - C46778 / C46798;
    const double C21828 =
        ((C46804 * ae) / C46772 - C46797 / C46802) / (2 * C46772) -
        ((C46770 * ((0 * ae) / C46772 - C46778 / C46798) + C47938) * be) /
            C46772;
    const double C4780 = C4772 + C4748;
    const double C4779 = C4771 + C4745;
    const double C4776 = C4768 + C4736;
    const double C4982 = C4974 + C4948;
    const double C4979 = C4971 + C4935;
    const double C5184 = C5176 + C5150;
    const double C37438 = C37434 + C37426;
    const double C37435 = C37431 + C37420;
    const double C5181 = C5173 + C5137;
    const double C39169 = C39165 + C39152;
    const double C4778 = C4770 + C4742;
    const double C4777 = C4769 + C4739;
    const double C16142 = C16134 + C16110;
    const double C16141 = C16133 + C16107;
    const double C16138 = C16130 + C16098;
    const double C16344 = C16336 + C16310;
    const double C16341 = C16333 + C16297;
    const double C16546 = C16538 + C16512;
    const double C26387 = C26383 + C26375;
    const double C26384 = C26380 + C26369;
    const double C16543 = C16535 + C16499;
    const double C28121 = C28117 + C28104;
    const double C16140 = C16132 + C16104;
    const double C16139 = C16131 + C16101;
    const double C10824 = C10822 * C4725;
    const double C31931 = C10822 * C16087;
    const double C42888 = C10822 * C47579;
    const double C325 = C47836 * C308;
    const double C4942 = C4723 * C308;
    const double C4932 = C47938 * C308;
    const double C16304 = C16085 * C308;
    const double C16294 = C47938 * C308;
    const double C339 = C323 + C324;
    const double C4964 = C4940 + C4941;
    const double C4962 = C4930 + C4931;
    const double C16326 = C16302 + C16303;
    const double C16324 = C16292 + C16293;
    const double C932 = C922 + C923;
    const double C5164 = C5132 + C5133;
    const double C5682 = C5668 + C5669;
    const double C16526 = C16494 + C16495;
    const double C17044 = C17030 + C17031;
    const double C534 = C528 + C508;
    const double C5182 = C5174 + C5144;
    const double C16544 = C16536 + C16506;
    const double C47006 = ae * C47005;
    const double C1132 =
        (2 * C46887 + C46827 * C47005 + (C46882 + C46835 * C46831) * ae) /
        C46772;
    const double C1272 = (C46968 * C47005) / C46772;
    const double C11673 = C47836 * C1281;
    const double C26845 = C47938 * C1281;
    const double C27233 = C16085 * C1281;
    const double C37896 = C47938 * C1281;
    const double C38284 = C4723 * C1281;
    const double C11290 = C11289 + C921;
    const double C37432 = C37428 + C5138;
    const double C37899 = C37897 + C5666;
    const double C26381 = C26377 + C16500;
    const double C26848 = C26846 + C17028;
    const double C11685 = C11681 + C1288;
    const double C37433 = C37429 + C5141;
    const double C38299 = C38293 + C6091;
    const double C26382 = C26378 + C16503;
    const double C27248 = C27242 + C17441;
    const double C10810 = C533 * C4725;
    const double C10806 = C533 * C47907;
    const double C31935 = C533 * C16087;
    const double C31932 = C533 * C47907;
    const double C42891 = C533 * C47579;
    const double C10825 = C10823 * C4725;
    const double C31934 = C10823 * C16087;
    const double C42889 = C10823 * C47579;
    const double C12564 = C12561 + C12553;
    const double C28124 = C28120 + C28110;
    const double C39172 = C39168 + C39158;
    const double C10814 = C532 * C4725;
    const double C10811 = C532 * C47907;
    const double C31939 = C532 * C16087;
    const double C31936 = C532 * C47907;
    const double C42894 = C532 * C47579;
    const double C12565 = C12562 * C4725;
    const double C33617 = C12562 * C16087;
    const double C42890 = C12562 * C47579;
    const double C152 = C47836 * C134;
    const double C331 = C47836 * C310;
    const double C4751 = C47938 * C310;
    const double C5321 = C4723 * C310;
    const double C16113 = C47938 * C310;
    const double C16683 = C16085 * C310;
    const double C511 = C47836 * C492;
    const double C5159 = C4723 * C492;
    const double C16521 = C16085 * C492;
    const double C514 = C47836 * C493;
    const double C5463 = C4723 * C493;
    const double C16825 = C16085 * C493;
    const double C927 = C47836 * C917;
    const double C5153 = C47938 * C917;
    const double C5679 = C4723 * C917;
    const double C16515 = C47938 * C917;
    const double C17041 = C16085 * C917;
    const double C12551 = C47836 * C1988;
    const double C7313 = C47938 * C2377;
    const double C12763 = C47836 * C2377;
    const double C18651 = C47938 * C2377;
    const double C28108 = C47938 * C6965;
    const double C39156 = C47938 * C6965;
    const double C44530 = C47836 * C6965;
    const double C44179 = C47836 * C12544;
    const double C46927 = C46926 + C46924;
    const double C335 = C114 * C302;
    const double C4753 = C4730 * C302;
    const double C5322 = C4728 * C302;
    const double C16115 = C16092 * C302;
    const double C16684 = C16090 * C302;
    const double C150 = C113 * C120;
    const double C332 = C113 * C291;
    const double C5318 = C4729 * C291;
    const double C16680 = C16091 * C291;
    const double C645 = C113 * C292;
    const double C4752 = C4729 * C292;
    const double C16114 = C16091 * C292;
    const double C515 = C113 * C474;
    const double C754 = C113 * C475;
    const double C928 = C113 * C908;
    const double C5460 = C4729 * C908;
    const double C16822 = C16091 * C908;
    const double C46981 = C46905 + C46979;
    const double C47082 = ae * C47081;
    const double C47189 = C47181 + C47045;
    const double C47047 = C47046 + C47040;
    const double C47096 = ae * C47095;
    const double C2374 = (2 * C47084 + C46968 * C47095) / C46772;
    const double C27236 = C16091 * C6081;
    const double C38287 = C4729 * C6081;
    const double C43885 = C113 * C6081;
    const double C27716 = C16091 * C6577;
    const double C38767 = C4729 * C6577;
    const double C47172 = ae * C47169;
    const double C47171 = C46827 * C47169;
    const double C47221 = C47169 * C47077;
    const double C47241 = C46968 * C47169;
    const double C47283 = 3 * C47169;
    const double C47268 = C47266 + C47267;
    const double C47353 = C47346 + C47247;
    const double C309 = (C46841 + C46850 * C46846 + C46908 + C46908 +
                         C46827 * (2 * ae * C46905 + C46827 * C46860)) /
                        C46798;
    const double C327 = C114 * C299;
    const double C4956 = C4728 * C299;
    const double C4950 = C4730 * C299;
    const double C16318 = C16090 * C299;
    const double C16312 = C16092 * C299;
    const double C21840 = C21830 * C299;
    const double C926 = C114 * C912;
    const double C5152 = C4730 * C912;
    const double C5678 = C4728 * C912;
    const double C16514 = C16092 * C912;
    const double C17040 = C16090 * C912;
    const double C1286 = C114 * C1267;
    const double C5155 = C4730 * C1267;
    const double C7174 = C4728 * C1267;
    const double C16517 = C16092 * C1267;
    const double C18512 = C16090 * C1267;
    const double C162 = C157 + C148;
    const double C4775 = C4767 + C4756;
    const double C16137 = C16129 + C16118;
    const double C347 = C341 + C330;
    const double C4773 = C4765 + C4750;
    const double C5327 = C5325 + C4959;
    const double C16135 = C16127 + C16112;
    const double C16689 = C16687 + C16321;
    const double C529 = C523 + C510;
    const double C5179 = C5171 + C5158;
    const double C16541 = C16533 + C16520;
    const double C530 = C524 + C513;
    const double C5469 = C5467 + C5161;
    const double C16831 = C16829 + C16523;
    const double C2269 = C2267 + C1991;
    const double C46994 = C46993 + C46990;
    const double C1280 =
        (C46968 * C46985 + C47085 + C47085 +
         C46827 * (2 * ae * C46968 * C46911 + C46827 * C46968 * C46862)) /
        C46798;
    const double C2152 = C2148 + C1287;
    const double C5167 = C5145 + C5146;
    const double C7177 = C7172 + C6089;
    const double C16529 = C16507 + C16508;
    const double C18515 = C18510 + C17439;
    const double C2272 = C2270 + C2265;
    const double C7323 = C7321 + C7315;
    const double C18661 = C18659 + C18653;
    const double C47168 = C47155 + C47165;
    const double C47026 = ae * C47024;
    const double C47025 = C46827 * C47024;
    const double C47117 = C46968 * C47024;
    const double C47148 = 3 * C47024;
    const double C1273 = (C47005 + C47024 * C47077) / C46772;
    const double C1282 = (C46841 + C46850 * C47077 + C47092 + C47092 +
                          C46827 * (2 * ae * (C46892 + C46901 * C47077) +
                                    C46827 * (C46850 + C46858 * C47077))) /
                         C46798;
    const double C2380 = C114 * C2373;
    const double C6970 = C4730 * C2373;
    const double C7460 = C4728 * C2373;
    const double C18308 = C16092 * C2373;
    const double C18792 = C16090 * C2373;
    const double C44182 = C44181 + C12554;
    const double C46874 = C46866 + C46873;
    const double C47065 = C47061 + C47055;
    const double C1989 =
        (3 * (C46860 + C46872 * C47077) +
         C46968 * (2 * C47128 +
                   C46968 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C47077))) /
        C46798;
    const double C2378 =
        (2 * ae * (2 * C46968 * C46921 + C46968 * (C46921 + C46943 * C47077)) +
         C46827 * (2 * C47128 +
                   C46968 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C47077))) /
        C46798;
    const double C2147 = C47836 * C1276;
    const double C5156 = C47938 * C1276;
    const double C16518 = C47938 * C1276;
    const double C2263 = C47836 * C1984;
    const double C47200 = C46827 * C47196;
    const double C6966 =
        (2 * ae *
             (3 * (C46911 + C46932 * C47077) +
              C46968 * (2 * C47251 + C46968 * (C46932 + C47186 * C47077))) +
         C46827 * (3 * C47232 +
                   C46968 * (2 * C47252 +
                             C46968 * (C47183 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C47077)))) /
        C46798;
    const double C12545 =
        (4 * (2 * C47122 + C46968 * C47232) +
         C46968 * (3 * C47232 +
                   C46968 * (2 * C47252 +
                             C46968 * (C47183 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C47077)))) /
        C46798;
    const double C47262 = C47261 + C47257;
    const double C47306 = C47292 + C47303;
    const double C47344 = C47343 + C47339;
    const double C47378 = C47373 + C47374;
    const double C47362 = C46827 * C47361;
    const double C46951 = C46931 + C46949;
    const double C47105 = C47102 + C47103;
    const double C2266 = C114 * C2259;
    const double C47069 = C46921 + C47066;
    const double C47099 = C46977 + C47098;
    const double C47132 = ae * C47130;
    const double C47208 = C47206 + C47198;
    const double C47236 = ae * C47234;
    const double C47272 = C46968 * C47234;
    const double C47313 = ae * C47307;
    const double C47311 = C46827 * C47307;
    const double C47331 = C47307 * C47077;
    const double C47351 = C46968 * C47307;
    const double C47368 = C47366 + C47367;
    const double C46950 = C46948 * ae;
    const double C121 = 5 * (3 * C46902 + C46834 * C46922) +
                        C46834 * (4 * C46922 + C46834 * C46948);
    const double C293 = 3 * C46902 + C46834 * C46922 + C46948 * C46831;
    const double C476 = 3 * C46902 + C46834 * C46922 + C46948 * C47077;
    const double C641 = C46827 * (4 * C46922 + C46834 * C46948);
    const double C750 = C46968 * (4 * C46922 + C46834 * C46948);
    const double C909 = C46968 * C46827 * C46948;
    const double C47316 = C47312 * ae;
    const double C22631 = 5 * (3 * C47018 + C46827 * C47167) +
                          C46827 * (4 * C47167 + C46827 * C47312);
    const double C22750 = 3 * C47018 + C46827 * C47167 + C47312 * C47077;
    const double C23110 = C46968 * (4 * C47167 + C46827 * C47312);
    const double C47909 = C47873 / C47595;
    const double C47944 = C47913 / C47599;
    const double C47945 = C47915 + C47881;
    const double C639 = C47881 - C47616 / C47613;
    const double C47912 = C47877 / C47595;
    const double C47925 = C47891 / C47595;
    const double C47951 = C47928 / C47599;
    const double C47952 = C47929 + C47895;
    const double C1394 = C47895 - C47696 / C47613;
    const double C47927 = C47892 / C47595;
    const double C47931 = C47897 / C47595;
    const double C47954 = C47934 / C47599;
    const double C47955 = C47935 + C47901;
    const double C2256 = C47901 - C47738 / C47613;
    const double C47933 = C47898 / C47595;
    const double C46812 = C46770 * C46805;
    const double C21825 =
        (ae * -2 * C46797) / (C46798 * 2 * C46772) -
        (((C46770 * ((-4 * C46778) / C46772 - (C46770 * C46805) / C46772) *
           ae) /
              C46772 +
          2 * ((C46804 * ae) / C46772 - C46797 / C46802)) *
         be) /
            C46772 -
        C46805 / C46802;
    const double C21829 = (-C46805 / C46772) / (4 * C46798);
    const double C21844 = C21826 * C126;
    const double C21843 = C21826 * C125;
    const double C21838 = C21826 * C124;
    const double C21837 = C21826 * C123;
    const double C21832 = C21826 * C122;
    const double C21972 = C21826 * C299;
    const double C21971 = C21826 * C294;
    const double C21968 = C21826 * C298;
    const double C21963 = C21826 * C295;
    const double C21960 = C21826 * C297;
    const double C21959 = C21826 * C296;
    const double C22100 = C21826 * C482;
    const double C22099 = C21826 * C477;
    const double C22096 = C21826 * C481;
    const double C22091 = C21826 * C478;
    const double C22088 = C21826 * C480;
    const double C22087 = C21826 * C479;
    const double C22201 = C21826 * C300;
    const double C22302 = C21826 * C483;
    const double C22457 = C21826 * C912;
    const double C22456 = C21826 * C911;
    const double C22451 = C21826 * C910;
    const double C22756 = C21826 * C1269;
    const double C23405 = C21826 * C1981;
    const double C23404 = C21826 * C1980;
    const double C23554 = C21826 * C1268;
    const double C23655 = C21826 * C1979;
    const double C23759 = C21826 * C2373;
    const double C21845 = C21828 * C302;
    const double C21842 = C21828 * C300;
    const double C21839 = C21828 * C294;
    const double C21836 = C21828 * C295;
    const double C21833 = C21828 * C296;
    const double C21970 = C21828 * C299;
    const double C21964 = C21828 * C298;
    const double C21958 = C21828 * C297;
    const double C22101 = C21828 * C1267;
    const double C22098 = C21828 * C912;
    const double C22095 = C21828 * C1268;
    const double C22092 = C21828 * C911;
    const double C22089 = C21828 * C1269;
    const double C22086 = C21828 * C910;
    const double C23403 = C21828 * C2373;
    const double C345 = C339 + C324;
    const double C4972 = C4964 + C4941;
    const double C4970 = C4962 + C4931;
    const double C16334 = C16326 + C16303;
    const double C16332 = C16324 + C16293;
    const double C935 = C932 + C923;
    const double C5172 = C5164 + C5133;
    const double C5686 = C5682 + C5669;
    const double C16534 = C16526 + C16495;
    const double C17048 = C17044 + C17031;
    const double C10812 = C534 * C4725;
    const double C10807 = C534 * C47907;
    const double C31937 = C534 * C16087;
    const double C31933 = C534 * C47907;
    const double C42892 = C534 * C47579;
    const double C1138 =
        (2 * (2 * ae * C46884 + C46827 * C46841) + C47006 + C47006 +
         C46827 * (C46841 + C47003 + C47003 +
                   C46827 * (2 * ae * C46892 + C46827 * C46850))) /
        C46798;
    const double C1145 = C114 * C1132;
    const double C4939 = C4730 * C1132;
    const double C5931 = C4728 * C1132;
    const double C16301 = C16092 * C1132;
    const double C17287 = C16090 * C1132;
    const double C21961 = C21828 * C1132;
    const double C21957 = C21830 * C1132;
    const double C22637 = C21826 * C1132;
    const double C1291 = C114 * C1272;
    const double C5667 = C4730 * C1272;
    const double C6095 = C4728 * C1272;
    const double C17029 = C16092 * C1272;
    const double C17445 = C16090 * C1272;
    const double C22085 = C21830 * C1272;
    const double C22452 = C21828 * C1272;
    const double C22759 = C21826 * C1272;
    const double C11291 = C11290 + C11283;
    const double C37436 = C37432 + C37422;
    const double C37901 = C37899 + C37894;
    const double C26385 = C26381 + C26371;
    const double C26850 = C26848 + C26843;
    const double C11689 = C11685 + C11670;
    const double C37437 = C37433 + C37424;
    const double C38305 = C38299 + C38280;
    const double C26386 = C26382 + C26373;
    const double C27254 = C27248 + C27229;
    const double C12567 = C12564 * C4725;
    const double C33620 = C12564 * C16087;
    const double C44177 = C12564 * C47579;
    const double C12563 = C12560 + C12551;
    const double C46928 = ae * C46927;
    const double C301 = (2 * C46894 + C46834 * C46905 + C46827 * C46927 +
                         C46827 * C46922 * ae) /
                        C46772;
    const double C913 = (C46968 * C46927) / C46772;
    const double C158 = C150 + C151;
    const double C648 = C645 + C335;
    const double C4766 = C4752 + C4753;
    const double C16128 = C16114 + C16115;
    const double C525 = C515 + C516;
    const double C757 = C754 + C518;
    const double C46982 = C46981 + C46978;
    const double C1279 =
        (C46968 * C46860 + C47082 + C47082 +
         C46827 * (2 * ae * C46968 * C46921 + C46827 * C46968 * C46872)) /
        C46798;
    const double C47049 = ae * C47047;
    const double C47048 = C46827 * C47047;
    const double C47123 = C46968 * C47047;
    const double C47184 = 3 * C47047;
    const double C1283 =
        (C46985 + C46862 * C47077 + C47096 + C47096 +
         C46827 * (2 * ae * (C46911 + C46932 * C47077) +
                   C46827 * (C46862 + C46834 * C46870 * C47077))) /
        C46798;
    const double C2381 = C114 * C2374;
    const double C6968 = C4730 * C2374;
    const double C7462 = C4728 * C2374;
    const double C18306 = C16092 * C2374;
    const double C18794 = C16090 * C2374;
    const double C23656 = C21828 * C2374;
    const double C47291 = C47278 + C47172;
    const double C47173 = C47149 + C47171;
    const double C47224 = C47024 + C47221;
    const double C47246 = ae * C47241;
    const double C47375 = 2 * C47241;
    const double C47269 = ae * C47268;
    const double C6963 = (3 * C47091 + C46968 * C47268) / C46772;
    const double C328 = C47836 * C309;
    const double C4957 = C4723 * C309;
    const double C4951 = C47938 * C309;
    const double C16319 = C16085 * C309;
    const double C16313 = C47938 * C309;
    const double C340 = C326 + C327;
    const double C4969 = C4955 + C4956;
    const double C4967 = C4949 + C4950;
    const double C16331 = C16317 + C16318;
    const double C16329 = C16311 + C16312;
    const double C933 = C925 + C926;
    const double C5169 = C5151 + C5152;
    const double C5685 = C5677 + C5678;
    const double C16531 = C16513 + C16514;
    const double C17047 = C17039 + C17040;
    const double C2151 = C2146 + C1286;
    const double C5170 = C5154 + C5155;
    const double C16532 = C16516 + C16517;
    const double C167 = C162 + C149;
    const double C4783 = C4775 + C4757;
    const double C16145 = C16137 + C16119;
    const double C353 = C347 + C331;
    const double C4781 = C4773 + C4751;
    const double C5329 = C5327 + C5321;
    const double C16143 = C16135 + C16113;
    const double C16691 = C16689 + C16683;
    const double C535 = C529 + C511;
    const double C5187 = C5179 + C5159;
    const double C16549 = C16541 + C16521;
    const double C536 = C530 + C514;
    const double C5471 = C5469 + C5463;
    const double C16833 = C16831 + C16825;
    const double C46995 = ae * C46994;
    const double C1131 =
        (2 * C46896 + C46827 * C46994 + (C46891 + C46913 * C46831) * ae) /
        C46772;
    const double C1271 = (C46968 * C46994) / C46772;
    const double C1274 = (C46994 + C47047 * C47077) / C46772;
    const double C1565 = C47836 * C1280;
    const double C5673 = C47938 * C1280;
    const double C6439 = C4723 * C1280;
    const double C17035 = C47938 * C1280;
    const double C17789 = C16085 * C1280;
    const double C2154 = C2152 + C1287;
    const double C5175 = C5167 + C5146;
    const double C7179 = C7177 + C6089;
    const double C16537 = C16529 + C16508;
    const double C18517 = C18515 + C17439;
    const double C12549 = C2272 * C47907;
    const double C12900 = C2272 * C4725;
    const double C33618 = C2272 * C47907;
    const double C33948 = C2272 * C16087;
    const double C42893 = C2272 * C47579;
    const double C47027 = C47010 + C47025;
    const double C47119 = ae * C47117;
    const double C1292 = C114 * C1273;
    const double C6096 = C4728 * C1273;
    const double C6090 = C4730 * C1273;
    const double C17446 = C16090 * C1273;
    const double C17440 = C16092 * C1273;
    const double C22090 = C21830 * C1273;
    const double C22760 = C21826 * C1273;
    const double C22755 = C21828 * C1273;
    const double C11678 = C47836 * C1282;
    const double C27239 = C16085 * C1282;
    const double C27231 = C47938 * C1282;
    const double C38290 = C4723 * C1282;
    const double C38282 = C47938 * C1282;
    const double C13036 = C13032 + C2380;
    const double C39162 = C39153 + C6970;
    const double C39634 = C39629 + C7460;
    const double C28114 = C28105 + C18308;
    const double C28586 = C28581 + C18792;
    const double C44183 = C44182 + C44179;
    const double C135 =
        (5 * (3 * C46860 + C46834 * C46874) +
         C46834 *
             (4 * C46874 +
              C46834 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C312 = (2 * ae * (3 * C46905 + C46834 * C46925) +
                         C46827 * (3 * C46860 + C46834 * C46874)) /
                        C46798;
    const double C494 = (2 * C46834 * C46850 + C46834 * C46860 +
                         C46874 * std::pow(zP - zQ, 2)) /
                        C46798;
    const double C495 = ((zP - zQ) * (3 * C46860 + C46834 * C46874)) / C46798;
    const double C496 =
        (3 * C46860 + C46834 * C46874 +
         (3 * C46872 +
          C46834 * (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846))) *
             std::pow(zP - zQ, 2)) /
        C46798;
    const double C752 =
        ((zP - zQ) *
         (4 * C46874 +
          C46834 * (3 * C46872 +
                    C46834 * (2 * C46834 * C46870 +
                              C46834 * (C46870 +
                                        (C46864 * C46865 +
                                         C46831 * bs[8] * std::pow(C46825, 8)) *
                                            C46830 * C46846))))) /
        C46798;
    const double C918 =
        (2 * ae * C46968 * C46925 + C46827 * C46968 * C46874) / C46798;
    const double C2144 =
        (2 * ae * (C46925 + C46947 * C47077) +
         C46827 * (C46874 +
                   (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846)) *
                       C47077)) /
        C46798;
    const double C2260 =
        (2 * C46968 * C46874 +
         C46968 * (C46874 +
                   (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846)) *
                       C47077)) /
        C46798;
    const double C2271 = C2269 + C2263;
    const double C47205 = C47189 + C47200;
    const double C47310 = C46827 * C47306;
    const double C28101 =
        (2 * ae *
             (4 * (2 * C47238 + C46968 * C47333) +
              C46968 * (3 * C47333 +
                        C46968 * (2 * C47347 +
                                  C46968 * (C46916 + C46938 * C47077)))) +
         C46827 *
             (4 * C47378 +
              C46968 * (3 * C47334 +
                        C46968 * (2 * C47348 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C47077))))) /
        C46798;
    const double C44175 =
        (5 * (3 * C47223 + C46968 * C47378) +
         C46968 *
             (4 * C47378 +
              C46968 * (3 * C47334 +
                        C46968 * (2 * C47348 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C47077))))) /
        C46798;
    const double C47363 = C47353 + C47362;
    const double C46952 = C46827 * C46951;
    const double C643 =
        (2 * ae * (4 * C46925 + C46834 * C46951) +
         C46827 *
             (4 * C46874 +
              C46834 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C919 =
        (2 * ae * C46968 * C46951 +
         C46827 * C46968 *
             (3 * C46872 +
              C46834 *
                  (2 * C46834 * C46870 +
                   C46834 * (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C128 = (5 * (3 * C46905 + C46834 * C46925) +
                         C46834 * (4 * C46925 + C46834 * C46951)) /
                        C46772;
    const double C486 =
        (3 * C46905 + C46834 * C46925 + C46951 * C47077) / C46772;
    const double C642 = (C46827 * (4 * C46925 + C46834 * C46951) +
                         (4 * C46922 + C46834 * C46948) * ae) /
                        C46772;
    const double C751 = (C46968 * (4 * C46925 + C46834 * C46951)) / C46772;
    const double C47108 = ae * C47105;
    const double C47107 = C46827 * C47105;
    const double C47113 = C46968 * C47105;
    const double C2143 = (C46927 + C47105 * C47077) / C46772;
    const double C47070 = C47069 + C47063;
    const double C47100 = ae * C47099;
    const double C2375 = (2 * C47081 + C46968 * C47099) / C46772;
    const double C47211 = ae * C47208;
    const double C47210 = C46827 * C47208;
    const double C47230 = C47208 * C47077;
    const double C47254 = C46968 * C47208;
    const double C47273 = C47271 + C47272;
    const double C47315 = C47284 + C47311;
    const double C47336 = C47169 + C47331;
    const double C47358 = ae * C47351;
    const double C47369 = C46968 * C47368;
    const double C47377 = ae * C47368;
    const double C47965 = C47909 + C47957;
    const double C638 = C47944 - (C47618 * C47600) / C47595;
    const double C111 = C47945 / C47599 - C47616 / C47916;
    const double C47958 = C47912 + C47944;
    const double C47966 = C47925 + C47961;
    const double C1393 = C47951 - (C47698 * C47687) / C47595;
    const double C1121 = C47952 / C47599 - C47696 / C47916;
    const double C47962 = C47927 + C47951;
    const double C47967 = C47931 + C47963;
    const double C2255 = C47954 - (C47740 * C47729) / C47595;
    const double C1970 = C47955 / C47599 - C47738 / C47916;
    const double C47964 = C47933 + C47954;
    const double C21827 =
        (((-4 * C46778) / C46772 - C46812 / C46772) * ae) / C46802 -
        ((2 * ((0 * ae) / C46772 - C46778 / C46798) - C46812 / C46802) * be) /
            C46772;
    const double C351 = C345 + C325;
    const double C4980 = C4972 + C4942;
    const double C4978 = C4970 + C4932;
    const double C16342 = C16334 + C16304;
    const double C16340 = C16332 + C16294;
    const double C938 = C935 + C924;
    const double C5180 = C5172 + C5134;
    const double C5690 = C5686 + C5670;
    const double C16542 = C16534 + C16496;
    const double C17052 = C17048 + C17032;
    const double C11682 = C11672 + C1291;
    const double C37898 = C37895 + C5667;
    const double C38295 = C38283 + C6095;
    const double C26847 = C26844 + C17029;
    const double C27244 = C27232 + C17445;
    const double C11292 = C11291 * C4725;
    const double C32399 = C11291 * C16087;
    const double C43241 = C11291 * C47579;
    const double C11693 = C11689 * C4725;
    const double C32779 = C11689 * C16087;
    const double C43242 = C11689 * C47579;
    const double C12566 = C12563 * C47907;
    const double C33619 = C12563 * C47907;
    const double C44430 = C12563 * C47579;
    const double C311 =
        (2 * C46834 * C46850 + C46834 * C46860 + C46928 + C46928 +
         C46827 * (2 * ae * C46925 + C46827 * C46874)) /
        C46798;
    const double C333 = C114 * C301;
    const double C4960 = C4728 * C301;
    const double C4958 = C4730 * C301;
    const double C16322 = C16090 * C301;
    const double C16320 = C16092 * C301;
    const double C21841 = C21830 * C301;
    const double C22202 = C21828 * C301;
    const double C929 = C114 * C913;
    const double C5160 = C4730 * C913;
    const double C5680 = C4728 * C913;
    const double C16522 = C16092 * C913;
    const double C17042 = C16090 * C913;
    const double C22303 = C21828 * C913;
    const double C163 = C158 + C151;
    const double C649 = C648 + C335;
    const double C4774 = C4766 + C4753;
    const double C16136 = C16128 + C16115;
    const double C531 = C525 + C516;
    const double C758 = C757 + C518;
    const double C46983 = ae * C46982;
    const double C1130 =
        (2 * C46907 + C46827 * C46982 + (C46902 + C46918 * C46831) * ae) /
        C46772;
    const double C1270 = (C46968 * C46982) / C46772;
    const double C1563 = C47836 * C1279;
    const double C5676 = C47938 * C1279;
    const double C17038 = C47938 * C1279;
    const double C47050 = C47033 + C47048;
    const double C47125 = ae * C47123;
    const double C7171 = C47938 * C1283;
    const double C11676 = C47836 * C1283;
    const double C18509 = C47938 * C1283;
    const double C12766 = C12762 + C2381;
    const double C7318 = C7312 + C6968;
    const double C18656 = C18650 + C18306;
    const double C47297 = C47291 + C47172;
    const double C47174 = C47173 + C47162;
    const double C47226 = ae * C47224;
    const double C7455 = (2 * C47117 + C46968 * C47224) / C46772;
    const double C7457 =
        (2 * C47116 + C46968 * C47223 + C47269 + C47269 +
         C46827 *
             (2 * ae * (2 * C47238 + C46968 * (C46901 + C46916 * C47077)) +
              C46827 * (2 * C47239 + C46968 * (C46858 + C46870 * C47077)))) /
        C46798;
    const double C6973 = C4730 * C6963;
    const double C13034 = C114 * C6963;
    const double C18311 = C16092 * C6963;
    const double C23406 = C21828 * C6963;
    const double C28583 = C16090 * C6963;
    const double C39631 = C4728 * C6963;
    const double C346 = C340 + C327;
    const double C4977 = C4969 + C4956;
    const double C4975 = C4967 + C4950;
    const double C16339 = C16331 + C16318;
    const double C16337 = C16329 + C16312;
    const double C936 = C933 + C926;
    const double C5177 = C5169 + C5152;
    const double C5689 = C5685 + C5678;
    const double C16539 = C16531 + C16514;
    const double C17051 = C17047 + C17040;
    const double C2153 = C2151 + C1286;
    const double C5178 = C5170 + C5155;
    const double C16540 = C16532 + C16517;
    const double C10817 = C535 * C4725;
    const double C10813 = C535 * C47907;
    const double C31942 = C535 * C16087;
    const double C31938 = C535 * C47907;
    const double C42895 = C535 * C47579;
    const double C10815 = C536 * C47907;
    const double C11086 = C536 * C4725;
    const double C31940 = C536 * C47907;
    const double C32203 = C536 * C16087;
    const double C43093 = C536 * C47579;
    const double C1137 =
        (2 * (2 * ae * C46894 + C46827 * C46985) + C46995 + C46995 +
         C46827 * (C46985 + C46992 + C46992 +
                   C46827 * (2 * ae * C46911 + C46827 * C46862))) /
        C46798;
    const double C1144 = C114 * C1131;
    const double C4944 = C4730 * C1131;
    const double C5929 = C4728 * C1131;
    const double C16306 = C16092 * C1131;
    const double C17285 = C16090 * C1131;
    const double C21967 = C21828 * C1131;
    const double C21965 = C21830 * C1131;
    const double C22861 = C21826 * C1131;
    const double C1290 = C114 * C1271;
    const double C5672 = C4730 * C1271;
    const double C6093 = C4728 * C1271;
    const double C17034 = C16092 * C1271;
    const double C17443 = C16090 * C1271;
    const double C22093 = C21830 * C1271;
    const double C22455 = C21828 * C1271;
    const double C23010 = C21826 * C1271;
    const double C1293 = C114 * C1274;
    const double C6098 = C4728 * C1274;
    const double C6088 = C4730 * C1274;
    const double C17448 = C16090 * C1274;
    const double C17438 = C16092 * C1274;
    const double C22094 = C21830 * C1274;
    const double C23555 = C21828 * C1274;
    const double C2156 = C2154 + C2149;
    const double C5183 = C5175 + C5147;
    const double C7181 = C7179 + C7173;
    const double C16545 = C16537 + C16509;
    const double C18519 = C18517 + C18511;
    const double C47028 = C47027 + C47021;
    const double C1676 =
        (2 * (2 * ae * C46968 * C46892 + C46827 * C47116) + C47119 + C47119 +
         C46827 *
             (C47116 + C47120 + C47120 +
              C46827 * (2 * ae * C46968 * C46901 + C46827 * C46968 * C46858))) /
        C46798;
    const double C11684 = C11677 + C1292;
    const double C38298 = C38289 + C6096;
    const double C38294 = C38281 + C6090;
    const double C27247 = C27238 + C17446;
    const double C27243 = C27230 + C17440;
    const double C13037 = C13036 + C2380;
    const double C39166 = C39162 + C6970;
    const double C39636 = C39634 + C7460;
    const double C28118 = C28114 + C18308;
    const double C28588 = C28586 + C18792;
    const double C44184 = C44183 * C47579;
    const double C646 = C47836 * C312;
    const double C4754 = C47938 * C312;
    const double C16116 = C47938 * C312;
    const double C517 = C47836 * C494;
    const double C755 = C47836 * C495;
    const double C930 = C47836 * C918;
    const double C5461 = C47938 * C918;
    const double C16823 = C47938 * C918;
    const double C12899 = C2271 * C47907;
    const double C33947 = C2271 * C47907;
    const double C42896 = C2271 * C47579;
    const double C46953 = C46952 + C46950;
    const double C153 = C114 * C128;
    const double C519 = C114 * C486;
    const double C647 = C114 * C642;
    const double C4759 = C4730 * C642;
    const double C16121 = C16092 * C642;
    const double C756 = C114 * C751;
    const double C47109 = C46925 + C47107;
    const double C47114 = ae * C47113;
    const double C2150 = C114 * C2143;
    const double C5163 = C4730 * C2143;
    const double C16525 = C16092 * C2143;
    const double C47072 = ae * C47070;
    const double C47071 = C46827 * C47070;
    const double C47129 = C46968 * C47070;
    const double C1275 = (C46982 + C47070 * C47077) / C46772;
    const double C1284 =
        (C46860 + C46872 * C47077 + C47100 + C47100 +
         C46827 * (2 * ae * (C46921 + C46943 * C47077) +
                   C46827 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C47077))) /
        C46798;
    const double C2382 = C114 * C2375;
    const double C7317 = C4730 * C2375;
    const double C18655 = C16092 * C2375;
    const double C47212 = C47185 + C47210;
    const double C47233 = C47047 + C47230;
    const double C47259 = ae * C47254;
    const double C47274 = ae * C47273;
    const double C6964 = (3 * C47095 + C46968 * C47273) / C46772;
    const double C47317 = C47315 + C47300;
    const double C47341 = ae * C47336;
    const double C47376 = C46968 * C47336;
    const double C47370 = C47365 + C47369;
    const double C108 =
        (C47956 + 2 * C47609) / C47599 - (C47965 * C47600) / C47595;
    const double C109 =
        (C47943 + 2 * C47618 + C47965) / C47599 - (C47958 * C47600) / C47595;
    const double C110 = (C47914 + C47615 / C47595 + C47958) / C47599 -
                        (C47945 * C47600) / C47595;
    const double C1118 =
        (C47959 + 2 * C47691) / C47599 - (C47966 * C47687) / C47595;
    const double C1119 =
        (C47947 + 2 * C47698 + C47966) / C47599 - (C47962 * C47687) / C47595;
    const double C1120 = (C47920 + C47695 / C47595 + C47962) / C47599 -
                         (C47952 * C47687) / C47595;
    const double C1967 =
        (C47960 + 2 * C47733) / C47599 - (C47967 * C47729) / C47595;
    const double C1968 =
        (C47949 + 2 * C47740 + C47967) / C47599 - (C47964 * C47729) / C47595;
    const double C1969 = (C47923 + C47737 / C47595 + C47964) / C47599 -
                         (C47955 * C47729) / C47595;
    const double C11285 = C938 * C4725;
    const double C11284 = C938 * C47907;
    const double C32401 = C938 * C16087;
    const double C32400 = C938 * C47907;
    const double C43243 = C938 * C47579;
    const double C11686 = C11682 + C1291;
    const double C37900 = C37898 + C5667;
    const double C38301 = C38295 + C6095;
    const double C26849 = C26847 + C17029;
    const double C27250 = C27244 + C17445;
    const double C334 = C47836 * C311;
    const double C5319 = C47938 * C311;
    const double C16681 = C47938 * C311;
    const double C342 = C332 + C333;
    const double C5324 = C5318 + C4958;
    const double C16686 = C16680 + C16320;
    const double C934 = C928 + C929;
    const double C5466 = C5460 + C5160;
    const double C16828 = C16822 + C16522;
    const double C168 = C163 + C152;
    const double C1136 =
        (2 * (2 * ae * C46905 + C46827 * C46860) + C46983 + C46983 +
         C46827 * (C46860 + C46980 + C46980 +
                   C46827 * (2 * ae * C46921 + C46827 * C46872))) /
        C46798;
    const double C1143 = C114 * C1130;
    const double C4953 = C4730 * C1130;
    const double C6234 = C4728 * C1130;
    const double C16315 = C16092 * C1130;
    const double C17584 = C16090 * C1130;
    const double C21973 = C21828 * C1130;
    const double C21969 = C21830 * C1130;
    const double C1289 = C114 * C1270;
    const double C5675 = C4730 * C1270;
    const double C6440 = C4728 * C1270;
    const double C17037 = C16092 * C1270;
    const double C17790 = C16090 * C1270;
    const double C22097 = C21830 * C1270;
    const double C22458 = C21828 * C1270;
    const double C47051 = C47050 + C47044;
    const double C1677 =
        (2 * (2 * ae * C46968 * C46911 + C46827 * C47122) + C47125 + C47125 +
         C46827 * (C47122 + C47126 + C47126 +
                   C46827 * (2 * ae * C46968 * C46932 +
                             C46827 * C46968 * C46834 * C46870))) /
        C46798;
    const double C12767 = C12766 + C2381;
    const double C7320 = C7318 + C6968;
    const double C18658 = C18656 + C18306;
    const double C47314 = C47297 + C47310;
    const double C47176 = ae * C47174;
    const double C47175 = C46827 * C47174;
    const double C47240 = C46968 * C47174;
    const double C47282 = 4 * C47174;
    const double C6085 =
        (2 * (2 * ae * (C46892 + C46901 * C47077) + C46827 * C47223) + C47226 +
         C47226 +
         C46827 * (C47223 + C47227 + C47227 +
                   C46827 * (2 * ae * (C46901 + C46916 * C47077) +
                             C46827 * (C46858 + C46870 * C47077)))) /
        C46798;
    const double C7461 = C4730 * C7455;
    const double C11679 = C114 * C7455;
    const double C18793 = C16092 * C7455;
    const double C23402 = C21830 * C7455;
    const double C23760 = C21828 * C7455;
    const double C27240 = C16090 * C7455;
    const double C38291 = C4728 * C7455;
    const double C28580 = C47938 * C7457;
    const double C39628 = C47938 * C7457;
    const double C43534 = C47836 * C7457;
    const double C39163 = C39155 + C6973;
    const double C44532 = C44529 + C13034;
    const double C28115 = C28107 + C18311;
    const double C352 = C346 + C328;
    const double C4985 = C4977 + C4957;
    const double C4983 = C4975 + C4951;
    const double C16347 = C16339 + C16319;
    const double C16345 = C16337 + C16313;
    const double C939 = C936 + C927;
    const double C5185 = C5177 + C5153;
    const double C5693 = C5689 + C5679;
    const double C16547 = C16539 + C16515;
    const double C17055 = C17051 + C17041;
    const double C2155 = C2153 + C2147;
    const double C5186 = C5178 + C5156;
    const double C16548 = C16540 + C16518;
    const double C1405 = C47836 * C1137;
    const double C4945 = C47938 * C1137;
    const double C6233 = C4723 * C1137;
    const double C16307 = C47938 * C1137;
    const double C17583 = C16085 * C1137;
    const double C1408 = C1404 + C1144;
    const double C4965 = C4943 + C4944;
    const double C6237 = C6232 + C5929;
    const double C16327 = C16305 + C16306;
    const double C17587 = C17582 + C17285;
    const double C1568 = C1564 + C1290;
    const double C5683 = C5671 + C5672;
    const double C6443 = C6438 + C6093;
    const double C17045 = C17033 + C17034;
    const double C17793 = C17788 + C17443;
    const double C11683 = C11675 + C1293;
    const double C7176 = C7170 + C6088;
    const double C18514 = C18508 + C17438;
    const double C11671 = C2156 * C47907;
    const double C12765 = C2156 * C4725;
    const double C32780 = C2156 * C47907;
    const double C33816 = C2156 * C16087;
    const double C43244 = C2156 * C47579;
    const double C47029 = ae * C47028;
    const double C1133 =
        (3 * C47005 + C46827 * C47028 + (2 * C46999 + C46827 * C47018) * ae) /
        C46772;
    const double C1673 = (C46968 * C47028) / C46772;
    const double C6083 = (C47028 + C47174 * C47077) / C46772;
    const double C12159 = C47836 * C1676;
    const double C27235 = C47938 * C1676;
    const double C27715 = C16085 * C1676;
    const double C38286 = C47938 * C1676;
    const double C38766 = C4723 * C1676;
    const double C11688 = C11684 + C1292;
    const double C38304 = C38298 + C6096;
    const double C38300 = C38294 + C6090;
    const double C27253 = C27247 + C17446;
    const double C27249 = C27243 + C17440;
    const double C13038 = C13037 + C13033;
    const double C39170 = C39166 + C39154;
    const double C39638 = C39636 + C39630;
    const double C28122 = C28118 + C28106;
    const double C28590 = C28588 + C28582;
    const double C650 = C649 + C646;
    const double C4782 = C4774 + C4754;
    const double C16144 = C16136 + C16116;
    const double C537 = C531 + C517;
    const double C759 = C758 + C755;
    const double C46954 = ae * C46953;
    const double C303 = (3 * C46905 + C46834 * C46925 + C46827 * C46953 +
                         C46827 * C46948 * ae) /
                        C46772;
    const double C914 = (C46968 * C46953) / C46772;
    const double C47110 = C47109 + C47106;
    const double C1560 =
        (C46968 * C46874 + C47114 + C47114 +
         C46827 *
             (2 * ae * C46968 * C46947 +
              C46827 * C46968 *
                  (2 * C46834 * C46870 +
                   C46834 * (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C47073 = C47056 + C47071;
    const double C47131 = ae * C47129;
    const double C1294 = C114 * C1275;
    const double C7175 = C4730 * C1275;
    const double C18513 = C16092 * C1275;
    const double C22102 = C21830 * C1275;
    const double C47213 = C47212 + C47202;
    const double C47235 = ae * C47233;
    const double C7456 = (2 * C47123 + C46968 * C47233) / C46772;
    const double C7458 =
        (2 * C47122 + C46968 * C47232 + C47274 + C47274 +
         C46827 * (2 * ae * (2 * C47251 + C46968 * (C46932 + C47186 * C47077)) +
                   C46827 * (2 * C47252 +
                             C46968 * (C47183 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C47077)))) /
        C46798;
    const double C6975 = C4730 * C6964;
    const double C13035 = C114 * C6964;
    const double C18313 = C16092 * C6964;
    const double C47319 = ae * C47317;
    const double C47318 = C46827 * C47317;
    const double C47330 = C47317 * C47077;
    const double C47350 = C46968 * C47317;
    const double C47379 = C47375 + C47376;
    const double C47371 = ae * C47370;
    const double C28100 = (4 * C47268 + C46968 * C47370) / C46772;
    const double C11690 = C11686 + C11673;
    const double C37902 = C37900 + C37896;
    const double C38307 = C38301 + C38284;
    const double C26851 = C26849 + C26845;
    const double C27256 = C27250 + C27233;
    const double C348 = C342 + C333;
    const double C5326 = C5324 + C4958;
    const double C16688 = C16686 + C16320;
    const double C937 = C934 + C929;
    const double C5468 = C5466 + C5160;
    const double C16830 = C16828 + C16522;
    const double C1403 = C47836 * C1136;
    const double C4954 = C47938 * C1136;
    const double C16316 = C47938 * C1136;
    const double C1407 = C1402 + C1143;
    const double C4968 = C4952 + C4953;
    const double C16330 = C16314 + C16315;
    const double C1567 = C1562 + C1289;
    const double C5684 = C5674 + C5675;
    const double C17046 = C17036 + C17037;
    const double C47052 = ae * C47051;
    const double C1134 =
        (3 * C46994 + C46827 * C47051 + (2 * C46988 + C46827 * C47041) * ae) /
        C46772;
    const double C1674 = (C46968 * C47051) / C46772;
    const double C6437 = C47938 * C1677;
    const double C11828 = C47836 * C1677;
    const double C17787 = C47938 * C1677;
    const double C12768 = C12767 + C12763;
    const double C7322 = C7320 + C7313;
    const double C18660 = C18658 + C18651;
    const double C47177 = C47148 + C47175;
    const double C47245 = ae * C47240;
    const double C27237 = C47938 * C6085;
    const double C38288 = C47938 * C6085;
    const double C43886 = C47836 * C6085;
    const double C39633 = C39627 + C7461;
    const double C43536 = C43533 + C11679;
    const double C28585 = C28579 + C18793;
    const double C39167 = C39163 + C6973;
    const double C44533 = C44532 + C13034;
    const double C28119 = C28115 + C18311;
    const double C11287 = C939 * C4725;
    const double C11286 = C939 * C47907;
    const double C32403 = C939 * C16087;
    const double C32402 = C939 * C47907;
    const double C43245 = C939 * C47579;
    const double C12764 = C2155 * C47907;
    const double C33815 = C2155 * C47907;
    const double C43246 = C2155 * C47579;
    const double C1410 = C1408 + C1144;
    const double C4973 = C4965 + C4944;
    const double C6239 = C6237 + C5929;
    const double C16335 = C16327 + C16306;
    const double C17589 = C17587 + C17285;
    const double C1570 = C1568 + C1290;
    const double C5687 = C5683 + C5672;
    const double C6445 = C6443 + C6093;
    const double C17049 = C17045 + C17034;
    const double C17795 = C17793 + C17443;
    const double C11687 = C11683 + C1293;
    const double C7178 = C7176 + C6088;
    const double C18516 = C18514 + C17438;
    const double C1139 =
        (3 * (C46841 + C47003 + C47003 + C46827 * C47019) + C47029 + C47029 +
         C46827 * (2 * C47019 + C47026 + C47026 +
                   C46827 * (C46850 + C47022 + C47022 +
                             C46827 * (2 * ae * C46901 + C46827 * C46858)))) /
        C46798;
    const double C1146 = C114 * C1133;
    const double C5932 = C4728 * C1133;
    const double C5930 = C4730 * C1133;
    const double C17288 = C16090 * C1133;
    const double C17286 = C16092 * C1133;
    const double C21962 = C21830 * C1133;
    const double C22638 = C21826 * C1133;
    const double C22636 = C21828 * C1133;
    const double C1680 = C114 * C1673;
    const double C6094 = C4730 * C1673;
    const double C6584 = C4728 * C1673;
    const double C17444 = C16092 * C1673;
    const double C17928 = C16090 * C1673;
    const double C22453 = C21830 * C1673;
    const double C22758 = C21828 * C1673;
    const double C23114 = C21826 * C1673;
    const double C6097 = C4730 * C6083;
    const double C12161 = C114 * C6083;
    const double C17447 = C16092 * C6083;
    const double C22761 = C21828 * C6083;
    const double C22754 = C21830 * C6083;
    const double C27718 = C16090 * C6083;
    const double C38769 = C4728 * C6083;
    const double C11692 = C11688 + C11678;
    const double C38310 = C38304 + C38290;
    const double C38306 = C38300 + C38282;
    const double C27259 = C27253 + C27239;
    const double C27255 = C27249 + C27231;
    const double C13039 = C13038 * C4725;
    const double C34080 = C13038 * C16087;
    const double C43530 = C13038 * C47579;
    const double C10816 = C537 * C47907;
    const double C31941 = C537 * C47907;
    const double C43094 = C537 * C47579;
    const double C11087 = C759 * C47907;
    const double C32204 = C759 * C47907;
    const double C313 =
        (3 * C46860 + C46834 * C46874 + C46954 + C46954 +
         C46827 *
             (2 * ae * C46951 +
              C46827 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C336 = C114 * C303;
    const double C5323 = C4730 * C303;
    const double C16685 = C16092 * C303;
    const double C21846 = C21830 * C303;
    const double C931 = C114 * C914;
    const double C5465 = C4730 * C914;
    const double C16827 = C16092 * C914;
    const double C47111 = ae * C47110;
    const double C1399 =
        (2 * C46927 + C46827 * C47110 + (C46922 + C46944 * C46831) * ae) /
        C46772;
    const double C1559 = (C46968 * C47110) / C46772;
    const double C47074 = C47073 + C47067;
    const double C1678 =
        (2 * (2 * ae * C46968 * C46921 + C46827 * C47128) + C47131 + C47131 +
         C46827 *
             (C47128 + C47132 + C47132 +
              C46827 * (2 * ae * C46968 * C46943 +
                        C46827 * C46968 *
                            (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C47215 = ae * C47213;
    const double C47214 = C46827 * C47213;
    const double C47253 = C46968 * C47213;
    const double C6084 = (C47051 + C47213 * C47077) / C46772;
    const double C6086 =
        (2 * (2 * ae * (C46911 + C46932 * C47077) + C46827 * C47232) + C47235 +
         C47235 +
         C46827 * (C47232 + C47236 + C47236 +
                   C46827 * (2 * ae * (C46932 + C47186 * C47077) +
                             C46827 * (C47183 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C47077)))) /
        C46798;
    const double C7463 = C4730 * C7456;
    const double C11680 = C114 * C7456;
    const double C18795 = C16092 * C7456;
    const double C23657 = C21830 * C7456;
    const double C47320 = C47283 + C47318;
    const double C47335 = C47174 + C47330;
    const double C47357 = ae * C47350;
    const double C47380 = ae * C47379;
    const double C23399 = (3 * C47224 + C46968 * C47379) / C46772;
    const double C23400 =
        (3 * C47223 + C46968 * (2 * C47239 + C46968 * C47334) + C47371 +
         C47371 +
         C46827 *
             (2 * ae *
                  (3 * C47333 +
                   C46968 *
                       (2 * C47347 + C46968 * (C46916 + C46938 * C47077))) +
              C46827 * (3 * C47334 +
                        C46968 * (2 * C47348 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C47077))))) /
        C46798;
    const double C28112 = C16092 * C28100;
    const double C39160 = C4730 * C28100;
    const double C44531 = C114 * C28100;
    const double C11694 = C11690 * C4725;
    const double C32781 = C11690 * C16087;
    const double C43531 = C11690 * C47579;
    const double C354 = C348 + C334;
    const double C5328 = C5326 + C5319;
    const double C16690 = C16688 + C16681;
    const double C940 = C937 + C930;
    const double C5470 = C5468 + C5461;
    const double C16832 = C16830 + C16823;
    const double C1409 = C1407 + C1143;
    const double C4976 = C4968 + C4953;
    const double C16338 = C16330 + C16315;
    const double C1569 = C1567 + C1289;
    const double C5688 = C5684 + C5675;
    const double C17050 = C17046 + C17037;
    const double C1140 =
        (3 * (C46985 + C46992 + C46992 + C46827 * C47042) + C47052 + C47052 +
         C46827 * (2 * C47042 + C47049 + C47049 +
                   C46827 * (C46862 + C47045 + C47045 +
                             C46827 * (2 * ae * C46932 +
                                       C46827 * C46834 * C46870)))) /
        C46798;
    const double C1147 = C114 * C1134;
    const double C5934 = C4728 * C1134;
    const double C5928 = C4730 * C1134;
    const double C17290 = C16090 * C1134;
    const double C17284 = C16092 * C1134;
    const double C21966 = C21830 * C1134;
    const double C22862 = C21828 * C1134;
    const double C1681 = C114 * C1674;
    const double C6092 = C4730 * C1674;
    const double C6586 = C4728 * C1674;
    const double C17442 = C16092 * C1674;
    const double C17930 = C16090 * C1674;
    const double C22454 = C21830 * C1674;
    const double C23011 = C21828 * C1674;
    const double C13031 = C12768 * C47907;
    const double C34079 = C12768 * C47907;
    const double C44331 = C12768 * C47579;
    const double C47178 = C47177 + C47170;
    const double C6581 =
        (3 * (C47116 + C47120 + C47120 + C46827 * C47249) + C47245 + C47245 +
         C46827 * (2 * C47249 + C47246 + C47246 +
                   C46827 * (C47239 + C47247 + C47247 +
                             C46827 * (2 * ae * C46968 * C46916 +
                                       C46827 * C46968 * C46870)))) /
        C46798;
    const double C39635 = C39633 + C7461;
    const double C43537 = C43536 + C11679;
    const double C28587 = C28585 + C18793;
    const double C39171 = C39167 + C39156;
    const double C44534 = C44533 + C44530;
    const double C28123 = C28119 + C28108;
    const double C1412 = C1410 + C1405;
    const double C4981 = C4973 + C4945;
    const double C6241 = C6239 + C6233;
    const double C16343 = C16335 + C16307;
    const double C17591 = C17589 + C17583;
    const double C1572 = C1570 + C1565;
    const double C5691 = C5687 + C5673;
    const double C6447 = C6445 + C6439;
    const double C17053 = C17049 + C17035;
    const double C17797 = C17795 + C17789;
    const double C11691 = C11687 + C11676;
    const double C7180 = C7178 + C7171;
    const double C18518 = C18516 + C18509;
    const double C12163 = C12158 + C1680;
    const double C38296 = C38285 + C6094;
    const double C38771 = C38765 + C6584;
    const double C27245 = C27234 + C17444;
    const double C27720 = C27714 + C17928;
    const double C38297 = C38287 + C6097;
    const double C43888 = C43885 + C12161;
    const double C27246 = C27236 + C17447;
    const double C11696 = C11692 * C4725;
    const double C32784 = C11692 * C16087;
    const double C43532 = C11692 * C47579;
    const double C1400 =
        (2 * (2 * ae * C46925 + C46827 * C46874) + C47111 + C47111 +
         C46827 *
             (C46874 + C47108 + C47108 +
              C46827 * (2 * ae * C46947 +
                        C46827 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C1406 = C114 * C1399;
    const double C4961 = C4730 * C1399;
    const double C16323 = C16092 * C1399;
    const double C22203 = C21830 * C1399;
    const double C1566 = C114 * C1559;
    const double C5681 = C4730 * C1559;
    const double C17043 = C16092 * C1559;
    const double C22304 = C21830 * C1559;
    const double C47075 = ae * C47074;
    const double C1135 =
        (3 * C46982 + C46827 * C47074 + (2 * C46976 + C46827 * C47064) * ae) /
        C46772;
    const double C1675 = (C46968 * C47074) / C46772;
    const double C47216 = C47184 + C47214;
    const double C47258 = ae * C47253;
    const double C6099 = C4730 * C6084;
    const double C12162 = C114 * C6084;
    const double C17449 = C16092 * C6084;
    const double C23556 = C21830 * C6084;
    const double C47321 = C47320 + C47308;
    const double C47340 = ae * C47335;
    const double C23756 = (2 * C47240 + C46968 * C47335) / C46772;
    const double C23757 =
        (2 * (2 * ae * (2 * C47238 + C46968 * C47333) + C46827 * C47378) +
         C47380 + C47380 +
         C46827 *
             (C47378 + C47377 + C47377 +
              C46827 *
                  (2 * ae * (2 * C47347 + C46968 * (C46916 + C46938 * C47077)) +
                   C46827 * (2 * C47348 +
                             C46968 * (C46870 +
                                       (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C47077))))) /
        C46798;
    const double C23407 = C21830 * C23399;
    const double C28584 = C16092 * C23399;
    const double C39632 = C4730 * C23399;
    const double C43535 = C114 * C23399;
    const double C11288 = C940 * C47907;
    const double C32404 = C940 * C47907;
    const double C1411 = C1409 + C1403;
    const double C4984 = C4976 + C4954;
    const double C16346 = C16338 + C16316;
    const double C1571 = C1569 + C1563;
    const double C5692 = C5688 + C5676;
    const double C17054 = C17050 + C17038;
    const double C6231 = C47938 * C1140;
    const double C17581 = C47938 * C1140;
    const double C6236 = C6230 + C5928;
    const double C17586 = C17580 + C17284;
    const double C11829 = C11827 + C1681;
    const double C6442 = C6436 + C6092;
    const double C17792 = C17786 + C17442;
    const double C47179 = ae * C47178;
    const double C5923 =
        (4 * C47028 + C46827 * C47178 + (3 * C47018 + C46827 * C47167) * ae) /
        C46772;
    const double C6579 = (C46968 * C47178) / C46772;
    const double C27717 = C47938 * C6581;
    const double C38768 = C47938 * C6581;
    const double C39637 = C39635 + C39628;
    const double C43538 = C43537 + C43534;
    const double C28589 = C28587 + C28580;
    const double C44535 = C44534 * C47579;
    const double C11674 = C1572 * C47907;
    const double C12026 = C1572 * C4725;
    const double C32782 = C1572 * C47907;
    const double C33109 = C1572 * C16087;
    const double C43784 = C1572 * C47579;
    const double C11695 = C11691 * C47907;
    const double C32783 = C11691 * C47907;
    const double C43785 = C11691 * C47579;
    const double C12164 = C12163 + C1680;
    const double C38302 = C38296 + C6094;
    const double C38773 = C38771 + C6584;
    const double C27251 = C27245 + C17444;
    const double C27722 = C27720 + C17928;
    const double C38303 = C38297 + C6097;
    const double C43889 = C43888 + C12161;
    const double C27252 = C27246 + C17447;
    const double C1141 =
        (3 * (C46860 + C46980 + C46980 + C46827 * C47065) + C47075 + C47075 +
         C46827 *
             (2 * C47065 + C47072 + C47072 +
              C46827 * (C46872 + C47068 + C47068 +
                        C46827 * (2 * ae * C46943 +
                                  C46827 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C1148 = C114 * C1135;
    const double C6235 = C4730 * C1135;
    const double C17585 = C16092 * C1135;
    const double C21974 = C21830 * C1135;
    const double C1682 = C114 * C1675;
    const double C6441 = C4730 * C1675;
    const double C17791 = C16092 * C1675;
    const double C22459 = C21830 * C1675;
    const double C47217 = C47216 + C47209;
    const double C6582 =
        (3 * (C47122 + C47126 + C47126 + C46827 * C47262) + C47258 + C47258 +
         C46827 *
             (2 * C47262 + C47259 + C47259 +
              C46827 * (C47252 + C47260 + C47260 +
                        C46827 * (2 * ae * C46968 * C47186 +
                                  C46827 * C46968 * C46834 *
                                      (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                      C46830)))) /
        C46798;
    const double C47323 = ae * C47321;
    const double C47322 = C46827 * C47321;
    const double C47349 = C46968 * C47321;
    const double C22751 = (C47178 + C47321 * C47077) / C46772;
    const double C22752 =
        (3 * (C47223 + C47227 + C47227 + C46827 * C47344) + C47340 + C47340 +
         C46827 *
             (2 * C47344 + C47341 + C47341 +
              C46827 * (C47334 + C47342 + C47342 +
                        C46827 * (2 * ae * (C46916 + C46938 * C47077) +
                                  C46827 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C47077))))) /
        C46798;
    const double C23761 = C21830 * C23756;
    const double C27241 = C16092 * C23756;
    const double C38292 = C4730 * C23756;
    const double C43887 = C114 * C23756;
    const double C12027 = C1571 * C47907;
    const double C33110 = C1571 * C47907;
    const double C6238 = C6236 + C5928;
    const double C17588 = C17586 + C17284;
    const double C11830 = C11829 + C1681;
    const double C6444 = C6442 + C6092;
    const double C17794 = C17792 + C17442;
    const double C5925 =
        (4 * (2 * C47019 + C47026 + C47026 + C46827 * C47168) + C47179 +
         C47179 +
         C46827 * (3 * C47168 + C47176 + C47176 +
                   C46827 * (2 * C47160 + C47172 + C47172 +
                             C46827 * (C46858 + C47164 + C47164 +
                                       C46827 * (2 * ae * C46916 +
                                                 C46827 * C46870))))) /
        C46798;
    const double C5933 = C4730 * C5923;
    const double C17289 = C16092 * C5923;
    const double C22639 = C21828 * C5923;
    const double C22635 = C21830 * C5923;
    const double C6585 = C4730 * C6579;
    const double C11521 = C114 * C6579;
    const double C17929 = C16092 * C6579;
    const double C22757 = C21830 * C6579;
    const double C23115 = C21828 * C6579;
    const double C27080 = C16090 * C6579;
    const double C38131 = C4728 * C6579;
    const double C43539 = C43538 * C47579;
    const double C12165 = C12164 + C12159;
    const double C38308 = C38302 + C38286;
    const double C38775 = C38773 + C38766;
    const double C27257 = C27251 + C27235;
    const double C27724 = C27722 + C27715;
    const double C38309 = C38303 + C38288;
    const double C43890 = C43889 + C43886;
    const double C27258 = C27252 + C27237;
    const double C47218 = ae * C47217;
    const double C5924 =
        (4 * C47051 + C46827 * C47217 + (3 * C47041 + C46827 * C47207) * ae) /
        C46772;
    const double C6580 = (C46968 * C47217) / C46772;
    const double C47324 = C47282 + C47322;
    const double C47356 = ae * C47349;
    const double C22762 = C21830 * C22751;
    const double C27719 = C16092 * C22751;
    const double C38770 = C4730 * C22751;
    const double C43419 = C114 * C22751;
    const double C6240 = C6238 + C6231;
    const double C17590 = C17588 + C17581;
    const double C11831 = C11830 + C11828;
    const double C6446 = C6444 + C6437;
    const double C17796 = C17794 + C17787;
    const double C38772 = C38767 + C6585;
    const double C27721 = C27716 + C17929;
    const double C12166 = C12165 * C4725;
    const double C33241 = C12165 * C16087;
    const double C43884 = C12165 * C47579;
    const double C43891 = C43890 * C47579;
    const double C5926 =
        (4 * (2 * C47042 + C47049 + C47049 + C46827 * C47205) + C47218 +
         C47218 +
         C46827 * (3 * C47205 + C47215 + C47215 +
                   C46827 * (2 * C47196 + C47211 + C47211 +
                             C46827 * (C47183 + C47204 + C47204 +
                                       C46827 * (2 * ae * C47186 +
                                                 C46827 * C46834 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830))))) /
        C46798;
    const double C5935 = C4730 * C5924;
    const double C17291 = C16092 * C5924;
    const double C22863 = C21830 * C5924;
    const double C6587 = C4730 * C6580;
    const double C11522 = C114 * C6580;
    const double C17931 = C16092 * C6580;
    const double C23012 = C21830 * C6580;
    const double C47325 = C47324 + C47316;
    const double C23112 =
        (4 * (2 * C47249 + C47246 + C47246 + C46827 * C47363) + C47356 +
         C47356 +
         C46827 * (3 * C47363 + C47357 + C47357 +
                   C46827 * (2 * C47361 + C47358 + C47358 +
                             C46827 * (C47348 + C47359 + C47359 +
                                       C46827 * (2 * ae * C46968 * C46938 +
                                                 C46827 * C46968 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830))))) /
        C46798;
    const double C12160 = C11831 * C47907;
    const double C33242 = C11831 * C47907;
    const double C38774 = C38772 + C6585;
    const double C27723 = C27721 + C17929;
    const double C47326 = ae * C47325;
    const double C22632 =
        (5 * C47178 + C46827 * C47325 + (4 * C47167 + C46827 * C47312) * ae) /
        C46772;
    const double C23111 = (C46968 * C47325) / C46772;
    const double C38776 = C38774 + C38768;
    const double C27725 = C27723 + C27717;
    const double C22633 =
        (5 * (3 * C47168 + C47176 + C47176 + C46827 * C47314) + C47326 +
         C47326 +
         C46827 *
             (4 * C47314 + C47323 + C47323 +
              C46827 *
                  (3 * C47306 + C47319 + C47319 +
                   C46827 * (2 * C47298 + C47313 + C47313 +
                             C46827 * (C46870 + C47302 + C47302 +
                                       C46827 * (2 * ae * C46938 +
                                                 C46827 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830)))))) /
        C46798;
    const double C22640 = C21830 * C22632;
    const double C23116 = C21830 * C23111;
    const double C27081 = C16092 * C23111;
    const double C38132 = C4730 * C23111;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
                   C164 * C103 + C165 * C104) *
                      C47853 * C47650 * C47691 -
                  (C349 * C104 + C350 * C103 +
                   (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                      C47853 * C47650 * C47698 +
                  ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 +
                   C351 * C103 + C352 * C104) *
                      C47853 * C47650 * C2848) *
                     C47609 +
                 ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
                      C47698 -
                  (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
                      C47691 -
                  (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
                      C2848) *
                     C47618 +
                 ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
                      C47691 -
                  (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 *
                      C47698 +
                  (C352 * C102 + C354 * C103 +
                   (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
                      C47853 * C47650 * C2848) *
                     C2851)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47691 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C47698 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C47889 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C2848) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C47691 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47698 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47889) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47966 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47962 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47952 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47650 * C47930) *
              C2588 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47962 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47966 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47952 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C47836 * C1400) * C104) *
               C47853 * C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C2480 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47695) *
              C47965 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47695 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C2480) *
              C47958 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C2480 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 *
               C47695) *
              C47945 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C47836 * C643) * C104) *
               C47853 * C47650 * C47695 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 *
               C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47960 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47949 +
            ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C47853 * C47923) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47949 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47960 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
                C47853 * C47923) *
               C47695) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47949 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47960 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47960 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47949 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C104) *
                C47853 * C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C47695) *
              C47609 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C47618 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47889 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47889) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C2480 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47695) *
              C47965 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47695 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C2480) *
              C47958 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C2480 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 *
               C47695) *
              C47945 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C47836 * C643) * C104) *
               C47853 * C47650 * C47695 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 *
               C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47966 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47962 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47952 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47650 * C47930) *
              C2588 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47962 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47966 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47952 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C47836 * C1400) * C104) *
               C47853 * C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47691 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47698 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C2848) *
              C47874 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C47691 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47698 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C3242) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
                   C164 * C103 + C165 * C104) *
                      C47853 * C47733 -
                  (C532 * C104 + C533 * C103 +
                   (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                      C47853 * C47740 +
                  ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 +
                   C534 * C103 + C535 * C104) *
                      C47853 * C3750) *
                     C47691 +
                 (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 +
                   C938 * C103 + C939 * C104) *
                      C47853 * C47740 -
                  (C349 * C104 + C350 * C103 +
                   (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                      C47853 * C47733 -
                  (C2155 * C104 + C2156 * C103 +
                   (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
                      C47853 * C3750) *
                     C47698 +
                 (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 +
                   C351 * C103 + C352 * C104) *
                      C47853 * C47733 -
                  (C1571 * C104 + C1572 * C103 +
                   (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                      C47853 * C47740 +
                  ((C113 * C1264 + C1292 + C1292 + C47836 * C1282) * C102 +
                   (C113 * C1265 + C1293 + C1293 + C47836 * C1283) * C103 +
                   (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C104) *
                      C47853 * C3750) *
                     C2848) *
                C47604) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47966 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47737 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C3242) *
              C47962 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C3242 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47737) *
              C47952 +
          (((C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C104) *
               C47853 * C47737 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47695) *
              C47956 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C47943 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47967 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47964 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47955 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C102) *
               C47853 * C47936) *
              C2480 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47964 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47967 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C47955 +
           ((C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C104) *
               C47853 * C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
                    C164 * C103 + C165 * C104) *
                       C47853 * C47733 -
                   (C532 * C104 + C533 * C103 +
                    (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                       C47853 * C47740 +
                   ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 +
                    C534 * C103 + C535 * C104) *
                       C47853 * C3750) *
                      C2480 +
                  (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 +
                    C938 * C103 + C939 * C104) *
                       C47853 * C47740 -
                   (C349 * C104 + C350 * C103 +
                    (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                       C47853 * C47733 -
                   (C2155 * C104 + C2156 * C103 +
                    (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
                       C47853 * C3750) *
                      C47695) *
                     C47874 +
                 (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47740 -
                   (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47733 -
                   (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C3750) *
                      C2480 +
                  ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47733 -
                   (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47740 +
                   (C2156 * C102 + C2155 * C103 +
                    (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C104) *
                       C47853 * C3750) *
                      C47695) *
                     C47615)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47695) *
              C47956 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C47943 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47966 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47737 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C3242) *
              C47962 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C3242 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47737) *
              C47952 +
          (((C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C104) *
               C47853 * C47737 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1392 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1393 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C1394 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47650 * C47930) *
              C47874 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1393 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1392 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 * C1394 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C47836 * C1400) * C104) *
               C47853 * C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47888 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47695) *
              C637 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47695 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47888) *
              C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
               C47888 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 *
               C47695) *
              C639 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C47836 * C643) * C104) *
               C47853 * C47650 * C47695 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 *
               C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C1792 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C1793 +
            ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C47853 * C47923) *
               C47888 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C1793 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C1792 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
                C47853 * C47923) *
               C47695) *
              C47874 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C1793 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C1792 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
               C47888 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C1792 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C1793 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C104) *
                C47853 * C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47889 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C1392 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47737 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47889) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47889 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47737) *
              C1394 +
          (((C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C104) *
               C47853 * C47737 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47888 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C47695) *
              C281 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C47888 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C282 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47889 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C47888 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C2255 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C102) *
               C47853 * C47936) *
              C47888 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C2255 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C2254 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C2256 +
           ((C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C104) *
               C47853 * C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
               C164 * C103 + C165 * C104) *
                  C47853 * C47650 * C47632 * C108 -
              (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
                  C47632 * C109 +
              (C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
                  C47632 * C110 -
              (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 *
                  C47632 * C111 +
              (C167 * C102 + C168 * C103 +
               (C113 * C121 + C153 + C153 + C47836 * C135) * C104) *
                  C47853 * C47650 * C47632 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C47853 * C47650 * C47959 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                   C47853 * C47650 * C47947 +
               ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C47853 * C47650 * C47920) *
                  C281 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
                   C47947 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
                   C47959 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
                   C47920) *
                  C282 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
                   C47959 -
               ((C113 * C292 + C335 + C335 + C47836 * C312) * C104 +
                C353 * C103 + C349 * C102) *
                   C47853 * C47650 * C47947 +
               (C352 * C102 + C354 * C103 +
                (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
                   C47853 * C47650 * C47920) *
                  C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47960 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47949 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47632 * C281 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47949 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47960 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
              C47632 * C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47960 -
           ((C113 * C475 + C518 + C518 + C47836 * C495) * C104 + C536 * C103 +
            C532 * C102) *
               C47853 * C47949 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C47836 * C496) * C104) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C47956 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
              C47853 * C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C47853 * C47650 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C47836 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C47836 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
              C47853 * C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C47836 * C1141) * C104) *
              C47853 * C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47960 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47949 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C1050 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47949 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47960 -
           ((C113 * C1258 + C1286 + C1286 + C47836 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C47836 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C47923) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47960 -
           ((C113 * C1261 + C1289 + C1289 + C47836 * C1279) * C104 +
            (C113 * C1262 + C1290 + C1290 + C47836 * C1280) * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47949 +
           ((C113 * C1264 + C1292 + C1292 + C47836 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C47836 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C104) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C1793 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47632 * C47956 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C1793 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C1792 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
              C47632 * C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C1792 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C1793 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C47836 * C496) * C104) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C1793 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47959 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C1793 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C1792 -
           ((C113 * C1258 + C1286 + C1286 + C47836 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C47836 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C47923) *
              C47947 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C1792 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C1793 +
           ((C113 * C1264 + C1292 + C1292 + C47836 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C47836 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C104) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C1967 -
          (C532 * C104 + C533 * C103 +
           (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
              C47853 * C1968 +
          ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
           C535 * C104) *
              C47853 * C1969 -
          ((C113 * C1972 + C1991 + C1991 + C47836 * C1984) * C104 +
           (C113 * C1973 + C1992 + C1992 + C47836 * C1985) * C103 +
           (C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C102) *
              C47853 * C1970 +
          ((C113 * C1975 + C1994 + C1994 + C47836 * C1987) * C102 +
           (C113 * C1976 + C1995 + C1995 + C47836 * C1988) * C103 +
           (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C104) *
              C47853 * C1971) *
         C47632 * C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C1050 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C47889 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C47920) *
              C47874 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C1050 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C1051 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47889 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47632 * C637 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
              C47632 * C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47889 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
              C47632 * C639 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C104) *
               C47853 * C47737 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C2255 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C102) *
               C47853 * C47936) *
              C47632 * C47874 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C2255 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C2254 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C2256 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C104) *
               C47853 * C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47959 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47947 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47959 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
               C47959 -
           ((C113 * C292 + C335 + C335 + C47836 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C47853 * C47650 * C47947 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C47632 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C47632 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C47632 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 * C47632 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C47836 * C135) * C104) *
              C47853 * C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C47956 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
              C47853 * C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C47853 * C47650 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C47836 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C47836 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
              C47853 * C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C47836 * C1141) * C104) *
              C47853 * C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C1793 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47632 * C47956 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C1793 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C1792 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
              C47632 * C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C1792 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C1793 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C47836 * C496) * C104) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C1793 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47959 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C1793 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C1792 -
           ((C113 * C1258 + C1286 + C1286 + C47836 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C47836 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C47923) *
              C47947 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C1792 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C1793 +
           ((C113 * C1264 + C1292 + C1292 + C47836 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C47836 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C104) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47888 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47695) *
              C47609 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C47888 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C47618 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C47888 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C3242) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47733 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47740 +
            ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C47853 * C3750) *
               C47888 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47740 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47733 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
                C47853 * C3750) *
               C47695) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47740 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47733 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C3750) *
               C47888 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47733 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47740 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C104) *
                C47853 * C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47959 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C47920) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C47959 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47947 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47632 * C47965 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
              C47632 * C47958 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C3242 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
              C47632 * C47945 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C104) *
               C47853 * C47737 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47967 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47964 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47955 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C102) *
               C47853 * C47936) *
              C47632 * C2588 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47964 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47967 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47955 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C104) *
               C47853 * C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 +
                    C164 * C103 + C165 * C104) *
                       C47853 * C47733 -
                   (C532 * C104 + C533 * C103 +
                    (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                       C47853 * C47740 +
                   ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 +
                    C534 * C103 + C535 * C104) *
                       C47853 * C3750) *
                      C47632 * C47609 +
                  ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47740 -
                   (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47733 -
                   (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C3750) *
                      C47632 * C47618 +
                  ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47733 -
                   (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47740 +
                   (C535 * C102 + C537 * C103 +
                    (C113 * C476 + C519 + C519 + C47836 * C496) * C104) *
                       C47853 * C3750) *
                      C47632 * C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47632 * C47965 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
              C47632 * C47958 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C3242 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
              C47632 * C47945 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C104) *
               C47853 * C47737 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47959 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C3242) *
               C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C47920) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C3242) *
               C47959 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47947 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47888 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47695) *
              C637 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47695 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47888) *
              C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
               C47888 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 *
               C47695) *
              C639 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C47836 * C643) * C104) *
               C47853 * C47650 * C47695 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 *
               C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1392 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1393 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C1394 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47650 * C47930) *
              C47874 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1393 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1392 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 * C1394 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C47836 * C1400) * C104) *
               C47853 * C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C47888 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C47695) *
              C281 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C47888 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C47695) *
              C282 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47889 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
               C47888 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C104) *
                C47853 * C47737 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47889 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C1392 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47737 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47889) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47889 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47737) *
              C1394 +
          (((C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C104) *
               C47853 * C47737 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
               C47853 * C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47959 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47947 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47959 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
               C47959 -
           ((C113 * C292 + C335 + C335 + C47836 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C47853 * C47650 * C47947 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C47632 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C47632 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C47632 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 * C47632 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C47836 * C135) * C104) *
              C47853 * C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47960 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47949 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C47632 * C281 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47949 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47960 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C47853 * C47923) *
              C47632 * C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47960 -
           ((C113 * C475 + C518 + C518 + C47836 * C495) * C104 + C536 * C103 +
            C532 * C102) *
               C47853 * C47949 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C47836 * C496) * C104) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C47956 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
              C47853 * C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C47853 * C47650 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C47836 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C47836 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
              C47853 * C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C47836 * C1141) * C104) *
              C47853 * C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47960 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47949 +
           ((C113 * C470 + C505 + C505 + C47836 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C47853 * C47923) *
              C1050 +
          (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C47853 * C47949 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47960 -
           ((C113 * C1258 + C1286 + C1286 + C47836 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C47836 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C102) *
               C47853 * C47923) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47960 -
           ((C113 * C1261 + C1289 + C1289 + C47836 * C1279) * C104 +
            (C113 * C1262 + C1290 + C1290 + C47836 * C1280) * C103 +
            (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
               C47853 * C47949 +
           ((C113 * C1264 + C1292 + C1292 + C47836 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C47836 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C104) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47889 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
               C47853 * C47737) *
              C47632 * C637 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
              C47632 * C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47889 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C47853 * C47737) *
              C47632 * C639 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C104) *
               C47853 * C47737 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C47853 * C47889 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C47836 * C489) * C102) *
                C47853 * C47737) *
               C1050 +
           (((C113 * C905 + C921 + C921 + C47836 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C47853 * C47737 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
                C47853 * C47889) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C47853 * C47889 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C102) *
                C47853 * C47737) *
               C47920) *
              C47874 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C47853 * C47737 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47889) *
               C1050 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47889 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C47853 * C47737) *
               C1051 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C104) *
                C47853 * C47737 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C47632 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C47632 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C47632 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C47853 * C47650 * C47632 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C47836 * C135) * C104) *
              C47853 * C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C47959 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 *
               C47947 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 *
               C47959 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 *
               C47959 -
           ((C113 * C292 + C335 + C335 + C47836 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C47853 * C47650 * C47947 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C47853 * C47650 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
               C47853 * C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C47853 * C47650 * C47920) *
              C47956 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C47853 * C47650 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C47853 * C47650 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C47853 * C47650 *
               C47920) *
              C47943 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C47853 * C47650 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C47853 * C47650 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C47836 * C313) * C104) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C47853 * C47650 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C102) *
              C47853 * C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C47853 * C47650 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C47836 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C47836 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C102) *
              C47853 * C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C47836 * C1141) * C104) *
              C47853 * C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47691 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47698 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C2848) *
                      C47609 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47698 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47691 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C2848) *
                      C47618 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47691 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47698 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C2848) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47691 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C47698 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C47889 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C2848) *
                      C2588 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C47691 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47698 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C47889) *
                       C2848) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47966 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47962 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47952 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47650 * C47930) *
                      C2588 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47962 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47966 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47952 +
                   ((C6241 + C6240) * C4725 +
                    (C4727 * C1124 + C6234 + C6234 + C4723 * C1136 +
                     C4729 * C1129 + C6235 + C6235 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47695) *
                      C47965 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C2480) *
                      C47958 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47695) *
                      C47945 +
                  (((C5329 + C5328) * C4725 +
                    (C4727 * C292 + C5322 + C5322 + C4723 * C312 +
                     C4729 * C293 + C5323 + C5323 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47650 * C2480) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47960 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47949 +
                    ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                      C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                         C4725 +
                     (C5182 + C5183) * C47907) *
                        C47853 * C47923) *
                       C2480 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47949 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47960 -
                    ((C7180 + C7181) * C47907 +
                     (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                      C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                         C4725) *
                        C47853 * C47923) *
                       C47695) *
                      C2588 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47949 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47960 -
                    ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                        C47853 * C47923) *
                       C2480 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47960 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47949 +
                    ((C7181 + C7180) * C4725 +
                     (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                      C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                         C47907) *
                        C47853 * C47923) *
                       C47695) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C47609 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C2480 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C47618 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C47889 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47695) *
                      C47965 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C2480) *
                      C47958 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47695) *
                      C47945 +
                  (((C5329 + C5328) * C4725 +
                    (C4727 * C292 + C5322 + C5322 + C4723 * C312 +
                     C4729 * C293 + C5323 + C5323 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47650 * C2480) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47966 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47962 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47952 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47650 * C47930) *
                      C2588 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47962 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47966 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47952 +
                   ((C6241 + C6240) * C4725 +
                    (C4727 * C1124 + C6234 + C6234 + C4723 * C1136 +
                     C4729 * C1129 + C6235 + C6235 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47691 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47698 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C3242 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C2848) *
                      C47874 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C47691 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47698 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C3242) *
                       C2848) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47733 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47740 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C3750) *
                      C47691 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47740 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47733 -
                   ((C7180 + C7181) * C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C3750) *
                      C47698 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47733 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47740 +
                   ((C4727 * C1264 + C6096 + C6096 + C4723 * C1282 +
                     C4729 * C6081 + C6097 + C6097 + C47938 * C6085) *
                        C4725 +
                    (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                     C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                        C47907) *
                       C47853 * C3750) *
                      C2848) *
                 C47604) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C3242 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47966 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47737 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C3242) *
                      C47962 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C3242 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47737) *
                      C47952 +
                  (((C4727 * C1670 + C6584 + C6584 + C4723 * C1676 +
                     C4729 * C6577 + C6585 + C6585 + C47938 * C6581) *
                        C4725 +
                    (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                     C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C3242) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C47956 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C2480 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C47943 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C3242 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47967 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47964 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47955 -
                   ((C7322 + C7323) * C47907 +
                    (C4729 * C2370 + C6970 + C6970 + C47938 * C2376 +
                     C4727 * C1974 + C6971 + C6971 + C4723 * C1986) *
                        C4725) *
                       C47853 * C47936) *
                      C2480 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47964 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47967 -
                   ((C7180 + C7181) * C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C47955 +
                   ((C4727 * C2370 + C7460 + C7460 + C4723 * C2376 +
                     C4729 * C7453 + C7461 + C7461 + C47938 * C7457) *
                        C4725 +
                    (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                     C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                        C47907) *
                       C47853 * C47936) *
                      C47695) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47733 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47740 +
                    ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                      C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                         C4725 +
                     (C5182 + C5183) * C47907) *
                        C47853 * C3750) *
                       C2480 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47740 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47733 -
                    ((C7180 + C7181) * C47907 +
                     (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                      C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                         C4725) *
                        C47853 * C3750) *
                       C47695) *
                      C47874 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47740 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47733 -
                    ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                        C47853 * C3750) *
                       C2480 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47733 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47740 +
                    ((C7181 + C7180) * C4725 +
                     (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                      C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                         C47907) *
                        C47853 * C3750) *
                       C47695) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C47956 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C2480 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C47943 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C3242 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C2480 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C3242 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47966 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47737 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C3242) *
                      C47962 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C3242 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47737) *
                      C47952 +
                  (((C4727 * C1670 + C6584 + C6584 + C4723 * C1676 +
                     C4729 * C6577 + C6585 + C6585 + C47938 * C6581) *
                        C4725 +
                    (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                     C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C3242) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1392 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1393 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C1394 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47650 * C47930) *
                      C47874 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1393 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1392 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C1394 +
                   ((C6241 + C6240) * C4725 +
                    (C4727 * C1124 + C6234 + C6234 + C4723 * C1136 +
                     C4729 * C1129 + C6235 + C6235 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47695) *
                      C637 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47888) *
                      C638 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47695) *
                      C639 +
                  (((C5329 + C5328) * C4725 +
                    (C4727 * C292 + C5322 + C5322 + C4723 * C312 +
                     C4729 * C293 + C5323 + C5323 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47650 * C47888) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C1792 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C1793 +
                    ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                      C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                         C4725 +
                     (C5182 + C5183) * C47907) *
                        C47853 * C47923) *
                       C47888 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C1793 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C1792 -
                    ((C7180 + C7181) * C47907 +
                     (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                      C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                         C4725) *
                        C47853 * C47923) *
                       C47695) *
                      C47874 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C1793 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C1792 -
                    ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                        C47853 * C47923) *
                       C47888 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C1792 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C1793 +
                    ((C7181 + C7180) * C4725 +
                     (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                      C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                         C47907) *
                        C47853 * C47923) *
                       C47695) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47889 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C1392 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47737 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47889) *
                      C1393 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47889 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47737) *
                      C1394 +
                  (((C4727 * C1670 + C6584 + C6584 + C4723 * C1676 +
                     C4729 * C6577 + C6585 + C6585 + C47938 * C6581) *
                        C4725 +
                    (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                     C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47889) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C281 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C47888 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C282 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C47889 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C2254 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C2255 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C2256 -
                   ((C7322 + C7323) * C47907 +
                    (C4729 * C2370 + C6970 + C6970 + C47938 * C2376 +
                     C4727 * C1974 + C6971 + C6971 + C4723 * C1986) *
                        C4725) *
                       C47853 * C47936) *
                      C47888 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C2255 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C2254 -
                   ((C7180 + C7181) * C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C2256 +
                   ((C4727 * C2370 + C7460 + C7460 + C4723 * C2376 +
                     C4729 * C7453 + C7461 + C7461 + C47938 * C7457) *
                        C4725 +
                    (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                     C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                        C47907) *
                       C47853 * C47936) *
                      C47695) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] += (0.5 * std::pow(Pi, 2.5) *
                     (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                        C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                           C4725 +
                       (C4776 + C4777) * C47907) *
                          C47853 * C47650 * C47632 * C108 -
                      ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                          C47853 * C47650 * C47632 * C109 +
                      ((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                          C47853 * C47650 * C47632 * C110 -
                      ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                          C47853 * C47650 * C47632 * C111 +
                      ((C4783 + C4782) * C4725 +
                       (C4727 * C120 + C4758 + C4758 + C4723 * C134 +
                        C4729 * C641 + C4759 + C4759 + C47938 * C643) *
                           C47907) *
                          C47853 * C47650 * C47632 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                         C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                            C4725 +
                        (C4776 + C4777) * C47907) *
                           C47853 * C47650 * C47959 -
                       ((C4978 + C4979) * C47907 +
                        (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                         C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                            C4725) *
                           C47853 * C47650 * C47947 +
                       ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                         C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                            C4725 +
                        (C4980 + C4981) * C47907) *
                           C47853 * C47650 * C47920) *
                          C281 +
                      (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                           C47853 * C47650 * C47947 -
                       ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                           C47853 * C47650 * C47959 -
                       ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                           C47853 * C47650 * C47920) *
                          C282 +
                      (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                           C47853 * C47650 * C47959 -
                       ((C4729 * C291 + C4958 + C4958 + C47938 * C311 +
                         C4727 * C290 + C4959 + C4959 + C4723 * C310) *
                            C47907 +
                        (C4983 + C4982) * C4725) *
                           C47853 * C47650 * C47947 +
                       ((C4985 + C4984) * C4725 +
                        (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                         C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                            C47907) *
                           C47853 * C47650 * C47920) *
                          C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47960 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47632 * C281 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47949 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47960 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C47923) *
                      C47632 * C282 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47960 -
                   ((C4729 * C908 + C5160 + C5160 + C47938 * C918 +
                     C4727 * C473 + C5161 + C5161 + C4723 * C493) *
                        C47907 +
                    (C5185 + C5184) * C4725) *
                       C47853 * C47949 +
                   ((C5187 + C5186) * C4725 +
                    (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                     C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1050 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C4978 + C4979) * C47907 +
                   (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                    C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                       C4725) *
                      C47853 * C47650 * C1119 +
                  ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                    C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                       C4725 +
                   (C4980 + C4981) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C4729 * C1128 + C5928 + C5928 + C47938 * C1140 +
                    C4727 * C1125 + C5929 + C5929 + C4723 * C1137) *
                       C47907 +
                   (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                    C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                       C4725) *
                      C47853 * C47650 * C1121 +
                  ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                    C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                       C4725 +
                   (C4727 * C1128 + C5934 + C5934 + C4723 * C1140 +
                    C4729 * C5922 + C5935 + C5935 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47960 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C1050 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47949 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47960 -
                   ((C4729 * C1265 + C6088 + C6088 + C47938 * C1283 +
                     C4727 * C1259 + C6089 + C6089 + C4723 * C1277) *
                        C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C47923) *
                      C1051 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47960 -
                   ((C4729 * C1671 + C6092 + C6092 + C47938 * C1677 +
                     C4727 * C1262 + C6093 + C6093 + C4723 * C1280) *
                        C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C1264 + C6096 + C6096 + C4723 * C1282 +
                     C4729 * C6081 + C6097 + C6097 + C47938 * C6085) *
                        C4725 +
                    (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                     C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C1792 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47632 * C47956 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C1793 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C1792 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C47923) *
                      C47632 * C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C1792 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C1793 +
                   ((C5187 + C5186) * C4725 +
                    (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                     C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C1792 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47959 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C1793 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C1792 -
                   ((C4729 * C1265 + C6088 + C6088 + C47938 * C1283 +
                     C4727 * C1259 + C6089 + C6089 + C4723 * C1277) *
                        C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C47923) *
                      C47947 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C1792 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C1264 + C6096 + C6096 + C4723 * C1282 +
                     C4729 * C6081 + C6097 + C6097 + C47938 * C6085) *
                        C4725 +
                    (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                     C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C1967 -
                  ((C5180 + C5181) * C47907 +
                   (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                    C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                       C4725) *
                      C47853 * C1968 +
                  ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                    C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                       C4725 +
                   (C5182 + C5183) * C47907) *
                      C47853 * C1969 -
                  ((C4729 * C2371 + C6968 + C6968 + C47938 * C2377 +
                    C4727 * C1973 + C6969 + C6969 + C4723 * C1985) *
                       C47907 +
                   (C4729 * C2370 + C6970 + C6970 + C47938 * C2376 +
                    C4727 * C1974 + C6971 + C6971 + C4723 * C1986) *
                       C4725) *
                      C47853 * C1970 +
                  ((C4727 * C1975 + C6972 + C6972 + C4723 * C1987 +
                    C4729 * C6961 + C6973 + C6973 + C47938 * C6965) *
                       C4725 +
                   (C4727 * C1976 + C6974 + C6974 + C4723 * C1988 +
                    C4729 * C6962 + C6975 + C6975 + C47938 * C6966) *
                       C47907) *
                      C47853 * C1971) *
                 C47632 * C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C1050 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C1051 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C47889 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C47920) *
                      C47874 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C1050 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C1051 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C47889) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47889 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47632 * C637 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47737 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47889) *
                      C47632 * C638 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47889 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C47737) *
                      C47632 * C639 +
                  (((C5471 + C5470) * C4725 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47889) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C2254 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C2255 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C2256 -
                   ((C7322 + C7323) * C47907 +
                    (C4729 * C2370 + C6970 + C6970 + C47938 * C2376 +
                     C4727 * C1974 + C6971 + C6971 + C4723 * C1986) *
                        C4725) *
                       C47853 * C47936) *
                      C47632 * C47874 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C2255 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C2254 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C2256 +
                   ((C7323 + C7322) * C4725 +
                    (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                     C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                        C47907) *
                       C47853 * C47936) *
                      C47632 * C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47959 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4729 * C291 + C4958 + C4958 + C47938 * C311 +
                     C4727 * C290 + C4959 + C4959 + C4723 * C310) *
                        C47907 +
                    (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C4783 + C4782) * C4725 +
                   (C4727 * C120 + C4758 + C4758 + C4723 * C134 + C4729 * C641 +
                    C4759 + C4759 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1050 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C4978 + C4979) * C47907 +
                   (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                    C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                       C4725) *
                      C47853 * C47650 * C1119 +
                  ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                    C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                       C4725 +
                   (C4980 + C4981) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C4729 * C1128 + C5928 + C5928 + C47938 * C1140 +
                    C4727 * C1125 + C5929 + C5929 + C4723 * C1137) *
                       C47907 +
                   (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                    C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                       C4725) *
                      C47853 * C47650 * C1121 +
                  ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                    C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                       C4725 +
                   (C4727 * C1128 + C5934 + C5934 + C4723 * C1140 +
                    C4729 * C5922 + C5935 + C5935 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C1792 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47632 * C47956 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C1793 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C1792 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C47923) *
                      C47632 * C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C1792 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C1793 +
                   ((C5187 + C5186) * C4725 +
                    (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                     C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C1792 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47959 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C1793 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C1792 -
                   ((C4729 * C1265 + C6088 + C6088 + C47938 * C1283 +
                     C4727 * C1259 + C6089 + C6089 + C4723 * C1277) *
                        C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C47923) *
                      C47947 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C1792 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C1793 +
                   ((C4727 * C1264 + C6096 + C6096 + C4723 * C1282 +
                     C4729 * C6081 + C6097 + C6097 + C47938 * C6085) *
                        C4725 +
                    (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                     C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C47609 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C47888 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C47618 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C3242 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C3242) *
                       C47695) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47733 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47740 +
                    ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                      C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                         C4725 +
                     (C5182 + C5183) * C47907) *
                        C47853 * C3750) *
                       C47888 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47740 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47733 -
                    ((C7180 + C7181) * C47907 +
                     (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                      C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                         C4725) *
                        C47853 * C3750) *
                       C47695) *
                      C2588 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47740 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47733 -
                    ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                        C47853 * C3750) *
                       C47888 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47733 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47740 +
                    ((C7181 + C7180) * C4725 +
                     (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                      C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                         C47907) *
                        C47853 * C3750) *
                       C47695) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[42] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47959 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47947 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C3242 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C47920) *
                      C2588 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C47959 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47947 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C3242) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C3242 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47632 * C47965 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47737 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C3242) *
                      C47632 * C47958 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C3242 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C47737) *
                      C47632 * C47945 +
                  (((C5471 + C5470) * C4725 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C3242) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47967 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47964 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47955 -
                   ((C7322 + C7323) * C47907 +
                    (C4729 * C2370 + C6970 + C6970 + C47938 * C2376 +
                     C4727 * C1974 + C6971 + C6971 + C4723 * C1986) *
                        C4725) *
                       C47853 * C47936) *
                      C47632 * C2588 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47964 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47967 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C47955 +
                   ((C7323 + C7322) * C4725 +
                    (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                     C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                        C47907) *
                       C47853 * C47936) *
                      C47632 * C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47733 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47740 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C3750) *
                      C47632 * C47609 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47740 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47733 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C3750) *
                      C47632 * C47618 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47733 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C47740 +
                   ((C5187 + C5186) * C4725 +
                    (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                     C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                        C47907) *
                       C47853 * C3750) *
                      C47632 * C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C3242 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47632 * C47965 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47737 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C3242) *
                      C47632 * C47958 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C3242 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C47737) *
                      C47632 * C47945 +
                  (((C5471 + C5470) * C4725 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C3242) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C3242 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47959 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C3242) *
                       C47947 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C3242 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C47920) *
                      C2588 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C3242) *
                       C47959 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C3242 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47947 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C3242) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47695) *
                      C637 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47888) *
                      C638 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47695) *
                      C639 +
                  (((C5329 + C5328) * C4725 +
                    (C4727 * C292 + C5322 + C5322 + C4723 * C312 +
                     C4729 * C293 + C5323 + C5323 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47650 * C47888) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1392 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1393 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C1394 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47650 * C47930) *
                      C47874 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1393 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1392 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C1394 +
                   ((C6241 + C6240) * C4725 +
                    (C4727 * C1124 + C6234 + C6234 + C4723 * C1136 +
                     C4729 * C1129 + C6235 + C6235 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C281 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C47888 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C47695) *
                      C282 +
                  ((((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                        C47853 * C47889 -
                    ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                        C47853 * C47737) *
                       C47888 +
                   (((C5693 + C5692) * C4725 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                        C47853 * C47889) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47889 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C1392 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47737 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47889) *
                      C1393 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47889 -
                   ((C6446 + C6447) * C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47737) *
                      C1394 +
                  (((C4727 * C1670 + C6584 + C6584 + C4723 * C1676 +
                     C4729 * C6577 + C6585 + C6585 + C47938 * C6581) *
                        C4725 +
                    (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                     C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C6240 + C6241) * C47907 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C4725) *
                       C47853 * C47889) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[47] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47959 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4729 * C291 + C4958 + C4958 + C47938 * C311 +
                     C4727 * C290 + C4959 + C4959 + C4723 * C310) *
                        C47907 +
                    (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C4783 + C4782) * C4725 +
                   (C4727 * C120 + C4758 + C4758 + C4723 * C134 + C4729 * C641 +
                    C4759 + C4759 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47960 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C47632 * C281 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47949 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47960 -
                   ((C5186 + C5187) * C47907 + (C5183 + C5182) * C4725) *
                       C47853 * C47923) *
                      C47632 * C282 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47960 -
                   ((C4729 * C908 + C5160 + C5160 + C47938 * C918 +
                     C4727 * C473 + C5161 + C5161 + C4723 * C493) *
                        C47907 +
                    (C5185 + C5184) * C4725) *
                       C47853 * C47949 +
                   ((C5187 + C5186) * C4725 +
                    (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                     C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1050 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C4978 + C4979) * C47907 +
                   (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                    C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                       C4725) *
                      C47853 * C47650 * C1119 +
                  ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                    C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                       C4725 +
                   (C4980 + C4981) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C4729 * C1128 + C5928 + C5928 + C47938 * C1140 +
                    C4727 * C1125 + C5929 + C5929 + C4723 * C1137) *
                       C47907 +
                   (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                    C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                       C4725) *
                      C47853 * C47650 * C1121 +
                  ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                    C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                       C4725 +
                   (C4727 * C1128 + C5934 + C5934 + C4723 * C1140 +
                    C4729 * C5922 + C5935 + C5935 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47960 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C470 + C5140 + C5140 + C4723 * C490 +
                     C4729 * C1260 + C5141 + C5141 + C47938 * C1278) *
                        C4725 +
                    (C5182 + C5183) * C47907) *
                       C47853 * C47923) *
                      C1050 +
                  (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                     C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                        C4725 +
                    (C5690 + C5691) * C47907) *
                       C47853 * C47949 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47960 -
                   ((C4729 * C1265 + C6088 + C6088 + C47938 * C1283 +
                     C4727 * C1259 + C6089 + C6089 + C4723 * C1277) *
                        C47907 +
                    (C4729 * C1264 + C6090 + C6090 + C47938 * C1282 +
                     C4727 * C1260 + C6091 + C6091 + C4723 * C1278) *
                        C4725) *
                       C47853 * C47923) *
                      C1051 +
                  (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47960 -
                   ((C4729 * C1671 + C6092 + C6092 + C47938 * C1677 +
                     C4727 * C1262 + C6093 + C6093 + C4723 * C1280) *
                        C47907 +
                    (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                     C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                        C4725) *
                       C47853 * C47949 +
                   ((C4727 * C1264 + C6096 + C6096 + C4723 * C1282 +
                     C4729 * C6081 + C6097 + C6097 + C47938 * C6085) *
                        C4725 +
                    (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                     C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47889 -
                   ((C5180 + C5181) * C47907 +
                    (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                     C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                        C4725) *
                       C47853 * C47737) *
                      C47632 * C637 +
                  (((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                       C47853 * C47737 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47889) *
                      C47632 * C638 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47889 -
                   ((C5470 + C5471) * C47907 + (C5185 + C5184) * C4725) *
                       C47853 * C47737) *
                      C47632 * C639 +
                  (((C5471 + C5470) * C4725 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                       C47853 * C47889) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C4725 +
                     (C4776 + C4777) * C47907) *
                        C47853 * C47889 -
                    ((C5180 + C5181) * C47907 +
                     (C4729 * C905 + C5138 + C5138 + C47938 * C915 +
                      C4727 * C469 + C5139 + C5139 + C4723 * C489) *
                         C4725) *
                        C47853 * C47737) *
                       C1050 +
                   (((C4727 * C905 + C5666 + C5666 + C4723 * C915 +
                      C4729 * C1263 + C5667 + C5667 + C47938 * C1281) *
                         C4725 +
                     (C5690 + C5691) * C47907) *
                        C47853 * C47737 -
                    ((C4978 + C4979) * C47907 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C4725) *
                        C47853 * C47889) *
                       C1051 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C4725 +
                     (C4980 + C4981) * C47907) *
                        C47853 * C47889 -
                    ((C6446 + C6447) * C47907 +
                     (C4729 * C1670 + C6094 + C6094 + C47938 * C1676 +
                      C4727 * C1263 + C6095 + C6095 + C4723 * C1281) *
                         C4725) *
                        C47853 * C47737) *
                       C47920) *
                      C47874 +
                  ((((C5181 + C5180) * C4725 + (C5184 + C5185) * C47907) *
                        C47853 * C47737 -
                    ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                        C47853 * C47889) *
                       C1050 +
                   (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                        C47853 * C47889 -
                    ((C5692 + C5693) * C47907 + (C5691 + C5690) * C4725) *
                        C47853 * C47737) *
                       C1051 +
                   (((C6447 + C6446) * C4725 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                        C47853 * C47889) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C4782 + C4783) * C47907 + (C4781 + C4780) * C4725) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C4783 + C4782) * C4725 +
                   (C4727 * C120 + C4758 + C4758 + C4723 * C134 + C4729 * C641 +
                    C4759 + C4759 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C47959 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C4729 * C291 + C4958 + C4958 + C47938 * C311 +
                     C4727 * C290 + C4959 + C4959 + C4723 * C310) *
                        C47907 +
                    (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C47947 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C4725 +
                    (C4776 + C4777) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C4978 + C4979) * C47907 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C4725 +
                    (C4980 + C4981) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C4979 + C4978) * C4725 + (C4982 + C4983) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C4778 + C4779) * C47907 + (C4777 + C4776) * C4725) *
                       C47853 * C47650 * C1050 -
                   ((C4984 + C4985) * C47907 + (C4981 + C4980) * C4725) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C4779 + C4778) * C4725 + (C4780 + C4781) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C5328 + C5329) * C47907 + (C4983 + C4982) * C4725) *
                       C47853 * C47650 * C1051 +
                   ((C4985 + C4984) * C4725 +
                    (C4727 * C291 + C4960 + C4960 + C4723 * C311 +
                     C4729 * C1398 + C4961 + C4961 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C4727 * C115 + C4732 + C4732 + C4723 * C129 + C4729 * C286 +
                    C4733 + C4733 + C47938 * C306) *
                       C4725 +
                   (C4776 + C4777) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C4978 + C4979) * C47907 +
                   (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                    C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                       C4725) *
                      C47853 * C47650 * C1119 +
                  ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                    C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                       C4725 +
                   (C4980 + C4981) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C4729 * C1128 + C5928 + C5928 + C47938 * C1140 +
                    C4727 * C1125 + C5929 + C5929 + C4723 * C1137) *
                       C47907 +
                   (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                    C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                       C4725) *
                      C47853 * C47650 * C1121 +
                  ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                    C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                       C4725 +
                   (C4727 * C1128 + C5934 + C5934 + C4723 * C1140 +
                    C4729 * C5922 + C5935 + C5935 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                     C164 * C47907) *
                        C10509 +
                    (C10824 + C10806) * C47940) *
                       C47650 * C47691 -
                   ((C11284 + C11292) * C47940 +
                    (C350 * C47907 +
                     (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                        C10509) *
                       C47650 * C47698 +
                   (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
                     C351 * C47907) *
                        C10509 +
                    (C11694 + C11674) * C47940) *
                       C47650 * C2848) *
                      C47609 +
                  (((C350 * C4725 + C349 * C47907) * C10509 +
                    (C11285 + C11286) * C47940) *
                       C47650 * C47698 -
                   ((C10811 + C10810) * C47940 +
                    (C165 * C47907 + C164 * C4725) * C10509) *
                       C47650 * C47691 -
                   ((C12027 + C12026) * C47940 +
                    (C352 * C47907 + C351 * C4725) * C10509) *
                       C47650 * C2848) *
                      C47618 +
                  (((C165 * C4725 + C166 * C47907) * C10509 +
                    (C10814 + C10815) * C47940) *
                       C47650 * C47691 -
                   ((C11288 + C11287) * C47940 +
                    (C353 * C47907 + C349 * C4725) * C10509) *
                       C47650 * C47698 +
                   ((C352 * C4725 + C354 * C47907) * C10509 +
                    (C1571 * C4725 +
                     (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                        C47940) *
                       C47650 * C2848) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47691 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C47698 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C47889 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C2848) *
              C2588 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C47691 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47698 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C47889) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C47966 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47962 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47650 * C47952 -
           ((C12160 + C12166) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C47650 * C47930) *
              C2588 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C47962 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C47966 -
           ((C12027 + C12026) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47952 +
           ((C1412 * C4725 + C1411 * C47907) * C10509 +
            (C11831 * C4725 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C2480 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47695) *
              C47965 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C47695 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C2480) *
              C47958 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C2480 -
           ((C11288 + C11287) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C47695) *
              C47945 +
          (((C353 * C4725 + C650 * C47907) * C10509 +
            (C940 * C4725 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C11087 + C11086) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C47650 * C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47960 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47949 +
            ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) *
                C47923) *
               C2480 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47949 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47960 -
            ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) *
                C47923) *
               C47695) *
              C2588 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47949 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47960 -
            ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) *
                C47923) *
               C2480 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47960 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) * C47949 +
            ((C12765 + C12764) * C10509 +
             (C12768 * C4725 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C2480 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C47695) *
              C47609 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C2480 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C47618 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C47889 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C2480 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C47889) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                     C164 * C47907) *
                        C10509 +
                    (C10824 + C10806) * C47940) *
                       C47650 * C2480 -
                   ((C11284 + C11292) * C47940 +
                    (C350 * C47907 +
                     (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                        C10509) *
                       C47650 * C47695) *
                      C47965 +
                  (((C350 * C4725 + C349 * C47907) * C10509 +
                    (C11285 + C11286) * C47940) *
                       C47650 * C47695 -
                   ((C10811 + C10810) * C47940 +
                    (C165 * C47907 + C164 * C4725) * C10509) *
                       C47650 * C2480) *
                      C47958 +
                  (((C165 * C4725 + C166 * C47907) * C10509 +
                    (C10814 + C10815) * C47940) *
                       C47650 * C2480 -
                   ((C11288 + C11287) * C47940 +
                    (C353 * C47907 + C349 * C4725) * C10509) *
                       C47650 * C47695) *
                      C47945 +
                  (((C353 * C4725 + C650 * C47907) * C10509 +
                    (C940 * C4725 +
                     (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                        C47940) *
                       C47650 * C47695 -
                   ((C11087 + C11086) * C47940 +
                    (C167 * C47907 + C166 * C4725) * C10509) *
                       C47650 * C2480) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                     C164 * C47907) *
                        C10509 +
                    (C10824 + C10806) * C47940) *
                       C47650 * C47966 -
                   ((C11284 + C11292) * C47940 +
                    (C350 * C47907 +
                     (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                        C10509) *
                       C47650 * C47962 +
                   (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
                     C351 * C47907) *
                        C10509 +
                    (C11694 + C11674) * C47940) *
                       C47650 * C47952 -
                   ((C12160 + C12166) * C47940 +
                    (C1412 * C47907 +
                     (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                        C10509) *
                       C47650 * C47930) *
                      C2588 +
                  (((C350 * C4725 + C349 * C47907) * C10509 +
                    (C11285 + C11286) * C47940) *
                       C47650 * C47962 -
                   ((C10811 + C10810) * C47940 +
                    (C165 * C47907 + C164 * C4725) * C10509) *
                       C47650 * C47966 -
                   ((C12027 + C12026) * C47940 +
                    (C352 * C47907 + C351 * C4725) * C10509) *
                       C47650 * C47952 +
                   ((C1412 * C4725 + C1411 * C47907) * C10509 +
                    (C11831 * C4725 +
                     (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                        C47940) *
                       C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47691 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47698 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C3242 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C2848) *
              C47874 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C47691 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47698 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C3242) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47733 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47740 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C3750) *
              C47691 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47740 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47733 -
           ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) * C3750) *
              C47698 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47733 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47740 +
           ((C11696 + C11695) * C10509 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C4725 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C3750) *
              C2848) *
         C47604) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C3242 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47966 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C3242) *
              C47962 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C3242 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47737) *
              C47952 +
          (((C12166 + C12160) * C10509 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C4725 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C12160 + C12166) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C2480 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47695) *
              C47956 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C2480 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C47943 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C3242 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C2480 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47967 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47964 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C47955 -
           ((C12566 + C12567) * C47940 + (C12549 + C12565) * C10509) * C47936) *
              C2480 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47964 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47967 -
           ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) * C47955 +
           ((C13039 + C13031) * C10509 +
            ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C4725 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47907) *
                C47940) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47733 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47740 +
            ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C3750) *
               C2480 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47740 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47733 -
            ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) * C3750) *
               C47695) *
              C47874 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47740 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47733 -
            ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) * C3750) *
               C2480 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47733 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) * C47740 +
            ((C12765 + C12764) * C10509 +
             (C12768 * C4725 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C2480 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47695) *
              C47956 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C2480 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C47943 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C3242 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C2480 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C3242 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47966 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C3242) *
              C47962 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C3242 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47737) *
              C47952 +
          (((C12166 + C12160) * C10509 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C4725 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C12160 + C12166) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C1392 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C1393 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47650 * C1394 -
           ((C11831 * C47907 +
             (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
                C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C47650 * C47930) *
              C47874 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C1393 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C1392 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C1394 +
           ((C1412 * C4725 + C1411 * C47907) * C10509 +
            (C11831 * C4725 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C47888 -
           ((C938 * C47907 +
             (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47695) *
              C637 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C938 * C4725 + C939 * C47907) * C47940) *
               C47650 * C47695 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C47888) *
              C638 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C47888 -
           ((C940 * C47907 + C939 * C4725) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C47695) *
              C639 +
          (((C353 * C4725 + C650 * C47907) * C10509 +
            (C940 * C4725 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C759 * C47907 + C536 * C4725) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C47650 * C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C1792 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1793 +
            ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) *
                C47923) *
               C47888 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C1793 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C1792 -
            ((C12768 * C47907 +
              (C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C4725) *
                 C47940 +
             (C11671 + C11693) * C10509) *
                C47923) *
               C47695) *
              C47874 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C1793 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C1792 -
            ((C2271 * C47907 + C2272 * C4725) * C47940 +
             (C10813 + C10812) * C10509) *
                C47923) *
               C47888 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C1792 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) * C1793 +
            ((C12765 + C12764) * C10509 +
             (C12768 * C4725 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47889 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C1392 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47889) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47889 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47737) *
              C1394 +
          (((C12166 + C12160) * C10509 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C4725 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C12160 + C12166) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47888 +
           (((C11292 + C11284) * C10509 +
             ((C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C4725 +
              C2156 * C47907) *
                 C47940) *
                C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C47695) *
              C281 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C47888 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C4725) * C47940 +
             (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C282 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C47889 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C47888 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C2254 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C2255 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C2256 -
           ((C12566 + C12567) * C47940 + (C12549 + C12565) * C10509) * C47936) *
              C47888 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C2255 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C2254 -
           ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) * C2256 +
           ((C13039 + C13031) * C10509 +
            ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C4725 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47907) *
                C47940) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                C164 * C47907) *
                   C10509 +
               ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
                C533 * C47907) *
                   C47940) *
                  C47650 * C47632 * C108 -
              ((C532 * C47907 + C533 * C4725) * C47940 +
               (C165 * C47907 + C164 * C4725) * C10509) *
                  C47650 * C47632 * C109 +
              ((C165 * C4725 + C166 * C47907) * C10509 +
               (C532 * C4725 + C536 * C47907) * C47940) *
                  C47650 * C47632 * C110 -
              ((C759 * C47907 + C536 * C4725) * C47940 +
               (C167 * C47907 + C166 * C4725) * C10509) *
                  C47650 * C47632 * C111 +
              ((C167 * C4725 + C168 * C47907) * C10509 +
               (C759 * C4725 +
                (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
                   C47940) *
                  C47650 * C47632 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                 C164 * C47907) *
                    C10509 +
                ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
                 C533 * C47907) *
                    C47940) *
                   C47650 * C47959 -
               ((C938 * C47907 +
                 (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                    C47940 +
                (C350 * C47907 +
                 (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                    C10509) *
                   C47650 * C47947 +
               (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
                 C351 * C47907) *
                    C10509 +
                ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
                 C1572 * C47907) *
                    C47940) *
                   C47650 * C47920) *
                  C281 +
              (((C350 * C4725 + C349 * C47907) * C10509 +
                (C938 * C4725 + C939 * C47907) * C47940) *
                   C47650 * C47947 -
               ((C532 * C47907 + C533 * C4725) * C47940 +
                (C165 * C47907 + C164 * C4725) * C10509) *
                   C47650 * C47959 -
               ((C1571 * C47907 + C1572 * C4725) * C47940 +
                (C352 * C47907 + C351 * C4725) * C10509) *
                   C47650 * C47920) *
                  C282 +
              (((C165 * C4725 + C166 * C47907) * C10509 +
                (C532 * C4725 + C536 * C47907) * C47940) *
                   C47650 * C47959 -
               ((C940 * C47907 + C939 * C4725) * C47940 +
                (C353 * C47907 + C349 * C4725) * C10509) *
                   C47650 * C47947 +
               ((C352 * C4725 + C354 * C47907) * C10509 +
                (C1571 * C4725 +
                 (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                    C47940) *
                   C47650 * C47920) *
                  C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47960 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47949 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47632 * C281 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47949 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47960 -
           ((C2271 * C47907 + C2272 * C4725) * C47940 +
            (C10813 + C10812) * C10509) *
               C47923) *
              C47632 * C282 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47960 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47949 +
           ((C10817 + C10816) * C10509 +
            (C2271 * C4725 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C1050 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C1051 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C1050 -
           ((C11288 + C11287) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C1051 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           (C10824 + C10806) * C47940) *
              C47650 * C1118 -
          ((C11284 + C11292) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
               C10509) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
            C351 * C47907) *
               C10509 +
           ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
            C1572 * C47907) *
               C47940) *
              C47650 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C47907 +
            (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
               C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
               C10509) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C4725 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C10509 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C4725 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47960 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47949 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C1050 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47949 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47960 -
           (((C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C47907 +
             (C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C4725) *
                C47940 +
            (C11671 + C11693) * C10509) *
               C47923) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47960 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47949 +
           ((C11696 + C11695) * C10509 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C4725 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C1792 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1793 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47632 * C47956 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C1793 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C1792 -
           ((C2271 * C47907 + C2272 * C4725) * C47940 +
            (C10813 + C10812) * C10509) *
               C47923) *
              C47632 * C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C1792 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C1793 +
           ((C10817 + C10816) * C10509 +
            (C2271 * C4725 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C1792 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1793 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47959 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C1793 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C1792 -
           (((C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C47907 +
             (C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C4725) *
                C47940 +
            (C11671 + C11693) * C10509) *
               C47923) *
              C47947 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C1792 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C1793 +
           ((C11696 + C11695) * C10509 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C4725 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           (C10824 + C10806) * C47940) *
              C1967 -
          ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1968 +
          ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C1969 -
          ((C12566 + C12567) * C47940 + (C12549 + C12565) * C10509) * C1970 +
          ((C12567 + C12566) * C10509 +
           ((C113 * C12540 + C12554 + C12554 + C47836 * C12544) * C4725 +
            (C113 * C12541 + C12555 + C12555 + C47836 * C12545) * C47907) *
               C47940) *
              C1971) *
         C47632 * C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C1050 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C47889 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C47920) *
              C47874 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C1050 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C4725) * C47940 +
             (C11286 + C11285) * C10509) *
                C47737) *
               C1051 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47889 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47632 * C637 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47889) *
              C47632 * C638 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47889 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47737) *
              C47632 * C639 +
          (((C11086 + C11087) * C10509 +
            (C537 * C4725 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C11087 + C11086) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C2254 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C2255 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C2256 -
           ((C12566 + C12567) * C47940 + (C12549 + C12565) * C10509) * C47936) *
              C47632 * C47874 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C2255 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C2254 -
           ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) * C2256 +
           ((C12900 + C12899) * C10509 +
            (C12563 * C4725 +
             (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47907) *
                C47940) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
             C533 * C47907) *
                C47940) *
               C47650 * C47959 -
           ((C938 * C47907 +
             (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C938 * C4725 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C4725) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C282 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C532 * C4725 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C4725) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C47947 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
            C533 * C47907) *
               C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C4725) * C47940 +
           (C165 * C47907 + C164 * C4725) * C10509) *
              C47650 * C47632 * C109 +
          ((C165 * C4725 + C166 * C47907) * C10509 +
           (C532 * C4725 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C4725) * C47940 +
           (C167 * C47907 + C166 * C4725) * C10509) *
              C47650 * C47632 * C111 +
          ((C167 * C4725 + C168 * C47907) * C10509 +
           (C759 * C4725 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C1050 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C1051 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C1050 -
           ((C11288 + C11287) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C1051 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           (C10824 + C10806) * C47940) *
              C47650 * C1118 -
          ((C11284 + C11292) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
               C10509) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
            C351 * C47907) *
               C10509 +
           ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
            C1572 * C47907) *
               C47940) *
              C47650 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C47907 +
            (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
               C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
               C10509) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C4725 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C10509 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C4725 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C1792 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1793 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47632 * C47956 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C1793 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C1792 -
           ((C2271 * C47907 + C2272 * C4725) * C47940 +
            (C10813 + C10812) * C10509) *
               C47923) *
              C47632 * C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C1792 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C1793 +
           ((C10817 + C10816) * C10509 +
            (C2271 * C4725 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C1792 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C1793 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47959 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C1793 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C1792 -
           (((C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C47907 +
             (C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C4725) *
                C47940 +
            (C11671 + C11693) * C10509) *
               C47923) *
              C47947 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C1792 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C1793 +
           ((C11696 + C11695) * C10509 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C4725 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47888 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47695) *
              C47609 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C47888 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C47618 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C3242 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C47888 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C3242) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47733 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47740 +
            ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C3750) *
               C47888 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47740 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47733 -
            ((C13031 + C13039) * C47940 + (C11671 + C11693) * C10509) * C3750) *
               C47695) *
              C2588 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47740 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47733 -
            ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) * C3750) *
               C47888 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47733 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) * C47740 +
            ((C12765 + C12764) * C10509 +
             (C12768 * C4725 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47959 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47947 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C3242 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C47920) *
              C2588 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C47959 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47947 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C3242 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47632 * C47965 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C3242) *
              C47632 * C47958 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C3242 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47737) *
              C47632 * C47945 +
          (((C11086 + C11087) * C10509 +
            (C537 * C4725 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C11087 + C11086) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47967 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47964 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C47955 -
           ((C12566 + C12567) * C47940 + (C12549 + C12565) * C10509) * C47936) *
              C47632 * C2588 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47964 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47967 -
           ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) * C47955 +
           ((C12900 + C12899) * C10509 +
            (C12563 * C4725 +
             (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47907) *
                C47940) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47733 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47740 +
           ((C10825 + C10807) * C10509 + (C12565 + C12549) * C47940) * C3750) *
              C47632 * C47609 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47740 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47733 -
           ((C12899 + C12900) * C47940 + (C10813 + C10812) * C10509) * C3750) *
              C47632 * C47618 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47733 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47740 +
           ((C10817 + C10816) * C10509 +
            (C2271 * C4725 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C3750) *
              C47632 * C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C3242 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47632 * C47965 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C3242) *
              C47632 * C47958 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C3242 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47737) *
              C47632 * C47945 +
          (((C11086 + C11087) * C10509 +
            (C537 * C4725 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C11087 + C11086) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C3242 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47959 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C3242) *
               C47947 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C3242 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C47920) *
              C2588 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C3242) *
               C47959 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C3242 -
            ((C12764 + C12765) * C47940 + (C11286 + C11285) * C10509) *
                C47737) *
               C47947 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                     C164 * C47907) *
                        C10509 +
                    (C10824 + C10806) * C47940) *
                       C47650 * C47888 -
                   ((C938 * C47907 +
                     (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                        C47940 +
                    (C350 * C47907 +
                     (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                        C10509) *
                       C47650 * C47695) *
                      C637 +
                  (((C350 * C4725 + C349 * C47907) * C10509 +
                    (C938 * C4725 + C939 * C47907) * C47940) *
                       C47650 * C47695 -
                   ((C10811 + C10810) * C47940 +
                    (C165 * C47907 + C164 * C4725) * C10509) *
                       C47650 * C47888) *
                      C638 +
                  (((C165 * C4725 + C166 * C47907) * C10509 +
                    (C10814 + C10815) * C47940) *
                       C47650 * C47888 -
                   ((C940 * C47907 + C939 * C4725) * C47940 +
                    (C353 * C47907 + C349 * C4725) * C10509) *
                       C47650 * C47695) *
                      C639 +
                  (((C353 * C4725 + C650 * C47907) * C10509 +
                    (C940 * C4725 +
                     (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                        C47940) *
                       C47650 * C47695 -
                   ((C759 * C47907 + C536 * C4725) * C47940 +
                    (C167 * C47907 + C166 * C4725) * C10509) *
                       C47650 * C47888) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
                     C164 * C47907) *
                        C10509 +
                    (C10824 + C10806) * C47940) *
                       C47650 * C1392 -
                   ((C11284 + C11292) * C47940 +
                    (C350 * C47907 +
                     (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                        C10509) *
                       C47650 * C1393 +
                   (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
                     C351 * C47907) *
                        C10509 +
                    (C11694 + C11674) * C47940) *
                       C47650 * C1394 -
                   ((C11831 * C47907 +
                     (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
                        C47940 +
                    (C1412 * C47907 +
                     (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                        C10509) *
                       C47650 * C47930) *
                      C47874 +
                  (((C350 * C4725 + C349 * C47907) * C10509 +
                    (C11285 + C11286) * C47940) *
                       C47650 * C1393 -
                   ((C10811 + C10810) * C47940 +
                    (C165 * C47907 + C164 * C4725) * C10509) *
                       C47650 * C1392 -
                   ((C1571 * C47907 + C1572 * C4725) * C47940 +
                    (C352 * C47907 + C351 * C4725) * C10509) *
                       C47650 * C1394 +
                   ((C1412 * C4725 + C1411 * C47907) * C10509 +
                    (C11831 * C4725 +
                     (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                        C47940) *
                       C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C47888 +
           (((C11292 + C11284) * C10509 +
             ((C113 * C1260 + C1288 + C1288 + C47836 * C1278) * C4725 +
              C2156 * C47907) *
                 C47940) *
                C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C47695) *
              C281 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C47888 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C4725) * C47940 +
             (C11286 + C11285) * C10509) *
                C47737) *
               C47695) *
              C282 +
          ((((C165 * C4725 + C166 * C47907) * C10509 +
             (C10814 + C10815) * C47940) *
                C47889 -
            ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) *
                C47737) *
               C47888 +
           (((C11287 + C11288) * C10509 +
             (C2155 * C4725 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C11288 + C11287) * C47940 +
             (C353 * C47907 + C349 * C4725) * C10509) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47889 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C1392 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47889) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47889 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47737) *
              C1394 +
          (((C12166 + C12160) * C10509 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C4725 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C12160 + C12166) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
                C10509) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
             C533 * C47907) *
                C47940) *
               C47650 * C47959 -
           ((C938 * C47907 +
             (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C938 * C4725 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C4725) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C282 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C532 * C4725 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C4725) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C47947 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
            C533 * C47907) *
               C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C4725) * C47940 +
           (C165 * C47907 + C164 * C4725) * C10509) *
              C47650 * C47632 * C109 +
          ((C165 * C4725 + C166 * C47907) * C10509 +
           (C532 * C4725 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C4725) * C47940 +
           (C167 * C47907 + C166 * C4725) * C10509) *
              C47650 * C47632 * C111 +
          ((C167 * C4725 + C168 * C47907) * C10509 +
           (C759 * C4725 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47960 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47949 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C47632 * C281 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47949 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47960 -
           ((C2271 * C47907 + C2272 * C4725) * C47940 +
            (C10813 + C10812) * C10509) *
               C47923) *
              C47632 * C282 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47960 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47949 +
           ((C10817 + C10816) * C10509 +
            (C2271 * C4725 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C1050 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C1051 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C1050 -
           ((C11288 + C11287) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C1051 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           (C10824 + C10806) * C47940) *
              C47650 * C1118 -
          ((C11284 + C11292) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
               C10509) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
            C351 * C47907) *
               C10509 +
           ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
            C1572 * C47907) *
               C47940) *
              C47650 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C47907 +
            (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
               C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
               C10509) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C4725 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C10509 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C4725 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47960 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47949 +
           ((C10825 + C10807) * C10509 +
            ((C113 * C1974 + C1993 + C1993 + C47836 * C1986) * C4725 +
             C2272 * C47907) *
                C47940) *
               C47923) *
              C1050 +
          (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47949 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47960 -
           (((C113 * C2371 + C2381 + C2381 + C47836 * C2377) * C47907 +
             (C113 * C2370 + C2380 + C2380 + C47836 * C2376) * C4725) *
                C47940 +
            (C11671 + C11693) * C10509) *
               C47923) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            (C11694 + C11674) * C47940) *
               C47960 -
           ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) * C47949 +
           ((C11696 + C11695) * C10509 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C4725 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47889 -
           ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) * C47737) *
              C47632 * C637 +
          (((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47889) *
              C47632 * C638 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47889 -
           ((C10816 + C10817) * C47940 + (C10815 + C10814) * C10509) * C47737) *
              C47632 * C639 +
          (((C11086 + C11087) * C10509 +
            (C537 * C4725 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C11087 + C11086) * C47940 +
            (C167 * C47907 + C166 * C4725) * C10509) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
              C164 * C47907) *
                 C10509 +
             (C10824 + C10806) * C47940) *
                C47889 -
            ((C10807 + C10825) * C47940 + (C10806 + C10824) * C10509) *
                C47737) *
               C1050 +
           (((C11292 + C11284) * C10509 + (C11693 + C11671) * C47940) * C47737 -
            ((C11284 + C11292) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                 C10509) *
                C47889) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
              C351 * C47907) *
                 C10509 +
             (C11694 + C11674) * C47940) *
                C47889 -
            ((C11695 + C11696) * C47940 + (C11674 + C11694) * C10509) *
                C47737) *
               C47920) *
              C47874 +
          ((((C10810 + C10811) * C10509 + (C10812 + C10813) * C47940) * C47737 -
            ((C10811 + C10810) * C47940 +
             (C165 * C47907 + C164 * C4725) * C10509) *
                C47889) *
               C1050 +
           (((C350 * C4725 + C349 * C47907) * C10509 +
             (C11285 + C11286) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C4725) * C47940 +
             (C11286 + C11285) * C10509) *
                C47737) *
               C1051 +
           (((C12026 + C12027) * C10509 +
             (C11691 * C4725 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C12027 + C12026) * C47940 +
             (C352 * C47907 + C351 * C4725) * C10509) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
            C533 * C47907) *
               C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C4725) * C47940 +
           (C165 * C47907 + C164 * C4725) * C10509) *
              C47650 * C47632 * C109 +
          ((C165 * C4725 + C166 * C47907) * C10509 +
           (C532 * C4725 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C4725) * C47940 +
           (C167 * C47907 + C166 * C4725) * C10509) *
              C47650 * C47632 * C111 +
          ((C167 * C4725 + C168 * C47907) * C10509 +
           (C759 * C4725 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            ((C113 * C469 + C504 + C504 + C47836 * C489) * C4725 +
             C533 * C47907) *
                C47940) *
               C47650 * C47959 -
           ((C938 * C47907 +
             (C113 * C905 + C921 + C921 + C47836 * C915) * C4725) *
                C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C938 * C4725 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C4725) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C282 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C532 * C4725 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C4725) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C47947 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
             C164 * C47907) *
                C10509 +
            (C10824 + C10806) * C47940) *
               C47650 * C1050 -
           ((C11284 + C11292) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
                C10509) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
             C351 * C47907) *
                C10509 +
            ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
             C1572 * C47907) *
                C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C4725 + C349 * C47907) * C10509 +
            (C11285 + C11286) * C47940) *
               C47650 * C1051 -
           ((C10811 + C10810) * C47940 +
            (C165 * C47907 + C164 * C4725) * C10509) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C4725) * C47940 +
            (C352 * C47907 + C351 * C4725) * C10509) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C4725 + C166 * C47907) * C10509 +
            (C10814 + C10815) * C47940) *
               C47650 * C1050 -
           ((C11288 + C11287) * C47940 +
            (C353 * C47907 + C349 * C4725) * C10509) *
               C47650 * C1051 +
           ((C352 * C4725 + C354 * C47907) * C10509 +
            (C1571 * C4725 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C4725 +
            C164 * C47907) *
               C10509 +
           (C10824 + C10806) * C47940) *
              C47650 * C1118 -
          ((C11284 + C11292) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C4725) *
               C10509) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C4725 +
            C351 * C47907) *
               C10509 +
           ((C113 * C1263 + C1291 + C1291 + C47836 * C1281) * C4725 +
            C1572 * C47907) *
               C47940) *
              C47650 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C47836 * C1677) * C47907 +
            (C113 * C1670 + C1680 + C1680 + C47836 * C1676) * C4725) *
               C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C4725) *
               C10509) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C4725 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C10509 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C4725 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47691 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47698 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C2848) *
                      C47609 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47698 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47691 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C2848) *
                      C47618 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47691 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47698 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C2848) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47691 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C47698 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C47889 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C2848) *
                      C2588 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C47691 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47698 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C47889) *
                       C2848) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47966 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47962 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47952 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47650 * C47930) *
                      C2588 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47962 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47966 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47952 +
                   ((C17591 + C17590) * C16087 +
                    (C16089 * C1124 + C17584 + C17584 + C16085 * C1136 +
                     C16091 * C1129 + C17585 + C17585 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47695) *
                      C47965 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C2480) *
                      C47958 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47695) *
                      C47945 +
                  (((C16691 + C16690) * C16087 +
                    (C16089 * C292 + C16684 + C16684 + C16085 * C312 +
                     C16091 * C293 + C16685 + C16685 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47650 * C2480) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47960 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47949 +
                    ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                      C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                         C16087 +
                     (C16544 + C16545) * C47907) *
                        C47853 * C47923) *
                       C2480 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47949 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47960 -
                    ((C18518 + C18519) * C47907 +
                     (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                      C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                         C16087) *
                        C47853 * C47923) *
                       C47695) *
                      C2588 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47949 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47960 -
                    ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                        C47853 * C47923) *
                       C2480 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47960 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47949 +
                    ((C18519 + C18518) * C16087 +
                     (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                      C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                         C47907) *
                        C47853 * C47923) *
                       C47695) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C47609 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C2480 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C47618 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C47889 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47695) *
                      C47965 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C2480) *
                      C47958 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C2480 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47695) *
                      C47945 +
                  (((C16691 + C16690) * C16087 +
                    (C16089 * C292 + C16684 + C16684 + C16085 * C312 +
                     C16091 * C293 + C16685 + C16685 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47650 * C2480) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47966 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47962 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47952 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47650 * C47930) *
                      C2588 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47962 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47966 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47952 +
                   ((C17591 + C17590) * C16087 +
                    (C16089 * C1124 + C17584 + C17584 + C16085 * C1136 +
                     C16091 * C1129 + C17585 + C17585 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47691 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47698 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C3242 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C2848) *
                      C47874 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C47691 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47698 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C3242) *
                       C2848) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47733 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47740 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C3750) *
                      C47691 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47740 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47733 -
                   ((C18518 + C18519) * C47907 +
                    (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                     C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                        C16087) *
                       C47853 * C3750) *
                      C47698 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47733 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47740 +
                   ((C16089 * C1264 + C17446 + C17446 + C16085 * C1282 +
                     C16091 * C6081 + C17447 + C17447 + C47938 * C6085) *
                        C16087 +
                    (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                     C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                        C47907) *
                       C47853 * C3750) *
                      C2848) *
                 C47604) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C3242 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47966 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47737 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C3242) *
                      C47962 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C3242 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47737) *
                      C47952 +
                  (((C16089 * C1670 + C17928 + C17928 + C16085 * C1676 +
                     C16091 * C6577 + C17929 + C17929 + C47938 * C6581) *
                        C16087 +
                    (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                     C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C3242) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C47956 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C2480 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C47943 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C3242 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47967 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47964 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47955 -
                   ((C18660 + C18661) * C47907 +
                    (C16091 * C2370 + C18308 + C18308 + C47938 * C2376 +
                     C16089 * C1974 + C18309 + C18309 + C16085 * C1986) *
                        C16087) *
                       C47853 * C47936) *
                      C2480 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47964 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47967 -
                   ((C18518 + C18519) * C47907 +
                    (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                     C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                        C16087) *
                       C47853 * C47955 +
                   ((C16089 * C2370 + C18792 + C18792 + C16085 * C2376 +
                     C16091 * C7453 + C18793 + C18793 + C47938 * C7457) *
                        C16087 +
                    (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                     C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                        C47907) *
                       C47853 * C47936) *
                      C47695) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47733 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47740 +
                    ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                      C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                         C16087 +
                     (C16544 + C16545) * C47907) *
                        C47853 * C3750) *
                       C2480 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47740 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47733 -
                    ((C18518 + C18519) * C47907 +
                     (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                      C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                         C16087) *
                        C47853 * C3750) *
                       C47695) *
                      C47874 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47740 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47733 -
                    ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                        C47853 * C3750) *
                       C2480 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47733 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47740 +
                    ((C18519 + C18518) * C16087 +
                     (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                      C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                         C47907) *
                        C47853 * C3750) *
                       C47695) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C47956 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C2480 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C47943 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C3242 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C2480 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C3242 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47966 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47737 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C3242) *
                      C47962 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C3242 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47737) *
                      C47952 +
                  (((C16089 * C1670 + C17928 + C17928 + C16085 * C1676 +
                     C16091 * C6577 + C17929 + C17929 + C47938 * C6581) *
                        C16087 +
                    (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                     C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C3242) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C1392 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C1393 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C1394 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47650 * C47930) *
                      C47874 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C1393 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C1392 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C1394 +
                   ((C17591 + C17590) * C16087 +
                    (C16089 * C1124 + C17584 + C17584 + C16085 * C1136 +
                     C16091 * C1129 + C17585 + C17585 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47695) *
                      C637 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47888) *
                      C638 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47695) *
                      C639 +
                  (((C16691 + C16690) * C16087 +
                    (C16089 * C292 + C16684 + C16684 + C16085 * C312 +
                     C16091 * C293 + C16685 + C16685 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47650 * C47888) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C1792 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C1793 +
                    ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                      C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                         C16087 +
                     (C16544 + C16545) * C47907) *
                        C47853 * C47923) *
                       C47888 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C1793 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C1792 -
                    ((C18518 + C18519) * C47907 +
                     (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                      C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                         C16087) *
                        C47853 * C47923) *
                       C47695) *
                      C47874 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C1793 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C1792 -
                    ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                        C47853 * C47923) *
                       C47888 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C1792 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C1793 +
                    ((C18519 + C18518) * C16087 +
                     (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                      C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                         C47907) *
                        C47853 * C47923) *
                       C47695) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[86] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47889 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C1392 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47737 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47889) *
                      C1393 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47889 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47737) *
                      C1394 +
                  (((C16089 * C1670 + C17928 + C17928 + C16085 * C1676 +
                     C16091 * C6577 + C17929 + C17929 + C47938 * C6581) *
                        C16087 +
                    (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                     C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47889) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C281 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C47888 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C282 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C47889 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C2254 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C2255 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C2256 -
                   ((C18660 + C18661) * C47907 +
                    (C16091 * C2370 + C18308 + C18308 + C47938 * C2376 +
                     C16089 * C1974 + C18309 + C18309 + C16085 * C1986) *
                        C16087) *
                       C47853 * C47936) *
                      C47888 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C2255 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C2254 -
                   ((C18518 + C18519) * C47907 +
                    (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                     C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                        C16087) *
                       C47853 * C2256 +
                   ((C16089 * C2370 + C18792 + C18792 + C16085 * C2376 +
                     C16091 * C7453 + C18793 + C18793 + C47938 * C7457) *
                        C16087 +
                    (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                     C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                        C47907) *
                       C47853 * C47936) *
                      C47695) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                   C16087 +
               (C16138 + C16139) * C47907) *
                  C47853 * C47650 * C47632 * C108 -
              ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                  C47853 * C47650 * C47632 * C109 +
              ((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                  C47853 * C47650 * C47632 * C110 -
              ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                  C47853 * C47650 * C47632 * C111 +
              ((C16145 + C16144) * C16087 +
               (C16089 * C120 + C16120 + C16120 + C16085 * C134 +
                C16091 * C641 + C16121 + C16121 + C47938 * C643) *
                   C47907) *
                  C47853 * C47650 * C47632 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                 C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                    C16087 +
                (C16138 + C16139) * C47907) *
                   C47853 * C47650 * C47959 -
               ((C16340 + C16341) * C47907 +
                (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                 C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                    C16087) *
                   C47853 * C47650 * C47947 +
               ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                 C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                    C16087 +
                (C16342 + C16343) * C47907) *
                   C47853 * C47650 * C47920) *
                  C281 +
              (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                   C47853 * C47650 * C47947 -
               ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                   C47853 * C47650 * C47959 -
               ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                   C47853 * C47650 * C47920) *
                  C282 +
              (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                   C47853 * C47650 * C47959 -
               ((C16091 * C291 + C16320 + C16320 + C47938 * C311 +
                 C16089 * C290 + C16321 + C16321 + C16085 * C310) *
                    C47907 +
                (C16345 + C16344) * C16087) *
                   C47853 * C47650 * C47947 +
               ((C16347 + C16346) * C16087 +
                (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                 C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                    C47907) *
                   C47853 * C47650 * C47920) *
                  C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
             C16095 + C16095 + C47938 * C306) *
                C16087 +
            (C16138 + C16139) * C47907) *
               C47853 * C47960 -
           ((C16542 + C16543) * C47907 +
            (C16091 * C905 + C16500 + C16500 + C47938 * C915 + C16089 * C469 +
             C16501 + C16501 + C16085 * C489) *
                C16087) *
               C47853 * C47949 +
           ((C16089 * C470 + C16502 + C16502 + C16085 * C490 + C16091 * C1260 +
             C16503 + C16503 + C47938 * C1278) *
                C16087 +
            (C16544 + C16545) * C47907) *
               C47853 * C47923) *
              C47632 * C281 +
          (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) * C47853 *
               C47949 -
           ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) * C47853 *
               C47960 -
           ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) * C47853 *
               C47923) *
              C47632 * C282 +
          (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) * C47853 *
               C47960 -
           ((C16091 * C908 + C16522 + C16522 + C47938 * C918 + C16089 * C473 +
             C16523 + C16523 + C16085 * C493) *
                C47907 +
            (C16547 + C16546) * C16087) *
               C47853 * C47949 +
           ((C16549 + C16548) * C16087 +
            (C16089 * C474 + C16524 + C16524 + C16085 * C494 + C16091 * C2142 +
             C16525 + C16525 + C47938 * C2144) *
                C47907) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
             C16095 + C16095 + C47938 * C306) *
                C16087 +
            (C16138 + C16139) * C47907) *
               C47853 * C47650 * C1050 -
           ((C16340 + C16341) * C47907 +
            (C16091 * C287 + C16298 + C16298 + C47938 * C307 + C16089 * C286 +
             C16299 + C16299 + C16085 * C306) *
                C16087) *
               C47853 * C47650 * C1051 +
           ((C16089 * C287 + C16300 + C16300 + C16085 * C307 + C16091 * C1126 +
             C16301 + C16301 + C47938 * C1138) *
                C16087 +
            (C16342 + C16343) * C47907) *
               C47853 * C47650 * C47920) *
              C47956 +
          (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) * C47853 *
               C47650 * C1051 -
           ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) * C47853 *
               C47650 * C1050 -
           ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) * C47853 *
               C47650 * C47920) *
              C47943 +
          (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) * C47853 *
               C47650 * C1050 -
           ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) * C47853 *
               C47650 * C1051 +
           ((C16347 + C16346) * C16087 +
            (C16089 * C291 + C16322 + C16322 + C16085 * C311 + C16091 * C1398 +
             C16323 + C16323 + C47938 * C1400) *
                C47907) *
               C47853 * C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
            C16095 + C16095 + C47938 * C306) *
               C16087 +
           (C16138 + C16139) * C47907) *
              C47853 * C47650 * C1118 -
          ((C16340 + C16341) * C47907 +
           (C16091 * C287 + C16298 + C16298 + C47938 * C307 + C16089 * C286 +
            C16299 + C16299 + C16085 * C306) *
               C16087) *
              C47853 * C47650 * C1119 +
          ((C16089 * C287 + C16300 + C16300 + C16085 * C307 + C16091 * C1126 +
            C16301 + C16301 + C47938 * C1138) *
               C16087 +
           (C16342 + C16343) * C47907) *
              C47853 * C47650 * C1120 -
          ((C16091 * C1128 + C17284 + C17284 + C47938 * C1140 + C16089 * C1125 +
            C17285 + C17285 + C16085 * C1137) *
               C47907 +
           (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 + C16089 * C1126 +
            C17287 + C17287 + C16085 * C1138) *
               C16087) *
              C47853 * C47650 * C1121 +
          ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 + C16091 * C5921 +
            C17289 + C17289 + C47938 * C5925) *
               C16087 +
           (C16089 * C1128 + C17290 + C17290 + C16085 * C1140 + C16091 * C5922 +
            C17291 + C17291 + C47938 * C5926) *
               C47907) *
              C47853 * C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
             C16095 + C16095 + C47938 * C306) *
                C16087 +
            (C16138 + C16139) * C47907) *
               C47853 * C47960 -
           ((C16542 + C16543) * C47907 +
            (C16091 * C905 + C16500 + C16500 + C47938 * C915 + C16089 * C469 +
             C16501 + C16501 + C16085 * C489) *
                C16087) *
               C47853 * C47949 +
           ((C16089 * C470 + C16502 + C16502 + C16085 * C490 + C16091 * C1260 +
             C16503 + C16503 + C47938 * C1278) *
                C16087 +
            (C16544 + C16545) * C47907) *
               C47853 * C47923) *
              C1050 +
          (((C16089 * C905 + C17028 + C17028 + C16085 * C915 + C16091 * C1263 +
             C17029 + C17029 + C47938 * C1281) *
                C16087 +
            (C17052 + C17053) * C47907) *
               C47853 * C47949 -
           ((C16340 + C16341) * C47907 +
            (C16091 * C287 + C16298 + C16298 + C47938 * C307 + C16089 * C286 +
             C16299 + C16299 + C16085 * C306) *
                C16087) *
               C47853 * C47960 -
           ((C16091 * C1265 + C17438 + C17438 + C47938 * C1283 +
             C16089 * C1259 + C17439 + C17439 + C16085 * C1277) *
                C47907 +
            (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
             C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                C16087) *
               C47853 * C47923) *
              C1051 +
          (((C16089 * C287 + C16300 + C16300 + C16085 * C307 + C16091 * C1126 +
             C16301 + C16301 + C47938 * C1138) *
                C16087 +
            (C16342 + C16343) * C47907) *
               C47853 * C47960 -
           ((C16091 * C1671 + C17442 + C17442 + C47938 * C1677 +
             C16089 * C1262 + C17443 + C17443 + C16085 * C1280) *
                C47907 +
            (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
             C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                C16087) *
               C47853 * C47949 +
           ((C16089 * C1264 + C17446 + C17446 + C16085 * C1282 +
             C16091 * C6081 + C17447 + C17447 + C47938 * C6085) *
                C16087 +
            (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
             C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                C47907) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
             C16095 + C16095 + C47938 * C306) *
                C16087 +
            (C16138 + C16139) * C47907) *
               C47853 * C1792 -
           ((C16542 + C16543) * C47907 +
            (C16091 * C905 + C16500 + C16500 + C47938 * C915 + C16089 * C469 +
             C16501 + C16501 + C16085 * C489) *
                C16087) *
               C47853 * C1793 +
           ((C16089 * C470 + C16502 + C16502 + C16085 * C490 + C16091 * C1260 +
             C16503 + C16503 + C47938 * C1278) *
                C16087 +
            (C16544 + C16545) * C47907) *
               C47853 * C47923) *
              C47632 * C47956 +
          (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) * C47853 *
               C1793 -
           ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) * C47853 *
               C1792 -
           ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) * C47853 *
               C47923) *
              C47632 * C47943 +
          (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) * C47853 *
               C1792 -
           ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) * C47853 *
               C1793 +
           ((C16549 + C16548) * C16087 +
            (C16089 * C474 + C16524 + C16524 + C16085 * C494 + C16091 * C2142 +
             C16525 + C16525 + C47938 * C2144) *
                C47907) *
               C47853 * C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
             C16095 + C16095 + C47938 * C306) *
                C16087 +
            (C16138 + C16139) * C47907) *
               C47853 * C1792 -
           ((C16542 + C16543) * C47907 +
            (C16091 * C905 + C16500 + C16500 + C47938 * C915 + C16089 * C469 +
             C16501 + C16501 + C16085 * C489) *
                C16087) *
               C47853 * C1793 +
           ((C16089 * C470 + C16502 + C16502 + C16085 * C490 + C16091 * C1260 +
             C16503 + C16503 + C47938 * C1278) *
                C16087 +
            (C16544 + C16545) * C47907) *
               C47853 * C47923) *
              C47959 +
          (((C16089 * C905 + C17028 + C17028 + C16085 * C915 + C16091 * C1263 +
             C17029 + C17029 + C47938 * C1281) *
                C16087 +
            (C17052 + C17053) * C47907) *
               C47853 * C1793 -
           ((C16340 + C16341) * C47907 +
            (C16091 * C287 + C16298 + C16298 + C47938 * C307 + C16089 * C286 +
             C16299 + C16299 + C16085 * C306) *
                C16087) *
               C47853 * C1792 -
           ((C16091 * C1265 + C17438 + C17438 + C47938 * C1283 +
             C16089 * C1259 + C17439 + C17439 + C16085 * C1277) *
                C47907 +
            (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
             C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                C16087) *
               C47853 * C47923) *
              C47947 +
          (((C16089 * C287 + C16300 + C16300 + C16085 * C307 + C16091 * C1126 +
             C16301 + C16301 + C47938 * C1138) *
                C16087 +
            (C16342 + C16343) * C47907) *
               C47853 * C1792 -
           ((C17796 + C17797) * C47907 +
            (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
             C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                C16087) *
               C47853 * C1793 +
           ((C16089 * C1264 + C17446 + C17446 + C16085 * C1282 +
             C16091 * C6081 + C17447 + C17447 + C47938 * C6085) *
                C16087 +
            (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
             C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                C47907) *
               C47853 * C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16089 * C115 + C16094 + C16094 + C16085 * C129 + C16091 * C286 +
            C16095 + C16095 + C47938 * C306) *
               C16087 +
           (C16138 + C16139) * C47907) *
              C47853 * C1967 -
          ((C16542 + C16543) * C47907 +
           (C16091 * C905 + C16500 + C16500 + C47938 * C915 + C16089 * C469 +
            C16501 + C16501 + C16085 * C489) *
               C16087) *
              C47853 * C1968 +
          ((C16089 * C470 + C16502 + C16502 + C16085 * C490 + C16091 * C1260 +
            C16503 + C16503 + C47938 * C1278) *
               C16087 +
           (C16544 + C16545) * C47907) *
              C47853 * C1969 -
          ((C16091 * C2371 + C18306 + C18306 + C47938 * C2377 + C16089 * C1973 +
            C18307 + C18307 + C16085 * C1985) *
               C47907 +
           (C16091 * C2370 + C18308 + C18308 + C47938 * C2376 + C16089 * C1974 +
            C18309 + C18309 + C16085 * C1986) *
               C16087) *
              C47853 * C1970 +
          ((C16089 * C1975 + C18310 + C18310 + C16085 * C1987 + C16091 * C6961 +
            C18311 + C18311 + C47938 * C6965) *
               C16087 +
           (C16089 * C1976 + C18312 + C18312 + C16085 * C1988 + C16091 * C6962 +
            C18313 + C18313 + C47938 * C6966) *
               C47907) *
              C47853 * C1971) *
         C47632 * C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[88] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C1050 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C1051 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C47889 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C47920) *
                      C47874 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C1050 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C1051 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C47889) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47889 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47632 * C637 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47737 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47889) *
                      C47632 * C638 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47889 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C47737) *
                      C47632 * C639 +
                  (((C16833 + C16832) * C16087 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47889) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C2254 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C2255 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C2256 -
                   ((C18660 + C18661) * C47907 +
                    (C16091 * C2370 + C18308 + C18308 + C47938 * C2376 +
                     C16089 * C1974 + C18309 + C18309 + C16085 * C1986) *
                        C16087) *
                       C47853 * C47936) *
                      C47632 * C47874 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C2255 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C2254 -
                   ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                       C47853 * C2256 +
                   ((C18661 + C18660) * C16087 +
                    (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                     C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                        C47907) *
                       C47853 * C47936) *
                      C47632 * C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47959 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16091 * C291 + C16320 + C16320 + C47938 * C311 +
                     C16089 * C290 + C16321 + C16321 + C16085 * C310) *
                        C47907 +
                    (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C16145 + C16144) * C16087 +
                   (C16089 * C120 + C16120 + C16120 + C16085 * C134 +
                    C16091 * C641 + C16121 + C16121 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C1050 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C16340 + C16341) * C47907 +
                   (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                    C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                       C16087) *
                      C47853 * C47650 * C1119 +
                  ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                    C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                       C16087 +
                   (C16342 + C16343) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C16091 * C1128 + C17284 + C17284 + C47938 * C1140 +
                    C16089 * C1125 + C17285 + C17285 + C16085 * C1137) *
                       C47907 +
                   (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                    C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                       C16087) *
                      C47853 * C47650 * C1121 +
                  ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                    C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                       C16087 +
                   (C16089 * C1128 + C17290 + C17290 + C16085 * C1140 +
                    C16091 * C5922 + C17291 + C17291 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C1792 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C1793 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47923) *
                      C47632 * C47956 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C1793 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C1792 -
                   ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                       C47853 * C47923) *
                      C47632 * C47943 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C1792 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C1793 +
                   ((C16549 + C16548) * C16087 +
                    (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                     C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C1792 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C1793 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47923) *
                      C47959 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C1793 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C1792 -
                   ((C16091 * C1265 + C17438 + C17438 + C47938 * C1283 +
                     C16089 * C1259 + C17439 + C17439 + C16085 * C1277) *
                        C47907 +
                    (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                     C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                        C16087) *
                       C47853 * C47923) *
                      C47947 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C1792 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C1793 +
                   ((C16089 * C1264 + C17446 + C17446 + C16085 * C1282 +
                     C16091 * C6081 + C17447 + C17447 + C47938 * C6085) *
                        C16087 +
                    (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                     C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C47609 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C47888 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C47618 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C3242 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C3242) *
                       C47695) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47733 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47740 +
                    ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                      C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                         C16087 +
                     (C16544 + C16545) * C47907) *
                        C47853 * C3750) *
                       C47888 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47740 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47733 -
                    ((C18518 + C18519) * C47907 +
                     (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                      C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                         C16087) *
                        C47853 * C3750) *
                       C47695) *
                      C2588 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47740 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47733 -
                    ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                        C47853 * C3750) *
                       C47888 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47733 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47740 +
                    ((C18519 + C18518) * C16087 +
                     (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                      C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                         C47907) *
                        C47853 * C3750) *
                       C47695) *
                      C47615)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47959 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47947 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C3242 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C47920) *
                      C2588 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C47959 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47947 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C3242) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C3242 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47632 * C47965 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47737 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C3242) *
                      C47632 * C47958 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C3242 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C47737) *
                      C47632 * C47945 +
                  (((C16833 + C16832) * C16087 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C3242) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47967 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47964 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47955 -
                   ((C18660 + C18661) * C47907 +
                    (C16091 * C2370 + C18308 + C18308 + C47938 * C2376 +
                     C16089 * C1974 + C18309 + C18309 + C16085 * C1986) *
                        C16087) *
                       C47853 * C47936) *
                      C47632 * C2588 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47964 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47967 -
                   ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                       C47853 * C47955 +
                   ((C18661 + C18660) * C16087 +
                    (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                     C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                        C47907) *
                       C47853 * C47936) *
                      C47632 * C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47733 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47740 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C3750) *
                      C47632 * C47609 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47740 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47733 -
                   ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                       C47853 * C3750) *
                      C47632 * C47618 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47733 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C47740 +
                   ((C16549 + C16548) * C16087 +
                    (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                     C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                        C47907) *
                       C47853 * C3750) *
                      C47632 * C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C3242 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47632 * C47965 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47737 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C3242) *
                      C47632 * C47958 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C3242 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C47737) *
                      C47632 * C47945 +
                  (((C16833 + C16832) * C16087 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C3242) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C3242 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47959 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C3242) *
                       C47947 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C3242 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C47920) *
                      C2588 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C3242) *
                       C47959 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C3242 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47947 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C3242) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47695) *
                      C637 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47888) *
                      C638 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47888 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47695) *
                      C639 +
                  (((C16691 + C16690) * C16087 +
                    (C16089 * C292 + C16684 + C16684 + C16085 * C312 +
                     C16091 * C293 + C16685 + C16685 + C47938 * C313) *
                        C47907) *
                       C47853 * C47650 * C47695 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47650 * C47888) *
                      C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C1392 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C1393 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C1394 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47650 * C47930) *
                      C47874 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C1393 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C1392 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C1394 +
                   ((C17591 + C17590) * C16087 +
                    (C16089 * C1124 + C17584 + C17584 + C16085 * C1136 +
                     C16091 * C1129 + C17585 + C17585 + C47938 * C1141) *
                        C47907) *
                       C47853 * C47650 * C47930) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C281 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C47888 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C47695) *
                      C282 +
                  ((((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                        C47853 * C47889 -
                    ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                        C47853 * C47737) *
                       C47888 +
                   (((C17055 + C17054) * C16087 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                        C47853 * C47889) *
                       C47695) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47889 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C1392 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47737 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47889) *
                      C1393 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47889 -
                   ((C17796 + C17797) * C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47737) *
                      C1394 +
                  (((C16089 * C1670 + C17928 + C17928 + C16085 * C1676 +
                     C16091 * C6577 + C17929 + C17929 + C47938 * C6581) *
                        C16087 +
                    (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                     C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                        C47907) *
                       C47853 * C47737 -
                   ((C17590 + C17591) * C47907 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C16087) *
                       C47853 * C47889) *
                      C47930) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47959 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16091 * C291 + C16320 + C16320 + C47938 * C311 +
                     C16089 * C290 + C16321 + C16321 + C16085 * C310) *
                        C47907 +
                    (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C16145 + C16144) * C16087 +
                   (C16089 * C120 + C16120 + C16120 + C16085 * C134 +
                    C16091 * C641 + C16121 + C16121 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47960 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47949 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47923) *
                      C47632 * C281 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47949 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47960 -
                   ((C16548 + C16549) * C47907 + (C16545 + C16544) * C16087) *
                       C47853 * C47923) *
                      C47632 * C282 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47960 -
                   ((C16091 * C908 + C16522 + C16522 + C47938 * C918 +
                     C16089 * C473 + C16523 + C16523 + C16085 * C493) *
                        C47907 +
                    (C16547 + C16546) * C16087) *
                       C47853 * C47949 +
                   ((C16549 + C16548) * C16087 +
                    (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                     C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                        C47907) *
                       C47853 * C47923) *
                      C47632 * C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C1050 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C16340 + C16341) * C47907 +
                   (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                    C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                       C16087) *
                      C47853 * C47650 * C1119 +
                  ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                    C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                       C16087 +
                   (C16342 + C16343) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C16091 * C1128 + C17284 + C17284 + C47938 * C1140 +
                    C16089 * C1125 + C17285 + C17285 + C16085 * C1137) *
                       C47907 +
                   (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                    C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                       C16087) *
                      C47853 * C47650 * C1121 +
                  ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                    C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                       C16087 +
                   (C16089 * C1128 + C17290 + C17290 + C16085 * C1140 +
                    C16091 * C5922 + C17291 + C17291 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47960 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47949 +
                   ((C16089 * C470 + C16502 + C16502 + C16085 * C490 +
                     C16091 * C1260 + C16503 + C16503 + C47938 * C1278) *
                        C16087 +
                    (C16544 + C16545) * C47907) *
                       C47853 * C47923) *
                      C1050 +
                  (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                     C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                        C16087 +
                    (C17052 + C17053) * C47907) *
                       C47853 * C47949 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47960 -
                   ((C16091 * C1265 + C17438 + C17438 + C47938 * C1283 +
                     C16089 * C1259 + C17439 + C17439 + C16085 * C1277) *
                        C47907 +
                    (C16091 * C1264 + C17440 + C17440 + C47938 * C1282 +
                     C16089 * C1260 + C17441 + C17441 + C16085 * C1278) *
                        C16087) *
                       C47853 * C47923) *
                      C1051 +
                  (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47960 -
                   ((C16091 * C1671 + C17442 + C17442 + C47938 * C1677 +
                     C16089 * C1262 + C17443 + C17443 + C16085 * C1280) *
                        C47907 +
                    (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                     C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                        C16087) *
                       C47853 * C47949 +
                   ((C16089 * C1264 + C17446 + C17446 + C16085 * C1282 +
                     C16091 * C6081 + C17447 + C17447 + C47938 * C6085) *
                        C16087 +
                    (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                     C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                        C47907) *
                       C47853 * C47923) *
                      C47920) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47889 -
                   ((C16542 + C16543) * C47907 +
                    (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                     C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                        C16087) *
                       C47853 * C47737) *
                      C47632 * C637 +
                  (((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                       C47853 * C47737 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47889) *
                      C47632 * C638 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47889 -
                   ((C16832 + C16833) * C47907 + (C16547 + C16546) * C16087) *
                       C47853 * C47737) *
                      C47632 * C639 +
                  (((C16833 + C16832) * C16087 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47907) *
                       C47853 * C47737 -
                   ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                       C47853 * C47889) *
                      C47632 * C47924)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C16087 +
                     (C16138 + C16139) * C47907) *
                        C47853 * C47889 -
                    ((C16542 + C16543) * C47907 +
                     (C16091 * C905 + C16500 + C16500 + C47938 * C915 +
                      C16089 * C469 + C16501 + C16501 + C16085 * C489) *
                         C16087) *
                        C47853 * C47737) *
                       C1050 +
                   (((C16089 * C905 + C17028 + C17028 + C16085 * C915 +
                      C16091 * C1263 + C17029 + C17029 + C47938 * C1281) *
                         C16087 +
                     (C17052 + C17053) * C47907) *
                        C47853 * C47737 -
                    ((C16340 + C16341) * C47907 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C16087) *
                        C47853 * C47889) *
                       C1051 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C16087 +
                     (C16342 + C16343) * C47907) *
                        C47853 * C47889 -
                    ((C17796 + C17797) * C47907 +
                     (C16091 * C1670 + C17444 + C17444 + C47938 * C1676 +
                      C16089 * C1263 + C17445 + C17445 + C16085 * C1281) *
                         C16087) *
                        C47853 * C47737) *
                       C47920) *
                      C47874 +
                  ((((C16543 + C16542) * C16087 + (C16546 + C16547) * C47907) *
                        C47853 * C47737 -
                    ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                        C47853 * C47889) *
                       C1050 +
                   (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                        C47853 * C47889 -
                    ((C17054 + C17055) * C47907 + (C17053 + C17052) * C16087) *
                        C47853 * C47737) *
                       C1051 +
                   (((C17797 + C17796) * C16087 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47907) *
                        C47853 * C47737 -
                    ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                        C47853 * C47889) *
                       C47920) *
                      C47615)) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C47632 * C108 -
                  ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                      C47853 * C47650 * C47632 * C109 +
                  ((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                      C47853 * C47650 * C47632 * C110 -
                  ((C16144 + C16145) * C47907 + (C16143 + C16142) * C16087) *
                      C47853 * C47650 * C47632 * C111 +
                  ((C16145 + C16144) * C16087 +
                   (C16089 * C120 + C16120 + C16120 + C16085 * C134 +
                    C16091 * C641 + C16121 + C16121 + C47938 * C643) *
                       C47907) *
                      C47853 * C47650 * C47632 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C281 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C47947 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C47959 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C282 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C47959 -
                   ((C16091 * C291 + C16320 + C16320 + C47938 * C311 +
                     C16089 * C290 + C16321 + C16321 + C16085 * C310) *
                        C47907 +
                    (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C47947 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C16087 +
                    (C16138 + C16139) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16340 + C16341) * C47907 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C16087 +
                    (C16342 + C16343) * C47907) *
                       C47853 * C47650 * C47920) *
                      C47956 +
                  (((C16341 + C16340) * C16087 + (C16344 + C16345) * C47907) *
                       C47853 * C47650 * C1051 -
                   ((C16140 + C16141) * C47907 + (C16139 + C16138) * C16087) *
                       C47853 * C47650 * C1050 -
                   ((C16346 + C16347) * C47907 + (C16343 + C16342) * C16087) *
                       C47853 * C47650 * C47920) *
                      C47943 +
                  (((C16141 + C16140) * C16087 + (C16142 + C16143) * C47907) *
                       C47853 * C47650 * C1050 -
                   ((C16690 + C16691) * C47907 + (C16345 + C16344) * C16087) *
                       C47853 * C47650 * C1051 +
                   ((C16347 + C16346) * C16087 +
                    (C16089 * C291 + C16322 + C16322 + C16085 * C311 +
                     C16091 * C1398 + C16323 + C16323 + C47938 * C1400) *
                        C47907) *
                       C47853 * C47650 * C47920) *
                      C47914)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                    C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                       C16087 +
                   (C16138 + C16139) * C47907) *
                      C47853 * C47650 * C1118 -
                  ((C16340 + C16341) * C47907 +
                   (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                    C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                       C16087) *
                      C47853 * C47650 * C1119 +
                  ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                    C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                       C16087 +
                   (C16342 + C16343) * C47907) *
                      C47853 * C47650 * C1120 -
                  ((C16091 * C1128 + C17284 + C17284 + C47938 * C1140 +
                    C16089 * C1125 + C17285 + C17285 + C16085 * C1137) *
                       C47907 +
                   (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                    C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                       C16087) *
                      C47853 * C47650 * C1121 +
                  ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                    C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                       C16087 +
                   (C16089 * C1128 + C17290 + C17290 + C16085 * C1140 +
                    C16091 * C5922 + C17291 + C17291 + C47938 * C5926) *
                       C47907) *
                      C47853 * C47650 * C1122) *
                 C47604) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47691 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47698 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C2848) *
                       C47609 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47698 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47691 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C2848) *
                       C47618 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47691 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47698 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C2848) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47691 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C47698 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C2848) *
                       C2588 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C47691 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47698 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C47889) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47966 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47962 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47952 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47650 * C47930) *
                       C2588 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47962 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47966 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47952 +
                    (C21825 * C1125 + C22861 + C22861 + C21821 * C1137 +
                     C21827 * C1128 + C22862 + C22862 + C21822 * C1140 +
                     C21829 * C5922 + C22863 + C22863 + C21823 * C5926) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C2480 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47695) *
                       C47965 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C2480) *
                       C47958 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C2480 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47695) *
                       C47945 +
                   ((C21825 * C290 + C22201 + C22201 + C21821 * C310 +
                     C21827 * C291 + C22202 + C22202 + C21822 * C311 +
                     C21829 * C1398 + C22203 + C22203 + C21823 * C1400) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47960 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47949 +
                     (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                      C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                      C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                         C47579 * C47853 * C47923) *
                        C2480 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47949 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47960 -
                     (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                      C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                      C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                         C47579 * C47853 * C47923) *
                        C47695) *
                       C2588 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47949 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47960 -
                     (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                      C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                      C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                         C47579 * C47853 * C47923) *
                        C2480 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47960 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47949 +
                     (C21825 * C1259 + C23554 + C23554 + C21821 * C1277 +
                      C21827 * C1265 + C23555 + C23555 + C21822 * C1283 +
                      C21829 * C6082 + C23556 + C23556 + C21823 * C6086) *
                         C47579 * C47853 * C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C47609 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C2480 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C47618 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C2480 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47695) *
                       C47965 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C2480) *
                       C47958 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C2480 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47695) *
                       C47945 +
                   ((C21825 * C290 + C22201 + C22201 + C21821 * C310 +
                     C21827 * C291 + C22202 + C22202 + C21822 * C311 +
                     C21829 * C1398 + C22203 + C22203 + C21823 * C1400) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47966 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47962 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47952 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47650 * C47930) *
                       C2588 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47962 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47966 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47952 +
                    (C21825 * C1125 + C22861 + C22861 + C21821 * C1137 +
                     C21827 * C1128 + C22862 + C22862 + C21822 * C1140 +
                     C21829 * C5922 + C22863 + C22863 + C21823 * C5926) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47691 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47698 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C2848) *
                       C47874 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C47691 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47698 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C3242) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47740 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C3750) *
                       C47691 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47740 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C3750) *
                       C47698 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47740 +
                    (C21825 * C1264 + C22760 + C22760 + C21821 * C1282 +
                     C21827 * C6081 + C22761 + C22761 + C21822 * C6085 +
                     C21829 * C22750 + C22762 + C22762 + C21823 * C22752) *
                        C47579 * C47853 * C3750) *
                       C2848) *
                  C47604) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47966 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C3242) *
                       C47962 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47737) *
                       C47952 +
                   ((C21825 * C1670 + C23114 + C23114 + C21821 * C1676 +
                     C21827 * C6577 + C23115 + C23115 + C21822 * C6581 +
                     C21829 * C23110 + C23116 + C23116 + C21823 * C23112) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C47956 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C2480 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C47943 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47967 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47964 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47955 -
                    (C21829 * C7453 + C23402 + C23402 + C21823 * C7457 +
                     C21827 * C2370 + C23403 + C23403 + C21822 * C2376 +
                     C21825 * C1974 + C23404 + C23404 + C21821 * C1986) *
                        C47579 * C47853 * C47936) *
                       C2480 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47964 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47967 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C47955 +
                    (C21825 * C2370 + C23759 + C23759 + C21821 * C2376 +
                     C21827 * C7453 + C23760 + C23760 + C21822 * C7457 +
                     C21829 * C23755 + C23761 + C23761 + C21823 * C23757) *
                        C47579 * C47853 * C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47740 +
                     (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                      C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                      C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                         C47579 * C47853 * C3750) *
                        C2480 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47740 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                      C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                      C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                         C47579 * C47853 * C3750) *
                        C47695) *
                       C47874 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47740 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                      C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                      C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                         C47579 * C47853 * C3750) *
                        C2480 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47740 +
                     (C21825 * C1259 + C23554 + C23554 + C21821 * C1277 +
                      C21827 * C1265 + C23555 + C23555 + C21822 * C1283 +
                      C21829 * C6082 + C23556 + C23556 + C21823 * C6086) *
                         C47579 * C47853 * C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C47956 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C2480 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C47943 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C2480 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47966 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C3242) *
                       C47962 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47737) *
                       C47952 +
                   ((C21825 * C1670 + C23114 + C23114 + C21821 * C1676 +
                     C21827 * C6577 + C23115 + C23115 + C21822 * C6581 +
                     C21829 * C23110 + C23116 + C23116 + C21823 * C23112) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1392 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1393 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C1394 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47874 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1393 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1392 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C1394 +
                    (C21825 * C1125 + C22861 + C22861 + C21821 * C1137 +
                     C21827 * C1128 + C22862 + C22862 + C21822 * C1140 +
                     C21829 * C5922 + C22863 + C22863 + C21823 * C5926) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47888 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47695) *
                       C637 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47888) *
                       C638 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47888 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47695) *
                       C639 +
                   ((C21825 * C290 + C22201 + C22201 + C21821 * C310 +
                     C21827 * C291 + C22202 + C22202 + C21822 * C311 +
                     C21829 * C1398 + C22203 + C22203 + C21823 * C1400) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C1792 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C1793 +
                     (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                      C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                      C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                         C47579 * C47853 * C47923) *
                        C47888 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C1793 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C1792 -
                     (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                      C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                      C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                         C47579 * C47853 * C47923) *
                        C47695) *
                       C47874 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C1793 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C1792 -
                     (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                      C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                      C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                         C47579 * C47853 * C47923) *
                        C47888 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C1792 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C1793 +
                     (C21825 * C1259 + C23554 + C23554 + C21821 * C1277 +
                      C21827 * C1265 + C23555 + C23555 + C21822 * C1283 +
                      C21829 * C6082 + C23556 + C23556 + C21823 * C6086) *
                         C47579 * C47853 * C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C1392 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47889) *
                       C1393 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47737) *
                       C1394 +
                   ((C21825 * C1670 + C23114 + C23114 + C21821 * C1676 +
                     C21827 * C6577 + C23115 + C23115 + C21822 * C6581 +
                     C21829 * C23110 + C23116 + C23116 + C21823 * C23112) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C281 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C47888 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C282 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C2254 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C2255 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C2256 -
                    (C21829 * C7453 + C23402 + C23402 + C21823 * C7457 +
                     C21827 * C2370 + C23403 + C23403 + C21822 * C2376 +
                     C21825 * C1974 + C23404 + C23404 + C21821 * C1986) *
                        C47579 * C47853 * C47936) *
                       C47888 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C2255 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C2254 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C2256 +
                    (C21825 * C2370 + C23759 + C23759 + C21821 * C2376 +
                     C21827 * C7453 + C23760 + C23760 + C21822 * C7457 +
                     C21829 * C23755 + C23761 + C23761 + C21823 * C23757) *
                        C47579 * C47853 * C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                        C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                        C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                           C47579 * C47853 * C47650 * C47632 * C108 -
                       (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                        C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                        C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                           C47579 * C47853 * C47650 * C47632 * C109 +
                       (C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                        C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                        C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                           C47579 * C47853 * C47650 * C47632 * C110 -
                       (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                        C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                        C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                           C47579 * C47853 * C47650 * C47632 * C111 +
                       (C21825 * C119 + C21844 + C21844 + C21821 * C133 +
                        C21827 * C292 + C21845 + C21845 + C21822 * C312 +
                        C21829 * C293 + C21846 + C21846 + C21823 * C313) *
                           C47579 * C47853 * C47650 * C47632 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                         C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                         C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                            C47579 * C47853 * C47650 * C47959 -
                        (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                         C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                         C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                            C47579 * C47853 * C47650 * C47947 +
                        (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                         C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                         C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                            C47579 * C47853 * C47650 * C47920) *
                           C281 +
                       ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                         C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                         C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                            C47579 * C47853 * C47650 * C47947 -
                        (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                         C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                         C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                            C47579 * C47853 * C47650 * C47959 -
                        (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                         C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                         C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                            C47579 * C47853 * C47650 * C47920) *
                           C282 +
                       ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                         C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                         C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                            C47579 * C47853 * C47650 * C47959 -
                        (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                         C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                         C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                            C47579 * C47853 * C47650 * C47947 +
                        (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                         C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                         C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                            C47579 * C47853 * C47650 * C47920) *
                           C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47632 * C281 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47949 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C47923) *
                       C47632 * C282 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C472 + C22100 + C22100 + C21821 * C492 +
                     C21827 * C1258 + C22101 + C22101 + C21822 * C1276 +
                     C21829 * C1266 + C22102 + C22102 + C21823 * C1284) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47956 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1051 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C1118 -
                   (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                    C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                    C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                       C47579 * C47853 * C47650 * C1119 +
                   (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                    C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                    C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                       C47579 * C47853 * C47650 * C1120 -
                   (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                    C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                    C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                       C47579 * C47853 * C47650 * C1121 +
                   (C21825 * C1127 + C22638 + C22638 + C21821 * C1139 +
                    C21827 * C5921 + C22639 + C22639 + C21822 * C5925 +
                    C21829 * C22631 + C22640 + C22640 + C21823 * C22633) *
                       C47579 * C47853 * C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C1050 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47949 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C47923) *
                       C1051 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C1264 + C22760 + C22760 + C21821 * C1282 +
                     C21827 * C6081 + C22761 + C22761 + C21822 * C6085 +
                     C21829 * C22750 + C22762 + C22762 + C21823 * C22752) *
                        C47579 * C47853 * C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47956 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C1793 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C472 + C22100 + C22100 + C21821 * C492 +
                     C21827 * C1258 + C22101 + C22101 + C21822 * C1276 +
                     C21829 * C1266 + C22102 + C22102 + C21823 * C1284) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47959 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C1793 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C47923) *
                       C47947 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C1264 + C22760 + C22760 + C21821 * C1282 +
                     C21827 * C6081 + C22761 + C22761 + C21822 * C6085 +
                     C21829 * C22750 + C22762 + C22762 + C21823 * C22752) *
                        C47579 * C47853 * C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C1967 -
                   (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                    C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                    C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                       C47579 * C47853 * C1968 +
                   (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                    C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                    C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                       C47579 * C47853 * C1969 -
                   (C21829 * C7453 + C23402 + C23402 + C21823 * C7457 +
                    C21827 * C2370 + C23403 + C23403 + C21822 * C2376 +
                    C21825 * C1974 + C23404 + C23404 + C21821 * C1986) *
                       C47579 * C47853 * C1970 +
                   (C21825 * C1975 + C23405 + C23405 + C21821 * C1987 +
                    C21827 * C6961 + C23406 + C23406 + C21822 * C6965 +
                    C21829 * C23398 + C23407 + C23407 + C21823 * C23400) *
                       C47579 * C47853 * C1971) *
                  C47632 * C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C1050 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C1051 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C47920) *
                       C47874 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C1050 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C1051 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47632 * C637 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47889) *
                       C47632 * C638 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47737) *
                       C47632 * C639 +
                   ((C21825 * C473 + C22302 + C22302 + C21821 * C493 +
                     C21827 * C908 + C22303 + C22303 + C21822 * C918 +
                     C21829 * C1558 + C22304 + C22304 + C21823 * C1560) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C2254 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C2255 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C2256 -
                    (C21829 * C7453 + C23402 + C23402 + C21823 * C7457 +
                     C21827 * C2370 + C23403 + C23403 + C21822 * C2376 +
                     C21825 * C1974 + C23404 + C23404 + C21821 * C1986) *
                        C47579 * C47853 * C47936) *
                       C47632 * C47874 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C2255 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C2254 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C2256 +
                    (C21825 * C1973 + C23655 + C23655 + C21821 * C1985 +
                     C21827 * C2371 + C23656 + C23656 + C21822 * C2377 +
                     C21829 * C7454 + C23657 + C23657 + C21823 * C7458) *
                        C47579 * C47853 * C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C281 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47947 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C282 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C47632 * C108 -
                   (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                    C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                    C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                       C47579 * C47853 * C47650 * C47632 * C109 +
                   (C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                    C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                    C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                       C47579 * C47853 * C47650 * C47632 * C110 -
                   (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                    C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                    C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                       C47579 * C47853 * C47650 * C47632 * C111 +
                   (C21825 * C119 + C21844 + C21844 + C21821 * C133 +
                    C21827 * C292 + C21845 + C21845 + C21822 * C312 +
                    C21829 * C293 + C21846 + C21846 + C21823 * C313) *
                       C47579 * C47853 * C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47956 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1051 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C1118 -
                   (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                    C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                    C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                       C47579 * C47853 * C47650 * C1119 +
                   (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                    C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                    C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                       C47579 * C47853 * C47650 * C1120 -
                   (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                    C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                    C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                       C47579 * C47853 * C47650 * C1121 +
                   (C21825 * C1127 + C22638 + C22638 + C21821 * C1139 +
                    C21827 * C5921 + C22639 + C22639 + C21822 * C5925 +
                    C21829 * C22631 + C22640 + C22640 + C21823 * C22633) *
                       C47579 * C47853 * C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47956 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C1793 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C472 + C22100 + C22100 + C21821 * C492 +
                     C21827 * C1258 + C22101 + C22101 + C21822 * C1276 +
                     C21829 * C1266 + C22102 + C22102 + C21823 * C1284) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47959 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C1793 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C47923) *
                       C47947 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C1792 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C1793 +
                    (C21825 * C1264 + C22760 + C22760 + C21821 * C1282 +
                     C21827 * C6081 + C22761 + C22761 + C21822 * C6085 +
                     C21829 * C22750 + C22762 + C22762 + C21823 * C22752) *
                        C47579 * C47853 * C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C47609 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C47888 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C47618 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C3242) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47740 +
                     (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                      C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                      C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                         C47579 * C47853 * C3750) *
                        C47888 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47740 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                      C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                      C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                         C47579 * C47853 * C3750) *
                        C47695) *
                       C2588 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47740 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                      C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                      C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                         C47579 * C47853 * C3750) *
                        C47888 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47733 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47740 +
                     (C21825 * C1259 + C23554 + C23554 + C21821 * C1277 +
                      C21827 * C1265 + C23555 + C23555 + C21822 * C1283 +
                      C21829 * C6082 + C23556 + C23556 + C21823 * C6086) *
                         C47579 * C47853 * C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47959 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47947 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C47920) *
                       C2588 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C47959 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47947 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47632 * C47965 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C3242) *
                       C47632 * C47958 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47737) *
                       C47632 * C47945 +
                   ((C21825 * C473 + C22302 + C22302 + C21821 * C493 +
                     C21827 * C908 + C22303 + C22303 + C21822 * C918 +
                     C21829 * C1558 + C22304 + C22304 + C21823 * C1560) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47967 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47964 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47955 -
                    (C21829 * C7453 + C23402 + C23402 + C21823 * C7457 +
                     C21827 * C2370 + C23403 + C23403 + C21822 * C2376 +
                     C21825 * C1974 + C23404 + C23404 + C21821 * C1986) *
                        C47579 * C47853 * C47936) *
                       C47632 * C2588 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47964 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47967 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C47955 +
                    (C21825 * C1973 + C23655 + C23655 + C21821 * C1985 +
                     C21827 * C2371 + C23656 + C23656 + C21822 * C2377 +
                     C21829 * C7454 + C23657 + C23657 + C21823 * C7458) *
                        C47579 * C47853 * C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47740 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C3750) *
                       C47632 * C47609 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47740 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C3750) *
                       C47632 * C47618 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47733 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47740 +
                    (C21825 * C472 + C22100 + C22100 + C21821 * C492 +
                     C21827 * C1258 + C22101 + C22101 + C21822 * C1276 +
                     C21829 * C1266 + C22102 + C22102 + C21823 * C1284) *
                        C47579 * C47853 * C3750) *
                       C47632 * C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47632 * C47965 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C3242) *
                       C47632 * C47958 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C3242 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47737) *
                       C47632 * C47945 +
                   ((C21825 * C473 + C22302 + C22302 + C21821 * C493 +
                     C21827 * C908 + C22303 + C22303 + C21822 * C918 +
                     C21829 * C1558 + C22304 + C22304 + C21823 * C1560) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47959 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C3242) *
                        C47947 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C47920) *
                       C2588 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C3242) *
                        C47959 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C3242 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47947 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47888 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47695) *
                       C637 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47888) *
                       C638 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47888 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47695) *
                       C639 +
                   ((C21825 * C290 + C22201 + C22201 + C21821 * C310 +
                     C21827 * C291 + C22202 + C22202 + C21822 * C311 +
                     C21829 * C1398 + C22203 + C22203 + C21823 * C1400) *
                        C47579 * C47853 * C47650 * C47695 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1392 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1393 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C1394 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47874 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1393 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1392 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C1394 +
                    (C21825 * C1125 + C22861 + C22861 + C21821 * C1137 +
                     C21827 * C1128 + C22862 + C22862 + C21822 * C1140 +
                     C21829 * C5922 + C22863 + C22863 + C21823 * C5926) *
                        C47579 * C47853 * C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C281 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C47888 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C47695) *
                       C282 +
                   (((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                      C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                      C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                      C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                      C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                         C47579 * C47853 * C47737) *
                        C47888 +
                    ((C21825 * C907 + C22457 + C22457 + C21821 * C917 +
                      C21827 * C1261 + C22458 + C22458 + C21822 * C1279 +
                      C21829 * C1672 + C22459 + C22459 + C21823 * C1678) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                      C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                      C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                         C47579 * C47853 * C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C1392 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47889) *
                       C1393 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47737) *
                       C1394 +
                   ((C21825 * C1670 + C23114 + C23114 + C21821 * C1676 +
                     C21827 * C6577 + C23115 + C23115 + C21822 * C6581 +
                     C21829 * C23110 + C23116 + C23116 + C21823 * C23112) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                     C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                     C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                        C47579 * C47853 * C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C281 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47947 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C282 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C47632 * C108 -
                   (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                    C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                    C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                       C47579 * C47853 * C47650 * C47632 * C109 +
                   (C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                    C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                    C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                       C47579 * C47853 * C47650 * C47632 * C110 -
                   (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                    C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                    C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                       C47579 * C47853 * C47650 * C47632 * C111 +
                   (C21825 * C119 + C21844 + C21844 + C21821 * C133 +
                    C21827 * C292 + C21845 + C21845 + C21822 * C312 +
                    C21829 * C293 + C21846 + C21846 + C21823 * C313) *
                       C47579 * C47853 * C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C47632 * C281 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47949 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1265 + C22094 + C22094 + C21823 * C1283 +
                     C21827 * C1259 + C22095 + C22095 + C21822 * C1277 +
                     C21825 * C471 + C22096 + C22096 + C21821 * C491) *
                        C47579 * C47853 * C47923) *
                       C47632 * C282 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C472 + C22100 + C22100 + C21821 * C492 +
                     C21827 * C1258 + C22101 + C22101 + C21822 * C1276 +
                     C21829 * C1266 + C22102 + C22102 + C21823 * C1284) *
                        C47579 * C47853 * C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47956 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1051 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C1118 -
                   (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                    C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                    C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                       C47579 * C47853 * C47650 * C1119 +
                   (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                    C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                    C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                       C47579 * C47853 * C47650 * C1120 -
                   (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                    C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                    C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                       C47579 * C47853 * C47650 * C1121 +
                   (C21825 * C1127 + C22638 + C22638 + C21821 * C1139 +
                    C21827 * C5921 + C22639 + C22639 + C21822 * C5925 +
                    C21829 * C22631 + C22640 + C22640 + C21823 * C22633) *
                       C47579 * C47853 * C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C470 + C22088 + C22088 + C21821 * C490 +
                     C21827 * C1260 + C22089 + C22089 + C21822 * C1278 +
                     C21829 * C1264 + C22090 + C22090 + C21823 * C1282) *
                        C47579 * C47853 * C47923) *
                       C1050 +
                   ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                     C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                     C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                        C47579 * C47853 * C47949 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C6081 + C22754 + C22754 + C21823 * C6085 +
                     C21827 * C1264 + C22755 + C22755 + C21822 * C1282 +
                     C21825 * C1260 + C22756 + C22756 + C21821 * C1278) *
                        C47579 * C47853 * C47923) *
                       C1051 +
                   ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47960 -
                    (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                     C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                     C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                        C47579 * C47853 * C47949 +
                    (C21825 * C1264 + C22760 + C22760 + C21821 * C1282 +
                     C21827 * C6081 + C22761 + C22761 + C21822 * C6085 +
                     C21829 * C22750 + C22762 + C22762 + C21823 * C22752) *
                        C47579 * C47853 * C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                     C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                     C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                        C47579 * C47853 * C47737) *
                       C47632 * C637 +
                   ((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                     C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                     C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47889) *
                       C47632 * C638 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47889 -
                    (C21829 * C1261 + C22097 + C22097 + C21823 * C1279 +
                     C21827 * C907 + C22098 + C22098 + C21822 * C917 +
                     C21825 * C467 + C22099 + C22099 + C21821 * C487) *
                        C47579 * C47853 * C47737) *
                       C47632 * C639 +
                   ((C21825 * C473 + C22302 + C22302 + C21821 * C493 +
                     C21827 * C908 + C22303 + C22303 + C21822 * C918 +
                     C21829 * C1558 + C22304 + C22304 + C21823 * C1560) *
                        C47579 * C47853 * C47737 -
                    (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                     C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                     C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                        C47579 * C47853 * C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                      C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                      C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1263 + C22085 + C22085 + C21823 * C1281 +
                      C21827 * C905 + C22086 + C22086 + C21822 * C915 +
                      C21825 * C469 + C22087 + C22087 + C21821 * C489) *
                         C47579 * C47853 * C47737) *
                        C1050 +
                    ((C21825 * C905 + C22451 + C22451 + C21821 * C915 +
                      C21827 * C1263 + C22452 + C22452 + C21822 * C1281 +
                      C21829 * C1670 + C22453 + C22453 + C21823 * C1676) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                      C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                      C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                         C47579 * C47853 * C47889) *
                        C1051 +
                    ((C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                      C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                      C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C6577 + C22757 + C22757 + C21823 * C6581 +
                      C21827 * C1670 + C22758 + C22758 + C21822 * C1676 +
                      C21825 * C1263 + C22759 + C22759 + C21821 * C1281) *
                         C47579 * C47853 * C47737) *
                        C47920) *
                       C47874 +
                   (((C21825 * C468 + C22091 + C22091 + C21821 * C488 +
                      C21827 * C906 + C22092 + C22092 + C21822 * C916 +
                      C21829 * C1262 + C22093 + C22093 + C21823 * C1280) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                      C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                      C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                         C47579 * C47853 * C47889) *
                        C1050 +
                    ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                      C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                      C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                         C47579 * C47853 * C47889 -
                     (C21829 * C1671 + C22454 + C22454 + C21823 * C1677 +
                      C21827 * C1262 + C22455 + C22455 + C21822 * C1280 +
                      C21825 * C906 + C22456 + C22456 + C21821 * C916) *
                         C47579 * C47853 * C47737) *
                        C1051 +
                    ((C21825 * C1262 + C23010 + C23010 + C21821 * C1280 +
                      C21827 * C1671 + C23011 + C23011 + C21822 * C1677 +
                      C21829 * C6578 + C23012 + C23012 + C21823 * C6582) *
                         C47579 * C47853 * C47737 -
                     (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                      C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                      C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                         C47579 * C47853 * C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C47632 * C108 -
                   (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                    C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                    C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                       C47579 * C47853 * C47650 * C47632 * C109 +
                   (C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                    C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                    C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                       C47579 * C47853 * C47650 * C47632 * C110 -
                   (C21829 * C291 + C21841 + C21841 + C21823 * C311 +
                    C21827 * C290 + C21842 + C21842 + C21822 * C310 +
                    C21825 * C118 + C21843 + C21843 + C21821 * C132) *
                       C47579 * C47853 * C47650 * C47632 * C111 +
                   (C21825 * C119 + C21844 + C21844 + C21821 * C133 +
                    C21827 * C292 + C21845 + C21845 + C21822 * C312 +
                    C21829 * C293 + C21846 + C21846 + C21823 * C313) *
                       C47579 * C47853 * C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C281 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C47947 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C282 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C47959 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C47947 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                     C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                     C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                     C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                     C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                     C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                     C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47956 +
                   ((C21825 * C285 + C21963 + C21963 + C21821 * C305 +
                     C21827 * C288 + C21964 + C21964 + C21822 * C308 +
                     C21829 * C1125 + C21965 + C21965 + C21823 * C1137) *
                        C47579 * C47853 * C47650 * C1051 -
                    (C21829 * C288 + C21835 + C21835 + C21823 * C308 +
                     C21827 * C285 + C21836 + C21836 + C21822 * C305 +
                     C21825 * C116 + C21837 + C21837 + C21821 * C130) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1128 + C21966 + C21966 + C21823 * C1140 +
                     C21827 * C1125 + C21967 + C21967 + C21822 * C1137 +
                     C21825 * C288 + C21968 + C21968 + C21821 * C308) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47943 +
                   ((C21825 * C117 + C21838 + C21838 + C21821 * C131 +
                     C21827 * C284 + C21839 + C21839 + C21822 * C304 +
                     C21829 * C289 + C21840 + C21840 + C21823 * C309) *
                        C47579 * C47853 * C47650 * C1050 -
                    (C21829 * C1124 + C21969 + C21969 + C21823 * C1136 +
                     C21827 * C289 + C21970 + C21970 + C21822 * C309 +
                     C21825 * C284 + C21971 + C21971 + C21821 * C304) *
                        C47579 * C47853 * C47650 * C1051 +
                    (C21825 * C289 + C21972 + C21972 + C21821 * C309 +
                     C21827 * C1124 + C21973 + C21973 + C21822 * C1136 +
                     C21829 * C1129 + C21974 + C21974 + C21823 * C1141) *
                        C47579 * C47853 * C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C21825 * C115 + C21832 + C21832 + C21821 * C129 +
                    C21827 * C286 + C21833 + C21833 + C21822 * C306 +
                    C21829 * C287 + C21834 + C21834 + C21823 * C307) *
                       C47579 * C47853 * C47650 * C1118 -
                   (C21829 * C1126 + C21957 + C21957 + C21823 * C1138 +
                    C21827 * C287 + C21958 + C21958 + C21822 * C307 +
                    C21825 * C286 + C21959 + C21959 + C21821 * C306) *
                       C47579 * C47853 * C47650 * C1119 +
                   (C21825 * C287 + C21960 + C21960 + C21821 * C307 +
                    C21827 * C1126 + C21961 + C21961 + C21822 * C1138 +
                    C21829 * C1127 + C21962 + C21962 + C21823 * C1139) *
                       C47579 * C47853 * C47650 * C1120 -
                   (C21829 * C5921 + C22635 + C22635 + C21823 * C5925 +
                    C21827 * C1127 + C22636 + C22636 + C21822 * C1139 +
                    C21825 * C1126 + C22637 + C22637 + C21821 * C1138) *
                       C47579 * C47853 * C47650 * C1121 +
                   (C21825 * C1127 + C22638 + C22638 + C21821 * C1139 +
                    C21827 * C5921 + C22639 + C22639 + C21822 * C5925 +
                    C21829 * C22631 + C22640 + C22640 + C21823 * C22633) *
                       C47579 * C47853 * C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C47691 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47698 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47650 * C2848) *
                       C47609 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47698 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47691 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C2848) *
                       C47618 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47691 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47698 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C2848) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47691 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C47698 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C47889 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C2848) *
                       C2588 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C47691 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47698 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C47889) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[127] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C47966 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47962 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47650 * C47952 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47650 * C47930) *
                       C2588 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47962 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47966 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47952 +
                    ((C17591 + C17590) * C47579 * C10509 +
                     (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                      C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47695) *
                       C47965 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C2480) *
                       C47958 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47695) *
                       C47945 +
                   (((C16691 + C16690) * C47579 * C10509 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47960 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47949 +
                     ((C26387 + C26386) * C47579 * C10509 +
                      (C28121 + C28122) * C47579 * C47940) *
                         C47923) *
                        C2480 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47949 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47960 -
                     ((C28589 + C28590) * C47579 * C47940 +
                      (C27255 + C27254) * C47579 * C10509) *
                         C47923) *
                        C47695) *
                       C2588 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47949 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47960 -
                     ((C18660 + C18661) * C47579 * C47940 +
                      (C16545 + C16544) * C47579 * C10509) *
                         C47923) *
                        C2480 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47960 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47949 +
                     ((C18519 + C18518) * C47579 * C10509 +
                      (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                       C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                          C47579 * C47940) *
                         C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C47609 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C2480 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C47618 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C47889 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47695) *
                       C47965 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C2480) *
                       C47958 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47695) *
                       C47945 +
                   (((C16691 + C16690) * C47579 * C10509 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C47966 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47962 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47650 * C47952 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47650 * C47930) *
                       C2588 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47962 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47966 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47952 +
                    ((C17591 + C17590) * C47579 * C10509 +
                     (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                      C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47691 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47698 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C3242 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C2848) *
                       C47874 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C47691 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47698 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C3242) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47733 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47740 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C3750) *
                       C47691 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47740 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47733 -
                    ((C28589 + C28590) * C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C3750) *
                       C47698 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47733 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47740 +
                    ((C27259 + C27258) * C47579 * C10509 +
                     (C16089 * C7453 + C27240 + C27240 + C16085 * C7457 +
                      C16091 * C23755 + C27241 + C27241 + C47938 * C23757) *
                         C47579 * C47940) *
                        C3750) *
                       C2848) *
                  C47604) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C3242 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47966 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47737 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C3242) *
                       C47962 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C3242 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47737) *
                       C47952 +
                   (((C27724 + C27725) * C47579 * C10509 +
                     (C16089 * C6081 + C27718 + C27718 + C16085 * C6085 +
                      C16091 * C22750 + C27719 + C27719 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C47956 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C2480 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C47943 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C3242 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47967 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47964 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C47955 -
                    ((C28123 + C28124) * C47579 * C47940 +
                     (C28122 + C28121) * C47579 * C10509) *
                        C47936) *
                       C2480 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47964 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47967 -
                    ((C28589 + C28590) * C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C47955 +
                    ((C28590 + C28589) * C47579 * C10509 +
                     (C16089 * C6961 + C28583 + C28583 + C16085 * C6965 +
                      C16091 * C23398 + C28584 + C28584 + C47938 * C23400) *
                         C47579 * C47940) *
                        C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47733 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47740 +
                     ((C26387 + C26386) * C47579 * C10509 +
                      (C28121 + C28122) * C47579 * C47940) *
                         C3750) *
                        C2480 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47740 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47733 -
                     ((C28589 + C28590) * C47579 * C47940 +
                      (C27255 + C27254) * C47579 * C10509) *
                         C3750) *
                        C47695) *
                       C47874 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47740 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47733 -
                     ((C18660 + C18661) * C47579 * C47940 +
                      (C16545 + C16544) * C47579 * C10509) *
                         C3750) *
                        C2480 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47733 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47740 +
                     ((C18519 + C18518) * C47579 * C10509 +
                      (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                       C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                          C47579 * C47940) *
                         C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C47956 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C2480 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C47943 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C3242 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C2480 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C3242 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47966 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47737 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C3242) *
                       C47962 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C3242 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47737) *
                       C47952 +
                   (((C27724 + C27725) * C47579 * C10509 +
                     (C16089 * C6081 + C27718 + C27718 + C16085 * C6085 +
                      C16091 * C22750 + C27719 + C27719 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1392 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1393 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47650 * C1394 -
                    ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                      C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                         C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47650 * C47930) *
                       C47874 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1393 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1392 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C1394 +
                    ((C17591 + C17590) * C47579 * C10509 +
                     (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                      C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                      C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                         C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47695) *
                       C637 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47888) *
                       C638 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47695) *
                       C639 +
                   (((C16691 + C16690) * C47579 * C10509 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C1792 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C1793 +
                     ((C26387 + C26386) * C47579 * C10509 +
                      (C28121 + C28122) * C47579 * C47940) *
                         C47923) *
                        C47888 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C1793 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C1792 -
                     ((C16091 * C7453 + C18793 + C18793 + C47938 * C7457 +
                       C16089 * C2370 + C18792 + C18792 + C16085 * C2376) *
                          C47579 * C47940 +
                      (C27255 + C27254) * C47579 * C10509) *
                         C47923) *
                        C47695) *
                       C47874 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C1793 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C1792 -
                     ((C18660 + C18661) * C47579 * C47940 +
                      (C16545 + C16544) * C47579 * C10509) *
                         C47923) *
                        C47888 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C1792 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C1793 +
                     ((C18519 + C18518) * C47579 * C10509 +
                      (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                       C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                          C47579 * C47940) *
                         C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[136] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47889 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C1392 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47737 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47889) *
                       C1393 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47889 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47737) *
                       C1394 +
                   (((C27724 + C27725) * C47579 * C10509 +
                     (C16089 * C6081 + C27718 + C27718 + C16085 * C6085 +
                      C16091 * C22750 + C27719 + C27719 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C16089 * C1260 + C17441 + C17441 + C16085 * C1278 +
                       C16091 * C1264 + C17440 + C17440 + C47938 * C1282) *
                          C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C281 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C47888 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C282 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C47889 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C2254 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C2255 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C2256 -
                    ((C28123 + C28124) * C47579 * C47940 +
                     (C28122 + C28121) * C47579 * C10509) *
                        C47936) *
                       C47888 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C2255 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C2254 -
                    ((C28589 + C28590) * C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C2256 +
                    ((C28590 + C28589) * C47579 * C10509 +
                     (C16089 * C6961 + C28583 + C28583 + C16085 * C6965 +
                      C16091 * C23398 + C28584 + C28584 + C47938 * C23400) *
                         C47579 * C47940) *
                        C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] += (0.5 * std::pow(Pi, 2.5) *
                      (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                         C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                            C47579 * C10509 +
                        (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                         C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                            C47579 * C47940) *
                           C47650 * C47632 * C108 -
                       ((C16542 + C16543) * C47579 * C47940 +
                        (C16139 + C16138) * C47579 * C10509) *
                           C47650 * C47632 * C109 +
                       ((C16141 + C16140) * C47579 * C10509 +
                        (C16546 + C16547) * C47579 * C47940) *
                           C47650 * C47632 * C110 -
                       ((C16832 + C16833) * C47579 * C47940 +
                        (C16143 + C16142) * C47579 * C10509) *
                           C47650 * C47632 * C111 +
                       ((C16145 + C16144) * C47579 * C10509 +
                        (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                         C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                            C47579 * C47940) *
                           C47650 * C47632 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                          C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                             C47579 * C10509 +
                         (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                          C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                             C47579 * C47940) *
                            C47650 * C47959 -
                        ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                          C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                             C47579 * C47940 +
                         (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                          C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                             C47579 * C10509) *
                            C47650 * C47947 +
                        ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                          C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                             C47579 * C10509 +
                         (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                          C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                             C47579 * C47940) *
                            C47650 * C47920) *
                           C281 +
                       (((C16341 + C16340) * C47579 * C10509 +
                         (C17052 + C17053) * C47579 * C47940) *
                            C47650 * C47947 -
                        ((C16542 + C16543) * C47579 * C47940 +
                         (C16139 + C16138) * C47579 * C10509) *
                            C47650 * C47959 -
                        ((C17796 + C17797) * C47579 * C47940 +
                         (C16343 + C16342) * C47579 * C10509) *
                            C47650 * C47920) *
                           C282 +
                       (((C16141 + C16140) * C47579 * C10509 +
                         (C16546 + C16547) * C47579 * C47940) *
                            C47650 * C47959 -
                        ((C17054 + C17055) * C47579 * C47940 +
                         (C16345 + C16344) * C47579 * C10509) *
                            C47650 * C47947 +
                        ((C16347 + C16346) * C47579 * C10509 +
                         (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                          C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                             C47579 * C47940) *
                            C47650 * C47920) *
                           C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47960 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47949 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C281 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47949 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47960 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C47923) *
                       C47632 * C282 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47960 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47949 +
                    ((C16549 + C16548) * C47579 * C10509 +
                     (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                      C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1050 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C26384 + C26385) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C26851 + C26850) * C47579 * C47940 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C47579 * C10509) *
                       C47650 * C1119 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C47579 * C10509 +
                    (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                     C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                     C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                        C47579 * C47940 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C47579 * C10509) *
                       C47650 * C1121 +
                   ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                     C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                        C47579 * C10509 +
                    (C16089 * C6577 + C27080 + C27080 + C16085 * C6581 +
                     C16091 * C23110 + C27081 + C27081 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47960 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47949 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C1050 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47949 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47960 -
                    ((C16091 * C7453 + C18793 + C18793 + C47938 * C7457 +
                      C16089 * C2370 + C18792 + C18792 + C16085 * C2376) *
                         C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C47923) *
                       C1051 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47960 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47949 +
                    ((C27259 + C27258) * C47579 * C10509 +
                     (C16089 * C7453 + C27240 + C27240 + C16085 * C7457 +
                      C16091 * C23755 + C27241 + C27241 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C1792 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C1793 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47956 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C1793 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C1792 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C47923) *
                       C47632 * C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C1792 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C1793 +
                    ((C16549 + C16548) * C47579 * C10509 +
                     (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                      C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C1792 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C1793 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47959 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C1793 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C1792 -
                    ((C16091 * C7453 + C18793 + C18793 + C47938 * C7457 +
                      C16089 * C2370 + C18792 + C18792 + C16085 * C2376) *
                         C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C47923) *
                       C47947 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C1792 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C1793 +
                    ((C27259 + C27258) * C47579 * C10509 +
                     (C16089 * C7453 + C27240 + C27240 + C16085 * C7457 +
                      C16091 * C23755 + C27241 + C27241 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C26384 + C26385) * C47579 * C47940) *
                       C1967 -
                   ((C26386 + C26387) * C47579 * C47940 +
                    (C26385 + C26384) * C47579 * C10509) *
                       C1968 +
                   ((C26387 + C26386) * C47579 * C10509 +
                    (C28121 + C28122) * C47579 * C47940) *
                       C1969 -
                   ((C28123 + C28124) * C47579 * C47940 +
                    (C28122 + C28121) * C47579 * C10509) *
                       C1970 +
                   ((C28124 + C28123) * C47579 * C10509 +
                    (C16089 * C12540 + C28111 + C28111 + C16085 * C12544 +
                     C16091 * C28099 + C28112 + C28112 + C47938 * C28101) *
                        C47579 * C47940) *
                       C1971) *
                  C47632 * C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[138] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C1050 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C1051 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C47889 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C47920) *
                       C47874 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C1050 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C1051 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47889 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47632 * C637 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47737 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47889) *
                       C47632 * C638 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47889 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47737) *
                       C47632 * C639 +
                   (((C16833 + C16832) * C47579 * C10509 +
                     (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                      C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C2254 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C2255 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C2256 -
                    ((C28123 + C28124) * C47579 * C47940 +
                     (C28122 + C28121) * C47579 * C10509) *
                        C47936) *
                       C47632 * C47874 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C2255 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C2254 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C2256 +
                    ((C18661 + C18660) * C47579 * C10509 +
                     (C16089 * C1976 + C18312 + C18312 + C16085 * C1988 +
                      C16091 * C6962 + C18313 + C18313 + C47938 * C6966) *
                         C47579 * C47940) *
                        C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                      C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                      C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                         C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47959 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C282 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                     C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C16542 + C16543) * C47579 * C47940 +
                    (C16139 + C16138) * C47579 * C10509) *
                       C47650 * C47632 * C109 +
                   ((C16141 + C16140) * C47579 * C10509 +
                    (C16546 + C16547) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C16832 + C16833) * C47579 * C47940 +
                    (C16143 + C16142) * C47579 * C10509) *
                       C47650 * C47632 * C111 +
                   ((C16145 + C16144) * C47579 * C10509 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1050 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C26384 + C26385) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C26851 + C26850) * C47579 * C47940 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C47579 * C10509) *
                       C47650 * C1119 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C47579 * C10509 +
                    (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                     C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                     C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                        C47579 * C47940 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C47579 * C10509) *
                       C47650 * C1121 +
                   ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                     C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                        C47579 * C10509 +
                    (C16089 * C6577 + C27080 + C27080 + C16085 * C6581 +
                     C16091 * C23110 + C27081 + C27081 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C1792 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C1793 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47956 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C1793 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C1792 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C47923) *
                       C47632 * C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C1792 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C1793 +
                    ((C16549 + C16548) * C47579 * C10509 +
                     (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                      C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C1792 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C1793 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47959 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C1793 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C1792 -
                    ((C16091 * C7453 + C18793 + C18793 + C47938 * C7457 +
                      C16089 * C2370 + C18792 + C18792 + C16085 * C2376) *
                         C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C47923) *
                       C47947 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C1792 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C1793 +
                    ((C27259 + C27258) * C47579 * C10509 +
                     (C16089 * C7453 + C27240 + C27240 + C16085 * C7457 +
                      C16091 * C23755 + C27241 + C27241 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C47609 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C47888 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C47618 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C3242 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C3242) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47733 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47740 +
                     ((C26387 + C26386) * C47579 * C10509 +
                      (C28121 + C28122) * C47579 * C47940) *
                         C3750) *
                        C47888 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47740 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47733 -
                     ((C28589 + C28590) * C47579 * C47940 +
                      (C27255 + C27254) * C47579 * C10509) *
                         C3750) *
                        C47695) *
                       C2588 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47740 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47733 -
                     ((C18660 + C18661) * C47579 * C47940 +
                      (C16545 + C16544) * C47579 * C10509) *
                         C3750) *
                        C47888 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47733 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47740 +
                     ((C18519 + C18518) * C47579 * C10509 +
                      (C16089 * C2371 + C18794 + C18794 + C16085 * C2377 +
                       C16091 * C7454 + C18795 + C18795 + C47938 * C7458) *
                          C47579 * C47940) *
                         C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47959 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47947 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C3242 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C47920) *
                       C2588 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C47959 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47947 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C3242 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47632 * C47965 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47737 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C3242) *
                       C47632 * C47958 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C3242 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47737) *
                       C47632 * C47945 +
                   (((C16833 + C16832) * C47579 * C10509 +
                     (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                      C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47967 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47964 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C47955 -
                    ((C28123 + C28124) * C47579 * C47940 +
                     (C28122 + C28121) * C47579 * C10509) *
                        C47936) *
                       C47632 * C2588 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47964 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47967 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C47955 +
                    ((C18661 + C18660) * C47579 * C10509 +
                     (C16089 * C1976 + C18312 + C18312 + C16085 * C1988 +
                      C16091 * C6962 + C18313 + C18313 + C47938 * C6966) *
                         C47579 * C47940) *
                        C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47733 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47740 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C28121 + C28122) * C47579 * C47940) *
                        C3750) *
                       C47632 * C47609 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47740 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47733 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C3750) *
                       C47632 * C47618 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47733 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47740 +
                    ((C16549 + C16548) * C47579 * C10509 +
                     (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                      C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                         C47579 * C47940) *
                        C3750) *
                       C47632 * C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C3242 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47632 * C47965 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47737 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C3242) *
                       C47632 * C47958 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C3242 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47737) *
                       C47632 * C47945 +
                   (((C16833 + C16832) * C47579 * C10509 +
                     (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                      C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C3242 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47959 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C3242) *
                        C47947 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C3242 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C47920) *
                       C2588 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C3242) *
                        C47959 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C3242 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47947 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                      C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                         C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47695) *
                       C637 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47888) *
                       C638 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47695) *
                       C639 +
                   (((C16691 + C16690) * C47579 * C10509 +
                     (C16089 * C908 + C17042 + C17042 + C16085 * C918 +
                      C16091 * C1558 + C17043 + C17043 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1392 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1393 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47650 * C1394 -
                    ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                      C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                         C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47650 * C47930) *
                       C47874 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1393 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1392 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C1394 +
                    ((C17591 + C17590) * C47579 * C10509 +
                     (C16089 * C1671 + C17930 + C17930 + C16085 * C1677 +
                      C16091 * C6578 + C17931 + C17931 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C16089 * C1260 + C17441 + C17441 + C16085 * C1278 +
                       C16091 * C1264 + C17440 + C17440 + C47938 * C1282) *
                          C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C281 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C47888 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C47695) *
                       C282 +
                   ((((C16141 + C16140) * C47579 * C10509 +
                      (C16546 + C16547) * C47579 * C47940) *
                         C47889 -
                     ((C16548 + C16549) * C47579 * C47940 +
                      (C16547 + C16546) * C47579 * C10509) *
                         C47737) *
                        C47888 +
                    (((C17055 + C17054) * C47579 * C10509 +
                      (C16089 * C1258 + C18512 + C18512 + C16085 * C1276 +
                       C16091 * C1266 + C18513 + C18513 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17054 + C17055) * C47579 * C47940 +
                      (C16345 + C16344) * C47579 * C10509) *
                         C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47889 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C1392 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47737 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47889) *
                       C1393 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47889 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47737) *
                       C1394 +
                   (((C27724 + C27725) * C47579 * C10509 +
                     (C16089 * C6081 + C27718 + C27718 + C16085 * C6085 +
                      C16091 * C22750 + C27719 + C27719 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C27725 + C27724) * C47579 * C47940 +
                     (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                      C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                         C47579 * C10509) *
                        C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                      C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                      C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                         C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47959 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C282 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                     C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C16542 + C16543) * C47579 * C47940 +
                    (C16139 + C16138) * C47579 * C10509) *
                       C47650 * C47632 * C109 +
                   ((C16141 + C16140) * C47579 * C10509 +
                    (C16546 + C16547) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C16832 + C16833) * C47579 * C47940 +
                    (C16143 + C16142) * C47579 * C10509) *
                       C47650 * C47632 * C111 +
                   ((C16145 + C16144) * C47579 * C10509 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47960 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47949 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C281 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47949 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47960 -
                    ((C18660 + C18661) * C47579 * C47940 +
                     (C16545 + C16544) * C47579 * C10509) *
                        C47923) *
                       C47632 * C282 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47960 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47949 +
                    ((C16549 + C16548) * C47579 * C10509 +
                     (C16089 * C1972 + C18654 + C18654 + C16085 * C1984 +
                      C16091 * C2372 + C18655 + C18655 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1050 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C26384 + C26385) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C26851 + C26850) * C47579 * C47940 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C47579 * C10509) *
                       C47650 * C1119 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C47579 * C10509 +
                    (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                     C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                     C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                        C47579 * C47940 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C47579 * C10509) *
                       C47650 * C1121 +
                   ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                     C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                        C47579 * C10509 +
                    (C16089 * C6577 + C27080 + C27080 + C16085 * C6581 +
                     C16091 * C23110 + C27081 + C27081 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47960 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47949 +
                    ((C26387 + C26386) * C47579 * C10509 +
                     (C16089 * C1974 + C18309 + C18309 + C16085 * C1986 +
                      C16091 * C2370 + C18308 + C18308 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C1050 +
                   (((C26850 + C26851) * C47579 * C10509 +
                     (C27254 + C27255) * C47579 * C47940) *
                        C47949 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47960 -
                    ((C16091 * C7453 + C18793 + C18793 + C47938 * C7457 +
                      C16089 * C2370 + C18792 + C18792 + C16085 * C2376) *
                         C47579 * C47940 +
                     (C27255 + C27254) * C47579 * C10509) *
                        C47923) *
                       C1051 +
                   (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C27256 + C27257) * C47579 * C47940) *
                        C47960 -
                    ((C27258 + C27259) * C47579 * C47940 +
                     (C27257 + C27256) * C47579 * C10509) *
                        C47949 +
                    ((C27259 + C27258) * C47579 * C10509 +
                     (C16089 * C7453 + C27240 + C27240 + C16085 * C7457 +
                      C16091 * C23755 + C27241 + C27241 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47889 -
                    ((C26386 + C26387) * C47579 * C47940 +
                     (C26385 + C26384) * C47579 * C10509) *
                        C47737) *
                       C47632 * C637 +
                   (((C16543 + C16542) * C47579 * C10509 +
                     (C16544 + C16545) * C47579 * C47940) *
                        C47737 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47889) *
                       C47632 * C638 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47889 -
                    ((C16548 + C16549) * C47579 * C47940 +
                     (C16547 + C16546) * C47579 * C10509) *
                        C47737) *
                       C47632 * C639 +
                   (((C16833 + C16832) * C47579 * C10509 +
                     (C16089 * C474 + C16524 + C16524 + C16085 * C494 +
                      C16091 * C2142 + C16525 + C16525 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C16832 + C16833) * C47579 * C47940 +
                     (C16143 + C16142) * C47579 * C10509) *
                        C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                       C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                          C47579 * C10509 +
                      (C26384 + C26385) * C47579 * C47940) *
                         C47889 -
                     ((C26386 + C26387) * C47579 * C47940 +
                      (C26385 + C26384) * C47579 * C10509) *
                         C47737) *
                        C1050 +
                    (((C26850 + C26851) * C47579 * C10509 +
                      (C27254 + C27255) * C47579 * C47940) *
                         C47737 -
                     ((C26851 + C26850) * C47579 * C47940 +
                      (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                       C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                          C47579 * C10509) *
                         C47889) *
                        C1051 +
                    (((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                       C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                          C47579 * C10509 +
                      (C27256 + C27257) * C47579 * C47940) *
                         C47889 -
                     ((C27258 + C27259) * C47579 * C47940 +
                      (C27257 + C27256) * C47579 * C10509) *
                         C47737) *
                        C47920) *
                       C47874 +
                   ((((C16543 + C16542) * C47579 * C10509 +
                      (C16544 + C16545) * C47579 * C47940) *
                         C47737 -
                     ((C16542 + C16543) * C47579 * C47940 +
                      (C16139 + C16138) * C47579 * C10509) *
                         C47889) *
                        C1050 +
                    (((C16341 + C16340) * C47579 * C10509 +
                      (C17052 + C17053) * C47579 * C47940) *
                         C47889 -
                     ((C18518 + C18519) * C47579 * C47940 +
                      (C17053 + C17052) * C47579 * C10509) *
                         C47737) *
                        C1051 +
                    (((C17797 + C17796) * C47579 * C10509 +
                      (C16089 * C1265 + C17448 + C17448 + C16085 * C1283 +
                       C16091 * C6082 + C17449 + C17449 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C17796 + C17797) * C47579 * C47940 +
                      (C16343 + C16342) * C47579 * C10509) *
                         C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                     C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C16542 + C16543) * C47579 * C47940 +
                    (C16139 + C16138) * C47579 * C10509) *
                       C47650 * C47632 * C109 +
                   ((C16141 + C16140) * C47579 * C10509 +
                    (C16546 + C16547) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C16832 + C16833) * C47579 * C47940 +
                    (C16143 + C16142) * C47579 * C10509) *
                       C47650 * C47632 * C111 +
                   ((C16145 + C16144) * C47579 * C10509 +
                    (C16089 * C475 + C16826 + C16826 + C16085 * C495 +
                     C16091 * C909 + C16827 + C16827 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C16089 * C469 + C16501 + C16501 + C16085 * C489 +
                      C16091 * C905 + C16500 + C16500 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C16091 * C1263 + C17029 + C17029 + C47938 * C1281 +
                      C16089 * C905 + C17028 + C17028 + C16085 * C915) *
                         C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C47959 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C282 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C47947 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                      C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                         C47579 * C10509 +
                     (C26384 + C26385) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C26851 + C26850) * C47579 * C47940 +
                     (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                      C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                         C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                      C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                         C47579 * C10509 +
                     (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                      C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C16341 + C16340) * C47579 * C10509 +
                     (C17052 + C17053) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C16542 + C16543) * C47579 * C47940 +
                     (C16139 + C16138) * C47579 * C10509) *
                        C47650 * C1050 -
                    ((C17796 + C17797) * C47579 * C47940 +
                     (C16343 + C16342) * C47579 * C10509) *
                        C47650 * C47920) *
                       C47943 +
                   (((C16141 + C16140) * C47579 * C10509 +
                     (C16546 + C16547) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C17054 + C17055) * C47579 * C47940 +
                     (C16345 + C16344) * C47579 * C10509) *
                        C47650 * C1051 +
                    ((C16347 + C16346) * C47579 * C10509 +
                     (C16089 * C1261 + C17790 + C17790 + C16085 * C1279 +
                      C16091 * C1672 + C17791 + C17791 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C16089 * C115 + C16094 + C16094 + C16085 * C129 +
                     C16091 * C286 + C16095 + C16095 + C47938 * C306) *
                        C47579 * C10509 +
                    (C26384 + C26385) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C26851 + C26850) * C47579 * C47940 +
                    (C16091 * C287 + C16298 + C16298 + C47938 * C307 +
                     C16089 * C286 + C16299 + C16299 + C16085 * C306) *
                        C47579 * C10509) *
                       C47650 * C1119 +
                   ((C16089 * C287 + C16300 + C16300 + C16085 * C307 +
                     C16091 * C1126 + C16301 + C16301 + C47938 * C1138) *
                        C47579 * C10509 +
                    (C16089 * C1263 + C17445 + C17445 + C16085 * C1281 +
                     C16091 * C1670 + C17444 + C17444 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C16091 * C6577 + C17929 + C17929 + C47938 * C6581 +
                     C16089 * C1670 + C17928 + C17928 + C16085 * C1676) *
                        C47579 * C47940 +
                    (C16091 * C1127 + C17286 + C17286 + C47938 * C1139 +
                     C16089 * C1126 + C17287 + C17287 + C16085 * C1138) *
                        C47579 * C10509) *
                       C47650 * C1121 +
                   ((C16089 * C1127 + C17288 + C17288 + C16085 * C1139 +
                     C16091 * C5921 + C17289 + C17289 + C47938 * C5925) *
                        C47579 * C10509 +
                    (C16089 * C6577 + C27080 + C27080 + C16085 * C6581 +
                     C16091 * C23110 + C27081 + C27081 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C47691 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47698 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47650 * C2848) *
              C47609 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C47698 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47691 -
           ((C33110 + C33109) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C2848) *
              C47618 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C47691 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47698 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C2848) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47691 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C47698 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C47889 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C2848) *
              C2588 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C47691 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47698 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C47889) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C47966 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47962 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47650 * C47952 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47650 * C47930) *
              C2588 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C47962 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47966 -
           ((C33110 + C33109) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47952 +
           ((C1412 * C16087 + C1411 * C47907) * C31636 +
            (C11831 * C16087 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C2480 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47695) *
              C47965 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C47695 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C2480) *
              C47958 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C2480 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47695) *
              C47945 +
          (((C353 * C16087 + C650 * C47907) * C31636 +
            (C940 * C16087 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47650 * C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47960 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47949 +
            ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) *
                C47923) *
               C2480 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47949 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47960 -
            ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) *
                C47923) *
               C47695) *
              C2588 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47949 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47960 -
            ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) *
                C47923) *
               C2480 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47960 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) * C47949 +
            ((C33816 + C33815) * C31636 +
             (C12768 * C16087 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C2480 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C47695) *
              C47609 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C2480 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C47618 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C47889 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C2480 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C47889) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C2480 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47695) *
              C47965 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C47695 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C2480) *
              C47958 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C2480 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47695) *
              C47945 +
          (((C353 * C16087 + C650 * C47907) * C31636 +
            (C940 * C16087 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47650 * C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C47966 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47962 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47650 * C47952 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47650 * C47930) *
              C2588 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C47962 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47966 -
           ((C33110 + C33109) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47952 +
           ((C1412 * C16087 + C1411 * C47907) * C31636 +
            (C11831 * C16087 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47691 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47698 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C3242 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C2848) *
              C47874 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C47691 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47698 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C3242) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47733 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47740 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C3750) *
              C47691 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47740 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47733 -
           ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) * C3750) *
              C47698 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47733 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47740 +
           ((C32784 + C32783) * C31636 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C16087 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C3750) *
              C2848) *
         C47604) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C3242 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47966 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C3242) *
              C47962 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C3242 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47737) *
              C47952 +
          (((C33241 + C33242) * C31636 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C16087 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C2480 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47695) *
              C47956 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C2480 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C47943 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C3242 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C2480 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47967 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47964 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C47955 -
           ((C33619 + C33620) * C47940 + (C33618 + C33617) * C31636) * C47936) *
              C2480 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47964 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47967 -
           ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) * C47955 +
           ((C34080 + C34079) * C31636 +
            ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C16087 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47907) *
                C47940) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47733 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47740 +
            ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C3750) *
               C2480 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47740 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47733 -
            ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) * C3750) *
               C47695) *
              C47874 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47740 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47733 -
            ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) * C3750) *
               C2480 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47733 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) * C47740 +
            ((C33816 + C33815) * C31636 +
             (C12768 * C16087 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C2480 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47695) *
              C47956 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C2480 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C47943 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C3242 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C2480 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C3242 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47966 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C3242) *
              C47962 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C3242 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47737) *
              C47952 +
          (((C33241 + C33242) * C31636 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C16087 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1392 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1393 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47650 * C1394 -
           ((C11831 * C47907 + C12165 * C16087) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47650 * C47930) *
              C47874 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1393 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1392 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C1394 +
           ((C1412 * C16087 + C1411 * C47907) * C31636 +
            (C11831 * C16087 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C47888 -
           ((C938 * C47907 + C11291 * C16087) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47695) *
              C637 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C938 * C16087 + C939 * C47907) * C47940) *
               C47650 * C47695 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47888) *
              C638 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C47888 -
           ((C940 * C47907 + C939 * C16087) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47695) *
              C639 +
          (((C353 * C16087 + C650 * C47907) * C31636 +
            (C940 * C16087 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C759 * C47907 + C536 * C16087) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47650 * C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C1792 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1793 +
            ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) *
                C47923) *
               C47888 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C1793 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C1792 -
            ((C12768 * C47907 + C13038 * C16087) * C47940 +
             (C32780 + C32779) * C31636) *
                C47923) *
               C47695) *
              C47874 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C1793 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C1792 -
            ((C2271 * C47907 + C2272 * C16087) * C47940 +
             (C31938 + C31937) * C31636) *
                C47923) *
               C47888 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C1792 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) * C1793 +
            ((C33816 + C33815) * C31636 +
             (C12768 * C16087 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47889 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C1392 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47889) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47889 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47737) *
              C1394 +
          (((C33241 + C33242) * C31636 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C16087 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47888 +
           (((C32399 + C32400) * C31636 +
             (C11689 * C16087 + C2156 * C47907) * C47940) *
                C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C47695) *
              C281 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C47888 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C16087) * C47940 +
             (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C282 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C47889 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C47888 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C2254 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C2255 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C2256 -
           ((C33619 + C33620) * C47940 + (C33618 + C33617) * C31636) * C47936) *
              C47888 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C2255 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C2254 -
           ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) * C2256 +
           ((C34080 + C34079) * C31636 +
            ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C16087 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47907) *
                C47940) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
                C164 * C47907) *
                   C31636 +
               (C10822 * C16087 + C533 * C47907) * C47940) *
                  C47650 * C47632 * C108 -
              ((C532 * C47907 + C533 * C16087) * C47940 +
               (C165 * C47907 + C164 * C16087) * C31636) *
                  C47650 * C47632 * C109 +
              ((C165 * C16087 + C166 * C47907) * C31636 +
               (C532 * C16087 + C536 * C47907) * C47940) *
                  C47650 * C47632 * C110 -
              ((C759 * C47907 + C536 * C16087) * C47940 +
               (C167 * C47907 + C166 * C16087) * C31636) *
                  C47650 * C47632 * C111 +
              ((C167 * C16087 + C168 * C47907) * C31636 +
               (C759 * C16087 +
                (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
                   C47940) *
                  C47650 * C47632 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
                 C164 * C47907) *
                    C31636 +
                (C10822 * C16087 + C533 * C47907) * C47940) *
                   C47650 * C47959 -
               ((C938 * C47907 + C11291 * C16087) * C47940 +
                (C350 * C47907 +
                 (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                    C31636) *
                   C47650 * C47947 +
               (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
                 C351 * C47907) *
                    C31636 +
                (C11690 * C16087 + C1572 * C47907) * C47940) *
                   C47650 * C47920) *
                  C281 +
              (((C350 * C16087 + C349 * C47907) * C31636 +
                (C938 * C16087 + C939 * C47907) * C47940) *
                   C47650 * C47947 -
               ((C532 * C47907 + C533 * C16087) * C47940 +
                (C165 * C47907 + C164 * C16087) * C31636) *
                   C47650 * C47959 -
               ((C1571 * C47907 + C1572 * C16087) * C47940 +
                (C352 * C47907 + C351 * C16087) * C31636) *
                   C47650 * C47920) *
                  C282 +
              (((C165 * C16087 + C166 * C47907) * C31636 +
                (C532 * C16087 + C536 * C47907) * C47940) *
                   C47650 * C47959 -
               ((C940 * C47907 + C939 * C16087) * C47940 +
                (C353 * C47907 + C349 * C16087) * C31636) *
                   C47650 * C47947 +
               ((C352 * C16087 + C354 * C47907) * C31636 +
                (C1571 * C16087 +
                 (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                    C47940) *
                   C47650 * C47920) *
                  C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47960 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47949 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47632 * C281 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47949 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47960 -
           ((C2271 * C47907 + C2272 * C16087) * C47940 +
            (C31938 + C31937) * C31636) *
               C47923) *
              C47632 * C282 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47960 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47949 +
           ((C31942 + C31941) * C31636 +
            (C2271 * C16087 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1050 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1051 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C1050 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C1051 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C31931 + C31932) * C47940) *
              C47650 * C1118 -
          ((C32400 + C32399) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
               C31636) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
            C351 * C47907) *
               C31636 +
           (C11690 * C16087 + C1572 * C47907) * C47940) *
              C47650 * C1120 -
          ((C11831 * C47907 + C12165 * C16087) * C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
               C31636) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C16087 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C31636 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C16087 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47960 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47949 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C1050 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47949 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47960 -
           ((C12768 * C47907 + C13038 * C16087) * C47940 +
            (C32780 + C32779) * C31636) *
               C47923) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47960 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47949 +
           ((C32784 + C32783) * C31636 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C16087 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C1792 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1793 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47632 * C47956 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C1793 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C1792 -
           ((C2271 * C47907 + C2272 * C16087) * C47940 +
            (C31938 + C31937) * C31636) *
               C47923) *
              C47632 * C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C1792 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C1793 +
           ((C31942 + C31941) * C31636 +
            (C2271 * C16087 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C1792 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1793 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47959 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C1793 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C1792 -
           ((C12768 * C47907 + C13038 * C16087) * C47940 +
            (C32780 + C32779) * C31636) *
               C47923) *
              C47947 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C1792 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C1793 +
           ((C32784 + C32783) * C31636 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C16087 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C31931 + C31932) * C47940) *
              C1967 -
          ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1968 +
          ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C1969 -
          ((C33619 + C33620) * C47940 + (C33618 + C33617) * C31636) * C1970 +
          ((C33620 + C33619) * C31636 +
           ((C113 * C12540 + C12554 + C12554 + C47836 * C12544) * C16087 +
            (C113 * C12541 + C12555 + C12555 + C47836 * C12545) * C47907) *
               C47940) *
              C1971) *
         C47632 * C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C1050 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C47889 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C47920) *
              C47874 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C1050 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C16087) * C47940 +
             (C32402 + C32401) * C31636) *
                C47737) *
               C1051 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47889 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47632 * C637 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47889) *
              C47632 * C638 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47889 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47737) *
              C47632 * C639 +
          (((C32203 + C32204) * C31636 +
            (C537 * C16087 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C2254 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C2255 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C2256 -
           ((C33619 + C33620) * C47940 + (C33618 + C33617) * C31636) * C47936) *
              C47632 * C47874 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C2255 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C2254 -
           ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) * C2256 +
           ((C33948 + C33947) * C31636 +
            (C12563 * C16087 +
             (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47907) *
                C47940) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C10822 * C16087 + C533 * C47907) * C47940) *
               C47650 * C47959 -
           ((C938 * C47907 + C11291 * C16087) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C938 * C16087 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C16087) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C282 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C532 * C16087 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C16087) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47947 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C10822 * C16087 + C533 * C47907) * C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C16087) * C47940 +
           (C165 * C47907 + C164 * C16087) * C31636) *
              C47650 * C47632 * C109 +
          ((C165 * C16087 + C166 * C47907) * C31636 +
           (C532 * C16087 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C16087) * C47940 +
           (C167 * C47907 + C166 * C16087) * C31636) *
              C47650 * C47632 * C111 +
          ((C167 * C16087 + C168 * C47907) * C31636 +
           (C759 * C16087 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1050 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1051 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C1050 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C1051 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C31931 + C31932) * C47940) *
              C47650 * C1118 -
          ((C32400 + C32399) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
               C31636) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
            C351 * C47907) *
               C31636 +
           (C11690 * C16087 + C1572 * C47907) * C47940) *
              C47650 * C1120 -
          ((C11831 * C47907 + C12165 * C16087) * C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
               C31636) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C16087 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C31636 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C16087 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C1792 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1793 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47632 * C47956 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C1793 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C1792 -
           ((C2271 * C47907 + C2272 * C16087) * C47940 +
            (C31938 + C31937) * C31636) *
               C47923) *
              C47632 * C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C1792 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C1793 +
           ((C31942 + C31941) * C31636 +
            (C2271 * C16087 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C1792 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C1793 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47959 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C1793 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C1792 -
           ((C12768 * C47907 + C13038 * C16087) * C47940 +
            (C32780 + C32779) * C31636) *
               C47923) *
              C47947 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C1792 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C1793 +
           ((C32784 + C32783) * C31636 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C16087 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47888 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47695) *
              C47609 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C47888 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C47618 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C3242 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C47888 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C3242) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47733 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47740 +
            ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C3750) *
               C47888 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47740 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47733 -
            ((C34079 + C34080) * C47940 + (C32780 + C32779) * C31636) * C3750) *
               C47695) *
              C2588 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47740 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47733 -
            ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) * C3750) *
               C47888 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47733 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) * C47740 +
            ((C33816 + C33815) * C31636 +
             (C12768 * C16087 +
              (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47907) *
                 C47940) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47959 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47947 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C3242 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C47920) *
              C2588 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C47959 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47947 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C3242 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47632 * C47965 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C3242) *
              C47632 * C47958 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C3242 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47737) *
              C47632 * C47945 +
          (((C32203 + C32204) * C31636 +
            (C537 * C16087 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47967 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47964 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C47955 -
           ((C33619 + C33620) * C47940 + (C33618 + C33617) * C31636) * C47936) *
              C47632 * C2588 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47964 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47967 -
           ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) * C47955 +
           ((C33948 + C33947) * C31636 +
            (C12563 * C16087 +
             (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47907) *
                C47940) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47733 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47740 +
           ((C31934 + C31933) * C31636 + (C33617 + C33618) * C47940) * C3750) *
              C47632 * C47609 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47740 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47733 -
           ((C33947 + C33948) * C47940 + (C31938 + C31937) * C31636) * C3750) *
              C47632 * C47618 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47733 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47740 +
           ((C31942 + C31941) * C31636 +
            (C2271 * C16087 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C3750) *
              C47632 * C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C3242 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47632 * C47965 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C3242) *
              C47632 * C47958 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C3242 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47737) *
              C47632 * C47945 +
          (((C32203 + C32204) * C31636 +
            (C537 * C16087 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C3242 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47959 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C3242) *
               C47947 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C3242 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C47920) *
              C2588 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C3242) *
               C47959 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C3242 -
            ((C33815 + C33816) * C47940 + (C32402 + C32401) * C31636) *
                C47737) *
               C47947 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C47888 -
           ((C938 * C47907 + C11291 * C16087) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47695) *
              C637 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C938 * C16087 + C939 * C47907) * C47940) *
               C47650 * C47695 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47888) *
              C638 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C47888 -
           ((C940 * C47907 + C939 * C16087) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47695) *
              C639 +
          (((C353 * C16087 + C650 * C47907) * C31636 +
            (C940 * C16087 +
             (C113 * C909 + C931 + C931 + C47836 * C919) * C47907) *
                C47940) *
               C47650 * C47695 -
           ((C759 * C47907 + C536 * C16087) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47650 * C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1392 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1393 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47650 * C1394 -
           ((C11831 * C47907 + C12165 * C16087) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47650 * C47930) *
              C47874 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1393 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1392 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C1394 +
           ((C1412 * C16087 + C1411 * C47907) * C31636 +
            (C11831 * C16087 +
             (C113 * C1672 + C1682 + C1682 + C47836 * C1678) * C47907) *
                C47940) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C47888 +
           (((C32399 + C32400) * C31636 +
             (C11689 * C16087 + C2156 * C47907) * C47940) *
                C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C47695) *
              C281 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C47888 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C16087) * C47940 +
             (C32402 + C32401) * C31636) *
                C47737) *
               C47695) *
              C282 +
          ((((C165 * C16087 + C166 * C47907) * C31636 +
             (C31939 + C31940) * C47940) *
                C47889 -
            ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) *
                C47737) *
               C47888 +
           (((C32403 + C32404) * C31636 +
             (C2155 * C16087 +
              (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47907) *
                 C47940) *
                C47737 -
            ((C32404 + C32403) * C47940 +
             (C353 * C47907 + C349 * C16087) * C31636) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47889 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C1392 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47889) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47889 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47737) *
              C1394 +
          (((C33241 + C33242) * C31636 +
            ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C16087 +
             (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47907) *
                C47940) *
               C47737 -
           ((C33242 + C33241) * C47940 +
            (C1412 * C47907 +
             (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
                C31636) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C10822 * C16087 + C533 * C47907) * C47940) *
               C47650 * C47959 -
           ((C938 * C47907 + C11291 * C16087) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C938 * C16087 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C16087) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C282 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C532 * C16087 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C16087) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47947 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C10822 * C16087 + C533 * C47907) * C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C16087) * C47940 +
           (C165 * C47907 + C164 * C16087) * C31636) *
              C47650 * C47632 * C109 +
          ((C165 * C16087 + C166 * C47907) * C31636 +
           (C532 * C16087 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C16087) * C47940 +
           (C167 * C47907 + C166 * C16087) * C31636) *
              C47650 * C47632 * C111 +
          ((C167 * C16087 + C168 * C47907) * C31636 +
           (C759 * C16087 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47960 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47949 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C47632 * C281 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47949 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47960 -
           ((C2271 * C47907 + C2272 * C16087) * C47940 +
            (C31938 + C31937) * C31636) *
               C47923) *
              C47632 * C282 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47960 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47949 +
           ((C31942 + C31941) * C31636 +
            (C2271 * C16087 +
             (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47907) *
                C47940) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1050 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1051 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C1050 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C1051 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C31931 + C31932) * C47940) *
              C47650 * C1118 -
          ((C32400 + C32399) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
               C31636) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
            C351 * C47907) *
               C31636 +
           (C11690 * C16087 + C1572 * C47907) * C47940) *
              C47650 * C1120 -
          ((C11831 * C47907 + C12165 * C16087) * C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
               C31636) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C16087 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C31636 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C16087 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47960 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47949 +
           ((C31934 + C31933) * C31636 +
            (C12562 * C16087 + C2272 * C47907) * C47940) *
               C47923) *
              C1050 +
          (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47949 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47960 -
           ((C12768 * C47907 + C13038 * C16087) * C47940 +
            (C32780 + C32779) * C31636) *
               C47923) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C32781 + C32782) * C47940) *
               C47960 -
           ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) * C47949 +
           ((C32784 + C32783) * C31636 +
            ((C113 * C7453 + C11679 + C11679 + C47836 * C7457) * C16087 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47907) *
                C47940) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47889 -
           ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) * C47737) *
              C47632 * C637 +
          (((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47889) *
              C47632 * C638 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47889 -
           ((C31941 + C31942) * C47940 + (C31940 + C31939) * C31636) * C47737) *
              C47632 * C639 +
          (((C32203 + C32204) * C31636 +
            (C537 * C16087 +
             (C113 * C476 + C519 + C519 + C47836 * C496) * C47907) *
                C47940) *
               C47737 -
           ((C32204 + C32203) * C47940 +
            (C167 * C47907 + C166 * C16087) * C31636) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
              C164 * C47907) *
                 C31636 +
             (C31931 + C31932) * C47940) *
                C47889 -
            ((C31933 + C31934) * C47940 + (C31932 + C31931) * C31636) *
                C47737) *
               C1050 +
           (((C32399 + C32400) * C31636 + (C32779 + C32780) * C47940) * C47737 -
            ((C32400 + C32399) * C47940 +
             (C350 * C47907 +
              (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                 C31636) *
                C47889) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
              C351 * C47907) *
                 C31636 +
             (C32781 + C32782) * C47940) *
                C47889 -
            ((C32783 + C32784) * C47940 + (C32782 + C32781) * C31636) *
                C47737) *
               C47920) *
              C47874 +
          ((((C31935 + C31936) * C31636 + (C31937 + C31938) * C47940) * C47737 -
            ((C31936 + C31935) * C47940 +
             (C165 * C47907 + C164 * C16087) * C31636) *
                C47889) *
               C1050 +
           (((C350 * C16087 + C349 * C47907) * C31636 +
             (C32401 + C32402) * C47940) *
                C47889 -
            ((C2155 * C47907 + C2156 * C16087) * C47940 +
             (C32402 + C32401) * C31636) *
                C47737) *
               C1051 +
           (((C33109 + C33110) * C31636 +
             (C11691 * C16087 +
              (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47907) *
                 C47940) *
                C47737 -
            ((C33110 + C33109) * C47940 +
             (C352 * C47907 + C351 * C16087) * C31636) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C10822 * C16087 + C533 * C47907) * C47940) *
              C47650 * C47632 * C108 -
          ((C532 * C47907 + C533 * C16087) * C47940 +
           (C165 * C47907 + C164 * C16087) * C31636) *
              C47650 * C47632 * C109 +
          ((C165 * C16087 + C166 * C47907) * C31636 +
           (C532 * C16087 + C536 * C47907) * C47940) *
              C47650 * C47632 * C110 -
          ((C759 * C47907 + C536 * C16087) * C47940 +
           (C167 * C47907 + C166 * C16087) * C31636) *
              C47650 * C47632 * C111 +
          ((C167 * C16087 + C168 * C47907) * C31636 +
           (C759 * C16087 +
            (C113 * C750 + C756 + C756 + C47836 * C752) * C47907) *
               C47940) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C10822 * C16087 + C533 * C47907) * C47940) *
               C47650 * C47959 -
           ((C938 * C47907 + C11291 * C16087) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C281 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C938 * C16087 + C939 * C47907) * C47940) *
               C47650 * C47947 -
           ((C532 * C47907 + C533 * C16087) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C47959 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C282 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C532 * C16087 + C536 * C47907) * C47940) *
               C47650 * C47959 -
           ((C940 * C47907 + C939 * C16087) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C47947 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
             C164 * C47907) *
                C31636 +
            (C31931 + C31932) * C47940) *
               C47650 * C1050 -
           ((C32400 + C32399) * C47940 +
            (C350 * C47907 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
                C31636) *
               C47650 * C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
             C351 * C47907) *
                C31636 +
            (C11690 * C16087 + C1572 * C47907) * C47940) *
               C47650 * C47920) *
              C47956 +
          (((C350 * C16087 + C349 * C47907) * C31636 +
            (C32401 + C32402) * C47940) *
               C47650 * C1051 -
           ((C31936 + C31935) * C47940 +
            (C165 * C47907 + C164 * C16087) * C31636) *
               C47650 * C1050 -
           ((C1571 * C47907 + C1572 * C16087) * C47940 +
            (C352 * C47907 + C351 * C16087) * C31636) *
               C47650 * C47920) *
              C47943 +
          (((C165 * C16087 + C166 * C47907) * C31636 +
            (C31939 + C31940) * C47940) *
               C47650 * C1050 -
           ((C32404 + C32403) * C47940 +
            (C353 * C47907 + C349 * C16087) * C31636) *
               C47650 * C1051 +
           ((C352 * C16087 + C354 * C47907) * C31636 +
            (C1571 * C16087 +
             (C113 * C1558 + C1566 + C1566 + C47836 * C1560) * C47907) *
                C47940) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C16087 +
            C164 * C47907) *
               C31636 +
           (C31931 + C31932) * C47940) *
              C47650 * C1118 -
          ((C32400 + C32399) * C47940 +
           (C350 * C47907 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C16087) *
               C31636) *
              C47650 * C1119 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C16087 +
            C351 * C47907) *
               C31636 +
           (C11690 * C16087 + C1572 * C47907) * C47940) *
              C47650 * C1120 -
          ((C11831 * C47907 + C12165 * C16087) * C47940 +
           (C1412 * C47907 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C16087) *
               C31636) *
              C47650 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C16087 +
            (C113 * C1128 + C1147 + C1147 + C47836 * C1140) * C47907) *
               C31636 +
           ((C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C16087 +
            (C113 * C6578 + C11522 + C11522 + C47836 * C6582) * C47907) *
               C47940) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C47691 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47698 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47650 * C2848) *
                       C47609 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47698 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47691 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C2848) *
                       C47618 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47691 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47698 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C2848) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47691 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C47698 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C47889 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C2848) *
                       C2588 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C47691 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47698 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C47889) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C47966 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47962 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47650 * C47952 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47650 * C47930) *
                       C2588 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47962 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47966 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47952 +
                    ((C6241 + C6240) * C47579 * C31636 +
                     (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                      C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47695) *
                       C47965 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C2480) *
                       C47958 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47695) *
                       C47945 +
                   (((C5329 + C5328) * C47579 * C31636 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47960 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47949 +
                     ((C37438 + C37437) * C47579 * C31636 +
                      (C39169 + C39170) * C47579 * C47940) *
                         C47923) *
                        C2480 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47949 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47960 -
                     ((C39637 + C39638) * C47579 * C47940 +
                      (C38306 + C38305) * C47579 * C31636) *
                         C47923) *
                        C47695) *
                       C2588 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47949 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47960 -
                     ((C7322 + C7323) * C47579 * C47940 +
                      (C5183 + C5182) * C47579 * C31636) *
                         C47923) *
                        C2480 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47960 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47949 +
                     ((C7181 + C7180) * C47579 * C31636 +
                      (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                       C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                          C47579 * C47940) *
                         C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C47609 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C2480 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C47618 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C47889 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47695) *
                       C47965 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C2480) *
                       C47958 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C2480 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47695) *
                       C47945 +
                   (((C5329 + C5328) * C47579 * C31636 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47650 * C2480) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C47966 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47962 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47650 * C47952 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47650 * C47930) *
                       C2588 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47962 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47966 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47952 +
                    ((C6241 + C6240) * C47579 * C31636 +
                     (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                      C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47691 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47698 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C3242 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C2848) *
                       C47874 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C47691 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47698 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C3242) *
                        C2848) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47733 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47740 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C3750) *
                       C47691 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47740 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47733 -
                    ((C39637 + C39638) * C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C3750) *
                       C47698 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47733 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47740 +
                    ((C38310 + C38309) * C47579 * C31636 +
                     (C4727 * C7453 + C38291 + C38291 + C4723 * C7457 +
                      C4729 * C23755 + C38292 + C38292 + C47938 * C23757) *
                         C47579 * C47940) *
                        C3750) *
                       C2848) *
                  C47604) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C3242 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47966 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47737 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C3242) *
                       C47962 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C3242 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47737) *
                       C47952 +
                   (((C38775 + C38776) * C47579 * C31636 +
                     (C4727 * C6081 + C38769 + C38769 + C4723 * C6085 +
                      C4729 * C22750 + C38770 + C38770 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C47956 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C2480 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C47943 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C3242 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47967 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47964 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C47955 -
                    ((C39171 + C39172) * C47579 * C47940 +
                     (C39170 + C39169) * C47579 * C31636) *
                        C47936) *
                       C2480 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47964 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47967 -
                    ((C39637 + C39638) * C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C47955 +
                    ((C39638 + C39637) * C47579 * C31636 +
                     (C4727 * C6961 + C39631 + C39631 + C4723 * C6965 +
                      C4729 * C23398 + C39632 + C39632 + C47938 * C23400) *
                         C47579 * C47940) *
                        C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47733 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47740 +
                     ((C37438 + C37437) * C47579 * C31636 +
                      (C39169 + C39170) * C47579 * C47940) *
                         C3750) *
                        C2480 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47740 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47733 -
                     ((C39637 + C39638) * C47579 * C47940 +
                      (C38306 + C38305) * C47579 * C31636) *
                         C3750) *
                        C47695) *
                       C47874 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47740 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47733 -
                     ((C7322 + C7323) * C47579 * C47940 +
                      (C5183 + C5182) * C47579 * C31636) *
                         C3750) *
                        C2480 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47733 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47740 +
                     ((C7181 + C7180) * C47579 * C31636 +
                      (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                       C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                          C47579 * C47940) *
                         C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C47956 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C2480 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C47943 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C3242 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C2480 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C3242 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47966 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47737 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C3242) *
                       C47962 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C3242 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47737) *
                       C47952 +
                   (((C38775 + C38776) * C47579 * C31636 +
                     (C4727 * C6081 + C38769 + C38769 + C4723 * C6085 +
                      C4729 * C22750 + C38770 + C38770 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C3242) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1392 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1393 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47650 * C1394 -
                    ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                      C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                         C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47650 * C47930) *
                       C47874 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1393 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1392 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C1394 +
                    ((C6241 + C6240) * C47579 * C31636 +
                     (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                      C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                      C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                         C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47695) *
                       C637 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47888) *
                       C638 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47695) *
                       C639 +
                   (((C5329 + C5328) * C47579 * C31636 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C1792 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C1793 +
                     ((C37438 + C37437) * C47579 * C31636 +
                      (C39169 + C39170) * C47579 * C47940) *
                         C47923) *
                        C47888 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C1793 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C1792 -
                     ((C4729 * C7453 + C7461 + C7461 + C47938 * C7457 +
                       C4727 * C2370 + C7460 + C7460 + C4723 * C2376) *
                          C47579 * C47940 +
                      (C38306 + C38305) * C47579 * C31636) *
                         C47923) *
                        C47695) *
                       C47874 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C1793 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C1792 -
                     ((C7322 + C7323) * C47579 * C47940 +
                      (C5183 + C5182) * C47579 * C31636) *
                         C47923) *
                        C47888 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C1792 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C1793 +
                     ((C7181 + C7180) * C47579 * C31636 +
                      (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                       C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                          C47579 * C47940) *
                         C47923) *
                        C47695) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47889 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C1392 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47737 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47889) *
                       C1393 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47889 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47737) *
                       C1394 +
                   (((C38775 + C38776) * C47579 * C31636 +
                     (C4727 * C6081 + C38769 + C38769 + C4723 * C6085 +
                      C4729 * C22750 + C38770 + C38770 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C4727 * C1260 + C6091 + C6091 + C4723 * C1278 +
                       C4729 * C1264 + C6090 + C6090 + C47938 * C1282) *
                          C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C281 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C47888 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C282 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C47889 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C2254 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C2255 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C2256 -
                    ((C39171 + C39172) * C47579 * C47940 +
                     (C39170 + C39169) * C47579 * C31636) *
                        C47936) *
                       C47888 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C2255 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C2254 -
                    ((C39637 + C39638) * C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C2256 +
                    ((C39638 + C39637) * C47579 * C31636 +
                     (C4727 * C6961 + C39631 + C39631 + C4723 * C6965 +
                      C4729 * C23398 + C39632 + C39632 + C47938 * C23400) *
                         C47579 * C47940) *
                        C47936) *
                       C47695) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] += (0.5 * std::pow(Pi, 2.5) *
                      (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                         C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                            C47579 * C31636 +
                        (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                         C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                            C47579 * C47940) *
                           C47650 * C47632 * C108 -
                       ((C5180 + C5181) * C47579 * C47940 +
                        (C4777 + C4776) * C47579 * C31636) *
                           C47650 * C47632 * C109 +
                       ((C4779 + C4778) * C47579 * C31636 +
                        (C5184 + C5185) * C47579 * C47940) *
                           C47650 * C47632 * C110 -
                       ((C5470 + C5471) * C47579 * C47940 +
                        (C4781 + C4780) * C47579 * C31636) *
                           C47650 * C47632 * C111 +
                       ((C4783 + C4782) * C47579 * C31636 +
                        (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                         C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                            C47579 * C47940) *
                           C47650 * C47632 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                          C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                             C47579 * C31636 +
                         (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                          C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                             C47579 * C47940) *
                            C47650 * C47959 -
                        ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                          C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                             C47579 * C47940 +
                         (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                          C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                             C47579 * C31636) *
                            C47650 * C47947 +
                        ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                          C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                             C47579 * C31636 +
                         (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                          C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                             C47579 * C47940) *
                            C47650 * C47920) *
                           C281 +
                       (((C4979 + C4978) * C47579 * C31636 +
                         (C5690 + C5691) * C47579 * C47940) *
                            C47650 * C47947 -
                        ((C5180 + C5181) * C47579 * C47940 +
                         (C4777 + C4776) * C47579 * C31636) *
                            C47650 * C47959 -
                        ((C6446 + C6447) * C47579 * C47940 +
                         (C4981 + C4980) * C47579 * C31636) *
                            C47650 * C47920) *
                           C282 +
                       (((C4779 + C4778) * C47579 * C31636 +
                         (C5184 + C5185) * C47579 * C47940) *
                            C47650 * C47959 -
                        ((C5692 + C5693) * C47579 * C47940 +
                         (C4983 + C4982) * C47579 * C31636) *
                            C47650 * C47947 +
                        ((C4985 + C4984) * C47579 * C31636 +
                         (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                          C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                             C47579 * C47940) *
                            C47650 * C47920) *
                           C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47960 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47949 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C281 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47949 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47960 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C47923) *
                       C47632 * C282 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47960 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47949 +
                    ((C5187 + C5186) * C47579 * C31636 +
                     (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                      C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1050 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C37435 + C37436) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C37902 + C37901) * C47579 * C47940 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C47579 * C31636) *
                       C47650 * C1119 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C47579 * C31636 +
                    (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                     C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                     C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                        C47579 * C47940 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C47579 * C31636) *
                       C47650 * C1121 +
                   ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                     C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                        C47579 * C31636 +
                    (C4727 * C6577 + C38131 + C38131 + C4723 * C6581 +
                     C4729 * C23110 + C38132 + C38132 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47960 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47949 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C1050 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47949 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47960 -
                    ((C4729 * C7453 + C7461 + C7461 + C47938 * C7457 +
                      C4727 * C2370 + C7460 + C7460 + C4723 * C2376) *
                         C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C47923) *
                       C1051 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47960 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47949 +
                    ((C38310 + C38309) * C47579 * C31636 +
                     (C4727 * C7453 + C38291 + C38291 + C4723 * C7457 +
                      C4729 * C23755 + C38292 + C38292 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C1792 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C1793 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47956 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C1793 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C1792 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C47923) *
                       C47632 * C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C1792 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C1793 +
                    ((C5187 + C5186) * C47579 * C31636 +
                     (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                      C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C1792 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C1793 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47959 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C1793 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C1792 -
                    ((C4729 * C7453 + C7461 + C7461 + C47938 * C7457 +
                      C4727 * C2370 + C7460 + C7460 + C4723 * C2376) *
                         C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C47923) *
                       C47947 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C1792 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C1793 +
                    ((C38310 + C38309) * C47579 * C31636 +
                     (C4727 * C7453 + C38291 + C38291 + C4723 * C7457 +
                      C4729 * C23755 + C38292 + C38292 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C37435 + C37436) * C47579 * C47940) *
                       C1967 -
                   ((C37437 + C37438) * C47579 * C47940 +
                    (C37436 + C37435) * C47579 * C31636) *
                       C1968 +
                   ((C37438 + C37437) * C47579 * C31636 +
                    (C39169 + C39170) * C47579 * C47940) *
                       C1969 -
                   ((C39171 + C39172) * C47579 * C47940 +
                    (C39170 + C39169) * C47579 * C31636) *
                       C1970 +
                   ((C39172 + C39171) * C47579 * C31636 +
                    (C4727 * C12540 + C39159 + C39159 + C4723 * C12544 +
                     C4729 * C28099 + C39160 + C39160 + C47938 * C28101) *
                        C47579 * C47940) *
                       C1971) *
                  C47632 * C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[188] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C1050 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C1051 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C47889 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C47920) *
                       C47874 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C1050 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C1051 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47889 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47632 * C637 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47737 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47889) *
                       C47632 * C638 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47889 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47737) *
                       C47632 * C639 +
                   (((C5471 + C5470) * C47579 * C31636 +
                     (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                      C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C2254 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C2255 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C2256 -
                    ((C39171 + C39172) * C47579 * C47940 +
                     (C39170 + C39169) * C47579 * C31636) *
                        C47936) *
                       C47632 * C47874 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C2255 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C2254 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C2256 +
                    ((C7323 + C7322) * C47579 * C31636 +
                     (C4727 * C1976 + C6974 + C6974 + C4723 * C1988 +
                      C4729 * C6962 + C6975 + C6975 + C47938 * C6966) *
                         C47579 * C47940) *
                        C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                      C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                      C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                         C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47959 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C282 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                     C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C5180 + C5181) * C47579 * C47940 +
                    (C4777 + C4776) * C47579 * C31636) *
                       C47650 * C47632 * C109 +
                   ((C4779 + C4778) * C47579 * C31636 +
                    (C5184 + C5185) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C5470 + C5471) * C47579 * C47940 +
                    (C4781 + C4780) * C47579 * C31636) *
                       C47650 * C47632 * C111 +
                   ((C4783 + C4782) * C47579 * C31636 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1050 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C37435 + C37436) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C37902 + C37901) * C47579 * C47940 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C47579 * C31636) *
                       C47650 * C1119 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C47579 * C31636 +
                    (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                     C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                     C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                        C47579 * C47940 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C47579 * C31636) *
                       C47650 * C1121 +
                   ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                     C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                        C47579 * C31636 +
                    (C4727 * C6577 + C38131 + C38131 + C4723 * C6581 +
                     C4729 * C23110 + C38132 + C38132 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C1792 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C1793 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47956 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C1793 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C1792 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C47923) *
                       C47632 * C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C1792 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C1793 +
                    ((C5187 + C5186) * C47579 * C31636 +
                     (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                      C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C1792 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C1793 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47959 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C1793 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C1792 -
                    ((C4729 * C7453 + C7461 + C7461 + C47938 * C7457 +
                      C4727 * C2370 + C7460 + C7460 + C4723 * C2376) *
                         C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C47923) *
                       C47947 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C1792 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C1793 +
                    ((C38310 + C38309) * C47579 * C31636 +
                     (C4727 * C7453 + C38291 + C38291 + C4723 * C7457 +
                      C4729 * C23755 + C38292 + C38292 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C47609 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C47888 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C47618 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C3242 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C3242) *
                        C47695) *
                       C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47733 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47740 +
                     ((C37438 + C37437) * C47579 * C31636 +
                      (C39169 + C39170) * C47579 * C47940) *
                         C3750) *
                        C47888 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47740 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47733 -
                     ((C39637 + C39638) * C47579 * C47940 +
                      (C38306 + C38305) * C47579 * C31636) *
                         C3750) *
                        C47695) *
                       C2588 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47740 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47733 -
                     ((C7322 + C7323) * C47579 * C47940 +
                      (C5183 + C5182) * C47579 * C31636) *
                         C3750) *
                        C47888 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47733 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47740 +
                     ((C7181 + C7180) * C47579 * C31636 +
                      (C4727 * C2371 + C7462 + C7462 + C4723 * C2377 +
                       C4729 * C7454 + C7463 + C7463 + C47938 * C7458) *
                          C47579 * C47940) *
                         C3750) *
                        C47695) *
                       C47615)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47959 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47947 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C3242 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C47920) *
                       C2588 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C47959 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47947 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C3242 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47632 * C47965 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47737 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C3242) *
                       C47632 * C47958 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C3242 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47737) *
                       C47632 * C47945 +
                   (((C5471 + C5470) * C47579 * C31636 +
                     (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                      C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47967 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47964 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C47955 -
                    ((C39171 + C39172) * C47579 * C47940 +
                     (C39170 + C39169) * C47579 * C31636) *
                        C47936) *
                       C47632 * C2588 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47964 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47967 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C47955 +
                    ((C7323 + C7322) * C47579 * C31636 +
                     (C4727 * C1976 + C6974 + C6974 + C4723 * C1988 +
                      C4729 * C6962 + C6975 + C6975 + C47938 * C6966) *
                         C47579 * C47940) *
                        C47936) *
                       C47632 * C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47733 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47740 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C39169 + C39170) * C47579 * C47940) *
                        C3750) *
                       C47632 * C47609 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47740 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47733 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C3750) *
                       C47632 * C47618 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47733 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47740 +
                    ((C5187 + C5186) * C47579 * C31636 +
                     (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                      C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                         C47579 * C47940) *
                        C3750) *
                       C47632 * C2851)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C3242 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47632 * C47965 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47737 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C3242) *
                       C47632 * C47958 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C3242 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47737) *
                       C47632 * C47945 +
                   (((C5471 + C5470) * C47579 * C31636 +
                     (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                      C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C3242) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C3242 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47959 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C3242) *
                        C47947 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C3242 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C47920) *
                       C2588 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C3242) *
                        C47959 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C3242 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47947 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C3242) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                      C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                         C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47695) *
                       C637 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47888) *
                       C638 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47888 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47695) *
                       C639 +
                   (((C5329 + C5328) * C47579 * C31636 +
                     (C4727 * C908 + C5680 + C5680 + C4723 * C918 +
                      C4729 * C1558 + C5681 + C5681 + C47938 * C1560) *
                         C47579 * C47940) *
                        C47650 * C47695 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47650 * C47888) *
                       C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1392 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1393 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47650 * C1394 -
                    ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                      C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                         C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47650 * C47930) *
                       C47874 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1393 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1392 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C1394 +
                    ((C6241 + C6240) * C47579 * C31636 +
                     (C4727 * C1671 + C6586 + C6586 + C4723 * C1677 +
                      C4729 * C6578 + C6587 + C6587 + C47938 * C6582) *
                         C47579 * C47940) *
                        C47650 * C47930) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C4727 * C1260 + C6091 + C6091 + C4723 * C1278 +
                       C4729 * C1264 + C6090 + C6090 + C47938 * C1282) *
                          C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C281 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C47888 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C47695) *
                       C282 +
                   ((((C4779 + C4778) * C47579 * C31636 +
                      (C5184 + C5185) * C47579 * C47940) *
                         C47889 -
                     ((C5186 + C5187) * C47579 * C47940 +
                      (C5185 + C5184) * C47579 * C31636) *
                         C47737) *
                        C47888 +
                    (((C5693 + C5692) * C47579 * C31636 +
                      (C4727 * C1258 + C7174 + C7174 + C4723 * C1276 +
                       C4729 * C1266 + C7175 + C7175 + C47938 * C1284) *
                          C47579 * C47940) *
                         C47737 -
                     ((C5692 + C5693) * C47579 * C47940 +
                      (C4983 + C4982) * C47579 * C31636) *
                         C47889) *
                        C47695) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47889 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C1392 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47737 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47889) *
                       C1393 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47889 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47737) *
                       C1394 +
                   (((C38775 + C38776) * C47579 * C31636 +
                     (C4727 * C6081 + C38769 + C38769 + C4723 * C6085 +
                      C4729 * C22750 + C38770 + C38770 + C47938 * C22752) *
                         C47579 * C47940) *
                        C47737 -
                    ((C38776 + C38775) * C47579 * C47940 +
                     (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                      C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                         C47579 * C31636) *
                        C47889) *
                       C47930) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                      C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                      C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                         C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47959 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C282 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                     C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C5180 + C5181) * C47579 * C47940 +
                    (C4777 + C4776) * C47579 * C31636) *
                       C47650 * C47632 * C109 +
                   ((C4779 + C4778) * C47579 * C31636 +
                    (C5184 + C5185) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C5470 + C5471) * C47579 * C47940 +
                    (C4781 + C4780) * C47579 * C31636) *
                       C47650 * C47632 * C111 +
                   ((C4783 + C4782) * C47579 * C31636 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47960 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47949 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C281 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47949 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47960 -
                    ((C7322 + C7323) * C47579 * C47940 +
                     (C5183 + C5182) * C47579 * C31636) *
                        C47923) *
                       C47632 * C282 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47960 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47949 +
                    ((C5187 + C5186) * C47579 * C31636 +
                     (C4727 * C1972 + C7316 + C7316 + C4723 * C1984 +
                      C4729 * C2372 + C7317 + C7317 + C47938 * C2378) *
                         C47579 * C47940) *
                        C47923) *
                       C47632 * C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1050 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C37435 + C37436) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C37902 + C37901) * C47579 * C47940 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C47579 * C31636) *
                       C47650 * C1119 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C47579 * C31636 +
                    (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                     C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                     C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                        C47579 * C47940 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C47579 * C31636) *
                       C47650 * C1121 +
                   ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                     C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                        C47579 * C31636 +
                    (C4727 * C6577 + C38131 + C38131 + C4723 * C6581 +
                     C4729 * C23110 + C38132 + C38132 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47960 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47949 +
                    ((C37438 + C37437) * C47579 * C31636 +
                     (C4727 * C1974 + C6971 + C6971 + C4723 * C1986 +
                      C4729 * C2370 + C6970 + C6970 + C47938 * C2376) *
                         C47579 * C47940) *
                        C47923) *
                       C1050 +
                   (((C37901 + C37902) * C47579 * C31636 +
                     (C38305 + C38306) * C47579 * C47940) *
                        C47949 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47960 -
                    ((C4729 * C7453 + C7461 + C7461 + C47938 * C7457 +
                      C4727 * C2370 + C7460 + C7460 + C4723 * C2376) *
                         C47579 * C47940 +
                     (C38306 + C38305) * C47579 * C31636) *
                        C47923) *
                       C1051 +
                   (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C38307 + C38308) * C47579 * C47940) *
                        C47960 -
                    ((C38309 + C38310) * C47579 * C47940 +
                     (C38308 + C38307) * C47579 * C31636) *
                        C47949 +
                    ((C38310 + C38309) * C47579 * C31636 +
                     (C4727 * C7453 + C38291 + C38291 + C4723 * C7457 +
                      C4729 * C23755 + C38292 + C38292 + C47938 * C23757) *
                         C47579 * C47940) *
                        C47923) *
                       C47920) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47889 -
                    ((C37437 + C37438) * C47579 * C47940 +
                     (C37436 + C37435) * C47579 * C31636) *
                        C47737) *
                       C47632 * C637 +
                   (((C5181 + C5180) * C47579 * C31636 +
                     (C5182 + C5183) * C47579 * C47940) *
                        C47737 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47889) *
                       C47632 * C638 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47889 -
                    ((C5186 + C5187) * C47579 * C47940 +
                     (C5185 + C5184) * C47579 * C31636) *
                        C47737) *
                       C47632 * C639 +
                   (((C5471 + C5470) * C47579 * C31636 +
                     (C4727 * C474 + C5162 + C5162 + C4723 * C494 +
                      C4729 * C2142 + C5163 + C5163 + C47938 * C2144) *
                         C47579 * C47940) *
                        C47737 -
                    ((C5470 + C5471) * C47579 * C47940 +
                     (C4781 + C4780) * C47579 * C31636) *
                        C47889) *
                       C47632 * C47924)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                       C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                          C47579 * C31636 +
                      (C37435 + C37436) * C47579 * C47940) *
                         C47889 -
                     ((C37437 + C37438) * C47579 * C47940 +
                      (C37436 + C37435) * C47579 * C31636) *
                         C47737) *
                        C1050 +
                    (((C37901 + C37902) * C47579 * C31636 +
                      (C38305 + C38306) * C47579 * C47940) *
                         C47737 -
                     ((C37902 + C37901) * C47579 * C47940 +
                      (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                       C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                          C47579 * C31636) *
                         C47889) *
                        C1051 +
                    (((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                       C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                          C47579 * C31636 +
                      (C38307 + C38308) * C47579 * C47940) *
                         C47889 -
                     ((C38309 + C38310) * C47579 * C47940 +
                      (C38308 + C38307) * C47579 * C31636) *
                         C47737) *
                        C47920) *
                       C47874 +
                   ((((C5181 + C5180) * C47579 * C31636 +
                      (C5182 + C5183) * C47579 * C47940) *
                         C47737 -
                     ((C5180 + C5181) * C47579 * C47940 +
                      (C4777 + C4776) * C47579 * C31636) *
                         C47889) *
                        C1050 +
                    (((C4979 + C4978) * C47579 * C31636 +
                      (C5690 + C5691) * C47579 * C47940) *
                         C47889 -
                     ((C7180 + C7181) * C47579 * C47940 +
                      (C5691 + C5690) * C47579 * C31636) *
                         C47737) *
                        C1051 +
                    (((C6447 + C6446) * C47579 * C31636 +
                      (C4727 * C1265 + C6098 + C6098 + C4723 * C1283 +
                       C4729 * C6082 + C6099 + C6099 + C47938 * C6086) *
                          C47579 * C47940) *
                         C47737 -
                     ((C6446 + C6447) * C47579 * C47940 +
                      (C4981 + C4980) * C47579 * C31636) *
                         C47889) *
                        C47920) *
                       C47615)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                     C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                        C47579 * C47940) *
                       C47650 * C47632 * C108 -
                   ((C5180 + C5181) * C47579 * C47940 +
                    (C4777 + C4776) * C47579 * C31636) *
                       C47650 * C47632 * C109 +
                   ((C4779 + C4778) * C47579 * C31636 +
                    (C5184 + C5185) * C47579 * C47940) *
                       C47650 * C47632 * C110 -
                   ((C5470 + C5471) * C47579 * C47940 +
                    (C4781 + C4780) * C47579 * C31636) *
                       C47650 * C47632 * C111 +
                   ((C4783 + C4782) * C47579 * C31636 +
                    (C4727 * C475 + C5464 + C5464 + C4723 * C495 +
                     C4729 * C909 + C5465 + C5465 + C47938 * C919) *
                        C47579 * C47940) *
                       C47650 * C47632 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C4727 * C469 + C5139 + C5139 + C4723 * C489 +
                      C4729 * C905 + C5138 + C5138 + C47938 * C915) *
                         C47579 * C47940) *
                        C47650 * C47959 -
                    ((C4729 * C1263 + C5667 + C5667 + C47938 * C1281 +
                      C4727 * C905 + C5666 + C5666 + C4723 * C915) *
                         C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C281 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C47947 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C47959 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C282 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C47959 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C47947 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                      C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                         C47579 * C31636 +
                     (C37435 + C37436) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C37902 + C37901) * C47579 * C47940 +
                     (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                      C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                         C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                      C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                         C47579 * C31636 +
                     (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                      C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47956 +
                   (((C4979 + C4978) * C47579 * C31636 +
                     (C5690 + C5691) * C47579 * C47940) *
                        C47650 * C1051 -
                    ((C5180 + C5181) * C47579 * C47940 +
                     (C4777 + C4776) * C47579 * C31636) *
                        C47650 * C1050 -
                    ((C6446 + C6447) * C47579 * C47940 +
                     (C4981 + C4980) * C47579 * C31636) *
                        C47650 * C47920) *
                       C47943 +
                   (((C4779 + C4778) * C47579 * C31636 +
                     (C5184 + C5185) * C47579 * C47940) *
                        C47650 * C1050 -
                    ((C5692 + C5693) * C47579 * C47940 +
                     (C4983 + C4982) * C47579 * C31636) *
                        C47650 * C1051 +
                    ((C4985 + C4984) * C47579 * C31636 +
                     (C4727 * C1261 + C6440 + C6440 + C4723 * C1279 +
                      C4729 * C1672 + C6441 + C6441 + C47938 * C1678) *
                         C47579 * C47940) *
                        C47650 * C47920) *
                       C47914)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C4727 * C115 + C4732 + C4732 + C4723 * C129 +
                     C4729 * C286 + C4733 + C4733 + C47938 * C306) *
                        C47579 * C31636 +
                    (C37435 + C37436) * C47579 * C47940) *
                       C47650 * C1118 -
                   ((C37902 + C37901) * C47579 * C47940 +
                    (C4729 * C287 + C4936 + C4936 + C47938 * C307 +
                     C4727 * C286 + C4937 + C4937 + C4723 * C306) *
                        C47579 * C31636) *
                       C47650 * C1119 +
                   ((C4727 * C287 + C4938 + C4938 + C4723 * C307 +
                     C4729 * C1126 + C4939 + C4939 + C47938 * C1138) *
                        C47579 * C31636 +
                    (C4727 * C1263 + C6095 + C6095 + C4723 * C1281 +
                     C4729 * C1670 + C6094 + C6094 + C47938 * C1676) *
                        C47579 * C47940) *
                       C47650 * C1120 -
                   ((C4729 * C6577 + C6585 + C6585 + C47938 * C6581 +
                     C4727 * C1670 + C6584 + C6584 + C4723 * C1676) *
                        C47579 * C47940 +
                    (C4729 * C1127 + C5930 + C5930 + C47938 * C1139 +
                     C4727 * C1126 + C5931 + C5931 + C4723 * C1138) *
                        C47579 * C31636) *
                       C47650 * C1121 +
                   ((C4727 * C1127 + C5932 + C5932 + C4723 * C1139 +
                     C4729 * C5921 + C5933 + C5933 + C47938 * C5925) *
                        C47579 * C31636 +
                    (C4727 * C6577 + C38131 + C38131 + C4723 * C6581 +
                     C4729 * C23110 + C38132 + C38132 + C47938 * C23112) *
                        C47579 * C47940) *
                       C47650 * C1122) *
                  C47604) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C47691 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47698 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47650 * C2848) *
              C47609 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C47698 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C47691 -
           (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
               C47650 * C2848) *
              C47618 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C47691 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C47698 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C2848) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47691 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C47698 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C47889 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C2848) *
              C2588 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C47691 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47698 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C47889) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C47966 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47962 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47650 * C47952 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47650 * C47930) *
              C2588 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C47962 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C47966 -
           (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
               C47650 * C47952 +
           (C1412 * C47579 * C42664 + C11831 * C47579 * C42665 +
            (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47579 *
                C42666) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C2480 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47695) *
              C47965 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C47695 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C2480) *
              C47958 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C2480 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C47695) *
              C47945 +
          ((C353 * C47579 * C42664 + C940 * C47579 * C42665 +
            (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47579 * C42666) *
               C47650 * C47695 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C47650 * C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47960 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47949 +
            (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C47923) *
               C2480 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47949 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47960 -
            (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C47923) *
               C47695) *
              C2588 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47949 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47960 -
            (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C47923) *
               C2480 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47960 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47949 +
            (C43244 * C42664 + C44331 * C42665 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47579 *
                 C42666) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C2480 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C47695) *
              C47609 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C2480 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47695) *
              C47618 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C47889 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C2480 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C47889) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C2480 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47695) *
              C47965 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C47695 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C2480) *
              C47958 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C2480 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C47695) *
              C47945 +
          ((C353 * C47579 * C42664 + C940 * C47579 * C42665 +
            (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47579 * C42666) *
               C47650 * C47695 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C47650 * C2480) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C47966 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47962 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47650 * C47952 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47650 * C47930) *
              C2588 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C47962 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C47966 -
           (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
               C47650 * C47952 +
           (C1412 * C47579 * C42664 + C11831 * C47579 * C42665 +
            (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47579 *
                C42666) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47691 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47698 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C3242 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C2848) *
              C47874 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C47691 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47698 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C3242) *
               C2848) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47733 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47740 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C3750) *
              C47691 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47740 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47733 -
           (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C3750) *
              C47698 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47733 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47740 +
           (C43532 * C42664 + C43539 * C42665 +
            (C113 * C23398 + C43535 + C43535 + C47836 * C23400) * C47579 *
                C42666) *
               C3750) *
              C2848) *
         C47604) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C3242 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47966 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C3242) *
              C47962 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C3242 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
              C47952 +
          ((C43884 * C42664 + C43891 * C42665 +
            (C113 * C23755 + C43887 + C43887 + C47836 * C23757) * C47579 *
                C42666) *
               C47737 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C2480 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47695) *
              C47956 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C2480 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47695) *
              C47943 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C3242 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C2480 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47967 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47964 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C47955 -
           (C44184 * C42666 + C44177 * C42665 + C42890 * C42664) * C47936) *
              C2480 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47964 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47967 -
           (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C47955 +
           (C43530 * C42664 + C44535 * C42665 +
            (C113 * C28099 + C44531 + C44531 + C47836 * C28101) * C47579 *
                C42666) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47733 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47740 +
            (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C3750) *
               C2480 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47740 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47733 -
            (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C3750) *
               C47695) *
              C47874 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47740 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47733 -
            (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C3750) *
               C2480 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47733 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47740 +
            (C43244 * C42664 + C44331 * C42665 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47579 *
                 C42666) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C2480 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47695) *
              C47956 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C2480 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47695) *
              C47943 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C3242 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C2480 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C3242) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C3242 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47966 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C3242) *
              C47962 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C3242 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
              C47952 +
          ((C43884 * C42664 + C43891 * C42665 +
            (C113 * C23755 + C43887 + C43887 + C47836 * C23757) * C47579 *
                C42666) *
               C47737 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C3242) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1392 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1393 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47650 * C1394 -
           ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 *
                C42666 +
            C12165 * C47579 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47650 * C47930) *
              C47874 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1393 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1392 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C1394 +
           (C1412 * C47579 * C42664 + C11831 * C47579 * C42665 +
            (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47579 *
                C42666) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C47888 -
           (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47695) *
              C637 +
          ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
            C2156 * C47579 * C42666) *
               C47650 * C47695 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C47888) *
              C638 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C47888 -
           (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
            C349 * C47579 * C42664) *
               C47650 * C47695) *
              C639 +
          ((C353 * C47579 * C42664 + C940 * C47579 * C42665 +
            (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47579 * C42666) *
               C47650 * C47695 -
           (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
            C166 * C47579 * C42664) *
               C47650 * C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C1792 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1793 +
            (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C47923) *
               C47888 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C1793 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C1792 -
            ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C47579 *
                 C42666 +
             C43530 * C42665 + C43242 * C42664) *
                C47923) *
               C47695) *
              C47874 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C1793 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C1792 -
            (C12563 * C47579 * C42666 + C42893 * C42665 + C42892 * C42664) *
                C47923) *
               C47888 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C1792 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C1793 +
            (C43244 * C42664 + C44331 * C42665 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47579 *
                 C42666) *
                C47923) *
               C47695) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47889 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C1392 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47889) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47889 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
              C1394 +
          ((C43884 * C42664 + C43891 * C42665 +
            (C113 * C23755 + C43887 + C43887 + C47836 * C23757) * C47579 *
                C42666) *
               C47737 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47888 +
           ((C43241 * C42664 + C43242 * C42665 + C13038 * C47579 * C42666) *
                C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C47695) *
              C281 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C47888 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C12768 * C47579 * C42666 + C43244 * C42665 + C43243 * C42664) *
                C47737) *
               C47695) *
              C282 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C47889 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C47888 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C2254 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C2255 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C2256 -
           (C44184 * C42666 + C44177 * C42665 + C42890 * C42664) * C47936) *
              C47888 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C2255 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C2254 -
           (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C2256 +
           (C43530 * C42664 + C44535 * C42665 +
            (C113 * C28099 + C44531 + C44531 + C47836 * C28101) * C47579 *
                C42666) *
               C47936) *
              C47695) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
               C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
                  C47650 * C47632 * C108 -
              (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
               C164 * C47579 * C42664) *
                  C47650 * C47632 * C109 +
              (C165 * C47579 * C42664 + C532 * C47579 * C42665 +
               C535 * C47579 * C42666) *
                  C47650 * C47632 * C110 -
              (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
               C166 * C47579 * C42664) *
                  C47650 * C47632 * C111 +
              (C167 * C47579 * C42664 + C759 * C47579 * C42665 +
               (C113 * C476 + C519 + C519 + C47836 * C496) * C47579 * C42666) *
                  C47650 * C47632 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
                C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
                   C47650 * C47959 -
               (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
                (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                   C47650 * C47947 +
               ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
                C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
                   C47650 * C47920) *
                  C281 +
              ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
                C2156 * C47579 * C42666) *
                   C47650 * C47947 -
               (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
                C164 * C47579 * C42664) *
                   C47650 * C47959 -
               (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
                C351 * C47579 * C42664) *
                   C47650 * C47920) *
                  C282 +
              ((C165 * C47579 * C42664 + C532 * C47579 * C42665 +
                C535 * C47579 * C42666) *
                   C47650 * C47959 -
               (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
                C349 * C47579 * C42664) *
                   C47650 * C47947 +
               (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
                (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 *
                    C42666) *
                   C47650 * C47920) *
                  C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47960 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47949 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47632 * C281 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47949 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47960 -
           (C12563 * C47579 * C42666 + C42893 * C42665 + C42892 * C42664) *
               C47923) *
              C47632 * C282 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47960 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47949 +
           (C42895 * C42664 + C42896 * C42665 +
            (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47579 * C42666) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1050 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C47956 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1051 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1050 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C1050 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C1051 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C42888 * C42665 + C42889 * C42666) *
              C47650 * C1118 -
          (C43242 * C42666 + C43241 * C42665 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
              C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
           C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
              C47650 * C1120 -
          ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 * C42666 +
           C12165 * C47579 * C42665 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
              C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C47579 * C42664 +
           (C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C47579 * C42665 +
           (C113 * C22750 + C43419 + C43419 + C47836 * C22752) * C47579 *
               C42666) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47960 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47949 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C1050 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47949 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47960 -
           ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C47579 *
                C42666 +
            C43530 * C42665 + C43242 * C42664) *
               C47923) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47960 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47949 +
           (C43532 * C42664 + C43539 * C42665 +
            (C113 * C23398 + C43535 + C43535 + C47836 * C23400) * C47579 *
                C42666) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C1792 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1793 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47632 * C47956 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C1793 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C1792 -
           (C12563 * C47579 * C42666 + C42893 * C42665 + C42892 * C42664) *
               C47923) *
              C47632 * C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C1792 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C1793 +
           (C42895 * C42664 + C42896 * C42665 +
            (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47579 * C42666) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C1792 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1793 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47959 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C1793 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C1792 -
           ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C47579 *
                C42666 +
            C43530 * C42665 + C43242 * C42664) *
               C47923) *
              C47947 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C1792 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C1793 +
           (C43532 * C42664 + C43539 * C42665 +
            (C113 * C23398 + C43535 + C43535 + C47836 * C23400) * C47579 *
                C42666) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C42888 * C42665 + C42889 * C42666) *
              C1967 -
          (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1968 +
          (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C1969 -
          (C44184 * C42666 + C44177 * C42665 + C42890 * C42664) * C1970 +
          (C44177 * C42664 + C44184 * C42665 +
           (C113 * C44173 + C44180 + C44180 + C47836 * C44175) * C47579 *
               C42666) *
              C1971) *
         C47632 * C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C1050 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C47889 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C47920) *
              C47874 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C1050 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C12768 * C47579 * C42666 + C43244 * C42665 + C43243 * C42664) *
                C47737) *
               C1051 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47889 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47632 * C637 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47889) *
              C47632 * C638 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47889 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
              C47632 * C639 +
          ((C43093 * C42664 + C43094 * C42665 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47579 * C42666) *
               C47737 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C2254 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C2255 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C2256 -
           (C44184 * C42666 + C44177 * C42665 + C42890 * C42664) * C47936) *
              C47632 * C47874 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C2255 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C2254 -
           (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C2256 +
           (C42893 * C42664 + C44430 * C42665 +
            (C113 * C12541 + C12555 + C12555 + C47836 * C12545) * C47579 *
                C42666) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
               C47650 * C47959 -
           (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C281 +
          ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
            C2156 * C47579 * C42666) *
               C47650 * C47947 -
           (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
            C164 * C47579 * C42664) *
               C47650 * C47959 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C282 +
          ((C165 * C47579 * C42664 + C532 * C47579 * C42665 +
            C535 * C47579 * C42666) *
               C47650 * C47959 -
           (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
            C349 * C47579 * C42664) *
               C47650 * C47947 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
              C47650 * C47632 * C108 -
          (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
           C164 * C47579 * C42664) *
              C47650 * C47632 * C109 +
          (C165 * C47579 * C42664 + C532 * C47579 * C42665 +
           C535 * C47579 * C42666) *
              C47650 * C47632 * C110 -
          (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
           C166 * C47579 * C42664) *
              C47650 * C47632 * C111 +
          (C167 * C47579 * C42664 + C759 * C47579 * C42665 +
           (C113 * C476 + C519 + C519 + C47836 * C496) * C47579 * C42666) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1050 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C47956 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1051 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1050 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C1050 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C1051 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C42888 * C42665 + C42889 * C42666) *
              C47650 * C1118 -
          (C43242 * C42666 + C43241 * C42665 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
              C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
           C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
              C47650 * C1120 -
          ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 * C42666 +
           C12165 * C47579 * C42665 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
              C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C47579 * C42664 +
           (C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C47579 * C42665 +
           (C113 * C22750 + C43419 + C43419 + C47836 * C22752) * C47579 *
               C42666) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C1792 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1793 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47632 * C47956 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C1793 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C1792 -
           (C12563 * C47579 * C42666 + C42893 * C42665 + C42892 * C42664) *
               C47923) *
              C47632 * C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C1792 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C1793 +
           (C42895 * C42664 + C42896 * C42665 +
            (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47579 * C42666) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C1792 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C1793 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47959 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C1793 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C1792 -
           ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C47579 *
                C42666 +
            C43530 * C42665 + C43242 * C42664) *
               C47923) *
              C47947 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C1792 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C1793 +
           (C43532 * C42664 + C43539 * C42665 +
            (C113 * C23398 + C43535 + C43535 + C47836 * C23400) * C47579 *
                C42666) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47888 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47695) *
              C47609 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C47888 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47695) *
              C47618 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C3242 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C47888 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C3242) *
               C47695) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47733 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47740 +
            (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C3750) *
               C47888 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47740 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47733 -
            (C44535 * C42666 + C43530 * C42665 + C43242 * C42664) * C3750) *
               C47695) *
              C2588 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47740 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47733 -
            (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C3750) *
               C47888 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47733 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47740 +
            (C43244 * C42664 + C44331 * C42665 +
             (C113 * C6962 + C13035 + C13035 + C47836 * C6966) * C47579 *
                 C42666) *
                C3750) *
               C47695) *
              C47615)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47959 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C3242 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C47920) *
              C2588 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C47959 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47947 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C3242 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47632 * C47965 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C3242) *
              C47632 * C47958 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C3242 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
              C47632 * C47945 +
          ((C43093 * C42664 + C43094 * C42665 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47579 * C42666) *
               C47737 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47967 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47964 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C47955 -
           (C44184 * C42666 + C44177 * C42665 + C42890 * C42664) * C47936) *
              C47632 * C2588 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47964 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47967 -
           (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C47955 +
           (C42893 * C42664 + C44430 * C42665 +
            (C113 * C12541 + C12555 + C12555 + C47836 * C12545) * C47579 *
                C42666) *
               C47936) *
              C47632 * C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47733 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47740 +
           (C42889 * C42664 + C42890 * C42665 + C44177 * C42666) * C3750) *
              C47632 * C47609 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47740 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47733 -
           (C44430 * C42666 + C42893 * C42665 + C42892 * C42664) * C3750) *
              C47632 * C47618 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47733 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47740 +
           (C42895 * C42664 + C42896 * C42665 +
            (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47579 * C42666) *
               C3750) *
              C47632 * C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C3242 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47632 * C47965 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C3242) *
              C47632 * C47958 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C3242 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
              C47632 * C47945 +
          ((C43093 * C42664 + C43094 * C42665 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47579 * C42666) *
               C47737 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C3242) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C3242 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47959 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C3242) *
               C47947 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C3242 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C47920) *
              C2588 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C3242) *
               C47959 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C3242 -
            (C44331 * C42666 + C43244 * C42665 + C43243 * C42664) * C47737) *
               C47947 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C3242) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C47888 -
           (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47695) *
              C637 +
          ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
            C2156 * C47579 * C42666) *
               C47650 * C47695 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C47888) *
              C638 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C47888 -
           (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
            C349 * C47579 * C42664) *
               C47650 * C47695) *
              C639 +
          ((C353 * C47579 * C42664 + C940 * C47579 * C42665 +
            (C113 * C2142 + C2150 + C2150 + C47836 * C2144) * C47579 * C42666) *
               C47650 * C47695 -
           (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
            C166 * C47579 * C42664) *
               C47650 * C47888) *
              C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1392 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1393 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47650 * C1394 -
           ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 *
                C42666 +
            C12165 * C47579 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47650 * C47930) *
              C47874 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1393 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1392 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C1394 +
           (C1412 * C47579 * C42664 + C11831 * C47579 * C42665 +
            (C113 * C6082 + C12162 + C12162 + C47836 * C6086) * C47579 *
                C42666) *
               C47650 * C47930) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C47888 +
           ((C43241 * C42664 + C43242 * C42665 + C13038 * C47579 * C42666) *
                C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C47695) *
              C281 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C47888 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C12768 * C47579 * C42666 + C43244 * C42665 + C43243 * C42664) *
                C47737) *
               C47695) *
              C282 +
          (((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
                C47889 -
            (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
               C47888 +
           ((C43245 * C42664 + C43246 * C42665 +
             (C113 * C2372 + C2382 + C2382 + C47836 * C2378) * C47579 *
                 C42666) *
                C47737 -
            (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
                C47889) *
               C47695) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47889 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C1392 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47889) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47889 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
              C1394 +
          ((C43884 * C42664 + C43891 * C42665 +
            (C113 * C23755 + C43887 + C43887 + C47836 * C23757) * C47579 *
                C42666) *
               C47737 -
           (C43891 * C42666 + C43884 * C42665 +
            (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
               C47889) *
              C47930) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
               C47650 * C47959 -
           (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C281 +
          ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
            C2156 * C47579 * C42666) *
               C47650 * C47947 -
           (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
            C164 * C47579 * C42664) *
               C47650 * C47959 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C282 +
          ((C165 * C47579 * C42664 + C532 * C47579 * C42665 +
            C535 * C47579 * C42666) *
               C47650 * C47959 -
           (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
            C349 * C47579 * C42664) *
               C47650 * C47947 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
              C47650 * C47632 * C108 -
          (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
           C164 * C47579 * C42664) *
              C47650 * C47632 * C109 +
          (C165 * C47579 * C42664 + C532 * C47579 * C42665 +
           C535 * C47579 * C42666) *
              C47650 * C47632 * C110 -
          (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
           C166 * C47579 * C42664) *
              C47650 * C47632 * C111 +
          (C167 * C47579 * C42664 + C759 * C47579 * C42665 +
           (C113 * C476 + C519 + C519 + C47836 * C496) * C47579 * C42666) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47960 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47949 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C47632 * C281 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47949 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47960 -
           (C12563 * C47579 * C42666 + C42893 * C42665 + C42892 * C42664) *
               C47923) *
              C47632 * C282 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47960 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47949 +
           (C42895 * C42664 + C42896 * C42665 +
            (C113 * C1977 + C1996 + C1996 + C47836 * C1989) * C47579 * C42666) *
               C47923) *
              C47632 * C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1050 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C47956 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1051 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1050 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C1050 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C1051 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C42888 * C42665 + C42889 * C42666) *
              C47650 * C1118 -
          (C43242 * C42666 + C43241 * C42665 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
              C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
           C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
              C47650 * C1120 -
          ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 * C42666 +
           C12165 * C47579 * C42665 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
              C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C47579 * C42664 +
           (C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C47579 * C42665 +
           (C113 * C22750 + C43419 + C43419 + C47836 * C22752) * C47579 *
               C42666) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47960 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47949 +
           (C42889 * C42664 + C42890 * C42665 + C12564 * C47579 * C42666) *
               C47923) *
              C1050 +
          ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47949 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47960 -
           ((C113 * C6961 + C13034 + C13034 + C47836 * C6965) * C47579 *
                C42666 +
            C43530 * C42665 + C43242 * C42664) *
               C47923) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C43531 * C42665 + C43532 * C42666) *
               C47960 -
           (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47949 +
           (C43532 * C42664 + C43539 * C42665 +
            (C113 * C23398 + C43535 + C43535 + C47836 * C23400) * C47579 *
                C42666) *
               C47923) *
              C47920) *
         C47604) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47889 -
           (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
              C47632 * C637 +
          ((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47889) *
              C47632 * C638 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47889 -
           (C42896 * C42666 + C42895 * C42665 + C42894 * C42664) * C47737) *
              C47632 * C639 +
          ((C43093 * C42664 + C43094 * C42665 +
            (C113 * C2258 + C2266 + C2266 + C47836 * C2260) * C47579 * C42666) *
               C47737 -
           (C43094 * C42666 + C43093 * C42665 + C166 * C47579 * C42664) *
               C47889) *
              C47632 * C47924)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
             C42888 * C42665 + C42889 * C42666) *
                C47889 -
            (C42890 * C42666 + C42889 * C42665 + C42888 * C42664) * C47737) *
               C1050 +
           ((C43241 * C42664 + C43242 * C42665 + C43530 * C42666) * C47737 -
            (C43242 * C42666 + C43241 * C42665 +
             (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
                C47889) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
             C43531 * C42665 + C43532 * C42666) *
                C47889 -
            (C43539 * C42666 + C43532 * C42665 + C43531 * C42664) * C47737) *
               C47920) *
              C47874 +
          (((C42891 * C42664 + C42892 * C42665 + C42893 * C42666) * C47737 -
            (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
                C47889) *
               C1050 +
           ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
                C47889 -
            (C12768 * C47579 * C42666 + C43244 * C42665 + C43243 * C42664) *
                C47737) *
               C1051 +
           ((C43784 * C42664 + C43785 * C42665 +
             (C113 * C7454 + C11680 + C11680 + C47836 * C7458) * C47579 *
                 C42666) *
                C47737 -
            (C43785 * C42666 + C43784 * C42665 + C351 * C47579 * C42664) *
                C47889) *
               C47920) *
              C47615)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
              C47650 * C47632 * C108 -
          (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
           C164 * C47579 * C42664) *
              C47650 * C47632 * C109 +
          (C165 * C47579 * C42664 + C532 * C47579 * C42665 +
           C535 * C47579 * C42666) *
              C47650 * C47632 * C110 -
          (C537 * C47579 * C42666 + C536 * C47579 * C42665 +
           C166 * C47579 * C42664) *
              C47650 * C47632 * C111 +
          (C167 * C47579 * C42664 + C759 * C47579 * C42665 +
           (C113 * C476 + C519 + C519 + C47836 * C496) * C47579 * C42666) *
              C47650 * C47632 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C10822 * C47579 * C42665 + C10823 * C47579 * C42666) *
               C47650 * C47959 -
           (C11689 * C47579 * C42666 + C11291 * C47579 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C47947 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C281 +
          ((C350 * C47579 * C42664 + C938 * C47579 * C42665 +
            C2156 * C47579 * C42666) *
               C47650 * C47947 -
           (C534 * C47579 * C42666 + C533 * C47579 * C42665 +
            C164 * C47579 * C42664) *
               C47650 * C47959 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C282 +
          ((C165 * C47579 * C42664 + C532 * C47579 * C42665 +
            C535 * C47579 * C42666) *
               C47650 * C47959 -
           (C2155 * C47579 * C42666 + C939 * C47579 * C42665 +
            C349 * C47579 * C42664) *
               C47650 * C47947 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
            C42888 * C42665 + C42889 * C42666) *
               C47650 * C1050 -
           (C43242 * C42666 + C43241 * C42665 +
            (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
               C47650 * C1051 +
           ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
            C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
               C47650 * C47920) *
              C47956 +
          ((C350 * C47579 * C42664 + C43243 * C42665 + C43244 * C42666) *
               C47650 * C1051 -
           (C42892 * C42666 + C42891 * C42665 + C164 * C47579 * C42664) *
               C47650 * C1050 -
           (C11691 * C47579 * C42666 + C1572 * C47579 * C42665 +
            C351 * C47579 * C42664) *
               C47650 * C47920) *
              C47943 +
          ((C165 * C47579 * C42664 + C42894 * C42665 + C42895 * C42666) *
               C47650 * C1050 -
           (C43246 * C42666 + C43245 * C42665 + C349 * C47579 * C42664) *
               C47650 * C1051 +
           (C352 * C47579 * C42664 + C1571 * C47579 * C42665 +
            (C113 * C1266 + C1294 + C1294 + C47836 * C1284) * C47579 * C42666) *
               C47650 * C47920) *
              C47914)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47836 * C129) * C47579 * C42664 +
           C42888 * C42665 + C42889 * C42666) *
              C47650 * C1118 -
          (C43242 * C42666 + C43241 * C42665 +
           (C113 * C286 + C321 + C321 + C47836 * C306) * C47579 * C42664) *
              C47650 * C1119 +
          ((C113 * C287 + C322 + C322 + C47836 * C307) * C47579 * C42664 +
           C11690 * C47579 * C42665 + C11692 * C47579 * C42666) *
              C47650 * C1120 -
          ((C113 * C6081 + C12161 + C12161 + C47836 * C6085) * C47579 * C42666 +
           C12165 * C47579 * C42665 +
           (C113 * C1126 + C1145 + C1145 + C47836 * C1138) * C47579 * C42664) *
              C47650 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C47836 * C1139) * C47579 * C42664 +
           (C113 * C6577 + C11521 + C11521 + C47836 * C6581) * C47579 * C42665 +
           (C113 * C22750 + C43419 + C43419 + C47836 * C22752) * C47579 *
               C42666) *
              C47650 * C1122) *
         C47604) /
            (p * q * std::sqrt(p + q));
}
